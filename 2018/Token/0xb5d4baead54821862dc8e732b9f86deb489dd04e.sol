['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will receive the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will receive the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint64 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   * Deprecated: please use TokenTimelock#release instead.\n', '   */\n', '  function claim() public {\n', '    require(msg.sender == beneficiary);\n', '    release();\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', 'contract StarterCoin is MintableToken, LimitedTransferToken {\n', '\n', '    string public constant name = "StarterCoin";\n', '    string public constant symbol = "STAC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public endTimeICO;\n', '    address public bountyWallet;\n', '\n', '    function StarterCoin(uint256 _endTimeICO, address _bountyWallet) {\n', '        endTimeICO = _endTimeICO;\n', '        bountyWallet = _bountyWallet;\n', '    }\n', '\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        // allow transfers after the end of ICO\n', '        return (time > endTimeICO) || (holder == bountyWallet) ? balanceOf(holder) : 0;\n', '    }\n', '\n', '}\n', '\n', 'contract StarterCoinCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    uint256[11] public timings;\n', '    uint8[10] public bonuses;\n', '\n', '    // address where funds are collected\n', '    address public wallet89;\n', '    address public wallet10;\n', '    address public wallet1;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public constant RATE = 4500;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    uint256 public tokenSold;\n', '\n', '    uint256 public constant CAP = 154622 ether;\n', '    uint256 public constant TOKEN_CAP = 695797500 * (10 ** uint256(18)); // 45000000+62797500+588000000 STC\n', '\n', '    TokenTimelock public devTokenTimelock;\n', '    TokenTimelock public foundersTokenTimelock;\n', '    TokenTimelock public teamTokenTimelock;\n', '    TokenTimelock public advisersTokenTimelock;\n', '\n', '    uint256 public constant BOUNTY_SUPPLY = 78400000 * (10 ** uint256(18));\n', '    uint256 public constant DEV_SUPPLY = 78400000 * (10 ** uint256(18));\n', '    uint256 public constant FOUNDERS_SUPPLY = 59600000 * (10 ** uint256(18));\n', '    uint256 public constant TEAM_SUPPLY = 39200000 * (10 ** uint256(18));\n', '    uint256 public constant ADVISERS_SUPPLY = 29400000 * (10 ** uint256(18));\n', '\n', '\n', '    function StarterCoinCrowdsale(\n', '        uint256 [11] _timings,\n', '        uint8 [10] _bonuses,\n', '        address [3] _wallets,\n', '        address bountyWallet,\n', '        address devWallet,\n', '        uint64 devReleaseTime,\n', '        address foundersWallet,\n', '        uint64 foundersReleaseTime,\n', '        address teamWallet,\n', '        uint64 teamReleaseTime,\n', '        address advisersWallet,\n', '        uint64 advisersReleaseTime\n', '        ) {\n', '            require(_timings[0] >= now);\n', '\n', '            for(uint i = 1; i < timings.length; i++) {\n', '              require(_timings[i] >= _timings[i-1]);\n', '            }\n', '\n', '            timings = _timings;\n', '            bonuses = _bonuses;\n', '            startTime = timings[0];\n', '            endTime = timings[timings.length-1];\n', '\n', '            require(devReleaseTime >= endTime);\n', '            require(foundersReleaseTime >= endTime);\n', '            require(teamReleaseTime >= endTime);\n', '            require(advisersReleaseTime >= endTime);\n', '\n', '            require(_wallets[0] != 0x0);\n', '            require(_wallets[1] != 0x0);\n', '            require(_wallets[2] != 0x0);\n', '\n', '            require(bountyWallet != 0x0);\n', '            require(devWallet != 0x0);\n', '            require(foundersWallet != 0x0);\n', '            require(teamWallet != 0x0);\n', '            require(advisersWallet != 0x0);\n', '\n', '            wallet89 = _wallets[0];\n', '            wallet10 = _wallets[1];\n', '            wallet1 = _wallets[2];\n', '\n', '            token = new StarterCoin(endTime, bountyWallet);\n', '\n', '            token.mint(bountyWallet, BOUNTY_SUPPLY);\n', '\n', '            devTokenTimelock = new TokenTimelock(token, devWallet, devReleaseTime);\n', '            token.mint(devTokenTimelock, DEV_SUPPLY);\n', '\n', '            foundersTokenTimelock = new TokenTimelock(token, foundersWallet, foundersReleaseTime);\n', '            token.mint(foundersTokenTimelock, FOUNDERS_SUPPLY);\n', '\n', '            teamTokenTimelock = new TokenTimelock(token, teamWallet, teamReleaseTime);\n', '            token.mint(teamTokenTimelock, TEAM_SUPPLY);\n', '\n', '            advisersTokenTimelock = new TokenTimelock(token, advisersWallet, advisersReleaseTime);\n', '            token.mint(advisersTokenTimelock, ADVISERS_SUPPLY);\n', '        }\n', '\n', '        /**\n', '        * event for token purchase logging\n', '        * @param purchaser who paid for the tokens\n', '        * @param beneficiary who got the tokens\n', '        * @param value weis paid for purchase\n', '        * @param amount amount of tokens purchased\n', '        */\n', '        event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '        // creates the token to be sold.\n', '        // override this method to have crowdsale of a specific mintable token.\n', '        function createTokenContract() internal returns (MintableToken) {\n', '            return new MintableToken();\n', '        }\n', '\n', '\n', '        // fallback function can be used to buy tokens\n', '        function () payable {\n', '            buyTokens(msg.sender);\n', '        }\n', '\n', '        // low level token purchase function\n', '        function buyTokens(address beneficiary) public payable {\n', '            require(beneficiary != 0x0);\n', '            require(msg.value >= 100); // required for proper splitting funds between 3 wallets\n', '\n', '            uint256 weiAmount = msg.value;\n', '\n', '            // calculate period bonus\n', '            uint256 periodBonus;\n', '\n', '            for (uint8 i = 1; i < timings.length; i++) {\n', '              if ( now < timings[i] ) {\n', '                periodBonus = RATE.mul(uint256(bonuses[i-1])).div(100);\n', '                break;\n', '              }\n', '            }\n', '\n', '            // calculate bulk purchase bonus\n', '            uint256 bulkPurchaseBonus;\n', '            if (weiAmount >= 50 ether) {\n', '            bulkPurchaseBonus = 3600; // 80% bonus for RATE 4500\n', '            } else if (weiAmount >= 30 ether) {\n', '            bulkPurchaseBonus = 3150; // 70% bonus for RATE 4500\n', '            } else if (weiAmount >= 10 ether) {\n', '            bulkPurchaseBonus = 2250; // 50% bonus for RATE 4500\n', '            } else if (weiAmount >= 5 ether) {\n', '            bulkPurchaseBonus = 1350; // 30% bonus for RATE 4500\n', '            } else if (weiAmount >= 3 ether) {\n', '            bulkPurchaseBonus = 450; // 10% bonus for RATE 4500\n', '            }\n', '\n', '            uint256 actualRate = RATE.add(periodBonus).add(bulkPurchaseBonus);\n', '\n', '            // calculate token amount to be created\n', '            uint256 tokens = weiAmount.mul(actualRate);\n', '\n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            tokenSold = tokenSold.add(tokens);\n', '\n', '            require(validPurchase());\n', '\n', '            token.mint(beneficiary, tokens);\n', '            TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '            forwardFunds();\n', '        }\n', '\n', '        // send ether to the fund collection wallet\n', '        // override to create custom fund forwarding mechanisms\n', '        function forwardFunds() internal {\n', '          uint256 wei89 = msg.value.mul(89).div(100);\n', '          uint256 wei10 = msg.value.div(10);\n', '          uint256 wei1 = msg.value.sub(wei89).sub(wei10);\n', '          wallet89.transfer(wei89);\n', '          wallet10.transfer(wei10);\n', '          wallet1.transfer(wei1);\n', '        }\n', '\n', '        // add off chain contribution. BTC address of contribution added for transparency\n', '        function addOffChainContribution(address beneficiar, uint256 weiAmount, uint256 tokenAmount, string btcAddress) onlyOwner public {\n', '            require(beneficiar != 0x0);\n', '            require(weiAmount > 0);\n', '            require(tokenAmount > 0);\n', '            weiRaised += weiAmount;\n', '            tokenSold += tokenAmount;\n', '            require(validPurchase());\n', '            token.mint(beneficiar, tokenAmount);\n', '        }\n', '\n', '\n', '        // overriding Crowdsale#validPurchase to add extra CAP logic\n', '        // @return true if investors can buy at the moment\n', '        function validPurchase() internal constant returns (bool) {\n', '            bool withinCap = weiRaised <= CAP;\n', '            bool withinPeriod = now >= startTime && now <= endTime;\n', '            bool withinTokenCap = tokenSold <= TOKEN_CAP;\n', '            return withinPeriod && withinCap && withinTokenCap;\n', '        }\n', '\n', '        // overriding Crowdsale#hasEnded to add CAP logic\n', '        // @return true if crowdsale event has ended\n', '        function hasEnded() public constant returns (bool) {\n', '            bool capReached = weiRaised >= CAP;\n', '            return now > endTime || capReached;\n', '        }\n', '\n', '    }']