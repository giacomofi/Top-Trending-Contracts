['pragma solidity 0.4.21;\n', '\n', 'contract Maths {\n', '\n', '    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function Div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned is Maths {\n', '\n', '    address public owner;\n', '    address public collector;\n', '    bool public transfer_status = true;\n', '    event OwnershipChanged(address indexed _invoker, address indexed _newOwner);        \n', '    event TransferStatusChanged(bool _newStatus);\n', '    uint256 public TotalSupply = 500000000000000000000000000;\n', '    mapping(address => uint256) UserBalances;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '        \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '        collector = msg.sender;\n', '    }\n', '\n', '    modifier _onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _AddressToMake) public _onlyOwner returns (bool _success) {\n', '\n', '        owner = _AddressToMake;\n', '        emit OwnershipChanged(msg.sender, _AddressToMake);\n', '\n', '        return true;\n', '\n', '    }\n', '    \n', '    function ChangeCollector(address _AddressToMake) public _onlyOwner returns (bool _success) {\n', '\n', '        collector = _AddressToMake;\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function ChangeTransferStatus(bool _newStatus) public _onlyOwner returns (bool _success) {\n', '\n', '        transfer_status = _newStatus;\n', '        emit TransferStatusChanged(_newStatus);\n', '    \n', '        return true;\n', '    \n', '    }\n', '\t\n', '   function Mint(uint256 _amount) public _onlyOwner returns (bool _success) {\n', '\n', '        TotalSupply = Add(TotalSupply, _amount);\n', '        UserBalances[msg.sender] = Add(UserBalances[msg.sender], _amount);\n', '\t\n', '    \temit Transfer(address(0), msg.sender, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function Burn(uint256 _amount) public _onlyOwner returns (bool _success) {\n', '\n', '        require(Sub(UserBalances[msg.sender], _amount) >= 0);\n', '        TotalSupply = Sub(TotalSupply, _amount);\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '\t\n', '\t    emit Transfer(msg.sender, address(0), _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '        \n', '}\n', '\n', 'contract Core is Owned {\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event OrderPaid(uint256 indexed _orderID, uint256 _value);\n', '\n', '    string public name = "CoinMarketAlert";\n', '    string public symbol = "CMA";\n', '    uint256 public decimals = 18;\n', '    mapping(uint256 => bool) public OrdersPaid;\n', '    mapping(address => mapping(address => uint256)) public Allowance;\n', '\n', '    function Core() public {\n', '\n', '        UserBalances[msg.sender] = TotalSupply;\n', '\n', '    }\n', '\n', '    function _transferCheck(address _sender, address _recipient, uint256 _amount) private view returns (bool success) {\n', '\n', '        require(transfer_status == true);\n', '        require(_amount > 0);\n', '        require(_recipient != address(0));\n', '        require(UserBalances[_sender] >= _amount);\n', '        require(Sub(UserBalances[_sender], _amount) >= 0);\n', '        require(Add(UserBalances[_recipient], _amount) > UserBalances[_recipient]);\n', '        \n', '        return true;\n', '\n', '    }\n', '    \n', '    function payOrder(uint256 _orderID, uint256 _amount) public returns (bool status) {\n', '        \n', '        require(OrdersPaid[_orderID] == false);\n', '        require(_transferCheck(msg.sender, collector, _amount));\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '        UserBalances[collector] = Add(UserBalances[collector], _amount);\n', '\t\tOrdersPaid[_orderID] = true;\n', '        emit OrderPaid(_orderID,  _amount);\n', '\t\temit Transfer(msg.sender, collector, _amount);\n', '        \n', '        return true;\n', '        \n', '\n', '    }\n', '\n', '    function transfer(address _receiver, uint256 _amount) public returns (bool status) {\n', '\n', '        require(_transferCheck(msg.sender, _receiver, _amount));\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '        UserBalances[_receiver] = Add(UserBalances[_receiver], _amount);\n', '        emit Transfer(msg.sender, _receiver, _amount);\n', '        \n', '        return true;\n', '\n', '    }\n', '\n', '    function transferFrom(address _owner, address _receiver, uint256 _amount) public returns (bool status) {\n', '\n', '        require(_transferCheck(_owner, _receiver, _amount));\n', '        require(Sub(Allowance[_owner][msg.sender], _amount) >= 0);\n', '        Allowance[_owner][msg.sender] = Sub(Allowance[_owner][msg.sender], _amount);\n', '        UserBalances[_owner] = Sub(UserBalances[_owner], _amount);\n', '        UserBalances[_receiver] = Add(UserBalances[_receiver], _amount);\n', '        emit Transfer(_owner, _receiver, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function multiTransfer(address[] _destinations, uint256[] _values) public returns (uint256) {\n', '\n', '\t\tfor (uint256 i = 0; i < _destinations.length; i++) {\n', '            require(transfer(_destinations[i], _values[i]));\n', '        }\n', '\n', '        return (i);\n', '\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns (bool approved) {\n', '\n', '        require(_amount >= 0);\n', '        Allowance[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '\n', '        return UserBalances[_address];\n', '\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 allowed) {\n', '\n', '        return Allowance[_owner][_spender];\n', '\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 supply) {\n', '\n', '        return TotalSupply;\n', '\n', '    }\n', '\n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract Maths {\n', '\n', '    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function Div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned is Maths {\n', '\n', '    address public owner;\n', '    address public collector;\n', '    bool public transfer_status = true;\n', '    event OwnershipChanged(address indexed _invoker, address indexed _newOwner);        \n', '    event TransferStatusChanged(bool _newStatus);\n', '    uint256 public TotalSupply = 500000000000000000000000000;\n', '    mapping(address => uint256) UserBalances;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '        \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '        collector = msg.sender;\n', '    }\n', '\n', '    modifier _onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _AddressToMake) public _onlyOwner returns (bool _success) {\n', '\n', '        owner = _AddressToMake;\n', '        emit OwnershipChanged(msg.sender, _AddressToMake);\n', '\n', '        return true;\n', '\n', '    }\n', '    \n', '    function ChangeCollector(address _AddressToMake) public _onlyOwner returns (bool _success) {\n', '\n', '        collector = _AddressToMake;\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function ChangeTransferStatus(bool _newStatus) public _onlyOwner returns (bool _success) {\n', '\n', '        transfer_status = _newStatus;\n', '        emit TransferStatusChanged(_newStatus);\n', '    \n', '        return true;\n', '    \n', '    }\n', '\t\n', '   function Mint(uint256 _amount) public _onlyOwner returns (bool _success) {\n', '\n', '        TotalSupply = Add(TotalSupply, _amount);\n', '        UserBalances[msg.sender] = Add(UserBalances[msg.sender], _amount);\n', '\t\n', '    \temit Transfer(address(0), msg.sender, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function Burn(uint256 _amount) public _onlyOwner returns (bool _success) {\n', '\n', '        require(Sub(UserBalances[msg.sender], _amount) >= 0);\n', '        TotalSupply = Sub(TotalSupply, _amount);\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '\t\n', '\t    emit Transfer(msg.sender, address(0), _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '        \n', '}\n', '\n', 'contract Core is Owned {\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event OrderPaid(uint256 indexed _orderID, uint256 _value);\n', '\n', '    string public name = "CoinMarketAlert";\n', '    string public symbol = "CMA";\n', '    uint256 public decimals = 18;\n', '    mapping(uint256 => bool) public OrdersPaid;\n', '    mapping(address => mapping(address => uint256)) public Allowance;\n', '\n', '    function Core() public {\n', '\n', '        UserBalances[msg.sender] = TotalSupply;\n', '\n', '    }\n', '\n', '    function _transferCheck(address _sender, address _recipient, uint256 _amount) private view returns (bool success) {\n', '\n', '        require(transfer_status == true);\n', '        require(_amount > 0);\n', '        require(_recipient != address(0));\n', '        require(UserBalances[_sender] >= _amount);\n', '        require(Sub(UserBalances[_sender], _amount) >= 0);\n', '        require(Add(UserBalances[_recipient], _amount) > UserBalances[_recipient]);\n', '        \n', '        return true;\n', '\n', '    }\n', '    \n', '    function payOrder(uint256 _orderID, uint256 _amount) public returns (bool status) {\n', '        \n', '        require(OrdersPaid[_orderID] == false);\n', '        require(_transferCheck(msg.sender, collector, _amount));\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '        UserBalances[collector] = Add(UserBalances[collector], _amount);\n', '\t\tOrdersPaid[_orderID] = true;\n', '        emit OrderPaid(_orderID,  _amount);\n', '\t\temit Transfer(msg.sender, collector, _amount);\n', '        \n', '        return true;\n', '        \n', '\n', '    }\n', '\n', '    function transfer(address _receiver, uint256 _amount) public returns (bool status) {\n', '\n', '        require(_transferCheck(msg.sender, _receiver, _amount));\n', '        UserBalances[msg.sender] = Sub(UserBalances[msg.sender], _amount);\n', '        UserBalances[_receiver] = Add(UserBalances[_receiver], _amount);\n', '        emit Transfer(msg.sender, _receiver, _amount);\n', '        \n', '        return true;\n', '\n', '    }\n', '\n', '    function transferFrom(address _owner, address _receiver, uint256 _amount) public returns (bool status) {\n', '\n', '        require(_transferCheck(_owner, _receiver, _amount));\n', '        require(Sub(Allowance[_owner][msg.sender], _amount) >= 0);\n', '        Allowance[_owner][msg.sender] = Sub(Allowance[_owner][msg.sender], _amount);\n', '        UserBalances[_owner] = Sub(UserBalances[_owner], _amount);\n', '        UserBalances[_receiver] = Add(UserBalances[_receiver], _amount);\n', '        emit Transfer(_owner, _receiver, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function multiTransfer(address[] _destinations, uint256[] _values) public returns (uint256) {\n', '\n', '\t\tfor (uint256 i = 0; i < _destinations.length; i++) {\n', '            require(transfer(_destinations[i], _values[i]));\n', '        }\n', '\n', '        return (i);\n', '\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns (bool approved) {\n', '\n', '        require(_amount >= 0);\n', '        Allowance[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '\n', '        return UserBalances[_address];\n', '\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 allowed) {\n', '\n', '        return Allowance[_owner][_spender];\n', '\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 supply) {\n', '\n', '        return TotalSupply;\n', '\n', '    }\n', '\n', '}']
