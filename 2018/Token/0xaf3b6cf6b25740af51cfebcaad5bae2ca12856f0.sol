['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  uint256 totalRecycledTokens_; \n', '\n', '  bool public paused = false; \n', '\n', '  bool public tgeMode = false;\n', '\n', '  address public ceoAddress;\n', '\n', '  address public marketplaceAddress;\n', '\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  modifier whenNotPaused() { \n', '        require(!paused);\n', '        _;\n', '  }\n', '  \n', '  modifier whenPaused() { \n', '        require(paused);\n', '        _;\n', '  }\n', '\n', '  modifier onlyCEO() {\n', '      require(msg.sender == ceoAddress);\n', '      _;  \n', '  }\n', '\n', '  function pause() public onlyCEO() whenNotPaused() {\n', '      paused = true;\n', '  }\n', '\n', '  function unpause() public onlyCEO() whenPaused() {\n', '      paused = false;\n', '  }\n', '\n', '  modifier inTGE() {\n', '      require(tgeMode);\n', '      _;  \n', '  }\n', '\n', '  modifier afterTGE() {\n', '      require(!tgeMode);\n', '      _;  \n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused() returns (bool) {\n', '    require( !tgeMode || (msg.sender == ceoAddress) ); \n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ExoToken is ERC20, BasicToken {\n', '\n', '  string public name = "ExoToken";\n', '\n', '  string public symbol = "EXT"; \n', '\n', '  uint8 public decimals = 18;\n', '\n', '  uint256 public MaxNumTokens = 175000000000000000000000000;\n', '  \n', '  uint256 private priceOfToken;\n', '\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => bool) private tgeUserMap;\n', '  address[] private tgeUserList;\n', '\n', '  event Mint(address _to, uint256 _amount);\n', '  event RecycleTokens(uint256 value);\n', '\n', '\n', '  uint32 public bonusFactor_1 = 5; \n', '  uint32 public bonusFactor_2 = 10;\n', '  uint32 public bonusFactor_3 = 20;\n', '\n', '\n', '  function setBonusFactors(uint32 factor_1, uint32 factor_2, uint32 factor_3) public onlyCEO() inTGE() {\n', '    bonusFactor_1 = factor_1;\n', '    bonusFactor_2 = factor_2;\n', '    bonusFactor_3 = factor_3;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function ExoToken(uint256 initialSupply, uint256 initialPriceOfToken) public {  \n', '    // set initialSupply to e.g. 82,250,000\n', '    require(initialPriceOfToken > 0);\n', '    ceoAddress = msg.sender;\n', '    marketplaceAddress = msg.sender;\n', '    priceOfToken = initialPriceOfToken; \n', '    balances[msg.sender] = initialSupply;\n', '    totalSupply_ = initialSupply;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);    \n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused() afterTGE() returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) whenNotPaused() public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setPriceOfToken(uint256 newPriceOfToken) public onlyCEO() {\n', '    require(newPriceOfToken > 0);\n', '    priceOfToken = newPriceOfToken;\n', '  }\n', '\n', '  function getPriceOfToken() public view returns(uint256) {\n', '    return priceOfToken;\n', '  }\n', '\n', '  function getNumRecycledTokens() public view returns(uint256) {\n', '    return totalRecycledTokens_;\n', '  }\n', '  \n', '\n', '  function recycleTokensForPayment(uint256 numTokens, uint256 payment) public onlyCEO() { \n', '    require(payment <= this.balance); \n', '    recycleTokens(numTokens); \n', '    ceoAddress.transfer(payment);\n', '  }\n', '  \n', '\n', '  function recycleTokens(uint256 numTokens) public onlyCEO() { \n', '    // allow more tokens to be minted\n', '    require(numTokens <= balances[ceoAddress]);\n', '\n', '    totalSupply_ = totalSupply_.sub(numTokens);\n', '    balances[ceoAddress] = balances[ceoAddress].sub(numTokens);\n', '    totalRecycledTokens_ = totalRecycledTokens_.add(numTokens);\n', '    RecycleTokens(numTokens);\n', '  }\n', '\n', '\n', '  uint256 public firstBonusStep = 1 ether;\n', '  uint256 public secondBonusStep = 5 ether;\n', '  uint256 public thirdBonusStep = 10 ether;\n', '\n', '  function setBonusSteps(uint256 step_1, uint256 step_2, uint256 step_3) public onlyCEO() inTGE() {\n', '    firstBonusStep = step_1;\n', '    secondBonusStep = step_2;\n', '    thirdBonusStep = step_3;\n', '  }\n', '\n', '\n', '\n', '  function purchase() public payable whenNotPaused() inTGE() {\n', '    /// when in TGE - buy tokens (from CEO account) for ETH\n', '\n', '    uint256 amount = msg.value.div(priceOfToken);\n', '    require(amount > 0);\n', '        \n', '    if (tgeUserMap[ msg.sender] == false) { // In Solidity, mapping will return the default value for each key type\n', '      tgeUserMap[ msg.sender] = true;\n', '      tgeUserList.push( msg.sender);\n', '    }\n', '\n', '    uint bonusFactor;\n', '    if (msg.value < firstBonusStep) {\n', '      bonusFactor = 100; // no bonus  \n', '    } else if (msg.value < secondBonusStep) {\n', '      bonusFactor = 100 + bonusFactor_1;\n', '    } else if (msg.value < thirdBonusStep) {\n', '      bonusFactor = 100 + bonusFactor_2;\n', '    } else {\n', '      bonusFactor = 100 + bonusFactor_3;\n', '    }\n', '    \n', '    amount = amount.mul(bonusFactor).div(100);\n', '    amount = amount.mul(1000000000000000000);\n', '    \n', '     /// mint requested amount of tokens\n', '    \n', '    doMint(msg.sender, amount);\n', '\n', '    /// Transfer tokens from ceo to msg.sender\n', '    // require(amount <= balances[ceoAddress]); \n', '    // balances[ceoAddress] = balances[ceoAddress].sub(amount);\n', '    // balances[msg.sender] = balances[msg.sender].add(amount);\n', '    // Transfer(ceoAddress, msg.sender, amount);\n', '  }\n', '\n', '\n', ' /// mint function - either by CEO or from site\n', ' function mintTokens(address buyerAddress, uint256 amount) public whenNotPaused() returns (bool) {  \n', '    require(msg.sender == marketplaceAddress || msg.sender == ceoAddress); \n', '    return doMint(buyerAddress, amount);\n', '  }\n', '\n', ' function doMint(address buyerAddress, uint256 amount) private whenNotPaused() returns (bool) {\n', '    require( totalSupply_.add(amount) <= MaxNumTokens);\n', '    totalSupply_ = totalSupply_.add(amount);\n', '    balances[buyerAddress] = balances[buyerAddress].add(amount);\n', '    Mint(buyerAddress, amount);\n', '    return true;\n', '  }\n', '\n', '  \n', '\n', '  function getNumTGEUsers() public view returns (uint256) {\n', '      return tgeUserList.length;\n', '  }\n', '\n', '  function getTGEUser( uint32 ind) public view returns (address) {\n', '      return tgeUserList[ind];\n', '  }\n', '\n', '\n', '  function payout() public onlyCEO {\n', '      ceoAddress.transfer(this.balance);\n', '  }\n', '\n', '  function payoutPartial(uint256 amount) public onlyCEO {\n', '      require(amount <= this.balance);\n', '      ceoAddress.transfer(amount);  \n', '  }\n', '\n', '  function setTGEMode(bool newMode) public onlyCEO {\n', '      tgeMode = newMode;\n', '  }\n', '\n', '  function setCEO(address newCEO) public onlyCEO {\n', '      require(newCEO != address(0));\n', '      uint256 ceoTokens = balances[ceoAddress];\n', '      balances[ceoAddress] = 0;\n', '      balances[newCEO] = balances[newCEO].add(ceoTokens);\n', '      ceoAddress = newCEO; \n', '  }\n', '\n', '  function setMarketplaceAddress(address newMarketplace) public onlyCEO {\n', '    marketplaceAddress = newMarketplace;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) whenNotPaused() public returns (bool) {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused() public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      if (a == 0) {\n', '        return 0;\n', '      }\n', '      uint256 c = a * b;\n', '      assert(c / a == b);\n', '      return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint256 c = a / b;\n', "      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '      return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}']