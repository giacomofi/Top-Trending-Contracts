['pragma solidity ^0.4.4;\n', '\n', '/*\n', '\n', ' _____ ___ ______ _____ _____ _____ _____    ___ ____________ _____\n', '|_   _/ _ \\| ___ |  __ |  ___|_   _|  _  |  / _ \\| ___ | ___ /  ___|\n', '  | |/ /_\\ | |_/ | |  \\| |__   | | | | | | / /_\\ | |_/ | |_/ \\ `--.\n', '  | ||  _  |    /| | __|  __|  | | | | | | |  _  |  __/|  __/ `--. \\\n', '  | || | | | |\\ \\| |_\\ | |___  | | \\ \\_/ / | | | | |   | |   /\\__/ /\n', '  \\_/\\_| |_\\_| \\_|\\____\\____/  \\_/  \\___/  \\_| |_\\_|   \\_|   \\____/\n', '\n', '*/\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require( now > 1548979261 );\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract AtpcCoin is StandardToken {\n', '\n', '    /* Public variables of the token */\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    string public version = &#39;H1.0&#39;;\n', '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', '    uint256 public totalEthInWei;\n', '    address public fundsWallet;           // Where should the raised ETH go?\n', '    address public owner;\n', '    bool public isICOOver;\n', '    bool public isICOActive;\n', '\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = 190800000000000000000000000;\n', '        totalSupply = 190800000000000000000000000;\n', '        name = "ATPC Coin";\n', '        decimals = 18;\n', '        symbol = "ATPC";\n', '        unitsOneEthCanBuy = 1460;\n', '        fundsWallet = msg.sender;\n', '        owner = msg.sender;\n', '        isICOOver = false;\n', '        isICOActive = true;\n', '    }\n', '\n', '    modifier ownerFunc(){\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    function transferAdmin(address _to, uint256 _value) ownerFunc returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function changeICOState(bool isActive, bool isOver) public ownerFunc payable {\n', '      isICOOver = isOver;\n', '      isICOActive = isActive;\n', '    }\n', '\n', '    function changePrice(uint256 price) public ownerFunc payable {\n', '      unitsOneEthCanBuy = price;\n', '    }\n', '\n', '    function() public payable {\n', '        require(!isICOOver);\n', '        require(isICOActive);\n', '\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '        emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '/*\n', '\n', ' _____ ___ ______ _____ _____ _____ _____    ___ ____________ _____\n', '|_   _/ _ \\| ___ |  __ |  ___|_   _|  _  |  / _ \\| ___ | ___ /  ___|\n', '  | |/ /_\\ | |_/ | |  \\| |__   | | | | | | / /_\\ | |_/ | |_/ \\ `--.\n', '  | ||  _  |    /| | __|  __|  | | | | | | |  _  |  __/|  __/ `--. \\\n', '  | || | | | |\\ \\| |_\\ | |___  | | \\ \\_/ / | | | | |   | |   /\\__/ /\n', '  \\_/\\_| |_\\_| \\_|\\____\\____/  \\_/  \\___/  \\_| |_\\_|   \\_|   \\____/\n', '\n', '*/\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require( now > 1548979261 );\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract AtpcCoin is StandardToken {\n', '\n', '    /* Public variables of the token */\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = 'H1.0';\n", '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', '    uint256 public totalEthInWei;\n', '    address public fundsWallet;           // Where should the raised ETH go?\n', '    address public owner;\n', '    bool public isICOOver;\n', '    bool public isICOActive;\n', '\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = 190800000000000000000000000;\n', '        totalSupply = 190800000000000000000000000;\n', '        name = "ATPC Coin";\n', '        decimals = 18;\n', '        symbol = "ATPC";\n', '        unitsOneEthCanBuy = 1460;\n', '        fundsWallet = msg.sender;\n', '        owner = msg.sender;\n', '        isICOOver = false;\n', '        isICOActive = true;\n', '    }\n', '\n', '    modifier ownerFunc(){\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    function transferAdmin(address _to, uint256 _value) ownerFunc returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function changeICOState(bool isActive, bool isOver) public ownerFunc payable {\n', '      isICOOver = isOver;\n', '      isICOActive = isActive;\n', '    }\n', '\n', '    function changePrice(uint256 price) public ownerFunc payable {\n', '      unitsOneEthCanBuy = price;\n', '    }\n', '\n', '    function() public payable {\n', '        require(!isICOOver);\n', '        require(isICOActive);\n', '\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '        emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
