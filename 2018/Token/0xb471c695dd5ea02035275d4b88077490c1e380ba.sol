['contract ERC20xVariables {\n', '    address public creator;\n', '    address public lib;\n', '\n', '    uint256 constant public MAX_UINT256 = 2**256 - 1;\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '\n', '    uint8 public constant decimals = 18;\n', '    string public name;\n', '    string public symbol;\n', '    uint public totalSupply;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Created(address creator, uint supply);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract ERC20x is ERC20xVariables {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transferBalance(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(allowance >= _value);\n', '        _transferBalance(_from, _to, _value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes data) public returns (bool) {\n', '        _transferBalance(msg.sender, _to, _value);\n', '        bytes4 sig = bytes4(keccak256("receiveTokens(address,uint256,bytes)"));\n', '        require(_to.call(sig, msg.sender, _value, data));\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferBalance(address _from, address _to, uint _value) internal {\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '    }\n', '}\n', '\n', 'contract VariableSupplyToken is ERC20x {\n', '    function grant(address to, uint256 amount) public {\n', '        require(msg.sender == creator);\n', '        require(balances[to] + amount >= amount);\n', '        balances[to] += amount;\n', '        totalSupply += amount;\n', '    }\n', '\n', '    function burn(address from, uint amount) public {\n', '        require(msg.sender == creator);\n', '        require(balances[from] >= amount);\n', '        balances[from] -= amount;\n', '        totalSupply -= amount;\n', '    }\n', '}\n', '\n', "// we don't store much state here either\n", 'contract Token is VariableSupplyToken {\n', '    constructor() public {\n', '        creator = msg.sender;\n', '        name = "Decentralized Settlement Facility Token";\n', '        symbol = "DSF";\n', '\n', '        // this needs to be here to avoid zero initialization of token rights.\n', '        totalSupply = 1;\n', '        balances[0x0] = 1;\n', '    }\n', '}']