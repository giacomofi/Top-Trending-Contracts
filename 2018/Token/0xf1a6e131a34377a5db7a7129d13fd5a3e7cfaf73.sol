['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Interface {\n', '    event Transfer( address indexed _from, address indexed _to, uint _value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint _value);\n', '   \n', '    function totalSupply() constant public returns (uint _supply);\n', '    function balanceOf( address _who ) constant public returns (uint _value);\n', '    function transfer( address _to, uint _value ) public returns (bool _success);\n', '    function approve( address _spender, uint _value ) public returns (bool _success);\n', '    function allowance( address _owner, address _spender ) constant public returns (uint _allowance);\n', '    function transferFrom( address _from, address _to, uint _value ) public returns (bool _success);\n', '    \n', '} \n', '\n', 'contract SimpleToken is ERC20Interface{\n', '    address public owner;\n', '    string public name;\n', '    uint public decimals;\n', '    string public symbol;\n', '    uint public totalSupply;\n', '    uint private E18 = 1000000000000000000;\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping ( address => uint)) public approvals;\n', '    \n', '    function Simpletoken() public{\n', '        name = "GangnamToken";\n', '        decimals = 18;\n', '        symbol = "GNX";\n', '        totalSupply = 10000000000 * E18;\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function totalSupply() constant public returns (uint){\n', '        return totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _who) constant public returns (uint){\n', '        return balanceOf[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool){\n', '            require(balanceOf[msg.sender] >= _value);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender] - _value;\n', '            balanceOf[_to] = balanceOf[_to] + _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    function approve(address _spender, uint _value) public returns (bool){\n', '            require(balanceOf[msg.sender] >= _value);\n', '            approvals[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        }\n', '    function allowance(address _owner, address _spender) constant public returns (uint){\n', '            return approvals[_owner][_spender];\n', '        }\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool)\n', '        {\n', '            require(balanceOf[_from] >= _value);\n', '            require(approvals[_from][msg.sender] >= _value);\n', '            approvals[_from][msg.sender] = approvals[_from][msg.sender] - _value;\n', '            balanceOf[_from] = balanceOf[_from] - _value;\n', '            balanceOf[_to] = balanceOf[_to] + _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            \n', '            return true;\n', '        }\n', '    }']
['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Interface {\n', '    event Transfer( address indexed _from, address indexed _to, uint _value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint _value);\n', '   \n', '    function totalSupply() constant public returns (uint _supply);\n', '    function balanceOf( address _who ) constant public returns (uint _value);\n', '    function transfer( address _to, uint _value ) public returns (bool _success);\n', '    function approve( address _spender, uint _value ) public returns (bool _success);\n', '    function allowance( address _owner, address _spender ) constant public returns (uint _allowance);\n', '    function transferFrom( address _from, address _to, uint _value ) public returns (bool _success);\n', '    \n', '} \n', '\n', 'contract SimpleToken is ERC20Interface{\n', '    address public owner;\n', '    string public name;\n', '    uint public decimals;\n', '    string public symbol;\n', '    uint public totalSupply;\n', '    uint private E18 = 1000000000000000000;\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping ( address => uint)) public approvals;\n', '    \n', '    function Simpletoken() public{\n', '        name = "GangnamToken";\n', '        decimals = 18;\n', '        symbol = "GNX";\n', '        totalSupply = 10000000000 * E18;\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function totalSupply() constant public returns (uint){\n', '        return totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _who) constant public returns (uint){\n', '        return balanceOf[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool){\n', '            require(balanceOf[msg.sender] >= _value);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender] - _value;\n', '            balanceOf[_to] = balanceOf[_to] + _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    function approve(address _spender, uint _value) public returns (bool){\n', '            require(balanceOf[msg.sender] >= _value);\n', '            approvals[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        }\n', '    function allowance(address _owner, address _spender) constant public returns (uint){\n', '            return approvals[_owner][_spender];\n', '        }\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool)\n', '        {\n', '            require(balanceOf[_from] >= _value);\n', '            require(approvals[_from][msg.sender] >= _value);\n', '            approvals[_from][msg.sender] = approvals[_from][msg.sender] - _value;\n', '            balanceOf[_from] = balanceOf[_from] - _value;\n', '            balanceOf[_to] = balanceOf[_to] + _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            \n', '            return true;\n', '        }\n', '    }']
