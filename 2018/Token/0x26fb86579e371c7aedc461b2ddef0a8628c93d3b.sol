['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract BoraToken is PausableToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    event Burn(address to, uint256 amount, uint256 totalSupply);\n', '    event Lock(address token, address beneficiary, uint256 amount, uint256 releaseTime);\n', '\n', '    function BoraToken(uint256 _supply) public {\n', '        require(_supply != 0);\n', '        balances[msg.sender] = _supply;\n', '        totalSupply_ = _supply;\n', '        name = &#39;BORA&#39;;\n', '        symbol = &#39;BORA&#39;;\n', '        decimals = 18;\n', '        Transfer(address(0), msg.sender, _supply);\n', '    }\n', '\n', '    function lock(address _donor, address _beneficiary, uint256 amount, uint256 _duration, bool _revocable) onlyOwner public returns (LockedToken) {\n', '        uint256 releaseTime = now.add(_duration.mul(1 days));\n', '        LockedToken lockedToken = new LockedToken(this, _donor, _beneficiary, releaseTime, _revocable);\n', '        BasicToken.transfer(lockedToken, amount);\n', '        Lock(lockedToken, _beneficiary, lockedToken.balanceOf(), releaseTime);\n', '        return lockedToken;\n', '    }\n', '\n', '    function burn(uint256 _amount) onlyOwner public {\n', '        require(_amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        Burn(msg.sender, _amount, totalSupply_);\n', '        Transfer(msg.sender, address(0), _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract LockedToken {\n', '    ERC20Basic public token;\n', '    address public donor;\n', '    address public beneficiary;\n', '    uint256 public releaseTime;\n', '    bool public revocable;\n', '\n', '    event Claim(address beneficiary, uint256 amount, uint256 releaseTime);\n', '    event Revoke(address donor, uint256 amount);\n', '\n', '    function LockedToken(ERC20Basic _token, address _donor, address _beneficiary, uint256 _releaseTime, bool _revocable) public {\n', '        require(_token != address(0));\n', '        require(_donor != address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_releaseTime > now);\n', '\n', '        token = ERC20Basic(_token);\n', '        donor = _donor;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '        revocable = _revocable;\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    function revoke() public {\n', '        require(revocable);\n', '        require(msg.sender == donor);\n', '\n', '        uint amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '        token.transfer(donor, amount);\n', '        Revoke(donor, amount);\n', '    }\n', '\n', '    function claim() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '        token.transfer(beneficiary, amount);\n', '        Claim(beneficiary, amount, releaseTime);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract BoraToken is PausableToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    event Burn(address to, uint256 amount, uint256 totalSupply);\n', '    event Lock(address token, address beneficiary, uint256 amount, uint256 releaseTime);\n', '\n', '    function BoraToken(uint256 _supply) public {\n', '        require(_supply != 0);\n', '        balances[msg.sender] = _supply;\n', '        totalSupply_ = _supply;\n', "        name = 'BORA';\n", "        symbol = 'BORA';\n", '        decimals = 18;\n', '        Transfer(address(0), msg.sender, _supply);\n', '    }\n', '\n', '    function lock(address _donor, address _beneficiary, uint256 amount, uint256 _duration, bool _revocable) onlyOwner public returns (LockedToken) {\n', '        uint256 releaseTime = now.add(_duration.mul(1 days));\n', '        LockedToken lockedToken = new LockedToken(this, _donor, _beneficiary, releaseTime, _revocable);\n', '        BasicToken.transfer(lockedToken, amount);\n', '        Lock(lockedToken, _beneficiary, lockedToken.balanceOf(), releaseTime);\n', '        return lockedToken;\n', '    }\n', '\n', '    function burn(uint256 _amount) onlyOwner public {\n', '        require(_amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        Burn(msg.sender, _amount, totalSupply_);\n', '        Transfer(msg.sender, address(0), _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract LockedToken {\n', '    ERC20Basic public token;\n', '    address public donor;\n', '    address public beneficiary;\n', '    uint256 public releaseTime;\n', '    bool public revocable;\n', '\n', '    event Claim(address beneficiary, uint256 amount, uint256 releaseTime);\n', '    event Revoke(address donor, uint256 amount);\n', '\n', '    function LockedToken(ERC20Basic _token, address _donor, address _beneficiary, uint256 _releaseTime, bool _revocable) public {\n', '        require(_token != address(0));\n', '        require(_donor != address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_releaseTime > now);\n', '\n', '        token = ERC20Basic(_token);\n', '        donor = _donor;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '        revocable = _revocable;\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    function revoke() public {\n', '        require(revocable);\n', '        require(msg.sender == donor);\n', '\n', '        uint amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '        token.transfer(donor, amount);\n', '        Revoke(donor, amount);\n', '    }\n', '\n', '    function claim() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '        token.transfer(beneficiary, amount);\n', '        Claim(beneficiary, amount, releaseTime);\n', '    }\n', '}']
