['pragma solidity 0.4.20;\n', '\n', '/**\n', ' * @title Crowdsale Contract\n', ' * @author Kirill Varlamov (@ongrid), OnGrid systems\n', ' * @dev Crowdsale is a contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * A constant role name for indicating admins.\n', '   */\n', '  string public constant ROLE_ADMIN = "admin";\n', '\n', '  /**\n', '   * @dev constructor. Sets msg.sender as admin by default\n', '   */\n', '  function RBAC()\n', '    public\n', '  {\n', '    addRole(msg.sender, ROLE_ADMIN);\n', '  }\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminAddRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    addRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminRemoveRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    removeRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to admins\n', '   * // reverts\n', '   */\n', '  modifier onlyAdmin()\n', '  {\n', '    checkRole(msg.sender, ROLE_ADMIN);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract DeneumToken is StandardToken {\n', '    string public name = "Deneum";\n', '    string public symbol = "DNM";\n', '    uint8 public decimals = 2;\n', '    bool public mintingFinished = false;\n', '    mapping (address => bool) owners;\n', '    mapping (address => bool) minters;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event OwnerAdded(address indexed newOwner);\n', '    event OwnerRemoved(address indexed removedOwner);\n', '    event MinterAdded(address indexed newMinter);\n', '    event MinterRemoved(address indexed removedMinter);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function DeneumToken() public {\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyMinter public returns (bool) {\n', '        require(!mintingFinished);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        require(!mintingFinished);\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds administrative role to address\n', '     * @param _address The address that will get administrative privileges\n', '     */\n', '    function addOwner(address _address) onlyOwner public {\n', '        owners[_address] = true;\n', '        OwnerAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes administrative role from address\n', '     * @param _address The address to remove administrative privileges from\n', '     */\n', '    function delOwner(address _address) onlyOwner public {\n', '        owners[_address] = false;\n', '        OwnerRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds minter role to address (able to create new tokens)\n', '     * @param _address The address that will get minter privileges\n', '     */\n', '    function addMinter(address _address) onlyOwner public {\n', '        minters[_address] = true;\n', '        MinterAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes minter role from address\n', '     * @param _address The address to remove minter privileges\n', '     */\n', '    function delMinter(address _address) onlyOwner public {\n', '        minters[_address] = false;\n', '        MinterRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the minter.\n', '     */\n', '    modifier onlyMinter() {\n', '        require(minters[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PriceOracle interface\n', ' * @dev Price oracle is a contract representing actual average ETH/USD price in the\n', ' * Ethereum blockchain fo use by other contracts.\n', ' */\n', 'contract PriceOracle {\n', '    // USD cents per ETH exchange price\n', '    uint256 public priceUSDcETH;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale Contract\n', ' * @author Kirill Varlamov (@ongrid), OnGrid systems\n', ' * @dev Crowdsale is a contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' */\n', 'contract DeneumCrowdsale is RBAC {\n', '    using SafeMath for uint256;\n', '\n', '    struct Phase {\n', '        uint256 startDate;\n', '        uint256 endDate;\n', '        uint256 priceUSDcDNM;\n', '        uint256 tokensIssued;\n', '        uint256 tokensCap; // the maximum amount of tokens allowed to be sold on the phase\n', '    }\n', '    Phase[] public phases;\n', '\n', '    // The token being sold\n', '    DeneumToken public token;\n', '\n', '    // ETH/USD price source\n', '    PriceOracle public oracle;\n', '\n', '    // Address where funds get collected\n', '    address public wallet;\n', '\n', '    // Amount of ETH raised in wei. 1 wei is 10e-18 ETH\n', '    uint256 public weiRaised;\n', '\n', '    // Amount of tokens issued by this contract\n', '    uint256 public tokensIssued;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Events for contract states changes\n', '     */\n', '    event PhaseAdded(address indexed sender, uint256 index, uint256 startDate, uint256 endDate, uint256 priceUSDcDNM, uint256 tokensCap);\n', '    event PhaseDeleted(address indexed sender, uint256 index);\n', '    event WalletChanged(address newWallet);\n', '    event OracleChanged(address newOracle);\n', '\n', '    /**\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token  Address of the token being sold\n', '     * @param _oracle ETH price oracle where we get actual exchange rate\n', '     */\n', '    function DeneumCrowdsale(address _wallet, DeneumToken _token, PriceOracle _oracle) RBAC() public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '        oracle = _oracle;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function receiving investor&#39;s ethers\n', '     *      It calculates deposit USD value and corresponding token amount,\n', '     *      runs some checks (if phase cap not exceeded, value and addresses are not null),\n', '     *      then mints corresponding amount of tokens, increments state variables.\n', '     *      After tokens issued Ethers get transferred to the wallet.\n', '     */\n', '    function () external payable {\n', '        uint256 priceUSDcETH = getPriceUSDcETH();\n', '        uint256 weiAmount = msg.value;\n', '        address beneficiary = msg.sender;\n', '        uint256 currentPhaseIndex = getCurrentPhaseIndex();\n', '        uint256 valueUSDc = weiAmount.mul(priceUSDcETH).div(1 ether);\n', '        uint256 tokens = valueUSDc.mul(100).div(phases[currentPhaseIndex].priceUSDcDNM);\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        require(phases[currentPhaseIndex].tokensIssued.add(tokens) < phases[currentPhaseIndex].tokensCap);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        phases[currentPhaseIndex].tokensIssued = phases[currentPhaseIndex].tokensIssued.add(tokens);\n', '        tokensIssued = tokensIssued.add(tokens);\n', '        token.mint(beneficiary, tokens);\n', '        wallet.transfer(msg.value);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Proxies current ETH balance request to the Oracle contract\n', '     * @return ETH price in USD cents\n', '     */\n', '    function getPriceUSDcETH() public view returns(uint256) {\n', '        require(oracle.priceUSDcETH() > 0);\n', '        return oracle.priceUSDcETH();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to change Oracle address (source of ETH price)\n', '     * @param _oracle ETH price oracle where we get actual exchange rate\n', '     */\n', '    function setOracle(PriceOracle _oracle) public onlyAdmin {\n', '        require(oracle.priceUSDcETH() > 0);\n', '        oracle = _oracle;\n', '        OracleChanged(oracle);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if dates overlap with existing phases of the contract.\n', '     * @param _startDate  Start date of the phase\n', '     * @param _endDate    End date of the phase\n', '     * @return true if provided dates valid\n', '     */\n', '    function validatePhaseDates(uint256 _startDate, uint256 _endDate) view public returns (bool) {\n', '        if (_endDate <= _startDate) {\n', '            return false;\n', '        }\n', '        for (uint i = 0; i < phases.length; i++) {\n', '            if (_startDate >= phases[i].startDate && _startDate <= phases[i].endDate) {\n', '                return false;\n', '            }\n', '            if (_endDate >= phases[i].startDate && _endDate <= phases[i].endDate) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a new phase\n', '     * @param _startDate  Start date of the phase\n', '     * @param _endDate    End date of the phase\n', '     * @param _priceUSDcDNM  Price USD cents per token\n', '     * @param _tokensCap     Maximum allowed emission at the phase\n', '     */\n', '    function addPhase(uint256 _startDate, uint256 _endDate, uint256 _priceUSDcDNM, uint256 _tokensCap) public onlyAdmin {\n', '        require(validatePhaseDates(_startDate, _endDate));\n', '        require(_priceUSDcDNM > 0);\n', '        require(_tokensCap > 0);\n', '        phases.push(Phase(_startDate, _endDate, _priceUSDcDNM, 0, _tokensCap));\n', '        uint256 index = phases.length - 1;\n', '        PhaseAdded(msg.sender, index, _startDate, _endDate, _priceUSDcDNM, _tokensCap);\n', '    }\n', '\n', '    /**\n', '     * @dev Delete phase by its index\n', '     * @param index Index of the phase\n', '     */\n', '    function delPhase(uint256 index) public onlyAdmin {\n', '        if (index >= phases.length) return;\n', '\n', '        for (uint i = index; i<phases.length-1; i++){\n', '            phases[i] = phases[i+1];\n', '        }\n', '        phases.length--;\n', '        PhaseDeleted(msg.sender, index);\n', '    }\n', '\n', '    /**\n', '     * @dev Return current phase index\n', '     * @return current phase id\n', '     */\n', '    function getCurrentPhaseIndex() view public returns (uint256) {\n', '        for (uint i = 0; i < phases.length; i++) {\n', '            if (phases[i].startDate <= now && now <= phases[i].endDate) {\n', '                return i;\n', '            }\n', '        }\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * @dev Set new wallet to collect ethers\n', '     * @param _newWallet EOA or the contract adderess of the new receiver\n', '     */\n', '    function setWallet(address _newWallet) onlyAdmin public {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '        WalletChanged(_newWallet);\n', '    }\n', '}']
['pragma solidity 0.4.20;\n', '\n', '/**\n', ' * @title Crowdsale Contract\n', ' * @author Kirill Varlamov (@ongrid), OnGrid systems\n', ' * @dev Crowdsale is a contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * A constant role name for indicating admins.\n', '   */\n', '  string public constant ROLE_ADMIN = "admin";\n', '\n', '  /**\n', '   * @dev constructor. Sets msg.sender as admin by default\n', '   */\n', '  function RBAC()\n', '    public\n', '  {\n', '    addRole(msg.sender, ROLE_ADMIN);\n', '  }\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminAddRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    addRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminRemoveRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    removeRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to admins\n', '   * // reverts\n', '   */\n', '  modifier onlyAdmin()\n', '  {\n', '    checkRole(msg.sender, ROLE_ADMIN);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract DeneumToken is StandardToken {\n', '    string public name = "Deneum";\n', '    string public symbol = "DNM";\n', '    uint8 public decimals = 2;\n', '    bool public mintingFinished = false;\n', '    mapping (address => bool) owners;\n', '    mapping (address => bool) minters;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event OwnerAdded(address indexed newOwner);\n', '    event OwnerRemoved(address indexed removedOwner);\n', '    event MinterAdded(address indexed newMinter);\n', '    event MinterRemoved(address indexed removedMinter);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function DeneumToken() public {\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyMinter public returns (bool) {\n', '        require(!mintingFinished);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        require(!mintingFinished);\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds administrative role to address\n', '     * @param _address The address that will get administrative privileges\n', '     */\n', '    function addOwner(address _address) onlyOwner public {\n', '        owners[_address] = true;\n', '        OwnerAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes administrative role from address\n', '     * @param _address The address to remove administrative privileges from\n', '     */\n', '    function delOwner(address _address) onlyOwner public {\n', '        owners[_address] = false;\n', '        OwnerRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds minter role to address (able to create new tokens)\n', '     * @param _address The address that will get minter privileges\n', '     */\n', '    function addMinter(address _address) onlyOwner public {\n', '        minters[_address] = true;\n', '        MinterAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes minter role from address\n', '     * @param _address The address to remove minter privileges\n', '     */\n', '    function delMinter(address _address) onlyOwner public {\n', '        minters[_address] = false;\n', '        MinterRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the minter.\n', '     */\n', '    modifier onlyMinter() {\n', '        require(minters[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PriceOracle interface\n', ' * @dev Price oracle is a contract representing actual average ETH/USD price in the\n', ' * Ethereum blockchain fo use by other contracts.\n', ' */\n', 'contract PriceOracle {\n', '    // USD cents per ETH exchange price\n', '    uint256 public priceUSDcETH;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale Contract\n', ' * @author Kirill Varlamov (@ongrid), OnGrid systems\n', ' * @dev Crowdsale is a contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' */\n', 'contract DeneumCrowdsale is RBAC {\n', '    using SafeMath for uint256;\n', '\n', '    struct Phase {\n', '        uint256 startDate;\n', '        uint256 endDate;\n', '        uint256 priceUSDcDNM;\n', '        uint256 tokensIssued;\n', '        uint256 tokensCap; // the maximum amount of tokens allowed to be sold on the phase\n', '    }\n', '    Phase[] public phases;\n', '\n', '    // The token being sold\n', '    DeneumToken public token;\n', '\n', '    // ETH/USD price source\n', '    PriceOracle public oracle;\n', '\n', '    // Address where funds get collected\n', '    address public wallet;\n', '\n', '    // Amount of ETH raised in wei. 1 wei is 10e-18 ETH\n', '    uint256 public weiRaised;\n', '\n', '    // Amount of tokens issued by this contract\n', '    uint256 public tokensIssued;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Events for contract states changes\n', '     */\n', '    event PhaseAdded(address indexed sender, uint256 index, uint256 startDate, uint256 endDate, uint256 priceUSDcDNM, uint256 tokensCap);\n', '    event PhaseDeleted(address indexed sender, uint256 index);\n', '    event WalletChanged(address newWallet);\n', '    event OracleChanged(address newOracle);\n', '\n', '    /**\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token  Address of the token being sold\n', '     * @param _oracle ETH price oracle where we get actual exchange rate\n', '     */\n', '    function DeneumCrowdsale(address _wallet, DeneumToken _token, PriceOracle _oracle) RBAC() public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '        oracle = _oracle;\n', '    }\n', '\n', '    /**\n', "     * @dev fallback function receiving investor's ethers\n", '     *      It calculates deposit USD value and corresponding token amount,\n', '     *      runs some checks (if phase cap not exceeded, value and addresses are not null),\n', '     *      then mints corresponding amount of tokens, increments state variables.\n', '     *      After tokens issued Ethers get transferred to the wallet.\n', '     */\n', '    function () external payable {\n', '        uint256 priceUSDcETH = getPriceUSDcETH();\n', '        uint256 weiAmount = msg.value;\n', '        address beneficiary = msg.sender;\n', '        uint256 currentPhaseIndex = getCurrentPhaseIndex();\n', '        uint256 valueUSDc = weiAmount.mul(priceUSDcETH).div(1 ether);\n', '        uint256 tokens = valueUSDc.mul(100).div(phases[currentPhaseIndex].priceUSDcDNM);\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        require(phases[currentPhaseIndex].tokensIssued.add(tokens) < phases[currentPhaseIndex].tokensCap);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        phases[currentPhaseIndex].tokensIssued = phases[currentPhaseIndex].tokensIssued.add(tokens);\n', '        tokensIssued = tokensIssued.add(tokens);\n', '        token.mint(beneficiary, tokens);\n', '        wallet.transfer(msg.value);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Proxies current ETH balance request to the Oracle contract\n', '     * @return ETH price in USD cents\n', '     */\n', '    function getPriceUSDcETH() public view returns(uint256) {\n', '        require(oracle.priceUSDcETH() > 0);\n', '        return oracle.priceUSDcETH();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to change Oracle address (source of ETH price)\n', '     * @param _oracle ETH price oracle where we get actual exchange rate\n', '     */\n', '    function setOracle(PriceOracle _oracle) public onlyAdmin {\n', '        require(oracle.priceUSDcETH() > 0);\n', '        oracle = _oracle;\n', '        OracleChanged(oracle);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if dates overlap with existing phases of the contract.\n', '     * @param _startDate  Start date of the phase\n', '     * @param _endDate    End date of the phase\n', '     * @return true if provided dates valid\n', '     */\n', '    function validatePhaseDates(uint256 _startDate, uint256 _endDate) view public returns (bool) {\n', '        if (_endDate <= _startDate) {\n', '            return false;\n', '        }\n', '        for (uint i = 0; i < phases.length; i++) {\n', '            if (_startDate >= phases[i].startDate && _startDate <= phases[i].endDate) {\n', '                return false;\n', '            }\n', '            if (_endDate >= phases[i].startDate && _endDate <= phases[i].endDate) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a new phase\n', '     * @param _startDate  Start date of the phase\n', '     * @param _endDate    End date of the phase\n', '     * @param _priceUSDcDNM  Price USD cents per token\n', '     * @param _tokensCap     Maximum allowed emission at the phase\n', '     */\n', '    function addPhase(uint256 _startDate, uint256 _endDate, uint256 _priceUSDcDNM, uint256 _tokensCap) public onlyAdmin {\n', '        require(validatePhaseDates(_startDate, _endDate));\n', '        require(_priceUSDcDNM > 0);\n', '        require(_tokensCap > 0);\n', '        phases.push(Phase(_startDate, _endDate, _priceUSDcDNM, 0, _tokensCap));\n', '        uint256 index = phases.length - 1;\n', '        PhaseAdded(msg.sender, index, _startDate, _endDate, _priceUSDcDNM, _tokensCap);\n', '    }\n', '\n', '    /**\n', '     * @dev Delete phase by its index\n', '     * @param index Index of the phase\n', '     */\n', '    function delPhase(uint256 index) public onlyAdmin {\n', '        if (index >= phases.length) return;\n', '\n', '        for (uint i = index; i<phases.length-1; i++){\n', '            phases[i] = phases[i+1];\n', '        }\n', '        phases.length--;\n', '        PhaseDeleted(msg.sender, index);\n', '    }\n', '\n', '    /**\n', '     * @dev Return current phase index\n', '     * @return current phase id\n', '     */\n', '    function getCurrentPhaseIndex() view public returns (uint256) {\n', '        for (uint i = 0; i < phases.length; i++) {\n', '            if (phases[i].startDate <= now && now <= phases[i].endDate) {\n', '                return i;\n', '            }\n', '        }\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * @dev Set new wallet to collect ethers\n', '     * @param _newWallet EOA or the contract adderess of the new receiver\n', '     */\n', '    function setWallet(address _newWallet) onlyAdmin public {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '        WalletChanged(_newWallet);\n', '    }\n', '}']
