['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', 'contract TeaVoucher {\n', '\n', '  mapping(address => uint256) balances;\n', ' \n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '  \n', '  using SafeMath for uint256;\n', '  \n', '  \n', '  address public owner;\n', '  \n', '  uint256 public _totalSupply = 36936;\n', '    uint256 public totalSupply = 36936;\n', '    string public constant symbol = "TEAVO";\n', '    string public constant name = "Tea Voucher";\n', '    uint8 public constant decimals = 0;\n', '    \n', '\n', '    uint256 public constant RATE = 200;\n', '   \n', '  function TeaVoucher(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = 36936;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                 // Update total supply\n', '       }\n', '        \n', '         function () payable {\n', '        createTokens();\n', '        throw;\n', '    }\n', '        function createTokens() payable {\n', '        require(msg.value > 0);\n', '        \n', '        uint256 tokens = msg.value.add(RATE);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '  \n', '  function totalSupply() constant returns (uint256 theTotalSupply) {\n', '    // Because our function signature\n', '    // states that the returning variable\n', '    // is "theTotalSupply", we\'ll just set that variable\n', '    // to the value of the instance variable "_totalSupply"\n', '    // and return it\n', '    theTotalSupply = _totalSupply;\n', '    return theTotalSupply;\n', '  }\n', '  \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  function approve(address _spender, uint256 _amount) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _amount;\n', '    // Fire the event "Approval" to execute any logic\n', '    // that was listening to it\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '  \n', '  // Note: This function returns a boolean value\n', '  //       indicating whether the transfer was successful\n', '  function transfer(address _to, uint256 _amount) returns (bool success) {\n', '    // If the sender has sufficient funds to send\n', '    // and the amount is not zero, then send to\n', '    // the given address\n', '    if (balances[msg.sender] >= _amount \n', '      && _amount > 0\n', '      && balances[_to] + _amount > balances[_to]) {\n', '      balances[msg.sender] -= _amount;\n', '      balances[_to] += _amount;\n', '      // Fire a transfer event for any\n', "      // logic that's listening\n", '      Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '   }\n', '   \n', '   function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '    if (balances[_from] >= _amount\n', '      && allowed[_from][msg.sender] >= _amount\n', '      && _amount > 0\n', '      && balances[_to] + _amount > balances[_to]) {\n', '    balances[_from] -= _amount;\n', '    balances[_to] += _amount;\n', '    Transfer(_from, _to, _amount);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']