['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address who) public view returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  uint totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract RobotarTestToken is MintableToken {\n', '    \n', '  // Constants\n', '  // =========\n', '  \n', '    string public constant name = "Robotar token";\n', '    \n', '    string public constant symbol = "TTAR";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    // Tokens are frozen until ICO ends.\n', '    \n', '    bool public frozen = true;\n', '    \n', '    \n', '  address public ico;\n', '  modifier icoOnly { require(msg.sender == ico); _; }\n', '  \n', '  \n', '  // Constructor\n', '  // ===========\n', '  \n', '  function RobotarTestToken(address _ico) public {\n', '    ico = _ico;\n', '  }\n', '  \n', '    function defrost() external icoOnly {\n', '    frozen = false;\n', '  }\n', '    \n', '     // ERC20 functions\n', '  // =========================\n', '\n', '  function transfer(address _to, uint _value)  public returns (bool) {\n', '    require(!frozen);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(!frozen);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    require(!frozen);\n', '    return super.approve(_spender, _value);\n', '  }\n', '    \n', ' /**  \n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, address where, uint _value) external icoOnly {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(where, _value);\n', '  }\n', '  */\n', '  \n', '  function supplyBezNolei() public view returns(uint) {\n', '  return totalSupply().div(1 ether);\n', '  }\n', '    \n', '}\n', '\n', '\n', 'contract TestRobotarCrowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address multisig;\n', '\n', '   RobotarTestToken public token = new RobotarTestToken(this);\n', '\n', '// uint public created_time = now;\n', '\n', '    \n', '  uint rate = 1000;\n', '       \n', '\tuint PresaleStart = 0;\n', '\tuint CrowdsaleStart = 0;\n', '\tuint PresalePeriod = 1 days;\n', '\tuint CrowdsalePeriod = 1 days;\n', '\tuint public threshold = 1000000000000000;\t\n', '\t\n', '\tuint bountyPercent = 10;\n', '\tuint foundationPercent = 50;\n', '\tuint teamPercent = 40;\n', '\t\n', '\taddress bounty;\n', '\taddress foundation;\n', '\taddress team;\n', '\t\n', ' // Crowdsale constructor\n', ' \n', '    function TestRobotarCrowdsale() public {\n', '        \n', '\tmultisig = owner;\t\n', '\t\t\t\n', '\t      }\n', '\t      \t      \n', '\t      function setPresaleStart(uint _presaleStart) onlyOwner public returns (bool) {\n', '\t      PresaleStart = _presaleStart;\n', '\t //     require(PresaleStart > now) ;\n', '\t      return true;\n', '\t      }\n', '\t      \n', '\t       function setCrowdsaleStart(uint _crowdsaleStart)  onlyOwner public returns (bool) {\n', '\t       CrowdsaleStart = _crowdsaleStart;\n', '\t //      require(CrowdsaleStart > now && CrowdsaleStart > PresaleStart + 7 days ) ;\n', '\t       return true;\n', '\t       }\n', '      \n', '   /**    modifier saleIsOn() {\n', 'require(now > testStart && now < testEnd || now > PresaleStart && now < PresaleStart + PresalePeriod || now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod);\n', '    \t_;\n', '    } **/\n', '    \n', '\n', '   function createTokens() public payable  {\n', '       uint tokens = 0;\n', '       uint bonusTokens = 0;\n', '       \n', '         if (now > PresaleStart && now < PresaleStart + PresalePeriod) {\n', '       tokens = rate.mul(msg.value);\n', '        bonusTokens = tokens.div(4);\n', '        } \n', '        else if (now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod){\n', '        tokens = rate.mul(msg.value);\n', '        \n', '        if(now < CrowdsaleStart + CrowdsalePeriod/4) {bonusTokens = tokens.mul(15).div(100);}\n', '        else if(now >= CrowdsaleStart + CrowdsalePeriod/4 && now < CrowdsaleStart + CrowdsalePeriod/2) {bonusTokens = tokens.div(10);} \n', '        else if(now >= CrowdsaleStart + CrowdsalePeriod/2 && now < CrowdsaleStart + CrowdsalePeriod*3/4) {bonusTokens = tokens.div(20);}\n', '        \n', '        }      \n', '                 \n', '        tokens += bonusTokens;\n', '       if (tokens>0) {token.mint(msg.sender, tokens);}\n', '    }        \n', '       \n', '\n', '   function() external payable {\n', '   if (msg.value >= threshold) createTokens();   \n', '   \n', '        }\n', '   \n', '       \n', '    \n', '   \n', '    \n', '    function finishICO(address _team, address _foundation, address _bounty) external onlyOwner {\n', '\tuint issuedTokenSupply = token.totalSupply();\n', '\tuint bountyTokens = issuedTokenSupply.mul(bountyPercent).div(100);\n', '\tuint foundationTokens = issuedTokenSupply.mul(foundationPercent).div(100);\n', '\tuint teamTokens = issuedTokenSupply.mul(teamPercent).div(100);\n', '\tbounty = _bounty;\n', '\tfoundation = _foundation;\n', '\tteam = _team;\n', '\t\n', '\ttoken.mint(bounty, bountyTokens);\n', '\ttoken.mint(foundation, foundationTokens);\n', '\ttoken.mint(team, teamTokens);\n', '\t\n', '        token.finishMinting();\n', '      \n', '            }\n', '\n', 'function defrost() external onlyOwner {\n', 'token.defrost();\n', '}\n', '  \n', '  function withdrawEther(uint _value) external onlyOwner {\n', '    multisig.transfer(_value);\n', '  }\n', '  \n', ' /**\n', '      \n', '  \n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, uint _value) external onlyOwner {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(multisig, _value);\n', '  }\n', '  function withdrawTokenFromTAR(address _tokenContract, uint _value) external onlyOwner {\n', '    token.withdrawToken(_tokenContract, multisig, _value);\n', '  }\n', '  \n', '//the end    \n', '  */\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address who) public view returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  uint totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract RobotarTestToken is MintableToken {\n', '    \n', '  // Constants\n', '  // =========\n', '  \n', '    string public constant name = "Robotar token";\n', '    \n', '    string public constant symbol = "TTAR";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    // Tokens are frozen until ICO ends.\n', '    \n', '    bool public frozen = true;\n', '    \n', '    \n', '  address public ico;\n', '  modifier icoOnly { require(msg.sender == ico); _; }\n', '  \n', '  \n', '  // Constructor\n', '  // ===========\n', '  \n', '  function RobotarTestToken(address _ico) public {\n', '    ico = _ico;\n', '  }\n', '  \n', '    function defrost() external icoOnly {\n', '    frozen = false;\n', '  }\n', '    \n', '     // ERC20 functions\n', '  // =========================\n', '\n', '  function transfer(address _to, uint _value)  public returns (bool) {\n', '    require(!frozen);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(!frozen);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    require(!frozen);\n', '    return super.approve(_spender, _value);\n', '  }\n', '    \n', ' /**  \n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, address where, uint _value) external icoOnly {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(where, _value);\n', '  }\n', '  */\n', '  \n', '  function supplyBezNolei() public view returns(uint) {\n', '  return totalSupply().div(1 ether);\n', '  }\n', '    \n', '}\n', '\n', '\n', 'contract TestRobotarCrowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address multisig;\n', '\n', '   RobotarTestToken public token = new RobotarTestToken(this);\n', '\n', '// uint public created_time = now;\n', '\n', '    \n', '  uint rate = 1000;\n', '       \n', '\tuint PresaleStart = 0;\n', '\tuint CrowdsaleStart = 0;\n', '\tuint PresalePeriod = 1 days;\n', '\tuint CrowdsalePeriod = 1 days;\n', '\tuint public threshold = 1000000000000000;\t\n', '\t\n', '\tuint bountyPercent = 10;\n', '\tuint foundationPercent = 50;\n', '\tuint teamPercent = 40;\n', '\t\n', '\taddress bounty;\n', '\taddress foundation;\n', '\taddress team;\n', '\t\n', ' // Crowdsale constructor\n', ' \n', '    function TestRobotarCrowdsale() public {\n', '        \n', '\tmultisig = owner;\t\n', '\t\t\t\n', '\t      }\n', '\t      \t      \n', '\t      function setPresaleStart(uint _presaleStart) onlyOwner public returns (bool) {\n', '\t      PresaleStart = _presaleStart;\n', '\t //     require(PresaleStart > now) ;\n', '\t      return true;\n', '\t      }\n', '\t      \n', '\t       function setCrowdsaleStart(uint _crowdsaleStart)  onlyOwner public returns (bool) {\n', '\t       CrowdsaleStart = _crowdsaleStart;\n', '\t //      require(CrowdsaleStart > now && CrowdsaleStart > PresaleStart + 7 days ) ;\n', '\t       return true;\n', '\t       }\n', '      \n', '   /**    modifier saleIsOn() {\n', 'require(now > testStart && now < testEnd || now > PresaleStart && now < PresaleStart + PresalePeriod || now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod);\n', '    \t_;\n', '    } **/\n', '    \n', '\n', '   function createTokens() public payable  {\n', '       uint tokens = 0;\n', '       uint bonusTokens = 0;\n', '       \n', '         if (now > PresaleStart && now < PresaleStart + PresalePeriod) {\n', '       tokens = rate.mul(msg.value);\n', '        bonusTokens = tokens.div(4);\n', '        } \n', '        else if (now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod){\n', '        tokens = rate.mul(msg.value);\n', '        \n', '        if(now < CrowdsaleStart + CrowdsalePeriod/4) {bonusTokens = tokens.mul(15).div(100);}\n', '        else if(now >= CrowdsaleStart + CrowdsalePeriod/4 && now < CrowdsaleStart + CrowdsalePeriod/2) {bonusTokens = tokens.div(10);} \n', '        else if(now >= CrowdsaleStart + CrowdsalePeriod/2 && now < CrowdsaleStart + CrowdsalePeriod*3/4) {bonusTokens = tokens.div(20);}\n', '        \n', '        }      \n', '                 \n', '        tokens += bonusTokens;\n', '       if (tokens>0) {token.mint(msg.sender, tokens);}\n', '    }        \n', '       \n', '\n', '   function() external payable {\n', '   if (msg.value >= threshold) createTokens();   \n', '   \n', '        }\n', '   \n', '       \n', '    \n', '   \n', '    \n', '    function finishICO(address _team, address _foundation, address _bounty) external onlyOwner {\n', '\tuint issuedTokenSupply = token.totalSupply();\n', '\tuint bountyTokens = issuedTokenSupply.mul(bountyPercent).div(100);\n', '\tuint foundationTokens = issuedTokenSupply.mul(foundationPercent).div(100);\n', '\tuint teamTokens = issuedTokenSupply.mul(teamPercent).div(100);\n', '\tbounty = _bounty;\n', '\tfoundation = _foundation;\n', '\tteam = _team;\n', '\t\n', '\ttoken.mint(bounty, bountyTokens);\n', '\ttoken.mint(foundation, foundationTokens);\n', '\ttoken.mint(team, teamTokens);\n', '\t\n', '        token.finishMinting();\n', '      \n', '            }\n', '\n', 'function defrost() external onlyOwner {\n', 'token.defrost();\n', '}\n', '  \n', '  function withdrawEther(uint _value) external onlyOwner {\n', '    multisig.transfer(_value);\n', '  }\n', '  \n', ' /**\n', '      \n', '  \n', '  // Save tokens from contract\n', '  function withdrawToken(address _tokenContract, uint _value) external onlyOwner {\n', '    ERC20 _token = ERC20(_tokenContract);\n', '    _token.transfer(multisig, _value);\n', '  }\n', '  function withdrawTokenFromTAR(address _tokenContract, uint _value) external onlyOwner {\n', '    token.withdrawToken(_tokenContract, multisig, _value);\n', '  }\n', '  \n', '//the end    \n', '  */\n', '}']
