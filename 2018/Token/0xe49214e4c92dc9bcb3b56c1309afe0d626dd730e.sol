['pragma solidity ^0.4.23;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '// File: contracts/ERC223.sol\n', '\n', 'contract ERC223 is ERC20 {\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);\n', '}\n', '\n', '// File: contracts/ERC223Receiver.sol\n', '\n', '/*\n', '  * @title Contract that will work with ERC223 tokens.\n', '  */\n', ' \n', 'contract ERC223Receiver { \n', '/*\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: contracts/ERC223Token.sol\n', '\n', '/**\n', ' * @title ERC223 token implementation.\n', ' * @dev Standard ERC223 implementation with capability of deactivating ERC223 functionalities.\n', ' *      Contracts that are known to support ERC20 tokens can be whitelisted to bypass tokenfallback call.\n', ' */\n', 'contract ERC223Token is ERC223, StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // If true will invoke token fallback else it will act as an ERC20 token\n', '    bool public erc223Activated;\n', '    // List of contracts which are known to have support for ERC20 tokens.\n', '    // Needed to maintain compatibility with contracts that support ERC20 tokens but not ERC223 tokens.                      \n', '    mapping (address => bool) public supportedContracts;\n', '    // List of contracts which users allowed to bypass tokenFallback.\n', '    // Needed in case user wants to send tokens to contracts that do not support ERC223 tokens, i.e. multisig wallets.\n', '    mapping (address => mapping (address => bool)) public userAcknowledgedContracts;\n', '\n', '    function setErc223Activated(bool _activated) external onlyOwner {\n', '        erc223Activated = _activated;\n', '    }\n', '\n', '    function setSupportedContract(address _address, bool _supported) external onlyOwner {\n', '        supportedContracts[_address] = _supported;\n', '    }\n', '\n', '    function setUserAcknowledgedContract(address _address, bool _acknowledged) external {\n', '        userAcknowledgedContracts[msg.sender][_address] = _acknowledged;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if target address is a contract.\n', '     * @param _address The address to check.\n', '     */\n', '    function isContract(address _address) internal returns (bool) {\n', '        uint256 codeLength;\n', '        assembly {\n', '            // Retrieve the size of the code on target address\n', '            codeLength := extcodesize(_address)\n', '        }\n', '        return codeLength > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Calls the tokenFallback function of the token receiver.\n', '     * @param _from  Token sender address.\n', '     * @param _to  Token receiver address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function invokeTokenReceiver(address _from, address _to, uint256 _value, bytes _data) internal {\n', '        ERC223Receiver receiver = ERC223Receiver(_to);\n', '        receiver.tokenFallback(_from, _value, _data);\n', '        emit Transfer(_from, _to, _value, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer specified amount of tokens to the specified address.\n', '     *      Added to maintain ERC20 compatibility.\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bytes memory emptyData;\n', '        return transfer(_to, _value, emptyData);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer specified amount of tokens to the specified address.\n', '     *      Invokes tokenFallback if the recipient is a contract.\n', '     *      Transaction to contracts without implementation of tokenFallback will revert.\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens to be transferred.\n', '     * @param _data Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        bool status = super.transfer(_to, _value);\n', '\n', '        // Invoke token receiver only when erc223 is activate, not listed on the whitelist and is a contract.\n', '        if (erc223Activated \n', '            && isContract(_to)\n', '            && supportedContracts[_to] == false \n', '            && userAcknowledgedContracts[msg.sender][_to] == false\n', '            && status == true) {\n', '            invokeTokenReceiver(msg.sender, _to, _value, _data);\n', '        }\n', '        return status;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer specified amount of tokens from one address to another.\n', '     *      Added to maintain ERC20 compatibility.\n', '     * @param _from Sender address.\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        bytes memory emptyData;\n', '        return transferFrom(_from, _to, _value, emptyData);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer specified amount of tokens from one address to another.\n', '     *      Invokes tokenFallback if the recipient is a contract.\n', '     *      Transaction to contracts without implementation of tokenFallback will revert.\n', '     * @param _from Sender address.\n', '     * @param _to Receiver address.\n', '     * @param _value Amount of tokens to be transferred.\n', '     * @param _data Transaction metadata.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        bool status = super.transferFrom(_from, _to, _value);\n', '\n', '        if (erc223Activated \n', '            && isContract(_to)\n', '            && supportedContracts[_to] == false \n', '            && userAcknowledgedContracts[msg.sender][_to] == false\n', '            && status == true) {\n', '            invokeTokenReceiver(_from, _to, _value, _data);\n', '        }\n', '        return status;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/PausableERC223Token.sol\n', '\n', '/**\n', ' * @title ERC223 token implementation.\n', ' * @dev Standard ERC223 implementation with Pausable feature.      \n', ' */\n', '\n', 'contract PausableERC223Token is ERC223Token, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value, _data);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/SynchroCoin.sol\n', '\n', '/* @title SynchroCoin SYC Token\n', ' * @dev New SynchroCoin SYC Token migration from legacy contract.\n', ' */\n', '\n', 'contract SynchroCoin is PausableERC223Token, Claimable {\n', '    string public constant name = "SynchroCoin";\n', '    string public constant symbol = "SYC";\n', '    uint8 public constant decimals = 18;\n', '    MigrationAgent public migrationAgent;\n', '\n', '    function SynchroCoin(address _legacySycAddress, uint256 _timelockReleaseTime) public {        \n', '        migrationAgent = new MigrationAgent(_legacySycAddress, this, _timelockReleaseTime);\n', '        migrationAgent.transferOwnership(msg.sender);\n', '\n', '        ERC20 legacySycContract = ERC20(_legacySycAddress);\n', '        totalSupply_ = legacySycContract.totalSupply();\n', '        balances[migrationAgent] = balances[migrationAgent].add(totalSupply_);\n', '\n', '        pause();\n', '    }\n', '}\n', '\n', '// File: contracts/MigrationAgent.sol\n', '\n', '/**\n', ' *  @title MigrationAgent\n', ' *  @dev Contract that keeps track of the migration process from one token contract to another. \n', ' */\n', 'contract MigrationAgent is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public legacySycContract;    // Previous Token Contract\n', '    ERC20 public sycContract;       // New Token Contract to migrate to\n', '    uint256 public targetSupply;    // Target supply amount to meet\n', '    uint256 public migratedSupply;  // Total amount of tokens migrated\n', '\n', '    mapping (address => bool) public migrated;  // Flags to keep track of addresses already migrated\n', '\n', '    uint256 public timelockReleaseTime; // Timelocked token release time\n', '    TokenTimelock public tokenTimelock; // TokenTimelock for Synchrolife team, advisors and partners\n', '\n', '    event Migrate(address indexed holder, uint256 balance);\n', '\n', '    function MigrationAgent(address _legacySycAddress, address _sycAddress, uint256 _timelockReleaseTime) public {\n', '        require(_legacySycAddress != address(0));\n', '        require(_sycAddress != address(0));\n', '\n', '        legacySycContract = ERC20(_legacySycAddress);\n', '        targetSupply = legacySycContract.totalSupply();\n', '        timelockReleaseTime = _timelockReleaseTime;\n', '        sycContract = ERC20(_sycAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new timelock to replace the old one.\n', '     * @param _legacyVaultAddress Address of the vault contract from previous SynchroCoin contract.\n', '     */\n', '    function migrateVault(address _legacyVaultAddress) onlyOwner external { \n', '        require(_legacyVaultAddress != address(0));\n', '        require(!migrated[_legacyVaultAddress]);\n', '        require(tokenTimelock == address(0));\n', '\n', '        // Lock up the tokens for the team/advisors/partners.\n', '        migrated[_legacyVaultAddress] = true;        \n', '        uint256 timelockAmount = legacySycContract.balanceOf(_legacyVaultAddress);\n', '        tokenTimelock = new TokenTimelock(sycContract, msg.sender, timelockReleaseTime);\n', '        sycContract.transfer(tokenTimelock, timelockAmount);\n', '        migratedSupply = migratedSupply.add(timelockAmount);\n', '        emit Migrate(_legacyVaultAddress, timelockAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Copies the balance of given addresses from the legacy contract\n', '     * @param _tokenHolders Array of addresses to migrate balance from the legacy contract\n', '     * @return True if operation was completed\n', '     */\n', '    function migrateBalances(address[] _tokenHolders) onlyOwner external {\n', '        for (uint256 i = 0; i < _tokenHolders.length; i++) {\n', '            migrateBalance(_tokenHolders[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Copies the balance of a given address from the legacy contract\n', '     * @param _tokenHolder Address to migrate balance from the legacy contract\n', '     * @return True if balance was copied. False if balance had already been migrated or if address has zero balance in the legacy contract\n', '     */\n', '    function migrateBalance(address _tokenHolder) onlyOwner public returns (bool) {\n', '        if (migrated[_tokenHolder]) {\n', '            return false;   // Already migrated, therefore do nothing.\n', '        }\n', '\n', '        uint256 balance = legacySycContract.balanceOf(_tokenHolder);\n', '        if (balance == 0) {\n', '            return false;   // Has no balance in legacy contract, therefore do nothing.\n', '        }\n', '\n', '        // Copy balance\n', '        migrated[_tokenHolder] = true;\n', '        sycContract.transfer(_tokenHolder, balance);\n', '        migratedSupply = migratedSupply.add(balance);\n', '        emit Migrate(_tokenHolder, balance);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Destructs the contract and sends any remaining ETH/SYC to the owner.\n', '     */\n', '    function kill() onlyOwner public {\n', '        uint256 balance = sycContract.balanceOf(this);\n', '        sycContract.transfer(owner, balance);\n', '        selfdestruct(owner);\n', '    }\n', '}']