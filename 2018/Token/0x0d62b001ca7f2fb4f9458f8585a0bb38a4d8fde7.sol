['/**\n', ' * Medium: https://medium.com/resto\n', ' * Facebook: https://www.facebook.com/RestoToken/\n', ' * YouTube: https://www.youtube.com/channel/UCPElstEJoFbY1mBuFYx99cA\n', ' * Telegram: https://t.me/restotoken\n', ' * Git: https://github.com/Restotoken\n', ' * Bitcointalk Bounty-Campaign: https://bitcointalk.org/index.php?topic=5047104.new#new\n', ' * Bitcointalk: https://bitcointalk.org/index.php?topic=5047108.new#new\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address _who) external view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b,"Math error");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0,"Math error"); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', '        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a,"Math error");\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a,"Math error");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0,"Math error");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal balances_;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed_;\n', '\n', '    uint256 private totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances_[_owner];\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '      public\n', '      view\n', '      returns (uint256)\n', '    {\n', '        return allowed_[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances_[msg.sender],"Invalid value");\n', '        require(_to != address(0),"Invalid address");\n', '\n', '        balances_[msg.sender] = balances_[msg.sender].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed_[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(_value <= balances_[_from],"Value is more than balance");\n', '        require(_value <= allowed_[_from][msg.sender],"Value is more than alloved");\n', '        require(_to != address(0),"Invalid address");\n', '\n', '        balances_[_from] = balances_[_from].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        allowed_[msg.sender][_spender] = (allowed_[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed_[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        uint256 oldValue = allowed_[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed_[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that mints an amount of the token and assigns it to\n', '    * an account. This encapsulates the modification of balances such that the\n', '    * proper events are emitted.\n', '    * @param _account The account that will receive the created tokens.\n', '    * @param _amount The amount that will be created.\n', '    */\n', '    function _mint(address _account, uint256 _amount) internal {\n', '        require(_account != 0,"Invalid address");\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances_[_account] = balances_[_account].add(_amount);\n', '        emit Transfer(address(0), _account, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', '    * account.\n', '    * @param _account The account whose tokens will be burnt.\n', '    * @param _amount The amount that will be burnt.\n', '    */\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != 0,"Invalid address");\n', '        require(_amount <= balances_[_account],"Amount is more than balance");\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances_[_account] = balances_[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', '    * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '    * internal _burn function.\n', '    * @param _account The account whose tokens will be burnt.\n', '    * @param _amount The amount that will be burnt.\n', '    */\n', '    function _burnFrom(address _account, uint256 _amount) internal {\n', '        require(_amount <= allowed_[_account][msg.sender],"Amount is more than alloved");\n', '\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(_amount);\n', '        _burn(_account, _amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(\n', '        IERC20 _token,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      internal\n', '    {\n', '        require(_token.transfer(_to, _value),"Transfer error");\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      internal\n', '    {\n', '        require(_token.transferFrom(_from, _to, _value),"Tranfer error");\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 _token,\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '      internal\n', '    {\n', '        require(_token.approve(_spender, _value),"Approve error");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable {\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused,"Contract is paused, sorry");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Contract is running now");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Contract RESTO token\n', ' * @dev ERC20 compatible token contract\n', ' */\n', 'contract RESTOToken is ERC20Pausable {\n', '    string public constant name = "RESTO";\n', '    string public constant symbol = "RESTO";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 1100000000 * 1 ether; // 1 100 000 000\n', '    address public CrowdsaleAddress;\n', '    uint64 crowdSaleEndTime = 1544745600;       // 14.12.2018\n', '\n', '    mapping (address => bool) internal kyc;\n', '\n', '\n', '    constructor(address _CrowdsaleAddress) public {\n', '    \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        _mint(_CrowdsaleAddress, INITIAL_SUPPLY);\n', '    }\n', '\n', '    modifier kyc_passed(address _investor) {\n', '        if (_investor != CrowdsaleAddress){\n', '            require(kyc[_investor],"For transfer tokens you need to go through the procedure KYC");\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == CrowdsaleAddress,"Only CrowdSale contract can run this");\n', '        _;\n', '    }\n', '    \n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0),"Empty address");\n', '        require(to != address(this),"RESTO Token address");\n', '        _;\n', '    }\n', '    \n', '    modifier isICOover {\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(now > crowdSaleEndTime,"Transfer of tokens is prohibited until the end of the ICO");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Override for testing address destination\n', '     */\n', '    function transfer(address _to, uint256 _value) public validDestination(_to) kyc_passed(msg.sender) isICOover returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for testing address destination\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '    public validDestination(_to) kyc_passed(msg.sender) isICOover returns (bool) \n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev function set kyc bool to true\n', '     * can run only from crowdsale contract\n', '     * @param _investor The investor who passed the procedure KYC\n', '     */\n', '    function kycPass(address _investor) public onlyOwner {\n', '        kyc[_investor] = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev function transfer tokens from special address to users\n', '     * can run only from crowdsale contract\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromSpecialAddress(address _from, address _to, uint256 _value) public onlyOwner whenNotPaused returns (bool){\n', '        uint256 value = _value;\n', '        require (value >= 1,"Min value is 1");\n', '        value = value.mul(1 ether);\n', '        require (balances_[_from] >= value,"Decrease value");\n', '        \n', '        balances_[_from] = balances_[_from].sub(value);\n', '        balances_[_to] = balances_[_to].add(value);\n', '        \n', '        emit Transfer(_from, _to, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called from crowdsale contract to pause, triggers stopped state\n', '     * can run only from crowdsale contract\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '     * @dev called from crowdsale contract to unpause, returns to normal state\n', '     * can run only from crowdsale contract\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpaused();\n', '    }\n', '\n', '    function() external payable {\n', '        revert("The token contract don`t receive ether");\n', '    }  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner and manager addresses, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public manager;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Access denied");\n', '        _;\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == owner || msg.sender == manager,"Access denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0),"Invalid address");\n', '        candidate = _newOwner;\n', '    }\n', '\n', '    function setManager(address _newManager) public onlyOwner {\n', '        require(_newManager != address(0),"Invalid address");\n', '        manager = _newManager;\n', '    }\n', '\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender,"Only from candidate");\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract TeamAddress1 {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', 'contract TeamAddress2 {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', 'contract MarketingAddress {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', 'contract RetailersAddress {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', 'contract ReserveAddress {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', 'contract BountyAddress {\n', '    function() external payable {\n', '        revert("The contract don`t receive ether");\n', '    } \n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale\n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for RESTOToken;\n', '\n', '    uint256 hardCap = 50000 * 1 ether;\n', '    address myAddress = this;\n', '    RESTOToken public token = new RESTOToken(myAddress);\n', '    uint64 crowdSaleStartTime = 1537401600;     // 20.09.2018\n', '    uint64 crowdSaleEndTime = 1544745600;       // 14.12.2018\n', '\n', '    //Addresses for store tokens\n', '    TeamAddress1 public teamAddress1 = new TeamAddress1();\n', '    TeamAddress2 public teamAddress2 = new TeamAddress2();\n', '    MarketingAddress public marketingAddress = new MarketingAddress();\n', '    RetailersAddress public retailersAddress = new RetailersAddress();\n', '    ReserveAddress public reserveAddress = new ReserveAddress();\n', '    BountyAddress public bountyAddress = new BountyAddress();\n', '      \n', '    // How many token units a buyer gets per wei.\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    event Withdraw(\n', '        address indexed from, \n', '        address indexed to, \n', '        uint256 amount\n', '    );\n', '\n', '    event TokensPurchased(\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor() public {\n', '        uint256 totalTokens = token.INITIAL_SUPPLY();\n', '        /**\n', '        * @dev Inicial distributing tokens to special adresses\n', '        * TeamAddress1 - 4.5%\n', '        * TeamAddress2 - 13.5% (hold one year)\n', '        * MarketingAddress - 18%\n', '        * RetailersAddress - 9%\n', '        * ReserveAddress - 8%\n', '        * BountyAddress - 1%\n', '        */\n', '        _deliverTokens(teamAddress1, totalTokens.mul(45).div(1000));\n', '        _deliverTokens(teamAddress2, totalTokens.mul(135).div(1000));\n', '        _deliverTokens(marketingAddress, totalTokens.mul(18).div(100));\n', '        _deliverTokens(retailersAddress, totalTokens.mul(9).div(100));\n', '        _deliverTokens(reserveAddress, totalTokens.mul(8).div(100));\n', '        _deliverTokens(bountyAddress, totalTokens.div(100));\n', '\n', '        rate = 10000;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev fallback function\n', '    */\n', '    function () external payable {\n', '        require(msg.data.length == 0,"Only for simple payments");\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        \n', '        emit TokensPurchased(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pauseCrowdsale() public onlyOwner {\n', '        token.pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpauseCrowdsale() public onlyOwner {\n', '        token.unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev function set kyc bool to true\n', '     * @param _investor The investor who passed the procedure KYC\n', '     */\n', '    function setKYCpassed(address _investor) public restricted returns(bool){\n', '        token.kycPass(_investor);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev the function tranfer tokens from TeamAddress1 to investor\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromTeamAddress1(address _investor, uint256 _value) public restricted returns(bool){\n', '        token.transferTokensFromSpecialAddress(address(teamAddress1), _investor, _value); \n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * @dev the function tranfer tokens from TeamAddress1 to investor\n', '     * only after 1 year\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromTeamAddress2(address _investor, uint256 _value) public restricted returns(bool){\n', '        require (now >= (crowdSaleEndTime + 365 days), "Only after 1 year");\n', '        token.transferTokensFromSpecialAddress(address(teamAddress2), _investor, _value); \n', '        return true;\n', '    } \n', '    \n', '    /**\n', '     * @dev the function tranfer tokens from MarketingAddress to investor\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromMarketingAddress(address _investor, uint256 _value) public restricted returns(bool){\n', '        token.transferTokensFromSpecialAddress(address(marketingAddress), _investor, _value); \n', '        return true;\n', '    } \n', '    \n', '    /**\n', '     * @dev the function tranfer tokens from RetailersAddress to investor\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromRetailersAddress(address _investor, uint256 _value) public restricted returns(bool){\n', '        token.transferTokensFromSpecialAddress(address(retailersAddress), _investor, _value); \n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * @dev the function tranfer tokens from ReserveAddress to investor\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromReserveAddress(address _investor, uint256 _value) public restricted returns(bool){\n', '        token.transferTokensFromSpecialAddress(address(reserveAddress), _investor, _value); \n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * @dev the function tranfer tokens from BountyAddress to investor\n', '     * @param _value is entered in whole tokens (1 = 1 token)\n', '     */\n', '    function transferTokensFromBountyAddress(address _investor, uint256 _value) public restricted returns(bool){\n', '        token.transferTokensFromSpecialAddress(address(bountyAddress), _investor, _value); \n', '        return true;\n', '    } \n', '    \n', '    /**\n', '    * @dev Validation of an incoming purchase. \n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    * Start Crowdsale 20/09/2018       - 1537401600\n', '    * Finish Crowdsale 14/12/2018      - 1544745600\n', '    * Greate pause until 01/11/2020    - 1604188800\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view{\n', '        require(_beneficiary != address(0),"Invalid address");\n', '        require(_weiAmount != 0,"Invalid amount");\n', '        require((now > crowdSaleStartTime && now <= crowdSaleEndTime) || now > 1604188800,"At this time contract don`t sell tokens, sorry");\n', '        require(weiRaised < hardCap,"HardCap is passed, contract don`t accept ether.");\n', '    }\n', '\n', '    /**\n', '    * @dev internal function\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.safeTransfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function transfer token to new investors\n', '     * Access restricted owner and manager\n', '     */ \n', '    function transferTokens(address _newInvestor, uint256 _tokenAmount) public restricted {\n', '        uint256 value = _tokenAmount;\n', '        require (value >= 1,"Min _tokenAmount is 1");\n', '        value = value.mul(1 ether);        \n', '        _deliverTokens(_newInvestor, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev this function is ether converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 bonus = 0;\n', '        uint256 resultAmount = _weiAmount;\n', '        /**\n', '        * Start PreSale      20/09/2018      - 1537401600\n', '        * Start ICO          10/10/2018      - 1539129600 \n', '        * Finish ICO         14/12/2018      - 1544745600    \n', '        */\n', '        if (now < 1539129600) {\n', '            // Calculating bonus for PreSale period\n', '            if (_weiAmount >= 100 * 1 ether) {\n', '                bonus = 300;\n', '            } else {\n', '                bonus = 100;\n', '            }\n', '        } else {\n', '            // Calculating bonus for ICO period\n', '            if (_weiAmount >= 100 * 1 ether) {\n', '                bonus = 200;\n', '            } else {\n', '                /**\n', '                * ICO bonus                        UnisTimeStamp \n', '                *                                  Start date      End date\n', '                * 10.10.2018-16.10.2018 - 40%      1539129600\n', '                * 17.10.2018-23.10.2018 - 30%      1539734400\n', '                * 24.10.2018-31.10.2018 - 20%      1540339200\n', '                * 01.11.2018-16.11.2018 - 10%      1541030400      1542326400\n', '                */\n', '                if (now >= 1539129600 && now < 1539734400) {\n', '                    bonus = 40;\n', '                }\n', '                if (now >= 1539734400 && now < 1540339200) {\n', '                    bonus = 30;\n', '                }\n', '                if (now >= 1540339200 && now < 1541030400) {\n', '                    bonus = 20;\n', '                }\n', '                if (now >= 1541030400 && now < 1542326400) {\n', '                    bonus = 10;\n', '                }\n', '            }\n', '        }\n', '        if (bonus > 0) {\n', '            resultAmount += _weiAmount.mul(bonus).div(100);\n', '        }\n', '        return resultAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function forwardFunds() public onlyOwner {\n', '        uint256 transferValue = myAddress.balance.div(8);\n', '\n', '        // Addresses where funds are collected\n', '        address wallet1 = 0x0C4324DC212f7B09151148c3960f71904E5C074D;\n', '        address wallet2 = 0x49C0fAc36178DB055dD55df6a6656dd457dc307A;\n', '        address wallet3 = 0x510aC42D296D0b06d5B262F606C27d5cf22B9726;\n', '        address wallet4 = 0x48dfeA3ce1063191B45D06c6ECe7462B244A40B6;\n', '        address wallet5 = 0x5B1689B453bb0DBd38A0d9710a093A228ab13170;\n', '        address wallet6 = 0xDFA0Cba1D28E625C3f3257B4758782164e4622f2;\n', '        address wallet7 = 0xF3Ff96FE7eE76ACA81aFb180264D6A31f726BAbE;\n', '        address wallet8 = 0x5384EFFdf2bb24a8b0489633A64D4Bfc53BdFEb6;\n', '\n', '        wallet1.transfer(transferValue);\n', '        wallet2.transfer(transferValue);\n', '        wallet3.transfer(transferValue);\n', '        wallet4.transfer(transferValue);\n', '        wallet5.transfer(transferValue);\n', '        wallet6.transfer(transferValue);\n', '        wallet7.transfer(transferValue);\n', '        wallet8.transfer(myAddress.balance);\n', '    }\n', '    \n', '    function withdrawFunds (address _to, uint256 _value) public onlyOwner {\n', '        require (now > crowdSaleEndTime, "CrowdSale is not finished yet. Access denied.");\n', '        require (myAddress.balance >= _value,"Value is more than balance");\n', '        require(_to != address(0),"Invalid address");\n', '        _to.transfer(_value);\n', '        emit Withdraw(msg.sender, _to, _value);\n', '    }\n', '\n', '}']