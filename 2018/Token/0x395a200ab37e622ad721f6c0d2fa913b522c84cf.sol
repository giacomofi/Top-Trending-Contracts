['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     function mint(address from, address to, uint tokens) public;\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract RADION is ERC20Interface,Ownable {\n', '\n', '   using SafeMath for uint256;\n', '   \n', '   string public name;\n', '   string public symbol;\n', '   uint256 public decimals;\n', '\n', '   uint256 public _totalSupply;\n', '   mapping(address => uint256) tokenBalances;\n', '   address musicContract;\n', '   address advertisementContract;\n', '   address sale;\n', '   address wallet;\n', '\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   \n', '    // whitelisted addresses are those that have registered on the website\n', '    mapping(address=>bool) whiteListedAddresses;\n', '   \n', '   /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor(address _wallet) public {\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        name  = "RADION";\n', '        symbol = "RADIO";\n', '        decimals = 18;\n', '        _totalSupply = 55000000 * 10 ** uint(decimals);\n', '        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n', '    }\n', '    \n', '     // Get the token balance for account `tokenOwner`\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '         return tokenBalances[tokenOwner];\n', '     }\n', '  \n', '     // Transfer the balance from owner&#39;s account to another account\n', '     function transfer(address to, uint tokens) public returns (bool success) {\n', '         require(to != address(0));\n', '         require(tokens <= tokenBalances[msg.sender]);\n', '         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n', '         tokenBalances[to] = tokenBalances[to].add(tokens);\n', '         emit Transfer(msg.sender, to, tokens);\n', '         return true;\n', '     }\n', '  \n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return _totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', '     // transferred to the spender&#39;s account\n', '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     //only to be used by the ICO\n', '     \n', '    function mint(address sender, address receiver, uint256 tokenAmount) public {\n', '      require(msg.sender == musicContract || msg.sender == advertisementContract);\n', '      require(tokenBalances[sender] >= tokenAmount);               // checks if it has enough to sell\n', '      tokenBalances[receiver] = tokenBalances[receiver].add(tokenAmount);                  // adds the amount to buyer&#39;s balance\n', '      tokenBalances[sender] = tokenBalances[sender].sub(tokenAmount);                        // subtracts amount from seller&#39;s balance\n', '      emit Transfer(sender, receiver, tokenAmount); \n', '    }\n', '    \n', '    function setAddresses(address music, address advertisement,address _sale) public onlyOwner\n', '    {\n', '       musicContract = music;\n', '       advertisementContract = advertisement;\n', '       sale = _sale;\n', '    }\n', '\n', '     function () public payable {\n', '        revert();\n', '     }\n', ' \n', '    function buy(address beneficiary, uint ethAmountSent, uint rate) public onlyOwner\n', '    {\n', '        require(beneficiary != 0x0 && whiteListedAddresses[beneficiary] == true);\n', '        require(ethAmountSent>0);\n', '        uint weiAmount = ethAmountSent;\n', '        uint tokens = weiAmount.mul(rate);\n', '        \n', '        require(tokenBalances[wallet] >= tokens);               // checks if it has enough to sell\n', '        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(tokens);                  // adds the amount to buyer&#39;s balance\n', '        tokenBalances[wallet] = tokenBalances[wallet].sub(tokens);                        // subtracts amount from seller&#39;s balance\n', '        emit Transfer(wallet, beneficiary, tokens); \n', '    }\n', ' \n', '     // ------------------------------------------------------------------------\n', '     // Owner can transfer out any accidentally sent ERC20 tokens\n', '     // ------------------------------------------------------------------------\n', '     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '     }\n', '\n', '    function addAddressToWhiteList(address whitelistaddress) public onlyOwner\n', '    {\n', '        whiteListedAddresses[whitelistaddress] = true;\n', '    }\n', '    \n', '    function checkIfAddressIsWhitelisted(address whitelistaddress) public onlyOwner constant returns (bool)\n', '    {\n', '        if (whiteListedAddresses[whitelistaddress] == true)\n', '            return true;\n', '        return false; \n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     function mint(address from, address to, uint tokens) public;\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract RADION is ERC20Interface,Ownable {\n', '\n', '   using SafeMath for uint256;\n', '   \n', '   string public name;\n', '   string public symbol;\n', '   uint256 public decimals;\n', '\n', '   uint256 public _totalSupply;\n', '   mapping(address => uint256) tokenBalances;\n', '   address musicContract;\n', '   address advertisementContract;\n', '   address sale;\n', '   address wallet;\n', '\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   \n', '    // whitelisted addresses are those that have registered on the website\n', '    mapping(address=>bool) whiteListedAddresses;\n', '   \n', '   /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor(address _wallet) public {\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        name  = "RADION";\n', '        symbol = "RADIO";\n', '        decimals = 18;\n', '        _totalSupply = 55000000 * 10 ** uint(decimals);\n', '        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n', '    }\n', '    \n', '     // Get the token balance for account `tokenOwner`\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '         return tokenBalances[tokenOwner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address to, uint tokens) public returns (bool success) {\n', '         require(to != address(0));\n', '         require(tokens <= tokenBalances[msg.sender]);\n', '         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n', '         tokenBalances[to] = tokenBalances[to].add(tokens);\n', '         emit Transfer(msg.sender, to, tokens);\n', '         return true;\n', '     }\n', '  \n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return _totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', "     // transferred to the spender's account\n", '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     //only to be used by the ICO\n', '     \n', '    function mint(address sender, address receiver, uint256 tokenAmount) public {\n', '      require(msg.sender == musicContract || msg.sender == advertisementContract);\n', '      require(tokenBalances[sender] >= tokenAmount);               // checks if it has enough to sell\n', "      tokenBalances[receiver] = tokenBalances[receiver].add(tokenAmount);                  // adds the amount to buyer's balance\n", "      tokenBalances[sender] = tokenBalances[sender].sub(tokenAmount);                        // subtracts amount from seller's balance\n", '      emit Transfer(sender, receiver, tokenAmount); \n', '    }\n', '    \n', '    function setAddresses(address music, address advertisement,address _sale) public onlyOwner\n', '    {\n', '       musicContract = music;\n', '       advertisementContract = advertisement;\n', '       sale = _sale;\n', '    }\n', '\n', '     function () public payable {\n', '        revert();\n', '     }\n', ' \n', '    function buy(address beneficiary, uint ethAmountSent, uint rate) public onlyOwner\n', '    {\n', '        require(beneficiary != 0x0 && whiteListedAddresses[beneficiary] == true);\n', '        require(ethAmountSent>0);\n', '        uint weiAmount = ethAmountSent;\n', '        uint tokens = weiAmount.mul(rate);\n', '        \n', '        require(tokenBalances[wallet] >= tokens);               // checks if it has enough to sell\n', "        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(tokens);                  // adds the amount to buyer's balance\n", "        tokenBalances[wallet] = tokenBalances[wallet].sub(tokens);                        // subtracts amount from seller's balance\n", '        emit Transfer(wallet, beneficiary, tokens); \n', '    }\n', ' \n', '     // ------------------------------------------------------------------------\n', '     // Owner can transfer out any accidentally sent ERC20 tokens\n', '     // ------------------------------------------------------------------------\n', '     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '     }\n', '\n', '    function addAddressToWhiteList(address whitelistaddress) public onlyOwner\n', '    {\n', '        whiteListedAddresses[whitelistaddress] = true;\n', '    }\n', '    \n', '    function checkIfAddressIsWhitelisted(address whitelistaddress) public onlyOwner constant returns (bool)\n', '    {\n', '        if (whiteListedAddresses[whitelistaddress] == true)\n', '            return true;\n', '        return false; \n', '    }\n', '}']
