['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20() public {\n', '        totalSupply = 200000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "WaraCoin2";                                   // Set the name for display purposes\n', '        symbol = "WAC2";                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract  WaraCoin is owned, TokenERC20 {\n', '    \n', '    uint256 public sale_step;\n', '    \n', '    address waracoin_corp;\n', '\n', '    /* Save product&#39;s genuine information */\n', '    struct Product_genuine\n', '    {\n', '        address m_made_from_who;  // who made this product \n', '        \n', '        string m_Product_GUID;    // product&#39;s unique code\n', '        string m_Product_Description; // product&#39;s description\n', '        address m_who_have;       // who have this product now\n', '        address m_send_to_who;    // when product move to agency - if it is different with seller, it means that seller have no genuine  \n', '        string m_hash;  // need to check hash of description\n', '        \n', '        uint256 m_moved_count;  // how many times moved this product\n', '    }\n', '    \n', '    mapping (address => mapping (uint256 => Product_genuine)) public MyProducts;\n', '    \n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function WaraCoin() TokenERC20()  public \n', '    {\n', '        sale_step = 0;  // 0 : No sale, 1 : Presale, 2 : Crowdsale, 3 : Normalsale \n', '        waracoin_corp = msg.sender;\n', '    }\n', '    \n', '    function SetSaleStep(uint256 step) onlyOwner public\n', '    {\n', '        sale_step = step;\n', '    }\n', '\n', '    /* Set Waracoin sale price */\n', '    function () payable \n', '    {\n', '        require(sale_step!=0);\n', '        \n', '        if ( msg.sender != owner )  // If owner send Ether, it will use for dApp operation\n', '        {\n', '            uint amount = 0;\n', '            uint nowprice = 0;\n', '            \n', '            if ( sale_step == 1  )\n', '                nowprice = 10000;   // presale price\n', '            else\n', '                if ( sale_step == 2 )\n', '                    nowprice = 5000;    // crowdsale price\n', '                else\n', '                    nowprice = 1000;    // normalsale price\n', '                    \n', '            amount = msg.value * nowprice; \n', '            \n', '            require(balanceOf[waracoin_corp]>=amount);\n', '            \n', '            balanceOf[waracoin_corp] -= amount;\n', '            balanceOf[msg.sender] += amount;                  // adds the amount to buyer&#39;s balance\n', '            require(waracoin_corp.send(msg.value));\n', '            Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Seller will send WaraCoin to buyer\n', '     *\n', '     * @param _to The address of backers who have WaraCoin\n', '     * @param coin_amount How many WaraCoin will send\n', '     */\n', '    function waraCoinTransfer(address _to, uint256 coin_amount) public\n', '    {\n', '        uint256 amount = coin_amount * 10 ** uint256(decimals);\n', '\n', '        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n', '        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller&#39;s balance\n', '        balanceOf[_to] += amount;                  // subtracts the amount from seller&#39;s balance\n', '        Transfer(msg.sender, _to, amount);               // executes an event reflecting on the change\n', '    }\n', '\n', '    /**\n', '     * Owner will buy back WaraCoin from backers\n', '     *\n', '     * @param _from The address of backers who have WaraCoin\n', '     * @param coin_amount How many WaraCoin will buy back from him\n', '     */\n', '    function DestroyCoin(address _from, uint256 coin_amount) onlyOwner public \n', '    {\n', '        uint256 amount = coin_amount * 10 ** uint256(decimals);\n', '\n', '        require(balanceOf[_from] >= amount);         // checks if the sender has enough to sell\n', '        balanceOf[_from] -= amount;                  // subtracts the amount from seller&#39;s balance\n', '        Transfer(_from, this, amount);               // executes an event reflecting on the change\n', '    }    \n', '    \n', '    /**\n', '     * Here is WaraCoin&#39;s Genuine dApp functions\n', '    */\n', '    \n', '    /* When creator made product, must need to use this fuction for register his product first */\n', '    function registerNewProduct(uint256 product_idx,string new_guid,string product_descriptions,string hash) public returns(bool success)\n', '    {\n', '        uint256 amount = 1 * 10 ** uint256(decimals-2);        \n', '        \n', '        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for make product code\n', '        \n', '        Product_genuine storage mine = MyProducts[msg.sender][product_idx];\n', '        \n', '        require(mine.m_made_from_who!=msg.sender);\n', '        \n', '        mine.m_made_from_who = msg.sender;\n', '        mine.m_who_have = msg.sender;\n', '        mine.m_Product_GUID = new_guid;\n', '        mine.m_Product_Description = product_descriptions;\n', '        mine.m_hash = hash;\n', '\n', '        balanceOf[msg.sender] -= amount;\n', '        return true;        \n', '    }\n', '    \n', '    /* If product&#39;s owner want to move, he need to use this fuction for setting receiver : must use by sender */  \n', '    function setMoveProductToWhom(address who_made_this,uint256 product_idx,address moveto) public returns (bool success)\n', '    {\n', '        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n', '        \n', '        require(mine.m_who_have==msg.sender);\n', '        \n', '        mine.m_send_to_who = moveto;\n', '\n', '        return true;\n', '    }\n', '    \n', '    /* Product&#39;s buyer need to use this function for save his genuine */\n', '    function moveProduct(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\n', '    {\n', '        uint256 amount = 1 * 10 ** uint256(decimals-2);        \n', '\n', '        require(balanceOf[msg.sender]>=amount);   // Need to use one WaraCoin for move product\n', '        \n', '        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n', '        \n', '        require(mine.m_who_have==who_have_this);    // if sender have no product, break\n', '        require(mine.m_send_to_who==msg.sender);    // if receiver is not me, break\n', '\n', '        mine.m_who_have = msg.sender;\n', '        mine.m_moved_count += 1;\n', '        \n', '        balanceOf[msg.sender] -= amount;\n', '        \n', '        return true;\n', '    }\n', '\n', '    /* Check Genuine of owner */\n', '    function checkProductGenuine(address who_made_this,address who_have_this,uint256 product_idx) public returns (bool success)\n', '    {\n', '        success = false;\n', '        \n', '        Product_genuine storage mine = MyProducts[who_made_this][product_idx];\n', '        if ( mine.m_who_have==who_have_this )    // if checker have no product, break\n', '            success = true;\n', '            \n', '        return success;\n', '    }\n', '    \n', '}']