['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '   modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '   function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       uint256 c = a / b;\n', '        return c;\n', '  }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract NDUXBase is BasicToken, Ownable {\n', '\n', '  string public constant name = "NODUX";\n', '  string public constant symbol = "NDUX";\n', '  uint constant maxTotalSupply = 75000000;\n', '  \n', '  function NDUXBase() public {\n', '    mint(this, maxTotalSupply);\n', '  }\n', '\n', '  function mint(address to, uint amount) internal returns(bool) {\n', '    require(to != address(0) && amount > 0);\n', '    totalSupply_ = totalSupply_.add(amount);\n', '    balances[to] = balances[to].add(amount);\n', '    emit Transfer(address(0), to, amount);\n', '    return true;\n', '  }\n', '  \n', '  function send(address to, uint amount) public onlyOwner returns(bool) {\n', '    require(to != address(0));\n', '    require(amount <= balances[this]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[this] = balances[this].sub(amount);\n', '    balances[to] = balances[to].add(amount);\n', '    emit Transfer(this, to, amount);\n', '  }\n', '\n', '  function burn(address from, uint amount) public onlyOwner returns(bool) {\n', '    require(from != address(0) && amount > 0);\n', '    balances[from] = balances[from].sub(amount);\n', '    totalSupply_ = totalSupply_.sub(amount);\n', '    emit Transfer(from, address(0), amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TxFeatures is BasicToken {\n', '\n', '  struct Tx {\n', '    uint timestamp;\n', '    uint amount;\n', '  }\n', '\n', '  mapping(address => Tx[]) public txs;\n', '\n', '  event NewTx(address user, uint timestamp, uint amount);\n', '\n', '  function pushtx(address user, uint amount) internal {\n', '    emit NewTx(user, now, amount);\n', '    txs[user].push(Tx(now, amount));\n', '  }\n', '\n', '  function poptxs(address user, uint amount) internal {\n', '    require(balanceOf(user) >= amount);\n', '    Tx[] storage usertxs = txs[user];\n', '\n', '    for(Tx storage curtx = usertxs[usertxs.length - 1]; usertxs.length != 0;) {\n', '\n', '      if(curtx.amount > amount) {\n', '        curtx.amount -= amount;\n', '        amount = 0;\n', '      } else {\n', '        amount -= curtx.amount;\n', '        delete usertxs[usertxs.length - 1];\n', '        --usertxs.length;\n', '      }\n', '      if(amount == 0) break;\n', '    }\n', '\n', '    require(amount == 0);\n', '\n', '  }\n', '}\n', '\n', 'contract NDUXB is NDUXBase, TxFeatures {\n', '   \n', '     function calculateTokensEnabledOne(address user, uint minAge) public view onlyOwner returns(uint amount) {\n', '    Tx[] storage usertxs = txs[user];\n', '    for(uint it = 0; it < usertxs.length; ++it) {\n', '      Tx storage curtx = usertxs[it];\n', '      uint diff = now - curtx.timestamp;\n', '      if(diff >= minAge) {\n', '        amount += curtx.amount;\n', '      }\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  event SendMiningProfit(address user, uint tokens, uint ethers);\n', '\n', '  function sendMiningProfit(address[] users, uint minAge) public payable onlyOwner returns(uint) {\n', '    require(users.length > 0);\n', '    uint total = 0;\n', '\n', '    uint[] memory __balances = new uint[](users.length);\n', '\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      address user = users[it];\n', '      uint balance = calculateTokensEnabledOne(user, minAge);\n', '      __balances[it] = balance;\n', '      total += balance;\n', '    }\n', '\n', '    if(total == 0) return 0;\n', '\n', '    uint ethersPerToken = msg.value / total;\n', '\n', '    for(it = 0; it < users.length; ++it) {\n', '      user = users[it];\n', '      balance = __balances[it];\n', '      uint ethers = balance * ethersPerToken;\n', '      if(balance > 0)\n', '        user.transfer(balance * ethersPerToken);\n', '      emit SendMiningProfit(user, balance, ethers);\n', '    }\n', '    return ethersPerToken;\n', '  }\n', '\n', '  function calculateTokensEnabledforAirdrop(address[] users,uint minAge) public view onlyOwner returns(uint total) {\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      total += calculateTokensEnabledOne(users[it], minAge);\n', '    }\n', '  }\n', '\n', '  function airdrop(address[] users, uint minAge, uint percent, uint maxToSend) public onlyOwner returns(uint) {\n', '    require(users.length > 0);\n', '    require(balanceOf(msg.sender) >= maxToSend);\n', '    require(percent > 0 && percent < 10);\n', '\n', '    uint total = 0;\n', '\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      address user = users[it];\n', '      uint balance = calculateTokensEnabledOne(user, minAge);\n', '      if(balance > 0) {\n', '        uint toSend = balance.mul(percent).div(100);\n', '        total += toSend;\n', '        transfer(user, balance.mul(percent).div(100));\n', '        require(total <= maxToSend);\n', '      }\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  function send(address to, uint amount) public onlyOwner returns(bool) {\n', '    super.send(to, amount);\n', '    pushtx(to, amount);\n', '  }\n', '\n', '  function burn(address from, uint amount) public onlyOwner returns(bool) {\n', '    poptxs(from, amount);\n', '    return super.burn(from, amount);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    poptxs(msg.sender, _value);\n', '    pushtx(_to, _value);\n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function () payable public {  }\n', '  \n', '  function sendAllLocalEthers(address to) public onlyOwner {\n', '    to.transfer(address(this).balance);\n', '  }\n', '  \n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '   modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '   function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       uint256 c = a / b;\n', '        return c;\n', '  }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract NDUXBase is BasicToken, Ownable {\n', '\n', '  string public constant name = "NODUX";\n', '  string public constant symbol = "NDUX";\n', '  uint constant maxTotalSupply = 75000000;\n', '  \n', '  function NDUXBase() public {\n', '    mint(this, maxTotalSupply);\n', '  }\n', '\n', '  function mint(address to, uint amount) internal returns(bool) {\n', '    require(to != address(0) && amount > 0);\n', '    totalSupply_ = totalSupply_.add(amount);\n', '    balances[to] = balances[to].add(amount);\n', '    emit Transfer(address(0), to, amount);\n', '    return true;\n', '  }\n', '  \n', '  function send(address to, uint amount) public onlyOwner returns(bool) {\n', '    require(to != address(0));\n', '    require(amount <= balances[this]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[this] = balances[this].sub(amount);\n', '    balances[to] = balances[to].add(amount);\n', '    emit Transfer(this, to, amount);\n', '  }\n', '\n', '  function burn(address from, uint amount) public onlyOwner returns(bool) {\n', '    require(from != address(0) && amount > 0);\n', '    balances[from] = balances[from].sub(amount);\n', '    totalSupply_ = totalSupply_.sub(amount);\n', '    emit Transfer(from, address(0), amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TxFeatures is BasicToken {\n', '\n', '  struct Tx {\n', '    uint timestamp;\n', '    uint amount;\n', '  }\n', '\n', '  mapping(address => Tx[]) public txs;\n', '\n', '  event NewTx(address user, uint timestamp, uint amount);\n', '\n', '  function pushtx(address user, uint amount) internal {\n', '    emit NewTx(user, now, amount);\n', '    txs[user].push(Tx(now, amount));\n', '  }\n', '\n', '  function poptxs(address user, uint amount) internal {\n', '    require(balanceOf(user) >= amount);\n', '    Tx[] storage usertxs = txs[user];\n', '\n', '    for(Tx storage curtx = usertxs[usertxs.length - 1]; usertxs.length != 0;) {\n', '\n', '      if(curtx.amount > amount) {\n', '        curtx.amount -= amount;\n', '        amount = 0;\n', '      } else {\n', '        amount -= curtx.amount;\n', '        delete usertxs[usertxs.length - 1];\n', '        --usertxs.length;\n', '      }\n', '      if(amount == 0) break;\n', '    }\n', '\n', '    require(amount == 0);\n', '\n', '  }\n', '}\n', '\n', 'contract NDUXB is NDUXBase, TxFeatures {\n', '   \n', '     function calculateTokensEnabledOne(address user, uint minAge) public view onlyOwner returns(uint amount) {\n', '    Tx[] storage usertxs = txs[user];\n', '    for(uint it = 0; it < usertxs.length; ++it) {\n', '      Tx storage curtx = usertxs[it];\n', '      uint diff = now - curtx.timestamp;\n', '      if(diff >= minAge) {\n', '        amount += curtx.amount;\n', '      }\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  event SendMiningProfit(address user, uint tokens, uint ethers);\n', '\n', '  function sendMiningProfit(address[] users, uint minAge) public payable onlyOwner returns(uint) {\n', '    require(users.length > 0);\n', '    uint total = 0;\n', '\n', '    uint[] memory __balances = new uint[](users.length);\n', '\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      address user = users[it];\n', '      uint balance = calculateTokensEnabledOne(user, minAge);\n', '      __balances[it] = balance;\n', '      total += balance;\n', '    }\n', '\n', '    if(total == 0) return 0;\n', '\n', '    uint ethersPerToken = msg.value / total;\n', '\n', '    for(it = 0; it < users.length; ++it) {\n', '      user = users[it];\n', '      balance = __balances[it];\n', '      uint ethers = balance * ethersPerToken;\n', '      if(balance > 0)\n', '        user.transfer(balance * ethersPerToken);\n', '      emit SendMiningProfit(user, balance, ethers);\n', '    }\n', '    return ethersPerToken;\n', '  }\n', '\n', '  function calculateTokensEnabledforAirdrop(address[] users,uint minAge) public view onlyOwner returns(uint total) {\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      total += calculateTokensEnabledOne(users[it], minAge);\n', '    }\n', '  }\n', '\n', '  function airdrop(address[] users, uint minAge, uint percent, uint maxToSend) public onlyOwner returns(uint) {\n', '    require(users.length > 0);\n', '    require(balanceOf(msg.sender) >= maxToSend);\n', '    require(percent > 0 && percent < 10);\n', '\n', '    uint total = 0;\n', '\n', '    for(uint it = 0; it < users.length; ++it) {\n', '      address user = users[it];\n', '      uint balance = calculateTokensEnabledOne(user, minAge);\n', '      if(balance > 0) {\n', '        uint toSend = balance.mul(percent).div(100);\n', '        total += toSend;\n', '        transfer(user, balance.mul(percent).div(100));\n', '        require(total <= maxToSend);\n', '      }\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  function send(address to, uint amount) public onlyOwner returns(bool) {\n', '    super.send(to, amount);\n', '    pushtx(to, amount);\n', '  }\n', '\n', '  function burn(address from, uint amount) public onlyOwner returns(bool) {\n', '    poptxs(from, amount);\n', '    return super.burn(from, amount);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    poptxs(msg.sender, _value);\n', '    pushtx(_to, _value);\n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function () payable public {  }\n', '  \n', '  function sendAllLocalEthers(address to) public onlyOwner {\n', '    to.transfer(address(this).balance);\n', '  }\n', '  \n', '}']
