['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Token is ERC20, Ownable {\n', '  using SafeMath for uint;\n', '\n', '  // Token 信息\n', '\n', '  string public constant name = "Truedeal Token";\n', '  string public constant symbol = "TDT";\n', '\n', '  uint8 public decimals = 18;\n', '\n', '  mapping (address => uint256) accounts; // User Accounts\n', "  mapping (address => mapping (address => uint256)) allowed; // User's allowances table\n", '\n', '  // Modifier\n', '  modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n', '      require(_to != 0x0);\n', '      _;\n', '  }\n', '\n', '  modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n', '      require(_amount > 0);\n', '      _;\n', '  }\n', '\n', '  modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n', '      require(msg.value > 0);\n', '      _;\n', '  }\n', '\n', '  // ERC20 API\n', '\n', '  // -------------------------------------------------\n', '  // Transfers to another address\n', '  // -------------------------------------------------\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '      require(accounts[msg.sender] >= _amount);         // check amount of balance can be tranfetdt\n', '      addToBalance(_to, _amount);\n', '      decrementBalance(msg.sender, _amount);\n', '      Transfer(msg.sender, _to, _amount);\n', '      return true;\n', '  }\n', '\n', '  // -------------------------------------------------\n', '  // Transfers from one address to another (need allowance to be called first)\n', '  // -------------------------------------------------\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '      require(allowance(_from, msg.sender) >= _amount);\n', '      decrementBalance(_from, _amount);\n', '      addToBalance(_to, _amount);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '      Transfer(_from, _to, _amount);\n', '      return true;\n', '  }\n', '\n', '  // -------------------------------------------------\n', '  // Approves another address a certain amount of TDT\n', '  // -------------------------------------------------\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '      require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '      allowed[msg.sender][_spender] = _value;\n', '      Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '\n', '  // -------------------------------------------------\n', "  // Gets an address's TDT allowance\n", '  // -------------------------------------------------\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '  }\n', '\n', '  // -------------------------------------------------\n', '  // Gets the TDT balance of any address\n', '  // -------------------------------------------------\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '      return accounts[_owner];\n', '  }\n', '\n', '  function Token(address _address) public {\n', '    totalSupply = 8000000000 * 1e18;\n', '    addToBalance(_address, totalSupply);\n', '    Transfer(0x0, _address, totalSupply);\n', '  }\n', '\n', '  // -------------------------------------------------\n', '  // Add balance\n', '  // -------------------------------------------------\n', '  function addToBalance(address _address, uint _amount) internal {\n', '    accounts[_address] = accounts[_address].add(_amount);\n', '  }\n', '\n', '  // -------------------------------------------------\n', '  // Sub balance\n', '  // -------------------------------------------------\n', '  function decrementBalance(address _address, uint _amount) internal {\n', '    accounts[_address] = accounts[_address].sub(_amount);\n', '  }\n', '}']