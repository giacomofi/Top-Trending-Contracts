['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', '* @title Emco token\n', '* @dev Emco token implementation\n', '*/\n', 'contract EmcoToken is StandardToken, Ownable {\n', '\n', '\tstring public constant name = "EmcoToken";\n', '\tstring public constant symbol = "EMCO";\n', '\tuint8 public constant decimals = 18;\n', '\n', '\tuint public constant INITIAL_SUPPLY = 1500000 * (10 ** uint(decimals));\n', '\tuint public constant MAX_SUPPLY = 36000000 * (10 ** uint(decimals));\n', '\n', '\tmapping (address => uint) public miningBalances;\n', '\tmapping (address => uint) public lastMiningBalanceUpdateTime;\n', '\n', '\taddress systemAddress;\n', '\n', '\tuint public constant DAY_MINING_DEPOSIT_LIMIT = 360000 * (10 ** uint(decimals));\n', '\tuint public constant TOTAL_MINING_DEPOSIT_LIMIT = 3600000 * (10 ** uint(decimals));\n', '\tuint currentDay;\n', '\tuint currentDayDeposited;\n', '\tuint public miningTotalDeposited;\n', '\n', '\tmapping(address => bytes32) public userReferralCodes;\n', '\tmapping(bytes32 => address) public referralCodeOwners;\n', '\tmapping(address => address) public referrals;\n', '\n', '\tevent Mine(address indexed beneficiary, uint value);\n', '\n', '\tevent MiningBalanceUpdated(address indexed owner, uint amount, bool isDeposit);\n', '\n', '\tconstructor() public {\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n', '\t\tsystemAddress = msg.sender;\n', '\t\ttotalSupply_ = INITIAL_SUPPLY;\n', '\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\t}\n', '\n', '\tfunction setReferralCode(bytes32 _code) public returns (bytes32) {\n', '\t\trequire(_code != "", "Ref code should not be empty");\n', '\t\trequire(referralCodeOwners[_code] == address(0), "This referral code is already used");\n', '\t\trequire(userReferralCodes[msg.sender] == "", "Referal code is already set");\n', '\t\tuserReferralCodes[msg.sender] = _code;\n', '\t\treferralCodeOwners[_code] = msg.sender;\n', '\t\treturn userReferralCodes[msg.sender];\n', '\t}\n', '\n', '\tfunction setReferral(bytes32 _code) public {\n', '\t\trequire(referralCodeOwners[_code] != address(0), "Invalid referral code");\n', '\t\trequire(referrals[msg.sender] == address(0), "You already have a referrer");\n', '\t\taddress referrer = referralCodeOwners[_code];\n', '\t\trequire(referrer != msg.sender, "Can not invite yourself");\n', '\t\treferrals[msg.sender] = referrer;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of specified address (amount of tokens on main balance \n', '\t* plus amount of tokens on mining balance).\n', '\t* @param _owner The address to query the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint balance) {\n', '\t\treturn balances[_owner].add(miningBalances[_owner]);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the mining balance if caller.\n', '\t* @param _owner The address to query the balance of.\n', "\t* @return An uint256 representing the amount of tokens of caller's mining balance\n", '\t*/\n', '\tfunction miningBalanceOf(address _owner) public view returns (uint balance) {\n', '\t\treturn miningBalances[_owner];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Moves specified amount of tokens from main balance to mining balance \n', '\t* @param _amount An uint256 representing the amount of tokens to transfer to main balance\n', '\t*/\n', '\tfunction depositToMiningBalance(uint _amount) public {\n', '\t\trequire(balances[msg.sender] >= _amount, "not enough tokens");\n', '\t\trequire(getCurrentDayDeposited().add(_amount) <= DAY_MINING_DEPOSIT_LIMIT,\n', '\t\t\t"Day mining deposit exceeded");\n', '\t\trequire(miningTotalDeposited.add(_amount) <= TOTAL_MINING_DEPOSIT_LIMIT,\n', '\t\t\t"Total mining deposit exceeded");\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\t\tminingBalances[msg.sender] = miningBalances[msg.sender].add(_amount);\n', '\t\tminingTotalDeposited = miningTotalDeposited.add(_amount);\n', '\t\tupdateCurrentDayDeposited(_amount);\n', '\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n', '\t\temit MiningBalanceUpdated(msg.sender, _amount, true);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Moves specified amount of tokens from mining balance to main balance\n', '\t* @param _amount An uint256 representing the amount of tokens to transfer to mining balance\n', '\t*/\n', '\tfunction withdrawFromMiningBalance(uint _amount) public {\n', '\t\trequire(miningBalances[msg.sender] >= _amount, "not enough tokens on mining balance");\n', '\n', '\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(_amount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(_amount);\n', '\n', '\t\t//updating mining limits\n', '\t\tminingTotalDeposited.sub(_amount);\n', '\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n', '\t\temit MiningBalanceUpdated(msg.sender, _amount, false);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Mine tokens. For every 24h for each user�s token on mining balance, \n', '\t* 1% is burnt on mining balance and Reward % is minted to the main balance. 15% fee of difference \n', '\t* between minted coins and burnt coins goes to system address.\n', '\t*/ \n', '\tfunction mine() public {\n', '\t\trequire(totalSupply_ < MAX_SUPPLY, "mining is over");\n', '\t\tuint reward = getReward(totalSupply_);\n', '\t\tuint daysForReward = getDaysForReward();\n', '\n', '\t\tuint mintedAmount = miningBalances[msg.sender].mul(reward.sub(1000000000))\n', '\t\t\t\t\t\t\t\t\t\t.mul(daysForReward).div(100000000000);\n', '\t\trequire(mintedAmount != 0, "mining will not produce any reward");\n', '\n', '\t\tuint amountToBurn = miningBalances[msg.sender].mul(daysForReward).div(100);\n', '\n', '\t\t//check exceeding max number of tokens\n', '\t\tif(totalSupply_.add(mintedAmount) > MAX_SUPPLY) {\n', '\t\t\tuint availableToMint = MAX_SUPPLY.sub(totalSupply_);\n', '\t\t\tamountToBurn = availableToMint.div(mintedAmount).mul(amountToBurn);\n', '\t\t\tmintedAmount = availableToMint;\n', '\t\t}\n', '\n', '\t\ttotalSupply_ = totalSupply_.add(mintedAmount);\n', '\n', '\t\tminingBalances[msg.sender] = miningBalances[msg.sender].sub(amountToBurn);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(amountToBurn);\n', '\n', '\t\tuint userReward;\n', '\t\tuint referrerReward = 0;\n', '\t\taddress referrer = referrals[msg.sender];\n', '\t\t\n', '\t\tif(referrer == address(0)) {\n', '\t\t\tuserReward = mintedAmount.mul(85).div(100);\n', '\t\t} else {\n', '\t\t\tuserReward = mintedAmount.mul(86).div(100);\n', '\t\t\treferrerReward = mintedAmount.div(100);\n', '\t\t\tbalances[referrer] = balances[referrer].add(referrerReward);\n', '\t\t\temit Mine(referrer, referrerReward);\n', '\t\t\temit Transfer(address(0), referrer, referrerReward);\n', '\t\t}\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(userReward);\n', '\n', '\t\temit Mine(msg.sender, userReward);\n', '\t\temit Transfer(address(0), msg.sender, userReward);\n', '\n', '\t\t//update limits\n', '\t\tminingTotalDeposited = miningTotalDeposited.sub(amountToBurn);\n', '\t\temit MiningBalanceUpdated(msg.sender, amountToBurn, false);\n', '\n', '\t\t//set system fee\n', '\t\tuint systemFee = mintedAmount.sub(userReward).sub(referrerReward);\n', '\t\tbalances[systemAddress] = balances[systemAddress].add(systemFee);\n', '\n', '\t\temit Mine(systemAddress, systemFee);\n', '\t\temit Transfer(address(0), systemAddress, systemFee);\n', '\n', '\t\tlastMiningBalanceUpdateTime[msg.sender] = now;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Set system address\n', '\t* @param _systemAddress An address to set\n', '\t*/\n', '\tfunction setSystemAddress(address _systemAddress) public onlyOwner {\n', '\t\tsystemAddress = _systemAddress;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Get sum of deposits to mining accounts for current day\n', '\t*/\n', '\tfunction getCurrentDayDeposited() public view returns (uint) {\n', '\t\tif(now / 1 days == currentDay) {\n', '\t\t\treturn currentDayDeposited;\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Get number of days for reward on mining. Maximum 100 days.\n', '\t* @return An uint256 representing number of days user will get reward for.\n', '\t*/\n', '\tfunction getDaysForReward() public view returns (uint rewardDaysNum){\n', '\t\tif(lastMiningBalanceUpdateTime[msg.sender] == 0) {\n', '\t\t\treturn 0;\n', '\t\t} else {\n', '\t\t\tuint value = (now - lastMiningBalanceUpdateTime[msg.sender]) / (1 days);\n', '\t\t\tif(value > 100) {\n', '\t\t\t\treturn 100;\n', '\t\t\t} else {\n', '\t\t\t\treturn value;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Calculate current mining reward based on total supply of tokens\n', '\t* @return An uint256 representing reward in percents multiplied by 1000000000\n', '\t*/\n', '\tfunction getReward(uint _totalSupply) public pure returns (uint rewardPercent){\n', '\t\tuint rewardFactor = 1000000 * (10 ** uint256(decimals));\n', '\t\tuint decreaseFactor = 41666666;\n', '\n', '\t\tif(_totalSupply < 23 * rewardFactor) {\n', '\t\t\treturn 2000000000 - (decreaseFactor.mul(_totalSupply.div(rewardFactor)));\n', '\t\t}\n', '\n', '\t\tif(_totalSupply < MAX_SUPPLY) {\n', '\t\t\treturn 1041666666;\n', '\t\t} else {\n', '\t\t\treturn 1000000000;\n', '\t\t} \n', '\t}\n', '\n', '\tfunction updateCurrentDayDeposited(uint _addedTokens) private {\n', '\t\tif(now / 1 days == currentDay) {\n', '\t\t\tcurrentDayDeposited = currentDayDeposited.add(_addedTokens);\n', '\t\t} else {\n', '\t\t\tcurrentDay = now / 1 days;\n', '\t\t\tcurrentDayDeposited = _addedTokens;\n', '\t\t}\n', '\t}\n', '\n', '}']