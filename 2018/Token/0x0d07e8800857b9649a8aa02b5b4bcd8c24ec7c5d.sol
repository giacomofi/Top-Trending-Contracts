['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '    \n', "    /// 'owner' is the only address that can call a function with \n", '    /// this modifier\n', '    address public owner;\n', '    address internal newOwner;\n', '    \n', "    ///@notice The constructor assigns the message sender to be 'owner'\n", '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '    \n', '    ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract CUSE is ERC20Token {\n', '    \n', '    string public name = "USE Call Option";\n', '    string public symbol = "CUSE12";\n', '    uint public decimals = 0;\n', '    \n', '    uint256 public totalSupply = 75000000;\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "    //Default assumes totalSupply can't be over max (2^256 - 1).\n", "    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '    //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowances[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '          balances[_to] += _value;\n', '          balances[_from] -= _value;\n', '          allowances[_from][msg.sender] -= _value;\n', '          emit Transfer(_from, _to, _value);\n', '          return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    mapping(address => uint256) public balances;\n', '    \n', '    mapping (address => mapping (address => uint256)) allowances;\n', '}\n', '\n', 'contract ExchangeCUSE is SafeMath, Owned, CUSE {\n', '    \n', '    // Exercise End Time 1/1/2019 0:0:0\n', '    uint public ExerciseEndTime = 1546272000;\n', '    uint public exchangeRate = 13333 * 10**9 wei; //percentage times (1 ether)\n', '    \n', '    //mapping (address => uint) ustValue; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '    \n', '    // UST address\n', '    address public USEaddress = address(0xd9485499499d66B175Cf5ED54c0a19f1a6Bcb61A);\n', '    \n', '    // offical Address\n', '    address public officialAddress = address(0x89Ead717c9DC15a222926221897c68F9486E7229);\n', '\n', '    function execCUSEOption() public payable returns (bool) {\n', '        require (now < ExerciseEndTime);\n', '        \n', '        // ETH user send\n', '        uint _ether = msg.value;\n', '        (uint _use, uint _refoundETH) = calcUSE(balances[msg.sender], _ether);\n', '        \n', '        // do exercise\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _use/(10**18));\n', '        balances[officialAddress] = safeAdd(balances[officialAddress], _use/(10**18));\n', '        require (CUSE(USEaddress).transferFrom(officialAddress, msg.sender, _use) == true);\n', '\n', '        emit Transfer(msg.sender, officialAddress, _use/(10**18)); \n', '        \n', '        // refound ETH\n', '        needRefoundETH(_refoundETH);\n', '        officialAddress.transfer(safeSub(_ether, _refoundETH));\n', '    }\n', '    \n', '    // Calculate\n', '    function calcUSE(uint _cuse, uint _ether) internal view returns (uint _use, uint _refoundETH) {\n', '        uint _amount = _ether / exchangeRate;\n', '        require (safeMul(_amount, exchangeRate) <= _ether);\n', '        \n', '        // Check Whether msg.sender Have Enough CUSE\n', '        if (_amount <= _cuse) {\n', '            _use = safeMul(_amount, 10**18);\n', '            _refoundETH = 0;\n', '            \n', '        } else {\n', '            _use = safeMul(_cuse, 10**18);\n', '            _refoundETH = safeMul(safeSub(_amount, _cuse), exchangeRate);\n', '        }\n', '        \n', '    }\n', '    \n', '    function needRefoundETH(uint _refoundETH) internal {\n', '        if (_refoundETH > 0) {\n', '            msg.sender.transfer(_refoundETH);\n', '        }\n', '    }\n', '    \n', '    function changeOfficialAddress(address _newAddress) public onlyOwner {\n', '         officialAddress = _newAddress;\n', '    }\n', '}\n', '\n', 'contract USECallOption is ExchangeCUSE {\n', '\n', '    function () payable public {\n', '        revert();\n', '    }\n', '\n', '    // Allocate candy token\n', '    function allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\n', '       for(uint i = 0; i < _owners.length; i++){\n', '\t\t   balances[_owners[i]] = safeAdd(balances[_owners[i]], _values[i]); \n', '\t\t   emit Transfer(address(this), _owners[i], _values[i]);  \t\t  \n', '        }\n', '    }\n', '\n', "    // only end time, onwer can transfer contract's ether out.\n", '    function WithdrawETH() payable public onlyOwner {\n', '        officialAddress.transfer(address(this).balance);\n', '    } \n', '    \n', '}']