['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Auth {\n', '    address public owner = 0x00;\n', '    mapping (address => bool) public founders;\n', '    struct ProposeOwner {\n', '        address owner;\n', '        bool active;\n', '    }\n', '    ProposeOwner[] public proposes;\n', '\n', '    function Auth () {\n', '        founders[0x18177d9743c1dfd9f4b9922986b3d7dbdc6683a6] = true;\n', '        founders[0x94fc42a2f94f998dfb07e077c8610f7b72977ce3] = true;\n', '    }\n', '\n', '    function proposeChangeOwner (address _address) public isFounder {\n', '        proposes.push(ProposeOwner({\n', '            owner: _address,\n', '            active: true\n', '        }));\n', '    }\n', '\n', '    function approveChangeOwner (uint _index) public isFounder {\n', '        assert(proposes[_index].owner != msg.sender);\n', '        assert(proposes[_index].active);\n', '\n', '        proposes[_index].active = false;\n', '        owner = proposes[_index].owner;\n', '    }\n', '\n', '    modifier auth {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isFounder() {\n', '        assert(founders[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Stop is Auth {\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    function stop() auth {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() auth {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is Token, Stop {\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[msg.sender]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public stoppable returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract BSE is StandardToken {\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    string public name = "BiSale";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "BSE";\n', '    string public version = &#39;v0.1&#39;;\n', '    uint256 public totalSupply = 0;\n', '\n', '    function BSE () {\n', '        owner = msg.sender;\n', '        totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function mint(address _target, uint256 _value) auth stoppable {\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        balanceOf[_target] = SafeMath.safeAdd(balanceOf[_target], _value);\n', '        totalSupply = SafeMath.safeAdd(totalSupply, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) auth stoppable {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Auth {\n', '    address public owner = 0x00;\n', '    mapping (address => bool) public founders;\n', '    struct ProposeOwner {\n', '        address owner;\n', '        bool active;\n', '    }\n', '    ProposeOwner[] public proposes;\n', '\n', '    function Auth () {\n', '        founders[0x18177d9743c1dfd9f4b9922986b3d7dbdc6683a6] = true;\n', '        founders[0x94fc42a2f94f998dfb07e077c8610f7b72977ce3] = true;\n', '    }\n', '\n', '    function proposeChangeOwner (address _address) public isFounder {\n', '        proposes.push(ProposeOwner({\n', '            owner: _address,\n', '            active: true\n', '        }));\n', '    }\n', '\n', '    function approveChangeOwner (uint _index) public isFounder {\n', '        assert(proposes[_index].owner != msg.sender);\n', '        assert(proposes[_index].active);\n', '\n', '        proposes[_index].active = false;\n', '        owner = proposes[_index].owner;\n', '    }\n', '\n', '    modifier auth {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isFounder() {\n', '        assert(founders[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Stop is Auth {\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    function stop() auth {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() auth {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is Token, Stop {\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[msg.sender]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public stoppable returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract BSE is StandardToken {\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    string public name = "BiSale";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "BSE";\n', "    string public version = 'v0.1';\n", '    uint256 public totalSupply = 0;\n', '\n', '    function BSE () {\n', '        owner = msg.sender;\n', '        totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function mint(address _target, uint256 _value) auth stoppable {\n', '        require(_target != address(0));\n', '        require(_value > 0);\n', '        balanceOf[_target] = SafeMath.safeAdd(balanceOf[_target], _value);\n', '        totalSupply = SafeMath.safeAdd(totalSupply, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) auth stoppable {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);\n', '    }\n', '}']
