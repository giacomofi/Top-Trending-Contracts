['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract CJC is ERC20,Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  //the base info of the token\n', '  string public constant name="Colour  Jewel Chain";\n', '  string public constant symbol="CJC";\n', '  string public constant version = "1.0";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public balance;\n', '\n', '  uint256 public constant MAX_SUPPLY=1000000000*10**decimals;\n', '\n', '    struct epoch  {\n', '        uint256 endTime;\n', '        uint256 amount;\n', '    }\n', '\n', '  mapping(address=>epoch[]) public lockEpochsMap;\n', '    mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '\n', '  function CJC() public{\n', '    totalSupply = MAX_SUPPLY;\n', '    balances[msg.sender] = MAX_SUPPLY;\n', '    emit Transfer(0x0, msg.sender, MAX_SUPPLY);\n', '    balance = 0;\n', '  }\n', '\n', '\n', '\n', '  function () payable external\n', '  {\n', '      balance = balance.add(msg.value);\n', '  }\n', '\n', '  function etherProceeds() external\n', '    onlyOwner\n', '\n', '  {\n', '    if(!msg.sender.send(balance)) revert();\n', '    balance = 0;\n', '  }\n', '\n', '  function lockBalance(address user, uint256 amount,uint256 endTime) external\n', '    onlyOwner\n', '  {\n', '     epoch[] storage epochs = lockEpochsMap[user];\n', '     epochs.push(epoch(endTime,amount));\n', '  }\n', '\n', '    function transfer(address _to, uint256 _value) public  returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    epoch[] storage epochs = lockEpochsMap[msg.sender];\n', '    uint256 needLockBalance = 0;\n', '    for(uint256 i=0;i<epochs.length;i++)\n', '    {\n', '      if( now < epochs[i].endTime )\n', '      {\n', '        needLockBalance=needLockBalance.add(epochs[i].amount);\n', '      }\n', '    }\n', '\n', '    require(balances[msg.sender].sub(_value)>=needLockBalance);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256) \n', '    {\n', '    return balances[_owner];\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '    {\n', '    require(_to != address(0));\n', '\n', '    epoch[] storage epochs = lockEpochsMap[_from];\n', '    uint256 needLockBalance = 0;\n', '    for(uint256 i=0;i<epochs.length;i++)\n', '    {\n', '      if( now < epochs[i].endTime )\n', '      {\n', '        needLockBalance = needLockBalance.add(epochs[i].amount);\n', '      }\n', '    }\n', '\n', '    require(balances[_from].sub(_value)>=needLockBalance);\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) \n', '    {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n', '    {\n', '    return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '}']