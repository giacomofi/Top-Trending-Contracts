['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev   ERC20 Contract interface(s)\n', ' */\n', 'contract ERC20\n', '{\n', '    function balanceOf    (address _owner) public constant returns (uint256 balance);\n', '    function transfer     (               address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve      (address _spender, uint256 _value) public returns (bool success);\n', '    function allowance    (address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function totalSupply  () public constant returns (uint);\n', '\n', '    event Transfer (address indexed _from,  address indexed _to,      uint _value);\n', '    event Approval (address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * @title TokenRecipient \n', ' */\n', 'interface TokenRecipient\n', '{\n', '    /* fundtion definitions */\n', '    function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', '/**\n', ' * @title SafeMath math library\n', ' * @dev   Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath\n', '{\n', '    /**\n', "     * @dev 'a + b', Adds two numbers, throws on overflow\n", '     */\n', '    function add (uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        c = a + b;\n', '        require (c >= a); return c;\n', '    }\n', '\n', '    /**\n', "     * @dev 'a - b', Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend)\n", '     */\n', '    function sub (uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        require (a >= b);\n', '        c = a - b; return c;\n', '    }\n', '\n', '    /**\n', "     * @dev 'a * b', multiplies two numbers, throws on overflow\n", '     */\n', '    function mul (uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        c = a * b;\n', '        require (a == 0 || c / a == b); return c;\n', '    }\n', '\n', '    /**\n', "     * @dev 'a / b', Integer division of two numbers, truncating the quotient\n", '     */\n', '    function div (uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        require (b > 0);\n', '        c = a / b; return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Token\n', ' * @dev   Implementation of the ERC20 Token\n', ' */\n', 'contract ERC20Token is ERC20\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    /* balance of each account */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string  public name;\n', '    string  public symbol;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /**\n', '     * @dev   Creates a ERC20 Contract with its name, symbol, decimals, and total supply of token\n', '     * @param _name name of token\n', '     * @param _symbol name of symbol\n', '     * @param _decimals decimals\n', '     * @param _initSupply total supply of tokens\n', '     */\n', '    constructor (string _name, string _symbol, uint8 _decimals, uint256 _initSupply) public\n', '    {\n', '        name        = _name;                                    // set the name   for display purpose\n', '        symbol      = _symbol;                                  // set the symbol for display purpose\n', '        decimals    = _decimals;                                // 18 decimals is the strongly suggested \n', '        totalSupply = _initSupply * (10 ** uint256 (decimals)); // update total supply with the decimal amount\n', '        balances[msg.sender] = totalSupply;                     // give the creator all initial tokens\n', '\n', '        emit Transfer (address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the token balance for account `_owner`\n', '     */\n', '    function balanceOf (address _owner) public view returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* function to access name, symbol, decimals, total-supply of token. */\n', '    function name        () public view returns (string  _name    ) { return name;        } \n', '    function symbol      () public view returns (string  _symbol  ) { return symbol;      } \n', '    function decimals    () public view returns (uint8   _decimals) { return decimals;    }\n', '    function totalSupply () public view returns (uint256 _supply  ) { return totalSupply; }\n', '\n', '    /**\n', '     * @dev Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer (address _from, address _to, uint256 _value) internal\n', '    {\n', '        require (_to != 0x0);                               // prevent transfer to 0x0 address\n', '        require (balances[_from] >= _value);                // check if the sender has enough\n', '        require (balances[_to  ] +  _value > balances[_to]);// check for overflows\n', '\n', '        uint256 previous = balances[_from] + balances[_to]; // save this for an assertion in the future\n', '\n', '        balances[_from] = balances[_from].sub (_value);     // subtract from the sender\n', '        balances[_to  ] = balances[_to  ].add (_value);     // add the same to the recipient\n', '        emit Transfer (_from, _to, _value);\n', '\n', '        /* Asserts are used to use static analysis to find bugs in your code. They should never fail */\n', '        assert (balances[_from] + balances[_to] == previous);\n', '    }\n', '\n', '    /**\n', '     * @dev    Transfer the balance from owner\'s account to another account "_to" \n', "     *         owner's account must have sufficient balance to transfer\n", '     *         0 value transfers are allowed\n', '     * @param  _to The address of the recipient\n', '     * @param  _value The amount to send\n', '     * @return true if the operation was successful.\n', '     */\n', '    function transfer (address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        _transfer (msg.sender, _to, _value); return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    Send `_value` amount of tokens from `_from` account to `_to` account\n', '     *         The calling account must already have sufficient tokens approved for\n', '     *         spending from the `_from` account\n', '     * @param  _from The address of the sender\n', '     * @param  _to The address of the recipient\n', '     * @param  _value The amount to send\n', '     * @return true if the operation was successful.\n', '     */\n', '    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        require (allowed[_from][msg.sender] >= _value); // check allowance \n', '        allowed [_from][msg.sender] = allowed [_from][msg.sender].sub (_value);\n', '\n', '        _transfer (_from, _to, _value); return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    Get the amount of tokens approved by the owner that can be transferred\n', "     *         to the spender's account\n", '     * @param  _owner The address owner\n', '     * @param  _spender The address authorized to spend\n', '     * @return The amount of tokens remained for the approved by the owner that can\n', '     *         be transferred\n', '     */\n', '    function allowance (address _owner, address _spender) public constant returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev    Set allowance for other address\n', '     *         Allow `_spender` to withdraw from your account, multiple times,\n', '     *         up to the `_value` amount. If this function is called again it\n', '     *         overwrites the current allowance with _value.\n', '     *         Token owner can approve for `spender` to transferFrom (...) `tokens`\n', "     *         from the token owner's account\n", '     * @param  _spender The address authorized to spend\n', '     * @param  _value the max amount they can spend\n', '     * @return true if the operation was successful.\n', '     */\n', '    function approve (address _spender, uint256 _value) public returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval (msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    Set allowance for other address and notify\n', '     *         Allows `_spender` to spend no more than `_value` tokens in your behalf,\n', '     *         and then ping the contract about it\n', '     * @param  _spender   the address authorized to spend\n', '     * @param  _value     the max amount they can spend\n', '     * @param  _extraData some extra information to send to the approved contract\n', '     * @return true if the operation was successful.\n', '     */\n', '    function approveAndCall (address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n', '    {\n', '        TokenRecipient spender = TokenRecipient (_spender);\n', '\n', '        if (approve (_spender, _value))\n', '        {\n', '            spender.receiveApproval (msg.sender, _value, address (this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title  Ownable\n', ' * @notice For user and inter-contract ownership and safe ownership transfers.\n', ' * @dev    The Ownable contract has an owner address, and provides basic\n', ' *         authorization control functions\n', ' */\n', 'contract Ownable\n', '{\n', "    address public owner;   /* the address of the contract's owner  */\n", '\n', '    /* logged on change & renounce of owner */\n', '    event OwnershipTransferred (address indexed _owner, address indexed _to);\n', '    event OwnershipRenounced   (address indexed _owner);\n', '\n', '    /**\n', "     * @dev Sets the original 'owner' of the contract to the sender account\n", '     */\n', '    constructor () public \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner\n', '     */\n', '    modifier onlyOwner \n', '    {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * @dev   Allows the current owner to transfer control of the contract to a '_to'\n", '     * @param _to The address to transfer ownership to\n', '     */\n', '    function transferOwnership (address _to) public onlyOwner\n', '    {\n', '        require (_to != address(0));\n', '        emit OwnershipTransferred (owner, _to);\n', '        owner = _to;\n', '    }\n', '\n', '    /**\n', '     * @dev   Allows the current owner to relinquish control of the contract.\n', '     *        This will remove all ownership of the contract, _safePhrase must\n', '     *        be equal to "This contract is to be disowned"\n', "     * @param _safePhrase Input string to prevent one's mistake\n", '     */\n', '    function renounceOwnership (bytes32 _safePhrase) public onlyOwner\n', '    {\n', '        require (_safePhrase == "This contract is to be disowned.");\n', '        emit OwnershipRenounced (owner);\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ExpERC20Token\n', ' */\n', 'contract ExpERC20Token is ERC20Token, Ownable\n', '{\n', '    /**\n', '     * @dev   Creates a ERC20 Contract with its name, symbol, decimals, and total supply of token\n', '     * @param _name name of token\n', '     * @param _symbol name of symbol\n', '     * @param _decimals decimals\n', '     * @param _initSupply total supply of tokens\n', '     */\n', '    constructor (\n', '        string   _name,     // name of token\n', '        string   _symbol,   // name of symbol\n', '        uint8    _decimals, // decimals\n', '        uint256 _initSupply // total supply of tokens\n', '    ) ERC20Token (_name, _symbol, _decimals, _initSupply) public {}\n', '\n', '    /**\n', '     * @notice Only the creator can alter the name & symbol\n', '     * @param  _name   newer token name   to be changed\n', '     * @param  _symbol newer token symbol to be changed\n', '     */\n', '    function changeName (string _name, string _symbol) onlyOwner public\n', '    {\n', '        name   = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /* ======================================================================\n', '     * Burnable functions\n', '     */\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn (address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal burn, only can be called by this contract\n', '     */\n', '    function _burn (address _from, uint256 _value) internal\n', '    {\n', '        require (balances[_from] >= _value);            // check if the sender has enough\n', '\n', '        balances[_from] = balances[_from].sub (_value); // subtract from the sender\n', '        totalSupply = totalSupply.sub (_value);         // updates totalSupply\n', '        emit Burn (_from, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev    remove `_value` tokens from the system irreversibly\n', '     * @param  _value the amount of money to burn\n', '     * @return true if the operation was successful.\n', '     */\n', '    function burn (uint256 _value) public returns (bool success)\n', '    {\n', '        _burn (msg.sender, _value); return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    remove `_value` tokens from the system irreversibly on behalf of `_from`\n', '     * @param  _from the address of the sender\n', '     * @param  _value the amount of money to burn\n', '     * @return true if the operation was successful.\n', '     */\n', '    function burnFrom (address _from, uint256 _value) public returns (bool success)\n', '    {\n', '        require (allowed [_from][msg.sender] >= _value);\n', '        allowed [_from][msg.sender] = allowed [_from][msg.sender].sub (_value);\n', '        _burn (_from, _value); return true;\n', '    }\n', '\n', '\n', '    /* ======================================================================\n', '     * Mintable functions\n', '     */\n', '\n', "    /* event for mint's */\n", '    event Mint (address indexed _to, uint256 _amount);\n', '    event MintFinished ();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    /* Throws if it is not mintable status */\n', '    modifier canMint ()\n', '    {\n', '        require (!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /* Throws if called by any account other than the owner */\n', '    modifier hasMintPermission ()\n', '    {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev    Function to mint tokens\n', '     * @param  _to The address that will receive the minted tokens.\n', '     * @param  _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint (address _to, uint256 _amount) hasMintPermission canMint public returns (bool)\n', '    {\n', '        totalSupply   = totalSupply.add  (_amount);\n', '        balances[_to] = balances[_to].add (_amount);\n', '\n', '        emit Mint (_to, _amount);\n', '        emit Transfer (address (0), this, _amount);\n', '        emit Transfer (       this,  _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting () onlyOwner canMint public returns (bool)\n', '    {\n', '        mintingFinished = true;\n', '        emit MintFinished ();\n', '        return true;\n', '    }\n', '\n', '\n', '    /* ======================================================================\n', '     * Lockable Token\n', '     */\n', '\n', '    bool public tokenLocked = false;\n', '\n', "    /* event for Token's lock or unlock */\n", '    event Lock (address indexed _target, bool _locked);\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds (address target, bool frozen);\n', '\n', '    /**\n', '     * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '     * @param  _target address to be frozen\n', '     * @param  _freeze either to freeze it or not\n', '     */\n', '    function freezeAccount (address _target, bool _freeze) onlyOwner public\n', '    {\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds (_target, _freeze);\n', '    }\n', '\n', '    /* Throws if it is not locked status */\n', '    modifier whenTokenUnlocked ()\n', '    {\n', '        require (!tokenLocked);\n', '        _;\n', '    }\n', '\n', '    /* Internal token-lock, only can be called by this contract */\n', '    function _lock (bool _value) internal\n', '    {\n', '        require (tokenLocked != _value);\n', '        tokenLocked = _value;\n', '        emit Lock (this, tokenLocked);\n', '    }\n', '\n', '    /**\n', '     * @dev    function to check token is lock or not \n', '     */\n', '    function isTokenLocked () public view returns (bool success)\n', '    {\n', '        return tokenLocked;\n', '    }\n', '\n', '    /**\n', '     * @dev    function to lock/unlock this token\n', '     * @param  _value flag to be locked or not\n', '     */\n', '    function lock (bool _value) onlyOwner public returns (bool)\n', '    {\n', '        _lock (_value); return true;\n', '    }\n', '\n', '    /**\n', '     * @dev    Transfer the balance from owner\'s account to another account "_to" \n', "     *         owner's account must have sufficient balance to transfer\n", '     *         0 value transfers are allowed\n', '     * @param  _to The address of the recipient\n', '     * @param  _value The amount to send\n', '     * @return true if the operation was successful.\n', '     */\n', '    function transfer (address _to, uint256 _value) whenTokenUnlocked public returns (bool success)\n', '    {\n', '        require (!frozenAccount[msg.sender]);   // check if sender is frozen\n', '        require (!frozenAccount[_to  ]);        // check if recipient is frozen\n', '\n', '        return super.transfer (_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev    Send `_value` amount of tokens from `_from` account to `_to` account\n', '     *         The calling account must already have sufficient tokens approved for\n', '     *         spending from the `_from` account\n', '     * @param  _from The address of the sender\n', '     * @param  _to The address of the recipient\n', '     * @param  _value The amount to send\n', '     * @return true if the operation was successful.\n', '     */\n', '    function transferFrom (address _from, address _to, uint256 _value) whenTokenUnlocked public returns (bool success)\n', '    {\n', '        require (!frozenAccount[msg.sender]);   // check if sender is frozen\n', '        require (!frozenAccount[_from]);        // check if token-owner is frozen\n', '        require (!frozenAccount[_to  ]);        // check if recipient is frozen\n', '\n', '        return super.transferFrom (_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev    Set allowance for other address\n', '     *         Allow `_spender` to withdraw from your account, multiple times,\n', '     *         up to the `_value` amount. If this function is called again it\n', '     *         overwrites the current allowance with _value.\n', '     *         Token owner can approve for `spender` to transferFrom (...) `tokens`\n', "     *         from the token owner's account\n", '     * @param  _spender The address authorized to spend\n', '     * @param  _value the max amount they can spend\n', '     * @return true if the operation was successful.\n', '     */\n', '    function approve (address _spender, uint256 _value) whenTokenUnlocked public returns (bool success)\n', '    {\n', '        require (!frozenAccount[msg.sender]);   // check if sender is frozen\n', '        require (!frozenAccount[_spender  ]);   // check if token-owner is frozen\n', '\n', '        return super.approve (_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev    Set allowance for other address and notify\n', '     *         Allows `_spender` to spend no more than `_value` tokens in your behalf,\n', '     *         and then ping the contract about it\n', '     * @param  _spender   the address authorized to spend\n', '     * @param  _value     the max amount they can spend\n', '     * @param  _extraData some extra information to send to the approved contract\n', '     * @return true if the operation was successful.\n', '     */\n', '    function approveAndCall (address _spender, uint256 _value, bytes _extraData) whenTokenUnlocked public returns (bool success)\n', '    {\n', '        require (!frozenAccount[msg.sender]);   // check if sender is frozen\n', '        require (!frozenAccount[_spender  ]);   // check if token-owner is frozen\n', '\n', '        return super.approveAndCall (_spender, _value, _extraData);\n', '    }\n', '\n', '    /* ======================================================================\n', '     * buy & sell functions \n', '     */\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer (address _from, address _to, uint _value) internal\n', '    {\n', '        require (_to != 0x0);                                   // prevent transfer to 0x0 address\n', '        require (balances[_from] >= _value);                    // check if the sender has enough\n', '        require (balances[_to  ]  + _value >= balances[_to]);   // check for overflows\n', '\n', '        require (!frozenAccount[_from]);                        // check if sender is frozen\n', '        require (!frozenAccount[_to  ]);                        // check if recipient is frozen\n', '\n', '        balances[_from] = balances[_from].sub (_value);         // Subtract from the sender\n', '        balances[_to  ] = balances[_to  ].add (_value);         // Add the same to the recipient\n', '        emit Transfer (_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '     * @param  _sellPrice Price the users can sell to the contract\n', '     * @param  _buyPrice  Price users can buy from the contract\n', '     */\n', '    function setPrices (uint256 _sellPrice, uint256 _buyPrice) onlyOwner public\n', '    {\n', '        sellPrice = _sellPrice;\n', '        buyPrice  = _buyPrice ;\n', '    }\n', '\n', '    /**\n', '     * @notice Buy tokens from contract by sending ether\n', '     */\n', '    function buy () whenTokenUnlocked payable public\n', '    {\n', '        uint amount = msg.value / buyPrice;     // calculates the amount\n', '        _transfer (this, msg.sender, amount);   // makes the transfers\n', '    }\n', '\n', '    /**\n', '     *  @notice sell `_amount` tokens to contract\n', '     *  @param  _amount amount of tokens to be sold\n', '     */\n', '    function sell (uint256 _amount) whenTokenUnlocked public\n', '    {\n', '        require (balances[this] >= _amount * sellPrice);    // checks if the contract has enough ether to buy\n', '        _transfer (msg.sender, this, _amount);              // makes the transfers\n', "        msg.sender.transfer (_amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '\n', '\n', '}']