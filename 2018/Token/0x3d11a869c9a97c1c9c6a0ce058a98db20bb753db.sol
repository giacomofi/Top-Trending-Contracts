['//TheEthadams&#39;s Prod Ready.\n', '//https://rinkeby.etherscan.io/address/0x8d4665fe98968707da5042be347060e673da98f1#code\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '\n', 'interface tokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', ' }\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals\n', '    uint256 public totalSupply = 500000000 * 10 ** uint256(decimals);\n', '\n', '    //Address founder\n', '    address public owner;\n', '\n', '    //Address Development.\n', '    address public development = 0x23556CF8E8997f723d48Ab113DAbed619E7a9786;\n', '\n', '    //Start timestamp\n', '    //End timestamp\n', '    uint public startTime;\n', '    uint public icoDays;\n', '    uint public stopTime;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = totalSupply;  // Update total supply.\n', '        balanceOf[msg.sender] = 150000000 * 10 ** uint256(decimals);\n', '        //Give this contract some token balances.\n', '        balanceOf[this] = 350000000 * 10 ** uint256(decimals);\n', '        //Set the name for display purposes\n', '        name = tokenName;\n', '        //Set the symbol for display purposes\n', '        symbol = tokenSymbol;\n', '        //Assign owner.\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    modifier onlyDeveloper() {\n', '      require(msg.sender == development);\n', '      _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '      require(now >= stopTime);//Transfer only after ICO.\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        if(now < stopTime){\n', '          require(_from == owner);//Only owner can move the tokens before ICO is over.\n', '          _transfer(_from, _to, _value);\n', '        } else {\n', '        _transfer(_from, _to, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract OffGridParadise is TokenERC20 {\n', '\n', '    uint256 public buyPrice;\n', '    bool private isKilled; //Changed to true if the contract is killed.\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function OffGridParadise (\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(tokenName, tokenSymbol) public {\n', '      //Initializes the timestamps\n', '      startTime = now;\n', '      isKilled  = false;\n', '      //This is the PRE-ICO price.Assuming the price of ethereum is $600per Ether.\n', '      setPrice(13300);\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address(Number greater than Zero).\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough //Use burn() instead\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyDeveloper public {\n', '        require(target != development);\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    //Buy tokens from the contract by sending ethers.\n', '    function buyTokens () payable public {\n', '      require(isKilled == false);\n', '      require(msg.sender != development);\n', '      require(msg.sender != owner);\n', '      uint amount = msg.value * buyPrice;\n', '      owner.transfer(msg.value);\n', '      _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    //Buy tokens from the contract by sending ethers(Fall Back Function).\n', '    function () payable public {\n', '      require(isKilled == false);\n', '      require(msg.sender != development);\n', '      require(msg.sender != owner);\n', '      uint amount = msg.value * buyPrice;\n', '      owner.transfer(msg.value);\n', '      if(balanceOf[this] > amount){\n', '      _transfer(this, msg.sender, amount);\n', '      } else {\n', '      _transfer(owner,msg.sender,amount);\n', '      }\n', '    }\n', '\n', '    function setPrice(uint256 newBuyingPrice) onlyOwner public {\n', '      buyPrice = newBuyingPrice;\n', '    }\n', '\n', '    function setStopTime(uint icodays) onlyOwner public {\n', '      //Minutes in a day is 1440\n', '      icoDays = icodays * 1 days;//Production Purposes.\n', '      stopTime = startTime + icoDays;\n', '    }\n', '\n', '    //Transfer transferOwnership\n', '    function transferOwnership(address newOwner) onlyOwner public  {\n', '      owner = newOwner;\n', '  }\n', '    //Stop the contract.\n', '  function killContract() onlyOwner public {\n', '      isKilled = true;\n', '  }\n', '\n', '}']
["//TheEthadams's Prod Ready.\n", '//https://rinkeby.etherscan.io/address/0x8d4665fe98968707da5042be347060e673da98f1#code\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '\n', 'interface tokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', ' }\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals\n', '    uint256 public totalSupply = 500000000 * 10 ** uint256(decimals);\n', '\n', '    //Address founder\n', '    address public owner;\n', '\n', '    //Address Development.\n', '    address public development = 0x23556CF8E8997f723d48Ab113DAbed619E7a9786;\n', '\n', '    //Start timestamp\n', '    //End timestamp\n', '    uint public startTime;\n', '    uint public icoDays;\n', '    uint public stopTime;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = totalSupply;  // Update total supply.\n', '        balanceOf[msg.sender] = 150000000 * 10 ** uint256(decimals);\n', '        //Give this contract some token balances.\n', '        balanceOf[this] = 350000000 * 10 ** uint256(decimals);\n', '        //Set the name for display purposes\n', '        name = tokenName;\n', '        //Set the symbol for display purposes\n', '        symbol = tokenSymbol;\n', '        //Assign owner.\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    modifier onlyDeveloper() {\n', '      require(msg.sender == development);\n', '      _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '      require(now >= stopTime);//Transfer only after ICO.\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        if(now < stopTime){\n', '          require(_from == owner);//Only owner can move the tokens before ICO is over.\n', '          _transfer(_from, _to, _value);\n', '        } else {\n', '        _transfer(_from, _to, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract OffGridParadise is TokenERC20 {\n', '\n', '    uint256 public buyPrice;\n', '    bool private isKilled; //Changed to true if the contract is killed.\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function OffGridParadise (\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(tokenName, tokenSymbol) public {\n', '      //Initializes the timestamps\n', '      startTime = now;\n', '      isKilled  = false;\n', '      //This is the PRE-ICO price.Assuming the price of ethereum is $600per Ether.\n', '      setPrice(13300);\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address(Number greater than Zero).\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough //Use burn() instead\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyDeveloper public {\n', '        require(target != development);\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    //Buy tokens from the contract by sending ethers.\n', '    function buyTokens () payable public {\n', '      require(isKilled == false);\n', '      require(msg.sender != development);\n', '      require(msg.sender != owner);\n', '      uint amount = msg.value * buyPrice;\n', '      owner.transfer(msg.value);\n', '      _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    //Buy tokens from the contract by sending ethers(Fall Back Function).\n', '    function () payable public {\n', '      require(isKilled == false);\n', '      require(msg.sender != development);\n', '      require(msg.sender != owner);\n', '      uint amount = msg.value * buyPrice;\n', '      owner.transfer(msg.value);\n', '      if(balanceOf[this] > amount){\n', '      _transfer(this, msg.sender, amount);\n', '      } else {\n', '      _transfer(owner,msg.sender,amount);\n', '      }\n', '    }\n', '\n', '    function setPrice(uint256 newBuyingPrice) onlyOwner public {\n', '      buyPrice = newBuyingPrice;\n', '    }\n', '\n', '    function setStopTime(uint icodays) onlyOwner public {\n', '      //Minutes in a day is 1440\n', '      icoDays = icodays * 1 days;//Production Purposes.\n', '      stopTime = startTime + icoDays;\n', '    }\n', '\n', '    //Transfer transferOwnership\n', '    function transferOwnership(address newOwner) onlyOwner public  {\n', '      owner = newOwner;\n', '  }\n', '    //Stop the contract.\n', '  function killContract() onlyOwner public {\n', '      isKilled = true;\n', '  }\n', '\n', '}']
