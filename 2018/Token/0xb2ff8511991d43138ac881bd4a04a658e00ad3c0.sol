['pragma solidity ^ 0.4 .19;\n', '\n', '\n', 'contract Contract {function XBVHandler( address _from, uint256 _value );}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Contracts is Ownable {\n', '     \n', '    Contract public contract_address;\n', '    XBV token;\n', '    mapping( address => bool ) public contracts;\n', '    mapping( address => bool ) public contractExists;\n', '    mapping( uint => address) public  contractIndex;\n', '    uint public contractCount;\n', '    //address public owner;\n', '    event ContractCall ( address _address, uint _value );\n', '    event Log ( address _address, uint value  );\n', '    event Message ( uint value  );\n', '\n', '   \n', '\n', '    function addContract ( address _contract ) public onlyOwner returns(bool)  {\n', '        \n', '            contracts[ _contract ] = true;\n', '        if  ( !contractExists[ _contract ]){\n', '            contractExists[ _contract ] = true;\n', '            contractIndex[ contractCount ] = _contract;\n', '            contractCount++;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    \n', '    function latchContract () public returns(bool)  {\n', '        \n', '            contracts[ msg.sender ] = true;\n', '        if  ( !contractExists[ msg.sender ]){\n', '            contractExists[ msg.sender ] = true;\n', '            contractIndex[ contractCount ] = msg.sender;\n', '            contractCount++;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    \n', '    function unlatchContract ( ) public returns(bool){\n', '       contracts[ msg.sender ] = false;\n', '    }\n', '    \n', '    \n', '    function removeContract ( address _contract )  public  onlyOwner returns(bool) {\n', '        contracts[ _contract ] =  false;\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function getContractCount() public constant returns (uint256){\n', '        return contractCount;\n', '    }\n', '    \n', '    function getContractAddress( uint slot ) public constant returns (address){\n', '        return contractIndex[slot];\n', '    }\n', '    \n', '    function getContractStatus( address _address) public constant returns (bool) {\n', '        return contracts[ _address];\n', '    }\n', '\n', '\n', '    function contractCheck ( address _address, uint256 value ) internal  {\n', '        \n', '        if( contracts[ _address ] ) {\n', '            contract_address = Contract (  _address  );\n', '            contract_address.XBVHandler  ( msg.sender , value );\n', '         \n', '        }        \n', '        ContractCall ( _address , value  );\n', '    }\n', '    \n', '}\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '\n', '   function totalSupply() constant returns(uint totalSupply);\n', '\n', '    function balanceOf(address who) constant returns(uint256);\n', '\n', '    function transfer(address to, uint value) returns(bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) returns(bool ok);\n', '\n', '    function approve(address spender, uint value) returns(bool ok);\n', '\n', '    function allowance(address owner, address spender) constant returns(uint);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '}\n', '\n', '\n', 'contract XBV is ERC20, Contracts {\n', '\n', '    using SafeMath\n', '    for uint256;\n', '    /* Public variables of the token */\n', "    string public standard = 'XBV 2.0';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public initialSupply;\n', '\n', '    mapping( address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function XBV() {\n', '\n', '        uint256 _initialSupply = 10000000000000000 ; \n', '        uint8 decimalUnits = 8;\n', '        balanceOf[msg.sender] = _initialSupply; // Give the creator all initial tokens\n', '        totalSupply = _initialSupply; // Update total supply\n', '        initialSupply = _initialSupply;\n', '        name = "BlockVentureCoin"; // Set the name for display purposes\n', '        symbol = "XBV"; // Set the symbol for display purposes\n', '        decimals = decimalUnits; // Amount of decimals for display purposes\n', '        owner   = msg.sender;\n', '        \n', '    }\n', '\n', '    function balanceOf(address tokenHolder) constant returns(uint256) {\n', '\n', '        return balanceOf[tokenHolder];\n', '    }\n', '\n', '    function totalSupply() constant returns(uint256) {\n', '\n', '        return totalSupply;\n', '    }\n', '\n', '   /* Send coins */\n', '    function transfer(address _to, uint256 _value) returns(bool ok) {\n', '        \n', '        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        //balanceOf[msg.sender] -= _value; // Subtract from the sender\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(  _value ); // Subtract from the sender\n', '        \n', '        //balanceOf[_to] += _value; // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\n', '        \n', '        \n', '        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n', '        contractCheck( _to , _value );\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '    returns(bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval( msg.sender ,_spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n', '        \n', '        if (_from == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub( _value ); // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \n', '        Transfer(_from, _to, _value);\n', '        contractCheck( _to , _value );\n', '        return true;\n', '    }\n', '  \n', '    function burn(uint256 _value) returns(bool success) {\n', '        \n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        if ( (totalSupply - _value) <  ( initialSupply / 2 ) ) throw;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub( _value ); // Subtract from the sender\n', '        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '   function burnFrom(address _from, uint256 _value) returns(bool success) {\n', '        \n', '        if (_from == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw; \n', '        if (_value > allowance[_from][msg.sender]) throw; \n', '        balanceOf[_from] = balanceOf[_from].sub( _value ); \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \n', '        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    \n', '    \n', '}']