['pragma solidity ^0.4.13;\n', '\n', 'interface ERC20 {\n', '    // Get the total token supply\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract NewPiedPiperCoin is ERC20 {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function NewPiedPiperCoin(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '    Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'interface ERC20 {\n', '    // Get the total token supply\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract NewPiedPiperCoin is ERC20 {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function NewPiedPiperCoin(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '    Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
