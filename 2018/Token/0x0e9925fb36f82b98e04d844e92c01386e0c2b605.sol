['pragma solidity ^0.4.23;\n', '\n', 'contract Ownable\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tProperties\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    address public owner;\n', '\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tEvents\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '\n', '    event OwnershipTransferred\n', '    (\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tConstructor\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tModifiers\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function renounceOwnership() public onlyOwner\n', '    {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner\n', '    {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address _newOwner) internal\n', '    {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath\n', '{\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        if(a == 0)\n', '        {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tEvents\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tEvents\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    event Approval\n', '    (\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract TokenDestructible is Ownable\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tConstructor\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    constructor() public payable { }\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function destroy(address[] tokens) onlyOwner public\n', '    {\n', '        for (uint256 i = 0; i < tokens.length; i++)\n', '        {\n', '            ERC20Basic token = ERC20Basic(tokens[i]);\n', '            uint256 balance = token.balanceOf(this);\n', '            token.transfer(owner, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tProperties\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tProperties\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function transferFrom(address _from,address _to,uint256 _value) public returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender,uint256 _value) public returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner,address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender,uint _addedValue) public returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender,uint _subtractedValue) public returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue)\n', '        {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnableToken is BasicToken\n', '{\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tEvents\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function burn(uint256 _value) public\n', '    {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal\n', '    {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract StandardBurnableToken is BurnableToken, StandardToken\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tPublic Methods\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    function burnFrom(address _from, uint256 _value) public\n', '    {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _burn(_from, _value);\n', '    }\n', '\n', '}\n', '\n', 'contract TrinoToken is StandardBurnableToken,TokenDestructible\n', '{\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tProperties\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    string public name = "TRINO";\n', '    string public symbol = "TIO";\n', '\n', '    uint public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 3750000000 * (10 ** decimals); // 3 750 000 000\n', '\n', '    //--------------------------------------------------------------------------\n', '    //\n', '    //\tConstructor\n', '    //\n', '    //--------------------------------------------------------------------------\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY;\n', '    }\n', '\n', '}']