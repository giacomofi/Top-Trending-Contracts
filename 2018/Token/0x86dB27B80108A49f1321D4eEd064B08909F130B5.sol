['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint a, uint b) internal pure returns (uint) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', '// The Contract is Standard Token Issue Template.\n', '//\n', '// @Author: Tim Mars\n', '// @Date: 2018.7.15\n', '// @Seealso: ERC20 Token\n', '//\n', 'contract StandardToken {\n', '    \n', '    // === Event ===\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '\n', '    // === Defined ===\n', '    using SafeMath for uint;\n', ' \n', '    // --- ERC20 Token Section ---\n', '    uint8 constant public decimals = 6; // **** decimals ****\n', '    uint constant public totalSupply = 1*10**(8+6);  // 100 Million **** decimals ****\n', '    string constant public name = "Standard Token Template Token";\n', '    string constant public symbol = "MNT";\n', '    \n', '    address public owner;\n', '    bool public frozen = false; // \n', '    \n', '    mapping(address => uint) ownerance; // Owner Balance\n', '    mapping(address => mapping(address => uint)) public allowance; // Allower Balance\n', '    \n', '    // === Modifier ===\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isNotFrozen() {\n', '        require(!frozen);\n', '        _;\n', '    }\n', '\n', '    modifier hasEnoughBalance(uint _amount) {\n', '        require(ownerance[msg.sender] >= _amount);\n', '        require(ownerance[msg.sender] + _amount >= ownerance[msg.sender]); // Overflow detected\n', '        _;\n', '    }\n', '\n', '    modifier hasAllowBalance(address _owner, address _allower, uint _amount) {\n', '        require(allowance[_owner][_allower] >= _amount);\n', '        _;\n', '    }\n', '\n', '    modifier isNotEmpty(address _addr, uint _value) {\n', '        require(_addr != address(0));\n', '        require(_value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // === Constructor ===\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        ownerance[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    \n', '    // --- ERC20 Token Section ---\n', '    function approve(address _spender, uint _value) \n', '        isValidAddress\n', '        isNotFrozen\n', '        public returns (bool success) \n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0); // must spend to 0 where pre approve balance.\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) \n', '        isValidAddress\n', '        isNotFrozen\n', '        public returns (bool success) \n', '    {\n', '        require(ownerance[_from] >= _value);\n', '        require(ownerance[_to] + _value >= ownerance[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        ownerance[_from] = ownerance[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public\n', '        constant returns (uint balance) \n', '    {\n', '        balance = ownerance[_owner];\n', '        return balance;\n', '    }\n', '    \n', '\n', '    function transfer(address _to, uint _value) public\n', '        isNotFrozen\n', '        isValidAddress\n', '        isNotEmpty(_to, _value)\n', '        hasEnoughBalance(_value)\n', '        returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', ' \n', '    // --- Owner Section ---\n', '    function transferOwner(address _newOwner) \n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function freeze() \n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = true;\n', '        return true;\n', '    }\n', '    \n', '    function unfreeze() \n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = false;\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint _value)\n', '        isNotFrozen\n', '        isOwner\n', '        hasEnoughBalance(_value)\n', '        public returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[0x0] = ownerance[0x0].add(_value);\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '        return true;\n', '    }\n', '    \n', '  \n', '}']