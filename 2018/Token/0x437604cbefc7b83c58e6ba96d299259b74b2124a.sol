['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public ICO; // ICO contract\n', '    address public DAO; // DAO contract\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setDAO(address _DAO) onlyMasters public {\n', '        DAO = _DAO;\n', '    }\n', '\n', '    function setICO(address _ICO) onlyMasters public {\n', '        ICO = _ICO;\n', '    }\n', '\n', '    modifier onlyDAO() {\n', '        require(msg.sender == DAO);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMasters() {\n', '        require(msg.sender == ICO || msg.sender == owner || msg.sender == DAO);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract hasHolders {\n', '    mapping(address => uint) private holdersId;\n', '    // holder id starts at 1\n', '    mapping(uint => address) public holders;\n', '    uint public holdersCount = 0;\n', '\n', '    event AddHolder(address indexed holder, uint index);\n', '    event DelHolder(address indexed holder);\n', '    event UpdHolder(address indexed holder, uint index);\n', '\n', '    // add new token holder\n', '    function _addHolder(address _holder) internal returns (bool) {\n', '        if (holdersId[_holder] == 0) {\n', '            holdersId[_holder] = ++holdersCount;\n', '            holders[holdersCount] = _holder;\n', '            emit AddHolder(_holder, holdersCount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // delete token holder\n', '    function _delHolder(address _holder) internal returns (bool){\n', '        uint id = holdersId[_holder];\n', '        if (id != 0 && holdersCount > 0) {\n', '            //replace with last\n', '            holders[id] = holders[holdersCount];\n', '            // delete Holder element\n', '            delete holdersId[_holder];\n', '            //delete last id and decrease count\n', '            delete holders[holdersCount--];\n', '            emit DelHolder(_holder);\n', '            emit UpdHolder(holders[id], id);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract Force is Ownable, hasHolders {\n', '    using SafeMath for uint;\n', '    string public name = "Force";\n', '    string public symbol = "4TH";\n', '    uint8 public decimals = 0;\n', '    uint public totalSupply = 100000000;\n', '\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '\n', '    string public information; // info\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Mint(address indexed _to, uint _amount);\n', '\n', '    function Force() public {\n', '        balances[address(this)] = totalSupply;\n', '        emit Transfer(address(0), address(this), totalSupply);\n', '        _addHolder(this);\n', '    }\n', '\n', '    /**\n', '    * @dev set public information\n', '    */\n', '    function setInformation(string _information) external onlyMasters {\n', '        information = _information;\n', '    }\n', '\n', '    /**\n', '    * @dev internal transfer function\n', '    */\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        _addHolder(_to);\n', '        if (balances[_from] == 0) {\n', '            _delHolder(_from);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev service transfer token function, allowed only from masters\n', '    */\n', '    function serviceTransfer(address _from, address _to, uint _value) external onlyMasters returns (bool success) {\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    */\n', '    function transfer(address _to, uint _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '        require(_value <= allowed[_from][_to]);\n', '        allowed[_from][_to] = allowed[_from][_to].sub(_value);\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     */\n', '    function approve(address _spender, uint _value) external returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) external onlyDAO returns (bool) {\n', '        require(_amount > 0);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // disable ether transfer\n', '    function() external {}\n', '\n', '}']
['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public ICO; // ICO contract\n', '    address public DAO; // DAO contract\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setDAO(address _DAO) onlyMasters public {\n', '        DAO = _DAO;\n', '    }\n', '\n', '    function setICO(address _ICO) onlyMasters public {\n', '        ICO = _ICO;\n', '    }\n', '\n', '    modifier onlyDAO() {\n', '        require(msg.sender == DAO);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMasters() {\n', '        require(msg.sender == ICO || msg.sender == owner || msg.sender == DAO);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract hasHolders {\n', '    mapping(address => uint) private holdersId;\n', '    // holder id starts at 1\n', '    mapping(uint => address) public holders;\n', '    uint public holdersCount = 0;\n', '\n', '    event AddHolder(address indexed holder, uint index);\n', '    event DelHolder(address indexed holder);\n', '    event UpdHolder(address indexed holder, uint index);\n', '\n', '    // add new token holder\n', '    function _addHolder(address _holder) internal returns (bool) {\n', '        if (holdersId[_holder] == 0) {\n', '            holdersId[_holder] = ++holdersCount;\n', '            holders[holdersCount] = _holder;\n', '            emit AddHolder(_holder, holdersCount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // delete token holder\n', '    function _delHolder(address _holder) internal returns (bool){\n', '        uint id = holdersId[_holder];\n', '        if (id != 0 && holdersCount > 0) {\n', '            //replace with last\n', '            holders[id] = holders[holdersCount];\n', '            // delete Holder element\n', '            delete holdersId[_holder];\n', '            //delete last id and decrease count\n', '            delete holders[holdersCount--];\n', '            emit DelHolder(_holder);\n', '            emit UpdHolder(holders[id], id);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract Force is Ownable, hasHolders {\n', '    using SafeMath for uint;\n', '    string public name = "Force";\n', '    string public symbol = "4TH";\n', '    uint8 public decimals = 0;\n', '    uint public totalSupply = 100000000;\n', '\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '\n', '    string public information; // info\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Mint(address indexed _to, uint _amount);\n', '\n', '    function Force() public {\n', '        balances[address(this)] = totalSupply;\n', '        emit Transfer(address(0), address(this), totalSupply);\n', '        _addHolder(this);\n', '    }\n', '\n', '    /**\n', '    * @dev set public information\n', '    */\n', '    function setInformation(string _information) external onlyMasters {\n', '        information = _information;\n', '    }\n', '\n', '    /**\n', '    * @dev internal transfer function\n', '    */\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        _addHolder(_to);\n', '        if (balances[_from] == 0) {\n', '            _delHolder(_from);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev service transfer token function, allowed only from masters\n', '    */\n', '    function serviceTransfer(address _from, address _to, uint _value) external onlyMasters returns (bool success) {\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    */\n', '    function transfer(address _to, uint _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '        require(_value <= allowed[_from][_to]);\n', '        allowed[_from][_to] = allowed[_from][_to].sub(_value);\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     */\n', '    function approve(address _spender, uint _value) external returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) external onlyDAO returns (bool) {\n', '        require(_amount > 0);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // disable ether transfer\n', '    function() external {}\n', '\n', '}']
