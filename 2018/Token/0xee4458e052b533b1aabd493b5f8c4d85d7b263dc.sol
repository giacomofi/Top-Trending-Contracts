['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      emit WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      emit WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Operable is Pausable {\n', '    mapping (address => bool) operators;\n', '\n', '    constructor()\n', '    {\n', '    }\n', '\n', '    modifier isOwnerOrOperator() {\n', '        require(msg.sender == owner || operators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    event OperatorAdded(address operatorAddr);\n', '    event OperatorUpdated(address operatorAddr);\n', '    event OperatorRemoved(address operatorAddr);\n', '\n', '    // Only add if msg is not operator\n', '    function addOperator(address operatorAddr) onlyOwner {\n', '        require(operators[operatorAddr] == false);\n', '        operators[operatorAddr] = true;\n', '        emit OperatorAdded(operatorAddr);\n', '    }\n', '    // Only remove if msg is operator\n', '    function removeOperator(address operatorAddr) onlyOwner {\n', '        require(operators[operatorAddr] == true);\n', '        delete operators[operatorAddr];\n', '        emit OperatorRemoved(operatorAddr);\n', '    }\n', '\n', '    function checkOperator(address addr) view returns (bool) {\n', '        return operators[addr];\n', '    }\n', '\n', '    function checkPause() view returns (bool){\n', '        return paused;\n', '    }\n', '}\n', '\n', 'contract Pass1 is DetailedERC20, PausableToken, BurnableToken, MintableToken, Operable, Whitelist\n', '{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public newToken = MintableToken(0x0);\n', '\n', '    /*\n', '    * @dev will be triggered every time a user mints his current token to the upgraded one\n', '    * @param beneficiary receiving address\n', '    * amount amount of token to be minted\n', '    */\n', '    event LogMint(address beneficiary, uint256 amount);\n', '\n', '    /*\n', '    * @dev checks if an upgraded version of Pass token contract is available\n', '    * @return true new upgrade token is setup\n', '    * exception otherwise\n', '    */\n', '    modifier hasUpgrade() {\n', '        require(newToken != MintableToken(0x0));\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * @dev initialize default attributes for the Pass token contract\n', '    */\n', '    constructor()\n', '        DetailedERC20 ("Blockpass","PASS",6)\n', '    {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0x0), owner);\n', '        // initial token amount is 10^9 (1 billion), divisible to 6 decimals\n', '        totalSupply_ = 1000000000000000;\n', '        balances[owner] = totalSupply_;\n', '        emit Transfer(address(0x0), owner, 1000000000000000);\n', '        whitelist[owner] = true;\n', '        emit WhitelistedAddressAdded(owner);\n', '    }\n', '\n', '    /*\n', '    * @dev assign address of the new Pass token contract, can only be triggered by owner address\n', '    * @param _newToken address of the new Token contract\n', '    * @return none\n', '    */\n', '    function upgrade(MintableToken _newToken)\n', '        onlyOwner\n', '        public\n', '    {\n', '        newToken = _newToken;\n', '    }\n', '\n', '    /*\n', '    * @dev override from BurnableToken\n', '    * @param _value amount of token to burn\n', '    * @return exception to prevent calling directly to Pass1 token\n', '    */\n', '    function burn(uint256 _value)\n', '        public\n', '    {\n', '        revert();\n', '        _value = _value; // to silence compiler warning\n', '    }\n', '\n', '    /*\n', '    * @dev override from MintableToken\n', '    * @param _to address of receivers\n', '    * _amount amount of token to redeem to\n', '    * @return exception to prevent calling directly to Pass1 token\n', '    */\n', '    function mint(address _to, uint256 _amount)\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        revert();\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    * @dev allow whitelisted user to redeem his Pass1 token to a newer version of the token\n', '    * can only be triggered if there&#39;s a newer version of Pass token, and when the contract is pause\n', '    * @param none\n', '    * @return none\n', '    */\n', '    function mintTo()\n', '        hasUpgrade\n', '        whenPaused\n', '        onlyWhitelisted\n', '        public\n', '    {\n', '        uint256 balance = balanceOf(msg.sender);\n', '\n', '        // burn the tokens in this token smart contract\n', '        super.burn(balance);\n', '\n', '        // mint tokens in the new token smart contract\n', '        require(newToken.mint(msg.sender, balance));\n', '        emit LogMint(msg.sender, balance);\n', '    }\n', '\n', '    /*\n', '    * @dev transfer ownership of token between whitelisted accounts\n', '    * can only be triggered when contract is not paused\n', '    * @param _to address of receiver\n', '    * _value amount to token to transfer\n', '    * @return true if transfer succeeds\n', '    * false if not enough gas is provided, or if _value is larger than current user balance\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '        whenNotPaused\n', '        onlyWhitelisted\n', '        public\n', '        returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /*\n', '    * @dev transfer ownership of token on behalf of one whitelisted account address to another\n', '    * can only be triggered when contract is not paused\n', '    * @param _from sending address\n', '    * _to receiving address\n', '    * _value amount of token to transfer\n', '    * @return true if transfer succeeds\n', '    * false if not enough gas is provided, or if _value is larger than maximum allowance / user balance\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        whenNotPaused\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(whitelist[_from] == true);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /*\n', '    * @dev check if the specified address is in the contract whitelist\n', '    * @param _addr user address\n', '    * @return true if user address is in whitelist\n', '    * false otherwise\n', '    */\n', '    function checkUserWhiteList(address addr)\n', '        view\n', '        public\n', '        returns (bool)\n', '    {\n', '        return whitelist[addr];\n', '    }\n', '\n', '    /*\n', '    * @dev add an user address to the contract whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addr address to be added\n', '    * @return true if address is successfully added\n', '    * false if address is already in the whitelist\n', '    */\n', '    function addAddressToWhitelist(address addr)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool)\n', '    {\n', '        if (!whitelist[addr]) {\n', '            whitelist[addr] = true;\n', '            emit WhitelistedAddressAdded(addr);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev add addresses to the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addrs addresses\n', '    * @return true if at least one address was added to the whitelist,\n', '    * false if all addresses were already in the whitelist\n', '    */\n', '    function addAddressesToWhitelist(address[] addrs)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            if (addAddressToWhitelist(addrs[i])) {\n', '                success = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address from the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addr address\n', '    * @return true if the address was removed from the whitelist,\n', '    * false if the address wasn&#39;t in the whitelist in the first place\n', '    */\n', '    function removeAddressFromWhitelist(address addr)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        require(addr != owner);\n', '        if (whitelist[addr]) {\n', '            whitelist[addr] = false;\n', '            emit WhitelistedAddressRemoved(addr);\n', '            success = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove addresses from the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addrs addresses\n', '    * @return true if at least one address was removed from the whitelist,\n', '    * false if all addresses weren&#39;t in the whitelist in the first place\n', '    */\n', '    function removeAddressesFromWhitelist(address[] addrs)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            if (removeAddressFromWhitelist(addrs[i])) {\n', '                success = true;\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      emit WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      emit WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Operable is Pausable {\n', '    mapping (address => bool) operators;\n', '\n', '    constructor()\n', '    {\n', '    }\n', '\n', '    modifier isOwnerOrOperator() {\n', '        require(msg.sender == owner || operators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    event OperatorAdded(address operatorAddr);\n', '    event OperatorUpdated(address operatorAddr);\n', '    event OperatorRemoved(address operatorAddr);\n', '\n', '    // Only add if msg is not operator\n', '    function addOperator(address operatorAddr) onlyOwner {\n', '        require(operators[operatorAddr] == false);\n', '        operators[operatorAddr] = true;\n', '        emit OperatorAdded(operatorAddr);\n', '    }\n', '    // Only remove if msg is operator\n', '    function removeOperator(address operatorAddr) onlyOwner {\n', '        require(operators[operatorAddr] == true);\n', '        delete operators[operatorAddr];\n', '        emit OperatorRemoved(operatorAddr);\n', '    }\n', '\n', '    function checkOperator(address addr) view returns (bool) {\n', '        return operators[addr];\n', '    }\n', '\n', '    function checkPause() view returns (bool){\n', '        return paused;\n', '    }\n', '}\n', '\n', 'contract Pass1 is DetailedERC20, PausableToken, BurnableToken, MintableToken, Operable, Whitelist\n', '{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public newToken = MintableToken(0x0);\n', '\n', '    /*\n', '    * @dev will be triggered every time a user mints his current token to the upgraded one\n', '    * @param beneficiary receiving address\n', '    * amount amount of token to be minted\n', '    */\n', '    event LogMint(address beneficiary, uint256 amount);\n', '\n', '    /*\n', '    * @dev checks if an upgraded version of Pass token contract is available\n', '    * @return true new upgrade token is setup\n', '    * exception otherwise\n', '    */\n', '    modifier hasUpgrade() {\n', '        require(newToken != MintableToken(0x0));\n', '        _;\n', '    }\n', '\n', '    /*\n', '    * @dev initialize default attributes for the Pass token contract\n', '    */\n', '    constructor()\n', '        DetailedERC20 ("Blockpass","PASS",6)\n', '    {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0x0), owner);\n', '        // initial token amount is 10^9 (1 billion), divisible to 6 decimals\n', '        totalSupply_ = 1000000000000000;\n', '        balances[owner] = totalSupply_;\n', '        emit Transfer(address(0x0), owner, 1000000000000000);\n', '        whitelist[owner] = true;\n', '        emit WhitelistedAddressAdded(owner);\n', '    }\n', '\n', '    /*\n', '    * @dev assign address of the new Pass token contract, can only be triggered by owner address\n', '    * @param _newToken address of the new Token contract\n', '    * @return none\n', '    */\n', '    function upgrade(MintableToken _newToken)\n', '        onlyOwner\n', '        public\n', '    {\n', '        newToken = _newToken;\n', '    }\n', '\n', '    /*\n', '    * @dev override from BurnableToken\n', '    * @param _value amount of token to burn\n', '    * @return exception to prevent calling directly to Pass1 token\n', '    */\n', '    function burn(uint256 _value)\n', '        public\n', '    {\n', '        revert();\n', '        _value = _value; // to silence compiler warning\n', '    }\n', '\n', '    /*\n', '    * @dev override from MintableToken\n', '    * @param _to address of receivers\n', '    * _amount amount of token to redeem to\n', '    * @return exception to prevent calling directly to Pass1 token\n', '    */\n', '    function mint(address _to, uint256 _amount)\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        revert();\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    * @dev allow whitelisted user to redeem his Pass1 token to a newer version of the token\n', "    * can only be triggered if there's a newer version of Pass token, and when the contract is pause\n", '    * @param none\n', '    * @return none\n', '    */\n', '    function mintTo()\n', '        hasUpgrade\n', '        whenPaused\n', '        onlyWhitelisted\n', '        public\n', '    {\n', '        uint256 balance = balanceOf(msg.sender);\n', '\n', '        // burn the tokens in this token smart contract\n', '        super.burn(balance);\n', '\n', '        // mint tokens in the new token smart contract\n', '        require(newToken.mint(msg.sender, balance));\n', '        emit LogMint(msg.sender, balance);\n', '    }\n', '\n', '    /*\n', '    * @dev transfer ownership of token between whitelisted accounts\n', '    * can only be triggered when contract is not paused\n', '    * @param _to address of receiver\n', '    * _value amount to token to transfer\n', '    * @return true if transfer succeeds\n', '    * false if not enough gas is provided, or if _value is larger than current user balance\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '        whenNotPaused\n', '        onlyWhitelisted\n', '        public\n', '        returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /*\n', '    * @dev transfer ownership of token on behalf of one whitelisted account address to another\n', '    * can only be triggered when contract is not paused\n', '    * @param _from sending address\n', '    * _to receiving address\n', '    * _value amount of token to transfer\n', '    * @return true if transfer succeeds\n', '    * false if not enough gas is provided, or if _value is larger than maximum allowance / user balance\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        whenNotPaused\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(whitelist[_from] == true);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /*\n', '    * @dev check if the specified address is in the contract whitelist\n', '    * @param _addr user address\n', '    * @return true if user address is in whitelist\n', '    * false otherwise\n', '    */\n', '    function checkUserWhiteList(address addr)\n', '        view\n', '        public\n', '        returns (bool)\n', '    {\n', '        return whitelist[addr];\n', '    }\n', '\n', '    /*\n', '    * @dev add an user address to the contract whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addr address to be added\n', '    * @return true if address is successfully added\n', '    * false if address is already in the whitelist\n', '    */\n', '    function addAddressToWhitelist(address addr)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool)\n', '    {\n', '        if (!whitelist[addr]) {\n', '            whitelist[addr] = true;\n', '            emit WhitelistedAddressAdded(addr);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev add addresses to the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addrs addresses\n', '    * @return true if at least one address was added to the whitelist,\n', '    * false if all addresses were already in the whitelist\n', '    */\n', '    function addAddressesToWhitelist(address[] addrs)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            if (addAddressToWhitelist(addrs[i])) {\n', '                success = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address from the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addr address\n', '    * @return true if the address was removed from the whitelist,\n', "    * false if the address wasn't in the whitelist in the first place\n", '    */\n', '    function removeAddressFromWhitelist(address addr)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        require(addr != owner);\n', '        if (whitelist[addr]) {\n', '            whitelist[addr] = false;\n', '            emit WhitelistedAddressRemoved(addr);\n', '            success = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove addresses from the whitelist\n', '    * override from WhiteList contract to allow calling from owner or operators addresses\n', '    * @param addrs addresses\n', '    * @return true if at least one address was removed from the whitelist,\n', "    * false if all addresses weren't in the whitelist in the first place\n", '    */\n', '    function removeAddressesFromWhitelist(address[] addrs)\n', '        isOwnerOrOperator\n', '        public\n', '        returns(bool success)\n', '    {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            if (removeAddressFromWhitelist(addrs[i])) {\n', '                success = true;\n', '            }\n', '        }\n', '    }\n', '}']
