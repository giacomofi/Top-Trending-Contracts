['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // assert(_b > 0);\n', '        return _a / _b;\n', '    }\n', '\n', '  \n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    \n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Not Contract Owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract WPGBaseCoin {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor (uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        \n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        require(_to != 0x0, "Do not send to 0x0");\n', '        require(balanceOf[_from] >= _value, "Sender balance is too small");\n', '        require(balanceOf[_to] + _value > balanceOf[_to], "balanceOf[_to] Overflow Error");\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        //balanceOf[_from] -= _value;\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\n', '        //balanceOf[_to] += _value;\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    \n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender], "Allowance value is smaller than _value");\n', '        \n', '        //allowance[_from][msg.sender] -= _value;\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        \n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '    \n', '        require(balanceOf[msg.sender] >= _value, "Burn Balance of sender is smaller than _value");\n', '        //balanceOf[msg.sender] -= _value;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        //totalSupply -= _value;\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\n', '        require(balanceOf[_from] >= _value, "From balance is smaller than _value");\n', '        require(_value <= allowance[_from][msg.sender], "Allowance balance is smaller than _value");\n', '        \n', '        //balanceOf[_from] -= _value;\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        //allowance[_from][msg.sender] -= _value;\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        //totalSupply -= _value;\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        emit Burn(_from, _value);\n', '        return true;\n', '\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED COIN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract WPGCoin is owned, WPGBaseCoin {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    constructor (uint256 initialSupply, string tokenName, string tokenSymbol) WPGBaseCoin(initialSupply, tokenName, tokenSymbol) public {\n', '\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        require (_to != 0x0, "Do not send to 0x0");\n', '        require (balanceOf[_from] >= _value, "Sender balance is too small");\n', '        require (balanceOf[_to] + _value >= balanceOf[_to], "balanceOf[_to] Overflow Error");\n', '        require(!frozenAccount[_from], "From Account is Frozen");\n', '        require(!frozenAccount[_to], "To Acoount is Frozen");\n', '        \n', '        //balanceOf[_from] -= _value;\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        //balanceOf[_to] += _value;\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '        \n', '        //balanceOf[target] += mintedAmount;\n', '        balanceOf[target] = balanceOf[target].add(mintedAmount);\n', '        //totalSupply += mintedAmount;\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        \n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) public onlyOwner{\n', '    \n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    \n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\n', '    \n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    \n', '    }\n', '\n', '    function buy() public payable {\n', '        \n', '        //uint amount = msg.value / buyPrice;\n', '        uint amount = msg.value.div(buyPrice);\n', '\n', '        _transfer(this, msg.sender, amount);\n', '\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '    \n', '        address myAddress = this;\n', '        \n', '        require(myAddress.balance >= amount * sellPrice, "Account balance is too small for buying");\n', '        \n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(amount * sellPrice);\n', '\n', '    }\n', '\n', '    function getBalanceOf(address _address) public view returns (uint) {\n', '        return balanceOf[_address];\n', '    }\n', '}']