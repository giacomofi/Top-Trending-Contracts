['pragma solidity ^0.4.16;\n', '\n', 'contract BIOBIT {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    uint256 public limitSupply;\n', '    address public owner;\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyAdmin(){\n', '        require(msg.sender == owner || administrators[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) private balanceOf;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => bool) public administrators;\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    event TransferByAdmin(address indexed admin, address indexed from, address indexed to, uint256 value);\n', '    \n', '   /**\n', '    * Constrctor function\n', '    *\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    */\n', '    function BIOBIT() public{\n', '        owner = msg.sender;\n', '        limitSupply = 150000000;\n', '        uint256 initialSupply = 25000000;\n', '        totalSupply = initialSupply;              // Update total supply\n', '        balanceOf[owner] = initialSupply;       \n', '        name = "BIOBIT";                          // Set the name for display purposes\n', '        symbol = "à¸¿";                             // Set the symbol for display purposes\n', '    }\n', '\n', '   /** Get My Balance\n', '    *\n', '    * Get your Balance BIOBIT\n', '    * \n', '    */\n', '    function balance() public constant returns(uint){\n', '        return balanceOf[msg.sender];\n', '        \n', '    }\n', '    \n', '    /**\n', '    * Transfer tokens\n', '    *\n', '    * Send `_value` tokens to `_to` from your account\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transfer(address _to, uint256 _value)  public\n', '    {       // Add the same to the recipient\n', '            require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(balanceOf[msg.sender] >= _value);                // Check if the sender has enough\n', '            require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '            balanceOf[msg.sender] -= _value;                         // Subtract from the sender\n', '            balanceOf[_to] += _value;                           // Add the same to the recipient\n', '            Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '        \n', '    /**\n', '    *\n', '    * incremento de  existencias de tokens 5 millions\n', '    * \n', '    */\n', '    function incrementSupply() onlyOwner public returns(bool){\n', '            uint256 _value = 5000000;\n', '            require(totalSupply + _value <= limitSupply);\n', '            totalSupply += _value;\n', '            balanceOf[owner] += _value;\n', '    }\n', '    \n', '   /**\n', '    * Transfer tokens from other address\n', '    *\n', '    * Send `_value` tokens to `_to` in behalf of `_from`\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transferByAdmin(address _from, address _to, uint256 _value) onlyAdmin public returns (bool success) {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_from != 0x0);                             // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_from != owner);                           // Prevent transfer token from owner\n', '        require(administrators[_from] == false);           // prevent transfer from administrators\n', '        require(balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        TransferByAdmin(msg.sender,_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * Transfer tokens from other address\n', '    * @param from_ get address from\n', '    */\n', '    function balancefrom(address from_) onlyAdmin  public constant returns(uint){\n', '              return balanceOf[from_];\n', '    }\n', '\n', '    function setAdmin(address admin_, bool flag_) onlyOwner public returns (bool success){\n', '        administrators[admin_] = flag_;\n', '        return true;\n', '    }\n', '  \n', '}']