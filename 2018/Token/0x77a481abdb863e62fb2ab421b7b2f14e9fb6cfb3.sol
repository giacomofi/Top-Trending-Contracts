['pragma solidity ^0.4.19;\n', '\n', 'contract BaseToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnToken is BaseToken {\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AirdropToken is BaseToken {\n', '    uint256 public airAmount;\n', '    uint256 public airBegintime;\n', '    uint256 public airEndtime;\n', '    address public airSender;\n', '    uint32 public airLimitCount;\n', '\n', '    mapping (address => uint32) public airCountOf;\n', '\n', '    event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);\n', '\n', '    function airdrop() public payable {\n', '        require(now >= airBegintime && now <= airEndtime);\n', '        require(msg.value == 0);\n', '        if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {\n', '            revert();\n', '        }\n', '        _transfer(airSender, msg.sender, airAmount);\n', '        airCountOf[msg.sender] += 1;\n', '        Airdrop(msg.sender, airCountOf[msg.sender], airAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract CustomToken is BaseToken, BurnToken, AirdropToken {\n', '    function CustomToken() public {\n', '        totalSupply = 13000000000000000000;\n', '        name = &#39;TSST&#39;;\n', '        symbol = &#39;TSST&#39;;\n', '        decimals = 10;\n', '        balanceOf[0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530] = totalSupply;\n', '        Transfer(address(0), 0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530, totalSupply);\n', '\n', '        airAmount = 1000000000000;\n', '        airBegintime = 1532357897;\n', '        airEndtime = 1563893897;\n', '        airSender = 0xd922612aC99bDA2Ca758fBd95AA456D22C6FBabC;\n', '        airLimitCount = 1;\n', '\n', '        \n', '    }\n', '\n', '    function() public payable {\n', '        airdrop();\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract BaseToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnToken is BaseToken {\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AirdropToken is BaseToken {\n', '    uint256 public airAmount;\n', '    uint256 public airBegintime;\n', '    uint256 public airEndtime;\n', '    address public airSender;\n', '    uint32 public airLimitCount;\n', '\n', '    mapping (address => uint32) public airCountOf;\n', '\n', '    event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);\n', '\n', '    function airdrop() public payable {\n', '        require(now >= airBegintime && now <= airEndtime);\n', '        require(msg.value == 0);\n', '        if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {\n', '            revert();\n', '        }\n', '        _transfer(airSender, msg.sender, airAmount);\n', '        airCountOf[msg.sender] += 1;\n', '        Airdrop(msg.sender, airCountOf[msg.sender], airAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract CustomToken is BaseToken, BurnToken, AirdropToken {\n', '    function CustomToken() public {\n', '        totalSupply = 13000000000000000000;\n', "        name = 'TSST';\n", "        symbol = 'TSST';\n", '        decimals = 10;\n', '        balanceOf[0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530] = totalSupply;\n', '        Transfer(address(0), 0x5ebc4B61A0E0187d9a72Da21bfb8b45F519cb530, totalSupply);\n', '\n', '        airAmount = 1000000000000;\n', '        airBegintime = 1532357897;\n', '        airEndtime = 1563893897;\n', '        airSender = 0xd922612aC99bDA2Ca758fBd95AA456D22C6FBabC;\n', '        airLimitCount = 1;\n', '\n', '        \n', '    }\n', '\n', '    function() public payable {\n', '        airdrop();\n', '    }\n', '}']
