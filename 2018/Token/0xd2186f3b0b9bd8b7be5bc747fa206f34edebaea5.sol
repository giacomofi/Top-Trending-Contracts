['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract NebToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Nebula Network Token";\n', '  string public symbol = "NEB";\n', '  uint8 public decimals = 0;\n', '  address public treasury;\n', '  uint256 public totalSupply;\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  constructor(uint256 _totalSupply) public {\n', '    treasury = msg.sender;\n', '    totalSupply = _totalSupply;\n', '    balances[treasury] = totalSupply;\n', '    emit Transfer(0x0, treasury, totalSupply);\n', '  }\n', '\n', '  function balanceOf(address _addr) public view returns(uint256) {\n', '    return balances[_addr];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amount) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount <= balances[_from]);\n', '    require(_amount <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    emit Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _amount) public returns (bool) {\n', '      allowed[msg.sender][_spender] = _amount;\n', '      emit Approval(msg.sender, _spender, _amount);\n', '      return true;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract NebToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Nebula Network Token";\n', '  string public symbol = "NEB";\n', '  uint8 public decimals = 0;\n', '  address public treasury;\n', '  uint256 public totalSupply;\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  constructor(uint256 _totalSupply) public {\n', '    treasury = msg.sender;\n', '    totalSupply = _totalSupply;\n', '    balances[treasury] = totalSupply;\n', '    emit Transfer(0x0, treasury, totalSupply);\n', '  }\n', '\n', '  function balanceOf(address _addr) public view returns(uint256) {\n', '    return balances[_addr];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amount) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount <= balances[_from]);\n', '    require(_amount <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    emit Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _amount) public returns (bool) {\n', '      allowed[msg.sender][_spender] = _amount;\n', '      emit Approval(msg.sender, _spender, _amount);\n', '      return true;\n', '  }\n', '}']
