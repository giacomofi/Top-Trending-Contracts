['pragma solidity ^0.4.16;\n', '\n', 'contract IotWifitoken {\n', '\n', '    string public name = "IotWifitoken";\n', '    string public symbol = "ITWF";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function IotWifitoken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract IotWifitoken {\n', '\n', '    string public name = "IotWifitoken";\n', '    string public symbol = "ITWF";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function IotWifitoken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '}']
