['pragma solidity 0.4.24;\n', '/**\n', '* @title Circa Token Contract\n', '* @dev Circa is an ERC-20 Standar Compliant Token\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '    address public allowedAddress; //An allowed address\n', '    bool public lockSupply; //Burn Lock flag\n', '    bool public lockTransfer = true; //Global transfers flag\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = 0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B; //Set initial admin\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAllowed() { //A modifier to let allowedAddress work\n', '        require(msg.sender == allowedAddress || msg.sender == admin || lockTransfer == false);\n', '        _;\n', '    }\n', '\n', '    modifier supplyLock() { //A modifier to lock burn transactions\n', '        require(lockSupply == false);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new allowed address\n', '    * @param _newAllowed The address to transfer rights to\n', '    */\n', '    function setAllowed(address _newAllowed) onlyAdmin public { //Admin can be transfered\n', '        allowedAddress = _newAllowed;\n', '        emit SetAllowedAddress(allowedAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set burn lock\n', '    * This function will be used after the burn process finish\n', '    */\n', '    function setSupplyLock(bool _flag) onlyAdmin public { //Only the admin can set a lock on supply\n', '        lockSupply = _flag;\n', '        emit SetSupplyLock(lockSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set transfer lock\n', '    */\n', '    function setTransferLock(bool _flag) onlyAdmin public { //Only the admin can set a lock on transfers\n', '        lockTransfer = _flag;\n', '        emit SetTransferLock(lockTransfer);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event SetSupplyLock(bool _set);\n', '    event SetTransferLock(bool _set);\n', '    event SetAllowedAddress(address newAllowed);\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is admined, ERC20 { //Standar definition of an ERC20Token\n', '    using SafeMath for uint256; //SafeMath is used for uint256 operations\n', '    mapping (address => uint256) internal balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) internal allowed; //A mapping of all allowances\n', '    uint256 internal totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @notice Get the balance of an _who address.\n', '    * @param _who The address to be query.\n', '    */\n', '    function balanceOf(address _who) public view returns (uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    /**\n', '    * @notice transfer _value tokens to address _to\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyAllowed() public returns (bool) {\n', '        require(_to != address(0)); //Invalid transfer\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    * @return remaining with the allowance value\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\n', '    * @param _from The address where tokens comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyAllowed() public returns (bool) {\n', '        require(_to != address(0)); //Invalid transfer\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Assign allowance _value to _spender address to use the msg.sender balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    * @return success with boolean value true\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(uint256 _burnedAmount) supplyLock() onlyAllowed() public returns (bool){\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\n', '        totalSupply_ = SafeMath.sub(totalSupply_, _burnedAmount);\n', '        emit Burned(msg.sender, _burnedAmount);\n', '        return true;\n', '    }\n', '\n', '    event Burned(address indexed _target, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', '* @title AssetCirca\n', '* @notice Circa Token creation.\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract AssetCirca is ERC20Token {\n', '    string public name = &#39;Circa&#39;;\n', '    uint8 public decimals = 18;\n', '    string public symbol = &#39;CIR&#39;;\n', '    string public version = &#39;1&#39;;\n', '\n', '    /**\n', '    * @notice token contructor.\n', '    */\n', '    constructor() public {\n', '        totalSupply_ = 1000000000 * 10 ** uint256(decimals); //Initial tokens supply 1,000,000,000;\n', '        //Writer&#39;s equity\n', '        balances[0xEB53AD38f0C37C0162E3D1D4666e63a55EfFC65f] = totalSupply_ / 1000; //0.1%\n', '        balances[0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B] = totalSupply_.sub(balances[0xEB53AD38f0C37C0162E3D1D4666e63a55EfFC65f]); //99.9%\n', '\n', '        emit Transfer(0, this, totalSupply_);\n', '        emit Transfer(this, 0xEB53AD38f0C37C0162E3D1D4666e63a55EfFC65f, balances[0xEB53AD38f0C37C0162E3D1D4666e63a55EfFC65f]);\n', '        emit Transfer(this, 0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B, balances[0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B]);\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice this contract will revert on direct non-function calls, also it&#39;s not payable\n', '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']