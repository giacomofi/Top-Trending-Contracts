['pragma solidity ^0.4.23;\n', '///////////////////////////////////////////////////\n', '//  \n', '//  `iCashweb` ICW Token Contract\n', '//\n', '//  Total Tokens: 300,000,000.000000000000000000\n', '//  Name: iCashweb\n', '//  Symbol: ICW\n', '//  Decimal Scheme: 18\n', '//  \n', '//  by Nishad Vadgama\n', '///////////////////////////////////////////////////\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC01Basic {\n', '  function totalSupply() public view returns(uint256);\n', '  function balanceOf(address who) public view returns(uint256);\n', '  function transfer(address to, uint256 value) public returns(bool);\n', '  function changeRate(uint256 value) public returns(bool);\n', '  function startIco(bool status) public returns(bool);\n', '  function changeOwnerShip(address toWhom) public returns(bool);\n', '  function transferTokens() public payable;\n', '  function releaseIcoTokens() public returns(bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC01Basic {\n', '  function allowance(address owner, address spender) public view returns(uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '  function approve(address spender, uint256 value) public returns(bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ICWToken is ERC01Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  address public contractModifierAddress;\n', '  uint256 _totalSupply;\n', '  uint256 _totalICOSupply;\n', '  uint256 _maxICOSupply;\n', '  uint256 RATE = 100;\n', '  bool _status;\n', '  bool _released;\n', '\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 150000000 * (10 ** uint256(decimals));\n', '  uint256 public constant ICO_SUPPLY = 150000000 * (10 ** uint256(decimals));\n', '\n', '  modifier onlyByOwned() {\n', '    require(msg.sender == contractModifierAddress);\n', '    _;\n', '  }\n', '\n', '  function getReleased() public view returns(bool) {\n', '    return _released;\n', '  }\n', '  function getOwner() public view returns(address) {\n', '    return contractModifierAddress;\n', '  }\n', '  \n', '  function getICOStatus() public view returns(bool) {\n', '    return _status;\n', '  }\n', '\n', '  function totalSupply() public view returns(uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function totalICOSupply() public view returns(uint256) {\n', '    return _totalICOSupply;\n', '  }\n', '\n', '  function destroyContract() public onlyByOwned {\n', '    selfdestruct(contractModifierAddress);\n', '  }\n', '\n', '  function changeOwnerShip(address _to) public onlyByOwned returns(bool) {\n', '    address oldOwner = contractModifierAddress;\n', '    uint256 balAmount = balances[oldOwner];\n', '    balances[_to] = balances[_to].add(balAmount);\n', '    balances[oldOwner] = 0;\n', '    contractModifierAddress = _to;\n', '    emit Transfer(oldOwner, contractModifierAddress, balAmount);\n', '    return true;\n', '  }\n', '\n', '  function releaseIcoTokens() public onlyByOwned returns(bool) {\n', '    require(_released == false);\n', '    uint256 realeaseAmount = _maxICOSupply.sub(_totalICOSupply);\n', '    uint256 totalReleased = _totalICOSupply.add(realeaseAmount);\n', '    require(_maxICOSupply >= totalReleased);\n', '    _totalSupply = _totalSupply.add(realeaseAmount);\n', '    balances[contractModifierAddress] = balances[contractModifierAddress].add(realeaseAmount);\n', '    emit Transfer(contractModifierAddress, contractModifierAddress, realeaseAmount);\n', '    return true;\n', '  }\n', '\n', '  function changeRate(uint256 _value) public onlyByOwned returns(bool) {\n', '    require(_value > 0);\n', '    RATE = _value;\n', '    return true;\n', '  }\n', '\n', '  function startIco(bool status_) public onlyByOwned returns(bool) {\n', '    _status = status_;\n', '    return true;\n', '  }\n', '\n', '  function transferTokens() public payable {\n', '    require(_status == true && msg.value > 0);\n', '    uint tokens = msg.value.mul(RATE);\n', '    uint totalToken = _totalICOSupply.add(tokens);\n', '    require(_maxICOSupply >= totalToken);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    _totalICOSupply = _totalICOSupply.add(tokens);\n', '    contractModifierAddress.transfer(msg.value);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns(bool) {\n', '    require(_to != msg.sender);\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns(uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract iCashwebToken is ERC20, ICWToken {\n', '\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '    require(_to != msg.sender);\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns(uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract iCashweb is iCashwebToken {\n', '\n', '  string public constant name = "iCashweb";\n', '  string public constant symbol = "ICW";\n', '\n', '  constructor() public {\n', '    _status = false;\n', '    _released = false;\n', '    contractModifierAddress = msg.sender;\n', '    _totalSupply = INITIAL_SUPPLY;\n', '    _maxICOSupply = ICO_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '  function () public payable {\n', '    transferTokens();\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '///////////////////////////////////////////////////\n', '//  \n', '//  `iCashweb` ICW Token Contract\n', '//\n', '//  Total Tokens: 300,000,000.000000000000000000\n', '//  Name: iCashweb\n', '//  Symbol: ICW\n', '//  Decimal Scheme: 18\n', '//  \n', '//  by Nishad Vadgama\n', '///////////////////////////////////////////////////\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC01Basic {\n', '  function totalSupply() public view returns(uint256);\n', '  function balanceOf(address who) public view returns(uint256);\n', '  function transfer(address to, uint256 value) public returns(bool);\n', '  function changeRate(uint256 value) public returns(bool);\n', '  function startIco(bool status) public returns(bool);\n', '  function changeOwnerShip(address toWhom) public returns(bool);\n', '  function transferTokens() public payable;\n', '  function releaseIcoTokens() public returns(bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC01Basic {\n', '  function allowance(address owner, address spender) public view returns(uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '  function approve(address spender, uint256 value) public returns(bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ICWToken is ERC01Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  address public contractModifierAddress;\n', '  uint256 _totalSupply;\n', '  uint256 _totalICOSupply;\n', '  uint256 _maxICOSupply;\n', '  uint256 RATE = 100;\n', '  bool _status;\n', '  bool _released;\n', '\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 150000000 * (10 ** uint256(decimals));\n', '  uint256 public constant ICO_SUPPLY = 150000000 * (10 ** uint256(decimals));\n', '\n', '  modifier onlyByOwned() {\n', '    require(msg.sender == contractModifierAddress);\n', '    _;\n', '  }\n', '\n', '  function getReleased() public view returns(bool) {\n', '    return _released;\n', '  }\n', '  function getOwner() public view returns(address) {\n', '    return contractModifierAddress;\n', '  }\n', '  \n', '  function getICOStatus() public view returns(bool) {\n', '    return _status;\n', '  }\n', '\n', '  function totalSupply() public view returns(uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function totalICOSupply() public view returns(uint256) {\n', '    return _totalICOSupply;\n', '  }\n', '\n', '  function destroyContract() public onlyByOwned {\n', '    selfdestruct(contractModifierAddress);\n', '  }\n', '\n', '  function changeOwnerShip(address _to) public onlyByOwned returns(bool) {\n', '    address oldOwner = contractModifierAddress;\n', '    uint256 balAmount = balances[oldOwner];\n', '    balances[_to] = balances[_to].add(balAmount);\n', '    balances[oldOwner] = 0;\n', '    contractModifierAddress = _to;\n', '    emit Transfer(oldOwner, contractModifierAddress, balAmount);\n', '    return true;\n', '  }\n', '\n', '  function releaseIcoTokens() public onlyByOwned returns(bool) {\n', '    require(_released == false);\n', '    uint256 realeaseAmount = _maxICOSupply.sub(_totalICOSupply);\n', '    uint256 totalReleased = _totalICOSupply.add(realeaseAmount);\n', '    require(_maxICOSupply >= totalReleased);\n', '    _totalSupply = _totalSupply.add(realeaseAmount);\n', '    balances[contractModifierAddress] = balances[contractModifierAddress].add(realeaseAmount);\n', '    emit Transfer(contractModifierAddress, contractModifierAddress, realeaseAmount);\n', '    return true;\n', '  }\n', '\n', '  function changeRate(uint256 _value) public onlyByOwned returns(bool) {\n', '    require(_value > 0);\n', '    RATE = _value;\n', '    return true;\n', '  }\n', '\n', '  function startIco(bool status_) public onlyByOwned returns(bool) {\n', '    _status = status_;\n', '    return true;\n', '  }\n', '\n', '  function transferTokens() public payable {\n', '    require(_status == true && msg.value > 0);\n', '    uint tokens = msg.value.mul(RATE);\n', '    uint totalToken = _totalICOSupply.add(tokens);\n', '    require(_maxICOSupply >= totalToken);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    _totalICOSupply = _totalICOSupply.add(tokens);\n', '    contractModifierAddress.transfer(msg.value);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns(bool) {\n', '    require(_to != msg.sender);\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns(uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract iCashwebToken is ERC20, ICWToken {\n', '\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '    require(_to != msg.sender);\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns(uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract iCashweb is iCashwebToken {\n', '\n', '  string public constant name = "iCashweb";\n', '  string public constant symbol = "ICW";\n', '\n', '  constructor() public {\n', '    _status = false;\n', '    _released = false;\n', '    contractModifierAddress = msg.sender;\n', '    _totalSupply = INITIAL_SUPPLY;\n', '    _maxICOSupply = ICO_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '  function () public payable {\n', '    transferTokens();\n', '  }\n', '}']
