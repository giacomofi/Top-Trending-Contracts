['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/* contract ownership status*/\n', 'contract owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _oshiAmount, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // @param M Multiplier,\n', '    uint256 public M = 10**uint256(decimals); \n', '    uint256 public totalSupply;\n', '\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /** oshi for Adamcoin is like wei for Ether, 1 Adamcoin = M * oshi as 1 Ether = 1e18 wei  */\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _oshiAmount);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _approvedBy, address _spender, uint256 _oshiAmount);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint256 _oshiAmount);\n', '\n', '    /**\n', '     * Constructor\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '       uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    )   public {\n', '        \n', '        totalSupply = initialSupply * M;\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                         // Set the name for display purposes\n', '        symbol = tokenSymbol;                    // Set the symbol for display purposes\n', '    }\n', '    \n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _oshiAmount) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);\n', '        emit Transfer(_from, _to, _oshiAmount);\n', '        \n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_oshiAmount` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _oshiAmount the amount of oshi to send\n', '     */\n', '    function transfer(address _to, uint256 _oshiAmount) public {\n', '        _transfer(msg.sender, _to, _oshiAmount);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_oshiAmount`  to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _oshiAmount the amount or oshi to send\n', '     */\n', '     function transferFrom(address _from, address _to, uint256 _oshiAmount) public returns (bool success) {\n', '        require(_oshiAmount <= balanceOf[_from]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);\n', '        require(_oshiAmount > 0 && _from != _to); \n', '        _transfer(_from, _to, _oshiAmount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_oshiAmount` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _oshiAmount the max amount of oshi they can spend \n', '     */\n', '     function approve(address _spender, uint _oshiAmount) public returns (bool success) {\n', '       \n', '        allowed[msg.sender][_spender] = _oshiAmount;\n', '        emit Approval(msg.sender, _spender, _oshiAmount);\n', '        return true;\n', '    }\n', '    \n', '      /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_oshiAmount`  in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _oshiAmount the max amount of oshi they can spend \n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _oshiAmount, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _oshiAmount)) {\n', '            spender.receiveApproval(msg.sender, _oshiAmount, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '  \n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_oshiAmount`  from the system irreversibly\n', '     *\n', '     * @param _oshiAmount the amount of oshi to burn \n', '     */\n', '    function burn(uint256 _oshiAmount) public returns (bool success) {\n', '    \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_oshiAmount);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_oshiAmount);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _oshiAmount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_oshiAmount`  from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _oshiAmount the amount of oshi to burn \n', '     */\n', '    function burnFrom(address _from, uint256 _oshiAmount)  public returns (bool success) {\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);                         // Subtract from the targeted balance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);             // Subtract from the sender&#39;s allowed\n', '        totalSupply = totalSupply.sub(_oshiAmount);                              // Update totalSupply\n', '        emit Burn(_from, _oshiAmount);\n', '        return true;\n', '    }\n', '}\n', '/******************************************/\n', '/*       ADAMCOINS ADM STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract Adamcoins is owned, TokenERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public sellPrice;                //Adamcoins sell price\n', '    uint256 public buyPrice;                 //Adamcoins buy price\n', '    bool public purchasingAllowed = true;\n', '    bool public sellingAllowed = true;\n', '\n', '    \n', '    mapping (address => uint) public pendingWithdrawals;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '     constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '    \n', '    /// @dev Public function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) view public returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @notice allows to purchase from the contract \n', '    function enablePurchasing() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        purchasingAllowed = true;\n', '    }\n', '    /// @notice doesn&#39;t allow to purchase from the contract\n', '    function disablePurchasing() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        purchasingAllowed = false;\n', '    }\n', '    \n', '    /// @notice allows to sell to the contract\n', '    function enableSelling() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        sellingAllowed = true;\n', '    }\n', '    /// @notice doesn&#39;t allow to sell to the contract\n', '    function disableSelling() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        sellingAllowed = false;\n', '    }\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _oshiAmount) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);    // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);        // Add the same to the recipient\n', '        emit Transfer(_from, _to, _oshiAmount);\n', '    }\n', '\n', '    /// @notice Create `mintedOshiAmount` and send it to `target`\n', '    /// @param target Address to receive oshi\n', '    /// @param mintedOshiAmount the amount of oshi it will receive \n', '    function mintToken(address target, uint256 mintedOshiAmount) onlyOwner public returns (bool) {\n', '        \n', '        balanceOf[target] = balanceOf[target].add(mintedOshiAmount);\n', '        totalSupply = totalSupply.add(mintedOshiAmount);\n', '        emit Transfer(0, address(this), mintedOshiAmount);\n', '        emit Transfer(address(this), target, mintedOshiAmount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy adamcoins for `newBuyPrice` and sell adamcoins for `newSellPrice`\n', '    /// @param newSellPrice the Price in wei that users can sell to the contract\n', '    /// @param newBuyPrice the Price in wei that users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    \n', '    }\n', '\n', '   /* transfer amount of wei to owner*/\n', '\tfunction withdrawEther(uint256 amount) onlyOwner public {\n', '\t\trequire(msg.sender == owner);\n', '\t\towner.transfer(amount);\n', '\t}\n', '\t/// @notice This method can be used by the owner to extract sent tokens \n', '\t/// or ethers to this contract.\n', '    /// @param _token The address of token contract that you want to recover\n', '    ///  set to 0 address in case of ether\n', '\tfunction claimTokens(address _token) onlyOwner public {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        TokenERC20 token = TokenERC20(_token);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(owner, balance);\n', '        \n', '    }\n', '    \n', '    /// @notice Buy tokens from contract by sending ether\n', '    function() public payable {\n', '        \n', '        require(msg.value > 0);\n', '        require(purchasingAllowed);\n', '        uint tokens = (msg.value * M)/buyPrice; // calculates the amount\n', '        \n', '\t    pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(tokens); // update the pendingWithdrawals amount for buyer\n', '\t}\n', '\t\n', '\t/// @notice Withdraw the amount of pendingWithdrawals from contract\n', '    function withdrawAdamcoins() public {\n', '        require(purchasingAllowed);\n', '        uint withdrawalAmount = pendingWithdrawals[msg.sender]; // calculates withdrawal amount \n', '        \n', '        pendingWithdrawals[msg.sender] = 0;\n', '        \n', '        _transfer(address(this), msg.sender, withdrawalAmount);    // makes the transfers\n', '       \n', '    }\n', '    \n', '    /// @notice Sell Adamcoins  to the contract\n', '    /// @param _adamcoinsAmountToSell amount of  Adamcoins to be sold\n', '    function sell(uint256 _adamcoinsAmountToSell) public {\n', '        require(sellingAllowed);\n', '        uint256 weiAmount = _adamcoinsAmountToSell.mul(sellPrice);\n', '        require(address(this).balance >= weiAmount);      // checks if the contract has enough ether to buy\n', '        uint adamcoinsAmountToSell = _adamcoinsAmountToSell * M;\n', '        _transfer(msg.sender, address(this), adamcoinsAmountToSell);              // makes the transfers\n', '        msg.sender.transfer(weiAmount);          // sends ether to the seller.\n', '    }\n', '    \n', '    \n', '}']
['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/* contract ownership status*/\n', 'contract owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _oshiAmount, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // @param M Multiplier,\n', '    uint256 public M = 10**uint256(decimals); \n', '    uint256 public totalSupply;\n', '\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /** oshi for Adamcoin is like wei for Ether, 1 Adamcoin = M * oshi as 1 Ether = 1e18 wei  */\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _oshiAmount);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _approvedBy, address _spender, uint256 _oshiAmount);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint256 _oshiAmount);\n', '\n', '    /**\n', '     * Constructor\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '       uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    )   public {\n', '        \n', '        totalSupply = initialSupply * M;\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                         // Set the name for display purposes\n', '        symbol = tokenSymbol;                    // Set the symbol for display purposes\n', '    }\n', '    \n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _oshiAmount) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);\n', '        emit Transfer(_from, _to, _oshiAmount);\n', '        \n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_oshiAmount` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _oshiAmount the amount of oshi to send\n', '     */\n', '    function transfer(address _to, uint256 _oshiAmount) public {\n', '        _transfer(msg.sender, _to, _oshiAmount);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_oshiAmount`  to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _oshiAmount the amount or oshi to send\n', '     */\n', '     function transferFrom(address _from, address _to, uint256 _oshiAmount) public returns (bool success) {\n', '        require(_oshiAmount <= balanceOf[_from]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);\n', '        require(_oshiAmount > 0 && _from != _to); \n', '        _transfer(_from, _to, _oshiAmount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_oshiAmount` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _oshiAmount the max amount of oshi they can spend \n', '     */\n', '     function approve(address _spender, uint _oshiAmount) public returns (bool success) {\n', '       \n', '        allowed[msg.sender][_spender] = _oshiAmount;\n', '        emit Approval(msg.sender, _spender, _oshiAmount);\n', '        return true;\n', '    }\n', '    \n', '      /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_oshiAmount`  in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _oshiAmount the max amount of oshi they can spend \n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _oshiAmount, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _oshiAmount)) {\n', '            spender.receiveApproval(msg.sender, _oshiAmount, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '  \n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_oshiAmount`  from the system irreversibly\n', '     *\n', '     * @param _oshiAmount the amount of oshi to burn \n', '     */\n', '    function burn(uint256 _oshiAmount) public returns (bool success) {\n', '    \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_oshiAmount);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_oshiAmount);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _oshiAmount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_oshiAmount`  from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _oshiAmount the amount of oshi to burn \n', '     */\n', '    function burnFrom(address _from, uint256 _oshiAmount)  public returns (bool success) {\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);                         // Subtract from the targeted balance\n', "        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);             // Subtract from the sender's allowed\n", '        totalSupply = totalSupply.sub(_oshiAmount);                              // Update totalSupply\n', '        emit Burn(_from, _oshiAmount);\n', '        return true;\n', '    }\n', '}\n', '/******************************************/\n', '/*       ADAMCOINS ADM STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract Adamcoins is owned, TokenERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public sellPrice;                //Adamcoins sell price\n', '    uint256 public buyPrice;                 //Adamcoins buy price\n', '    bool public purchasingAllowed = true;\n', '    bool public sellingAllowed = true;\n', '\n', '    \n', '    mapping (address => uint) public pendingWithdrawals;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '     constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '    \n', '    /// @dev Public function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) view public returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @notice allows to purchase from the contract \n', '    function enablePurchasing() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        purchasingAllowed = true;\n', '    }\n', "    /// @notice doesn't allow to purchase from the contract\n", '    function disablePurchasing() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        purchasingAllowed = false;\n', '    }\n', '    \n', '    /// @notice allows to sell to the contract\n', '    function enableSelling() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        sellingAllowed = true;\n', '    }\n', "    /// @notice doesn't allow to sell to the contract\n", '    function disableSelling() onlyOwner public {\n', '        require (msg.sender == owner); \n', '        sellingAllowed = false;\n', '    }\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _oshiAmount) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);    // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);        // Add the same to the recipient\n', '        emit Transfer(_from, _to, _oshiAmount);\n', '    }\n', '\n', '    /// @notice Create `mintedOshiAmount` and send it to `target`\n', '    /// @param target Address to receive oshi\n', '    /// @param mintedOshiAmount the amount of oshi it will receive \n', '    function mintToken(address target, uint256 mintedOshiAmount) onlyOwner public returns (bool) {\n', '        \n', '        balanceOf[target] = balanceOf[target].add(mintedOshiAmount);\n', '        totalSupply = totalSupply.add(mintedOshiAmount);\n', '        emit Transfer(0, address(this), mintedOshiAmount);\n', '        emit Transfer(address(this), target, mintedOshiAmount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy adamcoins for `newBuyPrice` and sell adamcoins for `newSellPrice`\n', '    /// @param newSellPrice the Price in wei that users can sell to the contract\n', '    /// @param newBuyPrice the Price in wei that users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    \n', '    }\n', '\n', '   /* transfer amount of wei to owner*/\n', '\tfunction withdrawEther(uint256 amount) onlyOwner public {\n', '\t\trequire(msg.sender == owner);\n', '\t\towner.transfer(amount);\n', '\t}\n', '\t/// @notice This method can be used by the owner to extract sent tokens \n', '\t/// or ethers to this contract.\n', '    /// @param _token The address of token contract that you want to recover\n', '    ///  set to 0 address in case of ether\n', '\tfunction claimTokens(address _token) onlyOwner public {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        TokenERC20 token = TokenERC20(_token);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(owner, balance);\n', '        \n', '    }\n', '    \n', '    /// @notice Buy tokens from contract by sending ether\n', '    function() public payable {\n', '        \n', '        require(msg.value > 0);\n', '        require(purchasingAllowed);\n', '        uint tokens = (msg.value * M)/buyPrice; // calculates the amount\n', '        \n', '\t    pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(tokens); // update the pendingWithdrawals amount for buyer\n', '\t}\n', '\t\n', '\t/// @notice Withdraw the amount of pendingWithdrawals from contract\n', '    function withdrawAdamcoins() public {\n', '        require(purchasingAllowed);\n', '        uint withdrawalAmount = pendingWithdrawals[msg.sender]; // calculates withdrawal amount \n', '        \n', '        pendingWithdrawals[msg.sender] = 0;\n', '        \n', '        _transfer(address(this), msg.sender, withdrawalAmount);    // makes the transfers\n', '       \n', '    }\n', '    \n', '    /// @notice Sell Adamcoins  to the contract\n', '    /// @param _adamcoinsAmountToSell amount of  Adamcoins to be sold\n', '    function sell(uint256 _adamcoinsAmountToSell) public {\n', '        require(sellingAllowed);\n', '        uint256 weiAmount = _adamcoinsAmountToSell.mul(sellPrice);\n', '        require(address(this).balance >= weiAmount);      // checks if the contract has enough ether to buy\n', '        uint adamcoinsAmountToSell = _adamcoinsAmountToSell * M;\n', '        _transfer(msg.sender, address(this), adamcoinsAmountToSell);              // makes the transfers\n', '        msg.sender.transfer(weiAmount);          // sends ether to the seller.\n', '    }\n', '    \n', '    \n', '}']
