['pragma solidity ^0.4.24;\n', '// Developed by Phenom.Team <info@phenom.team>\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) view returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) view returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = tx.origin;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, &#39;ownership is required&#39;);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract BaseTokenVesting is Ownable() {\n', '    using SafeMath for uint;\n', '\n', '    address public beneficiary;\n', '    ERC20 public token;\n', '\n', '    bool public vestingHasStarted;\n', '    uint public start;\n', '    uint public cliff;\n', '    uint public vestingPeriod;\n', '\n', '    uint public released;\n', '\n', '    event Released(uint _amount);\n', '\n', '    constructor(\n', '\t\taddress _benificiary,\n', '\t\tuint _cliff,\n', '\t\tuint _vestingPeriod,\n', '\t\taddress _token\n', '\t) internal \n', '\t{\n', '        require(_benificiary != address(0), &#39;can not send to zero-address&#39;);\n', '\n', '        beneficiary = _benificiary;\n', '        cliff = _cliff;\n', '        vestingPeriod = _vestingPeriod;\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function startVesting() public onlyOwner {\n', '        vestingHasStarted = true;\n', '        start = now;\n', '        cliff = cliff.add(start);\n', '    }\n', '\n', '    function sendTokens(address _to, uint _amount) public onlyOwner {\n', '        require(vestingHasStarted == false, &#39;send tokens only if vesting has not been started&#39;);\n', '        require(token.transfer(_to, _amount), &#39;token.transfer has failed&#39;);\n', '    }\n', '\n', '    function release() public;\n', '\n', '    function releasableAmount() public view returns (uint _amount);\n', '\n', '    function vestedAmount() public view returns (uint _amount);\n', '}\n', '\n', 'contract TokenVestingWithConstantPercent is BaseTokenVesting {\n', '\n', '    uint public periodPercent;\n', '\n', '    constructor(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint _periodPercent\n', '    ) \n', '        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\n', '        public \n', '    {\n', '        periodPercent = _periodPercent;\n', '    }\n', '\n', '    function release() public {\n', '        require(vestingHasStarted, &#39;vesting has not started&#39;);\n', '        uint unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0, &#39;released amount has to be greter than zero&#39;);\n', '        require(token.transfer(beneficiary, unreleased), &#39;revert on transfer failure&#39;);\n', '        released = released.add(unreleased);\n', '        emit Released(unreleased);\n', '    }\n', '\n', '\n', '    function releasableAmount() public view returns (uint _amount) {\n', '        _amount = vestedAmount().sub(released);\n', '    }\n', '\n', '    function vestedAmount() public view returns (uint _amount) {\n', '        uint currentBalance = token.balanceOf(this);\n', '        uint totalBalance = currentBalance.add(released);\n', '\n', '        if (now < cliff || !vestingHasStarted) {\n', '            _amount = 0;\n', '        }\n', '        else if (now.sub(cliff).div(vestingPeriod).mul(periodPercent) > 100) {\n', '            _amount = totalBalance;\n', '        }\n', '        else {\n', '            _amount = totalBalance.mul(now.sub(cliff).div(vestingPeriod).mul(periodPercent)).div(100);\n', '        }\n', '    }\n', '\n', '    \n', '\n', '}\n', '\n', 'contract TokenVestingWithFloatingPercent is BaseTokenVesting {\n', '\t\n', '    uint[] public periodPercents;\n', '\n', '    constructor(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint[] _periodPercents\n', '    ) \n', '        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\n', '        public \n', '    {\n', '        uint sum = 0;\n', '        for (uint i = 0; i < _periodPercents.length; i++) {\n', '            sum = sum.add(_periodPercents[i]);\n', '        }\n', '        require(sum == 100, &#39;percentage sum must be equal to 100&#39;);\n', '\n', '        periodPercents = _periodPercents;\n', '    }\n', '\n', '    function release() public {\n', '        require(vestingHasStarted, &#39;vesting has not started&#39;);\n', '        uint unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0, &#39;released amount has to be greter than zero&#39;);\n', '        require(token.transfer(beneficiary, unreleased), &#39;revert on transfer failure&#39;);\n', '        released = released.add(unreleased);\n', '        emit Released(unreleased);\t\n', '    }\n', '\n', '    function releasableAmount() public view returns (uint _amount) {\n', '        _amount = vestedAmount().sub(released);\n', '    }\n', '\n', '    function vestedAmount() public view returns (uint _amount) {\n', '        uint currentBalance = token.balanceOf(this);\n', '        uint totalBalance = currentBalance.add(released);\n', '\n', '        if (now < cliff || !vestingHasStarted) {\n', '            _amount = 0;\n', '        }\n', '        else {\n', '            uint _periodPercentsIndex = now.sub(cliff).div(vestingPeriod);\n', '            if (_periodPercentsIndex > periodPercents.length.sub(1)) {\n', '                _amount = totalBalance;\n', '            }\n', '            else {\n', '                if (_periodPercentsIndex >= 1) {\n', '                    uint totalPercent = 0;\n', '                    for (uint i = 0; i < _periodPercentsIndex - 1; i++) {\n', '                        totalPercent = totalPercent + periodPercents[i];\n', '                    }\n', '                    _amount = totalBalance.mul(totalPercent).div(100);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract TokenVestingFactory is Ownable() {\n', '    event VestingContractCreated(address indexed _creator, address indexed _contract);\n', '\n', '    mapping(address => address) public investorToVesting;\n', '\n', '    function createVestingContractWithConstantPercent(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint _periodPercent\n', '\t)\n', '\tpublic\n', '    onlyOwner\n', '\treturns (address vestingContract)\n', '\t{\t\t\n', '        vestingContract = new TokenVestingWithConstantPercent(\n', '\t\t\t_benificiary,\n', '\t\t\t_cliff,\n', '\t\t\t_vestingPeriod,\n', '\t\t\t_tokenAddress,\n', '\t\t\t_periodPercent\n', '        );\n', '        investorToVesting[_benificiary] = vestingContract;\n', '        emit VestingContractCreated(tx.origin, vestingContract);\n', '    }\n', '\n', '    function createVestingContractWithFloatingPercent(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint[] _periodPercents\t\n', '\t)\n', '\tpublic\n', '    onlyOwner\n', '\treturns (address vestingContract) \n', '\t{\n', '        vestingContract = new TokenVestingWithFloatingPercent(\n', '            _benificiary, \n', '            _cliff,\n', '            _vestingPeriod,\n', '            _tokenAddress,\n', '            _periodPercents\n', '        );\n', '        investorToVesting[_benificiary] = vestingContract;\n', '        emit VestingContractCreated(tx.origin, vestingContract);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '// Developed by Phenom.Team <info@phenom.team>\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) view returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) view returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = tx.origin;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'ownership is required');\n", '        _;\n', '    }\n', '}\n', '\n', 'contract BaseTokenVesting is Ownable() {\n', '    using SafeMath for uint;\n', '\n', '    address public beneficiary;\n', '    ERC20 public token;\n', '\n', '    bool public vestingHasStarted;\n', '    uint public start;\n', '    uint public cliff;\n', '    uint public vestingPeriod;\n', '\n', '    uint public released;\n', '\n', '    event Released(uint _amount);\n', '\n', '    constructor(\n', '\t\taddress _benificiary,\n', '\t\tuint _cliff,\n', '\t\tuint _vestingPeriod,\n', '\t\taddress _token\n', '\t) internal \n', '\t{\n', "        require(_benificiary != address(0), 'can not send to zero-address');\n", '\n', '        beneficiary = _benificiary;\n', '        cliff = _cliff;\n', '        vestingPeriod = _vestingPeriod;\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    function startVesting() public onlyOwner {\n', '        vestingHasStarted = true;\n', '        start = now;\n', '        cliff = cliff.add(start);\n', '    }\n', '\n', '    function sendTokens(address _to, uint _amount) public onlyOwner {\n', "        require(vestingHasStarted == false, 'send tokens only if vesting has not been started');\n", "        require(token.transfer(_to, _amount), 'token.transfer has failed');\n", '    }\n', '\n', '    function release() public;\n', '\n', '    function releasableAmount() public view returns (uint _amount);\n', '\n', '    function vestedAmount() public view returns (uint _amount);\n', '}\n', '\n', 'contract TokenVestingWithConstantPercent is BaseTokenVesting {\n', '\n', '    uint public periodPercent;\n', '\n', '    constructor(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint _periodPercent\n', '    ) \n', '        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\n', '        public \n', '    {\n', '        periodPercent = _periodPercent;\n', '    }\n', '\n', '    function release() public {\n', "        require(vestingHasStarted, 'vesting has not started');\n", '        uint unreleased = releasableAmount();\n', '\n', "        require(unreleased > 0, 'released amount has to be greter than zero');\n", "        require(token.transfer(beneficiary, unreleased), 'revert on transfer failure');\n", '        released = released.add(unreleased);\n', '        emit Released(unreleased);\n', '    }\n', '\n', '\n', '    function releasableAmount() public view returns (uint _amount) {\n', '        _amount = vestedAmount().sub(released);\n', '    }\n', '\n', '    function vestedAmount() public view returns (uint _amount) {\n', '        uint currentBalance = token.balanceOf(this);\n', '        uint totalBalance = currentBalance.add(released);\n', '\n', '        if (now < cliff || !vestingHasStarted) {\n', '            _amount = 0;\n', '        }\n', '        else if (now.sub(cliff).div(vestingPeriod).mul(periodPercent) > 100) {\n', '            _amount = totalBalance;\n', '        }\n', '        else {\n', '            _amount = totalBalance.mul(now.sub(cliff).div(vestingPeriod).mul(periodPercent)).div(100);\n', '        }\n', '    }\n', '\n', '    \n', '\n', '}\n', '\n', 'contract TokenVestingWithFloatingPercent is BaseTokenVesting {\n', '\t\n', '    uint[] public periodPercents;\n', '\n', '    constructor(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint[] _periodPercents\n', '    ) \n', '        BaseTokenVesting(_benificiary, _cliff, _vestingPeriod, _tokenAddress)\n', '        public \n', '    {\n', '        uint sum = 0;\n', '        for (uint i = 0; i < _periodPercents.length; i++) {\n', '            sum = sum.add(_periodPercents[i]);\n', '        }\n', "        require(sum == 100, 'percentage sum must be equal to 100');\n", '\n', '        periodPercents = _periodPercents;\n', '    }\n', '\n', '    function release() public {\n', "        require(vestingHasStarted, 'vesting has not started');\n", '        uint unreleased = releasableAmount();\n', '\n', "        require(unreleased > 0, 'released amount has to be greter than zero');\n", "        require(token.transfer(beneficiary, unreleased), 'revert on transfer failure');\n", '        released = released.add(unreleased);\n', '        emit Released(unreleased);\t\n', '    }\n', '\n', '    function releasableAmount() public view returns (uint _amount) {\n', '        _amount = vestedAmount().sub(released);\n', '    }\n', '\n', '    function vestedAmount() public view returns (uint _amount) {\n', '        uint currentBalance = token.balanceOf(this);\n', '        uint totalBalance = currentBalance.add(released);\n', '\n', '        if (now < cliff || !vestingHasStarted) {\n', '            _amount = 0;\n', '        }\n', '        else {\n', '            uint _periodPercentsIndex = now.sub(cliff).div(vestingPeriod);\n', '            if (_periodPercentsIndex > periodPercents.length.sub(1)) {\n', '                _amount = totalBalance;\n', '            }\n', '            else {\n', '                if (_periodPercentsIndex >= 1) {\n', '                    uint totalPercent = 0;\n', '                    for (uint i = 0; i < _periodPercentsIndex - 1; i++) {\n', '                        totalPercent = totalPercent + periodPercents[i];\n', '                    }\n', '                    _amount = totalBalance.mul(totalPercent).div(100);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract TokenVestingFactory is Ownable() {\n', '    event VestingContractCreated(address indexed _creator, address indexed _contract);\n', '\n', '    mapping(address => address) public investorToVesting;\n', '\n', '    function createVestingContractWithConstantPercent(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint _periodPercent\n', '\t)\n', '\tpublic\n', '    onlyOwner\n', '\treturns (address vestingContract)\n', '\t{\t\t\n', '        vestingContract = new TokenVestingWithConstantPercent(\n', '\t\t\t_benificiary,\n', '\t\t\t_cliff,\n', '\t\t\t_vestingPeriod,\n', '\t\t\t_tokenAddress,\n', '\t\t\t_periodPercent\n', '        );\n', '        investorToVesting[_benificiary] = vestingContract;\n', '        emit VestingContractCreated(tx.origin, vestingContract);\n', '    }\n', '\n', '    function createVestingContractWithFloatingPercent(\n', '        address _benificiary,\n', '        uint _cliff,\n', '        uint _vestingPeriod,\n', '        address _tokenAddress,\n', '        uint[] _periodPercents\t\n', '\t)\n', '\tpublic\n', '    onlyOwner\n', '\treturns (address vestingContract) \n', '\t{\n', '        vestingContract = new TokenVestingWithFloatingPercent(\n', '            _benificiary, \n', '            _cliff,\n', '            _vestingPeriod,\n', '            _tokenAddress,\n', '            _periodPercents\n', '        );\n', '        investorToVesting[_benificiary] = vestingContract;\n', '        emit VestingContractCreated(tx.origin, vestingContract);\n', '    }\n', '}']
