['pragma solidity ^0.4.18;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        assert(a == b * c);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a - b;\n', '        assert(b <= a);\n', '        assert(a == c + b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        assert(a == c - b);\n', '        return c;\n', '    }\n', '}\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract UTOToken {\n', '    // Public variables of the token\n', '    string public name="UTour";\n', '    string public symbol="UTO";\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply=3 * 10 ** 26;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    // function UTOToken() public {\n', '    constructor () public {\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '       // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {   \n', '        // Check allowance\n', '        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = SafeMath.add(allowance[msg.sender][_spender], _addedValue);\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    } \n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowance[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowance[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) { \n', '        // Subtract from the sender \n', '        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value); \n', '        // Updates totalSupply         \n', '        totalSupply = SafeMath.sub(totalSupply, _value);                    \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {  \n', '        // Subtract from the targeted balance\n', '        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);  \n', "        // Subtract from the sender's allowance\n", '        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\n', '        // Update totalSupply         \n', '        totalSupply = SafeMath.sub(totalSupply, _value);                           \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']