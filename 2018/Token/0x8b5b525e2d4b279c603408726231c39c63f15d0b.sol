['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EthbetToken\n', ' */\n', 'contract EthbetToken is StandardToken {\n', '\n', '  string public constant name = "Ethbet";\n', '  string public constant symbol = "EBET";\n', '  uint8 public constant decimals = 2; // only two deciminals, token cannot be divided past 1/100th\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000; // 10 million + 2 decimals\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function EthbetToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '}\n', '\n', '\n', '// Import newer SafeMath version under new name to avoid conflict with the version included in EthbetToken\n', '\n', '// SafeMath Library https://github.com/OpenZeppelin/zeppelin-solidity/blob/49b42e86963df7192e7024e0e5bd30fa9d7ccbef/contracts/math/SafeMath.sol\n', '\n', '\n', 'library SafeMath2 {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ethbet {\n', '  using SafeMath2 for uint256;\n', '\n', '  /*\n', '  * Events\n', '  */\n', '\n', '  event Deposit(address indexed user, uint amount, uint balance);\n', '\n', '  event Withdraw(address indexed user, uint amount, uint balance);\n', '\n', '  event LockedBalance(address indexed user, uint amount);\n', '\n', '  event UnlockedBalance(address indexed user, uint amount);\n', '\n', '  event ExecutedBet(address indexed winner, address indexed loser, uint amount);\n', '\n', '  event RelayAddressChanged(address relay);\n', '\n', '\n', '  /*\n', '   * Storage\n', '   */\n', '  address public relay;\n', '\n', '  EthbetToken public token;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => uint256) lockedBalances;\n', '\n', '  /*\n', '  * Modifiers\n', '  */\n', '\n', '  modifier isRelay() {\n', '    require(msg.sender == relay);\n', '    _;\n', '  }\n', '\n', '  /*\n', '  * Public functions\n', '  */\n', '\n', '  /**\n', '  * @dev Contract constructor\n', '  * @param _relay Relay Address\n', '  * @param _tokenAddress Ethbet Token Address\n', '  */\n', '  function Ethbet(address _relay, address _tokenAddress) public {\n', '    // make sure relay address set\n', '    require(_relay != address(0));\n', '\n', '    relay = _relay;\n', '    token = EthbetToken(_tokenAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev set relay address\n', '  * @param _relay Relay Address\n', '  */\n', '  function setRelay(address _relay) public isRelay {\n', '    // make sure address not null\n', '    require(_relay != address(0));\n', '\n', '    relay = _relay;\n', '\n', '    RelayAddressChanged(_relay);\n', '  }\n', '\n', '  /**\n', '   * @dev deposit EBET tokens into the contract\n', '   * @param _amount Amount to deposit\n', '   */\n', '  function deposit(uint _amount) public {\n', '    require(_amount > 0);\n', '\n', '    // token.approve needs to be called beforehand\n', '    // transfer tokens from the user to the contract\n', '    require(token.transferFrom(msg.sender, this, _amount));\n', '\n', '    // add the tokens to the user&#39;s balance\n', '    balances[msg.sender] = balances[msg.sender].add(_amount);\n', '\n', '    Deposit(msg.sender, _amount, balances[msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw EBET tokens from the contract\n', '   * @param _amount Amount to withdraw\n', '   */\n', '  function withdraw(uint _amount) public {\n', '    require(_amount > 0);\n', '    require(balances[msg.sender] >= _amount);\n', '\n', '    // subtract the tokens from the user&#39;s balance\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '    // transfer tokens from the contract to the user\n', '    require(token.transfer(msg.sender, _amount));\n', '\n', '    Withdraw(msg.sender, _amount, balances[msg.sender]);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Lock user balance to be used for bet\n', '   * @param _userAddress User Address\n', '   * @param _amount Amount to be locked\n', '   */\n', '  function lockBalance(address _userAddress, uint _amount) public isRelay {\n', '    require(_amount > 0);\n', '    require(balances[_userAddress] >= _amount);\n', '\n', '    // subtract the tokens from the user&#39;s balance\n', '    balances[_userAddress] = balances[_userAddress].sub(_amount);\n', '\n', '    // add the tokens to the user&#39;s locked balance\n', '    lockedBalances[_userAddress] = lockedBalances[_userAddress].add(_amount);\n', '\n', '    LockedBalance(_userAddress, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Unlock user balance\n', '   * @param _userAddress User Address\n', '   * @param _amount Amount to be locked\n', '   */\n', '  function unlockBalance(address _userAddress, uint _amount) public isRelay {\n', '    require(_amount > 0);\n', '    require(lockedBalances[_userAddress] >= _amount);\n', '\n', '    // subtract the tokens from the user&#39;s locked balance\n', '    lockedBalances[_userAddress] = lockedBalances[_userAddress].sub(_amount);\n', '\n', '    // add the tokens to the user&#39;s  balance\n', '    balances[_userAddress] = balances[_userAddress].add(_amount);\n', '\n', '    UnlockedBalance(_userAddress, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Get user balance\n', '  * @param _userAddress User Address\n', '  */\n', '  function balanceOf(address _userAddress) constant public returns (uint) {\n', '    return balances[_userAddress];\n', '  }\n', '\n', '  /**\n', '  * @dev Get user locked balance\n', '  * @param _userAddress User Address\n', '  */\n', '  function lockedBalanceOf(address _userAddress) constant public returns (uint) {\n', '    return lockedBalances[_userAddress];\n', '  }\n', '\n', '  /**\n', '   * @dev Execute bet\n', '   * @param _maker Maker Address\n', '   * @param _caller Caller Address\n', '   * @param _makerWon Did the maker win\n', '   * @param _amount amount\n', '   */\n', '  function executeBet(address _maker, address _caller, bool _makerWon, uint _amount) isRelay public {\n', '    //The caller must have enough balance\n', '    require(balances[_caller] >= _amount);\n', '\n', '    //The maker must have enough locked balance\n', '    require(lockedBalances[_maker] >= _amount);\n', '\n', '    // unlock maker balance\n', '    unlockBalance(_maker, _amount);\n', '\n', '    var winner = _makerWon ? _maker : _caller;\n', '    var loser = _makerWon ? _caller : _maker;\n', '\n', '    // add the tokens to the winner&#39;s balance\n', '    balances[winner] = balances[winner].add(_amount);\n', '    // remove the tokens from the loser&#39;s  balance\n', '    balances[loser] = balances[loser].sub(_amount);\n', '\n', '    //Log the event\n', '    ExecutedBet(winner, loser, _amount);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EthbetToken\n', ' */\n', 'contract EthbetToken is StandardToken {\n', '\n', '  string public constant name = "Ethbet";\n', '  string public constant symbol = "EBET";\n', '  uint8 public constant decimals = 2; // only two deciminals, token cannot be divided past 1/100th\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000; // 10 million + 2 decimals\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function EthbetToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '}\n', '\n', '\n', '// Import newer SafeMath version under new name to avoid conflict with the version included in EthbetToken\n', '\n', '// SafeMath Library https://github.com/OpenZeppelin/zeppelin-solidity/blob/49b42e86963df7192e7024e0e5bd30fa9d7ccbef/contracts/math/SafeMath.sol\n', '\n', '\n', 'library SafeMath2 {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ethbet {\n', '  using SafeMath2 for uint256;\n', '\n', '  /*\n', '  * Events\n', '  */\n', '\n', '  event Deposit(address indexed user, uint amount, uint balance);\n', '\n', '  event Withdraw(address indexed user, uint amount, uint balance);\n', '\n', '  event LockedBalance(address indexed user, uint amount);\n', '\n', '  event UnlockedBalance(address indexed user, uint amount);\n', '\n', '  event ExecutedBet(address indexed winner, address indexed loser, uint amount);\n', '\n', '  event RelayAddressChanged(address relay);\n', '\n', '\n', '  /*\n', '   * Storage\n', '   */\n', '  address public relay;\n', '\n', '  EthbetToken public token;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => uint256) lockedBalances;\n', '\n', '  /*\n', '  * Modifiers\n', '  */\n', '\n', '  modifier isRelay() {\n', '    require(msg.sender == relay);\n', '    _;\n', '  }\n', '\n', '  /*\n', '  * Public functions\n', '  */\n', '\n', '  /**\n', '  * @dev Contract constructor\n', '  * @param _relay Relay Address\n', '  * @param _tokenAddress Ethbet Token Address\n', '  */\n', '  function Ethbet(address _relay, address _tokenAddress) public {\n', '    // make sure relay address set\n', '    require(_relay != address(0));\n', '\n', '    relay = _relay;\n', '    token = EthbetToken(_tokenAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev set relay address\n', '  * @param _relay Relay Address\n', '  */\n', '  function setRelay(address _relay) public isRelay {\n', '    // make sure address not null\n', '    require(_relay != address(0));\n', '\n', '    relay = _relay;\n', '\n', '    RelayAddressChanged(_relay);\n', '  }\n', '\n', '  /**\n', '   * @dev deposit EBET tokens into the contract\n', '   * @param _amount Amount to deposit\n', '   */\n', '  function deposit(uint _amount) public {\n', '    require(_amount > 0);\n', '\n', '    // token.approve needs to be called beforehand\n', '    // transfer tokens from the user to the contract\n', '    require(token.transferFrom(msg.sender, this, _amount));\n', '\n', "    // add the tokens to the user's balance\n", '    balances[msg.sender] = balances[msg.sender].add(_amount);\n', '\n', '    Deposit(msg.sender, _amount, balances[msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw EBET tokens from the contract\n', '   * @param _amount Amount to withdraw\n', '   */\n', '  function withdraw(uint _amount) public {\n', '    require(_amount > 0);\n', '    require(balances[msg.sender] >= _amount);\n', '\n', "    // subtract the tokens from the user's balance\n", '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '    // transfer tokens from the contract to the user\n', '    require(token.transfer(msg.sender, _amount));\n', '\n', '    Withdraw(msg.sender, _amount, balances[msg.sender]);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Lock user balance to be used for bet\n', '   * @param _userAddress User Address\n', '   * @param _amount Amount to be locked\n', '   */\n', '  function lockBalance(address _userAddress, uint _amount) public isRelay {\n', '    require(_amount > 0);\n', '    require(balances[_userAddress] >= _amount);\n', '\n', "    // subtract the tokens from the user's balance\n", '    balances[_userAddress] = balances[_userAddress].sub(_amount);\n', '\n', "    // add the tokens to the user's locked balance\n", '    lockedBalances[_userAddress] = lockedBalances[_userAddress].add(_amount);\n', '\n', '    LockedBalance(_userAddress, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Unlock user balance\n', '   * @param _userAddress User Address\n', '   * @param _amount Amount to be locked\n', '   */\n', '  function unlockBalance(address _userAddress, uint _amount) public isRelay {\n', '    require(_amount > 0);\n', '    require(lockedBalances[_userAddress] >= _amount);\n', '\n', "    // subtract the tokens from the user's locked balance\n", '    lockedBalances[_userAddress] = lockedBalances[_userAddress].sub(_amount);\n', '\n', "    // add the tokens to the user's  balance\n", '    balances[_userAddress] = balances[_userAddress].add(_amount);\n', '\n', '    UnlockedBalance(_userAddress, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Get user balance\n', '  * @param _userAddress User Address\n', '  */\n', '  function balanceOf(address _userAddress) constant public returns (uint) {\n', '    return balances[_userAddress];\n', '  }\n', '\n', '  /**\n', '  * @dev Get user locked balance\n', '  * @param _userAddress User Address\n', '  */\n', '  function lockedBalanceOf(address _userAddress) constant public returns (uint) {\n', '    return lockedBalances[_userAddress];\n', '  }\n', '\n', '  /**\n', '   * @dev Execute bet\n', '   * @param _maker Maker Address\n', '   * @param _caller Caller Address\n', '   * @param _makerWon Did the maker win\n', '   * @param _amount amount\n', '   */\n', '  function executeBet(address _maker, address _caller, bool _makerWon, uint _amount) isRelay public {\n', '    //The caller must have enough balance\n', '    require(balances[_caller] >= _amount);\n', '\n', '    //The maker must have enough locked balance\n', '    require(lockedBalances[_maker] >= _amount);\n', '\n', '    // unlock maker balance\n', '    unlockBalance(_maker, _amount);\n', '\n', '    var winner = _makerWon ? _maker : _caller;\n', '    var loser = _makerWon ? _caller : _maker;\n', '\n', "    // add the tokens to the winner's balance\n", '    balances[winner] = balances[winner].add(_amount);\n', "    // remove the tokens from the loser's  balance\n", '    balances[loser] = balances[loser].sub(_amount);\n', '\n', '    //Log the event\n', '    ExecutedBet(winner, loser, _amount);\n', '  }\n', '\n', '}']
