['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '   @title ERC827 interface, an extension of ERC20 token standard\n', '   Interface of a ERC827 token, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '\n', '  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n', '  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n', '  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n', '\n', '}\n', '\n', '/**\n', '   @title ERC827, an extension of ERC20 token standard\n', '   Implementation the ERC827, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', '   Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. It allows to\n', '     approve the transfer of value and execute a call with the sent data.\n', '     Beware that changing an allowance with this method brings the risk that\n', '     someone may use both the old and the new allowance by unfortunate\n', '     transaction ordering. One possible solution to mitigate this race condition\n', '     is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '     afterwards:\n', '     https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     @param _spender The address that will spend the funds.\n', '     @param _value The amount of tokens to be spent.\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     address and execute a call with the sent data on the same transaction\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amout of tokens to be transfered\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     another and make a contract call on the same transaction\n', '     @param _from The address which you want to send tokens from\n', '     @param _to The address which you want to transfer to\n', '     @param _value The amout of tokens to be transferred\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC827Token modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is ERC827Token, Pausable {\n', '\n', '  // ERC20\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '  \n', '  // ERC827\n', '  function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.transfer(_to, _value, _data);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '      return super.transferFrom(_from, _to, _value, _data);\n', '  }\n', '  \n', '  function approve(address _spender, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.approve(_spender, _value, _data);\n', '  }\n', '  \n', '  function increaseApproval(address _spender, uint _addedValue, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.increaseApproval(_spender, _addedValue, _data);\n', '  }\n', '  \n', '  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.decreaseApproval(_spender, _subtractedValue, _data);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is PausableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract AirEX is MintableToken {\n', '  string public constant name = "AIRX";\n', '  string public constant symbol = "AIRX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public hardCap;\n', '  uint256 public softCap;\n', '\n', '  function AirEX(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    hardCap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= hardCap);\n', '    return super.mint(_to, _amount);\n', '  }\n', '  \n', '  function updateHardCap(uint256 _cap) onlyOwner public {\n', '    require(_cap > 0);\n', '    hardCap = _cap;\n', '  }\n', '  \n', '  function updateSoftCap(uint256 _cap) onlyOwner public {\n', '    require(_cap > 0);\n', '    softCap = _cap;  \n', '  }\n', '\n', '}\n', '\n', 'contract SalesManagerUpgradable is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '/* SZ: Change here to collection address before deploy */\n', '    address public ethOwner = 0xe8290a10565CB7aDeE9246661B34BB77CB6e4024;\n', '/* SZ: price1..3 in AIRX per 1 ETH */\n', '    uint public price1 = 100;\n', '    uint public price2 = 110;\n', '    uint public price3 = 125;\n', '\n', '/* SZ: lev1..2 in ETH */\n', '    uint public lev1 = 2 ether;\n', '    uint public lev2 = 10 ether;\n', '    \n', '    uint public ethFundRaised;\n', '    \n', '    address public tokenAddress;\n', '\n', '/* SZ: AIRX constructor with HardCap in AIRX tokens */\n', '    function SalesManagerUpgradable () public {\n', '        tokenAddress = new AirEX(5550000 ether);\n', '    }\n', '\n', '    function () payable public {\n', '        if(msg.value > 0) revert();\n', '    }\n', '\n', '    function buyTokens(address _investor) public payable returns (bool){\n', '        if (msg.value <= lev1) {\n', '            uint tokens = msg.value.mul(price1);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        } else if (msg.value > lev1 && msg.value <= lev2) {\n', '            tokens = msg.value.mul(price2);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        } else if (msg.value > lev2) {\n', '            tokens = msg.value.mul(price3);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function sendTokens(uint _amount, uint _ethers, address _investor) private returns (bool) {\n', '        AirEX tokenHolder = AirEX(tokenAddress);\n', '        if (tokenHolder.mint(_investor, _amount)) {\n', '            ethFundRaised = ethFundRaised.add(_ethers);\n', '            ethOwner.transfer(_ethers);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function generateTokensManually(uint _amount, address _to) public onlyOwner {\n', '        AirEX tokenHolder = AirEX(tokenAddress);\n', '        tokenHolder.mint(_to, _amount);\n', '    }\n', '    \n', '    function setColdAddress(address _newAddr) public onlyOwner {\n', '        ethOwner = _newAddr;\n', '    }\n', '    \n', '    function setPrice1 (uint _price) public onlyOwner {\n', '        price1 = _price;\n', '    }\n', '    \n', '    function setPrice2 (uint _price) public onlyOwner {\n', '        price2 = _price;\n', '    }\n', '    \n', '    function setPrice3 (uint _price) public onlyOwner {\n', '        price3 = _price;\n', '    }\n', '\n', '/* SZ: Functions setLev1, setLev2 to change levels of prices*/\n', '/* SZ: lev1..2 send as for example "2000000000000000000" for 2 ETH */\n', '    function setLev1 (uint _price) public onlyOwner {\n', '        lev1 = _price;\n', '    }\n', '\n', '    function setLev2 (uint _price) public onlyOwner {\n', '        lev2 = _price;\n', '    }\n', '    \n', '    function transferOwnershipToken(address newTokenOwnerAddress) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.transferOwnership(newTokenOwnerAddress);\n', '    }\n', '    \n', '    function updateHardCap(uint256 _cap) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.updateHardCap(_cap);\n', '    }\n', '    \n', '    function updateSoftCap(uint256 _cap) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.updateSoftCap(_cap);\n', '    }\n', '    \n', '    function unPauseContract() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.unpause();\n', '    }\n', '    \n', '    function pauseContract() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.pause();\n', '    }\n', '    \n', '    function finishMinting() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.finishMinting();\n', '    }\n', '    \n', '    function drop(address[] _destinations, uint256[] _amount) onlyOwner public\n', '    returns (uint) {\n', '        uint i = 0;\n', '        while (i < _destinations.length) {\n', '           AirEX(tokenAddress).mint(_destinations[i], _amount[i]);\n', '           i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '    \n', '    function withdraw(address _to) public onlyOwner {\n', '        _to.transfer(this.balance);\n', '    }\n', '    \n', '    function destroySalesManager(address _recipient) public onlyOwner {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', '\n', 'contract DepositManager is Ownable {\n', '    address public actualSalesAddress;\n', '    \n', '    function DepositManager (address _actualAddres) public {\n', '        actualSalesAddress = _actualAddres;\n', '    }\n', '    \n', '    function () payable public {\n', '        SalesManagerUpgradable sm = SalesManagerUpgradable(actualSalesAddress);\n', '        if(!sm.buyTokens.value(msg.value)(msg.sender)) revert();\n', '    }\n', '    \n', '    function setNewSalesManager (address _newAddr) public onlyOwner {\n', '        actualSalesAddress = _newAddr;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = true;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '   @title ERC827 interface, an extension of ERC20 token standard\n', '   Interface of a ERC827 token, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '\n', '  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n', '  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n', '  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n', '\n', '}\n', '\n', '/**\n', '   @title ERC827, an extension of ERC20 token standard\n', '   Implementation the ERC827, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', '   Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. It allows to\n', '     approve the transfer of value and execute a call with the sent data.\n', '     Beware that changing an allowance with this method brings the risk that\n', '     someone may use both the old and the new allowance by unfortunate\n', '     transaction ordering. One possible solution to mitigate this race condition\n', "     is to first reduce the spender's allowance to 0 and set the desired value\n", '     afterwards:\n', '     https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     @param _spender The address that will spend the funds.\n', '     @param _value The amount of tokens to be spent.\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     address and execute a call with the sent data on the same transaction\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amout of tokens to be transfered\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     another and make a contract call on the same transaction\n', '     @param _from The address which you want to send tokens from\n', '     @param _to The address which you want to transfer to\n', '     @param _value The amout of tokens to be transferred\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC827Token modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is ERC827Token, Pausable {\n', '\n', '  // ERC20\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '  \n', '  // ERC827\n', '  function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.transfer(_to, _value, _data);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '      return super.transferFrom(_from, _to, _value, _data);\n', '  }\n', '  \n', '  function approve(address _spender, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.approve(_spender, _value, _data);\n', '  }\n', '  \n', '  function increaseApproval(address _spender, uint _addedValue, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.increaseApproval(_spender, _addedValue, _data);\n', '  }\n', '  \n', '  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public whenNotPaused returns (bool) {\n', '      return super.decreaseApproval(_spender, _subtractedValue, _data);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is PausableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract AirEX is MintableToken {\n', '  string public constant name = "AIRX";\n', '  string public constant symbol = "AIRX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public hardCap;\n', '  uint256 public softCap;\n', '\n', '  function AirEX(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    hardCap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= hardCap);\n', '    return super.mint(_to, _amount);\n', '  }\n', '  \n', '  function updateHardCap(uint256 _cap) onlyOwner public {\n', '    require(_cap > 0);\n', '    hardCap = _cap;\n', '  }\n', '  \n', '  function updateSoftCap(uint256 _cap) onlyOwner public {\n', '    require(_cap > 0);\n', '    softCap = _cap;  \n', '  }\n', '\n', '}\n', '\n', 'contract SalesManagerUpgradable is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '/* SZ: Change here to collection address before deploy */\n', '    address public ethOwner = 0xe8290a10565CB7aDeE9246661B34BB77CB6e4024;\n', '/* SZ: price1..3 in AIRX per 1 ETH */\n', '    uint public price1 = 100;\n', '    uint public price2 = 110;\n', '    uint public price3 = 125;\n', '\n', '/* SZ: lev1..2 in ETH */\n', '    uint public lev1 = 2 ether;\n', '    uint public lev2 = 10 ether;\n', '    \n', '    uint public ethFundRaised;\n', '    \n', '    address public tokenAddress;\n', '\n', '/* SZ: AIRX constructor with HardCap in AIRX tokens */\n', '    function SalesManagerUpgradable () public {\n', '        tokenAddress = new AirEX(5550000 ether);\n', '    }\n', '\n', '    function () payable public {\n', '        if(msg.value > 0) revert();\n', '    }\n', '\n', '    function buyTokens(address _investor) public payable returns (bool){\n', '        if (msg.value <= lev1) {\n', '            uint tokens = msg.value.mul(price1);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        } else if (msg.value > lev1 && msg.value <= lev2) {\n', '            tokens = msg.value.mul(price2);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        } else if (msg.value > lev2) {\n', '            tokens = msg.value.mul(price3);\n', '            if (!sendTokens(tokens, msg.value, _investor)) revert();\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function sendTokens(uint _amount, uint _ethers, address _investor) private returns (bool) {\n', '        AirEX tokenHolder = AirEX(tokenAddress);\n', '        if (tokenHolder.mint(_investor, _amount)) {\n', '            ethFundRaised = ethFundRaised.add(_ethers);\n', '            ethOwner.transfer(_ethers);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function generateTokensManually(uint _amount, address _to) public onlyOwner {\n', '        AirEX tokenHolder = AirEX(tokenAddress);\n', '        tokenHolder.mint(_to, _amount);\n', '    }\n', '    \n', '    function setColdAddress(address _newAddr) public onlyOwner {\n', '        ethOwner = _newAddr;\n', '    }\n', '    \n', '    function setPrice1 (uint _price) public onlyOwner {\n', '        price1 = _price;\n', '    }\n', '    \n', '    function setPrice2 (uint _price) public onlyOwner {\n', '        price2 = _price;\n', '    }\n', '    \n', '    function setPrice3 (uint _price) public onlyOwner {\n', '        price3 = _price;\n', '    }\n', '\n', '/* SZ: Functions setLev1, setLev2 to change levels of prices*/\n', '/* SZ: lev1..2 send as for example "2000000000000000000" for 2 ETH */\n', '    function setLev1 (uint _price) public onlyOwner {\n', '        lev1 = _price;\n', '    }\n', '\n', '    function setLev2 (uint _price) public onlyOwner {\n', '        lev2 = _price;\n', '    }\n', '    \n', '    function transferOwnershipToken(address newTokenOwnerAddress) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.transferOwnership(newTokenOwnerAddress);\n', '    }\n', '    \n', '    function updateHardCap(uint256 _cap) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.updateHardCap(_cap);\n', '    }\n', '    \n', '    function updateSoftCap(uint256 _cap) public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.updateSoftCap(_cap);\n', '    }\n', '    \n', '    function unPauseContract() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.unpause();\n', '    }\n', '    \n', '    function pauseContract() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.pause();\n', '    }\n', '    \n', '    function finishMinting() public onlyOwner {\n', '        AirEX tokenContract = AirEX(tokenAddress);\n', '        tokenContract.finishMinting();\n', '    }\n', '    \n', '    function drop(address[] _destinations, uint256[] _amount) onlyOwner public\n', '    returns (uint) {\n', '        uint i = 0;\n', '        while (i < _destinations.length) {\n', '           AirEX(tokenAddress).mint(_destinations[i], _amount[i]);\n', '           i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '    \n', '    function withdraw(address _to) public onlyOwner {\n', '        _to.transfer(this.balance);\n', '    }\n', '    \n', '    function destroySalesManager(address _recipient) public onlyOwner {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', '\n', 'contract DepositManager is Ownable {\n', '    address public actualSalesAddress;\n', '    \n', '    function DepositManager (address _actualAddres) public {\n', '        actualSalesAddress = _actualAddres;\n', '    }\n', '    \n', '    function () payable public {\n', '        SalesManagerUpgradable sm = SalesManagerUpgradable(actualSalesAddress);\n', '        if(!sm.buyTokens.value(msg.value)(msg.sender)) revert();\n', '    }\n', '    \n', '    function setNewSalesManager (address _newAddr) public onlyOwner {\n', '        actualSalesAddress = _newAddr;\n', '    }\n', '\n', '}']
