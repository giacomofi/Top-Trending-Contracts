['pragma solidity ^0.4.21;\n', '\n', 'contract KKToken {\n', '  \n', '  //地址 -> 余额 的映射\n', '  mapping (address => uint256) balances;\n', '  //地址 -> 允许代币转移的地址及数量 的映射\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  //这4个状态变量会自动创建对应public函数\n', '  string public name = " Kunkun Token";\n', '  string public symbol = "KKT";\n', '  uint8 public decimals = 18;  //建议的默认值\n', '  uint256 public totalSupply;\n', '\n', '  uint256 public initialSupply = 100000000;\n', '\n', '  //如果ETH被发送到这个合约，会被发送回去\n', '  function (){\n', '    throw;\n', '  }\n', '\n', '  //构造函数，只在合约创建时执行一次\n', '  function KKToken(){\n', '    //实际总供应量 = 代币数量*10^精度\n', '    totalSupply = initialSupply * (10 ** uint256(decimals));\n', '    //把所有代币分配给合约创建者\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  //查询某账户（_owner）的余额\n', '  function balanceOf(address _owner) view returns (uint256 balance){\n', '    return balances[_owner];\n', '  }\n', '\n', '  //向某个地址（_to）发送（_value）个代币\n', '  //发送者调用\n', '  function transfer(address _to, uint256 _value) returns (bool success){\n', '    //检查发送者是否有足够的代币\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { \n', '      return false; \n', '    }\n', '  }\n', '\n', '  //从某个地址（_from）向某个地址（_to）发送（_value）个代币\n', '  //接收者调用\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '    //检查发送者是否有足够的代币\n', '    //检查接收者是否发送者的允许发送范围内，且发送数量也在对应的允许范围内\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { \n', '      return false; \n', '    }\n', '  }\n', '\n', '  //允许某个地址（_spender）从你的账户转移（_value）个代币\n', '  function approve(address _spender, uint256 _value) returns (bool success){\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  //获取（_owner）允许某个地址（_spender）还可以转移多少代币\n', '  function allowance(address _owner, address _spender) view returns (uint256 remaining){\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  //transfer 被调用时的通知事件\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  //approve 被调用时的通知事件\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract KKToken {\n', '  \n', '  //地址 -> 余额 的映射\n', '  mapping (address => uint256) balances;\n', '  //地址 -> 允许代币转移的地址及数量 的映射\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  //这4个状态变量会自动创建对应public函数\n', '  string public name = " Kunkun Token";\n', '  string public symbol = "KKT";\n', '  uint8 public decimals = 18;  //建议的默认值\n', '  uint256 public totalSupply;\n', '\n', '  uint256 public initialSupply = 100000000;\n', '\n', '  //如果ETH被发送到这个合约，会被发送回去\n', '  function (){\n', '    throw;\n', '  }\n', '\n', '  //构造函数，只在合约创建时执行一次\n', '  function KKToken(){\n', '    //实际总供应量 = 代币数量*10^精度\n', '    totalSupply = initialSupply * (10 ** uint256(decimals));\n', '    //把所有代币分配给合约创建者\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  //查询某账户（_owner）的余额\n', '  function balanceOf(address _owner) view returns (uint256 balance){\n', '    return balances[_owner];\n', '  }\n', '\n', '  //向某个地址（_to）发送（_value）个代币\n', '  //发送者调用\n', '  function transfer(address _to, uint256 _value) returns (bool success){\n', '    //检查发送者是否有足够的代币\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { \n', '      return false; \n', '    }\n', '  }\n', '\n', '  //从某个地址（_from）向某个地址（_to）发送（_value）个代币\n', '  //接收者调用\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '    //检查发送者是否有足够的代币\n', '    //检查接收者是否发送者的允许发送范围内，且发送数量也在对应的允许范围内\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { \n', '      return false; \n', '    }\n', '  }\n', '\n', '  //允许某个地址（_spender）从你的账户转移（_value）个代币\n', '  function approve(address _spender, uint256 _value) returns (bool success){\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  //获取（_owner）允许某个地址（_spender）还可以转移多少代币\n', '  function allowance(address _owner, address _spender) view returns (uint256 remaining){\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  //transfer 被调用时的通知事件\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  //approve 被调用时的通知事件\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  \n', '}']
