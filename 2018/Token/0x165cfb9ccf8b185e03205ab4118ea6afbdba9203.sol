['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Upgradable is Ownable, Pausable {\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '\n', '    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n', '    event ContractUpgrade(address newContract);\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', '    ///  emit a message indicating that the new address is set. It&#39;s up to clients of this\n', '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address) external onlyOwner whenPaused {\n', '        require(_v2Address != 0x0);\n', '        newContractAddress = _v2Address;\n', '        emit ContractUpgrade(_v2Address);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract SolidStampRegister is Ownable\n', '{\n', '/// @dev address of the current SolidStamp contract which can add audits\n', '    address public ContractSolidStamp;\n', '\n', '    /// @dev const value to indicate the contract is not audited\n', '    uint8 public constant NOT_AUDITED = 0x00;\n', '\n', '    /// @dev const value to indicate the contract is audited and approved\n', '    uint8 public constant AUDITED_AND_APPROVED = 0x01;\n', '\n', '    /// @dev const value to indicate the contract is audited and rejected\n', '    uint8 public constant AUDITED_AND_REJECTED = 0x02;\n', '\n', '    /// @dev struct representing the audit report and the audit outcome\n', '    struct Audit {\n', '        /// @dev AUDITED_AND_APPROVED or AUDITED_AND_REJECTED\n', '        uint8 outcome;\n', '        /// @dev IPFS hash of the audit report\n', '        bytes reportIPFS;\n', '    }\n', '\n', '    /// @dev Maps auditor and code hash to the Audit struct.\n', '    /// Map key is: keccack256(auditor address, contract codeHash)\n', '    /// @dev codeHash is a sha3 from the contract byte code\n', '    mapping (bytes32 => Audit) public Audits;\n', '\n', '    /// @dev event fired when a contract is sucessfully audited\n', '    event AuditRegistered(address auditor, bytes32 codeHash, bytes reportIPFS, bool isApproved);\n', '\n', '    /// @notice SolidStampRegister constructor\n', '    constructor() public {\n', '    }\n', '\n', '    /// @notice returns the outcome of the audit or NOT_AUDITED (0) if none\n', '    /// @param _auditor audtior address\n', '    /// @param _codeHash contract code-hash\n', '    function getAuditOutcome(address _auditor, bytes32 _codeHash) public view returns (uint8)\n', '    {\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\n', '        return Audits[hashAuditorCode].outcome;\n', '    }\n', '\n', '    /// @notice returns the audit report IPFS of the audit or 0x0 if none\n', '    /// @param _auditor audtior address\n', '    /// @param _codeHash contract code-hash\n', '    function getAuditReportIPFS(address _auditor, bytes32 _codeHash) public view returns (bytes)\n', '    {\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\n', '        return Audits[hashAuditorCode].reportIPFS;\n', '    }\n', '\n', '    /// @notice marks contract as audited\n', '    /// @param _codeHash the code hash of the stamped contract. _codeHash equals to sha3 of the contract byte-code\n', '    /// @param _reportIPFS IPFS hash of the audit report\n', '    /// @param _isApproved whether the contract is approved or rejected\n', '    function registerAudit(bytes32 _codeHash, bytes _reportIPFS, bool _isApproved) public\n', '    {\n', '        require(_codeHash != 0x0, "codeHash cannot be 0x0");\n', '        require(_reportIPFS.length != 0x0, "report IPFS cannot be 0x0");\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(msg.sender, _codeHash));\n', '\n', '        Audit storage audit = Audits[hashAuditorCode];\n', '        require(audit.outcome == NOT_AUDITED, "already audited");\n', '\n', '        if ( _isApproved )\n', '            audit.outcome = AUDITED_AND_APPROVED;\n', '        else\n', '            audit.outcome = AUDITED_AND_REJECTED;\n', '        audit.reportIPFS = _reportIPFS;\n', '        SolidStamp(ContractSolidStamp).auditContract(msg.sender, _codeHash, _reportIPFS, _isApproved);\n', '        emit AuditRegistered(msg.sender, _codeHash, _reportIPFS, _isApproved);\n', '    }\n', '\n', '    /// @notice marks multiple contracts as audited\n', '    /// @param _codeHashes the code hashes of the stamped contracts. each _codeHash equals to sha3 of the contract byte-code\n', '    /// @param _reportIPFS IPFS hash of the audit report\n', '    /// @param _isApproved whether the contracts are approved or rejected\n', '    function registerAudits(bytes32[] _codeHashes, bytes _reportIPFS, bool _isApproved) public\n', '    {\n', '        for(uint i=0; i<_codeHashes.length; i++ )\n', '        {\n', '            registerAudit(_codeHashes[i], _reportIPFS, _isApproved);\n', '        }\n', '    }\n', '\n', '\n', '    event SolidStampContractChanged(address newSolidStamp);\n', '\n', '    /// @dev Transfers SolidStamp contract a _newSolidStamp.\n', '    /// @param _newSolidStamp The address to transfer SolidStamp address to.\n', '    function changeSolidStampContract(address _newSolidStamp) public onlyOwner {\n', '      require(_newSolidStamp != address(0), "SolidStamp contract cannot be 0x0");\n', '      emit SolidStampContractChanged(_newSolidStamp);\n', '      ContractSolidStamp = _newSolidStamp;\n', '    }\n', '\n', '    /// @notice We don&#39;t want your arbitrary ether\n', '    function() payable public {\n', '        revert();\n', '    }    \n', '}\n', '\n', '/// @title The main SolidStamp.com contract\n', 'contract SolidStamp is Ownable, Pausable, Upgradable {\n', '    using SafeMath for uint;\n', '\n', '    /// @dev const value to indicate the contract is audited and approved\n', '    uint8 public constant NOT_AUDITED = 0x00;\n', '\n', '    /// @dev minimum amount of time for an audit request\n', '    uint public constant MIN_AUDIT_TIME = 24 hours;\n', '\n', '    /// @dev maximum amount of time for an audit request\n', '    uint public constant MAX_AUDIT_TIME = 28 days;\n', '\n', '    /// @dev aggregated amount of audit requests\n', '    uint public TotalRequestsAmount = 0;\n', '\n', '    // @dev amount of collected commision available to withdraw\n', '    uint public AvailableCommission = 0;\n', '\n', '    // @dev commission percentage, initially 1%\n', '    uint public Commission = 1;\n', '\n', '    /// @dev event fired when the service commission is changed\n', '    event NewCommission(uint commmission);\n', '\n', '    address public SolidStampRegisterAddress;\n', '\n', '    /// @notice SolidStamp constructor\n', '    constructor(address _addressRegistrySolidStamp) public {\n', '        SolidStampRegisterAddress = _addressRegistrySolidStamp;\n', '    }\n', '\n', '    /// @notice Audit request\n', '    struct AuditRequest {\n', '        // amount of Ethers offered by a particular requestor for an audit\n', '        uint amount;\n', '        // request expiration date\n', '        uint expireDate;\n', '    }\n', '\n', '    /// @dev Maps auditor and code hash to the total reward offered for auditing\n', '    /// the particular contract by the particular auditor.\n', '    /// Map key is: keccack256(auditor address, contract codeHash)\n', '    /// @dev codeHash is a sha3 from the contract byte code\n', '    mapping (bytes32 => uint) public Rewards;\n', '\n', '    /// @dev Maps requestor, auditor and codeHash to an AuditRequest\n', '    /// Map key is: keccack256(auditor address, requestor address, contract codeHash)\n', '    mapping (bytes32 => AuditRequest) public AuditRequests;\n', '\n', '    /// @dev event fired upon successul audit request\n', '    event AuditRequested(address auditor, address bidder, bytes32 codeHash, uint amount, uint expireDate);\n', '    /// @dev event fired when an request is sucessfully withdrawn\n', '    event RequestWithdrawn(address auditor, address bidder, bytes32 codeHash, uint amount);\n', '    /// @dev event fired when a contract is sucessfully audited\n', '    event ContractAudited(address auditor, bytes32 codeHash, bytes reportIPFS, bool isApproved, uint reward);\n', '\n', '    /// @notice registers an audit request\n', '    /// @param _auditor the address of the auditor the request is directed to\n', '    /// @param _codeHash the code hash of the contract to audit. _codeHash equals to sha3 of the contract byte-code\n', '    /// @param _auditTime the amount of time after which the requestor can withdraw the request\n', '    function requestAudit(address _auditor, bytes32 _codeHash, uint _auditTime)\n', '    public whenNotPaused payable\n', '    {\n', '        require(_auditor != 0x0, "_auditor cannot be 0x0");\n', '        // audit request cannot expire too quickly or last too long\n', '        require(_auditTime >= MIN_AUDIT_TIME, "_auditTime should be >= MIN_AUDIT_TIME");\n', '        require(_auditTime <= MAX_AUDIT_TIME, "_auditTime should be <= MIN_AUDIT_TIME");\n', '        require(msg.value > 0, "msg.value should be >0");\n', '\n', '        // revert if the contract is already audited by the auditor\n', '        uint8 outcome = SolidStampRegister(SolidStampRegisterAddress).getAuditOutcome(_auditor, _codeHash);\n', '        require(outcome == NOT_AUDITED, "contract already audited");\n', '\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\n', '        uint currentReward = Rewards[hashAuditorCode];\n', '        uint expireDate = now.add(_auditTime);\n', '        Rewards[hashAuditorCode] = currentReward.add(msg.value);\n', '        TotalRequestsAmount = TotalRequestsAmount.add(msg.value);\n', '\n', '        bytes32 hashAuditorRequestorCode = keccak256(abi.encodePacked(_auditor, msg.sender, _codeHash));\n', '        AuditRequest storage request = AuditRequests[hashAuditorRequestorCode];\n', '        if ( request.amount == 0 ) {\n', '            // first request from msg.sender to audit contract _codeHash by _auditor\n', '            AuditRequests[hashAuditorRequestorCode] = AuditRequest({\n', '                amount : msg.value,\n', '                expireDate : expireDate\n', '            });\n', '            emit AuditRequested(_auditor, msg.sender, _codeHash, msg.value, expireDate);\n', '        } else {\n', '            // Request already exists. Increasing value\n', '            request.amount = request.amount.add(msg.value);\n', '            // if new expireDate is later than existing one - increase the existing one\n', '            if ( expireDate > request.expireDate )\n', '                request.expireDate = expireDate;\n', '            // event returns the total request value and its expireDate\n', '            emit AuditRequested(_auditor, msg.sender, _codeHash, request.amount, request.expireDate);\n', '        }\n', '    }\n', '\n', '    /// @notice withdraws an audit request\n', '    /// @param _auditor the address of the auditor the request is directed to\n', '    /// @param _codeHash the code hash of the contract to audit. _codeHash equals to sha3 of the contract byte-code\n', '    function withdrawRequest(address _auditor, bytes32 _codeHash)\n', '    public\n', '    {\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\n', '\n', '        // revert if the contract is already audited by the auditor\n', '        uint8 outcome = SolidStampRegister(SolidStampRegisterAddress).getAuditOutcome(_auditor, _codeHash);\n', '        require(outcome == NOT_AUDITED, "contract already audited");\n', '\n', '        bytes32 hashAuditorRequestorCode = keccak256(abi.encodePacked(_auditor, msg.sender, _codeHash));\n', '        AuditRequest storage request = AuditRequests[hashAuditorRequestorCode];\n', '        require(request.amount > 0, "nothing to withdraw");\n', '        require(now > request.expireDate, "cannot withdraw before request.expireDate");\n', '\n', '        uint amount = request.amount;\n', '        delete request.amount;\n', '        delete request.expireDate;\n', '        Rewards[hashAuditorCode] = Rewards[hashAuditorCode].sub(amount);\n', '        TotalRequestsAmount = TotalRequestsAmount.sub(amount);\n', '        emit RequestWithdrawn(_auditor, msg.sender, _codeHash, amount);\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    /// @notice transfers reward to the auditor. Called by SolidStampRegister after the contract is audited\n', '    /// @param _auditor the auditor who audited the contract\n', '    /// @param _codeHash the code hash of the stamped contract. _codeHash equals to sha3 of the contract byte-code\n', '    /// @param _reportIPFS IPFS hash of the audit report\n', '    /// @param _isApproved whether the contract is approved or rejected\n', '    function auditContract(address _auditor, bytes32 _codeHash, bytes _reportIPFS, bool _isApproved)\n', '    public whenNotPaused onlySolidStampRegisterContract\n', '    {\n', '        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\n', '        uint reward = Rewards[hashAuditorCode];\n', '        TotalRequestsAmount = TotalRequestsAmount.sub(reward);\n', '        uint commissionKept = calcCommission(reward);\n', '        AvailableCommission = AvailableCommission.add(commissionKept);\n', '        emit ContractAudited(_auditor, _codeHash, _reportIPFS, _isApproved, reward);\n', '        _auditor.transfer(reward.sub(commissionKept));\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the contractSolidStamp\n', '     */\n', '    modifier onlySolidStampRegisterContract() {\n', '      require(msg.sender == SolidStampRegisterAddress, "can be only run by SolidStampRegister contract");\n', '      _;\n', '    }\n', '\n', '    /// @dev const value to indicate the maximum commision service owner can set\n', '    uint public constant MAX_COMMISSION = 9;\n', '\n', '    /// @notice ability for owner to change the service commmission\n', '    /// @param _newCommission new commision percentage\n', '    function changeCommission(uint _newCommission) public onlyOwner whenNotPaused {\n', '        require(_newCommission <= MAX_COMMISSION, "commission should be <= MAX_COMMISSION");\n', '        require(_newCommission != Commission, "_newCommission==Commmission");\n', '        Commission = _newCommission;\n', '        emit NewCommission(Commission);\n', '    }\n', '\n', '    /// @notice calculates the SolidStamp commmission\n', '    /// @param _amount amount to calcuate the commission from\n', '    function calcCommission(uint _amount) private view returns(uint) {\n', '        return _amount.mul(Commission)/100; // service commision\n', '    }\n', '\n', '    /// @notice ability for owner to withdraw the commission\n', '    /// @param _amount amount to withdraw\n', '    function withdrawCommission(uint _amount) public onlyOwner {\n', '        // cannot withdraw money reserved for requests\n', '        require(_amount <= AvailableCommission, "Cannot withdraw more than available");\n', '        AvailableCommission = AvailableCommission.sub(_amount);\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    /// @dev Override unpause so we can&#39;t have newContractAddress set,\n', '    ///  because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function unpause() public onlyOwner whenPaused {\n', '        require(newContractAddress == address(0), "new contract cannot be 0x0");\n', '\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /// @notice We don&#39;t want your arbitrary ether\n', '    function() payable public {\n', '        revert();\n', '    }\n', '}']