['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '} \n', '\n', 'contract AbstractSingularDTVFund {\n', '    function softWithdrawRewardFor(address forAddress) returns (uint);\n', '}\n', '\n', '/// @title Token contract - Implements token issuance.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="aedddacbc8cfc080c9cbc1dcc9cbeecdc1c0ddcbc0ddd7dd80c0cbda">[email&#160;protected]</a>>\n', '/// @author Milad Mostavi - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6e0307020f0a4003011d1a0f18072e0d01001d0b001d171d40000b1a">[email&#160;protected]</a>>\n', 'contract SingularDTVToken is StandardToken {\n', '    string public version = "0.1.0";\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractSingularDTVFund public singularDTVFund;\n', '\n', '    /*\n', '     *  Token meta data\n', '     */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param to Address of token receiver.\n', '    /// @param value Number of tokens to transfer.\n', '    function transfer(address to, uint256 value)\n', '        returns (bool)\n', '    {\n', '        // Both parties withdraw their reward first\n', '        singularDTVFund.softWithdrawRewardFor(msg.sender);\n', '        singularDTVFund.softWithdrawRewardFor(to);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param from Address from where tokens are withdrawn.\n', '    /// @param to Address to where tokens are sent.\n', '    /// @param value Number of tokens to transfer.\n', '    function transferFrom(address from, address to, uint256 value)\n', '        returns (bool)\n', '    {\n', '        // Both parties withdraw their reward first\n', '        singularDTVFund.softWithdrawRewardFor(from);\n', '        singularDTVFund.softWithdrawRewardFor(to);\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function SingularDTVToken(address sDTVFundAddr, address _wallet, string _name, string _symbol, uint _totalSupply) {\n', '        if(sDTVFundAddr == 0 || _wallet == 0) {\n', '            // Fund and Wallet addresses should not be null.\n', '            revert();\n', '        }\n', '\n', '        balances[_wallet] = _totalSupply;\n', '        totalSupply = _totalSupply;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        singularDTVFund = AbstractSingularDTVFund(sDTVFundAddr);\n', '\n', '        Transfer(this, _wallet, _totalSupply);\n', '    }\n', '}']