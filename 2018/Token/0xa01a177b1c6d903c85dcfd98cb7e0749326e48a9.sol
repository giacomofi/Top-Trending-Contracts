['pragma solidity ^0.4.20;\n', '\n', '\n', 'contract EtherTransfer {\n', '\n', '    address public owner;\n', '    address public to;\n', '    bool public isAutoFowarding;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require (msg.sender != _account);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _newOwner)\n', '        onlyBy(owner)\n', '    {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function turnOn(address _owner)\n', '        onlyBy(owner)\n', '    {\n', '        isAutoFowarding = true;\n', '    }\n', '\n', '    function turnOff(address _owner)\n', '        onlyBy(owner)\n', '    {\n', '        isAutoFowarding = false;\n', '    }\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     *\n', '     */\n', '    function EtherTransfer() {\n', '        owner = msg.sender;\n', '        to = 0x75461D0b6623E9F4FC08CB34d5d57B44dac13Db4;\n', '        isAutoFowarding = true;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     *\n', '     */\n', '    function () payable {\n', '\n', '        uint amount = msg.value;\n', '        require(isAutoFowarding);\n', '        require(amount>0);\n', '        to.transfer(amount);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '\n', '}']