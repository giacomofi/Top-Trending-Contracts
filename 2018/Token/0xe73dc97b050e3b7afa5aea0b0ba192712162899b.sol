['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BRANDCOIN is StandardToken, BurnableToken, Ownable\n', '{\n', '    // ERC20 token parameters\n', '    string public constant name = "BRANDCOIN";\n', '    string public constant symbol = "BRA";\n', '    uint256 public constant decimals = 18;\n', '    \n', '    // Crowdsale base price\n', '    uint256 public ETH_per_BRA = 0.00024261 ether;\n', '    \n', '    // 15 april - 30 april: 43% bonus for purchases of at least 1000 BRA\n', '    uint256 private first_period_start_date = 1523750400;\n', '    uint256 private constant first_period_bonus_percentage = 43;\n', '    uint256 private constant first_period_bonus_minimum_purchased_BRA = 1000 * (uint256(10) ** decimals);\n', '    \n', '    // 1 may - 7 may: 15% bonus\n', '    uint256 private second_period_start_date = 1525132800;\n', '    uint256 private constant second_period_bonus_percentage = 15;\n', '    \n', '    // 8 may - 14 may: 10% bonus\n', '    uint256 private third_period_start_date = 1525737600;\n', '    uint256 private constant third_period_bonus_percentage = 10;\n', '    \n', '    // 15 may - 21 may: 6% bonus\n', '    uint256 private fourth_period_start_date = 1526342400;\n', '    uint256 private constant fourth_period_bonus_percentage = 6;\n', '    \n', '    // 22 may - 31 may: 3% bonus\n', '    uint256 private fifth_period_start_date = 1526947200;\n', '    uint256 private constant fifth_period_bonus_percentage = 3;\n', '    \n', '    // End of ICO: 1 june\n', '    uint256 private crowdsale_end_timestamp = 1527811200;\n', '    \n', "    // The target of the crowdsale is 8000000 BRANDCOIN's.\n", '    // If the crowdsale has finished, and the target has not been reached,\n', '    // all crowdsale participants will be able to call refund() and get their\n', '    // ETH back. The refundMany() function can be used to refund multiple\n', '    // participants in one transaction.\n', '    uint256 public constant crowdsaleTargetBRA = 8000000 * (uint256(10) ** decimals);\n', '    \n', '    \n', '    // Keep track of all participants, how much they bought and how much they spent.\n', '    address[] public allParticipants;\n', '    mapping(address => uint256) public participantToEtherSpent;\n', '    mapping(address => uint256) public participantToBRAbought;\n', '    \n', '    \n', '    function crowdsaleTargetReached() public view returns (bool)\n', '    {\n', '        return amountOfBRAsold() >= crowdsaleTargetBRA;\n', '    }\n', '    \n', '    function crowdsaleStarted() public view returns (bool)\n', '    {\n', '        return now >= first_period_start_date;\n', '    }\n', '    \n', '    function crowdsaleFinished() public view returns (bool)\n', '    {\n', '        return now >= crowdsale_end_timestamp;\n', '    }\n', '    \n', '    function amountOfParticipants() external view returns (uint256)\n', '    {\n', '        return allParticipants.length;\n', '    }\n', '    \n', '    function amountOfBRAsold() public view returns (uint256)\n', '    {\n', '        return totalSupply_ / 2 - balances[this];\n', '    }\n', '    \n', '    // If the crowdsale target has not been reached, or the crowdsale has not finished,\n', "    // don't allow the transfer of tokens purchased in the crowdsale.\n", '    function transfer(address _to, uint256 _amount) public returns (bool)\n', '    {\n', '        if (!crowdsaleTargetReached() || !crowdsaleFinished())\n', '        {\n', '            require(balances[msg.sender] - participantToBRAbought[msg.sender] >= _amount);\n', '        }\n', '        \n', '        return super.transfer(_to, _amount);\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool)\n', '    {\n', '        if (!crowdsaleTargetReached() || !crowdsaleFinished())\n', '        {\n', '            require(balances[_from] - participantToBRAbought[_from] >= _amount);\n', '        }\n', '        \n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '    \n', '    address public founderWallet = 0x6bC5aa2B9eb4aa5b6170Dafce4482efF56184ADd;\n', '    address public teamWallet = 0xb054D33607fC07e55469c81ABcB1553B92914E9e;\n', '    address public bountyAffiliateWallet = 0x9460bc2bB546B640060E0268Ba8C392b0A0D6330;\n', '    address public earlyBackersWallet = 0x4681B5c67ae0632c57ee206e1f9c2Ca58D6Af34c;\n', '    address public reserveWallet = 0x4d70B2aCaE5e6558A9f5d55E672E93916Ba5c7aE;\n', '    \n', '    // Constructor function\n', '    function BRANDCOIN() public\n', '    {\n', '        totalSupply_ = 1650000000 * (uint256(10) ** decimals);\n', '        balances[this] = totalSupply_;\n', '        Transfer(0x0, this, totalSupply_);\n', '    }\n', '    \n', '    bool private distributedInitialFunds = false;\n', '    function distributeInitialFunds() public onlyOwner\n', '    {\n', '        require(!distributedInitialFunds);\n', '        distributedInitialFunds = true;\n', '        this.transfer(founderWallet, totalSupply_*15/100);\n', '        this.transfer(earlyBackersWallet, totalSupply_*5/100);\n', '        this.transfer(teamWallet, totalSupply_*15/100);\n', '        this.transfer(bountyAffiliateWallet, totalSupply_*5/100);\n', '        this.transfer(reserveWallet, totalSupply_*10/100);\n', '    }\n', '    \n', '    function destroyUnsoldTokens() external\n', '    {\n', '        require(crowdsaleStarted() && crowdsaleFinished());\n', '        \n', '        this.burn(balances[this]);\n', '    }\n', '    \n', '    // If someone sends ETH to the contract address,\n', '    // assume that they are trying to buy tokens.\n', '    function () payable external\n', '    {\n', '        buyTokens();\n', '    }\n', '    \n', '    function buyTokens() payable public\n', '    {\n', '        uint256 amountOfBRApurchased = msg.value * (uint256(10)**decimals) / ETH_per_BRA;\n', '        \n', '        // Only allow buying tokens if the ICO has started, and has not finished\n', '        require(crowdsaleStarted());\n', '        require(!crowdsaleFinished());\n', '        \n', "        // If the pre-ICO hasn't started yet, cancel the transaction\n", '        if (now < first_period_start_date)\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        else if (now >= first_period_start_date && now < second_period_start_date)\n', '        {\n', '            if (amountOfBRApurchased >= first_period_bonus_minimum_purchased_BRA)\n', '            {\n', '                amountOfBRApurchased = amountOfBRApurchased * (100 + first_period_bonus_percentage) / 100;\n', '            }\n', '        }\n', '        \n', '        else if (now >= second_period_start_date && now < third_period_start_date)\n', '        {\n', '            amountOfBRApurchased = amountOfBRApurchased * (100 + second_period_bonus_percentage) / 100;\n', '        }\n', '        \n', '        else if (now >= third_period_start_date && now < fourth_period_start_date)\n', '        {\n', '            amountOfBRApurchased = amountOfBRApurchased * (100 + third_period_bonus_percentage) / 100;\n', '        }\n', '        \n', '        else if (now >= fourth_period_start_date && now < fifth_period_start_date)\n', '        {\n', '            amountOfBRApurchased = amountOfBRApurchased * (100 + fourth_period_bonus_percentage) / 100;\n', '        }\n', '        \n', '        else if (now >= fifth_period_start_date && now < crowdsale_end_timestamp)\n', '        {\n', '            amountOfBRApurchased = amountOfBRApurchased * (100 + fifth_period_bonus_percentage) / 100;\n', '        }\n', '        \n', '        // If we are passed the final sale, cancel the transaction.\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        // Send the purchased tokens to the buyer\n', '        this.transfer(msg.sender, amountOfBRApurchased);\n', '        \n', '        // Track statistics\n', '        if (participantToEtherSpent[msg.sender] == 0)\n', '        {\n', '            allParticipants.push(msg.sender);\n', '        }\n', '        participantToBRAbought[msg.sender] += amountOfBRApurchased;\n', '        participantToEtherSpent[msg.sender] += msg.value;\n', '    }\n', '    \n', '    function refund() external\n', '    {\n', "        // If the crowdsale has not started yet, don't allow refund\n", '        require(crowdsaleStarted());\n', '        \n', "        // If the crowdsale has not finished yet, don't allow refund\n", '        require(crowdsaleFinished());\n', '        \n', "        // If the target was reached, don't allow refund\n", '        require(!crowdsaleTargetReached());\n', '        \n', '        _refundParticipant(msg.sender);\n', '    }\n', '    \n', '    function refundMany(uint256 _startIndex, uint256 _endIndex) external\n', '    {\n', "        // If the crowdsale has not started yet, don't allow refund\n", '        require(crowdsaleStarted());\n', '        \n', "        // If the crowdsale has not finished yet, don't allow refund\n", '        require(crowdsaleFinished());\n', '        \n', "        // If the target was reached, don't allow refund\n", '        require(!crowdsaleTargetReached());\n', '        \n', '        for (uint256 i=_startIndex; i<=_endIndex && i<allParticipants.length; i++)\n', '        {\n', '            _refundParticipant(allParticipants[i]);\n', '        }\n', '    }\n', '    \n', '    function _refundParticipant(address _participant) internal\n', '    {\n', '        if (participantToEtherSpent[_participant] > 0)\n', '        {\n', '            // Return the BRA they bought to this contract\n', '            uint256 refundBRA = participantToBRAbought[_participant];\n', '            participantToBRAbought[_participant] = 0;\n', '            balances[_participant] -= refundBRA;\n', '            balances[this] += refundBRA;\n', '            Transfer(_participant, this, refundBRA);\n', '            \n', '            // Return the ETH they spent to buy them\n', '            uint256 refundETH = participantToEtherSpent[_participant];\n', '            participantToEtherSpent[_participant] = 0;\n', '            _participant.transfer(refundETH);\n', '        }\n', '    }\n', '    \n', '    function ownerWithdrawETH() external onlyOwner\n', '    {\n', '        // Only allow the owner to withdraw if the crowdsale target has been reached\n', '        require(crowdsaleTargetReached());\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    // As long as the crowdsale has not started yet, the owner can change the base price\n', '    function setPrice(uint256 _ETH_PER_BRA) external onlyOwner\n', '    {\n', '        require(!crowdsaleStarted());\n', '        ETH_per_BRA = _ETH_PER_BRA;\n', '    }\n', '}']