['pragma solidity 0.4.20;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  \n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract CanSend {\n', '\n', '  uint8 MAX_RECIPIENTS = 255;\n', '\n', '  event TokensSent (address indexed token, uint256 total);\n', '\n', '  function multisend (address _token, address[] _recipients, uint256[] _amounts) public {\n', '    require(_token != address(0));\n', '    require(_recipients.length != 0);\n', '    require(_recipients.length <= MAX_RECIPIENTS);\n', '    require(_recipients.length == _amounts.length);\n', '    ERC20 tokenToSend = ERC20(_token);\n', '    uint256 totalSent = 0;\n', '    for (uint8 i = 0; i < _recipients.length; i++) {\n', '      require(tokenToSend.transferFrom(msg.sender, _recipients[i], _amounts[i]));\n', '      totalSent += _amounts[i];\n', '    }\n', '    TokensSent(_token, totalSent);\n', '  }\n', '\n', '}']
['pragma solidity 0.4.20;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  \n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract CanSend {\n', '\n', '  uint8 MAX_RECIPIENTS = 255;\n', '\n', '  event TokensSent (address indexed token, uint256 total);\n', '\n', '  function multisend (address _token, address[] _recipients, uint256[] _amounts) public {\n', '    require(_token != address(0));\n', '    require(_recipients.length != 0);\n', '    require(_recipients.length <= MAX_RECIPIENTS);\n', '    require(_recipients.length == _amounts.length);\n', '    ERC20 tokenToSend = ERC20(_token);\n', '    uint256 totalSent = 0;\n', '    for (uint8 i = 0; i < _recipients.length; i++) {\n', '      require(tokenToSend.transferFrom(msg.sender, _recipients[i], _amounts[i]));\n', '      totalSent += _amounts[i];\n', '    }\n', '    TokensSent(_token, totalSent);\n', '  }\n', '\n', '}']
