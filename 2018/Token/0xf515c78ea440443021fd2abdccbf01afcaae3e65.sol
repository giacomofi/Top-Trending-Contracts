['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\PreSignedContract.sol\n', '\n', 'contract PreSignedContract is Ownable {\n', '  mapping (uint8 => bytes) internal _prefixPreSignedFirst;\n', '  mapping (uint8 => bytes) internal _prefixPreSignedSecond;\n', '\n', '  function upgradePrefixPreSignedFirst(uint8 _version, bytes _prefix) public onlyOwner {\n', '    _prefixPreSignedFirst[_version] = _prefix;\n', '  }\n', '\n', '  function upgradePrefixPreSignedSecond(uint8 _version, bytes _prefix) public onlyOwner {\n', '    _prefixPreSignedSecond[_version] = _prefix;\n', '  }\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  function messagePreSignedHashing(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version\n', '  ) public view returns (bytes32 hash) {\n', '    if (_version <= 2) {\n', '      hash = keccak256(\n', '        _mode,\n', '        _token,\n', '        _to,\n', '        _value,\n', '        _fee,\n', '        _nonce\n', '      );\n', '    } else {\n', '      // Support SignTypedData flexibly\n', '      hash = keccak256(\n', '        _prefixPreSignedFirst[_version],\n', '        _mode,\n', '        _token,\n', '        _to,\n', '        _value,\n', '        _fee,\n', '        _nonce\n', '      );\n', '    }\n', '  }\n', '\n', '  function preSignedHashing(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version\n', '  ) public view returns (bytes32) {\n', '    bytes32 hash = messagePreSignedHashing(\n', '      _mode,\n', '      _token,\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version\n', '    );\n', '\n', '    if (_version <= 2) {\n', '      if (_version == 0) {\n', '        return hash;\n', '      } else if (_version == 1) {\n', '        return keccak256(\n', '          &#39;\\x19Ethereum Signed Message:\\n32&#39;,\n', '          hash\n', '        );\n', '      } else {\n', '        // Support Standard Prefix (Trezor)\n', '        return keccak256(\n', '          &#39;\\x19Ethereum Signed Message:\\n\\x20&#39;,\n', '          hash\n', '        );\n', '      }\n', '    } else {\n', '      // Support SignTypedData flexibly\n', '      if (_prefixPreSignedSecond[_version].length > 0) {\n', '        return keccak256(\n', '          _prefixPreSignedSecond[_version],\n', '          hash\n', '        );\n', '      } else {\n', '        return hash;\n', '      }\n', '    }\n', '  }\n', '\n', '  function preSignedCheck(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) public view returns (address) {\n', '    bytes32 hash = preSignedHashing(\n', '      _mode,\n', '      _token,\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version\n', '    );\n', '\n', '    address _from = recover(hash, _sig);\n', '    require(_from != address(0));\n', '\n', '    return _from;\n', '  }\n', '\n', '  function transferPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', '    return preSignedCheck(&#39;Transfer&#39;, _token, _to, _value, _fee, _nonce, _version, _sig);\n', '  }\n', '\n', '  function approvePreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', '    return preSignedCheck(&#39;Approval&#39;, _token, _to, _value, _fee, _nonce, _version, _sig);\n', '  }\n', '\n', '  function increaseApprovalPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', '    return preSignedCheck(&#39;IncApprv&#39;, _token, _to, _value, _fee, _nonce, _version, _sig);\n', '  }\n', '\n', '  function decreaseApprovalPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', '    return preSignedCheck(&#39;DecApprv&#39;, _token, _to, _value, _fee, _nonce, _version, _sig);\n', '  }\n', '}\n', '\n', '// File: contracts\\token\\MuzikaCoin.sol\n', '\n', 'contract MuzikaCoin is MintableToken, Pausable {\n', '  string public name = &#39;MUZIKA COIN&#39;;\n', '  string public symbol = &#39;MZK&#39;;\n', '  uint8 public decimals = 18;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  event FreezeAddress(address indexed target);\n', '  event UnfreezeAddress(address indexed target);\n', '\n', '  event TransferPreSigned(\n', '    address indexed from,\n', '    address indexed to,\n', '    address indexed delegate,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '  event ApprovalPreSigned(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    address indexed delegate,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '  mapping (address => bool) public frozenAddress;\n', '\n', '  mapping (bytes => bool) internal _signatures;\n', '\n', '  PreSignedContract internal _preSignedContract = PreSignedContract(0xE55b5f4fAd5cD3923C392e736F58dEF35d7657b8);\n', '\n', '  modifier onlyNotFrozenAddress(address _target) {\n', '    require(!frozenAddress[_target]);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFrozenAddress(address _target) {\n', '    require(frozenAddress[_target]);\n', '    _;\n', '  }\n', '\n', '  constructor(uint256 initialSupply) public {\n', '    totalSupply_ = initialSupply;\n', '    balances[msg.sender] = initialSupply;\n', '    emit Transfer(address(0), msg.sender, initialSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev Freeze account(address)\n', '   *\n', '   * @param _target The address to freeze\n', '   */\n', '  function freezeAddress(address _target)\n', '    public\n', '    onlyOwner\n', '    onlyNotFrozenAddress(_target)\n', '  {\n', '    frozenAddress[_target] = true;\n', '\n', '    emit FreezeAddress(_target);\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreeze account(address)\n', '   *\n', '   * @param _target The address to unfreeze\n', '   */\n', '  function unfreezeAddress(address _target)\n', '    public\n', '    onlyOwner\n', '    onlyFrozenAddress(_target)\n', '  {\n', '    delete frozenAddress[_target];\n', '\n', '    emit UnfreezeAddress(_target);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(_from)\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '  /**\n', '   * @dev Be careful to use delegateTransfer.\n', '   * @dev If attacker whose balance is less than sum of fee and amount\n', '   * @dev requests constantly transferring using delegateTransfer/delegateApprove to someone,\n', '   * @dev he or she may lose all ether to process these requests.\n', '   */\n', '  function transferPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.transferPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '    require(!frozenAddress[_from]);\n', '\n', '    uint256 _burden = _value.add(_fee);\n', '    require(_burden <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_burden);\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[msg.sender] = balances[msg.sender].add(_fee);\n', '    emit Transfer(_from, _to, _value);\n', '    emit Transfer(_from, msg.sender, _fee);\n', '\n', '    _signatures[_sig] = true;\n', '    emit TransferPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function approvePreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.approvePreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '\n', '    require(!frozenAddress[_from]);\n', '    require(_fee <= balances[_from]);\n', '\n', '    allowed[_from][_to] = _value;\n', '    emit Approval(_from, _to, _value);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function increaseApprovalPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.increaseApprovalPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '\n', '    require(!frozenAddress[_from]);\n', '    require(_fee <= balances[_from]);\n', '\n', '    allowed[_from][_to] = allowed[_from][_to].add(_value);\n', '    emit Approval(_from, _to, allowed[_from][_to]);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, allowed[_from][_to], _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function decreaseApprovalPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.decreaseApprovalPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '    require(!frozenAddress[_from]);\n', '\n', '    require(_fee <= balances[_from]);\n', '\n', '    uint256 oldValue = allowed[_from][_to];\n', '    if (_value > oldValue) {\n', '      oldValue = 0;\n', '    } else {\n', '      oldValue = oldValue.sub(_value);\n', '    }\n', '\n', '    allowed[_from][_to] = oldValue;\n', '    emit Approval(_from, _to, oldValue);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, oldValue, _fee);\n', '\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\PreSignedContract.sol\n', '\n', 'contract PreSignedContract is Ownable {\n', '  mapping (uint8 => bytes) internal _prefixPreSignedFirst;\n', '  mapping (uint8 => bytes) internal _prefixPreSignedSecond;\n', '\n', '  function upgradePrefixPreSignedFirst(uint8 _version, bytes _prefix) public onlyOwner {\n', '    _prefixPreSignedFirst[_version] = _prefix;\n', '  }\n', '\n', '  function upgradePrefixPreSignedSecond(uint8 _version, bytes _prefix) public onlyOwner {\n', '    _prefixPreSignedSecond[_version] = _prefix;\n', '  }\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  function messagePreSignedHashing(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version\n', '  ) public view returns (bytes32 hash) {\n', '    if (_version <= 2) {\n', '      hash = keccak256(\n', '        _mode,\n', '        _token,\n', '        _to,\n', '        _value,\n', '        _fee,\n', '        _nonce\n', '      );\n', '    } else {\n', '      // Support SignTypedData flexibly\n', '      hash = keccak256(\n', '        _prefixPreSignedFirst[_version],\n', '        _mode,\n', '        _token,\n', '        _to,\n', '        _value,\n', '        _fee,\n', '        _nonce\n', '      );\n', '    }\n', '  }\n', '\n', '  function preSignedHashing(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version\n', '  ) public view returns (bytes32) {\n', '    bytes32 hash = messagePreSignedHashing(\n', '      _mode,\n', '      _token,\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version\n', '    );\n', '\n', '    if (_version <= 2) {\n', '      if (_version == 0) {\n', '        return hash;\n', '      } else if (_version == 1) {\n', '        return keccak256(\n', "          '\\x19Ethereum Signed Message:\\n32',\n", '          hash\n', '        );\n', '      } else {\n', '        // Support Standard Prefix (Trezor)\n', '        return keccak256(\n', "          '\\x19Ethereum Signed Message:\\n\\x20',\n", '          hash\n', '        );\n', '      }\n', '    } else {\n', '      // Support SignTypedData flexibly\n', '      if (_prefixPreSignedSecond[_version].length > 0) {\n', '        return keccak256(\n', '          _prefixPreSignedSecond[_version],\n', '          hash\n', '        );\n', '      } else {\n', '        return hash;\n', '      }\n', '    }\n', '  }\n', '\n', '  function preSignedCheck(\n', '    bytes8 _mode,\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) public view returns (address) {\n', '    bytes32 hash = preSignedHashing(\n', '      _mode,\n', '      _token,\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version\n', '    );\n', '\n', '    address _from = recover(hash, _sig);\n', '    require(_from != address(0));\n', '\n', '    return _from;\n', '  }\n', '\n', '  function transferPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', "    return preSignedCheck('Transfer', _token, _to, _value, _fee, _nonce, _version, _sig);\n", '  }\n', '\n', '  function approvePreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', "    return preSignedCheck('Approval', _token, _to, _value, _fee, _nonce, _version, _sig);\n", '  }\n', '\n', '  function increaseApprovalPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', "    return preSignedCheck('IncApprv', _token, _to, _value, _fee, _nonce, _version, _sig);\n", '  }\n', '\n', '  function decreaseApprovalPreSignedCheck(\n', '    address _token,\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  ) external view returns (address) {\n', "    return preSignedCheck('DecApprv', _token, _to, _value, _fee, _nonce, _version, _sig);\n", '  }\n', '}\n', '\n', '// File: contracts\\token\\MuzikaCoin.sol\n', '\n', 'contract MuzikaCoin is MintableToken, Pausable {\n', "  string public name = 'MUZIKA COIN';\n", "  string public symbol = 'MZK';\n", '  uint8 public decimals = 18;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  event FreezeAddress(address indexed target);\n', '  event UnfreezeAddress(address indexed target);\n', '\n', '  event TransferPreSigned(\n', '    address indexed from,\n', '    address indexed to,\n', '    address indexed delegate,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '  event ApprovalPreSigned(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    address indexed delegate,\n', '    uint256 value,\n', '    uint256 fee\n', '  );\n', '\n', '  mapping (address => bool) public frozenAddress;\n', '\n', '  mapping (bytes => bool) internal _signatures;\n', '\n', '  PreSignedContract internal _preSignedContract = PreSignedContract(0xE55b5f4fAd5cD3923C392e736F58dEF35d7657b8);\n', '\n', '  modifier onlyNotFrozenAddress(address _target) {\n', '    require(!frozenAddress[_target]);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFrozenAddress(address _target) {\n', '    require(frozenAddress[_target]);\n', '    _;\n', '  }\n', '\n', '  constructor(uint256 initialSupply) public {\n', '    totalSupply_ = initialSupply;\n', '    balances[msg.sender] = initialSupply;\n', '    emit Transfer(address(0), msg.sender, initialSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev Freeze account(address)\n', '   *\n', '   * @param _target The address to freeze\n', '   */\n', '  function freezeAddress(address _target)\n', '    public\n', '    onlyOwner\n', '    onlyNotFrozenAddress(_target)\n', '  {\n', '    frozenAddress[_target] = true;\n', '\n', '    emit FreezeAddress(_target);\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreeze account(address)\n', '   *\n', '   * @param _target The address to unfreeze\n', '   */\n', '  function unfreezeAddress(address _target)\n', '    public\n', '    onlyOwner\n', '    onlyFrozenAddress(_target)\n', '  {\n', '    delete frozenAddress[_target];\n', '\n', '    emit UnfreezeAddress(_target);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(_from)\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '  /**\n', '   * @dev Be careful to use delegateTransfer.\n', '   * @dev If attacker whose balance is less than sum of fee and amount\n', '   * @dev requests constantly transferring using delegateTransfer/delegateApprove to someone,\n', '   * @dev he or she may lose all ether to process these requests.\n', '   */\n', '  function transferPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.transferPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '    require(!frozenAddress[_from]);\n', '\n', '    uint256 _burden = _value.add(_fee);\n', '    require(_burden <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_burden);\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[msg.sender] = balances[msg.sender].add(_fee);\n', '    emit Transfer(_from, _to, _value);\n', '    emit Transfer(_from, msg.sender, _fee);\n', '\n', '    _signatures[_sig] = true;\n', '    emit TransferPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function approvePreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.approvePreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '\n', '    require(!frozenAddress[_from]);\n', '    require(_fee <= balances[_from]);\n', '\n', '    allowed[_from][_to] = _value;\n', '    emit Approval(_from, _to, _value);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, _value, _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function increaseApprovalPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.increaseApprovalPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '\n', '    require(!frozenAddress[_from]);\n', '    require(_fee <= balances[_from]);\n', '\n', '    allowed[_from][_to] = allowed[_from][_to].add(_value);\n', '    emit Approval(_from, _to, allowed[_from][_to]);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, allowed[_from][_to], _fee);\n', '\n', '    return true;\n', '  }\n', '\n', '  function decreaseApprovalPreSigned(\n', '    address _to,\n', '    uint256 _value,\n', '    uint256 _fee,\n', '    uint256 _nonce,\n', '    uint8 _version,\n', '    bytes _sig\n', '  )\n', '    public\n', '    onlyNotFrozenAddress(msg.sender)\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_signatures[_sig] == false);\n', '\n', '    address _from = _preSignedContract.decreaseApprovalPreSignedCheck(\n', '      address(this),\n', '      _to,\n', '      _value,\n', '      _fee,\n', '      _nonce,\n', '      _version,\n', '      _sig\n', '    );\n', '    require(!frozenAddress[_from]);\n', '\n', '    require(_fee <= balances[_from]);\n', '\n', '    uint256 oldValue = allowed[_from][_to];\n', '    if (_value > oldValue) {\n', '      oldValue = 0;\n', '    } else {\n', '      oldValue = oldValue.sub(_value);\n', '    }\n', '\n', '    allowed[_from][_to] = oldValue;\n', '    emit Approval(_from, _to, oldValue);\n', '\n', '    if (_fee > 0) {\n', '      balances[_from] = balances[_from].sub(_fee);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '    }\n', '\n', '    _signatures[_sig] = true;\n', '    emit ApprovalPreSigned(_from, _to, msg.sender, oldValue, _fee);\n', '\n', '    return true;\n', '  }\n', '}']
