['pragma solidity ^0.4.11;\n', '\n', 'contract NGToken {\n', '\n', '    function NGToken() {}\n', '    \n', '    address public niceguy1 = 0x589A1E14208433647863c63fE2C736Ce930B956b;\n', '    address public niceguy2 = 0x583f354B6Fff4b11b399Fad8b3C2a73C16dF02e2;\n', '    address public niceguy3 = 0x6609867F516A15273678d268460B864D882156b6;\n', '    address public niceguy4 = 0xA4CA81EcE0d3230c6f8CCD0ad94f5a5393f76Af8;\n', '    address public owner = msg.sender;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalBonusTokensIssued = 0;\n', '    uint256 public totalSupply = 0;\n', '    bool public purchasingAllowed = true;\n', '\n', '    function name() constant returns (string) { return "Nice Guy Token"; }\n', '    function symbol() constant returns (string) { return "NGT"; }\n', '    function decimals() constant returns (uint256) { return 18; }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { throw; }\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        \n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool sufficientAllowance = allowance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            \n', '            allowed[_from][msg.sender] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { \n', '            return false; \n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;        \n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function enablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function() payable {\n', '        if (!purchasingAllowed) { throw; }\n', '        \n', '        if (msg.value == 0) { return; }\n', '\n', '        niceguy4.transfer(msg.value/4.0);\n', '        niceguy3.transfer(msg.value/4.0);\n', '        niceguy2.transfer(msg.value/4.0);\n', '        niceguy1.transfer(msg.value/4.0);\n', '\n', '        totalContribution += msg.value;\n', '        uint256 precision = 10 ** decimals();\n', '        uint256 tokenConversionRate = 10**24 * precision / (totalSupply + 10**22); \n', '        uint256 tokensIssued = tokenConversionRate * msg.value / precision;\n', '        totalSupply += tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract NGToken {\n', '\n', '    function NGToken() {}\n', '    \n', '    address public niceguy1 = 0x589A1E14208433647863c63fE2C736Ce930B956b;\n', '    address public niceguy2 = 0x583f354B6Fff4b11b399Fad8b3C2a73C16dF02e2;\n', '    address public niceguy3 = 0x6609867F516A15273678d268460B864D882156b6;\n', '    address public niceguy4 = 0xA4CA81EcE0d3230c6f8CCD0ad94f5a5393f76Af8;\n', '    address public owner = msg.sender;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalBonusTokensIssued = 0;\n', '    uint256 public totalSupply = 0;\n', '    bool public purchasingAllowed = true;\n', '\n', '    function name() constant returns (string) { return "Nice Guy Token"; }\n', '    function symbol() constant returns (string) { return "NGT"; }\n', '    function decimals() constant returns (uint256) { return 18; }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { throw; }\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        \n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool sufficientAllowance = allowance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            \n', '            allowed[_from][msg.sender] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { \n', '            return false; \n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;        \n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function enablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function() payable {\n', '        if (!purchasingAllowed) { throw; }\n', '        \n', '        if (msg.value == 0) { return; }\n', '\n', '        niceguy4.transfer(msg.value/4.0);\n', '        niceguy3.transfer(msg.value/4.0);\n', '        niceguy2.transfer(msg.value/4.0);\n', '        niceguy1.transfer(msg.value/4.0);\n', '\n', '        totalContribution += msg.value;\n', '        uint256 precision = 10 ** decimals();\n', '        uint256 tokenConversionRate = 10**24 * precision / (totalSupply + 10**22); \n', '        uint256 tokensIssued = tokenConversionRate * msg.value / precision;\n', '        totalSupply += tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
