['pragma solidity ^ 0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) external view returns (uint256 amount);\n', '    function transfer(address _to, uint256 _value) external returns(bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract Burnable {\n', '    \n', '    function burn(uint256 _value) external returns(bool success);\n', '    function burnFrom(address _from, uint256 _value) external returns(bool success);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint256 _value);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "only Owner can do this");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) \n', '    external onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() \n', '    external {\n', '        require(msg.sender == newOwner, "only new Owner can do this");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', 'contract Permissioned {\n', '    \n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns(bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 amount);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "mul overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "sub overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a, "add overflow");\n', '        return c;\n', '    }\n', '}\n', '\n', '//interface for approveAndCall\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '/** @title NelCoin token. */\n', 'contract NelCoin is ERC20Interface, Burnable, Owned, Permissioned {\n', '    // be aware of overflows\n', '    using SafeMath for uint256;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) internal _balanceOf;\n', '    \n', '    // This creates an array with all allowance\n', '    mapping(address => mapping(address => uint256)) internal _allowance;\n', '\t\n', '\tuint public forSale;\n', '\n', '    /**\n', '    * Constructor function\n', '    *\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    */\n', '    constructor()\n', '    public {\n', '        owner = msg.sender;\n', '        symbol = "NEL";\n', '        name = "NelCoin";\n', '        decimals = 2;\n', '        forSale = 12000000 * (10 ** uint(decimals));\n', '        totalSupply = 21000000 * (10 ** uint256(decimals));\n', '        _balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * Get the token balance for account\n', '    *\n', '    * Get token balance of `_owner` account\n', '    *\n', '    * @param _owner The address of the owner\n', '    */\n', '    function balanceOf(address _owner)\n', '    external view\n', '    returns(uint256 balance) {\n', '        return _balanceOf[_owner];\n', '    }\n', '\n', '    /**\n', '    * Internal transfer, only can be called by this contract\n', '    */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0), "use burn() instead");\n', '        // Check if the sender has enough\n', '        require(_balanceOf[_from] >= _value, "not enough balance");\n', '        // Subtract from the sender\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens\n', '    *\n', '    * Send `_value` tokens to `_to` from your account\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens from other address\n', '    *\n', '    * Send `_value` tokens to `_to` on behalf of `_from`\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        require(_value <= _allowance[_from][msg.sender], "allowance too loow");     // Check allowance\n', '        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        emit Approval(_from, _to, _allowance[_from][_to]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    returns(bool success) {\n', '        _allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address and notify\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    * @param _extraData some extra information to send to the approved contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    external\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender)\n', '    external view\n', '    returns(uint256 amount) {\n', '        return _allowance[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '    external\n', '    returns(bool success) {\n', '        _allowance[msg.sender][_spender] = _allowance[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '    external\n', '    returns(bool success) {\n', '        uint256 oldValue = _allowance[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            _allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            _allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroy tokens\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly\n', '    *\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        _burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the sender\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        require(_value <= _allowance[_from][msg.sender], "allowance too low");                           // Check allowance\n', '        require(_value <= _balanceOf[_from], "balance too low");                                       // Is tehere enough coins on account\n', '        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);  // Subtract from the sender&#39;s allowance\n', '        _burn(_from, _value);\n', '        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    //internal burn function\n', '    function _burn(address _from, uint256 _value)\n', '    internal {\n', '        require(_balanceOf[_from] >= _value, "balance too low");               // Check if the targeted balance is enough\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);              // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '\t//We accept intentional donations in ETH\n', '    event Donated(address indexed _from, uint256 _value);\n', '\n', '\t/**\n', '    * Donate ETH tokens to contract (Owner)\n', '    */\n', '\tfunction donation() \n', '    external payable \n', '    returns (bool success){\n', '        emit Donated(msg.sender, msg.value);\n', '        return(true);\n', '    }\n', '    \n', '    //Don`t accept accidental ETH\n', '    function()\n', '    external payable\n', '    {\n', '        require(false, "Use fund() or donation()");\n', '    }\n', '    \n', '\t/**\n', '\t * Buy NelCoin using ETH\n', '\t * Contract is selling tokens at price 20000NEL/1ETH, \n', '\t * total 12000000NEL for sale\n', '\t */\n', '\tfunction fund()\n', '\texternal payable\n', '\treturns (uint amount){\n', '\t\trequire(forSale > 0, "Sold out!");\n', '\t\tuint tokenCount = ((msg.value).mul(20000 * (10 ** uint(decimals)))).div(10**18);\n', '\t\trequire(tokenCount >= 1, "Send more ETH to buy at least one token!");\n', '\t\trequire(tokenCount <= forSale, "You want too much! Check forSale()");\n', '\t\tforSale -= tokenCount;\n', '\t\t_transfer(owner, msg.sender, tokenCount);\n', '\t\treturn tokenCount;\n', '\t}\n', '\t\n', '\t/**\n', '    * Tranfer all ETH from contract to Owner addres.\n', '    */\n', '    function withdraw()\n', '    onlyOwner external\n', '    returns (bool success){\n', '        require(address(this).balance > 0, "Nothing to withdraw");\n', '        owner.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\t\n', '\t/**\n', '    * Transfer some ETH tokens from contract\n', '    *\n', '    * Transfer _value of ETH from contract to Owner addres.\n', '    * @param _value number of wei to trasfer\n', '    */\n', '\tfunction withdraw(uint _value)\n', '    onlyOwner external\n', '    returns (bool success){\n', '\t\trequire(_value > 0, "provide amount pls");\n', '\t\trequire(_value < address(this).balance, "Too much! Check balance()");\n', '\t\towner.transfer(_value);\n', '        return true;\n', '\t}\n', '\t\n', '    /**\n', '    * Check ETH balance of contract\n', '    */\n', '\tfunction balance()\n', '\texternal view\n', '\treturns (uint amount){\n', '\t\treturn (address(this).balance);\n', '\t}\n', '    \n', '\t/**\n', '    * Transfer ERC20 tokens from contract\n', '    *\n', '    * Tranfer _amount of ERC20 from contract _tokenAddress to Owner addres.\n', '    *\n', '    * @param _amount amount of ERC20 tokens to be transferred \n', '\t* @param _tokenAddress address of ERC20 token contract\n', '    */\n', '\tfunction transferAnyERC20Token(address _tokenAddress, uint256 _amount)\n', '    onlyOwner external\n', '    returns(bool success) {\n', '        return ERC20Interface(_tokenAddress).transfer(owner, _amount);\n', '    }\n', '}']
['pragma solidity ^ 0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) external view returns (uint256 amount);\n', '    function transfer(address _to, uint256 _value) external returns(bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract Burnable {\n', '    \n', '    function burn(uint256 _value) external returns(bool success);\n', '    function burnFrom(address _from, uint256 _value) external returns(bool success);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint256 _value);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "only Owner can do this");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) \n', '    external onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() \n', '    external {\n', '        require(msg.sender == newOwner, "only new Owner can do this");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', 'contract Permissioned {\n', '    \n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns(bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 amount);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "mul overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "sub overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a, "add overflow");\n', '        return c;\n', '    }\n', '}\n', '\n', '//interface for approveAndCall\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '/** @title NelCoin token. */\n', 'contract NelCoin is ERC20Interface, Burnable, Owned, Permissioned {\n', '    // be aware of overflows\n', '    using SafeMath for uint256;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) internal _balanceOf;\n', '    \n', '    // This creates an array with all allowance\n', '    mapping(address => mapping(address => uint256)) internal _allowance;\n', '\t\n', '\tuint public forSale;\n', '\n', '    /**\n', '    * Constructor function\n', '    *\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    */\n', '    constructor()\n', '    public {\n', '        owner = msg.sender;\n', '        symbol = "NEL";\n', '        name = "NelCoin";\n', '        decimals = 2;\n', '        forSale = 12000000 * (10 ** uint(decimals));\n', '        totalSupply = 21000000 * (10 ** uint256(decimals));\n', '        _balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * Get the token balance for account\n', '    *\n', '    * Get token balance of `_owner` account\n', '    *\n', '    * @param _owner The address of the owner\n', '    */\n', '    function balanceOf(address _owner)\n', '    external view\n', '    returns(uint256 balance) {\n', '        return _balanceOf[_owner];\n', '    }\n', '\n', '    /**\n', '    * Internal transfer, only can be called by this contract\n', '    */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0), "use burn() instead");\n', '        // Check if the sender has enough\n', '        require(_balanceOf[_from] >= _value, "not enough balance");\n', '        // Subtract from the sender\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens\n', '    *\n', '    * Send `_value` tokens to `_to` from your account\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens from other address\n', '    *\n', '    * Send `_value` tokens to `_to` on behalf of `_from`\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        require(_value <= _allowance[_from][msg.sender], "allowance too loow");     // Check allowance\n', '        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        emit Approval(_from, _to, _allowance[_from][_to]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    returns(bool success) {\n', '        _allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address and notify\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    * @param _extraData some extra information to send to the approved contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    external\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender)\n', '    external view\n', '    returns(uint256 amount) {\n', '        return _allowance[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '    external\n', '    returns(bool success) {\n', '        _allowance[msg.sender][_spender] = _allowance[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '    external\n', '    returns(bool success) {\n', '        uint256 oldValue = _allowance[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            _allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            _allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroy tokens\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly\n', '    *\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        _burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the sender\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value)\n', '    external\n', '    returns(bool success) {\n', '        require(_value <= _allowance[_from][msg.sender], "allowance too low");                           // Check allowance\n', '        require(_value <= _balanceOf[_from], "balance too low");                                       // Is tehere enough coins on account\n', "        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);  // Subtract from the sender's allowance\n", '        _burn(_from, _value);\n', '        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    //internal burn function\n', '    function _burn(address _from, uint256 _value)\n', '    internal {\n', '        require(_balanceOf[_from] >= _value, "balance too low");               // Check if the targeted balance is enough\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);              // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '\t//We accept intentional donations in ETH\n', '    event Donated(address indexed _from, uint256 _value);\n', '\n', '\t/**\n', '    * Donate ETH tokens to contract (Owner)\n', '    */\n', '\tfunction donation() \n', '    external payable \n', '    returns (bool success){\n', '        emit Donated(msg.sender, msg.value);\n', '        return(true);\n', '    }\n', '    \n', '    //Don`t accept accidental ETH\n', '    function()\n', '    external payable\n', '    {\n', '        require(false, "Use fund() or donation()");\n', '    }\n', '    \n', '\t/**\n', '\t * Buy NelCoin using ETH\n', '\t * Contract is selling tokens at price 20000NEL/1ETH, \n', '\t * total 12000000NEL for sale\n', '\t */\n', '\tfunction fund()\n', '\texternal payable\n', '\treturns (uint amount){\n', '\t\trequire(forSale > 0, "Sold out!");\n', '\t\tuint tokenCount = ((msg.value).mul(20000 * (10 ** uint(decimals)))).div(10**18);\n', '\t\trequire(tokenCount >= 1, "Send more ETH to buy at least one token!");\n', '\t\trequire(tokenCount <= forSale, "You want too much! Check forSale()");\n', '\t\tforSale -= tokenCount;\n', '\t\t_transfer(owner, msg.sender, tokenCount);\n', '\t\treturn tokenCount;\n', '\t}\n', '\t\n', '\t/**\n', '    * Tranfer all ETH from contract to Owner addres.\n', '    */\n', '    function withdraw()\n', '    onlyOwner external\n', '    returns (bool success){\n', '        require(address(this).balance > 0, "Nothing to withdraw");\n', '        owner.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\t\n', '\t/**\n', '    * Transfer some ETH tokens from contract\n', '    *\n', '    * Transfer _value of ETH from contract to Owner addres.\n', '    * @param _value number of wei to trasfer\n', '    */\n', '\tfunction withdraw(uint _value)\n', '    onlyOwner external\n', '    returns (bool success){\n', '\t\trequire(_value > 0, "provide amount pls");\n', '\t\trequire(_value < address(this).balance, "Too much! Check balance()");\n', '\t\towner.transfer(_value);\n', '        return true;\n', '\t}\n', '\t\n', '    /**\n', '    * Check ETH balance of contract\n', '    */\n', '\tfunction balance()\n', '\texternal view\n', '\treturns (uint amount){\n', '\t\treturn (address(this).balance);\n', '\t}\n', '    \n', '\t/**\n', '    * Transfer ERC20 tokens from contract\n', '    *\n', '    * Tranfer _amount of ERC20 from contract _tokenAddress to Owner addres.\n', '    *\n', '    * @param _amount amount of ERC20 tokens to be transferred \n', '\t* @param _tokenAddress address of ERC20 token contract\n', '    */\n', '\tfunction transferAnyERC20Token(address _tokenAddress, uint256 _amount)\n', '    onlyOwner external\n', '    returns(bool success) {\n', '        return ERC20Interface(_tokenAddress).transfer(owner, _amount);\n', '    }\n', '}']
