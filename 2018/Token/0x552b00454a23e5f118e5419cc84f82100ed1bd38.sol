['pragma solidity ^0.4.18;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function safeSub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract SATEToken is EIP20Interface, SafeMath {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string constant public name = "SATEToken";\n', '    uint8 constant public decimals = 18;                //How many decimals to show.\n', '    string constant public symbol = "SATE";\n', '\n', '    mapping (address => uint256) public addressType;  // 1 for team; 2 for advisors and partners; 3 for seed investors; 4 for angel investors; 5 for regular investors; 0 for others\n', '    mapping (address => uint256[3]) public releaseForSeed;\n', '    mapping (address => uint256[5]) public releaseForTeamAndAdvisor;\n', '    event AllocateToken(address indexed _to, uint256 _value, uint256 _type);\n', '\n', '    address public owner;\n', '    uint256 public finaliseTime;\n', '\n', '    function SATEToken() public {\n', '        totalSupply = 20*10**26;                        // Update total supply\n', '        balances[msg.sender] = totalSupply;               // Give the creator all initial tokens\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notFinalised() {\n', '        require(finaliseTime == 0);\n', '        _;\n', '    }\n', '\n', '    //\n', '    function allocateToken(address _to, uint256 _eth, uint256 _type) isOwner notFinalised public {\n', '        require(_to != address(0x0) && _eth != 0);\n', '        require(addressType[_to] == 0 || addressType[_to] == _type);\n', '        addressType[_to] = _type;\n', '        uint256 temp;\n', '        if (_type == 3) {\n', '            temp = safeMul(_eth, 60000 * 10**18);\n', '            balances[_to] = safeAdd(balances[_to], temp);\n', '            balances[msg.sender] = safeSub(balances[msg.sender], temp);\n', '            releaseForSeed[_to][0] = safeDiv(safeMul(balances[_to], 60), 100);\n', '            releaseForSeed[_to][1] = safeDiv(safeMul(balances[_to], 30), 100);\n', '            releaseForSeed[_to][2] = 0;\n', '\n', '            AllocateToken(_to, temp, 3);\n', '        } else if (_type == 4) {\n', '            temp = safeMul(_eth, 20000 * 10**18);\n', '            balances[_to] = safeAdd(balances[_to], temp);\n', '            balances[msg.sender] = safeSub(balances[msg.sender], temp);\n', '            AllocateToken(_to, temp, 4);\n', '        } else if (_type == 5) {\n', '            temp = safeMul(_eth, 12000 * 10**18);\n', '            balances[_to] = safeAdd(balances[_to], temp);\n', '            balances[msg.sender] = safeSub(balances[msg.sender], temp);\n', '            AllocateToken(_to, temp, 5);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function allocateTokenForTeam(address _to, uint256 _value) isOwner notFinalised public {\n', '        require(addressType[_to] == 0 || addressType[_to] == 1);\n', '        addressType[_to] = 1;\n', '        balances[_to] = safeAdd(balances[_to], safeMul(_value, 10**18));\n', '        balances[msg.sender] = safeSub(balances[msg.sender], safeMul(_value, 10**18));\n', '\n', '        for (uint256 i = 0; i <= 4; ++i) {\n', '            releaseForTeamAndAdvisor[_to][i] = safeDiv(safeMul(balances[_to], (4 - i) * 25), 100);\n', '        }\n', '\n', '        AllocateToken(_to, safeMul(_value, 10**18), 1);\n', '    }\n', '\n', '    function allocateTokenForAdvisor(address _to, uint256 _value) isOwner public {\n', '        require(addressType[_to] == 0 || addressType[_to] == 2);\n', '        addressType[_to] = 2;\n', '        balances[_to] = safeAdd(balances[_to], safeMul(_value, 10**18));\n', '        balances[msg.sender] = safeSub(balances[msg.sender], safeMul(_value, 10**18));\n', '\n', '        for (uint256 i = 0; i <= 4; ++i) {\n', '            releaseForTeamAndAdvisor[_to][i] = safeDiv(safeMul(balances[_to], (4 - i) * 25), 100);\n', '        }\n', '        AllocateToken(_to, safeMul(_value, 10**18), 2);\n', '    }\n', '\n', '    function changeOwner(address _owner) isOwner public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setFinaliseTime() isOwner public {\n', '        require(finaliseTime == 0);\n', '        finaliseTime = now;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(canTransfer(msg.sender, _value));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function canTransfer(address _from, uint256 _value) internal view returns (bool success) {\n', '        require(finaliseTime != 0);\n', '        uint256 index;\n', '\n', '        if (addressType[_from] == 0 || addressType[_from] == 4 || addressType[_from] == 5) {\n', '            return true;\n', '        }\n', '        // for seed investors\n', '        if (addressType[_from] == 3) {\n', '            index = safeSub(now, finaliseTime) / 2 hours;\n', '            if ( index >= 2) {\n', '                index = 2;\n', '            }\n', '            require(safeSub(balances[_from], _value) >= releaseForSeed[_from][index]);\n', '        } else if (addressType[_from] == 1 || addressType[_from] == 2) {\n', '            index = safeSub(now, finaliseTime) / 2 hours;\n', '            if (index >= 4) {\n', '                index = 4;\n', '            }\n', '            require(safeSub(balances[_from], _value) >= releaseForTeamAndAdvisor[_from][index]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(canTransfer(_from, _value));\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']