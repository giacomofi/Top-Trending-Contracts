['pragma solidity ^0.4.19;\n', '\n', 'contract BaseToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnToken is BaseToken {\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract LockToken is BaseToken {\n', '    struct LockMeta {\n', '        uint256 amount;\n', '        uint256 endtime;\n', '    }\n', '    \n', '    mapping (address => LockMeta) public lockedAddresses;\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        LockMeta storage meta = lockedAddresses[_from];\n', '        require(now >= meta.endtime || meta.amount <= balanceOf[_from] - _value);\n', '        super._transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract CustomToken is BaseToken, BurnToken, LockToken {\n', '    function CustomToken() public {\n', '        totalSupply = 520000000000000000000000000;\n', '        name = &#39;DragonCoin&#39;;\n', '        symbol = &#39;DC&#39;;\n', '        decimals = 18;\n', '        balanceOf[0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6] = totalSupply;\n', '        Transfer(address(0), 0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6, totalSupply);\n', '\n', '        lockedAddresses[0x3a6aeca5666d4af4161e48609f83e80f124170d9] = LockMeta({amount: 400000000000000000000000000, endtime: 1549000800});\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract BaseToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnToken is BaseToken {\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract LockToken is BaseToken {\n', '    struct LockMeta {\n', '        uint256 amount;\n', '        uint256 endtime;\n', '    }\n', '    \n', '    mapping (address => LockMeta) public lockedAddresses;\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        LockMeta storage meta = lockedAddresses[_from];\n', '        require(now >= meta.endtime || meta.amount <= balanceOf[_from] - _value);\n', '        super._transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract CustomToken is BaseToken, BurnToken, LockToken {\n', '    function CustomToken() public {\n', '        totalSupply = 520000000000000000000000000;\n', "        name = 'DragonCoin';\n", "        symbol = 'DC';\n", '        decimals = 18;\n', '        balanceOf[0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6] = totalSupply;\n', '        Transfer(address(0), 0x837b5cc69e11e89b5fdb266a3ff0a71ba37aa3a6, totalSupply);\n', '\n', '        lockedAddresses[0x3a6aeca5666d4af4161e48609f83e80f124170d9] = LockMeta({amount: 400000000000000000000000000, endtime: 1549000800});\n', '    }\n', '}']
