['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Read-only ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ReadOnlyToken {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is ReadOnlyToken {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract MintableToken is Token {\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Sale contract for Daonomic platform should implement this\n', ' */\n', 'contract Sale {\n', '    /**\n', '     * @dev This event should be emitted when user buys something\n', '     */\n', '    event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus);\n', '    /**\n', '     * @dev Should be emitted if new payment method added\n', '     */\n', '    event RateAdd(address token);\n', '    /**\n', '     * @dev Should be emitted if payment method removed\n', '     */\n', '    event RateRemove(address token);\n', '\n', '    /**\n', '     * @dev Calculate rate for specified payment method\n', '     */\n', '    function getRate(address token) constant public returns (uint256);\n', '    /**\n', '     * @dev Calculate current bonus in tokens\n', '     */\n', '    function getBonus(uint256 sold) constant public returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev this version copied from zeppelin-solidity, constant changed to pure\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\n', ' */\n', 'contract Ownable {\n', '    modifier onlyOwner() {\n', '        checkOwner();\n', '        _;\n', '    }\n', '\n', '    function checkOwner() internal;\n', '}\n', '\n', '/**\n', ' * @title Token represents some external value (for example, BTC)\n', ' */\n', 'contract ExternalToken is Token {\n', '    event Mint(address indexed to, uint256 value, bytes data);\n', '    event Burn(address indexed burner, uint256 value, bytes data);\n', '\n', '    function burn(uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @dev This adapter helps to receive tokens. It has some subcontracts for different tokens:\n', ' *   ERC20ReceiveAdapter - for receiving simple ERC20 tokens\n', ' *   ERC223ReceiveAdapter - for receiving ERC223 tokens\n', ' *   ReceiveApprovalAdapter - for receiving ERC20 tokens when token notifies receiver with receiveApproval\n', ' *   EtherReceiveAdapter - for receiving ether (onReceive callback will be used). this is needed for handling ether like tokens\n', ' *   CompatReceiveApproval - implements all these adapters\n', ' */\n', 'contract ReceiveAdapter {\n', '\n', '    /**\n', '     * @dev Receive tokens from someone. Owner of the tokens should approve first\n', '     */\n', '    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal;\n', '}\n', '\n', '/**\n', ' * @dev Helps to receive ERC20-complaint tokens. Owner should call token.approve first\n', ' */\n', 'contract ERC20ReceiveAdapter is ReceiveAdapter {\n', '    function receive(address _token, uint256 _value, bytes _data) public {\n', '        Token token = Token(_token);\n', '        token.transferFrom(msg.sender, this, _value);\n', '        onReceive(_token, msg.sender, _value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC223 TokenReceiver interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract TokenReceiver {\n', '    function onTokenTransfer(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @dev Helps to receive ERC223-complaint tokens. ERC223 Token contract should notify receiver.\n', ' */\n', 'contract ERC223ReceiveAdapter is TokenReceiver, ReceiveAdapter {\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public {\n', '        onReceive(msg.sender, _from, _value, _data);\n', '    }\n', '\n', '    function onTokenTransfer(address _from, uint256 _value, bytes _data) public {\n', '        onReceive(msg.sender, _from, _value, _data);\n', '    }\n', '}\n', '\n', 'contract EtherReceiver {\n', '\tfunction receiveWithData(bytes _data) payable public;\n', '}\n', '\n', 'contract EtherReceiveAdapter is EtherReceiver, ReceiveAdapter {\n', '    function () payable public {\n', '        receiveWithData("");\n', '    }\n', '\n', '    function receiveWithData(bytes _data) payable public {\n', '        onReceive(address(0), msg.sender, msg.value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This ReceiveAdapter supports all possible tokens\n', ' */\n', 'contract CompatReceiveAdapter is ERC20ReceiveAdapter, ERC223ReceiveAdapter, EtherReceiveAdapter {\n', '\n', '}\n', '\n', 'contract AbstractSale is Sale, CompatReceiveAdapter, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Withdraw(address token, address to, uint256 value);\n', '    event Burn(address token, uint256 value, bytes data);\n', '\n', '    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal {\n', '        uint256 sold = getSold(_token, _value);\n', '        require(sold > 0);\n', '        uint256 bonus = getBonus(sold);\n', '        address buyer;\n', '        if (_data.length == 20) {\n', '            buyer = address(toBytes20(_data, 0));\n', '        } else {\n', '            require(_data.length == 0);\n', '            buyer = _from;\n', '        }\n', '        checkPurchaseValid(buyer, sold, bonus);\n', '        doPurchase(buyer, sold, bonus);\n', '        Purchase(buyer, _token, _value, sold, bonus);\n', '        onPurchase(buyer, _token, _value, sold, bonus);\n', '    }\n', '\n', '    function getSold(address _token, uint256 _value) constant public returns (uint256) {\n', '        uint256 rate = getRate(_token);\n', '        require(rate > 0);\n', '        return _value.mul(rate).div(10**18);\n', '    }\n', '\n', '    function getBonus(uint256 sold) constant public returns (uint256);\n', '\n', '    function getRate(address _token) constant public returns (uint256);\n', '\n', '    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal;\n', '\n', '    function checkPurchaseValid(address /*buyer*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\n', '\n', '    }\n', '\n', '    function onPurchase(address /*buyer*/, address /*token*/, uint256 /*value*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\n', '\n', '    }\n', '\n', '    function toBytes20(bytes b, uint256 _start) pure internal returns (bytes20 result) {\n', '        require(_start + 20 <= b.length);\n', '        assembly {\n', '            let from := add(_start, add(b, 0x20))\n', '            result := mload(from)\n', '        }\n', '    }\n', '\n', '    function withdrawEth(address _to, uint256 _value) onlyOwner public {\n', '        withdraw(address(0), _to, _value);\n', '    }\n', '\n', '    function withdraw(address _token, address _to, uint256 _value) onlyOwner public {\n', '        require(_to != address(0));\n', '        verifyCanWithdraw(_token, _to, _value);\n', '        if (_token == address(0)) {\n', '            _to.transfer(_value);\n', '        } else {\n', '            Token(_token).transfer(_to, _value);\n', '        }\n', '        Withdraw(_token, _to, _value);\n', '    }\n', '\n', '    function verifyCanWithdraw(address token, address to, uint256 amount) internal;\n', '\n', '    function burnWithData(address _token, uint256 _value, bytes _data) onlyOwner public {\n', '        ExternalToken(_token).burn(_value, _data);\n', '        Burn(_token, _value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title This sale mints token when user sends accepted payments\n', ' */\n', 'contract MintingSale is AbstractSale {\n', '    MintableToken public token;\n', '\n', '    function MintingSale(address _token) public {\n', '        token = MintableToken(_token);\n', '    }\n', '\n', '    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal {\n', '        token.mint(buyer, sold.add(bonus));\n', '    }\n', '\n', '    function verifyCanWithdraw(address, address, uint256) internal {\n', '\n', '    }\n', '}\n', '\n', '/**\n', ' * @title OwnableImpl\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableImpl is Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function OwnableImpl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    function checkOwner() internal {\n', '        require(msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CappedBonusSale is AbstractSale {\n', '    uint256 public cap;\n', '    uint256 public initialCap;\n', '\n', '    function CappedBonusSale(uint256 _cap) public {\n', '        cap = _cap;\n', '        initialCap = _cap;\n', '    }\n', '\n', '    function checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\n', '        super.checkPurchaseValid(buyer, sold, bonus);\n', '        require(cap >= sold.add(bonus));\n', '    }\n', '\n', '    function onPurchase(address buyer, address token, uint256 value, uint256 sold, uint256 bonus) internal {\n', '        super.onPurchase(buyer, token, value, sold, bonus);\n', '        cap = cap.sub(sold).sub(bonus);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Secured\n', ' * @dev Adds only(role) modifier. Subcontracts should implement checkRole to check if caller is allowed to do action.\n', ' */\n', 'contract Secured {\n', '    modifier only(string role) {\n', '        require(msg.sender == getRole(role));\n', '        _;\n', '    }\n', '\n', '    function getRole(string role) constant public returns (address);\n', '}\n', '\n', 'contract SecuredImpl is Ownable, Secured {\n', '\tmapping(string => address) users;\n', '\tevent RoleTransferred(address indexed previousUser, address indexed newUser, string role);\n', '\n', '\tfunction getRole(string role) constant public returns (address) {\n', '\t\treturn users[role];\n', '\t}\n', '\n', '\tfunction transferRole(string role, address to) onlyOwner public {\n', '\t\trequire(to != address(0));\n', '\t\tRoleTransferred(users[role], to, role);\n', '\t\tusers[role] = to;\n', '\t}\n', '}\n', '\n', 'contract Whitelist is Secured {\n', '\tmapping(address => bool) whitelist;\n', '\tevent WhitelistChange(address indexed addr, bool allow);\n', '\n', '\tfunction isInWhitelist(address addr) constant public returns (bool) {\n', '\t\treturn whitelist[addr];\n', '\t}\n', '\n', '\tfunction setWhitelist(address addr, bool allow) only("operator") public {\n', '\t\tsetWhitelistInternal(addr, allow);\n', '\t}\n', '\n', '\tfunction setWhitelistInternal(address addr, bool allow) internal {\n', '\t\twhitelist[addr] = allow;\n', '\t\tWhitelistChange(addr, allow);\n', '\t}\n', '}\n', '\n', 'contract WhitelistSale is AbstractSale, Whitelist {\n', '\tfunction checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\n', '\t\tsuper.checkPurchaseValid(buyer, sold, bonus);\n', '\t\trequire(isInWhitelist(buyer));\n', '\t}\n', '}\n', '\n', 'contract DaoxCommissionSale is AbstractSale {\n', '\tfunction getSold(address _token, uint256 _value) constant public returns (uint256) {\n', '\t\treturn super.getSold(_token, _value).div(99).mul(100);\n', '\t}\n', '}\n', '\n', 'contract ReadOnlyTokenImpl is ReadOnlyToken {\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract TokenImpl is Token, ReadOnlyTokenImpl {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emitTransfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function emitTransfer(address _from, address _to, uint256 _value) internal {\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emitTransfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is Token {\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\tfunction burn(uint256 _value) public;\n', '}\n', '\n', 'contract BurnableTokenImpl is TokenImpl, BurnableToken {\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', '\t\t// sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '\t\taddress burner = msg.sender;\n', '\t\tbalances[burner] = balances[burner].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\tBurn(burner, _value);\n', '\t}\n', '}\n', '\n', 'contract MintableTokenImpl is Ownable, TokenImpl, MintableToken {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emitMint(_to, _amount);\n', '        emitTransfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function emitMint(address _to, uint256 _value) internal {\n', '        Mint(_to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is Pausable, TokenImpl {\n', '\n', '\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '}\n', '\n', 'contract ZenomeToken is OwnableImpl, PausableToken, MintableTokenImpl, BurnableTokenImpl {\n', '\tstring public constant name = "Zenome";\n', '\tstring public constant symbol = "sZNA";\n', '\tuint8 public constant decimals = 18;\n', '\n', '\tfunction burn(uint256 _value) public whenNotPaused {\n', '\t\tsuper.burn(_value);\n', '\t}\n', '}\n', '\n', 'contract ZenomeSale is OwnableImpl, SecuredImpl, DaoxCommissionSale, MintingSale, CappedBonusSale, WhitelistSale {\n', '\taddress public btcToken;\n', '\tuint256 public ethRate = 1350 * 10**18;\n', '\tuint256 public btcEthRate = 10 * 10**10;\n', '\n', '\tfunction ZenomeSale(\n', '\t\taddress _mintableToken,\n', '\t\taddress _btcToken,\n', '\t\tuint256 _cap)\n', '\tMintingSale(_mintableToken)\n', '\tCappedBonusSale(_cap) {\n', '\t\tbtcToken = _btcToken;\n', '\t\tRateAdd(address(0));\n', '\t\tRateAdd(_btcToken);\n', '\t}\n', '\n', '\tfunction getRate(address _token) constant public returns (uint256) {\n', '\t\tif (_token == btcToken) {\n', '\t\t\treturn btcEthRate * ethRate;\n', '\t\t} else if (_token == address(0)) {\n', '\t\t\treturn ethRate;\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getBonus(uint256 sold) constant public returns (uint256) {\n', '\t\tif (sold > 850000 * 10**18) {\n', '\t\t\treturn sold.mul(50).div(100);\n', '\t\t} else if (sold > 340000 * 10**18) {\n', '\t\t\treturn sold.mul(33).div(100);\n', '\t\t} else if (sold > 85000 * 10**18) {\n', '\t\t\treturn sold.mul(20).div(100);\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '\n', '\tevent EthRateChange(uint256 rate);\n', '\n', '\tfunction setEthRate(uint256 _ethRate) onlyOwner public {\n', '\t\tethRate = _ethRate;\n', '\t\tEthRateChange(_ethRate);\n', '\t}\n', '\n', '\tevent BtcEthRateChange(uint256 rate);\n', '\n', '\tfunction setBtcEthRate(uint256 _btcEthRate) onlyOwner public {\n', '\t\tbtcEthRate = _btcEthRate;\n', '\t\tBtcEthRateChange(_btcEthRate);\n', '\t}\n', '\n', '\tfunction withdrawBtc(bytes _to, uint256 _value) onlyOwner public {\n', '\t\tburnWithData(btcToken, _value, _to);\n', '\t}\n', '\n', '\tfunction transferTokenOwnership(address newOwner) onlyOwner public {\n', '\t\tOwnableImpl(token).transferOwnership(newOwner);\n', '\t}\n', '\n', '\tfunction pauseToken() onlyOwner public {\n', '\t\tPausable(token).pause();\n', '\t}\n', '\n', '\tfunction unpauseToken() onlyOwner public {\n', '\t\tPausable(token).unpause();\n', '\t}\n', '\n', '\tfunction transfer(address beneficiary, uint256 amount) onlyOwner public {\n', '\t\temulatePurchase(beneficiary, address(1), 0, amount, 0);\n', '\t}\n', '\n', '\tfunction emulatePurchase(address beneficiary, address paymentMethod, uint256 value, uint256 amount, uint256 bonus) onlyOwner public {\n', '\t\tsetWhitelistInternal(beneficiary, true);\n', '\t\tdoPurchase(beneficiary, amount, bonus);\n', '\t\tPurchase(beneficiary, paymentMethod, value, amount, bonus);\n', '\t\tonPurchase(beneficiary, paymentMethod, value, amount, bonus);\n', '\t}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Read-only ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ReadOnlyToken {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is ReadOnlyToken {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract MintableToken is Token {\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Sale contract for Daonomic platform should implement this\n', ' */\n', 'contract Sale {\n', '    /**\n', '     * @dev This event should be emitted when user buys something\n', '     */\n', '    event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus);\n', '    /**\n', '     * @dev Should be emitted if new payment method added\n', '     */\n', '    event RateAdd(address token);\n', '    /**\n', '     * @dev Should be emitted if payment method removed\n', '     */\n', '    event RateRemove(address token);\n', '\n', '    /**\n', '     * @dev Calculate rate for specified payment method\n', '     */\n', '    function getRate(address token) constant public returns (uint256);\n', '    /**\n', '     * @dev Calculate current bonus in tokens\n', '     */\n', '    function getBonus(uint256 sold) constant public returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev this version copied from zeppelin-solidity, constant changed to pure\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\n', ' */\n', 'contract Ownable {\n', '    modifier onlyOwner() {\n', '        checkOwner();\n', '        _;\n', '    }\n', '\n', '    function checkOwner() internal;\n', '}\n', '\n', '/**\n', ' * @title Token represents some external value (for example, BTC)\n', ' */\n', 'contract ExternalToken is Token {\n', '    event Mint(address indexed to, uint256 value, bytes data);\n', '    event Burn(address indexed burner, uint256 value, bytes data);\n', '\n', '    function burn(uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @dev This adapter helps to receive tokens. It has some subcontracts for different tokens:\n', ' *   ERC20ReceiveAdapter - for receiving simple ERC20 tokens\n', ' *   ERC223ReceiveAdapter - for receiving ERC223 tokens\n', ' *   ReceiveApprovalAdapter - for receiving ERC20 tokens when token notifies receiver with receiveApproval\n', ' *   EtherReceiveAdapter - for receiving ether (onReceive callback will be used). this is needed for handling ether like tokens\n', ' *   CompatReceiveApproval - implements all these adapters\n', ' */\n', 'contract ReceiveAdapter {\n', '\n', '    /**\n', '     * @dev Receive tokens from someone. Owner of the tokens should approve first\n', '     */\n', '    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal;\n', '}\n', '\n', '/**\n', ' * @dev Helps to receive ERC20-complaint tokens. Owner should call token.approve first\n', ' */\n', 'contract ERC20ReceiveAdapter is ReceiveAdapter {\n', '    function receive(address _token, uint256 _value, bytes _data) public {\n', '        Token token = Token(_token);\n', '        token.transferFrom(msg.sender, this, _value);\n', '        onReceive(_token, msg.sender, _value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC223 TokenReceiver interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract TokenReceiver {\n', '    function onTokenTransfer(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @dev Helps to receive ERC223-complaint tokens. ERC223 Token contract should notify receiver.\n', ' */\n', 'contract ERC223ReceiveAdapter is TokenReceiver, ReceiveAdapter {\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public {\n', '        onReceive(msg.sender, _from, _value, _data);\n', '    }\n', '\n', '    function onTokenTransfer(address _from, uint256 _value, bytes _data) public {\n', '        onReceive(msg.sender, _from, _value, _data);\n', '    }\n', '}\n', '\n', 'contract EtherReceiver {\n', '\tfunction receiveWithData(bytes _data) payable public;\n', '}\n', '\n', 'contract EtherReceiveAdapter is EtherReceiver, ReceiveAdapter {\n', '    function () payable public {\n', '        receiveWithData("");\n', '    }\n', '\n', '    function receiveWithData(bytes _data) payable public {\n', '        onReceive(address(0), msg.sender, msg.value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This ReceiveAdapter supports all possible tokens\n', ' */\n', 'contract CompatReceiveAdapter is ERC20ReceiveAdapter, ERC223ReceiveAdapter, EtherReceiveAdapter {\n', '\n', '}\n', '\n', 'contract AbstractSale is Sale, CompatReceiveAdapter, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Withdraw(address token, address to, uint256 value);\n', '    event Burn(address token, uint256 value, bytes data);\n', '\n', '    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal {\n', '        uint256 sold = getSold(_token, _value);\n', '        require(sold > 0);\n', '        uint256 bonus = getBonus(sold);\n', '        address buyer;\n', '        if (_data.length == 20) {\n', '            buyer = address(toBytes20(_data, 0));\n', '        } else {\n', '            require(_data.length == 0);\n', '            buyer = _from;\n', '        }\n', '        checkPurchaseValid(buyer, sold, bonus);\n', '        doPurchase(buyer, sold, bonus);\n', '        Purchase(buyer, _token, _value, sold, bonus);\n', '        onPurchase(buyer, _token, _value, sold, bonus);\n', '    }\n', '\n', '    function getSold(address _token, uint256 _value) constant public returns (uint256) {\n', '        uint256 rate = getRate(_token);\n', '        require(rate > 0);\n', '        return _value.mul(rate).div(10**18);\n', '    }\n', '\n', '    function getBonus(uint256 sold) constant public returns (uint256);\n', '\n', '    function getRate(address _token) constant public returns (uint256);\n', '\n', '    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal;\n', '\n', '    function checkPurchaseValid(address /*buyer*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\n', '\n', '    }\n', '\n', '    function onPurchase(address /*buyer*/, address /*token*/, uint256 /*value*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\n', '\n', '    }\n', '\n', '    function toBytes20(bytes b, uint256 _start) pure internal returns (bytes20 result) {\n', '        require(_start + 20 <= b.length);\n', '        assembly {\n', '            let from := add(_start, add(b, 0x20))\n', '            result := mload(from)\n', '        }\n', '    }\n', '\n', '    function withdrawEth(address _to, uint256 _value) onlyOwner public {\n', '        withdraw(address(0), _to, _value);\n', '    }\n', '\n', '    function withdraw(address _token, address _to, uint256 _value) onlyOwner public {\n', '        require(_to != address(0));\n', '        verifyCanWithdraw(_token, _to, _value);\n', '        if (_token == address(0)) {\n', '            _to.transfer(_value);\n', '        } else {\n', '            Token(_token).transfer(_to, _value);\n', '        }\n', '        Withdraw(_token, _to, _value);\n', '    }\n', '\n', '    function verifyCanWithdraw(address token, address to, uint256 amount) internal;\n', '\n', '    function burnWithData(address _token, uint256 _value, bytes _data) onlyOwner public {\n', '        ExternalToken(_token).burn(_value, _data);\n', '        Burn(_token, _value, _data);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title This sale mints token when user sends accepted payments\n', ' */\n', 'contract MintingSale is AbstractSale {\n', '    MintableToken public token;\n', '\n', '    function MintingSale(address _token) public {\n', '        token = MintableToken(_token);\n', '    }\n', '\n', '    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal {\n', '        token.mint(buyer, sold.add(bonus));\n', '    }\n', '\n', '    function verifyCanWithdraw(address, address, uint256) internal {\n', '\n', '    }\n', '}\n', '\n', '/**\n', ' * @title OwnableImpl\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableImpl is Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function OwnableImpl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    function checkOwner() internal {\n', '        require(msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CappedBonusSale is AbstractSale {\n', '    uint256 public cap;\n', '    uint256 public initialCap;\n', '\n', '    function CappedBonusSale(uint256 _cap) public {\n', '        cap = _cap;\n', '        initialCap = _cap;\n', '    }\n', '\n', '    function checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\n', '        super.checkPurchaseValid(buyer, sold, bonus);\n', '        require(cap >= sold.add(bonus));\n', '    }\n', '\n', '    function onPurchase(address buyer, address token, uint256 value, uint256 sold, uint256 bonus) internal {\n', '        super.onPurchase(buyer, token, value, sold, bonus);\n', '        cap = cap.sub(sold).sub(bonus);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Secured\n', ' * @dev Adds only(role) modifier. Subcontracts should implement checkRole to check if caller is allowed to do action.\n', ' */\n', 'contract Secured {\n', '    modifier only(string role) {\n', '        require(msg.sender == getRole(role));\n', '        _;\n', '    }\n', '\n', '    function getRole(string role) constant public returns (address);\n', '}\n', '\n', 'contract SecuredImpl is Ownable, Secured {\n', '\tmapping(string => address) users;\n', '\tevent RoleTransferred(address indexed previousUser, address indexed newUser, string role);\n', '\n', '\tfunction getRole(string role) constant public returns (address) {\n', '\t\treturn users[role];\n', '\t}\n', '\n', '\tfunction transferRole(string role, address to) onlyOwner public {\n', '\t\trequire(to != address(0));\n', '\t\tRoleTransferred(users[role], to, role);\n', '\t\tusers[role] = to;\n', '\t}\n', '}\n', '\n', 'contract Whitelist is Secured {\n', '\tmapping(address => bool) whitelist;\n', '\tevent WhitelistChange(address indexed addr, bool allow);\n', '\n', '\tfunction isInWhitelist(address addr) constant public returns (bool) {\n', '\t\treturn whitelist[addr];\n', '\t}\n', '\n', '\tfunction setWhitelist(address addr, bool allow) only("operator") public {\n', '\t\tsetWhitelistInternal(addr, allow);\n', '\t}\n', '\n', '\tfunction setWhitelistInternal(address addr, bool allow) internal {\n', '\t\twhitelist[addr] = allow;\n', '\t\tWhitelistChange(addr, allow);\n', '\t}\n', '}\n', '\n', 'contract WhitelistSale is AbstractSale, Whitelist {\n', '\tfunction checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\n', '\t\tsuper.checkPurchaseValid(buyer, sold, bonus);\n', '\t\trequire(isInWhitelist(buyer));\n', '\t}\n', '}\n', '\n', 'contract DaoxCommissionSale is AbstractSale {\n', '\tfunction getSold(address _token, uint256 _value) constant public returns (uint256) {\n', '\t\treturn super.getSold(_token, _value).div(99).mul(100);\n', '\t}\n', '}\n', '\n', 'contract ReadOnlyTokenImpl is ReadOnlyToken {\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract TokenImpl is Token, ReadOnlyTokenImpl {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emitTransfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function emitTransfer(address _from, address _to, uint256 _value) internal {\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emitTransfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is Token {\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\tfunction burn(uint256 _value) public;\n', '}\n', '\n', 'contract BurnableTokenImpl is TokenImpl, BurnableToken {\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', "\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '\t\taddress burner = msg.sender;\n', '\t\tbalances[burner] = balances[burner].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\tBurn(burner, _value);\n', '\t}\n', '}\n', '\n', 'contract MintableTokenImpl is Ownable, TokenImpl, MintableToken {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emitMint(_to, _amount);\n', '        emitTransfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function emitMint(address _to, uint256 _value) internal {\n', '        Mint(_to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is Pausable, TokenImpl {\n', '\n', '\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '}\n', '\n', 'contract ZenomeToken is OwnableImpl, PausableToken, MintableTokenImpl, BurnableTokenImpl {\n', '\tstring public constant name = "Zenome";\n', '\tstring public constant symbol = "sZNA";\n', '\tuint8 public constant decimals = 18;\n', '\n', '\tfunction burn(uint256 _value) public whenNotPaused {\n', '\t\tsuper.burn(_value);\n', '\t}\n', '}\n', '\n', 'contract ZenomeSale is OwnableImpl, SecuredImpl, DaoxCommissionSale, MintingSale, CappedBonusSale, WhitelistSale {\n', '\taddress public btcToken;\n', '\tuint256 public ethRate = 1350 * 10**18;\n', '\tuint256 public btcEthRate = 10 * 10**10;\n', '\n', '\tfunction ZenomeSale(\n', '\t\taddress _mintableToken,\n', '\t\taddress _btcToken,\n', '\t\tuint256 _cap)\n', '\tMintingSale(_mintableToken)\n', '\tCappedBonusSale(_cap) {\n', '\t\tbtcToken = _btcToken;\n', '\t\tRateAdd(address(0));\n', '\t\tRateAdd(_btcToken);\n', '\t}\n', '\n', '\tfunction getRate(address _token) constant public returns (uint256) {\n', '\t\tif (_token == btcToken) {\n', '\t\t\treturn btcEthRate * ethRate;\n', '\t\t} else if (_token == address(0)) {\n', '\t\t\treturn ethRate;\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getBonus(uint256 sold) constant public returns (uint256) {\n', '\t\tif (sold > 850000 * 10**18) {\n', '\t\t\treturn sold.mul(50).div(100);\n', '\t\t} else if (sold > 340000 * 10**18) {\n', '\t\t\treturn sold.mul(33).div(100);\n', '\t\t} else if (sold > 85000 * 10**18) {\n', '\t\t\treturn sold.mul(20).div(100);\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t}\n', '\n', '\tevent EthRateChange(uint256 rate);\n', '\n', '\tfunction setEthRate(uint256 _ethRate) onlyOwner public {\n', '\t\tethRate = _ethRate;\n', '\t\tEthRateChange(_ethRate);\n', '\t}\n', '\n', '\tevent BtcEthRateChange(uint256 rate);\n', '\n', '\tfunction setBtcEthRate(uint256 _btcEthRate) onlyOwner public {\n', '\t\tbtcEthRate = _btcEthRate;\n', '\t\tBtcEthRateChange(_btcEthRate);\n', '\t}\n', '\n', '\tfunction withdrawBtc(bytes _to, uint256 _value) onlyOwner public {\n', '\t\tburnWithData(btcToken, _value, _to);\n', '\t}\n', '\n', '\tfunction transferTokenOwnership(address newOwner) onlyOwner public {\n', '\t\tOwnableImpl(token).transferOwnership(newOwner);\n', '\t}\n', '\n', '\tfunction pauseToken() onlyOwner public {\n', '\t\tPausable(token).pause();\n', '\t}\n', '\n', '\tfunction unpauseToken() onlyOwner public {\n', '\t\tPausable(token).unpause();\n', '\t}\n', '\n', '\tfunction transfer(address beneficiary, uint256 amount) onlyOwner public {\n', '\t\temulatePurchase(beneficiary, address(1), 0, amount, 0);\n', '\t}\n', '\n', '\tfunction emulatePurchase(address beneficiary, address paymentMethod, uint256 value, uint256 amount, uint256 bonus) onlyOwner public {\n', '\t\tsetWhitelistInternal(beneficiary, true);\n', '\t\tdoPurchase(beneficiary, amount, bonus);\n', '\t\tPurchase(beneficiary, paymentMethod, value, amount, bonus);\n', '\t\tonPurchase(beneficiary, paymentMethod, value, amount, bonus);\n', '\t}\n', '}']
