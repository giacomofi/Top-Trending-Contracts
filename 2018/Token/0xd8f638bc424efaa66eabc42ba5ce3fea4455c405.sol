['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath from Zeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        assert(c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 Interface\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 Token\n', ' * @dev This contract is based on Zeppelin StandardToken.sol and MonolithDAO Token.sol\n', ' */\n', 'contract StandardERC20Token is ERC20Interface {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Name of ERC20 token\n', '    string public name;\n', '\n', '    // Symbol of ERC20 token\n', '    string public symbol;\n', '\n', '    // Decimals of ERC20 token\n', '    uint8 public decimals;\n', '\n', '    // Total supply of ERC20 token\n', '    uint256 internal supply;\n', '\n', '    // Mapping of balances\n', '    mapping(address => uint256) internal balances;\n', '\n', '    // Mapping of approval\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    // Modifier to check the length of msg.data\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        if(msg.data.length < size.add(4)) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Don&#39;t accept ETH\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor\n', '    *\n', '    * @param _issuer The account who owns all tokens\n', '    * @param _name The name of the token\n', '    * @param _symbol The symbol of the token\n', '    * @param _decimals The decimals of the token\n', '    * @param _amount The initial amount of the token\n', '    */\n', '    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) public {\n', '        require(_issuer != address(0));\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        require(_decimals <= 18);\n', '        require(_amount > 0);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        supply = _amount.mul(10 ** uint256(decimals));\n', '        balances[_issuer] = supply;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the total amount of tokens\n', '    *\n', '    * @return Total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the balance of the specified address\n', '    *\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @return The balance\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of token to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of token to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(96) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '    * To prevent attack described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729, \n', '    * approve is not allowed when the allowance of specified spender is not zero, call increaseApproval \n', '    * or decreaseApproval to change an allowance\n', '    *\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @param _value The amount of wei to be approved for transfer\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '        require(allowed[msg.sender][_spender] == 0);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _owner The address of the account owning tokens\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @return Amount of remaining tokens allowed to spent\n', '    */\n', '    function allowance(address _owner, address _spender) onlyPayloadSize(64) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _spender The address which will spend the funds\n', '    * @param _value The amount of tokens to increase the allowance by\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function increaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _spender The address which will spend the funds\n', '    * @param _value The amount of tokens to decrease the allowance by\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function decreaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        uint256 value = allowed[msg.sender][_spender];\n', '\n', '        if (_value >= value) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = value.sub(_value);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title LongHash ERC20 Token\n', '  */\n', 'contract LongHashERC20Token is StandardERC20Token {\n', '\n', '    // Issuer of tokens\n', '    address public issuer;\n', '\n', '    // Events\n', '    event Issuance(address indexed _from, uint256 _amount, uint256 _value);\n', '    event Burn(address indexed _from, uint256 _amount, uint256 _value);\n', '\n', '    // Modifier to check the issuer\n', '    modifier onlyIssuer() {\n', '        if (msg.sender != issuer) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor\n', '    *\n', '    * @param _issuer The account who owns all tokens\n', '    * @param _name The name of the token\n', '    * @param _symbol The symbol of the token\n', '    * @param _decimals The decimals of the token\n', '    * @param _amount The initial amount of the token\n', '    */\n', '    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) \n', '        StandardERC20Token(_issuer, _name, _symbol, _decimals, _amount) public {\n', '        issuer = _issuer;\n', '    }\n', '\n', '    /**\n', '    * @dev Issuing tokens\n', '    *\n', '    * @param _amount The amount of tokens to be issued\n', '    * @return Whether the issuance was successful or not\n', '    */\n', '    function issue(uint256 _amount) onlyIssuer() public returns (bool) {\n', '        require(_amount > 0);\n', '        uint256 value = _amount.mul(10 ** uint256(decimals));\n', '\n', '        supply = supply.add(value);\n', '        balances[issuer] = balances[issuer].add(value);\n', '\n', '        emit Issuance(msg.sender, _amount, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn tokens\n', '    *\n', '    * @param _amount The amount of tokens to be burned\n', '    * @return Whether the burn was successful or not\n', '    */\n', '    function burn(uint256 _amount) onlyIssuer() public returns (bool) {\n', '        uint256 value;\n', '\n', '        require(_amount > 0);\n', '        value = _amount.mul(10 ** uint256(decimals));\n', '        require(supply >= value);\n', '        require(balances[issuer] >= value);\n', '\n', '        supply = supply.sub(value);\n', '        balances[issuer] = balances[issuer].sub(value);\n', '\n', '        emit Burn(msg.sender, _amount, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the issuer of tokens\n', '    *\n', '    * @param _to The new issuer\n', '    * @param _transfer Whether transfer the old issuer&#39;s tokens to new issuer\n', '    * @return Whether the burn was successful or not\n', '    */\n', '    function changeIssuer(address _to, bool _transfer) onlyIssuer() public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (_transfer) {\n', '            balances[_to] = balances[issuer];\n', '            balances[issuer] = 0;\n', '        }\n', '        issuer = _to;\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath from Zeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        assert(c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 Interface\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 Token\n', ' * @dev This contract is based on Zeppelin StandardToken.sol and MonolithDAO Token.sol\n', ' */\n', 'contract StandardERC20Token is ERC20Interface {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Name of ERC20 token\n', '    string public name;\n', '\n', '    // Symbol of ERC20 token\n', '    string public symbol;\n', '\n', '    // Decimals of ERC20 token\n', '    uint8 public decimals;\n', '\n', '    // Total supply of ERC20 token\n', '    uint256 internal supply;\n', '\n', '    // Mapping of balances\n', '    mapping(address => uint256) internal balances;\n', '\n', '    // Mapping of approval\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    // Modifier to check the length of msg.data\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        if(msg.data.length < size.add(4)) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', "    * @dev Don't accept ETH\n", '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor\n', '    *\n', '    * @param _issuer The account who owns all tokens\n', '    * @param _name The name of the token\n', '    * @param _symbol The symbol of the token\n', '    * @param _decimals The decimals of the token\n', '    * @param _amount The initial amount of the token\n', '    */\n', '    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) public {\n', '        require(_issuer != address(0));\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        require(_decimals <= 18);\n', '        require(_amount > 0);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        supply = _amount.mul(10 ** uint256(decimals));\n', '        balances[_issuer] = supply;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the total amount of tokens\n', '    *\n', '    * @return Total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the balance of the specified address\n', '    *\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @return The balance\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of token to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of token to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(96) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '    * To prevent attack described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729, \n', '    * approve is not allowed when the allowance of specified spender is not zero, call increaseApproval \n', '    * or decreaseApproval to change an allowance\n', '    *\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @param _value The amount of wei to be approved for transfer\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '        require(allowed[msg.sender][_spender] == 0);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _owner The address of the account owning tokens\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @return Amount of remaining tokens allowed to spent\n', '    */\n', '    function allowance(address _owner, address _spender) onlyPayloadSize(64) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _spender The address which will spend the funds\n', '    * @param _value The amount of tokens to increase the allowance by\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function increaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender\n', '    *\n', '    * @param _spender The address which will spend the funds\n', '    * @param _value The amount of tokens to decrease the allowance by\n', '    * @return Whether the approval was successful or not\n', '    */\n', '    function decreaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        uint256 value = allowed[msg.sender][_spender];\n', '\n', '        if (_value >= value) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = value.sub(_value);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title LongHash ERC20 Token\n', '  */\n', 'contract LongHashERC20Token is StandardERC20Token {\n', '\n', '    // Issuer of tokens\n', '    address public issuer;\n', '\n', '    // Events\n', '    event Issuance(address indexed _from, uint256 _amount, uint256 _value);\n', '    event Burn(address indexed _from, uint256 _amount, uint256 _value);\n', '\n', '    // Modifier to check the issuer\n', '    modifier onlyIssuer() {\n', '        if (msg.sender != issuer) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor\n', '    *\n', '    * @param _issuer The account who owns all tokens\n', '    * @param _name The name of the token\n', '    * @param _symbol The symbol of the token\n', '    * @param _decimals The decimals of the token\n', '    * @param _amount The initial amount of the token\n', '    */\n', '    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) \n', '        StandardERC20Token(_issuer, _name, _symbol, _decimals, _amount) public {\n', '        issuer = _issuer;\n', '    }\n', '\n', '    /**\n', '    * @dev Issuing tokens\n', '    *\n', '    * @param _amount The amount of tokens to be issued\n', '    * @return Whether the issuance was successful or not\n', '    */\n', '    function issue(uint256 _amount) onlyIssuer() public returns (bool) {\n', '        require(_amount > 0);\n', '        uint256 value = _amount.mul(10 ** uint256(decimals));\n', '\n', '        supply = supply.add(value);\n', '        balances[issuer] = balances[issuer].add(value);\n', '\n', '        emit Issuance(msg.sender, _amount, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn tokens\n', '    *\n', '    * @param _amount The amount of tokens to be burned\n', '    * @return Whether the burn was successful or not\n', '    */\n', '    function burn(uint256 _amount) onlyIssuer() public returns (bool) {\n', '        uint256 value;\n', '\n', '        require(_amount > 0);\n', '        value = _amount.mul(10 ** uint256(decimals));\n', '        require(supply >= value);\n', '        require(balances[issuer] >= value);\n', '\n', '        supply = supply.sub(value);\n', '        balances[issuer] = balances[issuer].sub(value);\n', '\n', '        emit Burn(msg.sender, _amount, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the issuer of tokens\n', '    *\n', '    * @param _to The new issuer\n', "    * @param _transfer Whether transfer the old issuer's tokens to new issuer\n", '    * @return Whether the burn was successful or not\n', '    */\n', '    function changeIssuer(address _to, bool _transfer) onlyIssuer() public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (_transfer) {\n', '            balances[_to] = balances[issuer];\n', '            balances[issuer] = 0;\n', '        }\n', '        issuer = _to;\n', '\n', '        return true;\n', '    }\n', '}']
