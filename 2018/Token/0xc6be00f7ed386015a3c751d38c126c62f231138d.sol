['/*\n', '*\n', '* Universal Mobile Token smart contract\n', '* Developed by Phenom.team <info@phenom.team>   \n', '*\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract UniversalMobileToken is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    /*\n', '        Standard ERC20 token\n', '    */\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    // Name of token\n', '    string public name;\n', '    // Short symbol for token\n', '    string public symbol;\n', '\n', '    // Nubmer of decimal places\n', '    uint public decimals;\n', '\n', '    // Token&#39;s total supply\n', '    uint public totalSupply;\n', '\n', '    // Is minting active\n', '    bool public mintingIsFinished;\n', '\n', '    // Is transfer possible\n', '    bool public transferIsPossible;\n', '\n', '    modifier onlyEmitter() {\n', '        require(emitters[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    mapping (address => uint) public balances;\n', '    mapping (address => bool) public emitters;\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '    \n', '    constructor() Ownable() public {\n', '        name = "Universal Mobile Token";\n', '        symbol = "UMT";\n', '        decimals = 18;   \n', '        // Make the Owner also an emitter\n', '        emitters[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Finish minting process\n', '    */\n', '    function finishMinting() public onlyOwner {\n', '        mintingIsFinished = true;\n', '        transferIsPossible = true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _value       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // Make transfer only if transfer is possible\n', '        require(transferIsPossible);\n', '        require(_to != address(0) && _to != address(this));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _value       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _value        amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        // Make transfer only if transfer is possible\n', '        require(transferIsPossible);\n', '\n', '        require(_to != address(0) && _to != address(this));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Add an emitter account\n', '    *   \n', '    *   @param _emitter     emitter&#39;s address\n', '    */\n', '    function addEmitter(address _emitter) public onlyOwner {\n', '        emitters[_emitter] = true;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Remove an emitter account\n', '    *   \n', '    *   @param _emitter     emitter&#39;s address\n', '    */\n', '    function removeEmitter(address _emitter) public onlyOwner {\n', '        emitters[_emitter] = false;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Mint token in batches\n', '    *   \n', '    *   @param _adresses     token holders&#39; adresses\n', '    *   @param _values       token holders&#39; values\n', '    */\n', '    function batchMint(address[] _adresses, uint[] _values) public onlyEmitter {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(minted(_adresses[i], _values[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    *   @dev Transfer token in batches\n', '    *   \n', '    *   @param _adresses     token holders&#39; adresses\n', '    *   @param _values       token holders&#39; values\n', '    */\n', '    function batchTransfer(address[] _adresses, uint[] _values) public {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(transfer(_adresses[i], _values[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    *   @dev Burn Tokens\n', '    *   @param _from       token holder address which the tokens will be burnt\n', '    *   @param _value      number of tokens to burn\n', '    */\n', '    function burn(address _from, uint _value) public onlyEmitter {\n', '        // Burn tokens only if minting stage is not finished\n', '        require(!mintingIsFinished);\n', '\n', '        require(_value <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '    }\n', '\n', '    /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _tokenOwner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '    /**\n', '    *   @dev Function to check the amount of tokens that _tokenOwner has.\n', '    *\n', '    *   @param _tokenOwner        the address which owns the funds\n', '    *\n', '    *   @return              the amount of tokens _tokenOwner has\n', '    */\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function minted(address _to, uint _value) internal returns (bool) {\n', '        // Mint tokens only if minting stage is not finished\n', '        require(!mintingIsFinished);\n', '        balances[_to] = balances[_to].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        emit Transfer(address(0), _to, _value);\n', '        return true;\n', '    }\n', '}']
['/*\n', '*\n', '* Universal Mobile Token smart contract\n', '* Developed by Phenom.team <info@phenom.team>   \n', '*\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract UniversalMobileToken is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    /*\n', '        Standard ERC20 token\n', '    */\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    // Name of token\n', '    string public name;\n', '    // Short symbol for token\n', '    string public symbol;\n', '\n', '    // Nubmer of decimal places\n', '    uint public decimals;\n', '\n', "    // Token's total supply\n", '    uint public totalSupply;\n', '\n', '    // Is minting active\n', '    bool public mintingIsFinished;\n', '\n', '    // Is transfer possible\n', '    bool public transferIsPossible;\n', '\n', '    modifier onlyEmitter() {\n', '        require(emitters[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    mapping (address => uint) public balances;\n', '    mapping (address => bool) public emitters;\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '    \n', '    constructor() Ownable() public {\n', '        name = "Universal Mobile Token";\n', '        symbol = "UMT";\n', '        decimals = 18;   \n', '        // Make the Owner also an emitter\n', '        emitters[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Finish minting process\n', '    */\n', '    function finishMinting() public onlyOwner {\n', '        mintingIsFinished = true;\n', '        transferIsPossible = true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _value       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // Make transfer only if transfer is possible\n', '        require(transferIsPossible);\n', '        require(_to != address(0) && _to != address(this));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _value       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _value        amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        // Make transfer only if transfer is possible\n', '        require(transferIsPossible);\n', '\n', '        require(_to != address(0) && _to != address(this));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Add an emitter account\n', '    *   \n', "    *   @param _emitter     emitter's address\n", '    */\n', '    function addEmitter(address _emitter) public onlyOwner {\n', '        emitters[_emitter] = true;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Remove an emitter account\n', '    *   \n', "    *   @param _emitter     emitter's address\n", '    */\n', '    function removeEmitter(address _emitter) public onlyOwner {\n', '        emitters[_emitter] = false;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Mint token in batches\n', '    *   \n', "    *   @param _adresses     token holders' adresses\n", "    *   @param _values       token holders' values\n", '    */\n', '    function batchMint(address[] _adresses, uint[] _values) public onlyEmitter {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(minted(_adresses[i], _values[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    *   @dev Transfer token in batches\n', '    *   \n', "    *   @param _adresses     token holders' adresses\n", "    *   @param _values       token holders' values\n", '    */\n', '    function batchTransfer(address[] _adresses, uint[] _values) public {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(transfer(_adresses[i], _values[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    *   @dev Burn Tokens\n', '    *   @param _from       token holder address which the tokens will be burnt\n', '    *   @param _value      number of tokens to burn\n', '    */\n', '    function burn(address _from, uint _value) public onlyEmitter {\n', '        // Burn tokens only if minting stage is not finished\n', '        require(!mintingIsFinished);\n', '\n', '        require(_value <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '    }\n', '\n', '    /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _tokenOwner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '    /**\n', '    *   @dev Function to check the amount of tokens that _tokenOwner has.\n', '    *\n', '    *   @param _tokenOwner        the address which owns the funds\n', '    *\n', '    *   @return              the amount of tokens _tokenOwner has\n', '    */\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function minted(address _to, uint _value) internal returns (bool) {\n', '        // Mint tokens only if minting stage is not finished\n', '        require(!mintingIsFinished);\n', '        balances[_to] = balances[_to].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        emit Transfer(address(0), _to, _value);\n', '        return true;\n', '    }\n', '}']
