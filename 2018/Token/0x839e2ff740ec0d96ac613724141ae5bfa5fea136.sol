['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;Digipay&#39; CROWDSALE token contract\n', '//\n', '// Deployed to : 0x839e2ff740ec0d96ac613724141ae5bfa5fea136\n', '// Symbol      : DIP\n', '// Name        : Digipay Token\n', '// Total supply: 180000000\n', '// Decimals    : 18\n', '//\n', '// 2018 (c) by Digipay\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract DIPToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public startDate;\n', '    uint public bonusEnds50;\n', '    uint public bonusEnds20;\n', '    uint public bonusEnds15;\n', '    uint public bonusEnds10;\n', '    uint public bonusEnds5;\n', '    uint public endDate;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function DIPToken() public {\n', '        symbol = "DIP";\n', '        name = "DIP Token";\n', '        decimals = 18;\n', '        _totalSupply = 180000000000000000000000000;\n', '        balances[0xce8f00911386b2bE473012468e54dCaA82C09F7e] = _totalSupply;\n', '        Transfer(address(0), 0xce8f00911386b2bE473012468e54dCaA82C09F7e, _totalSupply);\n', '        bonusEnds50 = now + 6 weeks;\n', '        bonusEnds20 = now + 7 weeks;\n', '        bonusEnds15 = now + 8 weeks;\n', '        bonusEnds10 = now + 9 weeks;\n', '        bonusEnds5 = now + 10 weeks;\n', '        endDate = now + 11 weeks;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 11,000 DIP Tokens per 1 ETH (No bonus)\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now <= bonusEnds50) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 16500;\n', '            } else {\n', '            tokens = msg.value * 17490;\n', '            }\n', '        }\n', '        if (now > bonusEnds50 && now <= bonusEnds20) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 13200;\n', '            } else {\n', '            tokens = msg.value * 13992;\n', '            }\n', '        }\n', '        if (now > bonusEnds20 && now <= bonusEnds15) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 12650;\n', '            } else {\n', '            tokens = msg.value * 13409;\n', '            }\n', '        }\n', '        if (now > bonusEnds15 && now <= bonusEnds10) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 12100;\n', '            } else {\n', '            tokens = msg.value * 12826;\n', '            }\n', '        }\n', '        if (now > bonusEnds10 && now <= bonusEnds5) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 11550;\n', '            } else {\n', '            tokens = msg.value * 12243;\n', '            }\n', '        }\n', '        if (bonusEnds5 < now) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 11000;\n', '            } else {\n', '            tokens = msg.value * 11660;\n', '            }\n', '        }\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Digipay' CROWDSALE token contract\n", '//\n', '// Deployed to : 0x839e2ff740ec0d96ac613724141ae5bfa5fea136\n', '// Symbol      : DIP\n', '// Name        : Digipay Token\n', '// Total supply: 180000000\n', '// Decimals    : 18\n', '//\n', '// 2018 (c) by Digipay\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract DIPToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public startDate;\n', '    uint public bonusEnds50;\n', '    uint public bonusEnds20;\n', '    uint public bonusEnds15;\n', '    uint public bonusEnds10;\n', '    uint public bonusEnds5;\n', '    uint public endDate;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function DIPToken() public {\n', '        symbol = "DIP";\n', '        name = "DIP Token";\n', '        decimals = 18;\n', '        _totalSupply = 180000000000000000000000000;\n', '        balances[0xce8f00911386b2bE473012468e54dCaA82C09F7e] = _totalSupply;\n', '        Transfer(address(0), 0xce8f00911386b2bE473012468e54dCaA82C09F7e, _totalSupply);\n', '        bonusEnds50 = now + 6 weeks;\n', '        bonusEnds20 = now + 7 weeks;\n', '        bonusEnds15 = now + 8 weeks;\n', '        bonusEnds10 = now + 9 weeks;\n', '        bonusEnds5 = now + 10 weeks;\n', '        endDate = now + 11 weeks;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 11,000 DIP Tokens per 1 ETH (No bonus)\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now <= bonusEnds50) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 16500;\n', '            } else {\n', '            tokens = msg.value * 17490;\n', '            }\n', '        }\n', '        if (now > bonusEnds50 && now <= bonusEnds20) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 13200;\n', '            } else {\n', '            tokens = msg.value * 13992;\n', '            }\n', '        }\n', '        if (now > bonusEnds20 && now <= bonusEnds15) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 12650;\n', '            } else {\n', '            tokens = msg.value * 13409;\n', '            }\n', '        }\n', '        if (now > bonusEnds15 && now <= bonusEnds10) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 12100;\n', '            } else {\n', '            tokens = msg.value * 12826;\n', '            }\n', '        }\n', '        if (now > bonusEnds10 && now <= bonusEnds5) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 11550;\n', '            } else {\n', '            tokens = msg.value * 12243;\n', '            }\n', '        }\n', '        if (bonusEnds5 < now) {\n', '            if (msg.value < 10000000000000000000) {\n', '            tokens = msg.value * 11000;\n', '            } else {\n', '            tokens = msg.value * 11660;\n', '            }\n', '        }\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
