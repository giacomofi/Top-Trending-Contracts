['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '//  https://github.com/ethereum/EIPs/issues/179\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// ERC20 interface, see https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Basic version of StandardToken, with no allowances.\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' * Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//\n', 'contract EXOToken is StandardToken, Ownable {\n', '    uint8 constant PERCENT_BOUNTY=3;\n', '    uint8 constant PERCENT_TEAM=12;\n', '    uint8 constant PERCENT_FOUNDATION=25;\n', '    uint8 constant PERCENT_PRE_ICO=10;\n', '    uint8 constant PERCENT_ICO=50;\n', '    uint256 constant UNFREEZE_FOUNDATION  = 1546214400;\n', '    //20180901 = 1535760000\n', '    //20181231 = 1546214400\n', '    ///////////////\n', '    // VAR       //\n', '    ///////////////\n', '    // Implementation of frozen funds\n', '    mapping(address => bool) public frozenAccounts;\n', '\n', '    string public  name;\n', '    string public  symbol;\n', '    uint8  public  decimals;\n', '    uint256 public UNFREEZE_TEAM_BOUNTY = 1535760000; //Plan end of ICO\n', '\n', '    address public accForBounty;\n', '    address public accForTeam;\n', '    address public accFoundation;\n', '    address public accPreICO;\n', '    address public accICO;\n', '    address public currentMinter;\n', '\n', '\n', '    ///////////////\n', '    // EVENTS    //\n', '    ///////////////\n', '    event NewFreeze(address acc, bool isFrozen);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    // Constructor,  \n', '    function EXOToken(\n', '        address _accForBounty, \n', '        address _accForTeam, \n', '        address _accFoundation, \n', '        address _accPreICO, \n', '        address _accICO) \n', '    public \n', '    {\n', '        name = "EXOLOVER";\n', '        symbol = "EXO";\n', '        decimals = 18;\n', '        totalSupply_ = 100000000 * (10 ** uint256(decimals));// All EXO tokens in the world\n', '        //Initial token distribution\n', '        balances[_accForBounty] = totalSupply()/100*PERCENT_BOUNTY;\n', '        balances[_accForTeam]   = totalSupply()/100*PERCENT_TEAM;\n', '        balances[_accFoundation]= totalSupply()/100*PERCENT_FOUNDATION;\n', '        balances[_accPreICO]    = totalSupply()/100*PERCENT_PRE_ICO;\n', '        balances[_accICO]       = totalSupply()/100*PERCENT_ICO;\n', '        //save for public\n', '        accForBounty  = _accForBounty;\n', '        accForTeam    = _accForTeam;\n', '        accFoundation = _accFoundation;\n', '        accPreICO     = _accPreICO;\n', '        accICO        = _accICO;\n', '        //Fixe emission\n', '        emit Transfer(address(0), _accForBounty,  totalSupply()/100*PERCENT_BOUNTY);\n', '        emit Transfer(address(0), _accForTeam,    totalSupply()/100*PERCENT_TEAM);\n', '        emit Transfer(address(0), _accFoundation, totalSupply()/100*PERCENT_FOUNDATION);\n', '        emit Transfer(address(0), _accPreICO,     totalSupply()/100*PERCENT_PRE_ICO);\n', '        emit Transfer(address(0), _accICO,        totalSupply()/100*PERCENT_ICO);\n', '\n', '        frozenAccounts[accFoundation] = true;\n', '        emit NewFreeze(accFoundation, true);\n', '    }\n', '\n', '    function isFrozen(address _acc) internal view returns(bool frozen) {\n', '        if (_acc == accFoundation && now < UNFREEZE_FOUNDATION) \n', '            return true;\n', '        return (frozenAccounts[_acc] && now < UNFREEZE_TEAM_BOUNTY);    \n', '    }\n', '\n', '    //Override some function for freeze functionality\n', '    function transfer(address _to, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(msg.sender));\n', '      assert(msg.data.length >= 64 + 4);//Short Address Attack\n', '      //Lets freeze any accounts, who recieve tokens from accForBounty and accForTeam\n', '      // - auto freeze\n', '      if (msg.sender == accForBounty || msg.sender == accForTeam) {\n', '          frozenAccounts[_to] = true;\n', '          emit NewFreeze(_to, true);\n', '      }\n', '      return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(_from));\n', '      assert(msg.data.length >= 96 + 4); //Short Address Attack\n', '       if (_from == accForBounty || _from == accForTeam) {\n', '          frozenAccounts[_to] = true;\n', '          emit NewFreeze(_to, true);\n', '      }\n', '      return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public  returns (bool success) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public  returns (bool success) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function freezeUntil(address _acc, bool _isfrozen) external onlyOwner returns (bool success){\n', '        require(now <= UNFREEZE_TEAM_BOUNTY);// nobody cant freeze after ICO finish\n', '        frozenAccounts[_acc] = _isfrozen;\n', '        emit NewFreeze(_acc, _isfrozen);\n', '        return true;\n', '    }\n', '\n', '    function setMinter(address _minter) external onlyOwner returns (bool success) {\n', '        currentMinter = _minter;\n', '        return true;\n', '    }\n', '\n', '    function setBountyTeamUnfreezeTime(uint256 _newDate) external onlyOwner {\n', '       UNFREEZE_TEAM_BOUNTY = _newDate;\n', '    }\n', '\n', '    function mintTokens(address _to, uint256 _amount) external returns (bool) {\n', '        require(msg.sender==currentMinter);\n', '        totalSupply_  = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true; \n', '    }\n', '    \n', '    \n', '  //***************************************************************\n', '  // ERC20 part of this contract based on https://github.com/OpenZeppelin/zeppelin-solidity\n', '  // Adapted and amended by IBERGroup, email:<span class="__cf_email__" data-cfemail="7a171b0209130017151813161f3a13181f08541d08150f0a">[email&#160;protected]</span>; \n', '  //     Telegram: https://t.me/msmobile\n', '  //               https://t.me/alexamuek\n', '  // Code released under the MIT License(see git root).\n', '  ////**************************************************************\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '//  https://github.com/ethereum/EIPs/issues/179\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// ERC20 interface, see https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Basic version of StandardToken, with no allowances.\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' * Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//\n', 'contract EXOToken is StandardToken, Ownable {\n', '    uint8 constant PERCENT_BOUNTY=3;\n', '    uint8 constant PERCENT_TEAM=12;\n', '    uint8 constant PERCENT_FOUNDATION=25;\n', '    uint8 constant PERCENT_PRE_ICO=10;\n', '    uint8 constant PERCENT_ICO=50;\n', '    uint256 constant UNFREEZE_FOUNDATION  = 1546214400;\n', '    //20180901 = 1535760000\n', '    //20181231 = 1546214400\n', '    ///////////////\n', '    // VAR       //\n', '    ///////////////\n', '    // Implementation of frozen funds\n', '    mapping(address => bool) public frozenAccounts;\n', '\n', '    string public  name;\n', '    string public  symbol;\n', '    uint8  public  decimals;\n', '    uint256 public UNFREEZE_TEAM_BOUNTY = 1535760000; //Plan end of ICO\n', '\n', '    address public accForBounty;\n', '    address public accForTeam;\n', '    address public accFoundation;\n', '    address public accPreICO;\n', '    address public accICO;\n', '    address public currentMinter;\n', '\n', '\n', '    ///////////////\n', '    // EVENTS    //\n', '    ///////////////\n', '    event NewFreeze(address acc, bool isFrozen);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    // Constructor,  \n', '    function EXOToken(\n', '        address _accForBounty, \n', '        address _accForTeam, \n', '        address _accFoundation, \n', '        address _accPreICO, \n', '        address _accICO) \n', '    public \n', '    {\n', '        name = "EXOLOVER";\n', '        symbol = "EXO";\n', '        decimals = 18;\n', '        totalSupply_ = 100000000 * (10 ** uint256(decimals));// All EXO tokens in the world\n', '        //Initial token distribution\n', '        balances[_accForBounty] = totalSupply()/100*PERCENT_BOUNTY;\n', '        balances[_accForTeam]   = totalSupply()/100*PERCENT_TEAM;\n', '        balances[_accFoundation]= totalSupply()/100*PERCENT_FOUNDATION;\n', '        balances[_accPreICO]    = totalSupply()/100*PERCENT_PRE_ICO;\n', '        balances[_accICO]       = totalSupply()/100*PERCENT_ICO;\n', '        //save for public\n', '        accForBounty  = _accForBounty;\n', '        accForTeam    = _accForTeam;\n', '        accFoundation = _accFoundation;\n', '        accPreICO     = _accPreICO;\n', '        accICO        = _accICO;\n', '        //Fixe emission\n', '        emit Transfer(address(0), _accForBounty,  totalSupply()/100*PERCENT_BOUNTY);\n', '        emit Transfer(address(0), _accForTeam,    totalSupply()/100*PERCENT_TEAM);\n', '        emit Transfer(address(0), _accFoundation, totalSupply()/100*PERCENT_FOUNDATION);\n', '        emit Transfer(address(0), _accPreICO,     totalSupply()/100*PERCENT_PRE_ICO);\n', '        emit Transfer(address(0), _accICO,        totalSupply()/100*PERCENT_ICO);\n', '\n', '        frozenAccounts[accFoundation] = true;\n', '        emit NewFreeze(accFoundation, true);\n', '    }\n', '\n', '    function isFrozen(address _acc) internal view returns(bool frozen) {\n', '        if (_acc == accFoundation && now < UNFREEZE_FOUNDATION) \n', '            return true;\n', '        return (frozenAccounts[_acc] && now < UNFREEZE_TEAM_BOUNTY);    \n', '    }\n', '\n', '    //Override some function for freeze functionality\n', '    function transfer(address _to, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(msg.sender));\n', '      assert(msg.data.length >= 64 + 4);//Short Address Attack\n', '      //Lets freeze any accounts, who recieve tokens from accForBounty and accForTeam\n', '      // - auto freeze\n', '      if (msg.sender == accForBounty || msg.sender == accForTeam) {\n', '          frozenAccounts[_to] = true;\n', '          emit NewFreeze(_to, true);\n', '      }\n', '      return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(_from));\n', '      assert(msg.data.length >= 96 + 4); //Short Address Attack\n', '       if (_from == accForBounty || _from == accForTeam) {\n', '          frozenAccounts[_to] = true;\n', '          emit NewFreeze(_to, true);\n', '      }\n', '      return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public  returns (bool) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public  returns (bool success) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public  returns (bool success) {\n', '      require(!isFrozen(msg.sender));\n', '      return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function freezeUntil(address _acc, bool _isfrozen) external onlyOwner returns (bool success){\n', '        require(now <= UNFREEZE_TEAM_BOUNTY);// nobody cant freeze after ICO finish\n', '        frozenAccounts[_acc] = _isfrozen;\n', '        emit NewFreeze(_acc, _isfrozen);\n', '        return true;\n', '    }\n', '\n', '    function setMinter(address _minter) external onlyOwner returns (bool success) {\n', '        currentMinter = _minter;\n', '        return true;\n', '    }\n', '\n', '    function setBountyTeamUnfreezeTime(uint256 _newDate) external onlyOwner {\n', '       UNFREEZE_TEAM_BOUNTY = _newDate;\n', '    }\n', '\n', '    function mintTokens(address _to, uint256 _amount) external returns (bool) {\n', '        require(msg.sender==currentMinter);\n', '        totalSupply_  = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true; \n', '    }\n', '    \n', '    \n', '  //***************************************************************\n', '  // ERC20 part of this contract based on https://github.com/OpenZeppelin/zeppelin-solidity\n', '  // Adapted and amended by IBERGroup, email:maxsizmobile@iber.group; \n', '  //     Telegram: https://t.me/msmobile\n', '  //               https://t.me/alexamuek\n', '  // Code released under the MIT License(see git root).\n', '  ////**************************************************************\n', '\n', '}']
