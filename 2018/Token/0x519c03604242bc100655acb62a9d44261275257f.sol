['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TriggmineToken\n', ' */\n', 'contract TriggmineToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    string public constant name = "Triggmine Coin";\n', '\n', '    string public constant symbol = "TRG";\n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '    bool public released = false;\n', '    event Release();\n', '\n', '    address public holder;\n', '\n', '    mapping(address => uint) public lockedAddresses;\n', '\n', '    modifier isReleased () {\n', '        require(released || msg.sender == holder || msg.sender == owner);\n', '        require(lockedAddresses[msg.sender] <= now);\n', '        _;\n', '    }\n', '\n', '    function TriggmineToken() public {\n', '        owner = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '\n', '        totalSupply_ = 620000000 * (10 ** decimals);\n', '        balances[owner] = totalSupply_;\n', '        Transfer(0x0, owner, totalSupply_);\n', '\n', '        holder = owner;\n', '    }\n', '\n', '    function lockAddress(address _lockedAddress, uint256 _time) public onlyOwner returns (bool) {\n', '        require(balances[_lockedAddress] == 0 && lockedAddresses[_lockedAddress] == 0 && _time > now);\n', '        lockedAddresses[_lockedAddress] = _time;\n', '        return true;\n', '    }\n', '\n', '    function release() onlyOwner public returns (bool) {\n', '        require(!released);\n', '        released = true;\n', '        Release();\n', '\n', '        return true;\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        address oldOwner = owner;\n', '        super.transferOwnership(newOwner);\n', '\n', '        if (oldOwner != holder) {\n', '            allowed[holder][oldOwner] = 0;\n', '            Approval(holder, oldOwner, 0);\n', '        }\n', '\n', '        if (owner != holder) {\n', '            allowed[holder][owner] = balances[holder];\n', '            Approval(holder, owner, balances[holder]);\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract TriggmineCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant SALES_START = 1529938800; // Monday, June 25, 2018 3:00:00 PM\n', '    uint256 public constant SALES_END = 1538319600; // Sunday, September 30, 2018 3:00:00 PM\n', '\n', '    address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '    address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079;\n', '\n', '    address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; // Triggmine coin ERC20 contract address\n', '    uint256 public constant TOKEN_CENTS = 1000000000000000000; // 1 TRG is 1^18\n', '    uint256 public constant TOKEN_PRICE = 0.0001 ether;\n', '\n', '    uint256 public constant USD_HARD_CAP = 15000000;\n', '    uint256 public constant MIN_INVESTMENT = 25000;\n', '\n', '    uint public constant BONUS_50_100 = 10;\n', '    uint public constant BONUS_100_250 = 15;\n', '    uint public constant BONUS_250_500 = 20;\n', '    uint public constant BONUS_500 = 25;\n', '\n', '    mapping(address => uint256) public investments;\n', '    uint256 public investedUSD;\n', '    uint256 public investedETH;\n', '    uint256 public investedBTC;\n', '    uint256 public tokensPurchased;\n', '\n', '    uint256 public rate_ETHUSD;\n', '    uint256 public rate_BTCUSD;\n', '\n', '    address public whitelistSupplier;\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event ContributedETH(address indexed receiver, uint contribution, uint contributionUSD, uint reward);\n', '    event ContributedBTC(address indexed receiver, uint contribution, uint contributionUSD, uint reward);\n', '    event WhitelistUpdated(address indexed participant, bool isWhitelisted);\n', '\n', '    constructor() public {\n', '        whitelistSupplier = msg.sender;\n', '        owner = ASSET_MANAGER_WALLET;\n', '    }\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeETH(msg.sender);\n', '    }\n', '\n', '    function contributeETH(address _participant) public payable returns(bool) {\n', '        require(now >= SALES_START && now < SALES_END);\n', '        require(whitelist[_participant]);\n', '\n', '        uint256 usdAmount = (msg.value * rate_ETHUSD) / 10**18;\n', '        investedUSD = investedUSD.add(usdAmount);\n', '        require(investedUSD <= USD_HARD_CAP);\n', '        investments[msg.sender] = investments[msg.sender].add(usdAmount);\n', '        require(investments[msg.sender] >= MIN_INVESTMENT);\n', '\n', '        uint bonusPercents = getBonusPercents(usdAmount);\n', '        uint totalTokens = getTotalTokens(msg.value, bonusPercents);\n', '\n', '        tokensPurchased = tokensPurchased.add(totalTokens);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        investedETH = investedETH.add(msg.value);\n', '        ESCROW_WALLET.transfer(msg.value);\n', '\n', '        emit ContributedETH(_participant, msg.value, usdAmount, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function contributeBTC(address _participant, uint256 _btcAmount) public onlyWhitelistSupplier returns(bool) {\n', '        require(now >= SALES_START && now < SALES_END);\n', '        require(whitelist[_participant]);\n', '\n', '        uint256 usdAmount = (_btcAmount * rate_BTCUSD) / 10**8; // BTC amount should be provided in satoshi\n', '        investedUSD = investedUSD.add(usdAmount);\n', '        require(investedUSD <= USD_HARD_CAP);\n', '        investments[_participant] = investments[_participant].add(usdAmount);\n', '        require(investments[_participant] >= MIN_INVESTMENT);\n', '\n', '        uint bonusPercents = getBonusPercents(usdAmount);\n', '\n', '        uint256 ethAmount = (_btcAmount * rate_BTCUSD * 10**10) / rate_ETHUSD;\n', '        uint totalTokens = getTotalTokens(ethAmount, bonusPercents);\n', '\n', '        tokensPurchased = tokensPurchased.add(totalTokens);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        investedBTC = investedBTC.add(_btcAmount);\n', '\n', '        emit ContributedBTC(_participant, _btcAmount, usdAmount, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function setRate_ETHUSD(uint256 _rate) public onlyWhitelistSupplier {\n', '        rate_ETHUSD = _rate;\n', '    }\n', '\n', '    function setRate_BTCUSD(uint256 _rate) public onlyWhitelistSupplier {\n', '        rate_BTCUSD = _rate;\n', '    }\n', '\n', '    function getBonusPercents(uint256 usdAmount) private pure returns(uint256) {\n', '        if (usdAmount >= 500000) {\n', '            return BONUS_500;\n', '        }\n', '\n', '        if (usdAmount >= 250000) {\n', '            return BONUS_250_500;\n', '        }\n', '\n', '        if (usdAmount >= 100000) {\n', '            return BONUS_100_250;\n', '        }\n', '\n', '        if (usdAmount >= 50000) {\n', '            return BONUS_50_100;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    function getTotalTokens(uint256 ethAmount, uint256 bonusPercents) private pure returns(uint256) {\n', '        // If there is some division reminder, we just collect it too.\n', '        uint256 tokensAmount = (ethAmount * TOKEN_CENTS) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint256 bonusTokens = (tokensAmount * bonusPercents) / 100;\n', '        uint256 totalTokens = tokensAmount.add(bonusTokens);\n', '\n', '        return totalTokens;\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function addToWhitelist(address _participant) onlyWhitelistSupplier public returns(bool) {\n', '        if (whitelist[_participant]) {\n', '            return true;\n', '        }\n', '        whitelist[_participant] = true;\n', '        emit WhitelistUpdated(_participant, true);\n', '\n', '        return true;\n', '    }\n', '\n', '    function removeFromWhitelist(address _participant) onlyWhitelistSupplier public returns(bool) {\n', '        if (!whitelist[_participant]) {\n', '            return true;\n', '        }\n', '        whitelist[_participant] = false;\n', '        emit WhitelistUpdated(_participant, false);\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTokenOwner() public view returns (address) {\n', '        return TriggmineToken(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        TriggmineToken(TOKEN_ADDRESS).transferOwnership(ASSET_MANAGER_WALLET);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TriggmineToken\n', ' */\n', 'contract TriggmineToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    string public constant name = "Triggmine Coin";\n', '\n', '    string public constant symbol = "TRG";\n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '    bool public released = false;\n', '    event Release();\n', '\n', '    address public holder;\n', '\n', '    mapping(address => uint) public lockedAddresses;\n', '\n', '    modifier isReleased () {\n', '        require(released || msg.sender == holder || msg.sender == owner);\n', '        require(lockedAddresses[msg.sender] <= now);\n', '        _;\n', '    }\n', '\n', '    function TriggmineToken() public {\n', '        owner = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '\n', '        totalSupply_ = 620000000 * (10 ** decimals);\n', '        balances[owner] = totalSupply_;\n', '        Transfer(0x0, owner, totalSupply_);\n', '\n', '        holder = owner;\n', '    }\n', '\n', '    function lockAddress(address _lockedAddress, uint256 _time) public onlyOwner returns (bool) {\n', '        require(balances[_lockedAddress] == 0 && lockedAddresses[_lockedAddress] == 0 && _time > now);\n', '        lockedAddresses[_lockedAddress] = _time;\n', '        return true;\n', '    }\n', '\n', '    function release() onlyOwner public returns (bool) {\n', '        require(!released);\n', '        released = true;\n', '        Release();\n', '\n', '        return true;\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        address oldOwner = owner;\n', '        super.transferOwnership(newOwner);\n', '\n', '        if (oldOwner != holder) {\n', '            allowed[holder][oldOwner] = 0;\n', '            Approval(holder, oldOwner, 0);\n', '        }\n', '\n', '        if (owner != holder) {\n', '            allowed[holder][owner] = balances[holder];\n', '            Approval(holder, owner, balances[holder]);\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract TriggmineCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant SALES_START = 1529938800; // Monday, June 25, 2018 3:00:00 PM\n', '    uint256 public constant SALES_END = 1538319600; // Sunday, September 30, 2018 3:00:00 PM\n', '\n', '    address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '    address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079;\n', '\n', '    address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; // Triggmine coin ERC20 contract address\n', '    uint256 public constant TOKEN_CENTS = 1000000000000000000; // 1 TRG is 1^18\n', '    uint256 public constant TOKEN_PRICE = 0.0001 ether;\n', '\n', '    uint256 public constant USD_HARD_CAP = 15000000;\n', '    uint256 public constant MIN_INVESTMENT = 25000;\n', '\n', '    uint public constant BONUS_50_100 = 10;\n', '    uint public constant BONUS_100_250 = 15;\n', '    uint public constant BONUS_250_500 = 20;\n', '    uint public constant BONUS_500 = 25;\n', '\n', '    mapping(address => uint256) public investments;\n', '    uint256 public investedUSD;\n', '    uint256 public investedETH;\n', '    uint256 public investedBTC;\n', '    uint256 public tokensPurchased;\n', '\n', '    uint256 public rate_ETHUSD;\n', '    uint256 public rate_BTCUSD;\n', '\n', '    address public whitelistSupplier;\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event ContributedETH(address indexed receiver, uint contribution, uint contributionUSD, uint reward);\n', '    event ContributedBTC(address indexed receiver, uint contribution, uint contributionUSD, uint reward);\n', '    event WhitelistUpdated(address indexed participant, bool isWhitelisted);\n', '\n', '    constructor() public {\n', '        whitelistSupplier = msg.sender;\n', '        owner = ASSET_MANAGER_WALLET;\n', '    }\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeETH(msg.sender);\n', '    }\n', '\n', '    function contributeETH(address _participant) public payable returns(bool) {\n', '        require(now >= SALES_START && now < SALES_END);\n', '        require(whitelist[_participant]);\n', '\n', '        uint256 usdAmount = (msg.value * rate_ETHUSD) / 10**18;\n', '        investedUSD = investedUSD.add(usdAmount);\n', '        require(investedUSD <= USD_HARD_CAP);\n', '        investments[msg.sender] = investments[msg.sender].add(usdAmount);\n', '        require(investments[msg.sender] >= MIN_INVESTMENT);\n', '\n', '        uint bonusPercents = getBonusPercents(usdAmount);\n', '        uint totalTokens = getTotalTokens(msg.value, bonusPercents);\n', '\n', '        tokensPurchased = tokensPurchased.add(totalTokens);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        investedETH = investedETH.add(msg.value);\n', '        ESCROW_WALLET.transfer(msg.value);\n', '\n', '        emit ContributedETH(_participant, msg.value, usdAmount, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function contributeBTC(address _participant, uint256 _btcAmount) public onlyWhitelistSupplier returns(bool) {\n', '        require(now >= SALES_START && now < SALES_END);\n', '        require(whitelist[_participant]);\n', '\n', '        uint256 usdAmount = (_btcAmount * rate_BTCUSD) / 10**8; // BTC amount should be provided in satoshi\n', '        investedUSD = investedUSD.add(usdAmount);\n', '        require(investedUSD <= USD_HARD_CAP);\n', '        investments[_participant] = investments[_participant].add(usdAmount);\n', '        require(investments[_participant] >= MIN_INVESTMENT);\n', '\n', '        uint bonusPercents = getBonusPercents(usdAmount);\n', '\n', '        uint256 ethAmount = (_btcAmount * rate_BTCUSD * 10**10) / rate_ETHUSD;\n', '        uint totalTokens = getTotalTokens(ethAmount, bonusPercents);\n', '\n', '        tokensPurchased = tokensPurchased.add(totalTokens);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        investedBTC = investedBTC.add(_btcAmount);\n', '\n', '        emit ContributedBTC(_participant, _btcAmount, usdAmount, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function setRate_ETHUSD(uint256 _rate) public onlyWhitelistSupplier {\n', '        rate_ETHUSD = _rate;\n', '    }\n', '\n', '    function setRate_BTCUSD(uint256 _rate) public onlyWhitelistSupplier {\n', '        rate_BTCUSD = _rate;\n', '    }\n', '\n', '    function getBonusPercents(uint256 usdAmount) private pure returns(uint256) {\n', '        if (usdAmount >= 500000) {\n', '            return BONUS_500;\n', '        }\n', '\n', '        if (usdAmount >= 250000) {\n', '            return BONUS_250_500;\n', '        }\n', '\n', '        if (usdAmount >= 100000) {\n', '            return BONUS_100_250;\n', '        }\n', '\n', '        if (usdAmount >= 50000) {\n', '            return BONUS_50_100;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    function getTotalTokens(uint256 ethAmount, uint256 bonusPercents) private pure returns(uint256) {\n', '        // If there is some division reminder, we just collect it too.\n', '        uint256 tokensAmount = (ethAmount * TOKEN_CENTS) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint256 bonusTokens = (tokensAmount * bonusPercents) / 100;\n', '        uint256 totalTokens = tokensAmount.add(bonusTokens);\n', '\n', '        return totalTokens;\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function addToWhitelist(address _participant) onlyWhitelistSupplier public returns(bool) {\n', '        if (whitelist[_participant]) {\n', '            return true;\n', '        }\n', '        whitelist[_participant] = true;\n', '        emit WhitelistUpdated(_participant, true);\n', '\n', '        return true;\n', '    }\n', '\n', '    function removeFromWhitelist(address _participant) onlyWhitelistSupplier public returns(bool) {\n', '        if (!whitelist[_participant]) {\n', '            return true;\n', '        }\n', '        whitelist[_participant] = false;\n', '        emit WhitelistUpdated(_participant, false);\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTokenOwner() public view returns (address) {\n', '        return TriggmineToken(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        TriggmineToken(TOKEN_ADDRESS).transferOwnership(ASSET_MANAGER_WALLET);\n', '    }\n', '\n', '}']
