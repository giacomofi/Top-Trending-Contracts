['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);  _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', ' function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '  ERC20Basic public token;\n', '  address public beneficiary;\n', '  uint256 public releaseTime;\n', '\n', '  constructor(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract YiqiniuToken is MintableToken {\n', '    string public constant name\t\t= &#39;Yiqiniu&#39;;\n', '    string public constant symbol\t= &#39;KEY&#39;;\n', '    uint256 public constant decimals\t= 18;\n', '    event Burned(address indexed burner, uint256 value);\n', '    \n', '    function burn(uint256 _value) public onlyOwner {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burned(burner, _value);\n', '    }\n', '}\n', '\n', 'contract CrowdsaleConfig {\n', '    uint256 public constant TOKEN_DECIMALS\t    = 18;\n', '    uint256 public constant MIN_TOKEN_UNIT\t    = 10 ** uint256(TOKEN_DECIMALS);\n', '    uint256 public constant TOTAL_SUPPLY_CAP        = 100000000 * MIN_TOKEN_UNIT;\n', '    uint256 public constant PUBLIC_SALE_TOKEN_CAP   = TOTAL_SUPPLY_CAP / 100 * 30;\n', '    uint256 public constant AGENCY_TOKEN_CAP        = TOTAL_SUPPLY_CAP / 100 * 20;\n', '    uint256 public constant TEAM_TOKEN_CAP          = TOTAL_SUPPLY_CAP / 100 * 50;\n', '    address public constant TEAM_ADDR\t\t    = 0xd589737E4CbeC49E862D3A54c75aF16e27dD8fC1;\n', '    address public constant AGENCY_ADDR\t            = 0xc849e7225fF088e187136A670662e36adE5A89FC;\n', '    address public constant WALLET_ADDR\t            = 0xd589737E4CbeC49E862D3A54c75aF16e27dD8fC1;\n', '}\n', '\n', 'contract YiqiniuCrowdsale is Ownable, CrowdsaleConfig{\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for YiqiniuToken;\n', '\n', '    // Token contract\n', '    YiqiniuToken public token;\n', '\n', '    uint64 public startTime;\n', '    uint64 public endTime;\n', '    uint256 public rate = 10000;\n', '    uint256 public goalSale;\n', '    uint256 public totalPurchased = 0;\n', '    bool public CrowdsaleEnabled = false;\n', '    mapping(address => bool) public isVerified;\n', '    mapping(address => uint256) public tokensPurchased;\n', '    uint256 public maxTokenPurchase = 100000 * MIN_TOKEN_UNIT;\n', '    uint256 public minTokenPurchase = 1 * MIN_TOKEN_UNIT;\n', '    TokenTimelock public AgencyLock1;\n', '    TokenTimelock public AgencyLock2;\n', '    \n', '    event NewYiqiniuToken(address _add);\n', '\n', '    constructor() public {\n', '        startTime = uint64(now);\n', '        endTime = uint64(now + 3600*24*4);\n', '        goalSale = PUBLIC_SALE_TOKEN_CAP / 100 * 50;\n', '        \n', '        token = new YiqiniuToken();\n', '        emit NewYiqiniuToken(address(token));\n', '        \n', '        token.mint(address(this), TOTAL_SUPPLY_CAP);\n', '        token.finishMinting();\n', '\n', '        uint64 TimeLock1 = uint64(now + 3600*24*5);\n', '        uint64 TimeLock2 = uint64(now + 3600*24*6);\n', '\n', '        AgencyLock1 = new TokenTimelock(token, AGENCY_ADDR, TimeLock1);\n', '        AgencyLock2 = new TokenTimelock(token, AGENCY_ADDR, TimeLock2);\n', '\n', '        token.safeTransfer(AgencyLock1, AGENCY_TOKEN_CAP/2);\n', '        token.safeTransfer(AgencyLock2, AGENCY_TOKEN_CAP/2);\n', '\n', '        token.safeTransfer(TEAM_ADDR,TEAM_TOKEN_CAP);\n', '    }\n', '\n', '    function releaseLockAgencyLock1() public {\n', '        AgencyLock1.release();\n', '    }\n', '    function releaseLockAgencyLock2() public {\n', '        AgencyLock2.release();\n', '    }\n', '\n', '    function () external payable {   \n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    modifier canCrowdsale() {\n', '        require(CrowdsaleEnabled);\n', '        _;\n', '    }\n', '    \n', '    function enableCrowdsale() public onlyOwner {\n', '        CrowdsaleEnabled = true;\n', '    }\n', '    \n', '    function closeCrowdsale() public onlyOwner {\n', '        CrowdsaleEnabled = false;\n', '    }\n', '    \n', '    function buyTokens(address participant) internal canCrowdsale {\n', '        require(now >= startTime);\n', '        require(now < endTime);\n', '        require(msg.value != 0);\n', '        require(isVerified[participant]);\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        \n', '        tokensPurchased[participant] = tokensPurchased[participant].add(tokens);\n', '        require(tokensPurchased[participant] >= minTokenPurchase);\n', '        require(tokensPurchased[participant] <= maxTokenPurchase);\n', '        \n', '        totalPurchased = totalPurchased.add(tokens);\n', '        token.safeTransfer(participant, tokens);\n', '    }\n', '    \n', '    function setTokenPrice(uint256 _tokenRate) public onlyOwner {\n', '        require(now > startTime);\n', '        require(_tokenRate > 0);\n', '        rate = _tokenRate;\n', '    }\n', '    \n', '    function setLimitTokenPurchase(uint256 _minToken, uint256 _maxToken) public onlyOwner {\n', '        require(goalSale >= maxTokenPurchase);\n', '        minTokenPurchase = _minToken;\n', '        maxTokenPurchase = _maxToken;\n', '    }\n', '\n', '    function addVerified (address[] _ads) public onlyOwner {\n', '        for(uint i = 0; i < _ads.length; i++){\n', '            isVerified[_ads[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeVerified (address _address) public onlyOwner {\n', '        isVerified[_address] = false;\n', '    }\n', '    \n', '    function close() onlyOwner public {\n', '        require(now >= endTime || totalPurchased >= goalSale);\n', '        token.burn(token.balanceOf(this));\n', '        WALLET_ADDR.transfer(address(this).balance);\n', '   }\n', '}']