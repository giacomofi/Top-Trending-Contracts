['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' \n', '/*\n', ' * Safe Math Smart Contract. \n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC223 Receiving token Fallback Contract\n', ' */\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data);\n', '}\n', '\n', '/**\n', ' * ERC223 standard interface\n', ' */\n', '\n', 'contract ERC223Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool success);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * Implementation of the ERC223 standard token.\n', ' */\n', ' \n', 'contract ERC223Token is ERC223Interface {\n', '     using SafeMath for uint256;\n', '\n', '     mapping(address => uint256) balances; // List of user balances\n', '\t mapping (address => mapping (address => uint256)) internal allowed;\n', '\t\n', '\t\n', '\t\n', '\t string public name = "COOPAY COIN";\n', '     string public symbol = "COO";\n', '     uint8 public decimals = 18;\n', '     uint256 public totalSupply = 265200000 * (10**18);\n', '\t\n', '\t\n', '\t function ERC223Token()\n', '     {\n', '       balances[msg.sender] = totalSupply;\n', '     }\n', '  \n', '  \n', '\t  // Function to access name of token .\n', '\t  function name() constant returns (string _name) {\n', '\t\t  return name;\n', '\t  }\n', '\t  // Function to access symbol of token .\n', '\t  function symbol() constant returns (string _symbol) {\n', '\t\t  return symbol;\n', '\t  }\n', '\t  // Function to access decimals of token .\n', '\t  function decimals() constant returns (uint8 _decimals) {\n', '\t\t  return decimals;\n', '\t  }\n', '\t  // Function to access total supply of tokens .\n', '\t  function totalSupply() constant returns (uint256 _totalSupply) {\n', '\t\t  return totalSupply;\n', '\t  }\n', '  \n', '\t\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n', '        \n', '\t\trequire(_value > 0);\n', '\t\trequire(_to != 0x0);\n', '\t\trequire(balances[msg.sender] > 0);\n', '\t\t\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\t\n', '\t    require(_value > 0);\n', '\t\trequire(_to != 0x0);\n', '\t\trequire(balances[msg.sender] > 0);\n', '\t\t\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '     bytes memory empty;\n', '     balances[_from] = balances[_from].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '     emit Transfer(_from, _to, _value,empty);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     emit Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' \n', '/*\n', ' * Safe Math Smart Contract. \n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC223 Receiving token Fallback Contract\n', ' */\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data);\n', '}\n', '\n', '/**\n', ' * ERC223 standard interface\n', ' */\n', '\n', 'contract ERC223Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool success);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * Implementation of the ERC223 standard token.\n', ' */\n', ' \n', 'contract ERC223Token is ERC223Interface {\n', '     using SafeMath for uint256;\n', '\n', '     mapping(address => uint256) balances; // List of user balances\n', '\t mapping (address => mapping (address => uint256)) internal allowed;\n', '\t\n', '\t\n', '\t\n', '\t string public name = "COOPAY COIN";\n', '     string public symbol = "COO";\n', '     uint8 public decimals = 18;\n', '     uint256 public totalSupply = 265200000 * (10**18);\n', '\t\n', '\t\n', '\t function ERC223Token()\n', '     {\n', '       balances[msg.sender] = totalSupply;\n', '     }\n', '  \n', '  \n', '\t  // Function to access name of token .\n', '\t  function name() constant returns (string _name) {\n', '\t\t  return name;\n', '\t  }\n', '\t  // Function to access symbol of token .\n', '\t  function symbol() constant returns (string _symbol) {\n', '\t\t  return symbol;\n', '\t  }\n', '\t  // Function to access decimals of token .\n', '\t  function decimals() constant returns (uint8 _decimals) {\n', '\t\t  return decimals;\n', '\t  }\n', '\t  // Function to access total supply of tokens .\n', '\t  function totalSupply() constant returns (uint256 _totalSupply) {\n', '\t\t  return totalSupply;\n', '\t  }\n', '  \n', '\t\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n', '        \n', '\t\trequire(_value > 0);\n', '\t\trequire(_to != 0x0);\n', '\t\trequire(balances[msg.sender] > 0);\n', '\t\t\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\t\n', '\t    require(_value > 0);\n', '\t\trequire(_to != 0x0);\n', '\t\trequire(balances[msg.sender] > 0);\n', '\t\t\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '     bytes memory empty;\n', '     balances[_from] = balances[_from].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '     emit Transfer(_from, _to, _value,empty);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     emit Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}']
