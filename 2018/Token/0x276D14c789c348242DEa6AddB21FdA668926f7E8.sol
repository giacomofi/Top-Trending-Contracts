['pragma solidity ^0.4.19;\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public  returns (bool success);\n', '    function allowance(address _owner, address _spender) constant public  returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public  returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)  public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant  public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract BOXSToken is StandardToken,SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "boxs.io";\n', '    string public constant symbol = "BOXS";\n', '    uint256 public constant decimals = 8;\n', '    string public version = "1.0";\n', '    \n', '    // total cap\n', '    uint256 public constant tokenCreationCap = 100 * (10**8) * 10**decimals;\n', '    // init amount\n', '    uint256 public constant tokenCreationInit = 25 * (10**8) * 10**decimals;\n', '    // The amount of BOXSToken that mint init\n', '    uint256 public constant tokenMintInit = 25 * (10**8) * 10**decimals;\n', '    \n', '    address public initDepositAccount;\n', '    address public mintDepositAccount;\n', '    \n', '    mapping (address => bool) hadDoubles;\n', '    \n', '    address public owner;\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t\n', '\t\t_;\n', '\t}\n', '\n', '    function BOXSToken (\n', '        address _initFundDepositAccount,\n', '        address _mintFundDepositAccount\n', '        )  public {\n', '        initDepositAccount = _initFundDepositAccount;\n', '        mintDepositAccount = _mintFundDepositAccount;\n', '        balances[initDepositAccount] = tokenCreationInit;\n', '        balances[mintDepositAccount] = tokenMintInit;\n', '        totalSupply = tokenCreationInit + tokenMintInit;\n', '        owner=msg.sender;\n', '    }\n', '    \n', '    function checkDouble(address _to) constant internal returns (bool) {\n', '        return hadDoubles[_to];\n', '    }\n', '    \n', '    function doubleBalances(address _to) public  onlyOwner returns (bool) {\n', '        if(hadDoubles[_to] == true) return false;\n', '        if(balances[_to] <= 0) return false;\n', '        uint256 temptotalSupply = safeAdd(totalSupply, balances[_to]);\n', '        if(temptotalSupply > tokenCreationCap) return false;\n', '        balances[_to] = safeMult(balances[_to], 2);\n', '        totalSupply = temptotalSupply;\n', '        hadDoubles[_to] = true;\n', '        return true;\n', '    }\n', '    \n', '    function batchDoubleBalances(address[] toArray) public  onlyOwner returns (bool) {\n', '        if(toArray.length < 1) return false;\n', '        for(uint i = 0; i<toArray.length; i++){\n', '            doubleBalances(toArray[i]);\n', '        }\n', '        return true;\n', '    }\n', '\t\n', '\t// Do not allow direct deposits.\n', '    function () external {\n', '      require(0>1);\n', '    }\n', '\t\n', '}']