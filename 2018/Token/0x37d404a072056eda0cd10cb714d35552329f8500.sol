['pragma solidity ^0.4.24;\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256 _user);\n', '  function transfer(address to, uint256 value) public returns (bool success);\n', '  function allowance(address owner, address spender) public view returns (uint256 value);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '  function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  \n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract OnlyOwner {\n', '  address public owner;\n', '  address private controller;\n', '  event Controller(address _user);\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    controller = owner;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier isOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than the controller. \n', '   */\n', '  modifier isController {\n', '    require(msg.sender == controller);\n', '    _;\n', '  }\n', '  \n', '  function replaceController(address _user) isController public returns(bool){\n', '    require(_user != address(0x0));\n', '    controller = _user;\n', '    emit Controller(controller);\n', '    return true;   \n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '  using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    event Minted(address receiver, uint256 amount);\n', '    \n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success){\n', '      //prevent sending of tokens from genesis address or to self\n', '      require(_from != address(0) && _from != _to);\n', '      require(_to != address(0));\n', '      //subtract tokens from the sender on transfer\n', '      balances[_from] = balances[_from].safeSub(_value);\n', '      //add tokens to the receiver on reception\n', '      balances[_to] = balances[_to].safeAdd(_value);\n', '      return true;\n', '    }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) \n', '  { \n', '    require(_value <= balances[msg.sender]);\n', '      _transfer(msg.sender,_to,_value);\n', '      emit Transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '      uint256 _allowance = allowed[_from][msg.sender];\n', '      //value must be less than allowed value\n', '      require(_value <= _allowance);\n', '      //balance of sender + token value transferred by sender must be greater than balance of sender\n', '      require(balances[_to] + _value > balances[_to]);\n', '      //call transfer function\n', '      _transfer(_from,_to,_value);\n', '      //subtract the amount allowed to the sender \n', '      allowed[_from][msg.sender] = _allowance.safeSub(_value);\n', '      //trigger Transfer event\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    \n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract XRT is StandardToken, OnlyOwner{\n', '  uint8 public constant decimals = 18;\n', '    uint256 private constant multiplier = 10**27;\n', '    string public constant name = "XRT Token";\n', '    string public constant symbol = "XRT";\n', '    string public version = "X1.1";\n', '    uint256 private maxSupply = multiplier;\n', '    uint256 public totalSupply = (50*maxSupply)/100;\n', '    uint256 private approvalCount =0;\n', '    uint256 public minApproval =2;\n', '    address public fundReceiver;\n', '    \n', '    constructor(address _takeBackAcc) public{\n', '        balances[msg.sender] = totalSupply;\n', '        fundReceiver = _takeBackAcc;\n', '    }\n', '    \n', '    function maximumToken() public view returns (uint){\n', '        return maxSupply;\n', '    }\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    \n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    require(totalSupply <= maxSupply);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) isOwner canMint public returns (bool) {\n', '      uint256 newAmount = _amount.safeMul(multiplier.safeDiv(100));\n', '      require(totalSupply <= maxSupply.safeSub(newAmount));\n', '      totalSupply = totalSupply.safeAdd(newAmount);\n', '    balances[_to] = balances[_to].safeAdd(newAmount);\n', '    emit Mint(_to, newAmount);\n', '    emit Transfer(address(0), _to, newAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '    function finishMinting() isOwner canMint public returns (bool) {\n', '      mintingFinished = true;\n', '      emit MintFinished();\n', '      return true;\n', '    }\n', '    \n', '    function setApprovalCount(uint _value) public isController {\n', '        approvalCount = _value;\n', '    }\n', '    \n', '    function setMinApprovalCount(uint _value) public isController returns (bool){\n', '        require(_value > 0);\n', '        minApproval = _value;\n', '        return true;\n', '    }\n', '    \n', '    function getApprovalCount() public view isController returns(uint){\n', '        return approvalCount;\n', '    }\n', '    \n', '    function getFundReceiver() public view isController returns(address){\n', '        return fundReceiver;\n', '    }\n', '    \n', '    function controllerApproval(address _from, uint256 _value) public isOwner returns (bool) {\n', '        require(minApproval <= approvalCount); \n', '        balances[_from] = balances[_from].safeSub(_value);\n', '      //add tokens to the receiver on reception\n', '      balances[fundReceiver] = balances[fundReceiver].safeAdd(_value);\n', '        emit Transfer(_from,fundReceiver, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256 _user);\n', '  function transfer(address to, uint256 value) public returns (bool success);\n', '  function allowance(address owner, address spender) public view returns (uint256 value);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '  function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  \n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '}\n', '\n', 'contract OnlyOwner {\n', '  address public owner;\n', '  address private controller;\n', '  event Controller(address _user);\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    controller = owner;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier isOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than the controller. \n', '   */\n', '  modifier isController {\n', '    require(msg.sender == controller);\n', '    _;\n', '  }\n', '  \n', '  function replaceController(address _user) isController public returns(bool){\n', '    require(_user != address(0x0));\n', '    controller = _user;\n', '    emit Controller(controller);\n', '    return true;   \n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '  using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    event Minted(address receiver, uint256 amount);\n', '    \n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success){\n', '      //prevent sending of tokens from genesis address or to self\n', '      require(_from != address(0) && _from != _to);\n', '      require(_to != address(0));\n', '      //subtract tokens from the sender on transfer\n', '      balances[_from] = balances[_from].safeSub(_value);\n', '      //add tokens to the receiver on reception\n', '      balances[_to] = balances[_to].safeAdd(_value);\n', '      return true;\n', '    }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) \n', '  { \n', '    require(_value <= balances[msg.sender]);\n', '      _transfer(msg.sender,_to,_value);\n', '      emit Transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '      uint256 _allowance = allowed[_from][msg.sender];\n', '      //value must be less than allowed value\n', '      require(_value <= _allowance);\n', '      //balance of sender + token value transferred by sender must be greater than balance of sender\n', '      require(balances[_to] + _value > balances[_to]);\n', '      //call transfer function\n', '      _transfer(_from,_to,_value);\n', '      //subtract the amount allowed to the sender \n', '      allowed[_from][msg.sender] = _allowance.safeSub(_value);\n', '      //trigger Transfer event\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    \n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract XRT is StandardToken, OnlyOwner{\n', '  uint8 public constant decimals = 18;\n', '    uint256 private constant multiplier = 10**27;\n', '    string public constant name = "XRT Token";\n', '    string public constant symbol = "XRT";\n', '    string public version = "X1.1";\n', '    uint256 private maxSupply = multiplier;\n', '    uint256 public totalSupply = (50*maxSupply)/100;\n', '    uint256 private approvalCount =0;\n', '    uint256 public minApproval =2;\n', '    address public fundReceiver;\n', '    \n', '    constructor(address _takeBackAcc) public{\n', '        balances[msg.sender] = totalSupply;\n', '        fundReceiver = _takeBackAcc;\n', '    }\n', '    \n', '    function maximumToken() public view returns (uint){\n', '        return maxSupply;\n', '    }\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    \n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    require(totalSupply <= maxSupply);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) isOwner canMint public returns (bool) {\n', '      uint256 newAmount = _amount.safeMul(multiplier.safeDiv(100));\n', '      require(totalSupply <= maxSupply.safeSub(newAmount));\n', '      totalSupply = totalSupply.safeAdd(newAmount);\n', '    balances[_to] = balances[_to].safeAdd(newAmount);\n', '    emit Mint(_to, newAmount);\n', '    emit Transfer(address(0), _to, newAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '    function finishMinting() isOwner canMint public returns (bool) {\n', '      mintingFinished = true;\n', '      emit MintFinished();\n', '      return true;\n', '    }\n', '    \n', '    function setApprovalCount(uint _value) public isController {\n', '        approvalCount = _value;\n', '    }\n', '    \n', '    function setMinApprovalCount(uint _value) public isController returns (bool){\n', '        require(_value > 0);\n', '        minApproval = _value;\n', '        return true;\n', '    }\n', '    \n', '    function getApprovalCount() public view isController returns(uint){\n', '        return approvalCount;\n', '    }\n', '    \n', '    function getFundReceiver() public view isController returns(address){\n', '        return fundReceiver;\n', '    }\n', '    \n', '    function controllerApproval(address _from, uint256 _value) public isOwner returns (bool) {\n', '        require(minApproval <= approvalCount); \n', '        balances[_from] = balances[_from].safeSub(_value);\n', '      //add tokens to the receiver on reception\n', '      balances[fundReceiver] = balances[fundReceiver].safeAdd(_value);\n', '        emit Transfer(_from,fundReceiver, _value);\n', '        return true;\n', '    }\n', '}']
