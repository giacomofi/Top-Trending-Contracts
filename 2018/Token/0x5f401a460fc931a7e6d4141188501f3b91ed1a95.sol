['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    function Ownable() public { owner = address(this); }\n', '}\n', '\n', 'contract GRAND is Ownable {\n', '    \n', '    string public version           = "3.0.3";\n', '    string public name              = "GRAND";\n', '    string public symbol            = "G";\n', '\n', '    uint256 public totalSupply      = 100000000000000000000000 * 1000;\n', '    uint8 public decimals           = 15;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '       \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '   \n', '    function GRAND () public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        _transfer (msg.sender, address(this), totalSupply);\n', '    }\n', '   \n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        \n', '        if (_transfer(msg.sender, _to, _value)) { if (_to == address(this)) { require(msg.sender.send(_value)); } }    \n', '    }\n', '     \n', '    function () payable public {\n', '        uint256 amount               = msg.value;\n', '        balanceOf[owner]             = balanceOf[owner] - amount;\n', '        balanceOf[msg.sender]        = balanceOf[msg.sender]  + amount;\n', '        emit Transfer(owner, msg.sender, msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    function Ownable() public { owner = address(this); }\n', '}\n', '\n', 'contract GRAND is Ownable {\n', '    \n', '    string public version           = "3.0.3";\n', '    string public name              = "GRAND";\n', '    string public symbol            = "G";\n', '\n', '    uint256 public totalSupply      = 100000000000000000000000 * 1000;\n', '    uint8 public decimals           = 15;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '       \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '   \n', '    function GRAND () public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        _transfer (msg.sender, address(this), totalSupply);\n', '    }\n', '   \n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        \n', '        if (_transfer(msg.sender, _to, _value)) { if (_to == address(this)) { require(msg.sender.send(_value)); } }    \n', '    }\n', '     \n', '    function () payable public {\n', '        uint256 amount               = msg.value;\n', '        balanceOf[owner]             = balanceOf[owner] - amount;\n', '        balanceOf[msg.sender]        = balanceOf[msg.sender]  + amount;\n', '        emit Transfer(owner, msg.sender, msg.value);\n', '    }\n', '}']
