['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', " * functions, this simplifies the implementation of 'user permissions'.\n", ' */\n', '\n', '/// @title Ownable\n', '/// @author Applicature\n', '/// @notice helper mixed to other contracts to link contract on an owner\n', '/// @dev Base class\n', 'contract Ownable {\n', '    //Variables\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    //    Modifiers\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/// @title OpenZeppelinERC20\n', '/// @author Applicature\n', '/// @notice Open Zeppelin implementation of standart ERC20\n', '/// @dev Base class\n', 'contract OpenZeppelinERC20 is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    string public standard;\n', '\n', '    constructor(\n', '        uint256 _totalSupply,\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _tokenSymbol,\n', '        bool _transferAllSupplyToOwner\n', '    ) public {\n', "        standard = 'ERC20 0.1';\n", '        totalSupply_ = _totalSupply;\n', '\n', '        if (_transferAllSupplyToOwner) {\n', '            balances[msg.sender] = _totalSupply;\n', '        } else {\n', '            balances[this] = _totalSupply;\n', '        }\n', '\n', '        name = _tokenName;\n', '        // Set the name for display purposes\n', '        symbol = _tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = _decimals;\n', '    }\n', '\n', '}\n', '/// @title MintableToken\n', '/// @author Applicature\n', '/// @notice allow to mint tokens\n', '/// @dev Base class\n', 'contract MintableToken is BasicToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public maxSupply;\n', '    bool public allowedMinting;\n', '    mapping(address => bool) public mintingAgents;\n', '    mapping(address => bool) public stateChangeAgents;\n', '\n', '    event Mint(address indexed holder, uint256 tokens);\n', '\n', '    modifier onlyMintingAgents () {\n', '        require(mintingAgents[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateChangeAgents () {\n', '        require(stateChangeAgents[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _maxSupply, uint256 _mintedSupply, bool _allowedMinting) public {\n', '        maxSupply = _maxSupply;\n', '        totalSupply_ = totalSupply_.add(_mintedSupply);\n', '        allowedMinting = _allowedMinting;\n', '        mintingAgents[msg.sender] = true;\n', '    }\n', '\n', '    /// @notice allow to mint tokens\n', '    function mint(address _holder, uint256 _tokens) public onlyMintingAgents() {\n', '        require(allowedMinting == true && totalSupply_.add(_tokens) <= maxSupply);\n', '\n', '        totalSupply_ = totalSupply_.add(_tokens);\n', '\n', '        balances[_holder] = balanceOf(_holder).add(_tokens);\n', '\n', '        if (totalSupply_ == maxSupply) {\n', '            allowedMinting = false;\n', '        }\n', '        emit Mint(_holder, _tokens);\n', '    }\n', '\n', '    /// @notice update allowedMinting flat\n', '    function disableMinting() public onlyStateChangeAgents() {\n', '        allowedMinting = false;\n', '    }\n', '\n', '    /// @notice update minting agent\n', '    function updateMintingAgent(address _agent, bool _status) public onlyOwner {\n', '        mintingAgents[_agent] = _status;\n', '    }\n', '\n', '    /// @notice update state change agent\n', '    function updateStateChangeAgent(address _agent, bool _status) public onlyOwner {\n', '        stateChangeAgents[_agent] = _status;\n', '    }\n', '\n', '    /// @return available tokens\n', '    function availableTokens() public view returns (uint256 tokens) {\n', '        return maxSupply.sub(totalSupply_);\n', '    }\n', '}\n', '/// @title TimeLocked\n', '/// @author Applicature\n', '/// @notice helper mixed to other contracts to lock contract on a timestamp\n', '/// @dev Base class\n', 'contract TimeLocked {\n', '    uint256 public time;\n', '    mapping(address => bool) public excludedAddresses;\n', '\n', '    modifier isTimeLocked(address _holder, bool _timeLocked) {\n', '        bool locked = (block.timestamp < time);\n', '        require(excludedAddresses[_holder] == true || locked == _timeLocked);\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _time) public {\n', '        time = _time;\n', '    }\n', '\n', '    function updateExcludedAddress(address _address, bool _status) public;\n', '}\n', '/// @title TimeLockedToken\n', '/// @author Applicature\n', '/// @notice helper mixed to other contracts to lock contract on a timestamp\n', '/// @dev Base class\n', 'contract TimeLockedToken is TimeLocked, StandardToken {\n', '\n', '    constructor(uint256 _time) public TimeLocked(_time) {}\n', '\n', '    function transfer(address _to, uint256 _tokens) public isTimeLocked(msg.sender, false) returns (bool) {\n', '       return super.transfer(_to, _tokens);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _holder,\n', '        address _to,\n', '        uint256 _tokens\n', '    ) public isTimeLocked(_holder, false) returns (bool) {\n', '        return super.transferFrom(_holder, _to, _tokens);\n', '    }\n', '}\n', 'contract Howdoo is OpenZeppelinERC20, MintableToken, TimeLockedToken {\n', '\n', '    uint256 public amendCount = 113;\n', '\n', '    constructor(uint256 _unlockTokensTime) public\n', '    OpenZeppelinERC20(0, "uDOO", 18, "uDOO", false)\n', '    MintableToken(888888888e18, 0, true)\n', '    TimeLockedToken(_unlockTokensTime) {\n', '\n', '    }\n', '\n', '    function updateExcludedAddress(address _address, bool _status) public onlyOwner {\n', '        excludedAddresses[_address] = _status;\n', '    }\n', '\n', '    function setUnlockTime(uint256 _unlockTokensTime) public onlyStateChangeAgents {\n', '        time = _unlockTokensTime;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns (bool) {\n', '        return super.transfer(_to, _tokens);\n', '    }\n', '\n', '    function transferFrom(address _holder, address _to, uint256 _tokens) public returns (bool) {\n', '        return super.transferFrom(_holder, _to, _tokens);\n', '    }\n', '\n', '    function migrateBalances(Howdoo _token, address[] _holders) public onlyOwner {\n', '        uint256 amount;\n', '\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            amount = _token.balanceOf(_holders[i]);\n', '\n', '            mint(_holders[i], amount);\n', '        }\n', '    }\n', '\n', '    function amendBalances(address[] _holders) public onlyOwner {\n', '        uint256 amount = 302074971158267328898484;\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            require(amendCount > 0);\n', '            amendCount--;\n', '            totalSupply_ = totalSupply_.sub(amount);\n', '            balances[_holders[i]] = balances[_holders[i]].sub(amount);\n', '            emit Transfer(_holders[i], address(0), amount);\n', '\n', '        }\n', '    }\n', '\n', '}']