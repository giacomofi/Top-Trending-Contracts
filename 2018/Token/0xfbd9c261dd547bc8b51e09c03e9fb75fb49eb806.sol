['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns(uint256);\n', '    \n', '    function balanceOf(address who) public view returns(uint256);\n', '    \n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    \n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    \n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    \n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public paused = false;\n', '    \n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    \n', '    bool public mintingFinished = false;\n', '    \n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '    \n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns(bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns(bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns(bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns(bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '    \n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '    \n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MavinToken\n', ' * @dev ERC20 mintable token\n', ' * The token will be minted by the crowdsale contract only\n', ' */\n', 'contract MavinToken is MintableToken, PausableToken {\n', '    \n', '    string public constant name = "Mavin Token";\n', '    string public constant symbol = "MVN";\n', '    uint8 public constant decimals = 18;\n', '    address public creator;\n', '    \n', '    function MavinToken()\n', '    public\n', '    Ownable()\n', '    MintableToken()\n', '    PausableToken() {\n', '        creator = msg.sender;\n', '        paused = true;\n', '    }\n', '    \n', '    function finalize()\n', '    public\n', '    onlyOwner {\n', "        finishMinting(); //this can't be reactivated\n", '        unpause();\n', '    }\n', '    \n', '    \n', '    function ownershipToCreator()\n', '    public {\n', '        require(creator == msg.sender);\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '/**\n', ' * @author OpenZeppelin\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'library Referral {\n', '    \n', '    /**\n', '     * @dev referral tree\n', '     */\n', '    event LogRef(address member, address referrer);\n', '    \n', '    struct Node {\n', '        address referrer;\n', '        bool valid;\n', '    }\n', '    \n', '    /**\n', '     * @dev tree is a collection of nodes\n', '     */\n', '    struct Tree {\n', '        mapping(address => Referral.Node) nodes;\n', '    }\n', '    \n', '    function addMember(\n', '                       Tree storage self,\n', '                       address _member,\n', '                       address _referrer\n', '                       \n', '                       )\n', '    internal\n', '    returns(bool success) {\n', '        Node memory memberNode;\n', '        memberNode.referrer = _referrer;\n', '        memberNode.valid = true;\n', '        self.nodes[_member] = memberNode;\n', '        LogRef(_member, _referrer);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract AffiliateTreeStore is Ownable {\n', '    using SafeMath for uint256;\n', '    using Referral for Referral.Tree;\n', '    \n', '    address public creator;\n', '    \n', '    Referral.Tree affiliateTree;\n', '    \n', '    function AffiliateTreeStore()\n', '    public {\n', '        creator = msg.sender;\n', '    }\n', '    \n', '    function ownershipToCreator()\n', '    public {\n', '        require(creator == msg.sender);\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function getNode(\n', '                     address _node\n', '                     )\n', '    public\n', '    view\n', '    returns(address referrer) {\n', '        Referral.Node memory n = affiliateTree.nodes[_node];\n', '        if (n.valid == true) {\n', '            return _node;\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function getReferrer(\n', '                         address _node\n', '                         )\n', '    public\n', '    view\n', '    returns(address referrer) {\n', '        Referral.Node memory n = affiliateTree.nodes[_node];\n', '        if (n.valid == true) {\n', '            return n.referrer;\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    function addMember(\n', '                       address _member,\n', '                       address _referrer\n', '                       )\n', '    \n', '    public\n', '    onlyOwner\n', '    returns(bool success) {\n', '        return affiliateTree.addMember(_member, _referrer);\n', '    }\n', '    \n', '    \n', '    // Fallback Function only ETH with no functionCall\n', '    function() public {\n', '        revert();\n', '    }\n', '    \n', '}\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    \n', '    event Released(uint256 amount);\n', '    event Revoked();\n', '    \n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '    \n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '    \n', '    bool public revocable;\n', '    \n', '    mapping(address => uint256) public released;\n', '    mapping(address => bool) public revoked;\n', '    \n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '     * of the balance will have vested.\n', '     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '     * @param _duration duration in seconds of the period in which the tokens will vest\n', '     * @param _revocable whether the vesting is revocable or not\n', '     */\n', '    function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '        require(_beneficiary != address(0));\n', '        require(_cliff <= _duration);\n', '        \n', '        beneficiary = _beneficiary;\n', '        revocable = _revocable;\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '    }\n', '    \n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function release(ERC20Basic token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '        \n', '        require(unreleased > 0);\n', '        \n', '        released[token] = released[token].add(unreleased);\n', '        \n', '        token.safeTransfer(beneficiary, unreleased);\n', '        \n', '        Released(unreleased);\n', '    }\n', '    \n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function revoke(ERC20Basic token) public onlyOwner {\n', '        require(revocable);\n', '        require(!revoked[token]);\n', '        \n', '        uint256 balance = token.balanceOf(this);\n', '        \n', '        uint256 unreleased = releasableAmount(token);\n', '        uint256 refund = balance.sub(unreleased);\n', '        \n', '        revoked[token] = true;\n', '        \n', '        token.safeTransfer(owner, refund);\n', '        \n', '        Revoked();\n', '    }\n', '    \n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param token ERC20 token which is being vested\n', '     */\n', '    function releasableAmount(ERC20Basic token) public view returns(uint256) {\n', '        return vestedAmount(token).sub(released[token]);\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function vestedAmount(ERC20Basic token) public view returns(uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '        \n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= start.add(duration) || revoked[token]) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(start)).div(duration);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract AffiliateManager is Pausable {\n', '    using SafeMath for uint256;\n', '    \n', '    AffiliateTreeStore public affiliateTree; // treeStorage\n', '    \n', '    // The token being sold\n', '    MavinToken public token;\n', '    // endTime\n', '    uint256 public endTime;\n', '    // hardcap\n', '    uint256 public cap;\n', '    // address where funds are collected\n', '    address public vault;\n', '    // how many token units a buyer gets per eth\n', '    uint256 public mvnpereth;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    // min contribution amount\n', '    uint256 public minAmountWei;\n', '    // creator\n', '    address creator;\n', '    \n', '    \n', '    function AffiliateManager(\n', '                              address _token,\n', '                              address _treestore\n', '                              )\n', '    public {\n', '        creator = msg.sender;\n', '        token = MavinToken(_token);\n', '        endTime = 1536969600; // Sat Sep 15 01:00:00 2018 GMT+1\n', '        vault = 0xD0b40D3bfd8DFa6ecC0b357555039C3ee1C11202;\n', '        mvnpereth = 100;\n', '        \n', '        minAmountWei = 0.1 ether;\n', '        cap = 32000 ether;\n', '        \n', '        affiliateTree = AffiliateTreeStore(_treestore);\n', '    }\n', '    \n', '    /// Log buyTokens\n', '    event LogBuyTokens(address owner, uint256 tokens, uint256 tokenprice);\n', '    /// Log LogId\n', '    event LogId(address owner, uint48 id);\n', '    \n', '    modifier onlyNonZeroAddress(address _a) {\n', '        require(_a != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier onlyDiffAdr(address _referrer, address _sender) {\n', '        require(_referrer != _sender);\n', '        _;\n', '    }\n', '    \n', '    function initAffiliate() public onlyOwner returns(bool) {\n', '        //create first 2 root nodes\n', '        bool success1 = affiliateTree.addMember(vault, 0); //root\n', '        bool success2 = affiliateTree.addMember(msg.sender, vault); //root+1\n', '        return success1 && success2;\n', '    }\n', '    \n', '    \n', '    // execute after all crowdsale tokens are minted\n', '    function finalizeCrowdsale() public onlyOwner returns(bool) {\n', '        \n', '        pause();\n', '        \n', '        uint256 totalSupply = token.totalSupply();\n', '        \n', '        // 6 month cliff, 12 month total\n', '        TokenVesting team = new TokenVesting(vault, now, 24 weeks, 1 years, false);\n', '        uint256 teamTokens = totalSupply.div(60).mul(16);\n', '        token.mint(team, teamTokens);\n', '        \n', '        uint256 reserveTokens = totalSupply.div(60).mul(18);\n', '        token.mint(vault, reserveTokens);\n', '        \n', '        uint256 advisoryTokens = totalSupply.div(60).mul(6);\n', '        token.mint(vault, advisoryTokens);\n', '        \n', '        token.transferOwnership(creator);\n', '    }\n', '    \n', '    function validPurchase() internal constant returns(bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= cap;\n', '        bool withinTime = endTime > now;\n', '        bool withinMinAmount = msg.value >= minAmountWei;\n', '        return withinCap && withinTime && withinMinAmount;\n', '    }\n', '    \n', '    function presaleMint(\n', '                         address _beneficiary,\n', '                         uint256 _amountmvn,\n', '                         uint256 _mvnpereth\n', '                         \n', '                         )\n', '    public\n', '    onlyOwner\n', '    returns(bool) {\n', '        uint256 _weiAmount = _amountmvn.div(_mvnpereth);\n', '        require(_beneficiary != address(0));\n', '        token.mint(_beneficiary, _amountmvn);\n', '        // update state\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        \n', '        LogBuyTokens(_beneficiary, _amountmvn, _mvnpereth);\n', '        return true;\n', '    }\n', '    \n', '    function joinManual(\n', '                        address _referrer,\n', '                        uint48 _id\n', '                        )\n', '    public\n', '    payable\n', '    whenNotPaused\n', '    onlyDiffAdr(_referrer, msg.sender) // prevent selfreferal\n', '    onlyDiffAdr(_referrer, this) // prevent reentrancy\n', '    returns(bool) {\n', '        LogId(msg.sender, _id);\n', '        return join(_referrer);\n', '    }\n', '    \n', '    \n', '    function join(\n', '                  address _referrer\n', '                  )\n', '    public\n', '    payable\n', '    whenNotPaused\n', '    onlyDiffAdr(_referrer, msg.sender) // prevent selfreferal\n', '    onlyDiffAdr(_referrer, this) // prevent reentrancy\n', '    returns(bool success)\n', '    \n', '    {\n', '        uint256 weiAmount = msg.value;\n', '        require(_referrer != vault);\n', '        require(validPurchase()); //respect min amount / cap / date\n', '        \n', '        //get existing sender node\n', '        address senderNode = affiliateTree.getNode(msg.sender);\n', '        \n', '        // if senderNode already exists use same referrer\n', '        if (senderNode != address(0)) {\n', '            _referrer =  affiliateTree.getReferrer(msg.sender);\n', '        }\n', '        \n', '        //get referrer\n', '        address referrerNode = affiliateTree.getNode(_referrer);\n', '        //referrer must exist\n', '        require(referrerNode != address(0));\n', '        \n', '        //get referrer of referrer\n', '        address topNode = affiliateTree.getReferrer(_referrer);\n', '        //referrer of referrer must exist\n', '        require(topNode != address(0));\n', '        require(topNode != msg.sender); //selfreferal\n', '        \n', '        \n', '        // Add sender to the tree\n', '        if (senderNode == address(0)) {\n', '            affiliateTree.addMember(msg.sender, _referrer);\n', '        }\n', '        \n', '        success = buyTokens(msg.sender, weiAmount);\n', '        \n', '        uint256 parentAmount = 0;\n', '        uint256 rootAmount = 0;\n', '        \n', '        //p1\n', '        parentAmount = weiAmount.div(100).mul(5); //5% commision for p1\n', '        referrerNode.transfer(parentAmount);\n', '        buyTokens(referrerNode, parentAmount);\n', '        \n', '        //p2\n', '        rootAmount = weiAmount.div(100).mul(3); //3% commision for p2\n', '        buyTokens(topNode, rootAmount);\n', '        topNode.transfer(rootAmount);\n', '        \n', '        vault.transfer(weiAmount.sub(parentAmount).sub(rootAmount)); //rest goes to vault\n', '        \n', '        return success;\n', '    }\n', '    \n', '    function buyTokens(\n', '                       address _beneficiary,\n', '                       uint256 _weiAmount\n', '                       )\n', '    internal\n', '    returns(bool success) {\n', '        require(_beneficiary != address(0));\n', '        uint256 tokens = 0;\n', '        \n', '        tokens = _weiAmount.mul(mvnpereth);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        success = token.mint(_beneficiary, tokens);\n', '        \n', '        LogBuyTokens(_beneficiary, tokens, mvnpereth);\n', '        return success;\n', '    }\n', '    \n', '    function updateMVNRate(uint256 _value) onlyOwner public returns(bool success) {\n', '        mvnpereth = _value;\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant returns(uint256 balance) {\n', '        return token.balanceOf(_owner);\n', '    }\n', '    \n', '    // Fallback Function only ETH with no functionCall\n', '    function() public {\n', '        revert();\n', '    }\n', '    \n', '}']