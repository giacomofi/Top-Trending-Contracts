['// File: contracts/GodMode.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @title God Mode\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev This contract provides a basic interface for God\n', '///  in a contract as well as the ability for God to pause\n', '///  the contract\n', 'contract GodMode {\n', '    /// @dev Is the contract paused?\n', '    bool public isPaused;\n', '\n', "    /// @dev God's address\n", '    address public god;\n', '\n', '    /// @dev Only God can run this function\n', '    modifier onlyGod()\n', '    {\n', '        require(god == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev This function can only be run while the contract\n', '    ///  is not paused\n', '    modifier notPaused()\n', '    {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    /// @dev This event is fired when the contract is paused\n', '    event GodPaused();\n', '\n', '    /// @dev This event is fired when the contract is unpaused\n', '    event GodUnpaused();\n', '\n', '    constructor() public\n', '    {\n', '        // Make the creator of the contract God\n', '        god = msg.sender;\n', '    }\n', '\n', '    /// @dev God can change the address of God\n', '    /// @param _newGod The new address for God\n', '    function godChangeGod(address _newGod) public onlyGod\n', '    {\n', '        god = _newGod;\n', '    }\n', '\n', '    /// @dev God can pause the game\n', '    function godPause() public onlyGod\n', '    {\n', '        isPaused = true;\n', '\n', '        emit GodPaused();\n', '    }\n', '\n', '    /// @dev God can unpause the game\n', '    function godUnpause() public onlyGod\n', '    {\n', '        isPaused = false;\n', '\n', '        emit GodUnpaused();\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthAbstractInterface.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @title King of Eth Abstract Interface\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev Abstract interface contract for titles and taxes\n', 'contract KingOfEthAbstractInterface {\n', '    /// @dev The address of the current King\n', '    address public king;\n', '\n', '    /// @dev The address of the current Wayfarer\n', '    address public wayfarer;\n', '\n', '    /// @dev Anyone can pay taxes\n', '    function payTaxes() public payable;\n', '}\n', '\n', '// File: contracts/KingOfEthBlindAuctionsReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth: Blind Auctions Referencer\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev This contract provides a reference to the blind auctions contract\n', 'contract KingOfEthBlindAuctionsReferencer is GodMode {\n', '    /// @dev The address of the blind auctions contract\n', '    address public blindAuctionsContract;\n', '\n', '    /// @dev Only the blind auctions contract can run this\n', '    modifier onlyBlindAuctionsContract()\n', '    {\n', '        require(blindAuctionsContract == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev God can set a new blind auctions contract\n', '    /// @param _blindAuctionsContract the address of the blind auctions\n', '    ///  contract\n', '    function godSetBlindAuctionsContract(address _blindAuctionsContract)\n', '        public\n', '        onlyGod\n', '    {\n', '        blindAuctionsContract = _blindAuctionsContract;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthOpenAuctionsReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth: Open Auctions Referencer\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev This contract provides a reference to the open auctions contract\n', 'contract KingOfEthOpenAuctionsReferencer is GodMode {\n', '    /// @dev The address of the auctions contract\n', '    address public openAuctionsContract;\n', '\n', '    /// @dev Only the open auctions contract can run this\n', '    modifier onlyOpenAuctionsContract()\n', '    {\n', '        require(openAuctionsContract == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev God can set a new auctions contract\n', '    function godSetOpenAuctionsContract(address _openAuctionsContract)\n', '        public\n', '        onlyGod\n', '    {\n', '        openAuctionsContract = _openAuctionsContract;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthAuctionsReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/// @title King of Eth: Auctions Referencer\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev This contract provides a reference to the auctions contracts\n', 'contract KingOfEthAuctionsReferencer is\n', '      KingOfEthBlindAuctionsReferencer\n', '    , KingOfEthOpenAuctionsReferencer\n', '{\n', '    /// @dev Only an auctions contract can run this\n', '    modifier onlyAuctionsContract()\n', '    {\n', '        require(blindAuctionsContract == msg.sender\n', '             || openAuctionsContract == msg.sender);\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth Referencer\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev Functionality to allow contracts to reference the king contract\n', 'contract KingOfEthReferencer is GodMode {\n', '    /// @dev The address of the king contract\n', '    address public kingOfEthContract;\n', '\n', '    /// @dev Only the king contract can run this\n', '    modifier onlyKingOfEthContract()\n', '    {\n', '        require(kingOfEthContract == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev God can change the king contract\n', '    /// @param _kingOfEthContract The new address\n', '    function godSetKingOfEthContract(address _kingOfEthContract)\n', '        public\n', '        onlyGod\n', '    {\n', '        kingOfEthContract = _kingOfEthContract;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthBoard.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/// @title King of Eth: Board\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev Contract for board\n', 'contract KingOfEthBoard is\n', '      GodMode\n', '    , KingOfEthAuctionsReferencer\n', '    , KingOfEthReferencer\n', '{\n', '    /// @dev x coordinate of the top left corner of the boundary\n', '    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n', '\n', '    /// @dev y coordinate of the top left corner of the boundary\n', '    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;\n', '\n', '    /// @dev x coordinate of the bottom right corner of the boundary\n', '    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n', '\n', '    /// @dev y coordinate of the bottom right corner of the boundary\n', '    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;\n', '\n', '    /// @dev Number used to divide the total number of house locations\n', '    /// after any expansion to yield the number of auctions that  will be\n', "    /// available to start for the expansion's duration\n", '    uint public constant auctionsAvailableDivisor = 10;\n', '\n', '    /// @dev Amount of time the King must wait between increasing the board\n', '    uint public constant kingTimeBetweenIncrease = 2 weeks;\n', '\n', '    /// @dev Amount of time the Wayfarer must wait between increasing the board\n', '    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;\n', '\n', '    /// @dev Amount of time that anyone but the King or Wayfarer must wait\n', '    ///  before increasing the board\n', '    uint public constant plebTimeBetweenIncrease = 4 weeks;\n', '\n', '    /// @dev The last time the board was increased in size\n', '    uint public lastIncreaseTime;\n', '\n', '    /// @dev The direction of the next increase\n', '    uint8 public nextIncreaseDirection;\n', '\n', '    /// @dev The number of auctions that players may choose to start\n', '    ///  for this expansion\n', '    uint public auctionsRemaining;\n', '\n', '    constructor() public\n', '    {\n', '        // Game is paused as God must start it\n', '        isPaused = true;\n', '\n', '        // Set the auctions remaining\n', '        setAuctionsAvailableForBounds();\n', '    }\n', '\n', '    /// @dev Fired when the board is increased in size\n', '    event BoardSizeIncreased(\n', '          address initiator\n', '        , uint newBoundX1\n', '        , uint newBoundY1\n', '        , uint newBoundX2\n', '        , uint newBoundY2\n', '        , uint lastIncreaseTime\n', '        , uint nextIncreaseDirection\n', '        , uint auctionsRemaining\n', '    );\n', '\n', '    /// @dev Only the King can run this\n', '    modifier onlyKing()\n', '    {\n', '        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only the Wayfarer can run this\n', '    modifier onlyWayfarer()\n', '    {\n', '        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev Set the total auctions available\n', '    function setAuctionsAvailableForBounds() private\n', '    {\n', '        uint boundDiffX = boundX2 - boundX1;\n', '        uint boundDiffY = boundY2 - boundY1;\n', '\n', '        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;\n', '    }\n', '\n', "    /// @dev Increase the board's size making sure to keep steady at\n", '    ///  the maximum outer bounds\n', '    function increaseBoard() private\n', '    {\n', '        // The length of increase\n', '        uint _increaseLength;\n', '\n', '        // If this increase direction is right\n', '        if(0 == nextIncreaseDirection)\n', '        {\n', '            _increaseLength = boundX2 - boundX1;\n', '            uint _updatedX2 = boundX2 + _increaseLength;\n', '\n', '            // Stay within bounds\n', '            if(_updatedX2 <= boundX2 || _updatedX2 <= _increaseLength)\n', '            {\n', '                boundX2 = ~uint(0);\n', '            }\n', '            else\n', '            {\n', '                boundX2 = _updatedX2;\n', '            }\n', '        }\n', '        // If this increase direction is down\n', '        else if(1 == nextIncreaseDirection)\n', '        {\n', '            _increaseLength = boundY2 - boundY1;\n', '            uint _updatedY2 = boundY2 + _increaseLength;\n', '\n', '            // Stay within bounds\n', '            if(_updatedY2 <= boundY2 || _updatedY2 <= _increaseLength)\n', '            {\n', '                boundY2 = ~uint(0);\n', '            }\n', '            else\n', '            {\n', '                boundY2 = _updatedY2;\n', '            }\n', '        }\n', '        // If this increase direction is left\n', '        else if(2 == nextIncreaseDirection)\n', '        {\n', '            _increaseLength = boundX2 - boundX1;\n', '\n', '            // Stay within bounds\n', '            if(boundX1 <= _increaseLength)\n', '            {\n', '                boundX1 = 0;\n', '            }\n', '            else\n', '            {\n', '                boundX1 -= _increaseLength;\n', '            }\n', '        }\n', '        // If this increase direction is up\n', '        else if(3 == nextIncreaseDirection)\n', '        {\n', '            _increaseLength = boundY2 - boundY1;\n', '\n', '            // Stay within bounds\n', '            if(boundY1 <= _increaseLength)\n', '            {\n', '                boundY1 = 0;\n', '            }\n', '            else\n', '            {\n', '                boundY1 -= _increaseLength;\n', '            }\n', '        }\n', '\n', '        // The last increase time is now\n', '        lastIncreaseTime = now;\n', '\n', '        // Set the next increase direction\n', '        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;\n', '\n', '        // Reset the auctions available\n', '        setAuctionsAvailableForBounds();\n', '\n', '        emit BoardSizeIncreased(\n', '              msg.sender\n', '            , boundX1\n', '            , boundY1\n', '            , boundX2\n', '            , boundY2\n', '            , now\n', '            , nextIncreaseDirection\n', '            , auctionsRemaining\n', '        );\n', '    }\n', '\n', '    /// @dev God can start the game\n', '    function godStartGame() public onlyGod\n', '    {\n', '        // Reset increase times\n', '        lastIncreaseTime = now;\n', '\n', '        // Unpause the game\n', '        godUnpause();\n', '    }\n', '\n', '    /// @dev The auctions contracts can decrement the number\n', '    ///  of auctions that are available to be started\n', '    function auctionsDecrementAuctionsRemaining()\n', '        public\n', '        onlyAuctionsContract\n', '    {\n', '        auctionsRemaining -= 1;\n', '    }\n', '\n', '    /// @dev The auctions contracts can increment the number\n', '    ///  of auctions that are available to be started when\n', '    ///  an auction ends wihout a winner\n', '    function auctionsIncrementAuctionsRemaining()\n', '        public\n', '        onlyAuctionsContract\n', '    {\n', '        auctionsRemaining += 1;\n', '    }\n', '\n', '    /// @dev The King can increase the board much faster than the plebs\n', '    function kingIncreaseBoard()\n', '        public\n', '        onlyKing\n', '    {\n', '        // Require enough time has passed since the last increase\n', '        require(lastIncreaseTime + kingTimeBetweenIncrease < now);\n', '\n', '        increaseBoard();\n', '    }\n', '\n', '    /// @dev The Wayfarer can increase the board faster than the plebs\n', '    function wayfarerIncreaseBoard()\n', '        public\n', '        onlyWayfarer\n', '    {\n', '        // Require enough time has passed since the last increase\n', '        require(lastIncreaseTime + wayfarerTimeBetweenIncrease < now);\n', '\n', '        increaseBoard();\n', '    }\n', '\n', '    /// @dev Any old pleb can increase the board\n', '    function plebIncreaseBoard() public\n', '    {\n', '        // Require enough time has passed since the last increase\n', '        require(lastIncreaseTime + plebTimeBetweenIncrease < now);\n', '\n', '        increaseBoard();\n', '    }\n', '}']