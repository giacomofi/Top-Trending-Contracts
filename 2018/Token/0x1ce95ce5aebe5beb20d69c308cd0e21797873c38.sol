['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Authorizable is Ownable {\n', '\n', '    mapping(address => bool) public authorized;\n', '\n', '    modifier onlyAuthorized() {\n', '        require(authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addAuthorized(address _toAdd) onlyOwner public {\n', '        authorized[_toAdd] = true;\n', '    }\n', '\n', '    function removeAuthorized(address _toRemove) onlyOwner public {\n', '        authorized[_toRemove] = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LiteNetCoin is StandardToken, Authorizable{\n', '\t\n', '\tuint256 public INITIAL_SUPPLY = 300000000 * 1 ether; // Всего токенов\n', '\tstring public constant name = "LiteNetCoin";\n', '    string public constant symbol = "LNC";\n', '\tuint8 public constant decimals = 18;\n', '\t\n', '\tconstructor() public  {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\t\tbalances[owner] = totalSupply_;\n', '    }\n', '\t\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Crowdsale is LiteNetCoin {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '    LiteNetCoin public token = new LiteNetCoin();\n', '\t\n', '\tuint256 public constant BASE_RATE = 2500;\n', ' \n', '\t// Старт pre sale 1\n', '\tuint64 public constant PRE_SALE_START_1 = 1526256000; // 14/05/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_1 = 1526860800; // 21/05/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 2\n', '\tuint64 public constant PRE_SALE_START_2 = 1527465600; // 28/05/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_2 = 1528588800; // 10/06/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 3\n', '\tuint64 public constant PRE_SALE_START_3 = 1529884800; // 25/06/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_3 = 1530403200; // 01/07/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 4\n', '\t\n', '\t//uint64 public constant PRE_SALE_START_4 = 1525996800; // 27/08/2018/00/00/00\n', '\tuint64 public constant PRE_SALE_START_4 = 1535328000; // 27/08/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_4 = 1518134400; // 02/09/2018/00/00/00\n', '\t\n', '\t// Старт pre ICO \n', '\tuint64 public constant PRE_ICO_START = 1538870400; // 07/10/2018/00/00/00\n', '\t//uint64 public constant PRE_ICO_FINISH = 1539475200; // 14/10/2018/00/00/00\n', '\t\n', '\t// Старт ICO \n', '\tuint64 public constant ICO_START = 1541030400; // 01/11/2018/00/00/00\n', '\t\n', '\t//Конец ICO\n', '\tuint64 public constant ICO_FINISH = 1541376000; // 05/11/2018/00/00/00\n', ' \n', '\t// ICO открыто или закрыто\n', '\tbool public icoClosed = false;\n', '\n', '\tuint256 totalBuyTokens_ = 0;\n', '\n', '\tevent BoughtTokens(address indexed to, uint256 value);\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\t\n', '\n', '\tenum TokenDistributions { crowdsale, reserve, bounty, team, founders }\n', '\tmapping(uint => uint256) public distributions;\n', '\t\n', '\taddress public teamTokens = 0xC7FDAE4f201D76281975D890d5491D90Ec433B0E;\n', '\taddress public notSoldTokens = 0x6CccCD6fa8184D29950dF21DDDE1069F5B37F3d1;\n', '\t\n', '\t\n', '\tconstructor() public  {\n', '\t\tdistributions[uint8(TokenDistributions.crowdsale)] = 240000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.founders)] = 12000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.reserve)] = 30000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.bounty)] = 9000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.team)] = 9000000 * 1 ether;\n', '\t}\n', '\n', '\t// меняем основной кошелек\n', '\tfunction changeOwner(address _newOwner) external onlyOwner{\n', '        owner = _newOwner;\n', '    }\n', '\t// меняем кошелек для команды, резерва и т.д.\n', '\tfunction changeTeamTokens(address _teamTokens) external onlyOwner{\n', '        teamTokens = _teamTokens;\n', '    }\n', '\t// меняем кошелек для непроданных токенов\n', '\tfunction changeNotSoldTokens(address _notSoldTokens) external onlyOwner{\n', '        notSoldTokens = _notSoldTokens;\n', '    }\n', '\n', '\n', '\t// Функция доставляет токены на кошелек покупателя при поступлении "эфира"\n', '    function() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '    }\n', '    \n', '    // получает адрес получаетля токенов\n', '    function buyTokens(address _addr) public payable {\n', '\t\trequire(msg.value >= 0.001 ether);\n', '\t\trequire(distributions[0] > 0);\n', '\t\trequire(totalBuyTokens_ <= INITIAL_SUPPLY );\n', '\t\trequire(getCurrentRound() > 0);\n', '\t\t\n', '\t\tuint discountPercent = getCurrentDiscountPercent();\n', '\t\t\n', '\t\tuint256 weiAmount = msg.value;\n', '        uint256 tokens = getRate(weiAmount);\n', '\t\tuint256 bonusTokens = tokens.mul(discountPercent).div(100);\n', '\t\ttokens += bonusTokens;\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(tokens);\n', '\n', '\t    token.transfer(_addr, tokens);\n', '\t\ttotalSupply_ = totalSupply_.sub(tokens);\n', '\t\tdistributions[0] = distributions[0].sub(tokens);\n', '\t\t\n', '\t    owner.transfer(msg.value);\n', '\t\t\n', '\t\temit TokenPurchase(msg.sender, _addr, weiAmount, tokens);\n', '    }\n', '\n', '\n', '\t\n', '\tfunction getCurrentRound() public view returns (uint8 round) {\n', '        round = 0;\n', '\t\t\n', '\t\tif(now > ICO_START + 3 days  && now <= ICO_START + 5 days)      round = 7;\n', '\t\tif(now > ICO_START        && now <= ICO_START        + 3 days)  round = 6;\n', '\t\tif(now > PRE_ICO_START    && now <= PRE_ICO_START    + 7 days)  round = 5;\n', '\t\tif(now > PRE_SALE_START_4 && now <= PRE_SALE_START_4 + 6 days)  round = 4;\n', '\t\tif(now > PRE_SALE_START_3 && now <= PRE_SALE_START_3 + 6 days)  round = 3;\n', '\t\tif(now > PRE_SALE_START_2 && now <= PRE_SALE_START_2 + 13 days) round = 2;\n', '\t\tif(now > PRE_SALE_START_1 && now <= PRE_SALE_START_1 + 8 days)  round = 1;\n', '\t\t\n', '\n', '\t\t/* if(now > ICO_START        ) round = 6;\n', '\t\tif(now > PRE_ICO_START    ) round = 5;\n', '\t\tif(now > PRE_SALE_START_4 ) round = 4;\n', '\t\tif(now > PRE_SALE_START_3 ) round = 3;\n', '\t\tif(now > PRE_SALE_START_2 ) round = 2;\n', '\t\tif(now > PRE_SALE_START_1 ) round = 1; */\n', '\t\t\n', '\t\t\n', '        return round;\n', '    }\n', '\t\n', '\t\n', '\tfunction getCurrentDiscountPercent() constant returns (uint){\n', '\t\tuint8 round = getCurrentRound();\n', '\t\tuint discountPercent = 0;\n', '\t\t\n', '\t\t\n', '\t\tif(round == 1 ) discountPercent = 65;\n', '\t\tif(round == 2 ) discountPercent = 65;\n', '\t\tif(round == 3 ) discountPercent = 60;\n', '\t\tif(round == 4 ) discountPercent = 55;\n', '\t\tif(round == 5 ) discountPercent = 40;\n', '\t\tif(round == 6 ) discountPercent = 30;\n', '\t\tif(round == 7 ) discountPercent = 0;\n', '\t\t\n', '\t\treturn discountPercent;\n', '\t\t\n', '\t}\n', '\t\n', '\n', '\tfunction totalBuyTokens() public view returns (uint256) {\n', '\t\treturn totalBuyTokens_;\n', '\t}\n', '\t\n', '\tfunction getRate(uint256 _weiAmount) internal view returns (uint256) {\n', '\t\treturn _weiAmount.mul(BASE_RATE);\n', '\t}\n', '\t\n', '\t\n', '\tfunction sendOtherTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\n', '        require(totalBuyTokens_ <= INITIAL_SUPPLY);\n', '\t\t\n', '\t\ttoken.transfer(_addr, _amount);\n', '\t\ttotalSupply_ = totalSupply_.sub(_amount);\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(_amount);\n', '\t\t\n', '    }\n', '\t\n', '\t\n', '\tfunction sendBountyTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\n', '        require(distributions[3] > 0);\n', '\t\tsendOtherTokens(_addr, _amount);\n', '\t\tdistributions[3] = distributions[3].sub(_amount);\n', '    }\n', '\t\n', '\n', '\t\n', '\t// Закрываем ICO \n', '    function close() public onlyOwner isNotIcoClosed {\n', '        // Закрываем ICO\n', '\t\trequire(now > ICO_FINISH);\n', '\t\t\n', '\t\tif(distributions[0] > 0){\n', '\t\t\ttoken.transfer(notSoldTokens, distributions[0]);\n', '\t\t\ttotalSupply_ = totalSupply_.sub(distributions[0]);\n', '\t\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[0]);\n', '\t\t\tdistributions[0] = 0;\n', '\t\t}\n', '\t\ttoken.transfer(teamTokens, distributions[1] + distributions[2] +  distributions[4]);\n', '\t\t\n', '\t\ttotalSupply_ = totalSupply_.sub(distributions[1] + distributions[2] +  distributions[4]);\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[1] + distributions[2] +  distributions[4]);\n', '\t\t\n', '\t\tdistributions[1] = 0;\n', '\t\tdistributions[2] = 0;\n', '\t\tdistributions[4] = 0;\n', '\t\t\n', '\t\t\n', '        icoClosed = true;\n', '    }\n', '\t\n', '\tmodifier isNotIcoClosed {\n', '        require(!icoClosed);\n', '        _;\n', '    }\n', '  \n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Authorizable is Ownable {\n', '\n', '    mapping(address => bool) public authorized;\n', '\n', '    modifier onlyAuthorized() {\n', '        require(authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addAuthorized(address _toAdd) onlyOwner public {\n', '        authorized[_toAdd] = true;\n', '    }\n', '\n', '    function removeAuthorized(address _toRemove) onlyOwner public {\n', '        authorized[_toRemove] = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LiteNetCoin is StandardToken, Authorizable{\n', '\t\n', '\tuint256 public INITIAL_SUPPLY = 300000000 * 1 ether; // Всего токенов\n', '\tstring public constant name = "LiteNetCoin";\n', '    string public constant symbol = "LNC";\n', '\tuint8 public constant decimals = 18;\n', '\t\n', '\tconstructor() public  {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\t\tbalances[owner] = totalSupply_;\n', '    }\n', '\t\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Crowdsale is LiteNetCoin {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '    LiteNetCoin public token = new LiteNetCoin();\n', '\t\n', '\tuint256 public constant BASE_RATE = 2500;\n', ' \n', '\t// Старт pre sale 1\n', '\tuint64 public constant PRE_SALE_START_1 = 1526256000; // 14/05/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_1 = 1526860800; // 21/05/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 2\n', '\tuint64 public constant PRE_SALE_START_2 = 1527465600; // 28/05/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_2 = 1528588800; // 10/06/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 3\n', '\tuint64 public constant PRE_SALE_START_3 = 1529884800; // 25/06/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_3 = 1530403200; // 01/07/2018/00/00/00\n', '\t\n', '\t// Старт pre sale 4\n', '\t\n', '\t//uint64 public constant PRE_SALE_START_4 = 1525996800; // 27/08/2018/00/00/00\n', '\tuint64 public constant PRE_SALE_START_4 = 1535328000; // 27/08/2018/00/00/00\n', '\t//uint64 public constant PRE_SALE_FINISH_4 = 1518134400; // 02/09/2018/00/00/00\n', '\t\n', '\t// Старт pre ICO \n', '\tuint64 public constant PRE_ICO_START = 1538870400; // 07/10/2018/00/00/00\n', '\t//uint64 public constant PRE_ICO_FINISH = 1539475200; // 14/10/2018/00/00/00\n', '\t\n', '\t// Старт ICO \n', '\tuint64 public constant ICO_START = 1541030400; // 01/11/2018/00/00/00\n', '\t\n', '\t//Конец ICO\n', '\tuint64 public constant ICO_FINISH = 1541376000; // 05/11/2018/00/00/00\n', ' \n', '\t// ICO открыто или закрыто\n', '\tbool public icoClosed = false;\n', '\n', '\tuint256 totalBuyTokens_ = 0;\n', '\n', '\tevent BoughtTokens(address indexed to, uint256 value);\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\t\n', '\n', '\tenum TokenDistributions { crowdsale, reserve, bounty, team, founders }\n', '\tmapping(uint => uint256) public distributions;\n', '\t\n', '\taddress public teamTokens = 0xC7FDAE4f201D76281975D890d5491D90Ec433B0E;\n', '\taddress public notSoldTokens = 0x6CccCD6fa8184D29950dF21DDDE1069F5B37F3d1;\n', '\t\n', '\t\n', '\tconstructor() public  {\n', '\t\tdistributions[uint8(TokenDistributions.crowdsale)] = 240000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.founders)] = 12000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.reserve)] = 30000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.bounty)] = 9000000 * 1 ether;\n', '\t\tdistributions[uint8(TokenDistributions.team)] = 9000000 * 1 ether;\n', '\t}\n', '\n', '\t// меняем основной кошелек\n', '\tfunction changeOwner(address _newOwner) external onlyOwner{\n', '        owner = _newOwner;\n', '    }\n', '\t// меняем кошелек для команды, резерва и т.д.\n', '\tfunction changeTeamTokens(address _teamTokens) external onlyOwner{\n', '        teamTokens = _teamTokens;\n', '    }\n', '\t// меняем кошелек для непроданных токенов\n', '\tfunction changeNotSoldTokens(address _notSoldTokens) external onlyOwner{\n', '        notSoldTokens = _notSoldTokens;\n', '    }\n', '\n', '\n', '\t// Функция доставляет токены на кошелек покупателя при поступлении "эфира"\n', '    function() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '    }\n', '    \n', '    // получает адрес получаетля токенов\n', '    function buyTokens(address _addr) public payable {\n', '\t\trequire(msg.value >= 0.001 ether);\n', '\t\trequire(distributions[0] > 0);\n', '\t\trequire(totalBuyTokens_ <= INITIAL_SUPPLY );\n', '\t\trequire(getCurrentRound() > 0);\n', '\t\t\n', '\t\tuint discountPercent = getCurrentDiscountPercent();\n', '\t\t\n', '\t\tuint256 weiAmount = msg.value;\n', '        uint256 tokens = getRate(weiAmount);\n', '\t\tuint256 bonusTokens = tokens.mul(discountPercent).div(100);\n', '\t\ttokens += bonusTokens;\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(tokens);\n', '\n', '\t    token.transfer(_addr, tokens);\n', '\t\ttotalSupply_ = totalSupply_.sub(tokens);\n', '\t\tdistributions[0] = distributions[0].sub(tokens);\n', '\t\t\n', '\t    owner.transfer(msg.value);\n', '\t\t\n', '\t\temit TokenPurchase(msg.sender, _addr, weiAmount, tokens);\n', '    }\n', '\n', '\n', '\t\n', '\tfunction getCurrentRound() public view returns (uint8 round) {\n', '        round = 0;\n', '\t\t\n', '\t\tif(now > ICO_START + 3 days  && now <= ICO_START + 5 days)      round = 7;\n', '\t\tif(now > ICO_START        && now <= ICO_START        + 3 days)  round = 6;\n', '\t\tif(now > PRE_ICO_START    && now <= PRE_ICO_START    + 7 days)  round = 5;\n', '\t\tif(now > PRE_SALE_START_4 && now <= PRE_SALE_START_4 + 6 days)  round = 4;\n', '\t\tif(now > PRE_SALE_START_3 && now <= PRE_SALE_START_3 + 6 days)  round = 3;\n', '\t\tif(now > PRE_SALE_START_2 && now <= PRE_SALE_START_2 + 13 days) round = 2;\n', '\t\tif(now > PRE_SALE_START_1 && now <= PRE_SALE_START_1 + 8 days)  round = 1;\n', '\t\t\n', '\n', '\t\t/* if(now > ICO_START        ) round = 6;\n', '\t\tif(now > PRE_ICO_START    ) round = 5;\n', '\t\tif(now > PRE_SALE_START_4 ) round = 4;\n', '\t\tif(now > PRE_SALE_START_3 ) round = 3;\n', '\t\tif(now > PRE_SALE_START_2 ) round = 2;\n', '\t\tif(now > PRE_SALE_START_1 ) round = 1; */\n', '\t\t\n', '\t\t\n', '        return round;\n', '    }\n', '\t\n', '\t\n', '\tfunction getCurrentDiscountPercent() constant returns (uint){\n', '\t\tuint8 round = getCurrentRound();\n', '\t\tuint discountPercent = 0;\n', '\t\t\n', '\t\t\n', '\t\tif(round == 1 ) discountPercent = 65;\n', '\t\tif(round == 2 ) discountPercent = 65;\n', '\t\tif(round == 3 ) discountPercent = 60;\n', '\t\tif(round == 4 ) discountPercent = 55;\n', '\t\tif(round == 5 ) discountPercent = 40;\n', '\t\tif(round == 6 ) discountPercent = 30;\n', '\t\tif(round == 7 ) discountPercent = 0;\n', '\t\t\n', '\t\treturn discountPercent;\n', '\t\t\n', '\t}\n', '\t\n', '\n', '\tfunction totalBuyTokens() public view returns (uint256) {\n', '\t\treturn totalBuyTokens_;\n', '\t}\n', '\t\n', '\tfunction getRate(uint256 _weiAmount) internal view returns (uint256) {\n', '\t\treturn _weiAmount.mul(BASE_RATE);\n', '\t}\n', '\t\n', '\t\n', '\tfunction sendOtherTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\n', '        require(totalBuyTokens_ <= INITIAL_SUPPLY);\n', '\t\t\n', '\t\ttoken.transfer(_addr, _amount);\n', '\t\ttotalSupply_ = totalSupply_.sub(_amount);\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(_amount);\n', '\t\t\n', '    }\n', '\t\n', '\t\n', '\tfunction sendBountyTokens(address _addr,uint256 _amount) onlyOwner onlyAuthorized isNotIcoClosed public {\n', '        require(distributions[3] > 0);\n', '\t\tsendOtherTokens(_addr, _amount);\n', '\t\tdistributions[3] = distributions[3].sub(_amount);\n', '    }\n', '\t\n', '\n', '\t\n', '\t// Закрываем ICO \n', '    function close() public onlyOwner isNotIcoClosed {\n', '        // Закрываем ICO\n', '\t\trequire(now > ICO_FINISH);\n', '\t\t\n', '\t\tif(distributions[0] > 0){\n', '\t\t\ttoken.transfer(notSoldTokens, distributions[0]);\n', '\t\t\ttotalSupply_ = totalSupply_.sub(distributions[0]);\n', '\t\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[0]);\n', '\t\t\tdistributions[0] = 0;\n', '\t\t}\n', '\t\ttoken.transfer(teamTokens, distributions[1] + distributions[2] +  distributions[4]);\n', '\t\t\n', '\t\ttotalSupply_ = totalSupply_.sub(distributions[1] + distributions[2] +  distributions[4]);\n', '\t\ttotalBuyTokens_ = totalBuyTokens_.add(distributions[1] + distributions[2] +  distributions[4]);\n', '\t\t\n', '\t\tdistributions[1] = 0;\n', '\t\tdistributions[2] = 0;\n', '\t\tdistributions[4] = 0;\n', '\t\t\n', '\t\t\n', '        icoClosed = true;\n', '    }\n', '\t\n', '\tmodifier isNotIcoClosed {\n', '        require(!icoClosed);\n', '        _;\n', '    }\n', '  \n', '}']
