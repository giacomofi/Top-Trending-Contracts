['pragma solidity ^0.4.15;\n', '\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() internal {\n', '    }\n', '\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '\n', 'contract IERC20Token {\n', '    function name() public constant returns (string) { name; }\n', '    function symbol() public constant returns (string) { symbol; }\n', '    function decimals() public constant returns (uint8) { decimals; }\n', '    function totalSupply() public constant returns (uint256) { totalSupply; }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '\n', 'contract StandardERC20Token is IERC20Token, Utils {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', '\n', '    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\n', '        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256) {\n', '        return balanceOf[_owner];\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value && _value > 0);\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value && _value > 0);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        // if the allowance isn&#39;t 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public constant returns (address) { owner; }\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', ' \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', 'contract GoolaStop is Owned{\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public ownerOnly{\n', '        stopped = true;\n', '    }\n', '    function start() public ownerOnly{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract GoolaToken is StandardERC20Token, Owned,GoolaStop {\n', '\n', '\n', '\n', '    uint256 constant public GOOLA_UNIT = 10 ** 18;\n', '    uint256 public totalSupply = 100 * (10**8) * GOOLA_UNIT;\n', '\n', '    uint256 constant public airdropSupply = 60 * 10**8 * GOOLA_UNIT;           \n', '    uint256 constant public earlyInitProjectSupply = 10 * 10**8 * GOOLA_UNIT;  \n', '    uint256 constant public teamSupply = 15 * 10**8 * GOOLA_UNIT;         \n', '    uint256 constant public ecosystemSupply = 15 * 10**8 * GOOLA_UNIT;   \n', '    \n', '    uint256  public tokensReleasedToTeam = 0;\n', '    uint256  public tokensReleasedToEcosystem = 0; \n', '    uint256  public currentSupply = 0;  \n', '    \n', '    address public goolaTeamAddress;     \n', '    address public ecosystemAddress;\n', '    address public backupAddress;\n', '\n', '    uint256 internal createTime = 1527730299;             \n', '    uint256 internal hasAirdrop = 0;\n', '    uint256 internal hasReleaseForEarlyInit = 0;\n', '    uint256 internal teamTranchesReleased = 0; \n', '    uint256 internal ecosystemTranchesReleased = 0;  \n', '    uint256 internal maxTranches = 16;       \n', '\n', '    function GoolaToken( address _ecosystemAddress, address _backupAddress, address _goolaTeamAddress)\n', '    StandardERC20Token("Goola token", "GOOLA", 18) public\n', '     {\n', '        goolaTeamAddress = _goolaTeamAddress;\n', '        ecosystemAddress = _ecosystemAddress;\n', '        backupAddress = _backupAddress;\n', '        createTime = now;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function withdrawERC20TokenTo(IERC20Token _token, address _to, uint256 _amount)\n', '        public\n', '        ownerOnly\n', '        validAddress(_token)\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        assert(_token.transfer(_to, _amount));\n', '\n', '    }\n', '    \n', '        \n', '    function airdropBatchTransfer(address[] _to,uint256 _amountOfEach) public ownerOnly {\n', '        require(_to.length > 0 && _amountOfEach > 0 && _to.length * _amountOfEach <=  (airdropSupply - hasAirdrop) && (currentSupply + (_to.length * _amountOfEach)) <= totalSupply && _to.length < 100000);\n', '        for(uint16 i = 0; i < _to.length ;i++){\n', '         balanceOf[_to[i]] = safeAdd(balanceOf[_to[i]], _amountOfEach);\n', '          Transfer(0x0, _to[i], _amountOfEach);\n', '        }\n', '            currentSupply += (_to.length * _amountOfEach);\n', '            hasAirdrop = safeAdd(hasAirdrop, _to.length * _amountOfEach);\n', '    }\n', '    \n', '  function releaseForEarlyInit(address[] _to,uint256 _amountOfEach) public ownerOnly {\n', '        require(_to.length > 0 && _amountOfEach > 0 && _to.length * _amountOfEach <=  (earlyInitProjectSupply - hasReleaseForEarlyInit) && (currentSupply + (_to.length * _amountOfEach)) <= totalSupply && _to.length < 100000);\n', '        for(uint16 i = 0; i < _to.length ;i++){\n', '          balanceOf[_to[i]] = safeAdd(balanceOf[_to[i]], _amountOfEach);\n', '          Transfer(0x0, _to[i], _amountOfEach);\n', '        }\n', '            currentSupply += (_to.length * _amountOfEach);\n', '            hasReleaseForEarlyInit = safeAdd(hasReleaseForEarlyInit, _to.length * _amountOfEach);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Release one  tranche of the ecosystemSupply allocation to Goola ecosystem,6.25% every tranche.About 4 years ecosystemSupply release over.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEcosystem()   public ownerOnly  returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToEcosystem < ecosystemSupply);\n', '\n', '        uint256 temp = ecosystemSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\n', '\n', '        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            ecosystemTranchesReleased++;\n', '            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\n', '            Transfer(0x0, ecosystemAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '       /**\n', '        @dev Release one  tranche of the teamSupply allocation to Goola team,6.25% every tranche.About 4 years Goola team will get teamSupply Tokens.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForGoolaTeam()   public ownerOnly  returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToTeam < teamSupply);\n', '\n', '        uint256 temp = teamSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\n', '\n', '        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            teamTranchesReleased++;\n', '            balanceOf[goolaTeamAddress] = safeAdd(balanceOf[goolaTeamAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\n', '            Transfer(0x0, goolaTeamAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '    function processWhenStop() public  ownerOnly   returns(bool success) {\n', '        require(currentSupply <=  totalSupply && stopped);\n', '        balanceOf[backupAddress] += (totalSupply - currentSupply);\n', '        currentSupply = totalSupply;\n', '       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\n', '        return true;\n', '    }\n', '    \n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() internal {\n', '    }\n', '\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '\n', 'contract IERC20Token {\n', '    function name() public constant returns (string) { name; }\n', '    function symbol() public constant returns (string) { symbol; }\n', '    function decimals() public constant returns (uint8) { decimals; }\n', '    function totalSupply() public constant returns (uint256) { totalSupply; }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '\n', 'contract StandardERC20Token is IERC20Token, Utils {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', '\n', '    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\n', '        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256) {\n', '        return balanceOf[_owner];\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value && _value > 0);\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value && _value > 0);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', "        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n", '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public constant returns (address) { owner; }\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', ' \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', 'contract GoolaStop is Owned{\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public ownerOnly{\n', '        stopped = true;\n', '    }\n', '    function start() public ownerOnly{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract GoolaToken is StandardERC20Token, Owned,GoolaStop {\n', '\n', '\n', '\n', '    uint256 constant public GOOLA_UNIT = 10 ** 18;\n', '    uint256 public totalSupply = 100 * (10**8) * GOOLA_UNIT;\n', '\n', '    uint256 constant public airdropSupply = 60 * 10**8 * GOOLA_UNIT;           \n', '    uint256 constant public earlyInitProjectSupply = 10 * 10**8 * GOOLA_UNIT;  \n', '    uint256 constant public teamSupply = 15 * 10**8 * GOOLA_UNIT;         \n', '    uint256 constant public ecosystemSupply = 15 * 10**8 * GOOLA_UNIT;   \n', '    \n', '    uint256  public tokensReleasedToTeam = 0;\n', '    uint256  public tokensReleasedToEcosystem = 0; \n', '    uint256  public currentSupply = 0;  \n', '    \n', '    address public goolaTeamAddress;     \n', '    address public ecosystemAddress;\n', '    address public backupAddress;\n', '\n', '    uint256 internal createTime = 1527730299;             \n', '    uint256 internal hasAirdrop = 0;\n', '    uint256 internal hasReleaseForEarlyInit = 0;\n', '    uint256 internal teamTranchesReleased = 0; \n', '    uint256 internal ecosystemTranchesReleased = 0;  \n', '    uint256 internal maxTranches = 16;       \n', '\n', '    function GoolaToken( address _ecosystemAddress, address _backupAddress, address _goolaTeamAddress)\n', '    StandardERC20Token("Goola token", "GOOLA", 18) public\n', '     {\n', '        goolaTeamAddress = _goolaTeamAddress;\n', '        ecosystemAddress = _ecosystemAddress;\n', '        backupAddress = _backupAddress;\n', '        createTime = now;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function withdrawERC20TokenTo(IERC20Token _token, address _to, uint256 _amount)\n', '        public\n', '        ownerOnly\n', '        validAddress(_token)\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        assert(_token.transfer(_to, _amount));\n', '\n', '    }\n', '    \n', '        \n', '    function airdropBatchTransfer(address[] _to,uint256 _amountOfEach) public ownerOnly {\n', '        require(_to.length > 0 && _amountOfEach > 0 && _to.length * _amountOfEach <=  (airdropSupply - hasAirdrop) && (currentSupply + (_to.length * _amountOfEach)) <= totalSupply && _to.length < 100000);\n', '        for(uint16 i = 0; i < _to.length ;i++){\n', '         balanceOf[_to[i]] = safeAdd(balanceOf[_to[i]], _amountOfEach);\n', '          Transfer(0x0, _to[i], _amountOfEach);\n', '        }\n', '            currentSupply += (_to.length * _amountOfEach);\n', '            hasAirdrop = safeAdd(hasAirdrop, _to.length * _amountOfEach);\n', '    }\n', '    \n', '  function releaseForEarlyInit(address[] _to,uint256 _amountOfEach) public ownerOnly {\n', '        require(_to.length > 0 && _amountOfEach > 0 && _to.length * _amountOfEach <=  (earlyInitProjectSupply - hasReleaseForEarlyInit) && (currentSupply + (_to.length * _amountOfEach)) <= totalSupply && _to.length < 100000);\n', '        for(uint16 i = 0; i < _to.length ;i++){\n', '          balanceOf[_to[i]] = safeAdd(balanceOf[_to[i]], _amountOfEach);\n', '          Transfer(0x0, _to[i], _amountOfEach);\n', '        }\n', '            currentSupply += (_to.length * _amountOfEach);\n', '            hasReleaseForEarlyInit = safeAdd(hasReleaseForEarlyInit, _to.length * _amountOfEach);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Release one  tranche of the ecosystemSupply allocation to Goola ecosystem,6.25% every tranche.About 4 years ecosystemSupply release over.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEcosystem()   public ownerOnly  returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToEcosystem < ecosystemSupply);\n', '\n', '        uint256 temp = ecosystemSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\n', '\n', '        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            ecosystemTranchesReleased++;\n', '            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\n', '            Transfer(0x0, ecosystemAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '       /**\n', '        @dev Release one  tranche of the teamSupply allocation to Goola team,6.25% every tranche.About 4 years Goola team will get teamSupply Tokens.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForGoolaTeam()   public ownerOnly  returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToTeam < teamSupply);\n', '\n', '        uint256 temp = teamSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\n', '\n', '        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            teamTranchesReleased++;\n', '            balanceOf[goolaTeamAddress] = safeAdd(balanceOf[goolaTeamAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\n', '            Transfer(0x0, goolaTeamAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '    function processWhenStop() public  ownerOnly   returns(bool success) {\n', '        require(currentSupply <=  totalSupply && stopped);\n', '        balanceOf[backupAddress] += (totalSupply - currentSupply);\n', '        currentSupply = totalSupply;\n', '       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\n', '        return true;\n', '    }\n', '    \n', '\n', '}']
