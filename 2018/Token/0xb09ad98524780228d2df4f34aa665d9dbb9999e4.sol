['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract AbstractERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '    function transfer(address _to, uint256 _value) public returns (bool _success);\n', '    function allowance(address owner, address spender) public constant returns (uint256 _value);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\n', '    function approve(address spender, uint256 value) public returns (bool _success);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract TradCoin is Ownable, AbstractERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    //address of distributor\n', '    address public distributor;\n', '    // The time after which Trad tokens become transferable.\n', '    // Current value is July 30, 2018 23:59:59 Eastern Time.\n', '    uint256 becomesTransferable = 1533009599;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    // balances allowed to transfer during locking\n', '    mapping (address => uint256) internal balancesAllowedToTransfer;\n', '    //mapping to show person is investor or team/project, true=>investor, false=>team/project\n', '    mapping (address => bool) public isInvestor;\n', '\n', '    event DistributorTransferred(address indexed _from, address indexed _to);\n', '    event Allocated(address _owner, address _investor, uint256 _tokenAmount);\n', '\n', '    constructor(address _distributor) public {\n', '        require (_distributor != address(0x0));\n', '        name = "TradCoin";\n', '        symbol = "TRADCoin";\n', '        decimals = 18 ;\n', '        totalSupply = 300e6 * 10**18;    // 300 million tokens\n', '        owner = msg.sender;\n', '        distributor = _distributor;\n', '        balances[distributor] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '\n', '    /// manually send tokens to investor\n', '    function allocateTokensToInvestors(address _to, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_to != address(0x0));\n', '        require(_value > 0);\n', '        uint256 unlockValue = (_value.mul(30)).div(100);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[distributor] = balances[distributor].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balancesAllowedToTransfer[_to] = unlockValue;\n', '        isInvestor[_to] = true;\n', '        emit Allocated(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// manually send tokens to investor\n', '    function allocateTokensToTeamAndProjects(address _to, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_to != address(0x0));\n', '        require(_value > 0);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[distributor] = balances[distributor].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Allocated(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Check balance of given account address\n', '    * @param owner The address account whose balance you want to know\n', '    * @return balance of the account\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256){\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address (written due to backward compatibility)\n', '    * @param to address to which token is transferred\n', '    * @param value amount of tokens to transfer\n', '    * return bool true=> transfer is succesful\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(to != address(0x0));\n', '        require(value <= balances[msg.sender]);\n', '        uint256 valueAllowedToTransfer;\n', '        if(isInvestor[msg.sender]){\n', '            if (now >= becomesTransferable){\n', '                valueAllowedToTransfer = balances[msg.sender];\n', '                assert(value <= valueAllowedToTransfer);\n', '            }else{\n', '                valueAllowedToTransfer = balancesAllowedToTransfer[msg.sender];\n', '                assert(value <= valueAllowedToTransfer);\n', '                balancesAllowedToTransfer[msg.sender] = balancesAllowedToTransfer[msg.sender].sub(value);\n', '            }\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address from which token is transferred \n', '    * @param to address to which token is transferred\n', '    * @param value amount of tokens to transfer\n', '    * @return bool true=> transfer is succesful\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0x0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        uint256 valueAllowedToTransfer;\n', '        if(isInvestor[from]){\n', '            if (now >= becomesTransferable){\n', '                valueAllowedToTransfer = balances[from];\n', '                assert(value <= valueAllowedToTransfer);\n', '            }else{\n', '                valueAllowedToTransfer = balancesAllowedToTransfer[from];\n', '                assert(value <= valueAllowedToTransfer);\n', '                balancesAllowedToTransfer[from] = balancesAllowedToTransfer[from].sub(value);\n', '            }\n', '        }\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    //function to check available balance to transfer tokens during locking perios for investors\n', '    function availableBalanceInLockingPeriodForInvestor(address owner) public view returns(uint256){\n', '        return balancesAllowedToTransfer[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve function will delegate spender to spent tokens on msg.sender behalf\n', '    * @param spender ddress which is delegated\n', '    * @param value tokens amount which are delegated\n', '    * @return bool true=> approve is succesful\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev it will check amount of token delegated to spender by owner\n', '    * @param owner the address which allows someone to spend fund on his behalf\n', '    * @param spender address which is delegated\n', '    * @return return uint256 amount of tokens left with delegator\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev increment the spender delegated tokens\n', '    * @param spender address which is delegated\n', '    * @param valueToAdd tokens amount to increment\n', '    * @return bool true=> operation is succesful\n', '    */\n', '    function increaseApproval(address spender, uint valueToAdd) public returns (bool) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(valueToAdd);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev deccrement the spender delegated tokens\n', '    * @param spender address which is delegated\n', '    * @param valueToSubstract tokens amount to decrement\n', '    * @return bool true=> operation is succesful\n', '    */\n', '    function decreaseApproval(address spender, uint valueToSubstract) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][spender];\n', '        if (valueToSubstract > oldValue) {\n', '          allowed[msg.sender][spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][spender] = oldValue.sub(valueToSubstract);\n', '        }\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract AbstractERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '    function transfer(address _to, uint256 _value) public returns (bool _success);\n', '    function allowance(address owner, address spender) public constant returns (uint256 _value);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool _success);\n', '    function approve(address spender, uint256 value) public returns (bool _success);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract TradCoin is Ownable, AbstractERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    //address of distributor\n', '    address public distributor;\n', '    // The time after which Trad tokens become transferable.\n', '    // Current value is July 30, 2018 23:59:59 Eastern Time.\n', '    uint256 becomesTransferable = 1533009599;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    // balances allowed to transfer during locking\n', '    mapping (address => uint256) internal balancesAllowedToTransfer;\n', '    //mapping to show person is investor or team/project, true=>investor, false=>team/project\n', '    mapping (address => bool) public isInvestor;\n', '\n', '    event DistributorTransferred(address indexed _from, address indexed _to);\n', '    event Allocated(address _owner, address _investor, uint256 _tokenAmount);\n', '\n', '    constructor(address _distributor) public {\n', '        require (_distributor != address(0x0));\n', '        name = "TradCoin";\n', '        symbol = "TRADCoin";\n', '        decimals = 18 ;\n', '        totalSupply = 300e6 * 10**18;    // 300 million tokens\n', '        owner = msg.sender;\n', '        distributor = _distributor;\n', '        balances[distributor] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '\n', '    /// manually send tokens to investor\n', '    function allocateTokensToInvestors(address _to, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_to != address(0x0));\n', '        require(_value > 0);\n', '        uint256 unlockValue = (_value.mul(30)).div(100);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[distributor] = balances[distributor].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balancesAllowedToTransfer[_to] = unlockValue;\n', '        isInvestor[_to] = true;\n', '        emit Allocated(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// manually send tokens to investor\n', '    function allocateTokensToTeamAndProjects(address _to, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_to != address(0x0));\n', '        require(_value > 0);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[distributor] = balances[distributor].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Allocated(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Check balance of given account address\n', '    * @param owner The address account whose balance you want to know\n', '    * @return balance of the account\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256){\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address (written due to backward compatibility)\n', '    * @param to address to which token is transferred\n', '    * @param value amount of tokens to transfer\n', '    * return bool true=> transfer is succesful\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(to != address(0x0));\n', '        require(value <= balances[msg.sender]);\n', '        uint256 valueAllowedToTransfer;\n', '        if(isInvestor[msg.sender]){\n', '            if (now >= becomesTransferable){\n', '                valueAllowedToTransfer = balances[msg.sender];\n', '                assert(value <= valueAllowedToTransfer);\n', '            }else{\n', '                valueAllowedToTransfer = balancesAllowedToTransfer[msg.sender];\n', '                assert(value <= valueAllowedToTransfer);\n', '                balancesAllowedToTransfer[msg.sender] = balancesAllowedToTransfer[msg.sender].sub(value);\n', '            }\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address from which token is transferred \n', '    * @param to address to which token is transferred\n', '    * @param value amount of tokens to transfer\n', '    * @return bool true=> transfer is succesful\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0x0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        uint256 valueAllowedToTransfer;\n', '        if(isInvestor[from]){\n', '            if (now >= becomesTransferable){\n', '                valueAllowedToTransfer = balances[from];\n', '                assert(value <= valueAllowedToTransfer);\n', '            }else{\n', '                valueAllowedToTransfer = balancesAllowedToTransfer[from];\n', '                assert(value <= valueAllowedToTransfer);\n', '                balancesAllowedToTransfer[from] = balancesAllowedToTransfer[from].sub(value);\n', '            }\n', '        }\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    //function to check available balance to transfer tokens during locking perios for investors\n', '    function availableBalanceInLockingPeriodForInvestor(address owner) public view returns(uint256){\n', '        return balancesAllowedToTransfer[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve function will delegate spender to spent tokens on msg.sender behalf\n', '    * @param spender ddress which is delegated\n', '    * @param value tokens amount which are delegated\n', '    * @return bool true=> approve is succesful\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev it will check amount of token delegated to spender by owner\n', '    * @param owner the address which allows someone to spend fund on his behalf\n', '    * @param spender address which is delegated\n', '    * @return return uint256 amount of tokens left with delegator\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev increment the spender delegated tokens\n', '    * @param spender address which is delegated\n', '    * @param valueToAdd tokens amount to increment\n', '    * @return bool true=> operation is succesful\n', '    */\n', '    function increaseApproval(address spender, uint valueToAdd) public returns (bool) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(valueToAdd);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev deccrement the spender delegated tokens\n', '    * @param spender address which is delegated\n', '    * @param valueToSubstract tokens amount to decrement\n', '    * @return bool true=> operation is succesful\n', '    */\n', '    function decreaseApproval(address spender, uint valueToSubstract) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][spender];\n', '        if (valueToSubstract > oldValue) {\n', '          allowed[msg.sender][spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][spender] = oldValue.sub(valueToSubstract);\n', '        }\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '}']
