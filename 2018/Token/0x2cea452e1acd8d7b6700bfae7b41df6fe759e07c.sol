['pragma solidity 0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasePlan {\n', '  using SafeMath for uint256;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  address public beneficiary;\n', '  uint256 public start;\n', '  uint256 public lockedTime;\n', '  uint256 public releasePeriod;\n', '  uint256 public releasePercent;\n', '  uint256 public duration;\n', '\n', '  mapping (address => uint256) public released;\n', '  // mapping (address => uint256) public releasedAt;\n', '\n', '  // core team start at 1566000000                         2% per month       0.2 (20%)\n', '  // investment start at first release  lock 12 months,    5% per month       0.2 (20%)\n', '  // community start at first release                      1% per month       0.3 (30%)\n', '  // fund start at first release          lock 12 months,  5% per month       0.2 (20%)\n', '  // mint  10%\n', '\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,         // 1566000000 or now\n', '    uint256 _lockedTime,    // 0 or 12 months\n', '    uint256 _releasePeriod, // 1 month 3600 * 24 * 30\n', '    uint256 _releasePercent // like 2,5\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require (_start >= now);\n', '    require(_releasePercent > 0 && _releasePercent <= 100);\n', '\n', '    beneficiary = _beneficiary;\n', '    start = _start;\n', '    releasePeriod = _releasePeriod;\n', '    lockedTime = _lockedTime;\n', '    releasePercent = _releasePercent;\n', '    duration = SafeMath.add(lockedTime, _releasePeriod * SafeMath.div(100, _releasePercent)); // lock time + release period\n', '  }\n', '\n', '  function release(ERC20 _token) public {\n', '    uint256 unreleased = releasableAmount(_token);\n', '    require(unreleased > 0);\n', '\n', '    released[_token] = released[_token].add(unreleased);\n', '    _token.transfer(beneficiary, unreleased);\n', '    emit Released(unreleased);\n', '  }\n', '  \n', '  function releasableAmount(ERC20 _token) public view returns (uint256) {\n', '    uint256 currentBalance = _token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[_token]);\n', '    \n', '    uint256 time = now;\n', '    if (time >= start.add(duration)) {\n', '      return currentBalance; \n', '    } \n', '    if (time <= start.add(lockedTime)) {\n', '      return 0;\n', '    } \n', '    \n', '    return totalBalance.mul(releasePercent).div(100).mul(\n', '        (now - lockedTime - start).div(releasePeriod)\n', '        ) -  released[_token];\n', '  }\n', ' \n', '}']