['pragma solidity ^0.4.21;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwner(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Mintable is Ownable {\n', '    mapping(address => bool) minters;\n', '\n', '    modifier onlyMinter {\n', '        require(minters[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function Mintable() public {\n', '        adjustMinter(msg.sender, true);\n', '    }\n', '\n', '    function adjustMinter(address minter, bool canMint) public onlyOwner {\n', '        minters[minter] = canMint;\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', 'contract AkilosToken is EIP20Interface, Ownable, SafeMath, Mintable {\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    string public name = "Akilos";\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    string public symbol = "ALS";\n', '\n', '    function AkilosToken() public {\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowance, _value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) public onlyMinter {\n', '        totalSupply = safeAdd(totalSupply, _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(0x0, _to, _value);\n', '    }\n', '}\n', '\n', 'contract AkilosIco is Ownable, SafeMath {\n', '\n', '    uint256 public startBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public maxGasPrice;\n', '\n', '    uint256 public exchangeRate;\n', '\n', '    uint256 public maxSupply;\n', '\n', '    mapping(address => uint256) public participants;\n', '\n', '    AkilosToken public token;\n', '\n', '    address private wallet;\n', '\n', '    bool private initialised;\n', '\n', '    modifier participationOpen  {\n', '        require(block.number >= startBlock);\n', '        require(block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    function initialise(address _wallet, uint256 _startBlock, uint256 _endBlock, uint256 _maxGasPrice, uint256 _exchangeRate, uint256 _maxSupply) public onlyOwner returns (address tokenAddress) {\n', '\n', '        if (token == address(0x0)) {\n', '            token = new AkilosToken();\n', '            token.transferOwner(owner);\n', '        }\n', '\n', '        wallet = _wallet;\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '        maxGasPrice = _maxGasPrice;\n', '        exchangeRate = _exchangeRate;\n', '        maxSupply = _maxSupply;\n', '        initialised = true;\n', '\n', '        return token;\n', '    }\n', '\n', '\n', '    function() public payable {\n', '        participate(msg.sender, msg.value);\n', '    }\n', '\n', '    function participate(address participant, uint256 value) internal participationOpen {\n', '        require(participant != address(0x0));\n', '\n', '        require(tx.gasprice <= maxGasPrice);\n', '\n', '        require(initialised);\n', '\n', '        uint256 totalSupply = token.totalSupply();\n', '        require(totalSupply < maxSupply);\n', '\n', '        uint256 tokenCount = safeMul(value, exchangeRate);\n', '        uint256 remaining = 0;\n', '\n', '        uint256 newTotalSupply = safeAdd(totalSupply, tokenCount);\n', '        if (newTotalSupply > maxSupply) {\n', '            uint256 newTokenCount = newTotalSupply - maxSupply;\n', '\n', '            remaining = safeDiv(tokenCount - newTokenCount, exchangeRate);\n', '            tokenCount = newTokenCount;\n', '        }\n', '\n', '        if (remaining > 0) {\n', '            msg.sender.transfer(remaining);\n', '            value = safeSub(value, remaining);\n', '        }\n', '\n', '        msg.sender.transfer(value);\n', '\n', '//        wallet.transfer(value);\n', '\n', '        safeAdd(participants[participant], tokenCount);\n', '\n', '        token.mint(msg.sender, tokenCount);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwner(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Mintable is Ownable {\n', '    mapping(address => bool) minters;\n', '\n', '    modifier onlyMinter {\n', '        require(minters[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function Mintable() public {\n', '        adjustMinter(msg.sender, true);\n', '    }\n', '\n', '    function adjustMinter(address minter, bool canMint) public onlyOwner {\n', '        minters[minter] = canMint;\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', 'contract AkilosToken is EIP20Interface, Ownable, SafeMath, Mintable {\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    string public name = "Akilos";\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    string public symbol = "ALS";\n', '\n', '    function AkilosToken() public {\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowance, _value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) public onlyMinter {\n', '        totalSupply = safeAdd(totalSupply, _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(0x0, _to, _value);\n', '    }\n', '}\n', '\n', 'contract AkilosIco is Ownable, SafeMath {\n', '\n', '    uint256 public startBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public maxGasPrice;\n', '\n', '    uint256 public exchangeRate;\n', '\n', '    uint256 public maxSupply;\n', '\n', '    mapping(address => uint256) public participants;\n', '\n', '    AkilosToken public token;\n', '\n', '    address private wallet;\n', '\n', '    bool private initialised;\n', '\n', '    modifier participationOpen  {\n', '        require(block.number >= startBlock);\n', '        require(block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    function initialise(address _wallet, uint256 _startBlock, uint256 _endBlock, uint256 _maxGasPrice, uint256 _exchangeRate, uint256 _maxSupply) public onlyOwner returns (address tokenAddress) {\n', '\n', '        if (token == address(0x0)) {\n', '            token = new AkilosToken();\n', '            token.transferOwner(owner);\n', '        }\n', '\n', '        wallet = _wallet;\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '        maxGasPrice = _maxGasPrice;\n', '        exchangeRate = _exchangeRate;\n', '        maxSupply = _maxSupply;\n', '        initialised = true;\n', '\n', '        return token;\n', '    }\n', '\n', '\n', '    function() public payable {\n', '        participate(msg.sender, msg.value);\n', '    }\n', '\n', '    function participate(address participant, uint256 value) internal participationOpen {\n', '        require(participant != address(0x0));\n', '\n', '        require(tx.gasprice <= maxGasPrice);\n', '\n', '        require(initialised);\n', '\n', '        uint256 totalSupply = token.totalSupply();\n', '        require(totalSupply < maxSupply);\n', '\n', '        uint256 tokenCount = safeMul(value, exchangeRate);\n', '        uint256 remaining = 0;\n', '\n', '        uint256 newTotalSupply = safeAdd(totalSupply, tokenCount);\n', '        if (newTotalSupply > maxSupply) {\n', '            uint256 newTokenCount = newTotalSupply - maxSupply;\n', '\n', '            remaining = safeDiv(tokenCount - newTokenCount, exchangeRate);\n', '            tokenCount = newTokenCount;\n', '        }\n', '\n', '        if (remaining > 0) {\n', '            msg.sender.transfer(remaining);\n', '            value = safeSub(value, remaining);\n', '        }\n', '\n', '        msg.sender.transfer(value);\n', '\n', '//        wallet.transfer(value);\n', '\n', '        safeAdd(participants[participant], tokenCount);\n', '\n', '        token.mint(msg.sender, tokenCount);\n', '    }\n', '}']
