['pragma solidity ^0.4.24;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) pure internal returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) pure internal returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256 supply);\n', '  function balanceOf(address who) public view returns (uint256 balance);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  function transfer(address to, uint256 value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n', '  function approve(address spender, uint256 value) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  uint256 public _totalSupply;\n', '  address public _creator;\n', '  bool bIsFreezeAll = false;\n', '\n', '  function totalSupply() public view returns (uint256) \n', '  {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) \n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) \n', '  {\n', '    require(bIsFreezeAll == false);\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '  {\n', '    require(bIsFreezeAll == false);\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) \n', '  {\n', '\t  require(bIsFreezeAll == false);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function freezeAll() public\n', '  {\n', '    require(msg.sender == _creator);\n', '    bIsFreezeAll = !bIsFreezeAll;\n', '  }\n', '}\n', '\n', 'contract TYROS is StandardToken {\n', '  string public name = "TYROS Token";\n', '  string public symbol = "TYROS";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant initial_supply = 50 * 10 ** 26;\t\n', '  \n', '  mapping (address => string) public keys;\n', '\n', '  event LogRegister (address user, string key);\n', '\n', '  constructor() public\n', '  {\n', '    _creator = msg.sender;\n', '    _totalSupply = initial_supply;\n', '    balances[_creator] = initial_supply;\n', '    bIsFreezeAll = false;\n', '  }\n', '  \n', '  function destroy() public\n', '  {\n', '    require(msg.sender == _creator);\n', '    selfdestruct(_creator);\n', '  }\n', '\n', '  function register(string key) public \n', '  {\n', '    keys[msg.sender] = key;\n', '    emit LogRegister(msg.sender, key);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) pure internal returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) pure internal returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256 supply);\n', '  function balanceOf(address who) public view returns (uint256 balance);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  function transfer(address to, uint256 value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n', '  function approve(address spender, uint256 value) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  uint256 public _totalSupply;\n', '  address public _creator;\n', '  bool bIsFreezeAll = false;\n', '\n', '  function totalSupply() public view returns (uint256) \n', '  {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) \n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) \n', '  {\n', '    require(bIsFreezeAll == false);\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '  {\n', '    require(bIsFreezeAll == false);\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) \n', '  {\n', '\t  require(bIsFreezeAll == false);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function freezeAll() public\n', '  {\n', '    require(msg.sender == _creator);\n', '    bIsFreezeAll = !bIsFreezeAll;\n', '  }\n', '}\n', '\n', 'contract TYROS is StandardToken {\n', '  string public name = "TYROS Token";\n', '  string public symbol = "TYROS";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant initial_supply = 50 * 10 ** 26;\t\n', '  \n', '  mapping (address => string) public keys;\n', '\n', '  event LogRegister (address user, string key);\n', '\n', '  constructor() public\n', '  {\n', '    _creator = msg.sender;\n', '    _totalSupply = initial_supply;\n', '    balances[_creator] = initial_supply;\n', '    bIsFreezeAll = false;\n', '  }\n', '  \n', '  function destroy() public\n', '  {\n', '    require(msg.sender == _creator);\n', '    selfdestruct(_creator);\n', '  }\n', '\n', '  function register(string key) public \n', '  {\n', '    keys[msg.sender] = key;\n', '    emit LogRegister(msg.sender, key);\n', '  }\n', '}']
