['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    \n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '    /**\n', '    * @title Basic token\n', '    * @dev Basic version of StandardToken, with no allowances.\n', '    */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '    address public hiddenOwner;\n', '    address public superOwner;\n', '    address public tokenExchanger;\n', '    address[10] public chkOwnerList;\n', '\n', '    mapping (address => bool) public owners;\n', '    \n', '    event AddOwner(address indexed newOwner);\n', '    event DeleteOwner(address indexed toDeleteOwner);\n', '    event SetTex(address indexed newTex);\n', '    event ChangeSuperOwner(address indexed newSuperOwner);\n', '    event ChangeHiddenOwner(address indexed newHiddenOwner);\n', '\n', '    constructor() public {\n', '        hiddenOwner = msg.sender;\n', '        superOwner = msg.sender;\n', '        owners[superOwner] = true;\n', '        chkOwnerList[0] = msg.sender;\n', '        tokenExchanger = msg.sender;\n', '    }\n', '\n', '    modifier onlySuperOwner() {\n', '        require(superOwner == msg.sender);\n', '        _;\n', '    }\n', '    modifier onlyHiddenOwner() {\n', '        require(hiddenOwner == msg.sender);\n', '        _;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function changeSuperOwnership(address newSuperOwner) public onlyHiddenOwner returns(bool) {\n', '        require(newSuperOwner != address(0));\n', '        superOwner = newSuperOwner;\n', '        emit ChangeSuperOwner(superOwner);\n', '        return true;\n', '    }\n', '    \n', '    function changeHiddenOwnership(address newHiddenOwner) public onlyHiddenOwner returns(bool) {\n', '        require(newHiddenOwner != address(0));\n', '        hiddenOwner = newHiddenOwner;\n', '        emit ChangeHiddenOwner(hiddenOwner);\n', '        return true;\n', '    }\n', '\n', '    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n', '        require(num < 10);\n', '        require(owner != address(0));\n', '        require(chkOwnerList[num] == address(0));\n', '        owners[owner] = true;\n', '        chkOwnerList[num] = owner;\n', '        emit AddOwner(owner);\n', '        return true;\n', '    }\n', '\n', '    function setTEx(address tex) public onlySuperOwner returns (bool) {\n', '        require(tex != address(0));\n', '        tokenExchanger = tex;\n', '        emit SetTex(tex);\n', '        return true;\n', '    }\n', '\n', '    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n', '        require(chkOwnerList[num] == owner);\n', '        require(owner != address(0));\n', '        owners[owner] = false;\n', '        chkOwnerList[num] = address(0);\n', '        emit DeleteOwner(owner);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract HasNoEther is MultiOwnable {\n', '    \n', '    /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '    constructor() public payable {\n', '        require(msg.value == 0);\n', '    }\n', '    \n', '    /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '    function() external {\n', '    }\n', '    \n', '    /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '    function reclaimEther() external onlySuperOwner returns(bool) {\n', '        superOwner.transfer(address(this).balance);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Blacklist is MultiOwnable {\n', '   \n', '    mapping(address => bool) blacklisted;\n', '    \n', '    event Blacklisted(address indexed blacklist);\n', '    event Whitelisted(address indexed whitelist);\n', '\n', '    modifier whenPermitted(address node) {\n', '        require(!blacklisted[node]);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Check a certain node is in a blacklist\n', '    * @param node  Check whether the user at a certain node is in a blacklist\n', '    */\n', '    function isPermitted(address node) public view returns (bool) {\n', '        return !blacklisted[node];\n', '    }\n', '\n', '    /**\n', '    * @dev Process blacklisting\n', '    * @param node Process blacklisting. Put the user in the blacklist.   \n', '    */\n', '    function blacklist(address node) public onlyOwner returns (bool) {\n', '        blacklisted[node] = true;\n', '        emit Blacklisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '\n', '    /**\n', '    * @dev Process unBlacklisting. \n', '    * @param node Remove the user from the blacklist.   \n', '    */\n', '    function unblacklist(address node) public onlySuperOwner returns (bool) {\n', '        blacklisted[node] = false;\n', '        emit Whitelisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '}\n', '\n', 'contract TimelockToken is StandardToken, HasNoEther, Blacklist {\n', '    bool public timelock;\n', '    uint256 public openingTime;\n', '\n', '    struct chkBalance {\n', '        uint256 _sent;\n', '        uint256 _initial;\n', '        uint256 _limit;\n', '    }\n', '\n', '    mapping(address => bool) public p2pAddrs;\n', '    mapping(address => chkBalance) public chkInvestorBalance;\n', '    \n', '    event Postcomplete(address indexed _from, address indexed _spender, address indexed _to, uint256 _value);\n', '    event OnTimeLock(address who);\n', '    event OffTimeLock(address who);\n', '    event P2pUnlocker(address addr);\n', '    event P2pLocker(address addr);\n', '    \n', '\n', '    constructor() public {\n', '        openingTime = block.timestamp;\n', '        p2pAddrs[msg.sender] = true;\n', '        timelock = false;\n', '    }\n', '\n', '    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n', '        emit Postcomplete(from, spender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function p2pUnlocker (address addr) public onlySuperOwner returns (bool) {\n', '        p2pAddrs[addr] = true;\n', '        \n', '        emit P2pUnlocker(addr);\n', '\n', '        return p2pAddrs[addr];\n', '    }\n', '\n', '    function p2pLocker (address addr) public onlyOwner returns (bool) {\n', '        p2pAddrs[addr] = false;\n', '        \n', '        emit P2pLocker(addr);\n', '\n', '        return p2pAddrs[addr];\n', '    }\n', '\n', '    function onTimeLock() public onlySuperOwner returns (bool) {\n', '        timelock = true;\n', '        \n', '        emit OnTimeLock(msg.sender);\n', '        \n', '        return timelock;\n', '    }\n', '\n', '    function offTimeLock() public onlySuperOwner returns (bool) {\n', '        timelock = false;\n', '        \n', '        emit OffTimeLock(msg.sender);\n', '        \n', '        return timelock;\n', '    }\n', '  \n', '    function transfer(address to, uint256 value) public \n', '    whenPermitted(msg.sender) returns (bool) {\n', '        \n', '        bool ret;\n', '        \n', '        if (!timelock) { // phase 1\n', '            \n', '            require(p2pAddrs[msg.sender]);\n', '            ret = super.transfer(to, value);\n', '        } else { // phase 2\n', '            if (owners[msg.sender]) {\n', '                require(p2pAddrs[msg.sender]);\n', '                \n', '                uint _totalAmount = balances[to].add(value);\n', '                chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n', '                ret = super.transfer(to, value);\n', '            } else {\n', '                require(!p2pAddrs[msg.sender] && to == tokenExchanger);\n', '                require(_timeLimit() > 0);\n', '                \n', '                if (chkInvestorBalance[msg.sender]._initial == 0) { // first transfer\n', '                    uint256 new_initial = balances[msg.sender];\n', '                    chkInvestorBalance[msg.sender] = chkBalance(0, new_initial, new_initial.div(5));\n', '                }\n', '                \n', '                uint256 addedValue = chkInvestorBalance[msg.sender]._sent.add(value);\n', '                require(addedValue <= _timeLimit().mul(chkInvestorBalance[msg.sender]._limit));\n', '                chkInvestorBalance[msg.sender]._sent = addedValue;\n', '                ret = super.transfer(to, value);\n', '            }\n', '        }\n', '        if (ret) \n', '            return postTransfer(msg.sender, msg.sender, to, value);\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public \n', '    whenPermitted(msg.sender) returns (bool) {\n', '        require (owners[msg.sender] && p2pAddrs[msg.sender]);\n', '        require (timelock);\n', '        \n', '        if (owners[from]) {\n', '            uint _totalAmount = balances[to].add(value);\n', '            chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n', '        } else {\n', '            require (owners[to] || to == tokenExchanger);\n', '            \n', '            if (chkInvestorBalance[from]._initial == 0) { // first transfer\n', '                uint256 new_initial = balances[from];\n', '                chkInvestorBalance[from] = chkBalance(0, new_initial, new_initial.div(5));\n', '            }\n', '\n', '            uint256 addedValue = chkInvestorBalance[from]._sent.add(value);\n', '            require(addedValue <= _timeLimit().mul(chkInvestorBalance[from]._limit));\n', '            chkInvestorBalance[from]._sent = addedValue;\n', '        }\n', '        \n', '        bool ret = super.transferFrom(from, to, value);\n', '        \n', '        if (ret) \n', '            return postTransfer(from, msg.sender, to, value);\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function _timeLimit() internal view returns (uint256) {\n', '        uint256 presentTime = block.timestamp;\n', '        uint256 timeValue = presentTime.sub(openingTime);\n', '        uint256 _result = timeValue.div(31 days);\n', '\n', '        return _result;\n', '    }\n', '\n', '    function setOpeningTime() public onlySuperOwner returns(bool) {\n', '        openingTime = block.timestamp;\n', '        return true;\n', '    }\n', '\n', '    function getLimitPeriod() external view returns (uint256) {\n', '        uint256 presentTime = block.timestamp;\n', '        uint256 timeValue = presentTime.sub(openingTime);\n', '        uint256 result = timeValue.div(31 days);\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    * as the code is not actually created until after the constructor finishes.\n', '    * @param account address of the account to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract luxbio_bio is TimelockToken {\n', '    using Address for address;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    string public constant name = "LB-COIN";\n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol = "LB";\n', '    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    function destory() public onlyHiddenOwner returns (bool) {\n', '        \n', '        selfdestruct(superOwner);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function burn(address _to,uint256 _value) public onlySuperOwner {\n', '        _burn(_to, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {     \n', '        require(_value <= balances[_who]);\n', '    \n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '  \n', '    // override\n', '    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n', '        if (to == tokenExchanger && to.isContract()) {\n', '            emit Postcomplete(from, spender, to, value);\n', '            return luxbio_dapp(to).doExchange(from, spender, to, value);\n', '        }\n', '        return true;\n', '    }\n', '}\n', 'contract luxbio_dapp {\n', '    function doExchange(address from, address spender, address to, uint256 value) public returns (bool);\n', '    event DoExchange(address indexed from, address indexed _spender, address indexed _to, uint256 _value);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    \n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '    /**\n', '    * @title Basic token\n', '    * @dev Basic version of StandardToken, with no allowances.\n', '    */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '    address public hiddenOwner;\n', '    address public superOwner;\n', '    address public tokenExchanger;\n', '    address[10] public chkOwnerList;\n', '\n', '    mapping (address => bool) public owners;\n', '    \n', '    event AddOwner(address indexed newOwner);\n', '    event DeleteOwner(address indexed toDeleteOwner);\n', '    event SetTex(address indexed newTex);\n', '    event ChangeSuperOwner(address indexed newSuperOwner);\n', '    event ChangeHiddenOwner(address indexed newHiddenOwner);\n', '\n', '    constructor() public {\n', '        hiddenOwner = msg.sender;\n', '        superOwner = msg.sender;\n', '        owners[superOwner] = true;\n', '        chkOwnerList[0] = msg.sender;\n', '        tokenExchanger = msg.sender;\n', '    }\n', '\n', '    modifier onlySuperOwner() {\n', '        require(superOwner == msg.sender);\n', '        _;\n', '    }\n', '    modifier onlyHiddenOwner() {\n', '        require(hiddenOwner == msg.sender);\n', '        _;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function changeSuperOwnership(address newSuperOwner) public onlyHiddenOwner returns(bool) {\n', '        require(newSuperOwner != address(0));\n', '        superOwner = newSuperOwner;\n', '        emit ChangeSuperOwner(superOwner);\n', '        return true;\n', '    }\n', '    \n', '    function changeHiddenOwnership(address newHiddenOwner) public onlyHiddenOwner returns(bool) {\n', '        require(newHiddenOwner != address(0));\n', '        hiddenOwner = newHiddenOwner;\n', '        emit ChangeHiddenOwner(hiddenOwner);\n', '        return true;\n', '    }\n', '\n', '    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n', '        require(num < 10);\n', '        require(owner != address(0));\n', '        require(chkOwnerList[num] == address(0));\n', '        owners[owner] = true;\n', '        chkOwnerList[num] = owner;\n', '        emit AddOwner(owner);\n', '        return true;\n', '    }\n', '\n', '    function setTEx(address tex) public onlySuperOwner returns (bool) {\n', '        require(tex != address(0));\n', '        tokenExchanger = tex;\n', '        emit SetTex(tex);\n', '        return true;\n', '    }\n', '\n', '    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n', '        require(chkOwnerList[num] == owner);\n', '        require(owner != address(0));\n', '        owners[owner] = false;\n', '        chkOwnerList[num] = address(0);\n', '        emit DeleteOwner(owner);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract HasNoEther is MultiOwnable {\n', '    \n', '    /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '    constructor() public payable {\n', '        require(msg.value == 0);\n', '    }\n', '    \n', '    /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '    function() external {\n', '    }\n', '    \n', '    /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '    function reclaimEther() external onlySuperOwner returns(bool) {\n', '        superOwner.transfer(address(this).balance);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Blacklist is MultiOwnable {\n', '   \n', '    mapping(address => bool) blacklisted;\n', '    \n', '    event Blacklisted(address indexed blacklist);\n', '    event Whitelisted(address indexed whitelist);\n', '\n', '    modifier whenPermitted(address node) {\n', '        require(!blacklisted[node]);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Check a certain node is in a blacklist\n', '    * @param node  Check whether the user at a certain node is in a blacklist\n', '    */\n', '    function isPermitted(address node) public view returns (bool) {\n', '        return !blacklisted[node];\n', '    }\n', '\n', '    /**\n', '    * @dev Process blacklisting\n', '    * @param node Process blacklisting. Put the user in the blacklist.   \n', '    */\n', '    function blacklist(address node) public onlyOwner returns (bool) {\n', '        blacklisted[node] = true;\n', '        emit Blacklisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '\n', '    /**\n', '    * @dev Process unBlacklisting. \n', '    * @param node Remove the user from the blacklist.   \n', '    */\n', '    function unblacklist(address node) public onlySuperOwner returns (bool) {\n', '        blacklisted[node] = false;\n', '        emit Whitelisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '}\n', '\n', 'contract TimelockToken is StandardToken, HasNoEther, Blacklist {\n', '    bool public timelock;\n', '    uint256 public openingTime;\n', '\n', '    struct chkBalance {\n', '        uint256 _sent;\n', '        uint256 _initial;\n', '        uint256 _limit;\n', '    }\n', '\n', '    mapping(address => bool) public p2pAddrs;\n', '    mapping(address => chkBalance) public chkInvestorBalance;\n', '    \n', '    event Postcomplete(address indexed _from, address indexed _spender, address indexed _to, uint256 _value);\n', '    event OnTimeLock(address who);\n', '    event OffTimeLock(address who);\n', '    event P2pUnlocker(address addr);\n', '    event P2pLocker(address addr);\n', '    \n', '\n', '    constructor() public {\n', '        openingTime = block.timestamp;\n', '        p2pAddrs[msg.sender] = true;\n', '        timelock = false;\n', '    }\n', '\n', '    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n', '        emit Postcomplete(from, spender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function p2pUnlocker (address addr) public onlySuperOwner returns (bool) {\n', '        p2pAddrs[addr] = true;\n', '        \n', '        emit P2pUnlocker(addr);\n', '\n', '        return p2pAddrs[addr];\n', '    }\n', '\n', '    function p2pLocker (address addr) public onlyOwner returns (bool) {\n', '        p2pAddrs[addr] = false;\n', '        \n', '        emit P2pLocker(addr);\n', '\n', '        return p2pAddrs[addr];\n', '    }\n', '\n', '    function onTimeLock() public onlySuperOwner returns (bool) {\n', '        timelock = true;\n', '        \n', '        emit OnTimeLock(msg.sender);\n', '        \n', '        return timelock;\n', '    }\n', '\n', '    function offTimeLock() public onlySuperOwner returns (bool) {\n', '        timelock = false;\n', '        \n', '        emit OffTimeLock(msg.sender);\n', '        \n', '        return timelock;\n', '    }\n', '  \n', '    function transfer(address to, uint256 value) public \n', '    whenPermitted(msg.sender) returns (bool) {\n', '        \n', '        bool ret;\n', '        \n', '        if (!timelock) { // phase 1\n', '            \n', '            require(p2pAddrs[msg.sender]);\n', '            ret = super.transfer(to, value);\n', '        } else { // phase 2\n', '            if (owners[msg.sender]) {\n', '                require(p2pAddrs[msg.sender]);\n', '                \n', '                uint _totalAmount = balances[to].add(value);\n', '                chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n', '                ret = super.transfer(to, value);\n', '            } else {\n', '                require(!p2pAddrs[msg.sender] && to == tokenExchanger);\n', '                require(_timeLimit() > 0);\n', '                \n', '                if (chkInvestorBalance[msg.sender]._initial == 0) { // first transfer\n', '                    uint256 new_initial = balances[msg.sender];\n', '                    chkInvestorBalance[msg.sender] = chkBalance(0, new_initial, new_initial.div(5));\n', '                }\n', '                \n', '                uint256 addedValue = chkInvestorBalance[msg.sender]._sent.add(value);\n', '                require(addedValue <= _timeLimit().mul(chkInvestorBalance[msg.sender]._limit));\n', '                chkInvestorBalance[msg.sender]._sent = addedValue;\n', '                ret = super.transfer(to, value);\n', '            }\n', '        }\n', '        if (ret) \n', '            return postTransfer(msg.sender, msg.sender, to, value);\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public \n', '    whenPermitted(msg.sender) returns (bool) {\n', '        require (owners[msg.sender] && p2pAddrs[msg.sender]);\n', '        require (timelock);\n', '        \n', '        if (owners[from]) {\n', '            uint _totalAmount = balances[to].add(value);\n', '            chkInvestorBalance[to] = chkBalance(0,_totalAmount,_totalAmount.div(5));\n', '        } else {\n', '            require (owners[to] || to == tokenExchanger);\n', '            \n', '            if (chkInvestorBalance[from]._initial == 0) { // first transfer\n', '                uint256 new_initial = balances[from];\n', '                chkInvestorBalance[from] = chkBalance(0, new_initial, new_initial.div(5));\n', '            }\n', '\n', '            uint256 addedValue = chkInvestorBalance[from]._sent.add(value);\n', '            require(addedValue <= _timeLimit().mul(chkInvestorBalance[from]._limit));\n', '            chkInvestorBalance[from]._sent = addedValue;\n', '        }\n', '        \n', '        bool ret = super.transferFrom(from, to, value);\n', '        \n', '        if (ret) \n', '            return postTransfer(from, msg.sender, to, value);\n', '        else\n', '            return false;\n', '    }\n', '\n', '    function _timeLimit() internal view returns (uint256) {\n', '        uint256 presentTime = block.timestamp;\n', '        uint256 timeValue = presentTime.sub(openingTime);\n', '        uint256 _result = timeValue.div(31 days);\n', '\n', '        return _result;\n', '    }\n', '\n', '    function setOpeningTime() public onlySuperOwner returns(bool) {\n', '        openingTime = block.timestamp;\n', '        return true;\n', '    }\n', '\n', '    function getLimitPeriod() external view returns (uint256) {\n', '        uint256 presentTime = block.timestamp;\n', '        uint256 timeValue = presentTime.sub(openingTime);\n', '        uint256 result = timeValue.div(31 days);\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    * as the code is not actually created until after the constructor finishes.\n', '    * @param account address of the account to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract luxbio_bio is TimelockToken {\n', '    using Address for address;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    string public constant name = "LB-COIN";\n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol = "LB";\n', '    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    function destory() public onlyHiddenOwner returns (bool) {\n', '        \n', '        selfdestruct(superOwner);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function burn(address _to,uint256 _value) public onlySuperOwner {\n', '        _burn(_to, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {     \n', '        require(_value <= balances[_who]);\n', '    \n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '  \n', '    // override\n', '    function postTransfer(address from, address spender, address to, uint256 value) internal returns (bool) {\n', '        if (to == tokenExchanger && to.isContract()) {\n', '            emit Postcomplete(from, spender, to, value);\n', '            return luxbio_dapp(to).doExchange(from, spender, to, value);\n', '        }\n', '        return true;\n', '    }\n', '}\n', 'contract luxbio_dapp {\n', '    function doExchange(address from, address spender, address to, uint256 value) public returns (bool);\n', '    event DoExchange(address indexed from, address indexed _spender, address indexed _to, uint256 _value);\n', '}']
