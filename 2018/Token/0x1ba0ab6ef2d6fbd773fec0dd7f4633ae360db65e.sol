['pragma solidity ^0.4.24;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyNewOwner {\n', '    require(msg.sender == newOwner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public onlyNewOwner {\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '\n', '  function disown() public onlyOwner {\n', '    owner = address(0);\n', '    newOwner = msg.sender;\n', '    emit OwnershipTransferred(msg.sender, address(0));\n', '  }\n', '\n', '  function rejectOwnership() public onlyNewOwner {\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Symbol      : Chowe\n', '// Name        : Chowe Fermi-Dirac Token\n', '// Total supply: 1\n', '// Decimals    : 0\n', '//\n', '// Share. Enjoy.\n', '//\n', '// (c) by Chris Howe 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract ChoweToken is ERC20Interface, Owned {\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Constructor\n', '  // ------------------------------------------------------------------------\n', '  constructor() public {\n', '    symbol = "Chowe";\n', '    name = "Chowe Fermi-Dirac Token";\n', '    decimals = 0;\n', '    _totalSupply = 1;\n', '    balances[msg.sender] = 1;\n', '    balances[address(0)] = 0;\n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Total supply\n', '  // ------------------------------------------------------------------------\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Get the token balance for account tokenOwner\n', '  // ------------------------------------------------------------------------\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Transfer the balance from token owner&#39;s account to to account\n', '  // - Owner&#39;s account must have sufficient balance to transfer\n', '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require(balances[to]==0 && tokens==1);\n', '\n', '    if (msg.sender != owner) {\n', '      require(balances[msg.sender] > 0);\n', '      balances[msg.sender] = balances[msg.sender] - 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '\n', '    if (to != address(0)) {\n', '      balances[to] = 1;\n', '    } else {\n', '      _totalSupply = _totalSupply-1;\n', '    }\n', '\n', '    emit Transfer(msg.sender, to, 1);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for spender to transferFrom(...) tokens\n', '  // from the token owner&#39;s account\n', '  //\n', '  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '  // recommends that there are no checks for the approval double-spend attack\n', '  // as this should be implemented in user interfaces \n', '  // ------------------------------------------------------------------------\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Transfer tokens from the from account to the to account\n', '  // ------------------------------------------------------------------------\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    require(balances[to]==0 && tokens==1);\n', '\n', '    if (from != owner) {\n', '      require(balances[from]>0);\n', '      balances[from] = balances[from] - 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '      \n', '    require(allowed[from][msg.sender]>0);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender] - 1;\n', '\n', '    if (to != address(0)) {\n', '      balances[to] = 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '\n', '    emit Transfer(from, to, 1);\n', '    return true;\n', '  }\n', '  \n', '  // ------------------------------------------------------------------------\n', '  // This override of the Owned contract ensures that the new owner of the \n', '  // contract has a token\n', '  // ------------------------------------------------------------------------\n', '  \n', '  function acceptOwnership() public {\n', '    address oldOwner = owner;\n', '    super.acceptOwnership();\n', '    \n', '    // The owner MUST have a token, so create one if needed\n', '    if( balances[msg.sender] == 0) {\n', '      balances[msg.sender] = 1;\n', '      _totalSupply = _totalSupply + 1;\n', '      emit Transfer(oldOwner, msg.sender, 1);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Returns the amount of tokens approved by the owner that can be\n', '  // transferred to the spender&#39;s account\n', '  // ------------------------------------------------------------------------\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for spender to transferFrom(...) tokens\n', '  // from the token owner&#39;s account. The spender contract function\n', '  // receiveApproval(...) is then executed\n', '  // ------------------------------------------------------------------------\n', '  function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Don&#39;t accept ETH\n', '  // ------------------------------------------------------------------------\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyNewOwner {\n', '    require(msg.sender == newOwner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public onlyNewOwner {\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '\n', '  function disown() public onlyOwner {\n', '    owner = address(0);\n', '    newOwner = msg.sender;\n', '    emit OwnershipTransferred(msg.sender, address(0));\n', '  }\n', '\n', '  function rejectOwnership() public onlyNewOwner {\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Symbol      : Chowe\n', '// Name        : Chowe Fermi-Dirac Token\n', '// Total supply: 1\n', '// Decimals    : 0\n', '//\n', '// Share. Enjoy.\n', '//\n', '// (c) by Chris Howe 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract ChoweToken is ERC20Interface, Owned {\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Constructor\n', '  // ------------------------------------------------------------------------\n', '  constructor() public {\n', '    symbol = "Chowe";\n', '    name = "Chowe Fermi-Dirac Token";\n', '    decimals = 0;\n', '    _totalSupply = 1;\n', '    balances[msg.sender] = 1;\n', '    balances[address(0)] = 0;\n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Total supply\n', '  // ------------------------------------------------------------------------\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Get the token balance for account tokenOwner\n', '  // ------------------------------------------------------------------------\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', "  // Transfer the balance from token owner's account to to account\n", "  // - Owner's account must have sufficient balance to transfer\n", '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require(balances[to]==0 && tokens==1);\n', '\n', '    if (msg.sender != owner) {\n', '      require(balances[msg.sender] > 0);\n', '      balances[msg.sender] = balances[msg.sender] - 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '\n', '    if (to != address(0)) {\n', '      balances[to] = 1;\n', '    } else {\n', '      _totalSupply = _totalSupply-1;\n', '    }\n', '\n', '    emit Transfer(msg.sender, to, 1);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for spender to transferFrom(...) tokens\n', "  // from the token owner's account\n", '  //\n', '  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '  // recommends that there are no checks for the approval double-spend attack\n', '  // as this should be implemented in user interfaces \n', '  // ------------------------------------------------------------------------\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Transfer tokens from the from account to the to account\n', '  // ------------------------------------------------------------------------\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    require(balances[to]==0 && tokens==1);\n', '\n', '    if (from != owner) {\n', '      require(balances[from]>0);\n', '      balances[from] = balances[from] - 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '      \n', '    require(allowed[from][msg.sender]>0);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender] - 1;\n', '\n', '    if (to != address(0)) {\n', '      balances[to] = 1;\n', '    } else {\n', '      _totalSupply = _totalSupply + 1;\n', '    }\n', '\n', '    emit Transfer(from, to, 1);\n', '    return true;\n', '  }\n', '  \n', '  // ------------------------------------------------------------------------\n', '  // This override of the Owned contract ensures that the new owner of the \n', '  // contract has a token\n', '  // ------------------------------------------------------------------------\n', '  \n', '  function acceptOwnership() public {\n', '    address oldOwner = owner;\n', '    super.acceptOwnership();\n', '    \n', '    // The owner MUST have a token, so create one if needed\n', '    if( balances[msg.sender] == 0) {\n', '      balances[msg.sender] = 1;\n', '      _totalSupply = _totalSupply + 1;\n', '      emit Transfer(oldOwner, msg.sender, 1);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Returns the amount of tokens approved by the owner that can be\n', "  // transferred to the spender's account\n", '  // ------------------------------------------------------------------------\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for spender to transferFrom(...) tokens\n', "  // from the token owner's account. The spender contract function\n", '  // receiveApproval(...) is then executed\n', '  // ------------------------------------------------------------------------\n', '  function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', "  // Don't accept ETH\n", '  // ------------------------------------------------------------------------\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}']
