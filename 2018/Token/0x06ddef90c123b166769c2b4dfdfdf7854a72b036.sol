['pragma solidity ^0.4.11;\n', '\n', '/*\n', '  Set of classes OpenZeppelin\n', '*/\n', '\n', '/*\n', '*****************************************************************************************\n', '\n', "below is 'OpenZeppelin  - Ownable.sol'\n", '\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/*\n', '*****************************************************************************************\n', "below is 'OpenZeppelin  - ERC20Basic.sol'\n", '\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/*\n', '*****************************************************************************************\n', "below is 'OpenZeppelin  - BasicToken.sol'\n", '\n', '*/\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicFrozenToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '    /**\n', '   * @dev mapping sender -> unfrozeTimestamp\n', '   * when sender is unfrozen\n', '   */\n', '  mapping(address => uint256) unfrozeTimestamp;\n', '\n', '    // Custom code - checking for on frozen\n', '  // @return true if the sending is allowed (not frozen)\n', '  function isUnfrozen(address sender) public constant returns (bool) {\n', '    // frozeness is checked until  07.07.18 00:00:00 (1530921600), after all tokens are minted as unfrozen\n', '    if(now > 1530921600)\n', '      return true;\n', '    else\n', '     return unfrozeTimestamp[sender] < now;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function frozenTimeOf(address _owner) public constant returns (uint256 balance) {\n', '    return unfrozeTimestamp[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    // Custom code - checking for frozen state\n', '    require(isUnfrozen(msg.sender));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/*\n', '*****************************************************************************************\n', "below is 'OpenZeppelin  - ERC20.sol'\n", '\n', '*/\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/*\n', '*****************************************************************************************\n', '\n', "below is 'OpenZeppelin  - StandardToken.sol'\n", '\n', '*/\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicFrozenToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    \n', '    // Custom code - проверка на факт разморозки\n', '    require(isUnfrozen(_from));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/*\n', '*****************************************************************************************\n', "below is 'OpenZeppelin  - SafeMath.sol'\n", ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Quasacoin token\n', ' * Based on code by OpenZeppelin MintableToken.sol\n', ' \n', '  + added frozing when minting\n', ' \n', ' */\n', '\n', 'contract QuasacoinToken is StandardToken, Ownable {\n', '    \n', '  string public name = "Quasacoin";\n', '  string public symbol = "QUA";\n', '  uint public decimals = 18;\n', '  \n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount > 0);\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    uint frozenTime = 0; \n', '    // frozeness is checked until  07.07.18 00:00:00 (1530921600), after all tokens are minted as unfrozen\n', '    if(now < 1530921600) {\n', '      // выпуск                      до 15.01.18 00:00:00 (1515974400) - заморозка до 30.03.18 00:00:00 (1522368000)\n', '      if(now < 1515974400)\n', '        frozenTime = 1522368000;\n', '\n', '      // выпуск c 15.01.18 00:00:00  до 15.02.18 00:00:00 (1518652800) - заморозка до 30.05.18 00:00:00 (1527638400)     \n', '      else if(now < 1518652800)\n', '        frozenTime = 1527638400;\n', '\n', '      // выпуск c 15.02.18 00:00:00  до 26.03.18 00:00:00 (1522022400) - заморозка до 30.06.18 00:00:00 (1530316800)\n', '      else if(now < 1522022400)\n', '        frozenTime = 1530316800;\n', '\n', '      // выпуск c 26.03.18 00:00:00  до 15.04.18 00:00:00 (1523750400) - заморозка до 01.07.18 00:00:00 (1530403200)\n', '      else if(now < 1523750400)\n', '        frozenTime = 1530403200;\n', '\n', '      // выпуск c 15.04.18 00:00:00  до 15.05.18 00:00:00 (1526342400) - заморозка до 07.07.18 00:00:00 (1530921600)\n', '      else if(now < 1526342400)\n', '        frozenTime = 1530921600;\n', '\n', '      // выпуск c 15.05.18 00:00:00  до 15.06.18 00:00:00 (1529020800) - заморозка до 30.06.18 00:00:00 (1530316800)\n', '      else if(now < 1529020800)\n', '        frozenTime = 1530316800;\n', '      else \n', '      // выпуск с 15.06.18 00:00:00  после до 07.07.18 00:00:00 (1530921600) - заморозка до 07.07.18 00:00:00 (1530921600)\n', '        frozenTime = 1530921600;\n', '      unfrozeTimestamp[_to] = frozenTime;\n', '    }\n', '\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title QuasocoinCrowdsale\n', ' * based upon OpenZeppelin CrowdSale smartcontract\n', ' */\n', 'contract QuasacoinTokenCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  QuasacoinToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startPreICOTime;\n', '  // переход из preICO в ICO\n', '  uint256 public startICOTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // кому вернуть ownership после завершения ICO\n', '  address public tokenOwner;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePreICO;\n', '  uint256 public rateICO;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaisedPreICO;\n', '  uint256 public weiRaisedICO;\n', '\n', '  uint256 public capPreICO;\n', '  uint256 public capICO;\n', '\n', '  mapping(address => bool) internal allowedMinters;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function QuasacoinTokenCrowdsale() {\n', '    token = QuasacoinToken(0x4dAeb4a06F70f4b1A5C329115731fE4b89C0B227);\n', '    tokenOwner = 0x373ae730d8c4250b3d022a65ef998b8b7ab1aa53;\n', '    wallet = 0x373ae730d8c4250b3d022a65ef998b8b7ab1aa53;\n', '\n', '    // 15.01.18 00:00:00 (1515974400) \n', '    startPreICOTime = 1515974400;\n', '    // 15.02.18 00:00:00 (1518652800)\n', '    startICOTime = 1518652800;\n', '    // 26.03.18 00:00:00 (1522022400)\n', '    endTime = 1522022400;\n', '    \n', '    // Pre-ICO, 1 ETH = 6000 QUA\n', '    ratePreICO = 6000;\n', '\n', '    // ICO, 1 ETH = 3000 QUA\n', '    rateICO = 3000;\n', '\n', '    capPreICO = 5000 ether;\n', '    capICO = 50000 ether;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens;\n', '    if(now < startICOTime) {  \n', '      weiRaisedPreICO = weiRaisedPreICO.add(weiAmount);\n', '      tokens = weiAmount * ratePreICO;\n', '    } \n', '    else {\n', '      weiRaisedICO = weiRaisedICO.add(weiAmount);\n', '      tokens = weiAmount * rateICO;\n', '    }\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '   \n', '    if(now >= startPreICOTime && now < startICOTime) {\n', '      return weiRaisedPreICO.add(msg.value) <= capPreICO;\n', '    } else if(now >= startICOTime && now < endTime) {\n', '      return weiRaisedICO.add(msg.value) <= capICO;\n', '    } else\n', '    return false;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    if(now < startPreICOTime)\n', '      return false;\n', '    else if(now >= startPreICOTime && now < startICOTime) {\n', '      return weiRaisedPreICO >= capPreICO;\n', '    } else if(now >= startICOTime && now < endTime) {\n', '      return weiRaisedICO >= capICO;\n', '    } else\n', '      return true;\n', '  }\n', '\n', '  function returnTokenOwnership() public {\n', '    require(msg.sender == tokenOwner);\n', '    token.transferOwnership(tokenOwner);\n', '  }\n', '\n', '  function addMinter(address addr) {\n', '    require(msg.sender == tokenOwner);\n', '    allowedMinters[addr] = true;\n', '  }\n', '  function removeMinter(address addr) {\n', '    require(msg.sender == tokenOwner);\n', '    allowedMinters[addr] = false;\n', '  }\n', '\n', '  function mintProxy(address _to, uint256 _amount) public {\n', '    require(allowedMinters[msg.sender]);\n', '    require(now >= startPreICOTime && now < endTime);\n', '    \n', '    uint256 weiAmount;\n', '\n', '    if(now < startICOTime) {\n', '      weiAmount = _amount.div(ratePreICO);\n', '      require(weiRaisedPreICO.add(weiAmount) <= capPreICO);\n', '      weiRaisedPreICO = weiRaisedPreICO.add(weiAmount);\n', '    } \n', '    else {\n', '      weiAmount = _amount.div(rateICO);\n', '      require(weiRaisedICO.add(weiAmount) <= capICO);\n', '      weiRaisedICO = weiRaisedICO.add(weiAmount);\n', '    }\n', '\n', '    token.mint(_to, _amount);\n', '    TokenPurchase(msg.sender, _to, weiAmount, _amount);\n', '  }\n', '}']