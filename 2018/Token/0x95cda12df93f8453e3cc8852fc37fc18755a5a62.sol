['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal pure returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal pure returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal pure returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public totalSupply;\n', '  uint8 public constant decimals = 18;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  // used for airdrop\n', '  uint256 airdropTotalSupply;\n', '  uint256 airdropCurrentSupply;\n', '  uint256 airdropNum; // airdrop number for each account\n', '  // store if the address is touched for airdrop\n', '  mapping(address => bool) touched; \n', '\n', '  /**\n', '   * Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '    // add airdrop to address _from\n', '    initialize(_from);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '\n', '    // add airdrop to address _to\n', '    initialize(_to);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '  }\n', '  \n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    _transfer(msg.sender, _to, _value);\n', '\n', '    // in any transfer function, emit should be done manually\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return getBalance(_owner);\n', '  }\n', '\n', '  // internal privats\n', '  function initialize(address _address) internal returns (bool success) {\n', '    if (airdropCurrentSupply < airdropTotalSupply && !touched[_address]) {\n', '      touched[_address] = true;\n', '      airdropCurrentSupply = airdropCurrentSupply.add(airdropNum);\n', '      balances[_address] = balances[_address].add(airdropNum);\n', '      totalSupply = totalSupply.add(airdropNum);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function getBalance(address _address) internal view returns (uint256) {\n', '    if (airdropCurrentSupply < airdropTotalSupply && !touched[_address]) {\n', '      return balances[_address].add(airdropNum);\n', '    } else {\n', '      return balances[_address];\n', '    }\n', '  }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    _transfer(_from, _to, _value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    // in any transfer function, emit should be done manually\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address and notify\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  // This notifies clients about the amount burnt\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  /**\n', '   * Destroy tokens\n', '   * \n', '   * Remove `_value` tokens from the system irreversibly\n', '   * \n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) public returns (bool success) {\n', '    require(balanceOf(msg.sender) >= _value); // Check if the sender has enough\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens from other account\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '   *\n', '   * @param _from the address of the sender\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '    require(balanceOf(_from) >= _value); // Check if the targeted balance is enough\n', '    require(_value <= allowance(_from, msg.sender)); // Check allowance\n', '    balances[_from] = balances[_from].sub(_value); // Subtract from the targeted balance\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Subtract from the sender&#39;s allowance\n', '    totalSupply = totalSupply.sub(_value); // Update totalSupply\n', '    emit Burn(_from, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BCD is StandardToken {\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  constructor(\n', '    uint256 _initialSupply,\n', '    string _tokenName, \n', '    string _tokenSymbol, \n', '    uint _airdropTotalSupply, \n', '    uint256 _airdropNum \n', '  ) public {\n', '    touched[msg.sender] = true; // ignore airdrop to owner\n', '\n', '    totalSupply = _initialSupply * 10 ** uint256(decimals);\n', '    balances[msg.sender] = totalSupply;\n', '    name = _tokenName;\n', '    symbol = _tokenSymbol;\n', '    airdropTotalSupply = _airdropTotalSupply * 10 ** uint256(decimals);\n', '    airdropNum = _airdropNum * 10 ** uint256(decimals);\n', '  }\n', '\n', '}']