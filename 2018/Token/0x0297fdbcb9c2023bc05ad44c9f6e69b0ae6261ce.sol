['pragma solidity ^0.4.21;\n', '\n', 'contract Convert {\n', '    \n', '    address owner;\n', '    address public fromContractAddr;\n', '    address public toContractAddr;\n', '    \n', '    mapping (uint => bool) public isConvert;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Convert() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function setFromContractAddr(address _addr) public onlyOwner {\n', '        fromContractAddr = _addr;\n', '    }\n', '    \n', '    function setToContractAddr(address _addr) public onlyOwner {\n', '        toContractAddr = _addr;\n', '    }\n', '    \n', '    function getNewToken(uint _tokenId) public {\n', '        IFrom ifrom = IFrom(fromContractAddr);\n', '        require(ifrom.ownerOf(_tokenId) == msg.sender);\n', '        require(isConvert[_tokenId] == false);\n', '        \n', '        isConvert[_tokenId] = true;\n', '        \n', '        ITo ito = ITo(toContractAddr);\n', '        ito.issueTokenAndTransfer(1, msg.sender);\n', '    }\n', '    \n', '    /* only read */\n', '    \n', '}\n', '\n', 'interface IFrom {\n', '    function ownerOf (uint256 _itemId) public view returns (address _owner);\n', '}\n', '\n', 'interface ITo {\n', '    function issueTokenAndTransfer(uint256 _count, address to) public;\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Convert {\n', '    \n', '    address owner;\n', '    address public fromContractAddr;\n', '    address public toContractAddr;\n', '    \n', '    mapping (uint => bool) public isConvert;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Convert() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function setFromContractAddr(address _addr) public onlyOwner {\n', '        fromContractAddr = _addr;\n', '    }\n', '    \n', '    function setToContractAddr(address _addr) public onlyOwner {\n', '        toContractAddr = _addr;\n', '    }\n', '    \n', '    function getNewToken(uint _tokenId) public {\n', '        IFrom ifrom = IFrom(fromContractAddr);\n', '        require(ifrom.ownerOf(_tokenId) == msg.sender);\n', '        require(isConvert[_tokenId] == false);\n', '        \n', '        isConvert[_tokenId] = true;\n', '        \n', '        ITo ito = ITo(toContractAddr);\n', '        ito.issueTokenAndTransfer(1, msg.sender);\n', '    }\n', '    \n', '    /* only read */\n', '    \n', '}\n', '\n', 'interface IFrom {\n', '    function ownerOf (uint256 _itemId) public view returns (address _owner);\n', '}\n', '\n', 'interface ITo {\n', '    function issueTokenAndTransfer(uint256 _count, address to) public;\n', '}']
