['pragma solidity ^0.4.18;\n', '\n', '  // ----------------------------------------------------------------------------------------------\n', '  // Sample fixed supply token contract\n', '  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n', '  // ----------------------------------------------------------------------------------------------\n', '\n', '   // ERC Token Standard #20 Interface\n', '  // https://github.com/ethereum/EIPs/issues/20\n', '  contract ERC20Interface {\n', '      // 获取总的支持量\n', '      function totalSupply() constant public returns (uint256 _totalSupply);\n', '\n', '      // 获取其他地址的余额\n', '      function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '      // 向其他地址发送token\n', '      function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '      // 从一个地址想另一个地址发送余额\n', '      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '      //允许_spender从你的账户转出_value的余额，调用多次会覆盖可用量。某些DEX功能需要此功能\n', '      function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '      // 返回_spender仍然允许从_owner退出的余额数量\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '      // token转移完成后出发\n', '      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '      // approve(address _spender, uint256 _value)调用后触发\n', '      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  }\n', '\n', '   //继承接口后的实例\n', '   contract HDCToken is ERC20Interface {\n', '      string public constant symbol = "HDCT"; //单位\n', '      string public constant name = "Health Data Chain Token"; //名称\n', '      uint8 public constant decimals = 18; //小数点后的位数\n', '      uint256 _totalSupply = 10000000000000000000000000000; //发行总量\n', '\n', '      // 智能合约的所有者\n', '      address public owner;\n', '\n', '      // 每个账户的余额\n', '      mapping(address => uint256) balances;\n', '\n', '      // 帐户的所有者批准将金额转入另一个帐户。从上面的说明我们可以得知allowed[被转移的账户][转移钱的账户]\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '\n', '      // 只能通过智能合约的所有者才能调用的方法\n', '      modifier onlyOwner() {\n', '          require (msg.sender != owner);\n', '          _;\n', '      }\n', '\n', '\t  bool public paused = false;\n', '\n', '      /**\n', '       * @dev Modifier to make a function callable only when the contract is not paused.\n', '       */\n', '      modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev Modifier to make a function callable only when the contract is paused.\n', '       */\n', '      modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev called by the owner to pause, triggers stopped state\n', '       */\n', '      function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '      }\n', '    \n', '      /**\n', '       * @dev called by the owner to unpause, returns to normal state\n', '       */\n', '      function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '      }\n', '  \n', '      // 构造函数\n', '      constructor () public {\n', '          owner = msg.sender;\n', '          balances[owner] = _totalSupply;\n', '      }\n', '\n', '      function  totalSupply() public constant returns (uint256 totalSupplyRet) {\n', '          totalSupplyRet = _totalSupply;\n', '      }\n', '\n', '      // 特定账户的余额\n', '      function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '      }\n', '\n', '      // 转移余额到其他账户\n', '      function transfer(address _to, uint256 _amount) public whenNotPaused returns (bool success) {\n', '          require(_to != address(0x0) );\n', '\n', '          require (balances[msg.sender] >= _amount \n', '              && _amount > 0\n', '              && balances[_to] + _amount > balances[_to]); \n', '              \n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '      }\n', '\n', '      //从一个账户转移到另一个账户，前提是需要有允许转移的余额\n', '      function transferFrom(\n', '          address _from,\n', '          address _to,\n', '          uint256 _amount\n', '      ) public whenNotPaused returns (bool success) {\n', '          require(_to != address(0x0) );\n', '          \n', '          require (balances[_from] >= _amount\n', '              && allowed[_from][msg.sender] >= _amount\n', '              && _amount > 0\n', '              && balances[_to] + _amount > balances[_to]);\n', '              \n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '      }\n', '\n', '      //允许账户从当前用户转移余额到那个账户，多次调用会覆盖\n', '      function approve(address _spender, uint256 _amount) public whenNotPaused returns (bool success) {\n', '          allowed[msg.sender][_spender] = _amount;\n', '          emit Approval(msg.sender, _spender, _amount);\n', '          return true;\n', '      }\n', '\n', '      //返回被允许转移的余额数量\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '          return allowed[_owner][_spender];\n', '      }\n', '  }']
['pragma solidity ^0.4.18;\n', '\n', '  // ----------------------------------------------------------------------------------------------\n', '  // Sample fixed supply token contract\n', '  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n', '  // ----------------------------------------------------------------------------------------------\n', '\n', '   // ERC Token Standard #20 Interface\n', '  // https://github.com/ethereum/EIPs/issues/20\n', '  contract ERC20Interface {\n', '      // 获取总的支持量\n', '      function totalSupply() constant public returns (uint256 _totalSupply);\n', '\n', '      // 获取其他地址的余额\n', '      function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '      // 向其他地址发送token\n', '      function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '      // 从一个地址想另一个地址发送余额\n', '      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '      //允许_spender从你的账户转出_value的余额，调用多次会覆盖可用量。某些DEX功能需要此功能\n', '      function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '      // 返回_spender仍然允许从_owner退出的余额数量\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '      // token转移完成后出发\n', '      event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '      // approve(address _spender, uint256 _value)调用后触发\n', '      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  }\n', '\n', '   //继承接口后的实例\n', '   contract HDCToken is ERC20Interface {\n', '      string public constant symbol = "HDCT"; //单位\n', '      string public constant name = "Health Data Chain Token"; //名称\n', '      uint8 public constant decimals = 18; //小数点后的位数\n', '      uint256 _totalSupply = 10000000000000000000000000000; //发行总量\n', '\n', '      // 智能合约的所有者\n', '      address public owner;\n', '\n', '      // 每个账户的余额\n', '      mapping(address => uint256) balances;\n', '\n', '      // 帐户的所有者批准将金额转入另一个帐户。从上面的说明我们可以得知allowed[被转移的账户][转移钱的账户]\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '\n', '      // 只能通过智能合约的所有者才能调用的方法\n', '      modifier onlyOwner() {\n', '          require (msg.sender != owner);\n', '          _;\n', '      }\n', '\n', '\t  bool public paused = false;\n', '\n', '      /**\n', '       * @dev Modifier to make a function callable only when the contract is not paused.\n', '       */\n', '      modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev Modifier to make a function callable only when the contract is paused.\n', '       */\n', '      modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev called by the owner to pause, triggers stopped state\n', '       */\n', '      function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '      }\n', '    \n', '      /**\n', '       * @dev called by the owner to unpause, returns to normal state\n', '       */\n', '      function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '      }\n', '  \n', '      // 构造函数\n', '      constructor () public {\n', '          owner = msg.sender;\n', '          balances[owner] = _totalSupply;\n', '      }\n', '\n', '      function  totalSupply() public constant returns (uint256 totalSupplyRet) {\n', '          totalSupplyRet = _totalSupply;\n', '      }\n', '\n', '      // 特定账户的余额\n', '      function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '      }\n', '\n', '      // 转移余额到其他账户\n', '      function transfer(address _to, uint256 _amount) public whenNotPaused returns (bool success) {\n', '          require(_to != address(0x0) );\n', '\n', '          require (balances[msg.sender] >= _amount \n', '              && _amount > 0\n', '              && balances[_to] + _amount > balances[_to]); \n', '              \n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '      }\n', '\n', '      //从一个账户转移到另一个账户，前提是需要有允许转移的余额\n', '      function transferFrom(\n', '          address _from,\n', '          address _to,\n', '          uint256 _amount\n', '      ) public whenNotPaused returns (bool success) {\n', '          require(_to != address(0x0) );\n', '          \n', '          require (balances[_from] >= _amount\n', '              && allowed[_from][msg.sender] >= _amount\n', '              && _amount > 0\n', '              && balances[_to] + _amount > balances[_to]);\n', '              \n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '      }\n', '\n', '      //允许账户从当前用户转移余额到那个账户，多次调用会覆盖\n', '      function approve(address _spender, uint256 _amount) public whenNotPaused returns (bool success) {\n', '          allowed[msg.sender][_spender] = _amount;\n', '          emit Approval(msg.sender, _spender, _amount);\n', '          return true;\n', '      }\n', '\n', '      //返回被允许转移的余额数量\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '          return allowed[_owner][_spender];\n', '      }\n', '  }']
