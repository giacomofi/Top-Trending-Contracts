['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\t// Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '\t\t// benefit is lost if &#39;b&#39; is also tested.\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender)\n', '\tpublic view returns (uint256);\n', '\n', '\tfunction transferFrom(address from, address to, uint256 value)\n', '\tpublic returns (bool);\n', '\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(\n', '\t\taddress indexed owner,\n', '\t\taddress indexed spender,\n', '\t\tuint256 value\n', '\t);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev Total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(\n', '\t\taddress _owner,\n', '\t\taddress _spender\n', '\t )\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint256 _addedValue\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tallowed[msg.sender][_spender] = (\n', '\t\t\tallowed[msg.sender][_spender].add(_addedValue));\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint256 _subtractedValue\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\t_burn(msg.sender, _value);\n', '\t}\n', '\n', '\tfunction _burn(address _who, uint256 _value) internal {\n', '\t\trequire(_value <= balances[_who]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', '\t\t// sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '\t\tbalances[_who] = balances[_who].sub(_value);\n', '\t\ttotalSupply_ = totalSupply_.sub(_value);\n', '\t\temit Burn(_who, _value);\n', '\t\temit Transfer(_who, address(0), _value);\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _value uint256 The amount of token to be burned\n', '\t */\n', '\tfunction burnFrom(address _from, uint256 _value) public {\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\t\t// this function needs to emit an event with the updated approval.\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\t_burn(_from, _value);\n', '\t}\n', '}\n', '\n', '\n', 'contract IqbToken is StandardBurnableToken {\n', '\t// metadata\n', '\tstring  public constant name = "Intelligence Quotient Benefit";\n', '\tstring  public constant symbol = "IQB";\n', '\tuint8   public constant decimals = 8;\n', '\t// initializes contract\n', '\tconstructor(address _owner) public {\n', '\t\ttotalSupply_ = 10000000000 * 10**8;\n', '\t\tif(_owner == address(0)){\n', '\t\t\tbalances[msg.sender] = totalSupply_;\n', '\t\t}else{\n', '\t\t\tbalances[_owner] = totalSupply_;\n', '\t\t}\n', '\t\t \n', '\t}\n', '}']