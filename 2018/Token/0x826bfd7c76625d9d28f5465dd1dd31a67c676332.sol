['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    mapping (address => bool) public superUsers;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        superUsers[msg.sender] = true;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '     modifier onlySuperUser() {\n', '        require(superUsers[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    function setSuperUser(address user) public onlyOwner {\n', '        superUsers[user] = true;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract SuperToken is Ownable {\n', '    struct Token {\n', '        address owner;\n', '        uint8 tokenType;\n', '        uint32 amount;\n', '    }\n', '\n', '    Token[] public tokens;\n', '    bool public implementsERC721 = true;\n', '    string public name = "ever test token";\n', '    string public symbol = "ST";\n', '    mapping(uint256 => address) public approved;\n', '    mapping(address => uint256) public balances;\n', '    \n', '    \n', '    modifier onlyTokenOwner(uint256 _tokenId) {\n', '        require(tokens[_tokenId].owner == msg.sender);\n', '        _;\n', '    }\n', '   \n', '    function mintToken(address _owner) public onlyOwner() {\n', '        tokens.length ++;\n', '        Token storage Token_demo = tokens[tokens.length - 1];\n', '        Token_demo.owner = _owner;\n', '        balances[_owner] += 1;\n', '        emit Transfer(address(0), _owner, tokens.length - 1);\n', '    }\n', '\n', '    function getTokenType(uint256 _tokenId) view public returns (uint8 tokenType) {\n', '        tokenType = tokens[_tokenId].tokenType;\n', '    }\n', '\n', '    function getTokenAmount(uint256 _tokenId) view public returns (uint32 tokenAmount) {\n', '        tokenAmount = tokens[_tokenId].amount;\n', '    }\n', '\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    function totalSupply() public view returns (uint256 total) {\n', '        total = tokens.length;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance){\n', '        balance = balances[_owner];\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner){\n', '        owner = tokens[_tokenId].owner;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        require(tokens[_tokenId].owner == _from);\n', '        tokens[_tokenId].owner = _to;\n', '        approved[_tokenId] = address(0);\n', '        balances[_from] -= 1;\n', '        balances[_to] += 1;\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokenId) public onlyTokenOwner(_tokenId) returns (bool){\n', '        _transfer(msg.sender, _to, _tokenId);\n', '        return true;\n', '    }\n', '    \n', '    function superTransfer(address _from, address _to, uint256 _tokenId) public onlySuperUser returns(bool){\n', '        _transfer(_from, _to, _tokenId);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _to, uint256 _tokenId) public onlyTokenOwner(_tokenId){\n', '        approved[_tokenId] = _to;\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool) {\n', '        require(approved[_tokenId] == msg.sender);\n', '        _transfer(_from, _to, _tokenId);\n', '        return true;\n', '    }\n', '\n', '\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(approved[_tokenId] == msg.sender);\n', '        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '    }\n', '}']