['contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract ShareToken {\n', '    /* Public variables of the token */\n', "    string public standard = 'Token 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    address public corporationContract;\n', '    mapping (address => bool) public identityApproved;\n', '    mapping (address => bool) public voteLock; // user must keep at least 1 share if they are involved in voting  True=locked\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    //event Transfer(address indexed from, address indexed to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time);\n', '\n', '    uint256 public transferCount = 0;\n', '\n', '\n', '    struct pasttransfer {\n', '      address  from;\n', '      address  to;\n', '      uint256 beforesender;\n', '      uint256 beforereceiver;\n', '      uint256 value;\n', '      uint256 time;\n', '    }\n', '\n', '    pasttransfer[] transfers;\n', '\n', '    modifier onlyCorp() {\n', '        require(msg.sender == corporationContract);\n', '        _;\n', '    }\n', '    // Sender: Corporation  --->\n', '    function ShareToken() {\n', '\n', '    }\n', '\n', '    function init(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address _owner) {\n', '      corporationContract = msg.sender;\n', '      balanceOf[_owner] = initialSupply;                     // Give the creator all initial tokens\n', '      identityApproved[_owner] = true;\n', '      totalSupply = initialSupply;                        // Update total supply\n', '      allowance[_owner][corporationContract] = (totalSupply - 1);   // Allow corporation to sell shares to new members if approved\n', '      name = tokenName;                                   // Set the name for display purposes\n', '      symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '      decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '    function approveMember(address _newMember) public  returns (bool) {\n', '        identityApproved[_newMember] = true;\n', '        return true;\n', '    }\n', '\n', '    function Transfer(address from, address to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time) {\n', '      transferCount++;\n', '      pasttransfer memory t;\n', '      t.from = from;\n', '      t.to = to;\n', '      t.beforesender = beforesender;\n', '      t.beforereceiver = beforereceiver;\n', '      t.value = value;\n', '      t.time = time;\n', '      transfers.push(t);\n', '    }\n', '\n', '    // /* Send coins */\n', "    //  must have identityApproved + can't sell last token using transfer\n", '    function transfer(address _to, uint256 _value) public {\n', '        if (balanceOf[msg.sender] < (_value + 1)) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        require(identityApproved[_to]);\n', '        uint256 receiver = balanceOf[_to];\n', '        uint256 sender = balanceOf[msg.sender];\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, sender, receiver, _value, now);                   // Notify anyone listening that this transfer took place\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balanceOf[_from] < (_value + 1)) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();   // Check allowance\n', '        require(identityApproved[_to]);\n', '        uint256 receiver = balanceOf[_to];\n', '        uint256 sender = balanceOf[_from];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to,sender, receiver, _value, now);\n', '        return true;\n', '    }\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        revert();     // Prevents accidental sending of ether\n', '    }\n', '\n', '    function isApproved(address _user) constant returns (bool) {\n', '        return identityApproved[_user];\n', '    }\n', '\n', '    function getTransferCount() public view returns (uint256 count) {\n', '      return transferCount;\n', '    }\n', '\n', '    function getTransfer(uint256 i) public view returns (address from, address to, uint256 beforesender, uint256 beforereceiver, uint256 value, uint256 time) {\n', '      pasttransfer memory t = transfers[i];\n', '      return (t.from, t.to, t.beforesender, t.beforereceiver, t.value, t.time);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function getBalance(address _owner) public view returns (uint256 balance) {\n', '      return balanceOf[_owner];\n', '    }\n', '}']