['pragma solidity ^0.4.21;\n', '\n', 'contract CoinBundleToken {\n', '\n', '  function add(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x + y) >= x); }\n', '  function sub(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x - y) <= x); }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  address public owner;\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public totalSupply;\n', '  uint8 public constant decimals = 6;\n', '  mapping(address => uint) public balanceOf;\n', '  mapping(address => mapping (address => uint)) public allowance;\n', '\n', '  uint256 internal constant CAP_TO_GIVE_AWAY = 800000000 * (10 ** uint256(decimals));\n', '  uint256 internal constant CAP_FOR_THE_TEAM = 200000000 * (10 ** uint256(decimals));\n', '  uint256 internal constant TEAM_CAP_RELEASE_TIME = 1554000000; // 31 Mar 2019\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function CoinBundleToken() public {\n', '    owner = msg.sender;\n', '    totalSupply = 0;\n', '    name = "CoinBundle Token";\n', '    symbol = "BNDL";\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[msg.sender]);\n', '    balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);\n', '    balanceOf[_to] = add(balanceOf[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    balanceOf[_from] = sub(balanceOf[_from], _value);\n', '    balanceOf[_to] = add(balanceOf[_to], _value);\n', '    allowance[_from][msg.sender] = sub(allowance[_from][msg.sender], _value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = add(allowance[msg.sender][_spender], _addedValue);\n', '    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    uint256 oldValue = allowance[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowance[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowance[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require( add(totalSupply, _amount) <= (CAP_TO_GIVE_AWAY + (now >= TEAM_CAP_RELEASE_TIME ? CAP_FOR_THE_TEAM : 0)) );\n', '    totalSupply = add(totalSupply, _amount);\n', '    balanceOf[_to] = add(balanceOf[_to], _amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '\n', '  function rename(string _name, string _symbol) public onlyOwner {\n', '    require(bytes(_name).length > 0 && bytes(_name).length <= 32);\n', '    require(bytes(_symbol).length > 0 && bytes(_symbol).length <= 32);\n', '    name = _name;\n', '    symbol = _symbol;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract CoinBundleToken {\n', '\n', '  function add(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x + y) >= x); }\n', '  function sub(uint256 x, uint256 y) pure internal returns (uint256 z) { assert((z = x - y) <= x); }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  address public owner;\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public totalSupply;\n', '  uint8 public constant decimals = 6;\n', '  mapping(address => uint) public balanceOf;\n', '  mapping(address => mapping (address => uint)) public allowance;\n', '\n', '  uint256 internal constant CAP_TO_GIVE_AWAY = 800000000 * (10 ** uint256(decimals));\n', '  uint256 internal constant CAP_FOR_THE_TEAM = 200000000 * (10 ** uint256(decimals));\n', '  uint256 internal constant TEAM_CAP_RELEASE_TIME = 1554000000; // 31 Mar 2019\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function CoinBundleToken() public {\n', '    owner = msg.sender;\n', '    totalSupply = 0;\n', '    name = "CoinBundle Token";\n', '    symbol = "BNDL";\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[msg.sender]);\n', '    balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);\n', '    balanceOf[_to] = add(balanceOf[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    balanceOf[_from] = sub(balanceOf[_from], _value);\n', '    balanceOf[_to] = add(balanceOf[_to], _value);\n', '    allowance[_from][msg.sender] = sub(allowance[_from][msg.sender], _value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowance[msg.sender][_spender] = add(allowance[msg.sender][_spender], _addedValue);\n', '    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    uint256 oldValue = allowance[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowance[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowance[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require( add(totalSupply, _amount) <= (CAP_TO_GIVE_AWAY + (now >= TEAM_CAP_RELEASE_TIME ? CAP_FOR_THE_TEAM : 0)) );\n', '    totalSupply = add(totalSupply, _amount);\n', '    balanceOf[_to] = add(balanceOf[_to], _amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '\n', '  function rename(string _name, string _symbol) public onlyOwner {\n', '    require(bytes(_name).length > 0 && bytes(_name).length <= 32);\n', '    require(bytes(_symbol).length > 0 && bytes(_symbol).length <= 32);\n', '    name = _name;\n', '    symbol = _symbol;\n', '  }\n', '\n', '}']
