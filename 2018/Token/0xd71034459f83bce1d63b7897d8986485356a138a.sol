['pragma solidity ^0.4.10;\n', '\n', '// Library used for performing arithmetic operations\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '    /*\n', '    ERC Token Standard #20 Interface\n', '    */\n', '\n', '// ----------------------------------------------------------------------------\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '    /*\n', '    Contract function to receive approval and execute function in one call\n', '     */\n', '// ----------------------------------------------------------------------------\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '//Owned contract\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    /** @dev Assigns ownership to calling address\n', '      */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /** @dev Transfers ownership to new address\n', '     *  \n', '      */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    /** @dev Accept ownership of the contract\n', '      */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Owned {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', '\n', 'ERC20 Token, with the addition of symbol, name and decimals and an initial fixed supply\n', '      \n', '*/\n', '      \n', 'contract SpaceXToken is ERC20Interface, Owned, Pausable {\n', '    using SafeMath for uint;\n', '\n', '\n', '    uint8 public decimals;\n', '    \n', '    uint256 public totalRaised;           // Total ether raised (in wei)\n', '    uint256 public startTimestamp;        // Timestamp after which ICO will start\n', '    uint256 public endTimeStamp;          // Timestamp at which ICO will end\n', '    uint256 public basePrice =  15000000000000000;              // All prices are in Wei\n', '    uint256 public step1 =      80000000000000;\n', '    uint256 public step2 =      60000000000000;\n', '    uint256 public step3 =      40000000000000;\n', '    uint256 public tokensSold;\n', '    uint256 currentPrice;\n', '    uint256 public totalPrice;\n', '    uint256 public _totalSupply;        // Total number of presale tokens available\n', '    \n', '    string public version = &#39;1.0&#39;;      // The current version of token\n', '    string public symbol;           \n', '    string public  name;\n', '    \n', '    \n', '    address public fundsWallet;             // Where should the raised ETH go?\n', '\n', '    mapping(address => uint) balances;    // Keeps the record of tokens with each owner address\n', '    mapping(address => mapping(address => uint)) allowed; // Tokens allowed to be transferred\n', '\n', '    /** @dev Constructor\n', '      \n', '      */\n', '\n', '    function SpaceXToken() public {\n', '        tokensSold = 0;\n', '        startTimestamp = 1527080400;\n', '        endTimeStamp = 1529672400;\n', '        fundsWallet = owner;\n', '        name = "SpaceXToken";                                     // Set the name for display purposes (CHANGE THIS)\n', '        decimals = 0;                                               // numberOfTokens of decimals for display purposes (CHANGE THIS)\n', '        symbol = "SCX";                       // symbol for token\n', '        _totalSupply = 4000 * 10**uint(decimals);       // total supply of tokens \n', '        balances[owner] = _totalSupply;               // assigning all tokens to owner\n', '        tokensSold = 0;\n', '        currentPrice = basePrice;\n', '        totalPrice = 0;\n', '        Transfer(msg.sender, owner, _totalSupply);\n', '\n', '\n', '    }\n', '\n', '\n', '    /* @dev returns totalSupply of tokens.\n', '      \n', '      \n', '     */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    /** @dev returns balance of tokens of Owner.\n', '     *  @param tokenOwner address token owner\n', '      \n', '      \n', '     */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    /** @dev Transfer the tokens from token owner&#39;s account to `to` account\n', '     *  @param to address where token is to be sent\n', '     *  @param tokens  number of tokens\n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    /** @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner&#39;s account\n', '     *  @param spender address of spender \n', '     *  @param tokens number of tokens\n', '     \n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    /** @dev Transfer `tokens` from the `from` account to the `to` account\n', '     *  @param from address from where token is being sent\n', '     *  @param to where token is to be sent\n', '     *  @param tokens number of tokens\n', '      \n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    /** \n', '     *  @param tokenOwner Token Owner address\n', '     *  @param spender Address of spender\n', '      \n', '     */\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /** \n', '     *  @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner&#39;s account. The `spender` contract function`receiveApproval(...)` is then executed\n', '     \n', '      \n', '     */\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    /** \n', '     *  @dev Facilitates sale of presale tokens\n', '     *  @param numberOfTokens number of tokens to be bought\n', '     */\n', '    function TokenSale(uint256 numberOfTokens) public whenNotPaused payable { // Facilitates sale of presale token\n', '        \n', '        // All the required conditions for the sale of token\n', '        \n', '        require(now >= startTimestamp , "Sale has not started yet.");\n', '        require(now <= endTimeStamp, "Sale has ended.");\n', '        require(balances[fundsWallet] >= numberOfTokens , "There are no more tokens to be sold." );\n', '        require(numberOfTokens >= 1 , "You must buy 1 or more tokens.");\n', '        require(numberOfTokens <= 10 , "You must buy at most 10 tokens in a single purchase.");\n', '        require(tokensSold.add(numberOfTokens) <= _totalSupply);\n', '        require(tokensSold<3700, "There are no more tokens to be sold.");\n', '        \n', '        // Price step function\n', '        \n', '        if(tokensSold <= 1000){\n', '          \n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step1))/2;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step2))/2;\n', '        \n', '            \n', '        }\n', '        \n', '        \n', '        if(tokensSold > 3000){\n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step3))/2;\n', '        \n', '            \n', '        }\n', '        \n', '        \n', '        require (msg.value >= totalPrice);  // Check if message value is enough to buy given number of tokens\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - numberOfTokens;\n', '        balances[msg.sender] = balances[msg.sender] + numberOfTokens;\n', '\n', '        tokensSold = tokensSold + numberOfTokens;\n', '        \n', '        if(tokensSold <= 1000){\n', '          \n', '            currentPrice = basePrice + step1 * tokensSold;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            currentPrice = basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\n', '        \n', '            \n', '        }\n', '        \n', '        if(tokensSold > 3000){\n', '            \n', '            currentPrice = basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\n', '          \n', '        }\n', '        totalRaised = totalRaised + totalPrice;\n', '        \n', '        msg.sender.transfer(msg.value - totalPrice);            ////Transfer extra ether to wallet of the spender\n', '        Transfer(fundsWallet, msg.sender, numberOfTokens); // Broadcast a message to the blockchain\n', '\n', '    }\n', '    \n', '    /** \n', '     *  @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '     *  @dev Transfer the tokens from token owner&#39;s account to `to` account\n', '     *  @param tokenAddress address where token is to be sent\n', '     *  @param tokens  number of tokens\n', '     */\n', '     \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '   /** \n', '     *  @dev view current price of tokens\n', '     */\n', '    \n', '    function viewCurrentPrice() view returns (uint) {\n', '        if(tokensSold <= 1000){\n', '          \n', '            return basePrice + step1 * tokensSold;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            return basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\n', '        \n', '            \n', '        }\n', '        \n', '        if(tokensSold > 3000){\n', '            \n', '            return basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\n', '          \n', '        }\n', '    }\n', '\n', '    \n', '   /** \n', '     *  @dev view number of tokens sold\n', '     */\n', '    \n', '    function viewTokensSold() view returns (uint) {\n', '        return tokensSold;\n', '    }\n', '\n', '    /** \n', '     *  @dev view number of remaining tokens\n', '     */\n', '    \n', '    function viewTokensRemaining() view returns (uint) {\n', '        return _totalSupply - tokensSold;\n', '    }\n', '    \n', '    /** \n', '     *  @dev withdrawBalance from the contract address\n', '     *  @param amount that you want to withdrawBalance\n', '     * \n', '     */\n', '     \n', '    function withdrawBalance(uint256 amount) onlyOwner returns(bool) {\n', '        require(amount <= address(this).balance);\n', '        owner.transfer(amount);\n', '        return true;\n', '\n', '    }\n', '    \n', '    /** \n', '     *  @dev view balance of contract\n', '     */\n', '     \n', '    function getBalanceContract() constant returns(uint){\n', '        return address(this).balance;\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '// Library used for performing arithmetic operations\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '    /*\n', '    ERC Token Standard #20 Interface\n', '    */\n', '\n', '// ----------------------------------------------------------------------------\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '    /*\n', '    Contract function to receive approval and execute function in one call\n', '     */\n', '// ----------------------------------------------------------------------------\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '//Owned contract\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    /** @dev Assigns ownership to calling address\n', '      */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /** @dev Transfers ownership to new address\n', '     *  \n', '      */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    /** @dev Accept ownership of the contract\n', '      */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Owned {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', '\n', 'ERC20 Token, with the addition of symbol, name and decimals and an initial fixed supply\n', '      \n', '*/\n', '      \n', 'contract SpaceXToken is ERC20Interface, Owned, Pausable {\n', '    using SafeMath for uint;\n', '\n', '\n', '    uint8 public decimals;\n', '    \n', '    uint256 public totalRaised;           // Total ether raised (in wei)\n', '    uint256 public startTimestamp;        // Timestamp after which ICO will start\n', '    uint256 public endTimeStamp;          // Timestamp at which ICO will end\n', '    uint256 public basePrice =  15000000000000000;              // All prices are in Wei\n', '    uint256 public step1 =      80000000000000;\n', '    uint256 public step2 =      60000000000000;\n', '    uint256 public step3 =      40000000000000;\n', '    uint256 public tokensSold;\n', '    uint256 currentPrice;\n', '    uint256 public totalPrice;\n', '    uint256 public _totalSupply;        // Total number of presale tokens available\n', '    \n', "    string public version = '1.0';      // The current version of token\n", '    string public symbol;           \n', '    string public  name;\n', '    \n', '    \n', '    address public fundsWallet;             // Where should the raised ETH go?\n', '\n', '    mapping(address => uint) balances;    // Keeps the record of tokens with each owner address\n', '    mapping(address => mapping(address => uint)) allowed; // Tokens allowed to be transferred\n', '\n', '    /** @dev Constructor\n', '      \n', '      */\n', '\n', '    function SpaceXToken() public {\n', '        tokensSold = 0;\n', '        startTimestamp = 1527080400;\n', '        endTimeStamp = 1529672400;\n', '        fundsWallet = owner;\n', '        name = "SpaceXToken";                                     // Set the name for display purposes (CHANGE THIS)\n', '        decimals = 0;                                               // numberOfTokens of decimals for display purposes (CHANGE THIS)\n', '        symbol = "SCX";                       // symbol for token\n', '        _totalSupply = 4000 * 10**uint(decimals);       // total supply of tokens \n', '        balances[owner] = _totalSupply;               // assigning all tokens to owner\n', '        tokensSold = 0;\n', '        currentPrice = basePrice;\n', '        totalPrice = 0;\n', '        Transfer(msg.sender, owner, _totalSupply);\n', '\n', '\n', '    }\n', '\n', '\n', '    /* @dev returns totalSupply of tokens.\n', '      \n', '      \n', '     */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    /** @dev returns balance of tokens of Owner.\n', '     *  @param tokenOwner address token owner\n', '      \n', '      \n', '     */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', "    /** @dev Transfer the tokens from token owner's account to `to` account\n", '     *  @param to address where token is to be sent\n', '     *  @param tokens  number of tokens\n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', "    /** @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account\n", '     *  @param spender address of spender \n', '     *  @param tokens number of tokens\n', '     \n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    /** @dev Transfer `tokens` from the `from` account to the `to` account\n', '     *  @param from address from where token is being sent\n', '     *  @param to where token is to be sent\n', '     *  @param tokens number of tokens\n', '      \n', '      \n', '     */\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    /** \n', '     *  @param tokenOwner Token Owner address\n', '     *  @param spender Address of spender\n', '      \n', '     */\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /** \n', "     *  @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account. The `spender` contract function`receiveApproval(...)` is then executed\n", '     \n', '      \n', '     */\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    /** \n', '     *  @dev Facilitates sale of presale tokens\n', '     *  @param numberOfTokens number of tokens to be bought\n', '     */\n', '    function TokenSale(uint256 numberOfTokens) public whenNotPaused payable { // Facilitates sale of presale token\n', '        \n', '        // All the required conditions for the sale of token\n', '        \n', '        require(now >= startTimestamp , "Sale has not started yet.");\n', '        require(now <= endTimeStamp, "Sale has ended.");\n', '        require(balances[fundsWallet] >= numberOfTokens , "There are no more tokens to be sold." );\n', '        require(numberOfTokens >= 1 , "You must buy 1 or more tokens.");\n', '        require(numberOfTokens <= 10 , "You must buy at most 10 tokens in a single purchase.");\n', '        require(tokensSold.add(numberOfTokens) <= _totalSupply);\n', '        require(tokensSold<3700, "There are no more tokens to be sold.");\n', '        \n', '        // Price step function\n', '        \n', '        if(tokensSold <= 1000){\n', '          \n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step1))/2;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step2))/2;\n', '        \n', '            \n', '        }\n', '        \n', '        \n', '        if(tokensSold > 3000){\n', '            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step3))/2;\n', '        \n', '            \n', '        }\n', '        \n', '        \n', '        require (msg.value >= totalPrice);  // Check if message value is enough to buy given number of tokens\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - numberOfTokens;\n', '        balances[msg.sender] = balances[msg.sender] + numberOfTokens;\n', '\n', '        tokensSold = tokensSold + numberOfTokens;\n', '        \n', '        if(tokensSold <= 1000){\n', '          \n', '            currentPrice = basePrice + step1 * tokensSold;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            currentPrice = basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\n', '        \n', '            \n', '        }\n', '        \n', '        if(tokensSold > 3000){\n', '            \n', '            currentPrice = basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\n', '          \n', '        }\n', '        totalRaised = totalRaised + totalPrice;\n', '        \n', '        msg.sender.transfer(msg.value - totalPrice);            ////Transfer extra ether to wallet of the spender\n', '        Transfer(fundsWallet, msg.sender, numberOfTokens); // Broadcast a message to the blockchain\n', '\n', '    }\n', '    \n', '    /** \n', '     *  @dev Owner can transfer out any accidentally sent ERC20 tokens\n', "     *  @dev Transfer the tokens from token owner's account to `to` account\n", '     *  @param tokenAddress address where token is to be sent\n', '     *  @param tokens  number of tokens\n', '     */\n', '     \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '   /** \n', '     *  @dev view current price of tokens\n', '     */\n', '    \n', '    function viewCurrentPrice() view returns (uint) {\n', '        if(tokensSold <= 1000){\n', '          \n', '            return basePrice + step1 * tokensSold;\n', '            \n', '        }\n', '        \n', '        if(tokensSold > 1000 && tokensSold <= 3000){\n', '            return basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\n', '        \n', '            \n', '        }\n', '        \n', '        if(tokensSold > 3000){\n', '            \n', '            return basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\n', '          \n', '        }\n', '    }\n', '\n', '    \n', '   /** \n', '     *  @dev view number of tokens sold\n', '     */\n', '    \n', '    function viewTokensSold() view returns (uint) {\n', '        return tokensSold;\n', '    }\n', '\n', '    /** \n', '     *  @dev view number of remaining tokens\n', '     */\n', '    \n', '    function viewTokensRemaining() view returns (uint) {\n', '        return _totalSupply - tokensSold;\n', '    }\n', '    \n', '    /** \n', '     *  @dev withdrawBalance from the contract address\n', '     *  @param amount that you want to withdrawBalance\n', '     * \n', '     */\n', '     \n', '    function withdrawBalance(uint256 amount) onlyOwner returns(bool) {\n', '        require(amount <= address(this).balance);\n', '        owner.transfer(amount);\n', '        return true;\n', '\n', '    }\n', '    \n', '    /** \n', '     *  @dev view balance of contract\n', '     */\n', '     \n', '    function getBalanceContract() constant returns(uint){\n', '        return address(this).balance;\n', '    }\n', '}']
