['pragma solidity ^0.4.18;\n', '\n', '// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address _who) public constant returns (uint);\n', '  function allowance(address _owner, address _spender) public constant returns (uint);\n', '\n', '  function transfer(address _to, uint _value) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n', '  function approve(address _spender, uint _value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract Haltable is Ownable {\n', '\n', '    // @dev To Halt in Emergency Condition\n', '    bool public halted = false;\n', '    //empty contructor\n', '    function Haltable() public {}\n', '\n', '    // @dev Use this as function modifier that should not execute if contract state Halted\n', '    modifier stopIfHalted {\n', '      require(!halted);\n', '      _;\n', '    }\n', '\n', '    // @dev Use this as function modifier that should execute only if contract state Halted\n', '    modifier runIfHalted{\n', '      require(halted);\n', '      _;\n', '    }\n', '\n', '    // @dev called by only owner in case of any emergecy situation\n', '    function halt() onlyOwner stopIfHalted public {\n', '        halted = true;\n', '    }\n', '    // @dev called by only owner to stop the emergency situation\n', '    function unHalt() onlyOwner runIfHalted public {\n', '        halted = false;\n', '    }\n', '}\n', '\n', 'contract EEZOToken is ERC20,SafeMath,Haltable {\n', '\n', '    //flag to determine if address is for real contract or not\n', '    bool public isEEZOToken = false;\n', '\n', '    //Token related information\n', '    string public constant name = "Element Zero";\n', '    string public constant symbol = "EEZO";\n', '    uint256 public constant decimals = 18; // decimal places\n', '\n', '    //Address of Pre-ICO contract\n', '    address public preIcoContract;\n', '    //Address of ICO contract\n', '    address public icoContract;\n', '\n', '    //mapping of token balances\n', '    mapping (address => uint256) balances;\n', '    //mapping of allowed address for each address with tranfer limit\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    //mapping of allowed address for each address with burnable limit\n', '    mapping (address => mapping (address => uint256)) allowedToBurn;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address owner,uint256 _value);\n', '    event ApproveBurner(address owner, address canBurn, uint256 value);\n', '    event BurnFrom(address _from,uint256 _value);\n', '\n', '    function EEZOToken() public {\n', '        totalSupply = 24000000 ether;\n', '        balances[msg.sender] = totalSupply;\n', '        isEEZOToken = true;\n', '        emit Transfer(address(0), msg.sender,totalSupply);\n', '    }\n', '\n', '    //Owner can Set Pre-ICO contract address\n', '    //@ param _preIcoContract address of Pre-ICO contract.\n', '    function setPreIcoContract(address _preIcoContract) public onlyOwner {\n', '        require(_preIcoContract != 0);\n', '        preIcoContract = _preIcoContract;\n', '    }\n', '\n', '    //Owner can Set ICO contract address\n', '    //@ param _icoContract address of ICO contract.\n', '    function setIcoContract(address _icoContract) public onlyOwner {\n', '        require(_icoContract != 0);\n', '        icoContract = _icoContract;\n', '    }\n', '\n', '    // @param _who The address of the investor to check balance\n', '    // @return balance tokens of investor address\n', '    function balanceOf(address _who) public constant returns (uint) {\n', '        return balances[_who];\n', '    }\n', '\n', '    // @param _owner The address of the account owning tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // @param _owner The address of the account owning tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @return Amount of remaining tokens allowed to spent\n', '    function allowanceToBurn(address _owner, address _spender) public constant returns (uint) {\n', '        return allowedToBurn[_owner][_spender];\n', '    }\n', '\n', '    //  Transfer `value` EEZO tokens from sender&#39;s account\n', '    // `msg.sender` to provided account address `to`.\n', '    // @param _to The address of the recipient\n', '    // @param _value The number of EEZO tokens to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool ok) {\n', '        //validate receiver address and value.Not allow 0 value\n', '        require(_to != 0 && _value > 0);\n', '        uint256 senderBalance = balances[msg.sender];\n', '        //Check sender have enough balance\n', '        require(senderBalance >= _value);\n', '        senderBalance = safeSub(senderBalance, _value);\n', '        balances[msg.sender] = senderBalance;\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //  Transfer `value` EEZO tokens from sender &#39;from&#39;\n', '    // to provided account address `to`.\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The number of EEZO to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\n', '        //validate _from,_to address and _value(Not allow with 0)\n', '        require(_from != 0 && _to != 0 && _value > 0);\n', '        //Check amount is approved by the owner for spender to spent and owner have enough balances\n', '        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n', '        balances[_from] = safeSub(balances[_from],_value);\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //  `msg.sender` approves `spender` to spend `value` tokens\n', '    // @param spender The address of the account able to transfer the tokens\n', '    // @param value The amount of wei to be approved for transfer\n', '    // @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool ok) {\n', '        //validate _spender address\n', '        require(_spender != 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    //  Mint `amount` EEZO tokens\n', '    // `msg.sender` to provided account and amount.\n', '    // @param _account The address of the mint token recipient\n', '    // @param _amount The number of EEZO tokens to mint\n', '    // @return Whether the Mint was successful or not\n', '    function mint(address _account, uint256 _amount) public stopIfHalted returns (bool ok) {\n', '        require(msg.sender == owner || msg.sender == preIcoContract || msg.sender == icoContract);\n', '        require(_account != 0);\n', '        totalSupply = safeAdd(totalSupply,_amount);\n', '        balances[_account] = safeAdd(balances[_account],_amount);\n', '        emit Mint(_account, _amount);\n', '        emit Transfer(address(0), _account, _amount);\n', '        return true;\n', '    }\n', '\n', '    //  `msg.sender` approves `_canBurn` to burn `value` tokens\n', '    // @param _canBurn The address of the account able to burn the tokens\n', '    // @param _value The amount of wei to be approved for burn\n', '    // @return Whether the approval was successful or not\n', '    function approveForBurn(address _canBurn, uint _value) public returns (bool ok) {\n', '        //validate _spender address\n', '        require(_canBurn != 0);\n', '        allowedToBurn[msg.sender][_canBurn] = _value;\n', '        ApproveBurner(msg.sender, _canBurn, _value);\n', '        return true;\n', '    }\n', '\n', '    //  Burn `value` EEZO tokens from sender&#39;s account\n', '    // `msg.sender` to provided _value.\n', '    // @param _value The number of EEZO tokens to destroy\n', '    // @return Whether the Burn was successful or not\n', '    function burn(uint _value) public returns (bool ok) {\n', '        //validate receiver address and value.Now allow 0 value\n', '        require(_value > 0);\n', '        uint256 senderBalance = balances[msg.sender];\n', '        require(senderBalance >= _value);\n', '        senderBalance = safeSub(senderBalance, _value);\n', '        balances[msg.sender] = senderBalance;\n', '        totalSupply = safeSub(totalSupply,_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    //  Burn `value` EEZO tokens from sender &#39;from&#39;\n', '    // to provided account address `to`.\n', '    // @param from The address of the burner\n', '    // @param to The address of the token holder from token to burn\n', '    // @param value The number of EEZO to burn\n', '    // @return Whether the transfer was successful or not\n', '    function burnFrom(address _from, uint _value) public returns (bool ok) {\n', '        //validate _from,_to address and _value(Now allow with 0)\n', '        require(_from != 0 && _value > 0);\n', '        //Check amount is approved by the owner to burn and owner have enough balances\n', '        require(allowedToBurn[_from][msg.sender] >= _value && balances[_from] >= _value);\n', '        balances[_from] = safeSub(balances[_from],_value);\n', '        totalSupply = safeSub(totalSupply,_value);\n', '        allowedToBurn[_from][msg.sender] = safeSub(allowedToBurn[_from][msg.sender],_value);\n', '        BurnFrom(_from, _value);\n', '        return true;\n', '    }\n', '}']