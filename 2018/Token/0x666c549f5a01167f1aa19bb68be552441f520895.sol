['pragma solidity >=0.4.18;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public constant returns (uint supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value)  public returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract RegularToken is Token {\n', '    mapping (address => uint256) balances;\n', '    //gaming locked balance\n', '    mapping (address => uint256) lockedBalances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '    /// @dev only transfer unlockedbalance\n', '    function transfer(address _to, uint _value)  public returns (bool) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[msg.sender] >= _value  && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner)  public constant returns (uint) {\n', '        return balances[_owner] + lockedBalances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)  public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract A5DToken is RegularToken {\n', '    uint256 private keyprice = 3;\n', '    uint256 public totalSupply = 100000000*10**18;\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "5D Bid Tokens";\n', '    string constant public symbol = "5D";\n', '    mapping (address => uint) allowedContract;\n', '    address public owner;\n', '    address public communityWallet;\n', '    \n', '    function A5DToken()  public {\n', '        communityWallet = 0x44729e029f9c63798805e6142bc696bdbc69f70d;\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    //events\n', '    event SellLockedBalance(address indexed _owner, uint256 _amount);\n', '    event FreeLockedBalance(address indexed _owner, address _to,uint256 _amount);\n', '    event UnlockBalance(address indexed _owner, uint256 _amount);\n', '    event SpendLockedBalance(address indexed _owner,address indexed spender, uint256 _amount);\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '    \n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAllowedContract {\n', '        require (allowedContract[msg.sender] == 1 || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    // function getallowedContracts(uint contractAddress) returns (uint){\n', '    //     return allowedContract[contractAddress];\n', '    // }\n', '    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n', '    /// @param _from Address to transfer from.\n', '    /// @param _to Address to transfer to.\n', '    /// @param _value Amount to transfer.\n', '    /// @return Success of transfer.\n', '    \n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        if (balances[_from] >= _value\n', '            && allowance >= _value\n', '            && balances[_to] + _value >= balances[_to]\n', '        ) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            if (allowance < MAX_UINT) {\n', '                allowed[_from][msg.sender] -= _value;\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function unlockBalance(address _owner, uint256 _value)\n', '        public\n', '        onlyOwner()\n', '        returns (bool)\n', '        {\n', '        uint256 shouldUnlockedBalance = 0;\n', '        shouldUnlockedBalance = _value;\n', '        if(shouldUnlockedBalance > lockedBalances[_owner]){\n', '            shouldUnlockedBalance = lockedBalances[_owner];\n', '        }\n', '        balances[_owner] += shouldUnlockedBalance;\n', '        lockedBalances[_owner] -= shouldUnlockedBalance;\n', '        UnlockBalance(_owner, shouldUnlockedBalance);\n', '        return true;\n', '    }\n', '    \n', '    function withdrawAmount()\n', '        public  \n', '        {\n', '        require (msg.sender == communityWallet);\n', '        communityWallet.transfer(this.balance);\n', '    }\n', '    \n', '    function updateKeyPrice(uint256 updatePrice)\n', '        onlyOwner()\n', '        public  {\n', '        keyprice = updatePrice;\n', '    }\n', '    \n', '    function lockedBalanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256 balance) {\n', '        return lockedBalances[_owner];\n', '    }\n', '    function UnlockedBalanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    /// @dev for gaming only\n', '    function freeGameLockedToken(address _to, uint256 _value)\n', '    onlyOwner()\n', '    public\n', '    {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[msg.sender] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            lockedBalances[_to] += _value;\n', '            FreeLockedBalance(msg.sender, _to, _value);\n', '\n', '        }\n', '    }\n', '    \n', '    function getConsideration(uint256 keyquantity) view public returns(uint256){\n', '        uint256 consideration = keyprice * keyquantity /100;\n', '        return consideration;\n', '    }\n', '    \n', '    function sellGameLockedToken(uint256 keyquantity)\n', '    public\n', '    payable\n', '    returns (bool) \n', '    {\n', '        uint256 amount = msg.value;\n', '        uint256 consideration = keyprice * keyquantity /100;\n', '        require(amount >= consideration);\n', '        uint256 _value = keyquantity;\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[owner] >= _value  && lockedBalances[msg.sender] + _value >= lockedBalances[msg.sender]) {\n', '            balances[owner] -= _value;\n', '            lockedBalances[msg.sender] += _value;\n', '            SellLockedBalance(msg.sender, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function approveContractReceiveGameLockedToken(address _from)\n', '    onlyOwner()\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowedContract[_from] = 1;\n', '        return true;\n', '    }\n', '    \n', '    function spendGameLockedToken(address _from, uint256 _value)\n', '    public\n', '    onlyAllowedContract()\n', '    returns (bool) {\n', '        \n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (lockedBalances[_from] >= _value  && balances[owner] + _value >= balances[owner]) {\n', '            lockedBalances[_from] -= _value;\n', '            balances[owner] += _value;\n', '            SpendLockedBalance(owner, _from, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function jackPotGameLockedToken(address _to, uint256 _value)\n', '    onlyAllowedContract()\n', '    public\n', '    {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        if (balances[owner] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n', '            balances[owner] -= _value;\n', '            lockedBalances[_to] += _value;\n', '            }\n', '    }\n', '}']
['pragma solidity >=0.4.18;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public constant returns (uint supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value)  public returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract RegularToken is Token {\n', '    mapping (address => uint256) balances;\n', '    //gaming locked balance\n', '    mapping (address => uint256) lockedBalances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '    /// @dev only transfer unlockedbalance\n', '    function transfer(address _to, uint _value)  public returns (bool) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value  && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner)  public constant returns (uint) {\n', '        return balances[_owner] + lockedBalances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)  public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract A5DToken is RegularToken {\n', '    uint256 private keyprice = 3;\n', '    uint256 public totalSupply = 100000000*10**18;\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "5D Bid Tokens";\n', '    string constant public symbol = "5D";\n', '    mapping (address => uint) allowedContract;\n', '    address public owner;\n', '    address public communityWallet;\n', '    \n', '    function A5DToken()  public {\n', '        communityWallet = 0x44729e029f9c63798805e6142bc696bdbc69f70d;\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    //events\n', '    event SellLockedBalance(address indexed _owner, uint256 _amount);\n', '    event FreeLockedBalance(address indexed _owner, address _to,uint256 _amount);\n', '    event UnlockBalance(address indexed _owner, uint256 _amount);\n', '    event SpendLockedBalance(address indexed _owner,address indexed spender, uint256 _amount);\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '    \n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAllowedContract {\n', '        require (allowedContract[msg.sender] == 1 || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    // function getallowedContracts(uint contractAddress) returns (uint){\n', '    //     return allowedContract[contractAddress];\n', '    // }\n', '    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n', '    /// @param _from Address to transfer from.\n', '    /// @param _to Address to transfer to.\n', '    /// @param _value Amount to transfer.\n', '    /// @return Success of transfer.\n', '    \n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        if (balances[_from] >= _value\n', '            && allowance >= _value\n', '            && balances[_to] + _value >= balances[_to]\n', '        ) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            if (allowance < MAX_UINT) {\n', '                allowed[_from][msg.sender] -= _value;\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function unlockBalance(address _owner, uint256 _value)\n', '        public\n', '        onlyOwner()\n', '        returns (bool)\n', '        {\n', '        uint256 shouldUnlockedBalance = 0;\n', '        shouldUnlockedBalance = _value;\n', '        if(shouldUnlockedBalance > lockedBalances[_owner]){\n', '            shouldUnlockedBalance = lockedBalances[_owner];\n', '        }\n', '        balances[_owner] += shouldUnlockedBalance;\n', '        lockedBalances[_owner] -= shouldUnlockedBalance;\n', '        UnlockBalance(_owner, shouldUnlockedBalance);\n', '        return true;\n', '    }\n', '    \n', '    function withdrawAmount()\n', '        public  \n', '        {\n', '        require (msg.sender == communityWallet);\n', '        communityWallet.transfer(this.balance);\n', '    }\n', '    \n', '    function updateKeyPrice(uint256 updatePrice)\n', '        onlyOwner()\n', '        public  {\n', '        keyprice = updatePrice;\n', '    }\n', '    \n', '    function lockedBalanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256 balance) {\n', '        return lockedBalances[_owner];\n', '    }\n', '    function UnlockedBalanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    /// @dev for gaming only\n', '    function freeGameLockedToken(address _to, uint256 _value)\n', '    onlyOwner()\n', '    public\n', '    {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            lockedBalances[_to] += _value;\n', '            FreeLockedBalance(msg.sender, _to, _value);\n', '\n', '        }\n', '    }\n', '    \n', '    function getConsideration(uint256 keyquantity) view public returns(uint256){\n', '        uint256 consideration = keyprice * keyquantity /100;\n', '        return consideration;\n', '    }\n', '    \n', '    function sellGameLockedToken(uint256 keyquantity)\n', '    public\n', '    payable\n', '    returns (bool) \n', '    {\n', '        uint256 amount = msg.value;\n', '        uint256 consideration = keyprice * keyquantity /100;\n', '        require(amount >= consideration);\n', '        uint256 _value = keyquantity;\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[owner] >= _value  && lockedBalances[msg.sender] + _value >= lockedBalances[msg.sender]) {\n', '            balances[owner] -= _value;\n', '            lockedBalances[msg.sender] += _value;\n', '            SellLockedBalance(msg.sender, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function approveContractReceiveGameLockedToken(address _from)\n', '    onlyOwner()\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowedContract[_from] = 1;\n', '        return true;\n', '    }\n', '    \n', '    function spendGameLockedToken(address _from, uint256 _value)\n', '    public\n', '    onlyAllowedContract()\n', '    returns (bool) {\n', '        \n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (lockedBalances[_from] >= _value  && balances[owner] + _value >= balances[owner]) {\n', '            lockedBalances[_from] -= _value;\n', '            balances[owner] += _value;\n', '            SpendLockedBalance(owner, _from, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function jackPotGameLockedToken(address _to, uint256 _value)\n', '    onlyAllowedContract()\n', '    public\n', '    {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[owner] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n', '            balances[owner] -= _value;\n', '            lockedBalances[_to] += _value;\n', '            }\n', '    }\n', '}']
