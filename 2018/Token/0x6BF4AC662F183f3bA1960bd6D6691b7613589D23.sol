['/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '      address indexed owner,\n', '      address indexed spender,\n', '      uint256 value\n', '    );\n', '}/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract PostboyToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    struct Account {\n', '        uint256 balance;\n', '        uint256 lastDividends;\n', '    }\n', '\n', '    string public constant name = "PostboyToken"; // solium-disable-line uppercase\n', '    string public constant symbol = "PBY"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 0; // solium-disable-line uppercase\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 100000;\n', '\n', '    uint256 public totalDividends;\n', '    uint256 totalSupply_;\n', '    \n', '    mapping (address => Account) accounts;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    address public admin;\n', '    address public payer;\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        totalDividends = 0;\n', '        accounts[msg.sender].balance = INITIAL_SUPPLY;\n', '        admin = msg.sender;\n', '        payer = address(0);\n', '        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return accounts[_owner].balance;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '      public\n', '      view\n', '      returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get dividents sum by address\n', '    */\n', '    function dividendBalanceOf(address account) public view returns (uint256) {\n', '        uint256 newDividends = totalDividends.sub(accounts[account].lastDividends);\n', '        uint256 product = accounts[account].balance.mul(newDividends);\n', '        return product.div(totalSupply_);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw dividends\n', '    */\n', '    function claimDividend() public {\n', '        uint256 owing = dividendBalanceOf(msg.sender);\n', '        if (owing > 0) {\n', '            accounts[msg.sender].lastDividends = totalDividends;\n', '            msg.sender.transfer(owing);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Tokens transfer will not work if sender or recipient has dividends\n', '    */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(_value <= accounts[_from].balance);\n', '        require(accounts[_to].balance + _value >= accounts[_to].balance);\n', '    \n', '        uint256 fromOwing = dividendBalanceOf(_from);\n', '        uint256 toOwing = dividendBalanceOf(_to);\n', '        require(fromOwing <= 0 && toOwing <= 0);\n', '    \n', '        accounts[_from].balance = accounts[_from].balance.sub(_value);\n', '        accounts[_to].balance = accounts[_to].balance.add(_value);\n', '    \n', '        accounts[_to].lastDividends = accounts[_from].lastDividends;\n', '    \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function changePayer(address _payer) public returns (bool) {\n', '        require(msg.sender == admin);\n', '        payer = _payer;\n', '    }\n', '\n', '    function sendDividends() public payable {\n', '        require(msg.sender == payer);\n', '        \n', '        totalDividends = totalDividends.add(msg.value);\n', '    }\n', '\n', '    function () external payable {\n', '        require(false);\n', '    }\n', '}\n', 'contract PostboyTokenMiddleware {\n', '   \n', '    address public adminAddress_1;\n', '    address public adminAddress_2;\n', '    address public adminAddress_3;\n', '\n', '    PostboyToken public token;\n', '\n', '    modifier isAdmin() {\n', '        require(msg.sender == adminAddress_1 || msg.sender == adminAddress_2 || msg.sender == adminAddress_3);\n', '        _;\n', '    }\n', '\n', '    constructor(address admin_1, address admin_2, address admin_3, PostboyToken _token) public {\n', '        adminAddress_1 = admin_1;\n', '        adminAddress_2 = admin_2;\n', '        adminAddress_3 = admin_3;\n', '\n', '        token = _token;\n', '    }\n', '\n', '    function transferDividends() isAdmin public {\n', '        token.sendDividends.value(address(this).balance)();\n', '    }\n', '\n', '    function () external payable {\n', '    }\n', '}']