['pragma solidity 0.4.19;\n', '\n', '// File: contracts\\MultiOwnable.sol\n', '\n', '/**\n', ' * FEATURE 2): MultiOwnable implementation\n', " * Transactions approved by _multiRequires of _multiOwners' addresses will be executed. \n", '\n', ' * All functions needing unit-tests cannot be INTERNAL\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    address[8] m_owners;\n', '    uint m_numOwners;\n', '    uint m_multiRequires;\n', '\n', '    mapping (bytes32 => uint) internal m_pendings;\n', '\n', '    event AcceptConfirm(bytes32 operation, address indexed who, uint confirmTotal);\n', '    \n', '    // constructor is given number of sigs required to do protected "multiOwner" transactions\n', '    function MultiOwnable (address[] _multiOwners, uint _multiRequires) public {\n', '        require(0 < _multiRequires && _multiRequires <= _multiOwners.length);\n', '        m_numOwners = _multiOwners.length;\n', '        require(m_numOwners <= 8);   // Bigger then 8 co-owners, not support !\n', '        for (uint i = 0; i < _multiOwners.length; ++i) {\n', '            m_owners[i] = _multiOwners[i];\n', '            require(m_owners[i] != address(0));\n', '        }\n', '        m_multiRequires = _multiRequires;\n', '    }\n', '\n', '    // Any one of the owners, will approve the action\n', '    modifier anyOwner {\n', '        if (isOwner(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Requiring num > m_multiRequires owners, to approve the action\n', '    modifier mostOwner(bytes32 operation) {\n', '        if (checkAndConfirm(msg.sender, operation)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function isOwner(address currentUser) public view returns (bool) {\n', '        for (uint i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkAndConfirm(address currentUser, bytes32 operation) public returns (bool) {\n', '        uint ownerIndex = m_numOwners;\n', '        uint i;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                ownerIndex = i;\n', '            }\n', '        }\n', '        if (ownerIndex == m_numOwners) {\n', '            return false;  // Not Owner\n', '        }\n', '        \n', '        uint newBitFinger = (m_pendings[operation] | (2 ** ownerIndex));\n', '\n', '        uint confirmTotal = 0;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if ((newBitFinger & (2 ** i)) > 0) {\n', '                confirmTotal ++;\n', '            }\n', '        }\n', '        \n', '        AcceptConfirm(operation, currentUser, confirmTotal);\n', '\n', '        if (confirmTotal >= m_multiRequires) {\n', '            delete m_pendings[operation];\n', '            return true;\n', '        }\n', '        else {\n', '            m_pendings[operation] = newBitFinger;\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Pausable.sol\n', '\n', '/**\n', ' * FEATURE 3): Pausable implementation\n', ' */\n', 'contract Pausable is MultiOwnable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() mostOwner(keccak256(msg.data)) whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() mostOwner(keccak256(msg.data)) whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function isPause() view public returns(bool) {\n', '        return paused;\n', '    }\n', '}\n', '\n', '// File: contracts\\SafeMath.sol\n', '\n', '/**\n', '* Standard SafeMath Library: zeppelin-solidity/contracts/math/SafeMath.sol\n', '*/\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts\\AdvisorGPX.sol\n', '\n', '/**\n', ' * The updated body of smart contract.\n', ' * %6 fund will be transferred to ParcelX advisors automatically. \n', ' */\n', 'contract AdvisorGPX is MultiOwnable, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    address internal advisor = 0xd173bdd2f4ccd88b35b83a8bc35dd05a3b5a3c79;\n', '    uint internal payAdvisorFlag = 0;\n', '\n', '    function AdvisorGPX(address[] _multiOwners, uint _multiRequires) \n', '        MultiOwnable(_multiOwners, _multiRequires) public {\n', '    }\n', '    \n', '    event Deposit(address indexed who, uint256 value);\n', '    event Withdraw(address indexed who, uint256 value, address indexed lastApprover, string extra);\n', '    event AdviseFee(address advisor, uint256 advfee);\n', '\n', '    function getTime() public view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function getBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '    \n', '    /**\n', '     * FEATURE : Buyable\n', '     * minimum of 0.001 ether for purchase in the public, pre-ico, and private sale\n', '     * Code caculates the endtime via python: \n', '     *   d1 = datetime.datetime.strptime("2018-10-31 23:59:59", \'%Y-%m-%d %H:%M:%S\')\n', '     *   t = time.mktime(d1.timetuple())\n', '     *   d2 = datetime.datetime.fromtimestamp(t)\n', "     *   assert (d1 == d2)  # print d2.strftime('%Y-%m-%d %H:%M:%S')\n", '     *   print t # = 1541001599\n', '     */\n', '    function buy() payable whenNotPaused public returns (bool) {\n', '        Deposit(msg.sender, msg.value);\n', '        require(msg.value >= 0.001 ether);\n', '        \n', '        // Fee to advisors\n', '        if (now > 1541001599 && payAdvisorFlag == 0) {\n', '            payAdvisorFlag = payAdvisorFlag + 1;\n', '            uint256 advfee = this.balance.div(20) + this.balance.div(100);  // = 6.0 %, Not float in Solidity, So use INT/div to approach. \n', '            if (advfee > 0) {\n', '                advisor.transfer(advfee);   // Prevent using call() or send()\n', '            }\n', '            AdviseFee(advisor, advfee);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // gets called when no other function matches\n', '    function () payable public {\n', '        if (msg.value > 0) {\n', '            buy();\n', '        }\n', '    }\n', '\n', '    function execute(address _to, uint256 _value, string _extra) mostOwner(keccak256(msg.data)) external returns (bool){\n', '        require(_to != address(0));\n', '        _to.transfer(_value);   // Prevent using call() or send()\n', '        Withdraw(_to, _value, msg.sender, _extra);\n', '        return true;\n', '    }\n', '\n', '}']