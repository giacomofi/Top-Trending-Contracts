['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    \n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract RefugeCoin is StandardToken {\n', '\n', '    /* Public variables of the token */\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', "    string public version = 'H1.0'; \n", '    address private fundsWallet;\n', '    uint256 private unitsOneEthCanBuyInPreICO;     \n', '    uint256 private unitsOneEthCanBuyInFirstICO;     \n', '    uint256 private unitsOneEthCanBuyInSecondICO;    \n', '    uint256 public totalEthInWeiForPreIco;  \n', '    uint256 public totalEthInWeiForFirstIco;  \n', '    uint256 public totalEthInWeiForSecondIco;\n', '    uint private PreIcoDeadline;\n', '    uint private FirstICODeadline;\n', '    uint private SecondICODeadline;\n', '    uint256 public totalFirstICOSupply;\n', '    uint256 public totalSecondICOSupply;\n', '    uint256 public totalPreICOSupply;\n', '    function RefugeCoin() {\n', '        \n', '        decimals = 18;\n', '        balances[msg.sender] = 200000000 * 1e18;\n', '        totalSupply = 200000000 * 1e18;\n', '        name = "RefugeCoin";\n', '        symbol = "RFG";\n', '        fundsWallet = msg.sender;\n', '        \n', '        PreIcoDeadline = 1522540799;                              // Until 31/3\n', '        FirstICODeadline = 1527811199;                            // Until 31/5\n', '        SecondICODeadline = 1535759999;                           // Until 31/8\n', '        \n', '        unitsOneEthCanBuyInPreICO = 2000;\n', '        unitsOneEthCanBuyInFirstICO = 1250;\n', '        unitsOneEthCanBuyInSecondICO = 1111;\n', '        \n', '        totalPreICOSupply = 6000000 * 1e18;\n', '        totalFirstICOSupply = 7000000 * 1e18;\n', '        totalSecondICOSupply = 7000000 * 1e18;\n', '    }\n', '\n', '    function() payable{\n', '        uint256 currentValue;\n', '        uint256 amount;\n', '        \n', '        if(PreIcoDeadline > now){\n', '            \n', '            currentValue = unitsOneEthCanBuyInPreICO;\n', '            amount = msg.value * currentValue;\n', '            if (totalPreICOSupply < amount){\n', '                return;\n', '            }\n', '            totalPreICOSupply = totalPreICOSupply - amount;\n', '            totalEthInWeiForPreIco = totalEthInWeiForPreIco + msg.value;\n', '            \n', '        }else if(FirstICODeadline > now){\n', '            \n', '            currentValue = unitsOneEthCanBuyInFirstICO;\n', '            amount = msg.value * currentValue;\n', '            if (totalFirstICOSupply < amount){\n', '                return;\n', '            }\n', '            totalFirstICOSupply = totalFirstICOSupply - amount;\n', '            totalEthInWeiForFirstIco = totalEthInWeiForFirstIco + msg.value;\n', '            \n', '        }else if(SecondICODeadline > now){\n', '            \n', '            currentValue = unitsOneEthCanBuyInSecondICO;\n', '            amount = msg.value * currentValue;\n', '            if (totalSecondICOSupply < amount){\n', '                return;\n', '            }\n', '            totalSecondICOSupply = totalSecondICOSupply - amount;\n', '            totalEthInWeiForSecondIco = totalEthInWeiForSecondIco + msg.value;\n', '        }else{\n', '            return;\n', '        }\n', '        \n', '        \n', '        \n', '        if (balances[fundsWallet] < amount) {\n', '            return;\n', '        }\n', '        \n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '    \n', '        Transfer(fundsWallet, msg.sender, amount);\n', '    \n', '        fundsWallet.transfer(msg.value);\n', '        \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']