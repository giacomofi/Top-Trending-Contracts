['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor () public {\n', '            owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', ' \n', ' \n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', ' \n', 'contract TokenERC20 {\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    \n', '    function transfer(address to, uint value) public  returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public  returns (bool ok);\n', '    \n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    \n', '    function burn(uint256 _value) public returns (bool success);\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '} \n', '\n', 'contract TokenERC20Standart is TokenERC20, Pausable{\n', '    \n', '        using SafeMath for uint256;\n', '        \n', '        string public name;                         // token name\n', '        uint256 public decimals;                    // Amount of decimals for display purposes \n', '        string public symbol;                       // symbol token\n', '        string public version;                      // contract version \n', '        uint256 public totalSupply; \n', '            \n', '        // create array with all blances    \n', '        mapping(address => uint) public balances;\n', '        mapping(address => mapping(address => uint)) public allowed;\n', '        \n', '        /**\n', '        * @dev Fix for the ERC20 short address attack.\n', '        */\n', '        modifier onlyPayloadSize(uint size) {\n', '            require(msg.data.length >= size + 4) ;\n', '            _;\n', '        }\n', '            \n', '       \n', '        function balanceOf(address tokenOwner) public constant whenNotPaused  returns (uint balance) {\n', '             return balances[tokenOwner];\n', '        }\n', ' \n', '        function transfer(address to, uint256 tokens) public  whenNotPaused onlyPayloadSize(2*32) returns (bool success) {\n', '            _transfer(msg.sender, to, tokens);\n', '            return true;\n', '        }\n', ' \n', '\n', '        function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\n', '            allowed[msg.sender][spender] = tokens;\n', '            emit Approval(msg.sender, spender, tokens);\n', '            return true;\n', '        }\n', ' \n', '        function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3*32) returns (bool success) {\n', '            balances[from] = balances[from].sub(tokens);\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '\n', '        function allowance(address tokenOwner, address spender) public  whenNotPaused constant returns (uint remaining) {\n', '            return allowed[tokenOwner][spender];\n', '        }\n', '\n', '        function sell(address _recipient, uint256 _value) internal whenNotPaused returns (bool success) {\n', '            _transfer (owner, _recipient, _value);\n', '            return true;\n', '        }\n', '        \n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            assert(_value > 0);\n', '            require (_to != 0x0);                              \n', '            require (balances[_from] >= _value);               \n', '            require (balances[_to] + _value >= balances[_to]);\n', '            balances[_from] = balances[_from].sub(_value);                        \n', '            balances[_to] = balances[_to].add(_value);                           \n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(balances[msg.sender] >= _value);                             // Check if the sender has enough\n', '            balances[msg.sender] =  balances[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                              // Updates totalSupply\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(balances[_from] >= _value);                                      // Check if the targeted balance is enough\n', '            require(_value <= allowed[_from][msg.sender]);                          // Check allowance\n', '            balances[_from] =  balances[_from].sub(_value);                         // Subtract from the targeted balance\n', '            allowed[_from][msg.sender] =   allowed[_from][msg.sender].sub(_value);   // Subtract from the sender&#39;s allowance\n', '            totalSupply = totalSupply.sub(_value);                                      // Update totalSupply\n', '            emit Burn(_from, _value);\n', '            return true;\n', '        }\n', '\n', '\n', '}\n', '\n', '\n', 'contract BexProContract is TokenERC20Standart{\n', '    \n', '    using SafeMath for uint256;\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    constructor () public {\n', '        name = "BEXPRO";                        // Set the name for display purposes\n', '        decimals = 18;                          // Amount of decimals for display purposes\n', '        symbol = "BPRO";                        // Set the symbol for display purposes\n', '        owner = msg.sender;                     // Set contract owner\n', '        version = "1";                         // Set contract version \n', '        totalSupply = 502000000 * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply; // Give the creator all initial tokens\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '    \n', '     function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               \n', '        require (balances[_from] >= _value);               \n', '        require (balances[_to] + _value >= balances[_to]); \n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);                       \n', '        balances[_from] = balances[_from].sub(_value);                        \n', '        balances[_to] = balances[_to].add(_value);                           \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        super._transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);  \n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function () public payable {\n', '        revert();\n', '    }\n', '   \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor () public {\n', '            owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', ' \n', ' \n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', ' \n', 'contract TokenERC20 {\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    \n', '    function transfer(address to, uint value) public  returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public  returns (bool ok);\n', '    \n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    \n', '    function burn(uint256 _value) public returns (bool success);\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '} \n', '\n', 'contract TokenERC20Standart is TokenERC20, Pausable{\n', '    \n', '        using SafeMath for uint256;\n', '        \n', '        string public name;                         // token name\n', '        uint256 public decimals;                    // Amount of decimals for display purposes \n', '        string public symbol;                       // symbol token\n', '        string public version;                      // contract version \n', '        uint256 public totalSupply; \n', '            \n', '        // create array with all blances    \n', '        mapping(address => uint) public balances;\n', '        mapping(address => mapping(address => uint)) public allowed;\n', '        \n', '        /**\n', '        * @dev Fix for the ERC20 short address attack.\n', '        */\n', '        modifier onlyPayloadSize(uint size) {\n', '            require(msg.data.length >= size + 4) ;\n', '            _;\n', '        }\n', '            \n', '       \n', '        function balanceOf(address tokenOwner) public constant whenNotPaused  returns (uint balance) {\n', '             return balances[tokenOwner];\n', '        }\n', ' \n', '        function transfer(address to, uint256 tokens) public  whenNotPaused onlyPayloadSize(2*32) returns (bool success) {\n', '            _transfer(msg.sender, to, tokens);\n', '            return true;\n', '        }\n', ' \n', '\n', '        function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\n', '            allowed[msg.sender][spender] = tokens;\n', '            emit Approval(msg.sender, spender, tokens);\n', '            return true;\n', '        }\n', ' \n', '        function transferFrom(address from, address to, uint tokens) public whenNotPaused onlyPayloadSize(3*32) returns (bool success) {\n', '            balances[from] = balances[from].sub(tokens);\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '\n', '        function allowance(address tokenOwner, address spender) public  whenNotPaused constant returns (uint remaining) {\n', '            return allowed[tokenOwner][spender];\n', '        }\n', '\n', '        function sell(address _recipient, uint256 _value) internal whenNotPaused returns (bool success) {\n', '            _transfer (owner, _recipient, _value);\n', '            return true;\n', '        }\n', '        \n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            assert(_value > 0);\n', '            require (_to != 0x0);                              \n', '            require (balances[_from] >= _value);               \n', '            require (balances[_to] + _value >= balances[_to]);\n', '            balances[_from] = balances[_from].sub(_value);                        \n', '            balances[_to] = balances[_to].add(_value);                           \n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(balances[msg.sender] >= _value);                             // Check if the sender has enough\n', '            balances[msg.sender] =  balances[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                              // Updates totalSupply\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(balances[_from] >= _value);                                      // Check if the targeted balance is enough\n', '            require(_value <= allowed[_from][msg.sender]);                          // Check allowance\n', '            balances[_from] =  balances[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowed[_from][msg.sender] =   allowed[_from][msg.sender].sub(_value);   // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                                      // Update totalSupply\n', '            emit Burn(_from, _value);\n', '            return true;\n', '        }\n', '\n', '\n', '}\n', '\n', '\n', 'contract BexProContract is TokenERC20Standart{\n', '    \n', '    using SafeMath for uint256;\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    constructor () public {\n', '        name = "BEXPRO";                        // Set the name for display purposes\n', '        decimals = 18;                          // Amount of decimals for display purposes\n', '        symbol = "BPRO";                        // Set the symbol for display purposes\n', '        owner = msg.sender;                     // Set contract owner\n', '        version = "1";                         // Set contract version \n', '        totalSupply = 502000000 * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply; // Give the creator all initial tokens\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '    \n', '     function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               \n', '        require (balances[_from] >= _value);               \n', '        require (balances[_to] + _value >= balances[_to]); \n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);                       \n', '        balances[_from] = balances[_from].sub(_value);                        \n', '        balances[_to] = balances[_to].add(_value);                           \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        super._transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);  \n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function () public payable {\n', '        revert();\n', '    }\n', '   \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '}']
