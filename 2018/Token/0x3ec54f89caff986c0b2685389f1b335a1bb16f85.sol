['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Interface\n', ' * @dev Standard version of ERC20 interface\n', ' */\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner`\n', '     * of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the current owner\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner\n', '     * @param newOwner The address to transfer ownership to\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title RHEM\n', ' * @dev Implemantation of the RHEM token\n', ' */\n', 'contract RHEM is Ownable, ERC20Interface {\n', '    string public constant symbol = "RHEM";\n', '    string public constant name = "RHEM";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public _unmintedTokens = 3000000000000*uint(10)**decimals;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed sender, uint256 value);\n', '    event Mint(address indexed sender, uint256 value);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query the the balance of\n', '     * @return An uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return (balances[_owner]);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        assert(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        assert(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[_from] = balances[_from] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender\n', '     * @param _spender The address which will spend the funds\n', '     * @param _value The amount of tokens to be spent\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens than an owner allowed to a spender\n', '     * @param _owner The address which owns the funds\n', '     * @param _spender The address which will spend the funds\n', '     * @return A uint specifing the amount of tokens still avaible for the spender\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Mint RHEM tokens. No more than 3,000,000,000,000 RHEM can be minted\n', '     * @param _target The address to which new tokens will be minted\n', '     * @param _mintedAmount The amout of tokens to be minted\n', '     */\n', '    function mint(address _target, uint256 _mintedAmount) public onlyOwner returns (bool success) {\n', '        require(_mintedAmount <= _unmintedTokens);\n', '        balances[_target] += _mintedAmount;\n', '        _unmintedTokens -= _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        emit Mint(_target, _mintedAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint RHEM tokens and aproves the passed address to spend the minted amount of tokens\n', '     * No more than 3,000,000,000,000 RHEM can be minted\n', '     * @param _target The address to which new tokens will be minted\n', '     * @param _mintedAmount The amout of tokens to be minted\n', '     * @param _spender The address which will spend minted funds\n', '     */\n', '    function mintWithApproval(address _target, uint256 _mintedAmount, address _spender) public onlyOwner returns (bool success) {\n', '        require(_mintedAmount <= _unmintedTokens);\n', '        balances[_target] += _mintedAmount;\n', '        _unmintedTokens -= _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        allowed[_target][_spender] += _mintedAmount;\n', '        emit Mint(_target, _mintedAmount);\n', '        emit Approval(_target, _spender, _mintedAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev function that burns an amount of the token of the sender\n', '     * @param _amount The amount that will be burnt.\n', '     */\n', '    function burn(uint256 _amount) public returns (uint256 balance) {\n', '        require(msg.sender != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        totalSupply = totalSupply - _amount;\n', '        balances[msg.sender] = balances[msg.sender] - _amount;\n', '\n', '        emit Burn(msg.sender, _amount);\n', '\n', '        return balances[msg.sender];\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease amount of RHEM tokens that can be minted\n', '     * @param _burnedAmount The amount of unminted tokens to be burned\n', '     */\n', '    function deductFromUnminted(uint256 _burnedAmount) public onlyOwner returns (bool success) {\n', '        require(_burnedAmount <= _unmintedTokens);\n', '        _unmintedTokens -= _burnedAmount;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add to unminted\n', '     * @param _value The amount to be add\n', '     */\n', '    function addToUnminted(uint256 _value) public onlyOwner returns (uint256 unmintedTokens) {\n', '        require(_unmintedTokens + _value > _unmintedTokens);\n', '        _unmintedTokens += _value;\n', '\n', '        return _unmintedTokens;\n', '    }\n', '}']