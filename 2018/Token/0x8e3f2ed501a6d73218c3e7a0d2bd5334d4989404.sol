['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    /* Public variables of the token */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    \n', '    struct locked_balances_info{\n', '        uint amount;\n', '        uint time;\n', '    }\n', '    mapping(address => locked_balances_info[]) public lockedBalanceOf;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event TransferAndLock(address indexed from, address indexed to, uint256 value, uint256 time);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits; \n', '        owner = msg.sender;                                 // Amount of decimals for display purposes\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        \n', '    if(balanceOf[_from] < _value) {\n', '            uint length = lockedBalanceOf[_from].length;\n', '            uint index = 0;\n', '            if(length > 0){\n', '                    for (uint i = 0; i < length; i++) {\n', '                        if(now > lockedBalanceOf[_from][i].time){\n', '                                balanceOf[_from] += lockedBalanceOf[_from][i].amount;\n', '                                index++;\n', '                        }else{\n', '                                break;\n', '                        }\n', '                    }\n', '                    if(index == length){\n', '                        delete lockedBalanceOf[_from];\n', '                    } else {\n', '                        for (uint j = 0; j < length - index; j++) {\n', '                                lockedBalanceOf[_from][j] = lockedBalanceOf[_from][j + index];\n', '                        }\n', '                        lockedBalanceOf[_from].length = length - index;\n', '                        index = lockedBalanceOf[_from].length;\n', '                    }\n', '            }\n', '    }\n', '\n', '        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256 balance){\n', '        balance = balanceOf[_owner];\n', '        uint length = lockedBalanceOf[_owner].length;\n', '        for (uint i = 0; i < length; i++) {\n', '            balance += lockedBalanceOf[_owner][i].amount;\n', '        }\n', '    }\n', '    \n', '     function balanceOfOld(address _owner) constant public returns (uint256 balance) {\n', '        balance = balanceOf[_owner];\n', '    }\n', '    \n', '    function _transferAndLock(address _from, address _to, uint _value, uint _time) internal {\n', '        require (_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '     \n', '        lockedBalanceOf[_to].push(locked_balances_info(_value, _time));\n', '        TransferAndLock(_from, _to, _value, _time);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from your account\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferAndLock(address _to, uint256 _value, uint _time) public {\n', '        _transferAndLock(msg.sender, _to, _value, _time + now);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_value < allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    /// @param _extraData some extra information to send to the approved contract\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    /* Public variables of the token */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    \n', '    struct locked_balances_info{\n', '        uint amount;\n', '        uint time;\n', '    }\n', '    mapping(address => locked_balances_info[]) public lockedBalanceOf;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event TransferAndLock(address indexed from, address indexed to, uint256 value, uint256 time);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits; \n', '        owner = msg.sender;                                 // Amount of decimals for display purposes\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        \n', '    if(balanceOf[_from] < _value) {\n', '            uint length = lockedBalanceOf[_from].length;\n', '            uint index = 0;\n', '            if(length > 0){\n', '                    for (uint i = 0; i < length; i++) {\n', '                        if(now > lockedBalanceOf[_from][i].time){\n', '                                balanceOf[_from] += lockedBalanceOf[_from][i].amount;\n', '                                index++;\n', '                        }else{\n', '                                break;\n', '                        }\n', '                    }\n', '                    if(index == length){\n', '                        delete lockedBalanceOf[_from];\n', '                    } else {\n', '                        for (uint j = 0; j < length - index; j++) {\n', '                                lockedBalanceOf[_from][j] = lockedBalanceOf[_from][j + index];\n', '                        }\n', '                        lockedBalanceOf[_from].length = length - index;\n', '                        index = lockedBalanceOf[_from].length;\n', '                    }\n', '            }\n', '    }\n', '\n', '        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256 balance){\n', '        balance = balanceOf[_owner];\n', '        uint length = lockedBalanceOf[_owner].length;\n', '        for (uint i = 0; i < length; i++) {\n', '            balance += lockedBalanceOf[_owner][i].amount;\n', '        }\n', '    }\n', '    \n', '     function balanceOfOld(address _owner) constant public returns (uint256 balance) {\n', '        balance = balanceOf[_owner];\n', '    }\n', '    \n', '    function _transferAndLock(address _from, address _to, uint _value, uint _time) internal {\n', '        require (_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '     \n', '        lockedBalanceOf[_to].push(locked_balances_info(_value, _time));\n', '        TransferAndLock(_from, _to, _value, _time);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from your account\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferAndLock(address _to, uint256 _value, uint _time) public {\n', '        _transferAndLock(msg.sender, _to, _value, _time + now);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_value < allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    /// @param _extraData some extra information to send to the approved contract\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '}']
