['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error.\n', ' */\n', 'library SafeMath {\n', '    // Multiplies two numbers, throws on overflow./\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) return 0;\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    // Integer division of two numbers, truncating the quotient.\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '    // Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    // Adds two numbers, throws on overflow.\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title CMR_Mining distribution-contract (C 25 / M 25 / R 50)\n', ' */\n', 'contract CMR_Mining {\n', '    using SafeMath for uint256;\n', '    \n', '    // -------------------------------------------------------------------------\n', '    // Variables\n', '    // -------------------------------------------------------------------------\n', '    \n', '    struct Member {\n', '        uint256 share;                               // Percent of mining profits\n', '        uint256 unpaid;                              // Available Wei for withdrawal, + 1 in storage for gas optimization\n', '    }                                              \n', "    mapping (address => Member) private members;     // All contract members as 'Member'-struct\n", '    \n', '    uint16    public memberCount;                   // Count of all members\n', '    address[] public memberIndex;                   // Lookuptable of all member addresses to iterate on deposit over and assign unpaid Ether to members\n', '    \n', '    \n', '    // -------------------------------------------------------------------------\n', '    // Private functions, can only be called by this contract\n', '    // -------------------------------------------------------------------------\n', '    \n', '    function _addMember (address _member, uint256 _share) private {\n', '        emit AddMember(_member, _share);\n', '        members[_member].share = _share;\n', '        members[_member].unpaid = 1;\n', '        memberIndex.push(_member);\n', '        memberCount++;\n', '    }\n', '    \n', '    \n', '    // -------------------------------------------------------------------------\n', '    // Constructor\n', '    // -------------------------------------------------------------------------\n', '    \n', '    constructor () public {\n', "        // Initialize members with their share (total 100) and trigger 'AddMember'-event\n", '        _addMember(0xd2Ce719a0d00f4f8751297aD61B0E936970282E1, 50);\n', '        _addMember(0xE517CB63e4dD36533C26b1ffF5deB893E63c3afA, 25);\n', '        _addMember(0x430e1dd1ab2E68F201B53056EF25B9e116979D9b, 25);\n', '    }\n', '    \n', '    \n', '    // -------------------------------------------------------------------------\n', '    // Events\n', '    // -------------------------------------------------------------------------\n', '    \n', '    event AddMember(address indexed member, uint256 share);\n', '    event Withdraw(address indexed member, uint256 value);\n', '    event Deposit(address indexed from, uint256 value);\n', '    \n', '    \n', '    // -------------------------------------------------------------------------\n', '    // Public external interface\n', '    // -------------------------------------------------------------------------\n', '    \n', '    function () external payable {\n', '        // Distribute deposited Ether to all members related to their profit-share\n', '        for (uint i=0; i<memberIndex.length; i++) {\n', '            members[memberIndex[i]].unpaid = \n', '                // Adding current deposit to members unpaid Wei amount\n', '                members[memberIndex[i]].unpaid.add(\n', '                    // MemberShare * DepositedWei / 100 = WeiAmount of member-share to be added to members unpaid holdings\n', '                    members[memberIndex[i]].share.mul(msg.value).div(100)\n', '                );\n', '        }\n', '        \n', "        // Trigger 'Deposit'-event\n", '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    \n', '    function withdraw () external { \n', '        // Pre-validate withdrawal\n', '        require(members[msg.sender].unpaid > 1, "No unpaid balance or not a member account");\n', '        \n', '        // Remember members unpaid amount but remove it from his contract holdings before initiating the withdrawal for security reasons\n', '        uint256 unpaid = members[msg.sender].unpaid.sub(1);\n', '        members[msg.sender].unpaid = 1;\n', '        \n', "        // Trigger 'Withdraw'-event\n", '        emit Withdraw(msg.sender, unpaid);\n', '        \n', '        // Transfer the unpaid Wei amount to member address\n', '        msg.sender.transfer(unpaid);\n', '    }\n', '    \n', '    function shareOf (address _member) public view returns (uint256) {\n', '        // Get share percentage of member\n', '        return members[_member].share;\n', '    }\n', '    \n', '    function unpaidOf (address _member) public view returns (uint256) {\n', '        // Get unpaid Wei amount of member\n', '        return members[_member].unpaid.sub(1);\n', '    }\n', '    \n', '    \n', '}']