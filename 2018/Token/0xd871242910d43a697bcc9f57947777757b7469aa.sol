['pragma solidity ^0.4.15;\n', '\n', '// File: contracts\\infrastructure\\ITokenRetreiver.sol\n', '\n', '/**\n', ' * @title Token retrieve interface\n', ' *\n', ' * Allows tokens to be retrieved from a contract\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ITokenRetreiver {\n', '\n', '    /**\n', '     * Extracts tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retreiveTokens(address _tokenContract);\n', '}\n', '\n', '// File: contracts\\source\\token\\IToken.sol\n', '\n', '/**\n', ' * @title ERC20 compatible token interface\n', ' *\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', ' * - Short address attack fix\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract IToken {\n', '\n', '    /**\n', '     * Get the total supply of tokens\n', '     *\n', '     * @return The total supply\n', '     */\n', '    function totalSupply() constant returns (uint);\n', '\n', '\n', '    /**\n', '     * Get balance of `_owner`\n', '     *\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint);\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) returns (bool);\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '\n', '\n', '    /**\n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint _value) returns (bool);\n', '\n', '\n', '    /**\n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     *\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '}\n', '\n', '// File: contracts\\infrastructure\\ownership\\ITransferableOwnership.sol\n', '\n', 'contract ITransferableOwnership {\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner\n', '     */\n', '    function transferOwnership(address _newOwner);\n', '}\n', '\n', '// File: contracts\\infrastructure\\modifier\\Owned.sol\n', '\n', 'contract Owned {\n', '\n', '    // The address of the account that is the current owner\n', '    address internal owner;\n', '\n', '\n', '    /**\n', '     * The publisher is the inital owner\n', '     */\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier only_owner() {\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\infrastructure\\ownership\\IOwnership.sol\n', '\n', 'contract IOwnership {\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) constant returns (bool);\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() constant returns (address);\n', '}\n', '\n', '// File: contracts\\infrastructure\\ownership\\Ownership.sol\n', '\n', 'contract Ownership is IOwnership, Owned {\n', '\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public constant returns (bool) {\n', '        return _account == owner;\n', '    }\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public constant returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', '// File: contracts\\infrastructure\\ownership\\TransferableOwnership.sol\n', '\n', 'contract TransferableOwnership is ITransferableOwnership, Ownership {\n', '\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner\n', '     */\n', '    function transferOwnership(address _newOwner) public only_owner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\source\\token\\IManagedToken.sol\n', '\n', '/**\n', ' * @title ManagedToken interface\n', ' *\n', ' * Adds the following functionallity to the basic ERC20 token\n', ' * - Locking\n', ' * - Issuing\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract IManagedToken is IToken {\n', '\n', '    /**\n', '     * Returns true if the token is locked\n', '     *\n', '     * @return Whether the token is locked\n', '     */\n', '    function isLocked() constant returns (bool);\n', '\n', '\n', '    /**\n', '     * Unlocks the token so that the transferring of value is enabled\n', '     *\n', '     * @return Whether the unlocking was successful or not\n', '     */\n', '    function unlock() returns (bool);\n', '\n', '\n', '    /**\n', '     * Issues `_value` new tokens to `_to`\n', '     *\n', '     * @param _to The address to which the tokens will be issued\n', '     * @param _value The amount of new tokens to issue\n', '     * @return Whether the tokens where sucessfully issued or not\n', '     */\n', '    function issue(address _to, uint _value) returns (bool);\n', '}\n', '\n', '// File: contracts\\infrastructure\\modifier\\InputValidator.sol\n', '\n', 'contract InputValidator {\n', '\n', '\n', '    /**\n', '     * ERC20 Short Address Attack fix\n', '     */\n', '    modifier safe_arguments(uint _numArgs) {\n', '        assert(msg.data.length == _numArgs * 32 + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\source\\token\\Token.sol\n', '\n', '/**\n', ' * @title ERC20 compatible token\n', ' *\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', ' * - Short address attack fix\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Token is IToken, InputValidator {\n', '\n', '    // Ethereum token standard\n', '    string public standard = "Token 0.3";\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '\n', '    // Token state\n', '    uint internal totalTokenSupply;\n', '\n', '    // Token balances\n', '    mapping (address => uint) internal balances;\n', '\n', '    // Token allowances\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    /**\n', '     * Construct\n', '     *\n', '     * @param _name The full token name\n', '     * @param _symbol The token symbol (aberration)\n', '     */\n', '    function Token(string _name, string _symbol) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        balances[msg.sender] = 0;\n', '        totalTokenSupply = 0;\n', '    }\n', '\n', '\n', '    /**\n', '     * Get the total token supply\n', '     *\n', '     * @return The total supply\n', '     */\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalTokenSupply;\n', '    }\n', '\n', '\n', '    /**\n', '     * Get balance of `_owner`\n', '     *\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public safe_arguments(2) returns (bool) {\n', '\n', '        // Check if the sender has enough tokens\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        // Transfer tokens\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        // Notify listeners\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public safe_arguments(3) returns (bool) {\n', '\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        // Check allowance\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        // Transfer tokens\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        // Update allowance\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        // Notify listeners\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint _value) public safe_arguments(2) returns (bool) {\n', '\n', '        // Update allowance\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        // Notify listeners\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     *\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// File: contracts\\source\\token\\ManagedToken.sol\n', '\n', '/**\n', ' * @title ManagedToken\n', ' *\n', ' * Adds the following functionallity to the basic ERC20 token\n', ' * - Locking\n', ' * - Issuing\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ManagedToken is IManagedToken, Token, TransferableOwnership {\n', '\n', '    // Token state\n', '    bool internal locked;\n', '\n', '\n', '    /**\n', '     * Allow access only when not locked\n', '     */\n', '    modifier only_when_unlocked() {\n', '        require(!locked);\n', '\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * Construct\n', '     *\n', '     * @param _name The full token name\n', '     * @param _symbol The token symbol (aberration)\n', '     * @param _locked Whether the token should be locked initially\n', '     */\n', '    function ManagedToken(string _name, string _symbol, bool _locked) Token(_name, _symbol) {\n', '        locked = _locked;\n', '    }\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public only_when_unlocked returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public only_when_unlocked returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns true if the token is locked\n', '     *\n', '     * @return Wheter the token is locked\n', '     */\n', '    function isLocked() public constant returns (bool) {\n', '        return locked;\n', '    }\n', '\n', '\n', '    /**\n', '     * Unlocks the token so that the transferring of value is enabled\n', '     *\n', '     * @return Whether the unlocking was successful or not\n', '     */\n', '    function unlock() public only_owner returns (bool)  {\n', '        locked = false;\n', '        return !locked;\n', '    }\n', '\n', '\n', '    /**\n', '     * Issues `_value` new tokens to `_to`\n', '     *\n', '     * @param _to The address to which the tokens will be issued\n', '     * @param _value The amount of new tokens to issue\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function issue(address _to, uint _value) public only_owner safe_arguments(2) returns (bool) {\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        // Create tokens\n', '        balances[_to] += _value;\n', '        totalTokenSupply += _value;\n', '\n', '        // Notify listeners\n', '        Transfer(0, this, _value);\n', '        Transfer(this, _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\source\\NUToken.sol\n', '\n', '/**\n', ' * @title NU (NU) token\n', ' *\n', ' * #created 22/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract NUToken is ManagedToken, ITokenRetreiver {\n', '\n', '\n', '    /**\n', '     * Starts with a total supply of zero and the creator starts with\n', '     * zero tokens (just like everyone else)\n', '     */\n', '    function NUToken() ManagedToken("NU", "NU", true) {}\n', '\n', '\n', '    /**\n', '     * Failsafe mechanism\n', '     *\n', '     * Allows owner to retreive tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retreiveTokens(address _tokenContract) public only_owner {\n', '        IToken tokenInstance = IToken(_tokenContract);\n', '        uint tokenBalance = tokenInstance.balanceOf(this);\n', '        if (tokenBalance > 0) {\n', '            tokenInstance.transfer(owner, tokenBalance);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Prevents accidental sending of ether\n', '     */\n', '    function () payable {\n', '        revert();\n', '    }\n', '}']