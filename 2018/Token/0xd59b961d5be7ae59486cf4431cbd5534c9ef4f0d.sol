['pragma solidity ^0.4.12;\n', '\n', '\n', '//Compiler Version:\tv0.4.12+commit.194ff033\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract TTCoin is SafeMath,owned{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals=8;\n', '    uint256 public totalSupply;\n', '    uint256 public soldToken;\n', '\t//address public owner;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '    \n', '  \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function TTCoin(\n', '        \n', '        ) {\n', '                    // Give the creator all initial tokens\n', '        \n', '        totalSupply = 10000000000 *10**uint256(decimals);                        // Update total supply\n', '        balanceOf[msg.sender] = totalSupply; \n', '        name = "TongTong Coin";                                   // Set the name for display purposes\n', '        symbol = "TTCoin";                               // Set the symbol for display purposes\n', '                                  // Amount of decimals for display purposes\n', '\t\tsoldToken=0;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\tif (_value <= 0) throw; \n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();// Check for overflows\n', '       \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        soldToken+=_value;\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '\t\tif (_value <= 0) throw; \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\tif (_value <= 0) throw; \n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        soldToken +=_value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(address _freeze,uint256 _value) onlyOwner returns (bool success) {\n', '        if (balanceOf[_freeze] < _value) throw;            // Check if the sender has enough\n', '\t    if (_value <= 0) throw; \n', '        balanceOf[_freeze] = SafeMath.safeSub(balanceOf[_freeze], _value);                      // Subtract from the sender\n', '        freezeOf[_freeze] = SafeMath.safeAdd(freezeOf[_freeze], _value);                                // Updates totalSupply\n', '        Freeze(_freeze, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(address _unfreeze,uint256 _value) onlyOwner returns (bool success) {\n', '        if (freezeOf[_unfreeze] < _value) throw;            // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        freezeOf[_unfreeze] = SafeMath.safeSub(freezeOf[_unfreeze], _value);                      // Subtract from the sender\n', '\t\tbalanceOf[_unfreeze] = SafeMath.safeAdd(balanceOf[_unfreeze], _value);\n', '        Unfreeze(_unfreeze, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '     function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\t\n', '\t\n', '\n', '\t\n', '// can accept ether\n', '\tfunction() payable {\n', '    }\n', '}']
['pragma solidity ^0.4.12;\n', '\n', '\n', '//Compiler Version:\tv0.4.12+commit.194ff033\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract TTCoin is SafeMath,owned{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals=8;\n', '    uint256 public totalSupply;\n', '    uint256 public soldToken;\n', '\t//address public owner;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '    \n', '  \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function TTCoin(\n', '        \n', '        ) {\n', '                    // Give the creator all initial tokens\n', '        \n', '        totalSupply = 10000000000 *10**uint256(decimals);                        // Update total supply\n', '        balanceOf[msg.sender] = totalSupply; \n', '        name = "TongTong Coin";                                   // Set the name for display purposes\n', '        symbol = "TTCoin";                               // Set the symbol for display purposes\n', '                                  // Amount of decimals for display purposes\n', '\t\tsoldToken=0;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\tif (_value <= 0) throw; \n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();// Check for overflows\n', '       \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        soldToken+=_value;\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '\t\tif (_value <= 0) throw; \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\tif (_value <= 0) throw; \n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        soldToken +=_value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(address _freeze,uint256 _value) onlyOwner returns (bool success) {\n', '        if (balanceOf[_freeze] < _value) throw;            // Check if the sender has enough\n', '\t    if (_value <= 0) throw; \n', '        balanceOf[_freeze] = SafeMath.safeSub(balanceOf[_freeze], _value);                      // Subtract from the sender\n', '        freezeOf[_freeze] = SafeMath.safeAdd(freezeOf[_freeze], _value);                                // Updates totalSupply\n', '        Freeze(_freeze, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(address _unfreeze,uint256 _value) onlyOwner returns (bool success) {\n', '        if (freezeOf[_unfreeze] < _value) throw;            // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        freezeOf[_unfreeze] = SafeMath.safeSub(freezeOf[_unfreeze], _value);                      // Subtract from the sender\n', '\t\tbalanceOf[_unfreeze] = SafeMath.safeAdd(balanceOf[_unfreeze], _value);\n', '        Unfreeze(_unfreeze, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '     function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\t\n', '\t\n', '\n', '\t\n', '// can accept ether\n', '\tfunction() payable {\n', '    }\n', '}']
