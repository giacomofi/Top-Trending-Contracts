['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', ' \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public {\n', '    require(_value > 0);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', ' \n', '  event Burn(address indexed burner, uint indexed value);\n', ' \n', '}\n', '\n', '/**\n', ' * @title WTF Token Network Token\n', ' * @dev ERC20 WTF Token Network Token (WTF)\n', ' *\n', ' * WTF Tokens are divisible by 1e8 (100,000,000) base\n', ' * units referred to as &#39;Grains&#39;.\n', ' *\n', ' * WTF are displayed using 8 decimal places of precision.\n', ' *\n', ' * 1 WTF is equivalent to:\n', ' *   100000000 == 1 * 10**8 == 1e8 == One Hundred Million Grains\n', ' *\n', ' * 10 Million WTF (total supply) is equivalent to:\n', ' *   1000000000000000 == 10000000 * 10**8 == 1e15 == One Quadrillion Grains\n', ' *\n', ' * All initial WTF Grains are assigned to the creator of\n', ' * this contract.\n', ' *\n', ' */\n', 'contract WTFToken is BurnableToken, Pausable {\n', '\n', '  string public constant name = &#39;WTF Token&#39;;                   // Set the token name for display\n', '  string public constant symbol = &#39;WTF&#39;;                                       // Set the token symbol for display\n', '  uint8 public constant decimals = 8;                                          // Set the number of decimals for display\n', '  uint256 constant INITIAL_SUPPLY = 10000000 * 10**uint256(decimals);          // 10 Million WTF specified in Grains\n', '  uint256 public sellPrice;\n', '  mapping(address => uint256) bonuses;\n', '  uint8 public freezingPercentage;\n', '  uint32 public constant unfreezingTimestamp = 1530403200;                     // 2018, July, 1, 00:00:00 UTC\n', '\n', '  /**\n', '   * @dev WTFToken Constructor\n', '   * Runs only on initial contract creation.\n', '   */\n', '  function WTFToken() {\n', '    totalSupply = INITIAL_SUPPLY;                                              // Set the total supply\n', '    balances[msg.sender] = INITIAL_SUPPLY;                                     // Creator address is assigned all\n', '    sellPrice = 0;\n', '    freezingPercentage = 100;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return super.balanceOf(_owner) - bonuses[_owner] * freezingPercentage / 100;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer token for a specified address when not paused\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens and bonus tokens to a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   * @param _bonus The bonus amount.\n', '   */\n', '  function transferWithBonuses(address _to, uint256 _value, uint256 _bonus) onlyOwner returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value + _bonus);\n', '    bonuses[_to] = bonuses[_to].add(_bonus);\n', '    return super.transfer(_to, _value + _bonus);\n', '  }\n', '\n', '  /**\n', '   * @dev Check the frozen bonus balance\n', '   * @param _owner The address to check the balance of.\n', '   */\n', '  function bonusesOf(address _owner) constant returns (uint256 balance) {\n', '    return bonuses[_owner] * freezingPercentage / 100;\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreezing part of bonus tokens by owner\n', '   * @param _percentage uint8 Percentage of bonus tokens to be left frozen\n', '   */\n', '  function setFreezingPercentage(uint8 _percentage) onlyOwner returns (bool) {\n', '    require(_percentage < freezingPercentage);\n', '    require(now < unfreezingTimestamp);\n', '    freezingPercentage = _percentage;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreeze all bonus tokens\n', '   */\n', '  function unfreezeBonuses() returns (bool) {\n', '    require(now >= unfreezingTimestamp);\n', '    freezingPercentage = 0;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another when not paused\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[_from] - bonuses[_from] * freezingPercentage / 100 >= _value);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', ' /**\n', '  * @dev Gets the purchase price of tokens by contract\n', '  */\n', '  function getPrice() constant returns (uint256 _sellPrice) {\n', '      return sellPrice;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets the purchase price of tokens by contract\n', '  * @param newSellPrice New purchase price\n', '  */\n', '  function setPrice(uint256 newSellPrice) external onlyOwner returns (bool success) {\n', '      require(newSellPrice > 0);\n', '      sellPrice = newSellPrice;\n', '      return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Buying ethereum for tokens\n', '    * @param amount Number of tokens\n', '    */\n', '  function sell(uint256 amount) external returns (uint256 revenue){\n', '      require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= amount);           // Checks if the sender has enough to sell\n', '      balances[this] = balances[this].add(amount);                                                        // Adds the amount to owner&#39;s balance\n', '      balances[msg.sender] = balances[msg.sender].sub(amount);                                            // Subtracts the amount from seller&#39;s balance\n', '      revenue = amount.mul(sellPrice);                                                                    // Calculate the seller reward\n', '      msg.sender.transfer(revenue);                                                                       // Sends ether to the seller: it&#39;s important to do this last to prevent recursion attacks\n', '      Transfer(msg.sender, this, amount);                                                                 // Executes an event reflecting on the change\n', '      return revenue;                                                                                     // Ends function and returns\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to get tokens from the contract\n', '  * @param amount Number of tokens\n', '  */\n', '  function getTokens(uint256 amount) onlyOwner external returns (bool success) {\n', '      require(balances[this] >= amount);\n', '      balances[msg.sender] = balances[msg.sender].add(amount);\n', '      balances[this] = balances[this].sub(amount);\n', '      Transfer(this, msg.sender, amount);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to put Ethereum to the smart contract\n', '  */\n', '  function sendEther() payable onlyOwner external returns (bool success) {\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to get ethereum from the contract\n', '  * @param amount Number of tokens\n', '  */\n', '  function getEther(uint256 amount) onlyOwner external returns (bool success) {\n', '      require(amount > 0);\n', '      msg.sender.transfer(amount);\n', '      return true;\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', ' \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public {\n', '    require(_value > 0);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', ' \n', '  event Burn(address indexed burner, uint indexed value);\n', ' \n', '}\n', '\n', '/**\n', ' * @title WTF Token Network Token\n', ' * @dev ERC20 WTF Token Network Token (WTF)\n', ' *\n', ' * WTF Tokens are divisible by 1e8 (100,000,000) base\n', " * units referred to as 'Grains'.\n", ' *\n', ' * WTF are displayed using 8 decimal places of precision.\n', ' *\n', ' * 1 WTF is equivalent to:\n', ' *   100000000 == 1 * 10**8 == 1e8 == One Hundred Million Grains\n', ' *\n', ' * 10 Million WTF (total supply) is equivalent to:\n', ' *   1000000000000000 == 10000000 * 10**8 == 1e15 == One Quadrillion Grains\n', ' *\n', ' * All initial WTF Grains are assigned to the creator of\n', ' * this contract.\n', ' *\n', ' */\n', 'contract WTFToken is BurnableToken, Pausable {\n', '\n', "  string public constant name = 'WTF Token';                   // Set the token name for display\n", "  string public constant symbol = 'WTF';                                       // Set the token symbol for display\n", '  uint8 public constant decimals = 8;                                          // Set the number of decimals for display\n', '  uint256 constant INITIAL_SUPPLY = 10000000 * 10**uint256(decimals);          // 10 Million WTF specified in Grains\n', '  uint256 public sellPrice;\n', '  mapping(address => uint256) bonuses;\n', '  uint8 public freezingPercentage;\n', '  uint32 public constant unfreezingTimestamp = 1530403200;                     // 2018, July, 1, 00:00:00 UTC\n', '\n', '  /**\n', '   * @dev WTFToken Constructor\n', '   * Runs only on initial contract creation.\n', '   */\n', '  function WTFToken() {\n', '    totalSupply = INITIAL_SUPPLY;                                              // Set the total supply\n', '    balances[msg.sender] = INITIAL_SUPPLY;                                     // Creator address is assigned all\n', '    sellPrice = 0;\n', '    freezingPercentage = 100;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return super.balanceOf(_owner) - bonuses[_owner] * freezingPercentage / 100;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer token for a specified address when not paused\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens and bonus tokens to a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   * @param _bonus The bonus amount.\n', '   */\n', '  function transferWithBonuses(address _to, uint256 _value, uint256 _bonus) onlyOwner returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= _value + _bonus);\n', '    bonuses[_to] = bonuses[_to].add(_bonus);\n', '    return super.transfer(_to, _value + _bonus);\n', '  }\n', '\n', '  /**\n', '   * @dev Check the frozen bonus balance\n', '   * @param _owner The address to check the balance of.\n', '   */\n', '  function bonusesOf(address _owner) constant returns (uint256 balance) {\n', '    return bonuses[_owner] * freezingPercentage / 100;\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreezing part of bonus tokens by owner\n', '   * @param _percentage uint8 Percentage of bonus tokens to be left frozen\n', '   */\n', '  function setFreezingPercentage(uint8 _percentage) onlyOwner returns (bool) {\n', '    require(_percentage < freezingPercentage);\n', '    require(now < unfreezingTimestamp);\n', '    freezingPercentage = _percentage;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Unfreeze all bonus tokens\n', '   */\n', '  function unfreezeBonuses() returns (bool) {\n', '    require(now >= unfreezingTimestamp);\n', '    freezingPercentage = 0;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another when not paused\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(balances[_from] - bonuses[_from] * freezingPercentage / 100 >= _value);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', ' /**\n', '  * @dev Gets the purchase price of tokens by contract\n', '  */\n', '  function getPrice() constant returns (uint256 _sellPrice) {\n', '      return sellPrice;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets the purchase price of tokens by contract\n', '  * @param newSellPrice New purchase price\n', '  */\n', '  function setPrice(uint256 newSellPrice) external onlyOwner returns (bool success) {\n', '      require(newSellPrice > 0);\n', '      sellPrice = newSellPrice;\n', '      return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Buying ethereum for tokens\n', '    * @param amount Number of tokens\n', '    */\n', '  function sell(uint256 amount) external returns (uint256 revenue){\n', '      require(balances[msg.sender] - bonuses[msg.sender] * freezingPercentage / 100 >= amount);           // Checks if the sender has enough to sell\n', "      balances[this] = balances[this].add(amount);                                                        // Adds the amount to owner's balance\n", "      balances[msg.sender] = balances[msg.sender].sub(amount);                                            // Subtracts the amount from seller's balance\n", '      revenue = amount.mul(sellPrice);                                                                    // Calculate the seller reward\n', "      msg.sender.transfer(revenue);                                                                       // Sends ether to the seller: it's important to do this last to prevent recursion attacks\n", '      Transfer(msg.sender, this, amount);                                                                 // Executes an event reflecting on the change\n', '      return revenue;                                                                                     // Ends function and returns\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to get tokens from the contract\n', '  * @param amount Number of tokens\n', '  */\n', '  function getTokens(uint256 amount) onlyOwner external returns (bool success) {\n', '      require(balances[this] >= amount);\n', '      balances[msg.sender] = balances[msg.sender].add(amount);\n', '      balances[this] = balances[this].sub(amount);\n', '      Transfer(this, msg.sender, amount);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to put Ethereum to the smart contract\n', '  */\n', '  function sendEther() payable onlyOwner external returns (bool success) {\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows you to get ethereum from the contract\n', '  * @param amount Number of tokens\n', '  */\n', '  function getEther(uint256 amount) onlyOwner external returns (bool success) {\n', '      require(amount > 0);\n', '      msg.sender.transfer(amount);\n', '      return true;\n', '  }\n', '}']
