['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @title   Token\n', '/// @author  Jose Perez - <jose.perez@diginex.com>\n', '/// @notice  ERC20 token\n', '/// @dev     The contract allows to perform a number of token sales in different periods in time.\n', '///          allowing participants in previous token sales to transfer tokens to other accounts.\n', '///          Additionally, token locking logic for KYC/AML compliance checking is supported.\n', '\n', 'contract Token is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Token";\n', '    string public constant symbol = "TOK";\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Using same number of decimal figures as ETH (i.e. 18).\n', '    uint256 public constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '\n', '    // Maximum number of tokens in circulation\n', '    uint256 public constant MAX_TOKEN_SUPPLY = 3000000000 * TOKEN_UNIT;\n', '\n', '    // Maximum number of tokens sales to be performed.\n', '    uint256 public constant MAX_TOKEN_SALES = 2;\n', '\n', '    // Maximum size of the batch functions input arrays.\n', '    uint256 public constant MAX_BATCH_SIZE = 400;\n', '\n', '    address public assigner;    // The address allowed to assign or mint tokens during token sale.\n', '    address public locker;      // The address allowed to lock/unlock addresses.\n', '\n', "    mapping(address => bool) public locked;        // If true, address' tokens cannot be transferred.\n", '\n', '    uint256 public currentTokenSaleId = 0;           // The id of the current token sale.\n', '    mapping(address => uint256) public tokenSaleId;  // In which token sale the address participated.\n', '\n', '    bool public tokenSaleOngoing = false;\n', '\n', '    event TokenSaleStarting(uint indexed tokenSaleId);\n', '    event TokenSaleEnding(uint indexed tokenSaleId);\n', '    event Lock(address indexed addr);\n', '    event Unlock(address indexed addr);\n', '    event Assign(address indexed to, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\n', '    event AssignerTransferred(address indexed previousAssigner, address indexed newAssigner);\n', '\n', '    /// @dev Constructor that initializes the contract.\n', '    /// @param _assigner The assigner account.\n', '    /// @param _locker The locker account.\n', '    constructor(address _assigner, address _locker) public {\n', '        require(_assigner != address(0));\n', '        require(_locker != address(0));\n', '\n', '        assigner = _assigner;\n', '        locker = _locker;\n', '    }\n', '\n', '    /// @dev True if a token sale is ongoing.\n', '    modifier tokenSaleIsOngoing() {\n', '        require(tokenSaleOngoing);\n', '        _;\n', '    }\n', '\n', '    /// @dev True if a token sale is not ongoing.\n', '    modifier tokenSaleIsNotOngoing() {\n', '        require(!tokenSaleOngoing);\n', '        _;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the assigner.\n', '    modifier onlyAssigner() {\n', '        require(msg.sender == assigner);\n', '        _;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the locker.\n', '    modifier onlyLocker() {\n', '        require(msg.sender == locker);\n', '        _;\n', '    }\n', '\n', '    /// @dev Starts a new token sale. Only the owner can start a new token sale. If a token sale\n', '    ///      is ongoing, it has to be ended before a new token sale can be started.\n', '    ///      No more than `MAX_TOKEN_SALES` sales can be carried out.\n', '    /// @return True if the operation was successful.\n', '    function tokenSaleStart() external onlyOwner tokenSaleIsNotOngoing returns(bool) {\n', '        require(currentTokenSaleId < MAX_TOKEN_SALES);\n', '        currentTokenSaleId++;\n', '        tokenSaleOngoing = true;\n', '        emit TokenSaleStarting(currentTokenSaleId);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Ends the current token sale. Only the owner can end a token sale.\n', '    /// @return True if the operation was successful.\n', '    function tokenSaleEnd() external onlyOwner tokenSaleIsOngoing returns(bool) {\n', '        emit TokenSaleEnding(currentTokenSaleId);\n', '        tokenSaleOngoing = false;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns whether or not a token sale is ongoing.\n', '    /// @return True if a token sale is ongoing.\n', '    function isTokenSaleOngoing() external view returns(bool) {\n', '        return tokenSaleOngoing;\n', '    }\n', '\n', '    /// @dev Getter of the variable `currentTokenSaleId`.\n', '    /// @return Returns the current token sale id.\n', '    function getCurrentTokenSaleId() external view returns(uint256) {\n', '        return currentTokenSaleId;\n', '    }\n', '\n', '    /// @dev Getter of the variable `tokenSaleId[]`.\n', '    /// @param _address The address of the participant.\n', '    /// @return Returns the id of the token sale the address participated in.\n', '    function getAddressTokenSaleId(address _address) external view returns(uint256) {\n', '        return tokenSaleId[_address];\n', '    }\n', '\n', '    /// @dev Allows the current owner to change the assigner.\n', '    /// @param _newAssigner The address of the new assigner.\n', '    /// @return True if the operation was successful.\n', '    function transferAssigner(address _newAssigner) external onlyOwner returns(bool) {\n', '        require(_newAssigner != address(0));\n', '\n', '        emit AssignerTransferred(assigner, _newAssigner);\n', '        assigner = _newAssigner;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Function to mint tokens. It can only be called by the assigner during an ongoing token sale.\n', '    /// @param _to The address that will receive the minted tokens.\n', '    /// @param _amount The amount of tokens to mint.\n', '    /// @return A boolean that indicates if the operation was successful.\n', '    function mint(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\n', '\n', '        if (tokenSaleId[_to] == 0) {\n', '            tokenSaleId[_to] = currentTokenSaleId;\n', '        }\n', '        require(tokenSaleId[_to] == currentTokenSaleId);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Mints tokens for several addresses in one single call.\n', '    /// @param _to address[] The addresses that get the tokens.\n', '    /// @param _amount address[] The number of tokens to be minted.\n', '    /// @return A boolean that indicates if the operation was successful.\n', '    function mintInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\n', '        require(_to.length > 0);\n', '        require(_to.length == _amount.length);\n', '        require(_to.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            mint(_to[i], _amount[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Function to assign any number of tokens to a given address.\n', '    ///      Compared to the `mint` function, the `assign` function allows not just to increase but also to decrease\n', '    ///      the number of tokens of an address by assigning a lower value than the address current balance.\n', '    ///      This function can only be executed during initial token sale.\n', '    /// @param _to The address that will receive the assigned tokens.\n', '    /// @param _amount The amount of tokens to assign.\n', '    /// @return True if the operation was successful.\n', '    function assign(address _to, uint256 _amount) public onlyAssigner tokenSaleIsOngoing returns(bool) {\n', '        require(currentTokenSaleId == 1);\n', '\n', '        // The desired value to assign (`_amount`) can be either higher or lower than the current number of tokens\n', '        // of the address (`balances[_to]`). To calculate the new `totalSupply_` value, the difference between `_amount`\n', '        // and `balances[_to]` (`delta`) is calculated first, and then added or substracted to `totalSupply_` accordingly.\n', '        uint256 delta = 0;\n', '        if (balances[_to] < _amount) {\n', '            // balances[_to] will be increased, so totalSupply_ should be increased\n', '            delta = _amount.sub(balances[_to]);\n', '            totalSupply_ = totalSupply_.add(delta);\n', '        } else {\n', '            // balances[_to] will be decreased, so totalSupply_ should be decreased\n', '            delta = balances[_to].sub(_amount);\n', '            totalSupply_ = totalSupply_.sub(delta);\n', '        }\n', '        require(totalSupply_ <= MAX_TOKEN_SUPPLY);\n', '\n', '        balances[_to] = _amount;\n', '        tokenSaleId[_to] = currentTokenSaleId;\n', '\n', '        emit Assign(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Assigns tokens to several addresses in one call.\n', '    /// @param _to address[] The addresses that get the tokens.\n', '    /// @param _amount address[] The number of tokens to be assigned.\n', '    /// @return True if the operation was successful.\n', '    function assignInBatches(address[] _to, uint256[] _amount) external onlyAssigner tokenSaleIsOngoing returns(bool) {\n', '        require(_to.length > 0);\n', '        require(_to.length == _amount.length);\n', '        require(_to.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            assign(_to[i], _amount[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows the current owner to change the locker.\n', '    /// @param _newLocker The address of the new locker.\n', '    /// @return True if the operation was successful.\n', '    function transferLocker(address _newLocker) external onlyOwner returns(bool) {\n', '        require(_newLocker != address(0));\n', '\n', '        emit LockerTransferred(locker, _newLocker);\n', '        locker = _newLocker;\n', '        return true;\n', '    }\n', '\n', "    /// @dev Locks an address. A locked address cannot transfer its tokens or other addresses' tokens out.\n", '    ///      Only addresses participating in the current token sale can be locked.\n', '    ///      Only the locker account can lock addresses and only during the token sale.\n', '    /// @param _address address The address to lock.\n', '    /// @return True if the operation was successful.\n', '    function lockAddress(address _address) public onlyLocker tokenSaleIsOngoing returns(bool) {\n', '        require(tokenSaleId[_address] == currentTokenSaleId);\n', '        require(!locked[_address]);\n', '\n', '        locked[_address] = true;\n', '        emit Lock(_address);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Unlocks an address so that its owner can transfer tokens out again.\n', '    ///      Addresses can be unlocked any time. Only the locker account can unlock addresses\n', '    /// @param _address address The address to unlock.\n', '    /// @return True if the operation was successful.\n', '    function unlockAddress(address _address) public onlyLocker returns(bool) {\n', '        require(locked[_address]);\n', '\n', '        locked[_address] = false;\n', '        emit Unlock(_address);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Locks several addresses in one single call.\n', '    /// @param _addresses address[] The addresses to lock.\n', '    /// @return True if the operation was successful.\n', '    function lockInBatches(address[] _addresses) external onlyLocker returns(bool) {\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            lockAddress(_addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Unlocks several addresses in one single call.\n', '    /// @param _addresses address[] The addresses to unlock.\n', '    /// @return True if the operation was successful.\n', '    function unlockInBatches(address[] _addresses) external onlyLocker returns(bool) {\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            unlockAddress(_addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Checks whether or not the given address is locked.\n', '    /// @param _address address The address to be checked.\n', '    /// @return Boolean indicating whether or not the address is locked.\n', '    function isLocked(address _address) external view returns(bool) {\n', '        return locked[_address];\n', '    }\n', '\n', '    /// @dev Transfers tokens to the specified address. It prevents transferring tokens from a locked address.\n', '    ///      Locked addresses can receive tokens.\n', "    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\n", '    /// @param _to The address to transfer tokens to.\n', '    /// @param _value The number of tokens to be transferred.\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(!locked[msg.sender]);\n', '\n', '        if (tokenSaleOngoing) {\n', '            require(tokenSaleId[msg.sender] < currentTokenSaleId);\n', '            require(tokenSaleId[_to] < currentTokenSaleId);\n', '        }\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Transfers tokens from one address to another. It prevents transferring tokens if the caller is locked or\n', '    ///      if the allowed address is locked.\n', '    ///      Locked addresses can receive tokens.\n', "    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\n", '    /// @param _from address The address to transfer tokens from.\n', '    /// @param _to address The address to transfer tokens to.\n', '    /// @param _value The number of tokens to be transferred.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(!locked[msg.sender]);\n', '        require(!locked[_from]);\n', '\n', '        if (tokenSaleOngoing) {\n', '            require(tokenSaleId[msg.sender] < currentTokenSaleId);\n', '            require(tokenSaleId[_from] < currentTokenSaleId);\n', '            require(tokenSaleId[_to] < currentTokenSaleId);\n', '        }\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '/// @title  ExchangeRate\n', '/// @author Jose Perez - <jose.perez@diginex.com>\n', '/// @notice Tamper-proof record of exchange rates e.g. BTC/USD, ETC/USD, etc.\n', '/// @dev    Exchange rates are updated from off-chain server periodically. Rates are taken from a\n', '//          publicly available third-party provider, such as Coinbase, CoinMarketCap, etc.\n', 'contract ExchangeRate is Ownable {\n', '    event RateUpdated(string id, uint256 rate);\n', '    event UpdaterTransferred(address indexed previousUpdater, address indexed newUpdater);\n', '\n', '    address public updater;\n', '\n', '    mapping(string => uint256) internal currentRates;\n', '\n', '    /// @dev The ExchangeRate constructor.\n', '    /// @param _updater Account which can update the rates.\n', '    constructor(address _updater) public {\n', '        require(_updater != address(0));\n', '        updater = _updater;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the updater.\n', '    modifier onlyUpdater() {\n', '        require(msg.sender == updater);\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to change the updater.\n', '    /// @param _newUpdater The address of the new updater.\n', '    function transferUpdater(address _newUpdater) external onlyOwner {\n', '        require(_newUpdater != address(0));\n', '        emit UpdaterTransferred(updater, _newUpdater);\n', '        updater = _newUpdater;\n', '    }\n', '\n', '    /// @dev Allows the current updater account to update a single rate.\n', '    /// @param _id The rate identifier.\n', '    /// @param _rate The exchange rate.\n', '    function updateRate(string _id, uint256 _rate) external onlyUpdater {\n', '        require(_rate != 0);\n', '        currentRates[_id] = _rate;\n', '        emit RateUpdated(_id, _rate);\n', '    }\n', '\n', '    /// @dev Allows anyone to read the current rate.\n', '    /// @param _id The rate identifier.\n', '    /// @return The current rate.\n', '    function getRate(string _id) external view returns(uint256) {\n', '        return currentRates[_id];\n', '    }\n', '}\n', '\n', '\n', '/// @title  VestingTrustee\n', '/// @author Jose Perez - <jose.perez@diginex.com>\n', '/// @notice Vesting trustee contract for Diginex ERC20 tokens. Tokens are granted to specific\n', '///         addresses and vested under certain criteria (vesting period, cliff period, etc.)\n', '//          All time units are in seconds since Unix epoch.\n', '///         Tokens must be transferred to the VestingTrustee contract address prior to granting them.\n', 'contract VestingTrustee is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ERC20 contract.\n', '    Token public token;\n', '\n', '    // The address allowed to grant and revoke tokens.\n', '    address public vester;\n', '\n', '    // Vesting grant for a specific holder.\n', '    struct Grant {\n', '        uint256 value;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 end;\n', '        uint256 installmentLength;\n', '        uint256 transferred;\n', '        bool revocable;\n', '    }\n', '\n', '    // Holder to grant information mapping.\n', '    mapping (address => Grant) public grants;\n', '\n', '    // Total tokens available for vesting.\n', '    uint256 public totalVesting;\n', '\n', '    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\n', '    event TokensUnlocked(address indexed _to, uint256 _value);\n', '    event GrantRevoked(address indexed _holder, uint256 _refund);\n', '    event VesterTransferred(address indexed previousVester, address indexed newVester);\n', '\n', '    /// @dev Constructor that initializes the VestingTrustee contract.\n', '    /// @param _token The address of the previously deployed ERC20 token contract.\n', '    /// @param _vester The vester address.\n', '    constructor(Token _token, address _vester) public {\n', '        require(_token != address(0));\n', '        require(_vester != address(0));\n', '\n', '        token = _token;\n', '        vester = _vester;\n', '    }\n', '\n', '    // @dev Prevents being called by any account other than the vester.\n', '    modifier onlyVester() {\n', '        require(msg.sender == vester);\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the owner to change the vester.\n', '    /// @param _newVester The address of the new vester.\n', '    /// @return True if the operation was successful.\n', '    function transferVester(address _newVester) external onlyOwner returns(bool) {\n', '        require(_newVester != address(0));\n', '\n', '        emit VesterTransferred(vester, _newVester);\n', '        vester = _newVester;\n', '        return true;\n', '    }\n', '    \n', '\n', '    /// @dev Grant tokens to a specified address.\n', '    ///      Tokens must be transferred to the VestingTrustee contract address prior to calling this\n', '    ///      function. The number of tokens assigned to the VestingTrustee contract address must\n', '    //       always be equal or greater than the total number of vested tokens.\n', '    /// @param _to address The holder address.\n', '    /// @param _value uint256 The amount of tokens to be granted.\n', '    /// @param _start uint256 The beginning of the vesting period.\n', '    /// @param _cliff uint256 Time, between _start and _end, when the first installment is made.\n', '    /// @param _end uint256 The end of the vesting period.\n', '    /// @param _installmentLength uint256 The length of each vesting installment.\n', '    /// @param _revocable bool Whether the grant is revocable or not.\n', '    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end,\n', '        uint256 _installmentLength, bool _revocable)\n', '        external onlyVester {\n', '\n', '        require(_to != address(0));\n', "        require(_to != address(this)); // Don't allow holder to be this contract.\n", '        require(_value > 0);\n', '\n', '        // Require that every holder can be granted tokens only once.\n', '        require(grants[_to].value == 0);\n', '\n', '        // Require for time ranges to be consistent and valid.\n', '        require(_start <= _cliff && _cliff <= _end);\n', '\n', '        // Require installment length to be valid and no longer than (end - start).\n', '        require(_installmentLength > 0 && _installmentLength <= _end.sub(_start));\n', '\n', '        // Grant must not exceed the total amount of tokens currently available for vesting.\n', '        require(totalVesting.add(_value) <= token.balanceOf(address(this)));\n', '\n', '        // Assign a new grant.\n', '        grants[_to] = Grant({\n', '            value: _value,\n', '            start: _start,\n', '            cliff: _cliff,\n', '            end: _end,\n', '            installmentLength: _installmentLength,\n', '            transferred: 0,\n', '            revocable: _revocable\n', '        });\n', '\n', '        // Since tokens have been granted, increase the total amount of vested tokens.\n', '        // This indirectly reduces the total amount available for vesting.\n', '        totalVesting = totalVesting.add(_value);\n', '\n', '        emit NewGrant(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Revoke the grant of tokens of a specified grantee address.\n', '    ///      The vester can arbitrarily revoke the tokens of a revocable grant anytime.\n', '    ///      However, the grantee owns `calculateVestedTokens` number of tokens, even if some of them\n', '    ///      have not been transferred to the grantee yet. Therefore, the `revoke` function should\n', '    ///      transfer all non-transferred tokens to their rightful owner. The rest of the granted tokens\n', '    ///      should be transferred to the vester.\n', '    /// @param _holder The address which will have its tokens revoked.\n', '    function revoke(address _holder) public onlyVester {\n', '        Grant storage holderGrant = grants[_holder];\n', '\n', '        // Grant must be revocable.\n', '        require(holderGrant.revocable);\n', '\n', '        // Calculate number of tokens to be transferred to vester and to holder:\n', '        // holderGrant.value = toVester + vested = toVester + ( toHolder + holderGrant.transferred )\n', '        uint256 vested = calculateVestedTokens(holderGrant, now);\n', '        uint256 toVester = holderGrant.value.sub(vested);\n', '        uint256 toHolder = vested.sub(holderGrant.transferred);\n', '\n', '        // Remove grant information.\n', '        delete grants[_holder];\n', '\n', '        // Update totalVesting.\n', '        totalVesting = totalVesting.sub(toHolder);\n', '        totalVesting = totalVesting.sub(toVester);\n', '\n', '        // Transfer tokens.\n', '        token.transfer(_holder, toHolder);\n', '        token.transfer(vester, toVester);\n', '        \n', '        emit GrantRevoked(_holder, toVester);\n', '    }\n', '\n', '    /// @dev Calculate amount of vested tokens at a specifc time.\n', '    /// @param _grant Grant The vesting grant.\n', '    /// @param _time uint256 The time to be checked\n', '    /// @return a uint256 Representing the amount of vested tokens of a specific grant.\n', '    function calculateVestedTokens(Grant _grant, uint256 _time) private pure returns (uint256) {\n', "        // If we're before the cliff, then nothing is vested.\n", '        if (_time < _grant.cliff) {\n', '            return 0;\n', '        }\n', '\n', "        // If we're after the end of the vesting period - everything is vested;\n", '        if (_time >= _grant.end) {\n', '            return _grant.value;\n', '        }\n', '\n', '        // Calculate amount of installments past until now.\n', '        // NOTE: result gets floored because of integer division.\n', '        uint256 installmentsPast = _time.sub(_grant.start).div(_grant.installmentLength);\n', '\n', '        // Calculate amount of time in entire vesting period.\n', '        uint256 vestingPeriod = _grant.end.sub(_grant.start);\n', '\n', '        // Calculate and return installments that have passed according to vesting time that have passed.\n', '        return _grant.value.mul(installmentsPast.mul(_grant.installmentLength)).div(vestingPeriod);\n', '    }\n', '\n', '    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\n', '    /// @param _holder address The address of the holder.\n', '    /// @param _time uint256 The specific time to calculate against.\n', "    /// @return a uint256 Representing a holder's total amount of vested tokens.\n", '    function vestedTokens(address _holder, uint256 _time) external view returns (uint256) {\n', '        Grant memory holderGrant = grants[_holder];\n', '\n', '        if (holderGrant.value == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return calculateVestedTokens(holderGrant, _time);\n', '    }\n', '\n', '    /// @dev Unlock vested tokens and transfer them to their holder.\n', '    /// @param _holder address The address of the holder.\n', '    function unlockVestedTokens(address _holder) external {\n', '        Grant storage holderGrant = grants[_holder];\n', '\n', '        // Require that there will be funds left in grant to transfer to holder.\n', '        require(holderGrant.value.sub(holderGrant.transferred) > 0);\n', '\n', '        // Get the total amount of vested tokens, according to grant.\n', '        uint256 vested = calculateVestedTokens(holderGrant, now);\n', '        if (vested == 0) {\n', '            return;\n', '        }\n', '\n', "        // Make sure the holder doesn't transfer more than what he already has.\n", '        uint256 transferable = vested.sub(holderGrant.transferred);\n', '        if (transferable == 0) {\n', '            return;\n', '        }\n', '\n', '        // Update transferred and total vesting amount, then transfer remaining vested funds to holder.\n', '        holderGrant.transferred = holderGrant.transferred.add(transferable);\n', '        totalVesting = totalVesting.sub(transferable);\n', '        token.transfer(_holder, transferable);\n', '\n', '        emit TokensUnlocked(_holder, transferable);\n', '    }\n', '}']