['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a / b;\n', '\t}\n', '\t\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\t\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\t\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism. */\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\t\n', '\tbool public paused = false;\n', '\t\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\temit Pause();\n', '\t}\n', '\t\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\temit Unpause();\n', '\t}\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\t\n', '\tmapping(address => uint256) balances;\n', '\t\n', '\tuint256 totalSupply_;\n', '\t\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t\t\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\t\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\t\t\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\t\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/PausableToken.sol\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\t\n', '\tfunction transfer(\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t) public  whenNotPaused returns (bool)\n', '\t{\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t) public whenNotPaused returns (bool)\n', '\t{\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\t\n', '\tfunction approve(\n', '\t\taddress _spender,\n', '\t\tuint256 _value\n', '\t) public whenNotPaused returns (bool)\n', '\t{\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\t\n', '\tfunction increaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint _addedValue\n', '\t) public whenNotPaused returns (bool success)\n', '\t{\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\t\n', '\tfunction decreaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint _subtractedValue\n', '\t) public whenNotPaused returns (bool success)\n', '\t{\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\t\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\t\n', '\tfunction burn(uint256 _value) public {\n', '\t\t_burn(msg.sender, _value);\n', '\t}\n', '\t\n', '\tfunction _burn(address _who, uint256 _value) internal {\n', '\t\trequire(_value <= balances[_who]);\n', '\t\t\n', '\t\tbalances[_who] = balances[_who].sub(_value);\n', '\t\ttotalSupply_ = totalSupply_.sub(_value);\n', '\t\temit Burn(_who, _value);\n', '\t\temit Transfer(_who, address(0), _value);\n', '\t}\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/MintableToken.sol\n', ' */\n', 'contract MintableToken is PausableToken {\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\tevent MintFinished();\n', '\t\n', '\tbool public mintingFinished = false;\n', '\t\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier hasMintPermission() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction finishMinting() onlyOwner canMint public returns (bool) {\n', '\t\tmintingFinished = true;\n', '\t\temit MintFinished();\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '/**\n', '* @title AngeniumToken\n', '*/\n', 'contract AngeniumToken is MintableToken, BurnableToken {\n', '\t\n', '\tusing SafeMath for uint256;\n', '\t\n', '\tstring  public name = "Angenium Coin";\n', '\tstring  public symbol = "ANG";\n', '\tuint256 constant public decimals = 18;\n', '\tuint256 constant dec = 10**decimals;\n', '\tuint256 public constant initialSupply = 138000000*dec; // 138,000,000 ANG\n', '\taddress public crowdsaleAddress;\n', '\t\n', '\tmodifier onlyICO() {\n', '\t\trequire(msg.sender == crowdsaleAddress);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tconstructor() public {\n', '\t\tpause();\n', '\t}\n', '\t\n', '\tfunction startCirculation() internal returns(bool) {\n', '\t\tif (totalSupply_ <= initialSupply)\n', '\t\t\treturn false;\n', '\t\telse\n', '\t\t\tfinishMinting();\n', '\t\tunpause();\n', '\t}\n', '\t\n', '\tfunction setSaleAddress(address _saleaddress) public onlyOwner{\n', '\t\tcrowdsaleAddress = _saleaddress;\n', '\t}\n', '\t\n', '\tfunction mintFromICO(address _to, uint256 _amount) onlyICO canMint public returns (bool) {\n', '\t\trequire(balances[_to].add(_amount) != 0);\n', '\t\trequire(balances[_to].add(_amount) > balances[_to]);\n', '\t\ttotalSupply_ = totalSupply_.add(_amount);\n', '\t\trequire(!startCirculation());\n', '\t\trequire(totalSupply_ <= initialSupply);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\temit Mint(_to, _amount);\n', '\t\temit Transfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '}']