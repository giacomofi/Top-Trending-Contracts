['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @notice Adds two numbers, throws on overflow.\n', '    */\n', '    function add(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal pure returns (uint256 c)\n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal pure returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal pure returns (uint256 c)\n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '        internal pure returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed _from,\n', '        address indexed _to\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract MAPOMZ is Owned, ERC20Interface {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping(address => bool) public freezeBypassing;\n', '    mapping(address => uint256) public lockupExpirations;\n', '    string public constant symbol = "MAPOMZ";\n', '    string public constant name = "Mapomz Token";\n', '    uint8 public constant decimals = 0;\n', '    uint256 public circulatingSupply = 0;\n', '    bool public tradingLive = false;\n', '    uint256 public totalSupply;\n', '\n', '    constructor() public {\n', '        totalSupply = 4000000000;\n', '        balances[0x8300521eB07d67902553FC1040436739289cAc2f] = totalSupply / 100 * 25;\n', '        balances[0xdf457b3c71315fda4be40c399296180af3cbd066] = totalSupply / 100 * 25;\n', '        balances[0xeb574cD5A407Fefa5610fCde6Aec13D983BA527c] = totalSupply / 100 * 25;\n', '        balances[0xE4FF99F4a0256ebE6AE99eA6D14CC7414eb91209] = totalSupply / 100 * 25;\n', '    }\n', '\n', '\n', '    function totalSupply() public view returns (uint256 supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the token balance of `owner`\n', '     * @dev This function is part of the ERC20 standard\n', '     * @param owner The wallet to get the balance of\n', '     * @return {"balance": "The balance of `owner`"}\n', '     */\n', '    function balanceOf(\n', '        address owner\n', '    )\n', '        public view returns (uint256 balance)\n', '    {\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers `amount` from msg.sender to `destination`\n', '     * @dev This function is part of the ERC20 standard\n', '     * @param destination The address that receives the tokens\n', '     * @param amount Token amount to transfer\n', '     * @return {"success": "If the operation completed successfuly"}\n', '     */\n', '    function transfer(\n', '        address destination,\n', '        uint256 amount\n', '    )\n', '        public returns (bool success)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[destination] = balances[destination].add(amount);\n', '        emit Transfer(msg.sender, destination, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from an address to another one\n', '     * through an allowance made before\n', '     * @dev This function is part of the ERC20 standard\n', '     * @param from The address that sends the tokens\n', '     * @param to The address that receives the tokens\n', '     * @param tokenAmount Token amount to transfer\n', '     * @return {"success": "If the operation completed successfuly"}\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenAmount\n', '    )\n', '        public returns (bool success)\n', '    {\n', '        balances[from] = balances[from].sub(tokenAmount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokenAmount);\n', '        balances[to] = balances[to].add(tokenAmount);\n', '        emit Transfer(from, to, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve an address to send `tokenAmount` tokens to `msg.sender` (make an allowance)\n', '     * @dev This function is part of the ERC20 standard\n', '     * @param spender The allowed address\n', '     * @param tokenAmount The maximum amount allowed to spend\n', '     * @return {"success": "If the operation completed successfuly"}\n', '     */\n', '    function approve(\n', '        address spender,\n', '        uint256 tokenAmount\n', '    )\n', '        public returns (bool success)\n', '    {\n', '        allowed[msg.sender][spender] = tokenAmount;\n', '        emit Approval(msg.sender, spender, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the remaining allowance for a spender on a given address\n', '     * @dev This function is part of the ERC20 standard\n', '     * @param tokenOwner The address that owns the tokens\n', '     * @param spender The spender\n', '     * @return {"remaining": "The amount of tokens remaining in the allowance"}\n', '     */\n', '    function allowance(\n', '        address tokenOwner,\n', '        address spender\n', '    )\n', '        public view returns (uint256 remaining)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '}']