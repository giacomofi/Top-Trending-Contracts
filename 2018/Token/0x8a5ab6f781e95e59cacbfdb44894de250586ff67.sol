['pragma solidity ^0.4.16;\n', '\n', 'interface token_recipient { function approved(address _from, uint256 _value, address _token, bytes _data) public; }\n', '\n', 'contract ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    mapping (address => uint256) public balance;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    function ERC20 (string token_name, string token_symbol, uint256 supply) public {\n', '        name = token_name;\n', '        symbol = token_symbol;\n', '        totalSupply = supply * 10 ** uint256(decimals);\n', '        owner = msg.sender;\n', '        balance[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    modifier owned {\n', '        require(msg.sender == owner); \n', '        _;\n', '    }\n', '\n', '    function _transfer (address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);\n', '        require(balance[_from] >= _value);\n', '        require(balance[_to] + _value > balance[_to]);\n', '        uint prev_balances = balance[_from] + balance[_to];\n', '        balance[_from] -= _value;\n', '        balance[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balance[_from] + balance[_to] == prev_balances);\n', '    }\n', '    \n', '    function approve (address _spender, uint256 _value, bytes _data) public {\n', '        allowance[msg.sender][_spender] = _value;\n', '        token_recipient spender = token_recipient(_spender);\n', '        spender.approved(msg.sender, _value, this, _data);\n', '    }\n', '    \n', '    function transfer (address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balance[msg.sender] >= _value); \n', '        balance[msg.sender] -= _value;\n', '        totalSupply -= _value; \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balance[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]); \n', '        balance[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value; \n', '        totalSupply -= _value; \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address target, uint256 mint_value) public owned {\n', '        balance[target] += mint_value;\n', '        totalSupply += mint_value;\n', '        Transfer(0, this, mint_value);\n', '        Transfer(this, target, mint_value);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface token_recipient { function approved(address _from, uint256 _value, address _token, bytes _data) public; }\n', '\n', 'contract ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    mapping (address => uint256) public balance;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    function ERC20 (string token_name, string token_symbol, uint256 supply) public {\n', '        name = token_name;\n', '        symbol = token_symbol;\n', '        totalSupply = supply * 10 ** uint256(decimals);\n', '        owner = msg.sender;\n', '        balance[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    modifier owned {\n', '        require(msg.sender == owner); \n', '        _;\n', '    }\n', '\n', '    function _transfer (address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);\n', '        require(balance[_from] >= _value);\n', '        require(balance[_to] + _value > balance[_to]);\n', '        uint prev_balances = balance[_from] + balance[_to];\n', '        balance[_from] -= _value;\n', '        balance[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balance[_from] + balance[_to] == prev_balances);\n', '    }\n', '    \n', '    function approve (address _spender, uint256 _value, bytes _data) public {\n', '        allowance[msg.sender][_spender] = _value;\n', '        token_recipient spender = token_recipient(_spender);\n', '        spender.approved(msg.sender, _value, this, _data);\n', '    }\n', '    \n', '    function transfer (address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balance[msg.sender] >= _value); \n', '        balance[msg.sender] -= _value;\n', '        totalSupply -= _value; \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balance[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]); \n', '        balance[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value; \n', '        totalSupply -= _value; \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address target, uint256 mint_value) public owned {\n', '        balance[target] += mint_value;\n', '        totalSupply += mint_value;\n', '        Transfer(0, this, mint_value);\n', '        Transfer(this, target, mint_value);\n', '    }\n', '}']
