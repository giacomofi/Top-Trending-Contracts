['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title CoinCasso Exchange Token is a utility token\n', ' * @title CoinCasso is a part of Multi-Layer Exchange Service  \n', ' * @title CoinCasso Exchange Platform https://coincasso.com\n', ' * @dev CoinCasso interface\n', ' * @dev Token max supply 100,000,000 subject to reduce by burning\n', ' * @dev Token code : CCX\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract CoinCasso is ERC20 {\n', '\n', '\tuint256  public  totalSupply = 100000000 * 1 ether;\n', '\n', '\tmapping  (address => uint256)             public          _balances;\n', '    mapping  (address => mapping (address => uint256)) public  _approvals;\n', '\n', '\n', '    string   public  name = "CoinCasso Exchange Token";\n', '    string   public  symbol = "CCX";\n', '    uint256  public  decimals = 18;\n', '\n', '    address  public  owner ;\n', '\n', '    event Burn(uint256 wad);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '\n', '    constructor () public{\n', '        owner = msg.sender;\n', '\t\t_balances[owner] = totalSupply;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t    require(msg.sender == owner);\n', '\t    _;\n', '\t}\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        require (dst != address(0));\n', '        require (wad > 0);\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = _balances[msg.sender] - wad;\n', '        _balances[dst] = _balances[dst] + wad;\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\n', '        require (src != address(0));\n', '        require (dst != address(0));\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = _approvals[src][msg.sender] - wad;\n', '        _balances[src] = _balances[src] - wad;\n', '        _balances[dst] = _balances[dst] + wad;\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        require (guy != address(0));\n', '        require (wad > 0);\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '        \n', '    function burn(uint256 wad) public onlyOwner {\n', '        require (wad > 0);\n', '        _balances[msg.sender] = _balances[msg.sender] - wad;\n', '        totalSupply = totalSupply - wad;\n', '        emit Burn(wad);\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']