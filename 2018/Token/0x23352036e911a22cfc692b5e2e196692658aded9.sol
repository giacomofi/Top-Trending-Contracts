['pragma solidity 0.4.19;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    require(newOwner != owner);\n', '\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Whitelisted is Ownable {\n', '\n', '\t// variables\n', '\tmapping (address => bool) public whitelist;\n', '\n', '\t// events\n', '\tevent WhitelistChanged(address indexed account, bool state);\n', '\n', '\t// modifiers\n', '\n', '\t// checkes if the address is whitelisted\n', '\tmodifier isWhitelisted(address _addr) {\n', '\t\trequire(whitelist[_addr] == true);\n', '\n', '\t\t_;\n', '\t}\n', '\n', '\t// methods\n', '\tfunction setWhitelist(address _addr, bool _state) onlyOwner external {\n', '\t\trequire(_addr != address(0));\n', '\t\trequire(whitelist[_addr] != _state);\n', '\n', '\t\twhitelist[_addr] = _state;\n', '\n', '\t\tWhitelistChanged(_addr, _state);\n', '\t}\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value > 0);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\t// events\n', '\tevent Burn(address indexed burner, uint256 amount);\n', '\n', '\t// reduce sender balance and Token total supply\n', '\tfunction burn(uint256 _value) public {\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\n', '\t\tBurn(msg.sender, _value);\n', '\t}\n', '}\n', '\n', 'contract FriendzToken is BurnableToken, Ownable {\n', '\n', '\t// public variables\n', '\tmapping(address => uint256) public release_dates;\n', '\tmapping(address => uint256) public purchase_dates;\n', '\tmapping(address => uint256) public blocked_amounts;\n', '\tmapping (address => mapping (address => uint256)) public allowed;\n', '\tbool public free_transfer = false;\n', '\tuint256 public RELEASE_DATE = 1522540800; // 1th april 2018 00:00 UTC\n', '\n', '\t// private variables\n', '\taddress private co_owner;\n', '\taddress private presale_holder = 0x1ea128767610c944Ff9a60E4A1Cbd0C88773c17c;\n', '\taddress private ico_holder = 0xc1c643701803eca8DDfA2017547E8441516BE047;\n', '\taddress private reserved_holder = 0x26226CfaB092C89eF3D79653D692Cc1425a0B907;\n', '\taddress private wallet_holder = 0xBF0B56276e90fc4f0f1e2Ec66fa418E30E717215;\n', '\n', '\t// ERC20 variables\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint256 public decimals;\n', '\n', '\t// constants\n', '\n', '\t// events\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '\tevent UpdatedBlockingState(address indexed to, uint256 purchase, uint256 end_date, uint256 value);\n', '\tevent CoOwnerSet(address indexed owner);\n', '\tevent ReleaseDateChanged(address indexed from, uint256 date);\n', '\n', '\tfunction FriendzToken(string _name, string _symbol, uint256 _decimals, uint256 _supply) public {\n', '\t\t// safety checks\n', '\t\trequire(_decimals > 0);\n', '\t\trequire(_supply > 0);\n', '\n', '\t\t// assign variables\n', '\t\tname = _name;\n', '\t\tsymbol = _symbol;\n', '\t\tdecimals = _decimals;\n', '\t\ttotalSupply = _supply;\n', '\n', '\t\t// assign the total supply to the owner\n', '\t\tbalances[owner] = _supply;\n', '\t}\n', '\n', '\t// modifiers\n', '\n', '\t// checks if the address can transfer tokens\n', '\tmodifier canTransfer(address _sender, uint256 _value) {\n', '\t\trequire(_sender != address(0));\n', '\n', '\t\trequire(\n', '\t\t\t(free_transfer) ||\n', '\t\t\tcanTransferBefore(_sender) ||\n', '\t\t\tcanTransferIfLocked(_sender, _value)\n', '\t \t);\n', '\n', '\t \t_;\n', '\t}\n', '\n', "\t// check if we're in a free-transfter state\n", '\tmodifier isFreeTransfer() {\n', '\t\trequire(free_transfer);\n', '\n', '\t\t_;\n', '\t}\n', '\n', "\t// check if we're in non free-transfter state\n", '\tmodifier isBlockingTransfer() {\n', '\t\trequire(!free_transfer);\n', '\n', '\t\t_;\n', '\t}\n', '\n', '\t// functions\n', '\n', '\tfunction canTransferBefore(address _sender) public view returns(bool) {\n', '\t\treturn (\n', '\t\t\t_sender == owner ||\n', '\t\t\t_sender == presale_holder ||\n', '\t\t\t_sender == ico_holder ||\n', '\t\t\t_sender == reserved_holder ||\n', '\t\t\t_sender == wallet_holder\n', '\t\t);\n', '\t}\n', '\n', '\tfunction canTransferIfLocked(address _sender, uint256 _value) public view returns(bool) {\n', '\t\tuint256 after_math = balances[_sender].sub(_value);\n', '\t\treturn (\n', '\t\t\tnow >= RELEASE_DATE &&\n', '\t\t    after_math >= getMinimumAmount(_sender)\n', '        );\n', '\t}\n', '\n', '\t// set co-owner, can be set to 0\n', '\tfunction setCoOwner(address _addr) onlyOwner public {\n', '\t\trequire(_addr != co_owner);\n', '\n', '\t\tco_owner = _addr;\n', '\n', '\t\tCoOwnerSet(_addr);\n', '\t}\n', '\n', '\t// set release date\n', '\tfunction setReleaseDate(uint256 _date) onlyOwner public {\n', '\t\trequire(_date > 0);\n', '\t\trequire(_date != RELEASE_DATE);\n', '\n', '\t\tRELEASE_DATE = _date;\n', '\n', '\t\tReleaseDateChanged(msg.sender, _date);\n', '\t}\n', '\n', '\t// calculate the amount of tokens an address can use\n', '\tfunction getMinimumAmount(address _addr) constant public returns (uint256) {\n', '\t\t// if the address ha no limitations just return 0\n', '\t\tif(blocked_amounts[_addr] == 0x0)\n', '\t\t\treturn 0x0;\n', '\n', '\t\t// if the purchase date is in the future block all the tokens\n', '\t\tif(purchase_dates[_addr] > now){\n', '\t\t\treturn blocked_amounts[_addr];\n', '\t\t}\n', '\n', '\t\tuint256 alpha = uint256(now).sub(purchase_dates[_addr]); // absolute purchase date\n', '\t\tuint256 beta = release_dates[_addr].sub(purchase_dates[_addr]); // absolute token release date\n', '\t\tuint256 tokens = blocked_amounts[_addr].sub(alpha.mul(blocked_amounts[_addr]).div(beta)); // T - (α * T) / β\n', '\n', '\t\treturn tokens;\n', '\t}\n', '\n', '\t// set blocking state to an address\n', '\tfunction setBlockingState(address _addr, uint256 _end, uint256 _value) isBlockingTransfer public {\n', '\t\t// only the onwer and the co-owner can call this function\n', '\t\trequire(\n', '\t\t\tmsg.sender == owner ||\n', '\t\t\tmsg.sender == co_owner\n', '\t\t);\n', '\t\trequire(_addr != address(0));\n', '\n', '\t\tuint256 final_value = _value;\n', '\n', '\t\tif(release_dates[_addr] != 0x0){\n', "\t\t\t// if it's not the first time this function is beign called for this address\n", '\t\t\t// update its information instead of setting them (add value to previous value)\n', '\t\t\tfinal_value = blocked_amounts[_addr].add(_value);\n', '\t\t}\n', '\n', '\t\trelease_dates[_addr] = _end;\n', '\t\tpurchase_dates[_addr] = RELEASE_DATE;\n', '\t\tblocked_amounts[_addr] = final_value;\n', '\n', '\t\tUpdatedBlockingState(_addr, _end, RELEASE_DATE, final_value);\n', '\t}\n', '\n', '\t// all addresses can transfer tokens now\n', '\tfunction freeToken() public onlyOwner {\n', '\t\tfree_transfer = true;\n', '\t}\n', '\n', '\t// override function using canTransfer on the sender address\n', '\tfunction transfer(address _to, uint _value) canTransfer(msg.sender, _value) public returns (bool success) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\t// transfer tokens from one address to another\n', '\tfunction transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) public returns (bool success) {\n', '\t\trequire(_from != address(0));\n', '\t\trequire(_to != address(0));\n', '\n', '\t    // SafeMath.sub will throw if there is not enough balance.\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', "\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // this will throw if we don't have enough allowance\n", '\n', '\t    // this event comes from BasicToken.sol\n', '\t    Transfer(_from, _to, _value);\n', '\n', '\t    return true;\n', '\t}\n', '\n', '\t// erc20 functions\n', '  \tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t \trequire(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '\t \tallowed[msg.sender][_spender] = _value;\n', '\t \tApproval(msg.sender, _spender, _value);\n', '\n', '\t \treturn true;\n', '  \t}\n', '\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    \treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '\t/**\n', '\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t*/\n', '\tfunction increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\n', '\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue >= oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}']