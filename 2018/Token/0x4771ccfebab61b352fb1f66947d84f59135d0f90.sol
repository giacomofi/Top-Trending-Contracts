['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) onlyOwner {\n', '\t if(_newOwner == 0x0)revert();\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal constant returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal constant returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal constant returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract Token {\n', ' \n', '    function totalSupply() public  returns (uint256 supply);\n', '\t \n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '    function burn( uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  \n', '    event Burn(address indexed from, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract TongTong is Token, Owned {\n', '    using SafeMath for uint256;\n', '  \n', '    uint public  _totalSupply;\n', '  \n', '    string public   name;         //The Token&#39;s name\n', '  \n', '    uint8 public constant decimals = 8;    //Number of decimals of the smallest unit\n', '  \n', '    string public  symbol;    //The Token&#39;s symbol \n', '  \n', '    uint256 public mintCount;\n', '  \n', '    uint256 public deleteToken;\n', '  \n', '    uint256 public soldToken;\n', '\n', '   \n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '  \n', '\n', '    // Constructor\n', '    function TongTong(string coinName,string coinSymbol,uint initialSupply) {\n', '        _totalSupply = initialSupply *10**uint256(decimals);                        // Update total supply\n', '        balanceOf[msg.sender] = _totalSupply; \n', '        name = coinName;                                   // Set the name for display purposes\n', '        symbol =coinSymbol;   \n', '        \n', '    }\n', '\n', '   function totalSupply()  public  returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '\t\n', '    // Send back ether sent to me\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        // according to AssetToken&#39;s total supply, never overflow here\n', '        if (balanceOf[msg.sender] >= _amount\n', '            && _amount > 0) {            \n', '            balanceOf[msg.sender] -= uint112(_amount);\n', '            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\n', '            soldToken = _amount.add(soldToken).toUINT112();\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '   \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        // according to AssetToken&#39;s total supply, never overflow here\n', '        if (balanceOf[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            balanceOf[_from] = balanceOf[_from].sub(_amount).toUINT112();\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '   \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //Mint tokens and assign to some one\n', '    function mint(address _owner, uint256 _amount) onlyOwner{\n', '     \n', '            balanceOf[_owner] = _amount.add(balanceOf[_owner]).toUINT112();\n', '            mintCount =  _amount.add(mintCount).toUINT112();\n', '            _totalSupply = _totalSupply.add(_amount).toUINT112();\n', '    }\n', '  //Burn tokens from owner account\n', '  function burn(uint256 _count) public returns (bool success)\n', '  {\n', '          balanceOf[msg.sender] -=uint112( _count);\n', '          deleteToken = _count.add(deleteToken).toUINT112();\n', '         _totalSupply = _totalSupply.sub(_count).toUINT112();\n', '          Burn(msg.sender, _count);\n', '\t\t  return true;\n', '    }\n', '    \n', '  }']