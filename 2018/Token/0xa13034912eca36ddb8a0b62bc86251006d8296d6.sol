['pragma solidity ^0.4.21; \n', '\n', '\n', 'contract OwnableContract {\n', ' \n', '    address superOwner;\n', '\t\t\n', '\tfunction OwnableContract() public { \n', '        superOwner = msg.sender;  \n', '    }\n', '\t\n', '\tmodifier onlyOwner() {\n', '        require(msg.sender == superOwner);\n', '        _;\n', '    } \n', '    \n', '    function viewSuperOwner() public view returns (address owner) {\n', '        return superOwner;\n', '    }\n', '    \n', '\tfunction changeOwner(address newOwner) onlyOwner public {\n', '        superOwner = newOwner;\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    //How many decimals to show.\n', '    uint256 public decimals;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract LightAirdrop is OwnableContract{ \n', '     \n', ' \n', '    function LightAirdrop() public { \n', '    }\n', '     \n', '    function performEqual(address tokenAddress, address[] tos, uint256 amount) onlyOwner public {\n', '        \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        \n', '        uint256 i = 0;\n', '        uint256 n = tos.length;\n', '        for( ; i<n; i++) {\n', '            tokenContract.transfer(tos[i], amount);\n', '        }\n', '    }\n', '    \n', '    function performDifferent(address tokenAddress, address[] tos, uint256[] amounts) onlyOwner public {\n', '        \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        \n', '        uint256 i = 0;\n', '        uint256 n = tos.length;\n', '        for( ; i<n; i++) {\n', '            tokenContract.transfer(tos[i], amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function withdraw(address tokenAddress) onlyOwner public { \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))); \n', '    }\n', '}']
['pragma solidity ^0.4.21; \n', '\n', '\n', 'contract OwnableContract {\n', ' \n', '    address superOwner;\n', '\t\t\n', '\tfunction OwnableContract() public { \n', '        superOwner = msg.sender;  \n', '    }\n', '\t\n', '\tmodifier onlyOwner() {\n', '        require(msg.sender == superOwner);\n', '        _;\n', '    } \n', '    \n', '    function viewSuperOwner() public view returns (address owner) {\n', '        return superOwner;\n', '    }\n', '    \n', '\tfunction changeOwner(address newOwner) onlyOwner public {\n', '        superOwner = newOwner;\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    //How many decimals to show.\n', '    uint256 public decimals;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract LightAirdrop is OwnableContract{ \n', '     \n', ' \n', '    function LightAirdrop() public { \n', '    }\n', '     \n', '    function performEqual(address tokenAddress, address[] tos, uint256 amount) onlyOwner public {\n', '        \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        \n', '        uint256 i = 0;\n', '        uint256 n = tos.length;\n', '        for( ; i<n; i++) {\n', '            tokenContract.transfer(tos[i], amount);\n', '        }\n', '    }\n', '    \n', '    function performDifferent(address tokenAddress, address[] tos, uint256[] amounts) onlyOwner public {\n', '        \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        \n', '        uint256 i = 0;\n', '        uint256 n = tos.length;\n', '        for( ; i<n; i++) {\n', '            tokenContract.transfer(tos[i], amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function withdraw(address tokenAddress) onlyOwner public { \n', '        EIP20Interface tokenContract = EIP20Interface(tokenAddress);\n', '        tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))); \n', '    }\n', '}']
