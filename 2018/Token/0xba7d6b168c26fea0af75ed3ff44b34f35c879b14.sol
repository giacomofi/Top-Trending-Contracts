['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '    \n', "    /// 'owner' is the only address that can call a function with \n", '    /// this modifier\n', '    address public initOwner;\n', '    address[] public owner;\n', '    address internal newOwner;\n', '    \n', "    ///@notice The constructor assigns the message sender to be 'owner'\n", '    constructor() public {\n', '        initOwner = msg.sender;\n', '        owner.push(msg.sender);\n', '    }\n', '    \n', '    modifier onlyInitOwner() {\n', '        require (msg.sender == initOwner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwners(address _owner) {\n', '        bool _isOwner;\n', '        for (uint i=0; i<owner.length; i++) {\n', '            if (owner[i] == _owner) {\n', '                _isOwner = true;\n', '                break;\n', '            }\n', '        }\n', '        require (_isOwner == true);\n', '        _;\n', '    }\n', '    \n', '    modifier ownerNotAdded(address _newOwner) {\n', '        bool _added = false;\n', '        for (uint i=0;i<owner.length;i++) {\n', '            if (owner[i] == _newOwner) {\n', '                _added = true;\n', '                break;\n', '            }\n', '        }\n', '        require (_added == false);\n', '        _;\n', '    }\n', '    \n', '    modifier ownerAdded(address _newOwner) {\n', '        bool _added = false;\n', '        for (uint i=0;i<owner.length;i++) {\n', '            if (owner[i] == _newOwner) _added = true;\n', '        }\n', '        require (_added == true);\n', '        _;\n', '    }\n', '    \n', '    ///change the owner\n', '    function addOwner(address _newOwner) public onlyInitOwner ownerNotAdded(_newOwner) returns(bool) {\n', '        owner.push(_newOwner);\n', '        return true;\n', '    }\n', '    \n', '    function delOwner(address _addedOwner) public onlyInitOwner ownerAdded(_addedOwner) returns(bool) {\n', '        for (uint i=0;i<owner.length;i++) {\n', '            if (owner[i] == _addedOwner) {\n', '                owner[i] = owner[owner.length - 1];\n', '                owner.length -= 1;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function changeInitOwner(address _newOwner) public onlyInitOwner {\n', '        initOwner = _newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, throws on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract TxProxy is Owned {\n', '    \n', '    uint256 decimals = 18;\n', '    \n', '    address public USEAddr = 0xd9485499499d66B175Cf5ED54c0a19f1a6Bcb61A;\n', '    \n', '    /// @dev token holder\n', '    address public allocTokenHolder;\n', '    \n', '    /// @dev change token holder\n', '    function changeTokenHolder(address _tokenHolder) public onlyInitOwner {\n', '        allocTokenHolder = _tokenHolder;\n', '    }\n', '    \n', '    /// @dev This owner allocate token for candy airdrop\n', '    /// @param _owners The address of the account that owns the token\n', '    /// @param _values The amount of tokens\n', '\tfunction allocateToken(address[] _owners, uint256[] _values) public onlyOwners(msg.sender) {\n', '\t   require (_owners.length == _values.length);\n', '       for(uint i = 0; i < _owners.length ; i++){\n', '           uint256 value = _values[i] * 10 ** decimals;\n', '           require(ERC20Token(USEAddr).transferFrom(allocTokenHolder, _owners[i], value) == true);\n', '        }\n', '    }\n', '}']