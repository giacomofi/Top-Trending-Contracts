['pragma solidity  ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20Interface {\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    is replaced with:\n', '    uint public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// Total amount of tokens\n', '    uint public totalSupply;\n', '\n', '    /**\n', '     * @dev Get the account balance of another account with address _owner\n', '     * @param _owner address The address from which the balance will be retrieved\n', '     * @return uint The balance\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '\n', '    /**\n', '     * @dev Send _value amount of tokens to address _to from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Send _value amount of tokens from address _from to address _to\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Allow _spender to withdraw from your account, multiple times, up to the _value amount\n', '     * If this function is called again it overwrites the current allowance with _value.\n', '     * this function is required for some DEX functionality\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '    /// Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    /// Triggered whenever approve(address _spender, uint _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    /// Triggered when _value of tokens are minted for _owner\n', '    event Mint(address _owner, uint _value);\n', '    /// Triggered when mint finished\n', '    event MintFinished();\n', '    /// This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint _value);\n', '}\n', '\n', 'contract ERC20Token is ERC20Interface {\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        require(_value <= balances[msg.sender]);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        _transferFrom(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        // TODO: Revert _value if we have some problems with transfer\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferFrom(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0)); // Use burnTokens for this case\n', '        require(_value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract TokenReceiver {\n', '  function tokenFallback(address _sender, address _origin, uint _value) public returns (bool ok);\n', '}\n', '\n', 'contract Burnable is ERC20Interface {\n', '\n', '  /**\n', '   * @dev Function to burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function burnTokens(uint _value) public returns (bool success);\n', '\n', '  /**\n', '   * @dev Function to burns a specific amount of tokens from another account that `msg.sender`\n', '   * was approved to burn tokens for using `approve` earlier.\n', '   * @param _from The address to burn tokens from.\n', '   * @param _value The amount of token to be burned.\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function burnFrom(address _from, uint _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LEN is ERC20Token, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public name = "LIQNET";         // Original name\n', '    string public symbol = "LEN";                   // Token identifier\n', '    uint8 public decimals = 8;                      // How many decimals to show\n', '    bool public mintingFinished;         // Status of minting\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param target The address that will receive the minted tokens\n', '     * @param mintedAmount The amount of tokens to mint\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function mintTokens(address target, uint mintedAmount) public onlyOwner returns (bool success) {\n', '        require(!mintingFinished); // Can minting\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        balances[target] = balances[target].add(mintedAmount);\n', '        Mint(target, mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function finishMinting() public onlyOwner returns (bool success) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '      /**\n', '       * @dev Function that is called when a user or another contract wants\n', '       *  to transfer funds .\n', '       * @return A boolean that indicates if the operation was successful\n', '       */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            return _transferToContract(msg.sender, _to, _value);\n', '        } else {\n', '            _transferFrom(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function burnTokens(uint _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to burns a specific amount of tokens from another account that `msg.sender`\n', '     * was approved to burn tokens for using `approve` earlier.\n', '     * @param _from The address to burn tokens from.\n', '     * @param _value The amount of token to be burned.\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function burnFrom(address _from, uint _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        Burn(_from, _value);\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '             //retrieve the size of the code on target address, this needs assembly\n', '             length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '     }\n', '\n', '   /**\n', '    * @dev Function that is called when a user or another contract wants\n', '    *  to transfer funds to smart-contract\n', '    * @return A boolean that indicates if the operation was successful\n', '    */\n', '    function _transferToContract(address _from, address _to, uint _value) private returns (bool success) {\n', '        _transferFrom(msg.sender, _to, _value);\n', '        TokenReceiver receiver = TokenReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, this, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity  ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20Interface {\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    is replaced with:\n', '    uint public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// Total amount of tokens\n', '    uint public totalSupply;\n', '\n', '    /**\n', '     * @dev Get the account balance of another account with address _owner\n', '     * @param _owner address The address from which the balance will be retrieved\n', '     * @return uint The balance\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '\n', '    /**\n', '     * @dev Send _value amount of tokens to address _to from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Send _value amount of tokens from address _from to address _to\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Allow _spender to withdraw from your account, multiple times, up to the _value amount\n', '     * If this function is called again it overwrites the current allowance with _value.\n', '     * this function is required for some DEX functionality\n', '     *\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '    /// Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    /// Triggered whenever approve(address _spender, uint _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    /// Triggered when _value of tokens are minted for _owner\n', '    event Mint(address _owner, uint _value);\n', '    /// Triggered when mint finished\n', '    event MintFinished();\n', '    /// This notifies clients about the amount burnt\n', '    event Burn(address indexed _from, uint _value);\n', '}\n', '\n', 'contract ERC20Token is ERC20Interface {\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        require(_value <= balances[msg.sender]);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        _transferFrom(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        // TODO: Revert _value if we have some problems with transfer\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferFrom(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0)); // Use burnTokens for this case\n', '        require(_value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract TokenReceiver {\n', '  function tokenFallback(address _sender, address _origin, uint _value) public returns (bool ok);\n', '}\n', '\n', 'contract Burnable is ERC20Interface {\n', '\n', '  /**\n', '   * @dev Function to burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function burnTokens(uint _value) public returns (bool success);\n', '\n', '  /**\n', '   * @dev Function to burns a specific amount of tokens from another account that `msg.sender`\n', '   * was approved to burn tokens for using `approve` earlier.\n', '   * @param _from The address to burn tokens from.\n', '   * @param _value The amount of token to be burned.\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function burnFrom(address _from, uint _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LEN is ERC20Token, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public name = "LIQNET";         // Original name\n', '    string public symbol = "LEN";                   // Token identifier\n', '    uint8 public decimals = 8;                      // How many decimals to show\n', '    bool public mintingFinished;         // Status of minting\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param target The address that will receive the minted tokens\n', '     * @param mintedAmount The amount of tokens to mint\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function mintTokens(address target, uint mintedAmount) public onlyOwner returns (bool success) {\n', '        require(!mintingFinished); // Can minting\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        balances[target] = balances[target].add(mintedAmount);\n', '        Mint(target, mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function finishMinting() public onlyOwner returns (bool success) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '      /**\n', '       * @dev Function that is called when a user or another contract wants\n', '       *  to transfer funds .\n', '       * @return A boolean that indicates if the operation was successful\n', '       */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            return _transferToContract(msg.sender, _to, _value);\n', '        } else {\n', '            _transferFrom(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function burnTokens(uint _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to burns a specific amount of tokens from another account that `msg.sender`\n', '     * was approved to burn tokens for using `approve` earlier.\n', '     * @param _from The address to burn tokens from.\n', '     * @param _value The amount of token to be burned.\n', '     * @return A boolean that indicates if the operation was successful\n', '     */\n', '    function burnFrom(address _from, uint _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        Burn(_from, _value);\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '             //retrieve the size of the code on target address, this needs assembly\n', '             length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '     }\n', '\n', '   /**\n', '    * @dev Function that is called when a user or another contract wants\n', '    *  to transfer funds to smart-contract\n', '    * @return A boolean that indicates if the operation was successful\n', '    */\n', '    function _transferToContract(address _from, address _to, uint _value) private returns (bool success) {\n', '        _transferFrom(msg.sender, _to, _value);\n', '        TokenReceiver receiver = TokenReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, this, _value);\n', '        return true;\n', '    }\n', '}']
