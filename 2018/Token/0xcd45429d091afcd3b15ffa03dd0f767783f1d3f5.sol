['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MinerOnePromoToken is ERC20, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public constant name = "MinerOne.io Discount";\n', '  \tstring public constant symbol = "MIO DISCOUNT";\n', '  \tuint8 public constant decimals = 18;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t*\n', '\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t* race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t* @param _owner address The address which owns the funds.\n', '\t* @param _spender address The address which will spend the funds.\n', '\t* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t*/\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _addedValue The amount of tokens to increase the allowance by.\n', '\t*/\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To decrement\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t*/\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t  allowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t  allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to mint tokens\n', '\t* @param _to The address that will receive the minted tokens.\n', '\t* @param _amount The amount of tokens to mint.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '  \tfunction mintTokens(address[] _receivers, uint256[] _amounts) onlyOwner external  {\n', '\t\trequire(_receivers.length > 0 && _receivers.length <= 100);\n', '\t\trequire(_receivers.length == _amounts.length);\n', '\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\n', '\t\t\taddress receiver = _receivers[i];\n', '\t\t\tuint256 amount = _amounts[i];\n', '\n', '\t  \t\trequire(receiver != address(0));\n', '\t  \t\trequire(amount > 0);\n', '\n', '\t\t\tmint(receiver, amount);\n', '\t\t}\n', '  \t}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MinerOnePromoToken is ERC20, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public constant name = "MinerOne.io Discount";\n', '  \tstring public constant symbol = "MIO DISCOUNT";\n', '  \tuint8 public constant decimals = 18;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t*\n', '\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t* @param _owner address The address which owns the funds.\n', '\t* @param _spender address The address which will spend the funds.\n', '\t* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t*/\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _addedValue The amount of tokens to increase the allowance by.\n', '\t*/\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To decrement\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t*/\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t  allowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t  allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to mint tokens\n', '\t* @param _to The address that will receive the minted tokens.\n', '\t* @param _amount The amount of tokens to mint.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '  \tfunction mintTokens(address[] _receivers, uint256[] _amounts) onlyOwner external  {\n', '\t\trequire(_receivers.length > 0 && _receivers.length <= 100);\n', '\t\trequire(_receivers.length == _amounts.length);\n', '\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\n', '\t\t\taddress receiver = _receivers[i];\n', '\t\t\tuint256 amount = _amounts[i];\n', '\n', '\t  \t\trequire(receiver != address(0));\n', '\t  \t\trequire(amount > 0);\n', '\n', '\t\t\tmint(receiver, amount);\n', '\t\t}\n', '  \t}\n', '}']
