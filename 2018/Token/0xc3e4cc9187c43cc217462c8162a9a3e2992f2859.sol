['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract MultiTokenBasics {\n', '\n', '    function totalSupply(uint256 _tokenId) public view returns (uint256);\n', '\n', '    function balanceOf(uint256 _tokenId, address _owner) public view returns (uint256);\n', '\n', '    function allowance(uint256 _tokenId, address _owner, address _spender) public view returns (uint256);\n', '\n', '    function transfer(uint256 _tokenId, address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool);\n', '\n', '\n', '    event Transfer(uint256 indexed tokenId, address indexed from, address indexed to, uint256 value);\n', '    event Approval(uint256 indexed tokenId, address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract MultiToken is Ownable, MultiTokenBasics {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(uint256 => mapping(address => mapping(address => uint256))) private allowed;\n', '    mapping(uint256 => mapping(address => uint256)) private balance;\n', '    mapping(uint256 => uint256) private totalSupply_;\n', '\n', '\n', '    uint8 public decimals = 18;\n', '    uint256 public mask = 0xffffffff;\n', '\n', '\n', '\n', '    /**\n', '    * @dev Throws if _tokenId not exists\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    */\n', '\n', '    modifier existingToken(uint256 _tokenId) {\n', '        require(totalSupply_[_tokenId] > 0 && (_tokenId & mask == _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if  _tokenId exists\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    */\n', '\n', '    modifier notExistingToken(uint256 _tokenId) {\n', '        require(totalSupply_[_tokenId] == 0 && (_tokenId & mask == _tokenId));\n', '        _;\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    /**\n', '    * @dev create new subtoken with unique tokenId\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '\n', '    function createNewSubtoken(uint256 _tokenId, address _to, uint256 _value) notExistingToken(_tokenId) onlyOwner() public returns (bool) {\n', '        require(_value > 0);\n', '        balance[_tokenId][_to] = _value;\n', '        totalSupply_[_tokenId] = _value;\n', '        Transfer(_tokenId, address(0), _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '\n', '    function totalSupply(uint256 _tokenId) existingToken(_tokenId) public view returns (uint256) {\n', '        return totalSupply_[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '\n', '    function balanceOf(uint256 _tokenId, address _owner) existingToken(_tokenId) public view returns (uint256) {\n', '        return balance[_tokenId][_owner];\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '\n', '    function allowance(uint256 _tokenId, address _owner, address _spender) existingToken(_tokenId) public view returns (uint256) {\n', '        return allowed[_tokenId][_owner][_spender];\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '\n', '    function transfer(uint256 _tokenId, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\n', '        require(_to != address(0));\n', '        var _sender = msg.sender;\n', '        var balances = balance[_tokenId];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_sender] = balances[_sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_tokenId, _sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '\n', '    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\n', '        address _sender = msg.sender;\n', '        var balances = balance[_tokenId];\n', '        var tokenAllowed = allowed[_tokenId];\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= tokenAllowed[_from][_sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        tokenAllowed[_from][_sender] = tokenAllowed[_from][_sender].sub(_value);\n', '        Transfer(_tokenId, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '\n', '\n', '\n', '    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool) {\n', '        var _sender = msg.sender;\n', '        allowed[_tokenId][_sender][_spender] = _value;\n', '        Approval(_tokenId, _sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract MultiTokenBasics {\n', '\n', '    function totalSupply(uint256 _tokenId) public view returns (uint256);\n', '\n', '    function balanceOf(uint256 _tokenId, address _owner) public view returns (uint256);\n', '\n', '    function allowance(uint256 _tokenId, address _owner, address _spender) public view returns (uint256);\n', '\n', '    function transfer(uint256 _tokenId, address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool);\n', '\n', '\n', '    event Transfer(uint256 indexed tokenId, address indexed from, address indexed to, uint256 value);\n', '    event Approval(uint256 indexed tokenId, address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract MultiToken is Ownable, MultiTokenBasics {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(uint256 => mapping(address => mapping(address => uint256))) private allowed;\n', '    mapping(uint256 => mapping(address => uint256)) private balance;\n', '    mapping(uint256 => uint256) private totalSupply_;\n', '\n', '\n', '    uint8 public decimals = 18;\n', '    uint256 public mask = 0xffffffff;\n', '\n', '\n', '\n', '    /**\n', '    * @dev Throws if _tokenId not exists\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    */\n', '\n', '    modifier existingToken(uint256 _tokenId) {\n', '        require(totalSupply_[_tokenId] > 0 && (_tokenId & mask == _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if  _tokenId exists\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    */\n', '\n', '    modifier notExistingToken(uint256 _tokenId) {\n', '        require(totalSupply_[_tokenId] == 0 && (_tokenId & mask == _tokenId));\n', '        _;\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    /**\n', '    * @dev create new subtoken with unique tokenId\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '\n', '    function createNewSubtoken(uint256 _tokenId, address _to, uint256 _value) notExistingToken(_tokenId) onlyOwner() public returns (bool) {\n', '        require(_value > 0);\n', '        balance[_tokenId][_to] = _value;\n', '        totalSupply_[_tokenId] = _value;\n', '        Transfer(_tokenId, address(0), _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '\n', '    function totalSupply(uint256 _tokenId) existingToken(_tokenId) public view returns (uint256) {\n', '        return totalSupply_[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '\n', '    function balanceOf(uint256 _tokenId, address _owner) existingToken(_tokenId) public view returns (uint256) {\n', '        return balance[_tokenId][_owner];\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '\n', '    function allowance(uint256 _tokenId, address _owner, address _spender) existingToken(_tokenId) public view returns (uint256) {\n', '        return allowed[_tokenId][_owner][_spender];\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '\n', '    function transfer(uint256 _tokenId, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\n', '        require(_to != address(0));\n', '        var _sender = msg.sender;\n', '        var balances = balance[_tokenId];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_sender] = balances[_sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_tokenId, _sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '\n', '    function transferFrom(uint256 _tokenId, address _from, address _to, uint256 _value) existingToken(_tokenId) public returns (bool) {\n', '        address _sender = msg.sender;\n', '        var balances = balance[_tokenId];\n', '        var tokenAllowed = allowed[_tokenId];\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= tokenAllowed[_from][_sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        tokenAllowed[_from][_sender] = tokenAllowed[_from][_sender].sub(_value);\n', '        Transfer(_tokenId, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _tokenId uint256 is subtoken identifier\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '\n', '\n', '\n', '    function approve(uint256 _tokenId, address _spender, uint256 _value) public returns (bool) {\n', '        var _sender = msg.sender;\n', '        allowed[_tokenId][_sender][_spender] = _value;\n', '        Approval(_tokenId, _sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '}']
