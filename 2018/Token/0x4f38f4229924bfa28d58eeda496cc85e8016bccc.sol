['/* -------------------------------------------------------------------------\n', '\n', '  /$$$$$$            /$$       /$$        /$$$$$$            /$$          \n', ' /$$__  $$          | $$      | $$       /$$__  $$          |__/          \n', '| $$  \\__/  /$$$$$$ | $$$$$$$ | $$$$$$$ | $$  \\__/  /$$$$$$  /$$ /$$$$$$$ \n', '| $$       /$$__  $$| $$__  $$| $$__  $$| $$       /$$__  $$| $$| $$__  $$\n', '| $$      | $$$$$$$$| $$  \\ $$| $$  \\ $$| $$      | $$  \\ $$| $$| $$  \\ $$\n', '| $$    $$| $$_____/| $$  | $$| $$  | $$| $$    $$| $$  | $$| $$| $$  | $$\n', '|  $$$$$$/|  $$$$$$$| $$  | $$| $$  | $$|  $$$$$$/|  $$$$$$/| $$| $$  | $$\n', ' \\______/  \\_______/|__/  |__/|__/  |__/ \\______/  \\______/ |__/|__/  |__/\n', '\n', '\n', '                === PROOF OF WORK ERC20 EXTENSION ===\n', ' \n', '                         Mk 1 aka CehhCoin\n', '   \n', '    Intro:\n', '   All addresses have CehhCoin assigned to them from the moment this\n', '   contract is mined. The amount assigned to each address is equal to\n', '   the value of the last 7 bits of the address. Anyone who finds an \n', '   address with CEHH can transfer it to a personal wallet.\n', '   This system allows "miners" to not have to wait in line, and gas\n', '   price rushing does not become a problem.\n', '   \n', '    How:\n', '   The transfer() function has been modified to include the equivalent\n', '   of a mint() function that may be called once per address.\n', '   \n', '    Why:\n', '   Instead of premining everything, the supply goes up until the \n', '   transaction fee required to "mine" CehhCoins matches the price of \n', '   255 CehhCoins. After that point CehhCoins will follow a price \n', '   theoretically proportional to gas prices. This gives the community\n', '   a way to see gas prices as a number. Added to this, I hope to\n', '   use CehhCoin as a starting point for a new paradigm of keeping\n', '   PoW as an open possibility without having to launch a standalone\n', '   blockchain.\n', '   \n', '   \n', '  /$$$$$$            /$$       /$$        /$$$$$$            /$$          \n', ' /$$__  $$          | $$      | $$       /$$__  $$          |__/          \n', '| $$  \\__/  /$$$$$$ | $$$$$$$ | $$$$$$$ | $$  \\__/  /$$$$$$  /$$ /$$$$$$$ \n', '| $$       /$$__  $$| $$__  $$| $$__  $$| $$       /$$__  $$| $$| $$__  $$\n', '| $$      | $$$$$$$$| $$  \\ $$| $$  \\ $$| $$      | $$  \\ $$| $$| $$  \\ $$\n', '| $$    $$| $$_____/| $$  | $$| $$  | $$| $$    $$| $$  | $$| $$| $$  | $$\n', '|  $$$$$$/|  $$$$$$$| $$  | $$| $$  | $$|  $$$$$$/|  $$$$$$/| $$| $$  | $$\n', ' \\______/  \\_______/|__/  |__/|__/  |__/ \\______/  \\______/ |__/|__/  |__/\n', '\n', '   \n', ' ------------------------------------------------------------------------- */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MineableToken is StandardToken, Ownable {\n', '  event Mine(address indexed to, uint256 amount);\n', '  event MiningFinished();\n', '\n', '  bool public miningFinished = false;\n', '  mapping(address => bool) claimed;\n', '\n', '\n', '  modifier canMine {\n', '    require(!miningFinished);\n', '    _;\n', '  }\n', '\n', '  \n', '  function claim() canMine public {\n', '    require(!claimed[msg.sender]);\n', '    bytes20 reward = bytes20(msg.sender) & 255;\n', '    require(reward > 0);\n', '    uint256 rewardInt = uint256(reward);\n', '    \n', '    claimed[msg.sender] = true;\n', '    totalSupply_ = totalSupply_.add(rewardInt);\n', '    balances[msg.sender] = balances[msg.sender].add(rewardInt);\n', '    Mine(msg.sender, rewardInt);\n', '    Transfer(address(0), msg.sender, rewardInt);\n', '  }\n', '  \n', '  function claimAndTransfer(address _owner) canMine public {\n', '    require(!claimed[msg.sender]);\n', '    bytes20 reward = bytes20(msg.sender) & 255;\n', '    require(reward > 0);\n', '    uint256 rewardInt = uint256(reward);\n', '    \n', '    claimed[msg.sender] = true;\n', '    totalSupply_ = totalSupply_.add(rewardInt);\n', '    balances[_owner] = balances[_owner].add(rewardInt);\n', '    Mine(msg.sender, rewardInt);\n', '    Transfer(address(0), _owner, rewardInt);\n', '  }\n', '  \n', '  function checkReward() view public returns(uint256){\n', '    return uint256(bytes20(msg.sender) & 255);\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender] ||\n', '           (!claimed[msg.sender] && _value <= balances[msg.sender] + uint256(bytes20(msg.sender) & 255))\n', '           );\n', '\n', '    if(!claimed[msg.sender]) claim();\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner] + (claimed[_owner] ? 0 : uint256(bytes20(_owner) & 255));\n', '  }\n', '}\n', '\n', 'contract CehhCoin is MineableToken {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '\n', '  function CehhCoin(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}']