['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transferInternal(address to, uint256 value) internal returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transferInternal(address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowanceInternal(address owner, address spender) internal view returns (uint256);\n', '    function transferFromInternal(address from, address to, uint256 value) internal returns (bool);\n', '    function approveInternal(address spender, uint256 value) internal returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approveInternal(address _spender, uint256 _value) internal returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowanceInternal(address _owner, address _spender) internal view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApprovalInternal(address _spender, uint _addedValue) internal returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/MintableToken.sol\n', '\n', '//import "./StandardToken.sol";\n', '//import "../../ownership/Ownable.sol";\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    address public icoContractAddress;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the icoContract.\n', '    */\n', '    modifier onlyIcoContract() {\n', '        require(msg.sender == icoContractAddress);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyIcoContract canMint external returns (bool) {\n', '        //return true;\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint external returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transferInternal(address _to, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.transferInternal(_to, _value);\n', '    }\n', '\n', '    function transferFromInternal(address _from, address _to, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.transferFromInternal(_from, _to, _value);\n', '    }\n', '\n', '    function approveInternal(address _spender, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.approveInternal(_spender, _value);\n', '    }\n', '\n', '    function increaseApprovalInternal(address _spender, uint _addedValue) internal whenNotPaused returns (bool success) {\n', '        return super.increaseApprovalInternal(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal whenNotPaused returns (bool success) {\n', '        return super.decreaseApprovalInternal(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="89fbece4eae6c9bb">[email&#160;protected]</span>π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/IiinoCoin.sol\n', '\n', 'contract IiinoCoin is MintableToken, PausableToken, ReentrancyGuard {\n', '    event RewardMint(address indexed to, uint256 amount);\n', '    event RewardMintingAmt(uint256 _amountOfTokensMintedPreCycle);\n', '    event ResetReward();\n', '    event RedeemReward(address indexed to, uint256 value);\n', '\n', '    event CreatedEscrow(bytes32 _tradeHash);\n', '    event ReleasedEscrow(bytes32 _tradeHash);\n', '    event Dispute(bytes32 _tradeHash);\n', '    event CancelledBySeller(bytes32 _tradeHash);\n', '    event CancelledByBuyer(bytes32 _tradeHash);\n', '    event BuyerArbitratorSet(bytes32 _tradeHash);\n', '    event SellerArbitratorSet(bytes32 _tradeHash);\n', '    event DisputeResolved (bytes32 _tradeHash);\n', '    event IcoContractAddressSet (address _icoContractAddress);\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mapping of rewards to beneficiaries of the reward\n', '    mapping(address => uint256) public reward;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public amountMintPerDuration; // amount to mint during one minting cycle\n', '    uint256 public durationBetweenRewardMints; // reward miniting cycle duration\n', '    uint256 public previousDistribution; //EPOCH time of the previous distribution\n', '    uint256 public totalRewardsDistributed; //Total amount of the rewards distributed\n', '    uint256 public totalRewardsRedeemed; //Total amount of the rewards redeemed\n', '    uint256 public minimumRewardWithdrawalLimit; //The minimum limit of rewards that can be withdrawn\n', '    uint256 public rewardAvailableCurrentDistribution; //The amount of rewards available for the current Distribution.\n', '\n', '    function IiinoCoin(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        uint256 _amountMintPerDuration,\n', '        uint256 _durationBetweenRewardMints\n', '    ) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '\n', '        amountMintPerDuration = _amountMintPerDuration;\n', '        durationBetweenRewardMints = _durationBetweenRewardMints;\n', '        previousDistribution = now; // To initialize the previous distribution to the time of the creation of the contract\n', '        totalRewardsDistributed = 0;\n', '        totalRewardsRedeemed = 0;\n', '        minimumRewardWithdrawalLimit = 10 ether; //Defaulted to 10 iiinos represented in iii\n', '        rewardAvailableCurrentDistribution = amountMintPerDuration;\n', '        icoContractAddress = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev set the icoContractAddress in the token so that the ico Contract can mint the token\n', '    * @param _icoContractAddress array of address. The address to which the reward needs to be distributed\n', '    */\n', '    function setIcoContractAddress(\n', '        address _icoContractAddress\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '        require (_icoContractAddress != address(0));\n', '        emit IcoContractAddressSet(_icoContractAddress);\n', '        icoContractAddress = _icoContractAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev distribute reward tokens to the list of addresses based on their proportion\n', '    * @param _rewardAdresses array of address. The address to which the reward needs to be distributed\n', '    */\n', '    function batchDistributeReward(\n', '        address[] _rewardAdresses,\n', '        uint256[] _amountOfReward,\n', '        uint256 _timestampOfDistribution\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '        require(_timestampOfDistribution > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\n', '        require(_rewardAdresses.length == _amountOfReward.length); // To verify the length of the arrays are the same.\n', '\n', '        uint256 rewardDistributed = 0;\n', '\n', '        for (uint j = 0; j < _rewardAdresses.length; j++) {\n', '            rewardMint(_rewardAdresses[j], _amountOfReward[j]);\n', '            rewardDistributed = rewardDistributed.add(_amountOfReward[j]);\n', '        }\n', '        require(rewardAvailableCurrentDistribution >= rewardDistributed);\n', '        totalRewardsDistributed = totalRewardsDistributed.add(rewardDistributed);\n', '        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(rewardDistributed);\n', '    }\n', '\n', '    /**\n', '    * @dev distribute reward tokens to a addresse based on the proportion\n', '    * @param _rewardAddress The address to which the reward needs to be distributed\n', '    */\n', '    function distributeReward(\n', '        address _rewardAddress,\n', '        uint256 _amountOfReward,\n', '        uint256 _timestampOfDistribution\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '\n', '        require(_timestampOfDistribution > previousDistribution);\n', '        require(_timestampOfDistribution < previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\n', '        //reward[_rewardAddress] = reward[_rewardAddress].add(_amountOfReward);\n', '        rewardMint(_rewardAddress, _amountOfReward);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev reset reward tokensfor the new duration\n', '    */\n', '    function resetReward() external nonReentrant onlyOwner whenNotPaused {\n', '        require(now > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        previousDistribution = previousDistribution.add(durationBetweenRewardMints); // To set the new distribution period as the previous distribution timestamp\n', '        rewardAvailableCurrentDistribution = amountMintPerDuration;\n', '        emit ResetReward();\n', '    }\n', '\n', '    /**\n', '   * @dev Redeem Reward tokens from one rewards array to balances array\n', '   * @param _beneficiary address The address which contains the reward as well as the address to which the balance will be transferred\n', '   * @param _value uint256 the amount of tokens to be redeemed\n', '   */\n', '    function redeemReward(\n', '        address _beneficiary,\n', '        uint256 _value\n', '    ) external nonReentrant whenNotPaused{\n', '        //Need to consider what happens to rewards after the stopping of minting process\n', '        require(msg.sender == _beneficiary);\n', '        require(_value >= minimumRewardWithdrawalLimit);\n', '        require(reward[_beneficiary] >= _value);\n', '        reward[_beneficiary] = reward[_beneficiary].sub(_value);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_value);\n', '        totalRewardsRedeemed = totalRewardsRedeemed.add(_value);\n', '        emit RedeemReward(_beneficiary, _value);\n', '    }\n', '\n', '    function rewardMint(\n', '        address _to,\n', '        uint256 _amount\n', '    ) onlyOwner canMint whenNotPaused internal returns (bool) {\n', '        require(_amount > 0);\n', '        require(_to != address(0));\n', '        require(rewardAvailableCurrentDistribution >= _amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        reward[_to] = reward[_to].add(_amount);\n', '        totalRewardsDistributed = totalRewardsDistributed.add(_amount);\n', '        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(_amount);\n', '        emit RewardMint(_to, _amount);\n', '        //Transfer(address(0), _to, _amount); //balance of the user will only be updated on claiming the coin\n', '        return true;\n', '    }\n', '    function userRewardAccountBalance(\n', '        address _address\n', '    ) whenNotPaused external view returns (uint256) {\n', '        require(_address != address(0));\n', '        return reward[_address];\n', '    }\n', '    function changeRewardMintingAmount(\n', '        uint256 _newRewardMintAmt\n', '    ) whenNotPaused nonReentrant onlyOwner external {\n', '        require(_newRewardMintAmt < amountMintPerDuration);\n', '        amountMintPerDuration = _newRewardMintAmt;\n', '        emit RewardMintingAmt(_newRewardMintAmt);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external nonReentrant returns (bool) {\n', '        return transferFromInternal(_from, _to, _value);\n', '    }\n', '    function approve(address _spender, uint256 _value) external nonReentrant returns (bool) {\n', '        return approveInternal(_spender, _value);\n', '    }\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowanceInternal(_owner, _spender);\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) external nonReentrant returns (bool) {\n', '        return increaseApprovalInternal(_spender, _addedValue);\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external nonReentrant returns (bool) {\n', '        return decreaseApprovalInternal(_spender, _subtractedValue);\n', '    }\n', '    function transfer(address _to, uint256 _value) external nonReentrant returns (bool) {\n', '        return transferInternal(_to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transferInternal(address to, uint256 value) internal returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transferInternal(address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowanceInternal(address owner, address spender) internal view returns (uint256);\n', '    function transferFromInternal(address from, address to, uint256 value) internal returns (bool);\n', '    function approveInternal(address spender, uint256 value) internal returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approveInternal(address _spender, uint256 _value) internal returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowanceInternal(address _owner, address _spender) internal view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApprovalInternal(address _spender, uint _addedValue) internal returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/MintableToken.sol\n', '\n', '//import "./StandardToken.sol";\n', '//import "../../ownership/Ownable.sol";\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    address public icoContractAddress;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the icoContract.\n', '    */\n', '    modifier onlyIcoContract() {\n', '        require(msg.sender == icoContractAddress);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyIcoContract canMint external returns (bool) {\n', '        //return true;\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint external returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transferInternal(address _to, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.transferInternal(_to, _value);\n', '    }\n', '\n', '    function transferFromInternal(address _from, address _to, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.transferFromInternal(_from, _to, _value);\n', '    }\n', '\n', '    function approveInternal(address _spender, uint256 _value) internal whenNotPaused returns (bool) {\n', '        return super.approveInternal(_spender, _value);\n', '    }\n', '\n', '    function increaseApprovalInternal(address _spender, uint _addedValue) internal whenNotPaused returns (bool success) {\n', '        return super.increaseApprovalInternal(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal whenNotPaused returns (bool success) {\n', '        return super.decreaseApprovalInternal(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/IiinoCoin.sol\n', '\n', 'contract IiinoCoin is MintableToken, PausableToken, ReentrancyGuard {\n', '    event RewardMint(address indexed to, uint256 amount);\n', '    event RewardMintingAmt(uint256 _amountOfTokensMintedPreCycle);\n', '    event ResetReward();\n', '    event RedeemReward(address indexed to, uint256 value);\n', '\n', '    event CreatedEscrow(bytes32 _tradeHash);\n', '    event ReleasedEscrow(bytes32 _tradeHash);\n', '    event Dispute(bytes32 _tradeHash);\n', '    event CancelledBySeller(bytes32 _tradeHash);\n', '    event CancelledByBuyer(bytes32 _tradeHash);\n', '    event BuyerArbitratorSet(bytes32 _tradeHash);\n', '    event SellerArbitratorSet(bytes32 _tradeHash);\n', '    event DisputeResolved (bytes32 _tradeHash);\n', '    event IcoContractAddressSet (address _icoContractAddress);\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mapping of rewards to beneficiaries of the reward\n', '    mapping(address => uint256) public reward;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public amountMintPerDuration; // amount to mint during one minting cycle\n', '    uint256 public durationBetweenRewardMints; // reward miniting cycle duration\n', '    uint256 public previousDistribution; //EPOCH time of the previous distribution\n', '    uint256 public totalRewardsDistributed; //Total amount of the rewards distributed\n', '    uint256 public totalRewardsRedeemed; //Total amount of the rewards redeemed\n', '    uint256 public minimumRewardWithdrawalLimit; //The minimum limit of rewards that can be withdrawn\n', '    uint256 public rewardAvailableCurrentDistribution; //The amount of rewards available for the current Distribution.\n', '\n', '    function IiinoCoin(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        uint256 _amountMintPerDuration,\n', '        uint256 _durationBetweenRewardMints\n', '    ) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '\n', '        amountMintPerDuration = _amountMintPerDuration;\n', '        durationBetweenRewardMints = _durationBetweenRewardMints;\n', '        previousDistribution = now; // To initialize the previous distribution to the time of the creation of the contract\n', '        totalRewardsDistributed = 0;\n', '        totalRewardsRedeemed = 0;\n', '        minimumRewardWithdrawalLimit = 10 ether; //Defaulted to 10 iiinos represented in iii\n', '        rewardAvailableCurrentDistribution = amountMintPerDuration;\n', '        icoContractAddress = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev set the icoContractAddress in the token so that the ico Contract can mint the token\n', '    * @param _icoContractAddress array of address. The address to which the reward needs to be distributed\n', '    */\n', '    function setIcoContractAddress(\n', '        address _icoContractAddress\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '        require (_icoContractAddress != address(0));\n', '        emit IcoContractAddressSet(_icoContractAddress);\n', '        icoContractAddress = _icoContractAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev distribute reward tokens to the list of addresses based on their proportion\n', '    * @param _rewardAdresses array of address. The address to which the reward needs to be distributed\n', '    */\n', '    function batchDistributeReward(\n', '        address[] _rewardAdresses,\n', '        uint256[] _amountOfReward,\n', '        uint256 _timestampOfDistribution\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '        require(_timestampOfDistribution > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\n', '        require(_rewardAdresses.length == _amountOfReward.length); // To verify the length of the arrays are the same.\n', '\n', '        uint256 rewardDistributed = 0;\n', '\n', '        for (uint j = 0; j < _rewardAdresses.length; j++) {\n', '            rewardMint(_rewardAdresses[j], _amountOfReward[j]);\n', '            rewardDistributed = rewardDistributed.add(_amountOfReward[j]);\n', '        }\n', '        require(rewardAvailableCurrentDistribution >= rewardDistributed);\n', '        totalRewardsDistributed = totalRewardsDistributed.add(rewardDistributed);\n', '        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(rewardDistributed);\n', '    }\n', '\n', '    /**\n', '    * @dev distribute reward tokens to a addresse based on the proportion\n', '    * @param _rewardAddress The address to which the reward needs to be distributed\n', '    */\n', '    function distributeReward(\n', '        address _rewardAddress,\n', '        uint256 _amountOfReward,\n', '        uint256 _timestampOfDistribution\n', '    ) external nonReentrant onlyOwner whenNotPaused {\n', '\n', '        require(_timestampOfDistribution > previousDistribution);\n', '        require(_timestampOfDistribution < previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\n', '        //reward[_rewardAddress] = reward[_rewardAddress].add(_amountOfReward);\n', '        rewardMint(_rewardAddress, _amountOfReward);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev reset reward tokensfor the new duration\n', '    */\n', '    function resetReward() external nonReentrant onlyOwner whenNotPaused {\n', '        require(now > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\n', '        previousDistribution = previousDistribution.add(durationBetweenRewardMints); // To set the new distribution period as the previous distribution timestamp\n', '        rewardAvailableCurrentDistribution = amountMintPerDuration;\n', '        emit ResetReward();\n', '    }\n', '\n', '    /**\n', '   * @dev Redeem Reward tokens from one rewards array to balances array\n', '   * @param _beneficiary address The address which contains the reward as well as the address to which the balance will be transferred\n', '   * @param _value uint256 the amount of tokens to be redeemed\n', '   */\n', '    function redeemReward(\n', '        address _beneficiary,\n', '        uint256 _value\n', '    ) external nonReentrant whenNotPaused{\n', '        //Need to consider what happens to rewards after the stopping of minting process\n', '        require(msg.sender == _beneficiary);\n', '        require(_value >= minimumRewardWithdrawalLimit);\n', '        require(reward[_beneficiary] >= _value);\n', '        reward[_beneficiary] = reward[_beneficiary].sub(_value);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_value);\n', '        totalRewardsRedeemed = totalRewardsRedeemed.add(_value);\n', '        emit RedeemReward(_beneficiary, _value);\n', '    }\n', '\n', '    function rewardMint(\n', '        address _to,\n', '        uint256 _amount\n', '    ) onlyOwner canMint whenNotPaused internal returns (bool) {\n', '        require(_amount > 0);\n', '        require(_to != address(0));\n', '        require(rewardAvailableCurrentDistribution >= _amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        reward[_to] = reward[_to].add(_amount);\n', '        totalRewardsDistributed = totalRewardsDistributed.add(_amount);\n', '        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(_amount);\n', '        emit RewardMint(_to, _amount);\n', '        //Transfer(address(0), _to, _amount); //balance of the user will only be updated on claiming the coin\n', '        return true;\n', '    }\n', '    function userRewardAccountBalance(\n', '        address _address\n', '    ) whenNotPaused external view returns (uint256) {\n', '        require(_address != address(0));\n', '        return reward[_address];\n', '    }\n', '    function changeRewardMintingAmount(\n', '        uint256 _newRewardMintAmt\n', '    ) whenNotPaused nonReentrant onlyOwner external {\n', '        require(_newRewardMintAmt < amountMintPerDuration);\n', '        amountMintPerDuration = _newRewardMintAmt;\n', '        emit RewardMintingAmt(_newRewardMintAmt);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external nonReentrant returns (bool) {\n', '        return transferFromInternal(_from, _to, _value);\n', '    }\n', '    function approve(address _spender, uint256 _value) external nonReentrant returns (bool) {\n', '        return approveInternal(_spender, _value);\n', '    }\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowanceInternal(_owner, _spender);\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) external nonReentrant returns (bool) {\n', '        return increaseApprovalInternal(_spender, _addedValue);\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external nonReentrant returns (bool) {\n', '        return decreaseApprovalInternal(_spender, _subtractedValue);\n', '    }\n', '    function transfer(address _to, uint256 _value) external nonReentrant returns (bool) {\n', '        return transferInternal(_to, _value);\n', '    }\n', '}']
