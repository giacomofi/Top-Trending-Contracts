['pragma solidity ^0.4.24;\n', '\n', '/*********************************************************************************\n', ' *********************************************************************************\n', ' *\n', ' * Token Name: TPC Token\n', ' * Contract Name: Third Payment Circulation\n', ' * Author: kolidat#gmail.com\n', ' * Developed for: TPC LLC.\n', ' * TPC is an ERC20 Token\n', ' *\n', ' *********************************************************************************\n', ' ********************************************************************************/\n', ' \n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address who) public view returns (uint value);\n', '    function allowance(address owner, address spender ) public view returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Lockable {\n', '    bool public tokenTransfer;\n', '    address public owner;\n', '    mapping( address => bool ) public unlockaddress;\n', '    mapping( address => bool ) public lockaddress;\n', '\n', '    event Locked(address lockaddress, bool status);\n', '    event Unlocked(address unlockedaddress, bool status);\n', '\n', '    // if Token transfer\n', '    modifier isTokenTransfer {\n', '        // if token transfer is not allow\n', '        if(!tokenTransfer) {\n', '            require(unlockaddress[msg.sender]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    // This modifier check whether the contract should be in a locked\n', '    // or unlocked state, then acts and updates accordingly if\n', '    // necessary\n', '    modifier checkLock {\n', '        if (lockaddress[msg.sender]) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        tokenTransfer = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Lock Address\n', '    function lockAddress(address target, bool status)\n', '    external\n', '    isOwner\n', '    {\n', '        require(owner != target);\n', '        lockaddress[target] = status;\n', '        emit Locked(target, status);\n', '    }\n', '\n', '    // UnLock Address\n', '    function unlockAddress(address target, bool status)\n', '    external\n', '    isOwner\n', '    {\n', '        unlockaddress[target] = status;\n', '        emit Unlocked(target, status);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract TPCToken is ERC20, Lockable {\n', '    using SafeMath for uint;\n', '\n', '    mapping( address => uint ) _balances;\n', '    mapping( address => mapping( address => uint ) ) _approvals;\n', '    uint _supply;\n', '    string public constant name = "TPC Token";\n', '    string public constant symbol = "TPC";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    event TokenBurned(address burnAddress, uint amountOfTokens);\n', '    event TokenTransfer();\n', '\n', '    constructor () public {\n', '        uint initial_balance = 2 * 10 ** 28; // Total supply is 20 billions TPC Tokens\n', '        _balances[msg.sender] = initial_balance;\n', '        _supply = initial_balance;\n', '    }\n', '\n', '    function totalSupply() view public returns (uint supply) {\n', '        return _supply;\n', '    }\n', '\n', '    function balanceOf(address who) view public returns (uint value) {\n', '        return _balances[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) view public returns (uint _allowance) {\n', '        return _approvals[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', '        require(_balances[msg.sender] >= value);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', '        // if you don&#39;t have enough balance, throw\n', '        require(_balances[from] >= value);\n', '        // if you don&#39;t have approval, throw\n', '        require(_approvals[from][msg.sender] >= value);\n', '        // transfer and return true\n', '        _approvals[from][msg.sender] = _approvals[from][msg.sender].sub(value);\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', '        _approvals[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    // burnToken burn tokensAmount for sender balance\n', '    function burnTokens(uint tokensAmount)\n', '    isTokenTransfer\n', '    external\n', '    {\n', '        require(_balances[msg.sender] >= tokensAmount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(tokensAmount);\n', '        _supply = _supply.sub(tokensAmount);\n', '        emit TokenBurned(msg.sender, tokensAmount);\n', '    }\n', '\n', '    function enableTokenTransfer()\n', '    external\n', '    isOwner {\n', '        tokenTransfer = true;\n', '        emit TokenTransfer();\n', '    }\n', '\n', '    function disableTokenTransfer()\n', '    external\n', '    isOwner {\n', '        tokenTransfer = false;\n', '        emit TokenTransfer();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*********************************************************************************\n', ' *********************************************************************************\n', ' *\n', ' * Token Name: TPC Token\n', ' * Contract Name: Third Payment Circulation\n', ' * Author: kolidat#gmail.com\n', ' * Developed for: TPC LLC.\n', ' * TPC is an ERC20 Token\n', ' *\n', ' *********************************************************************************\n', ' ********************************************************************************/\n', ' \n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address who) public view returns (uint value);\n', '    function allowance(address owner, address spender ) public view returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Lockable {\n', '    bool public tokenTransfer;\n', '    address public owner;\n', '    mapping( address => bool ) public unlockaddress;\n', '    mapping( address => bool ) public lockaddress;\n', '\n', '    event Locked(address lockaddress, bool status);\n', '    event Unlocked(address unlockedaddress, bool status);\n', '\n', '    // if Token transfer\n', '    modifier isTokenTransfer {\n', '        // if token transfer is not allow\n', '        if(!tokenTransfer) {\n', '            require(unlockaddress[msg.sender]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    // This modifier check whether the contract should be in a locked\n', '    // or unlocked state, then acts and updates accordingly if\n', '    // necessary\n', '    modifier checkLock {\n', '        if (lockaddress[msg.sender]) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        tokenTransfer = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Lock Address\n', '    function lockAddress(address target, bool status)\n', '    external\n', '    isOwner\n', '    {\n', '        require(owner != target);\n', '        lockaddress[target] = status;\n', '        emit Locked(target, status);\n', '    }\n', '\n', '    // UnLock Address\n', '    function unlockAddress(address target, bool status)\n', '    external\n', '    isOwner\n', '    {\n', '        unlockaddress[target] = status;\n', '        emit Unlocked(target, status);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract TPCToken is ERC20, Lockable {\n', '    using SafeMath for uint;\n', '\n', '    mapping( address => uint ) _balances;\n', '    mapping( address => mapping( address => uint ) ) _approvals;\n', '    uint _supply;\n', '    string public constant name = "TPC Token";\n', '    string public constant symbol = "TPC";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    event TokenBurned(address burnAddress, uint amountOfTokens);\n', '    event TokenTransfer();\n', '\n', '    constructor () public {\n', '        uint initial_balance = 2 * 10 ** 28; // Total supply is 20 billions TPC Tokens\n', '        _balances[msg.sender] = initial_balance;\n', '        _supply = initial_balance;\n', '    }\n', '\n', '    function totalSupply() view public returns (uint supply) {\n', '        return _supply;\n', '    }\n', '\n', '    function balanceOf(address who) view public returns (uint value) {\n', '        return _balances[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) view public returns (uint _allowance) {\n', '        return _approvals[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', '        require(_balances[msg.sender] >= value);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', "        // if you don't have enough balance, throw\n", '        require(_balances[from] >= value);\n', "        // if you don't have approval, throw\n", '        require(_approvals[from][msg.sender] >= value);\n', '        // transfer and return true\n', '        _approvals[from][msg.sender] = _approvals[from][msg.sender].sub(value);\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint value) public \n', '    isTokenTransfer\n', '    checkLock\n', '    returns (bool success) {\n', '        _approvals[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    // burnToken burn tokensAmount for sender balance\n', '    function burnTokens(uint tokensAmount)\n', '    isTokenTransfer\n', '    external\n', '    {\n', '        require(_balances[msg.sender] >= tokensAmount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(tokensAmount);\n', '        _supply = _supply.sub(tokensAmount);\n', '        emit TokenBurned(msg.sender, tokensAmount);\n', '    }\n', '\n', '    function enableTokenTransfer()\n', '    external\n', '    isOwner {\n', '        tokenTransfer = true;\n', '        emit TokenTransfer();\n', '    }\n', '\n', '    function disableTokenTransfer()\n', '    external\n', '    isOwner {\n', '        tokenTransfer = false;\n', '        emit TokenTransfer();\n', '    }\n', '}']
