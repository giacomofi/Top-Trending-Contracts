['pragma solidity ^0.4.21;\n', 'pragma experimental "v0.5.0";\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SmartInvestmentFundToken {\n', '    using SafeMath for uint256;\n', '\n', '    /* Map all our our balances for issued tokens */\n', '    mapping (address => uint256) balances;\n', '\n', '    /* Map between users and their approval addresses and amounts */\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    /* The name of the contract */\n', '    string public name = "Smart Investment Fund Token v2";\n', '\n', '    /* The symbol for the contract */\n', '    string public symbol = "XSFT";\n', '\n', '    /* How many DPs are in use in this contract */\n', '    uint8 public decimals = 6;\n', '\n', '    /* Defines the current supply of the token in its own units */\n', '    uint256 public totalSupply = 722935000000;\n', '\n', '    /* Our transfer event to fire whenever we shift XSFT around */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    /* Our approval event when one user approves another to control */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* Create a new instance of this fund with links to other contracts that are required. */\n', '    function SmartInvestmentFundToken (address _tokenConvertor) public {\n', '\t\t// Give the 0x00 address the fulll supply and allow the token convertor to transfer it\n', '        balances[0] = totalSupply;\n', '        allowed[0][_tokenConvertor] = totalSupply;\n', '        emit Approval(0, _tokenConvertor, totalSupply);\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    } \n', '    \n', '    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3) returns (bool) {\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\n', '    function approve(address _spender, uint256 _amount) public onlyPayloadSize(2) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /* Gets the current allowance that has been approved for the specified spender of the owner address */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* Gets the balance of a specified account */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfer the balance from owner&#39;s account to another account */\n', '    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2) returns (bool) {\n', '        /* Check if sender has balance and for overflows */\n', '        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\n', '            return false;\n', '\n', '        /* Add and subtract new balances */\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        /* Fire notification event */\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', 'pragma experimental "v0.5.0";\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SmartInvestmentFundToken {\n', '    using SafeMath for uint256;\n', '\n', '    /* Map all our our balances for issued tokens */\n', '    mapping (address => uint256) balances;\n', '\n', '    /* Map between users and their approval addresses and amounts */\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    /* The name of the contract */\n', '    string public name = "Smart Investment Fund Token v2";\n', '\n', '    /* The symbol for the contract */\n', '    string public symbol = "XSFT";\n', '\n', '    /* How many DPs are in use in this contract */\n', '    uint8 public decimals = 6;\n', '\n', '    /* Defines the current supply of the token in its own units */\n', '    uint256 public totalSupply = 722935000000;\n', '\n', '    /* Our transfer event to fire whenever we shift XSFT around */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    /* Our approval event when one user approves another to control */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* Create a new instance of this fund with links to other contracts that are required. */\n', '    function SmartInvestmentFundToken (address _tokenConvertor) public {\n', '\t\t// Give the 0x00 address the fulll supply and allow the token convertor to transfer it\n', '        balances[0] = totalSupply;\n', '        allowed[0][_tokenConvertor] = totalSupply;\n', '        emit Approval(0, _tokenConvertor, totalSupply);\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    } \n', '    \n', '    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3) returns (bool) {\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\n', '    function approve(address _spender, uint256 _amount) public onlyPayloadSize(2) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /* Gets the current allowance that has been approved for the specified spender of the owner address */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* Gets the balance of a specified account */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', "    /* Transfer the balance from owner's account to another account */\n", '    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2) returns (bool) {\n', '        /* Check if sender has balance and for overflows */\n', '        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\n', '            return false;\n', '\n', '        /* Add and subtract new balances */\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        /* Fire notification event */\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '}']
