['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' * @dev From https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/lifecycle/Destructible.sol\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', '/// @dev From https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/// @title Contract for a burnable ERC\n', 'contract BurnableErc20 is ERC20 {\n', '    function burn(uint value) external;\n', '}\n', '\n', 'contract KyberNetwork {\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '}\n', '\n', '\n', '/// @title A contract to burn ERC20 tokens from ETH\n', '/// @notice Sends the ETH on the contract to kyber for conversion to ERC20\n', '///  The converted ERC20 is then burned\n', '/// @author Request Network\n', 'contract Burner is Destructible {\n', '    /// Kyber contract that will be used for the conversion\n', '    KyberNetwork public kyberContract;\n', '\n', '    // Contract for the ERC20\n', '    BurnableErc20 public destErc20;\n', '\n', '    /// @param _destErc20 Destination token\n', '    /// @param _kyberContract Kyber contract to use\n', '    function Burner(address _destErc20, address _kyberContract) public {\n', '        // Check inputs\n', '        require(_destErc20 != address(0));\n', '        require(_kyberContract != address(0));\n', '\n', '        destErc20 = BurnableErc20(_destErc20);\n', '        kyberContract = KyberNetwork(_kyberContract);\n', '    }\n', '    \n', '    /// Fallback function to receive the ETH to burn later\n', '    function() public payable { }\n', '\n', '    /// @dev Main function. Trade the ETH for ERC20 and burn them\n', '    /// @param _maxSrcAmount Maximum amount of ETH to convert. If set to 0, all ETH on the\n', '    ///  contract will be burned\n', '    /// @param _maxDestAmount A limit on the amount of converted ERC20 tokens. Default value is MAX_UINT\n', '    /// @param _minConversionRate The minimal conversion rate. Default value is 1 (market rate)\n', '    /// @return amount of dest ERC20 tokens burned\n', '    function burn(uint _maxSrcAmount, uint _maxDestAmount, uint _minConversionRate)\n', '        external\n', '        returns(uint)\n', '    {\n', '        // ETH to convert on Kyber, by default the amount of ETH on the contract\n', '        // If _maxSrcAmount is defined, ethToConvert = min(balance on contract, _maxSrcAmount)\n', '        uint ethToConvert = address(this).balance;\n', '        if (_maxSrcAmount != 0 && _maxSrcAmount < ethToConvert) {\n', '            ethToConvert = _maxSrcAmount;\n', '        }\n', '\n', '        // Set maxDestAmount to MAX_UINT if not sent as parameter\n', '        uint maxDestAmount = _maxDestAmount != 0 ? _maxDestAmount : 2**256 - 1;\n', '\n', '        // Set minConversionRate to 1 if not sent as parameter\n', '        // A value of 1 will execute the trade according to market price in the time of the transaction confirmation\n', '        uint minConversionRate = _minConversionRate != 0 ? _minConversionRate : 1;\n', '\n', '        // Convert the ETH to ERC20\n', '        // erc20ToBurn is the amount of the ERC20 tokens converted by Kyber that will be burned\n', '        uint erc20ToBurn = kyberContract.trade.value(ethToConvert)(\n', '            // Source. From Kyber docs, this value denotes ETH\n', '            ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\n', '            \n', '            // Source amount\n', '            ethToConvert,\n', '\n', '            // Destination. Downcast BurnableErc20 to ERC20\n', '            ERC20(destErc20),\n', '            \n', '            // destAddress: this contract\n', '            this,\n', '            \n', '            // maxDestAmount\n', '            maxDestAmount,\n', '            \n', '            // minConversionRate \n', '            minConversionRate,\n', '            \n', '            // walletId\n', '            0\n', '        );\n', '\n', '        // Burn the converted ERC20 tokens\n', '        destErc20.burn(erc20ToBurn);\n', '\n', '        return erc20ToBurn;\n', '    }\n', '\n', '    /**\n', '    * @notice Sets the KyberNetwork contract address.\n', '    */  \n', '    function setKyberNetworkContract(address _kyberNetworkAddress) \n', '        external\n', '        onlyOwner\n', '    {\n', '        kyberContract = KyberNetwork(_kyberNetworkAddress);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' * @dev From https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.8.0/contracts/lifecycle/Destructible.sol\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', '/// @dev From https://github.com/KyberNetwork/smart-contracts/blob/master/contracts/ERC20Interface.sol\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/// @title Contract for a burnable ERC\n', 'contract BurnableErc20 is ERC20 {\n', '    function burn(uint value) external;\n', '}\n', '\n', 'contract KyberNetwork {\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '}\n', '\n', '\n', '/// @title A contract to burn ERC20 tokens from ETH\n', '/// @notice Sends the ETH on the contract to kyber for conversion to ERC20\n', '///  The converted ERC20 is then burned\n', '/// @author Request Network\n', 'contract Burner is Destructible {\n', '    /// Kyber contract that will be used for the conversion\n', '    KyberNetwork public kyberContract;\n', '\n', '    // Contract for the ERC20\n', '    BurnableErc20 public destErc20;\n', '\n', '    /// @param _destErc20 Destination token\n', '    /// @param _kyberContract Kyber contract to use\n', '    function Burner(address _destErc20, address _kyberContract) public {\n', '        // Check inputs\n', '        require(_destErc20 != address(0));\n', '        require(_kyberContract != address(0));\n', '\n', '        destErc20 = BurnableErc20(_destErc20);\n', '        kyberContract = KyberNetwork(_kyberContract);\n', '    }\n', '    \n', '    /// Fallback function to receive the ETH to burn later\n', '    function() public payable { }\n', '\n', '    /// @dev Main function. Trade the ETH for ERC20 and burn them\n', '    /// @param _maxSrcAmount Maximum amount of ETH to convert. If set to 0, all ETH on the\n', '    ///  contract will be burned\n', '    /// @param _maxDestAmount A limit on the amount of converted ERC20 tokens. Default value is MAX_UINT\n', '    /// @param _minConversionRate The minimal conversion rate. Default value is 1 (market rate)\n', '    /// @return amount of dest ERC20 tokens burned\n', '    function burn(uint _maxSrcAmount, uint _maxDestAmount, uint _minConversionRate)\n', '        external\n', '        returns(uint)\n', '    {\n', '        // ETH to convert on Kyber, by default the amount of ETH on the contract\n', '        // If _maxSrcAmount is defined, ethToConvert = min(balance on contract, _maxSrcAmount)\n', '        uint ethToConvert = address(this).balance;\n', '        if (_maxSrcAmount != 0 && _maxSrcAmount < ethToConvert) {\n', '            ethToConvert = _maxSrcAmount;\n', '        }\n', '\n', '        // Set maxDestAmount to MAX_UINT if not sent as parameter\n', '        uint maxDestAmount = _maxDestAmount != 0 ? _maxDestAmount : 2**256 - 1;\n', '\n', '        // Set minConversionRate to 1 if not sent as parameter\n', '        // A value of 1 will execute the trade according to market price in the time of the transaction confirmation\n', '        uint minConversionRate = _minConversionRate != 0 ? _minConversionRate : 1;\n', '\n', '        // Convert the ETH to ERC20\n', '        // erc20ToBurn is the amount of the ERC20 tokens converted by Kyber that will be burned\n', '        uint erc20ToBurn = kyberContract.trade.value(ethToConvert)(\n', '            // Source. From Kyber docs, this value denotes ETH\n', '            ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee),\n', '            \n', '            // Source amount\n', '            ethToConvert,\n', '\n', '            // Destination. Downcast BurnableErc20 to ERC20\n', '            ERC20(destErc20),\n', '            \n', '            // destAddress: this contract\n', '            this,\n', '            \n', '            // maxDestAmount\n', '            maxDestAmount,\n', '            \n', '            // minConversionRate \n', '            minConversionRate,\n', '            \n', '            // walletId\n', '            0\n', '        );\n', '\n', '        // Burn the converted ERC20 tokens\n', '        destErc20.burn(erc20ToBurn);\n', '\n', '        return erc20ToBurn;\n', '    }\n', '\n', '    /**\n', '    * @notice Sets the KyberNetwork contract address.\n', '    */  \n', '    function setKyberNetworkContract(address _kyberNetworkAddress) \n', '        external\n', '        onlyOwner\n', '    {\n', '        kyberContract = KyberNetwork(_kyberNetworkAddress);\n', '    }\n', '}']
