['/*\n', 'Copyright (c) 2018 Myart Dev Team\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        if (a == 0) {\n', '            revert();\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract MyartPoint is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public  decimals;\n', '    uint private  _totalSupply;\n', '    bool public halted;\n', '\n', '    uint number = 0;\n', '    mapping(uint => address) private indices;\n', '    mapping(address => bool) private exists;\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function MyartPoint() public {\n', '        halted = false;\n', '        symbol = "MYT";\n', '        name = "Myart Point";\n', '        decimals = 18;\n', '        _totalSupply = 1210 * 1000 * 1000 * 10**uint(decimals);\n', '\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Record a new address\n', '    // ------------------------------------------------------------------------    \n', '    function recordNewAddress(address _adr) internal {\n', '        if (exists[_adr] == false) {\n', '            exists[_adr] = true;\n', '            indices[number] = _adr;\n', '            number++;\n', '        } \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get number of addresses\n', '    // ------------------------------------------------------------------------\n', '    function numAdrs() public constant returns (uint) {\n', '        return number;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get address by index\n', '    // ------------------------------------------------------------------------\n', '    function getAdrByIndex(uint _index) public constant returns (address) {\n', '        return indices[_index];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set the halted tag when the emergent case happened\n', '    // ------------------------------------------------------------------------\n', '    function setEmergentHalt(bool _tag) public onlyOwner {\n', '        halted = _tag;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allocate a particular amount of tokens from onwer to an account\n', '    // ------------------------------------------------------------------------\n', '    function allocate(address to, uint amount) public onlyOwner {\n', '        require(to != address(0));\n', '        require(!frozenAccount[to]);\n', '        require(!halted && amount > 0);\n', '        require(balances[owner] >= amount);\n', '\n', '        recordNewAddress(to);\n', '\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Freeze a particular account in the case of needed\n', '    // ------------------------------------------------------------------------\n', '    function freeze(address account, bool tag) public onlyOwner {\n', '        require(account != address(0));\n', '        frozenAccount[account] = tag;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[to]) revert();\n', '        if (balances[msg.sender] < tokens) revert();\n', '\n', '        recordNewAddress(to);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[spender]) revert();\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[from] || frozenAccount[to] || frozenAccount[msg.sender]) revert();\n', '        if (balances[from] < tokens) revert();\n', '        if (allowed[from][msg.sender] < tokens) revert();\n', '\n', '        recordNewAddress(to);\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[spender]) revert();\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['/*\n', 'Copyright (c) 2018 Myart Dev Team\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        if (a == 0) {\n', '            revert();\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract MyartPoint is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public  decimals;\n', '    uint private  _totalSupply;\n', '    bool public halted;\n', '\n', '    uint number = 0;\n', '    mapping(uint => address) private indices;\n', '    mapping(address => bool) private exists;\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function MyartPoint() public {\n', '        halted = false;\n', '        symbol = "MYT";\n', '        name = "Myart Point";\n', '        decimals = 18;\n', '        _totalSupply = 1210 * 1000 * 1000 * 10**uint(decimals);\n', '\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Record a new address\n', '    // ------------------------------------------------------------------------    \n', '    function recordNewAddress(address _adr) internal {\n', '        if (exists[_adr] == false) {\n', '            exists[_adr] = true;\n', '            indices[number] = _adr;\n', '            number++;\n', '        } \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get number of addresses\n', '    // ------------------------------------------------------------------------\n', '    function numAdrs() public constant returns (uint) {\n', '        return number;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get address by index\n', '    // ------------------------------------------------------------------------\n', '    function getAdrByIndex(uint _index) public constant returns (address) {\n', '        return indices[_index];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set the halted tag when the emergent case happened\n', '    // ------------------------------------------------------------------------\n', '    function setEmergentHalt(bool _tag) public onlyOwner {\n', '        halted = _tag;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allocate a particular amount of tokens from onwer to an account\n', '    // ------------------------------------------------------------------------\n', '    function allocate(address to, uint amount) public onlyOwner {\n', '        require(to != address(0));\n', '        require(!frozenAccount[to]);\n', '        require(!halted && amount > 0);\n', '        require(balances[owner] >= amount);\n', '\n', '        recordNewAddress(to);\n', '\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Freeze a particular account in the case of needed\n', '    // ------------------------------------------------------------------------\n', '    function freeze(address account, bool tag) public onlyOwner {\n', '        require(account != address(0));\n', '        frozenAccount[account] = tag;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[to]) revert();\n', '        if (balances[msg.sender] < tokens) revert();\n', '\n', '        recordNewAddress(to);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[spender]) revert();\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[from] || frozenAccount[to] || frozenAccount[msg.sender]) revert();\n', '        if (balances[from] < tokens) revert();\n', '        if (allowed[from][msg.sender] < tokens) revert();\n', '\n', '        recordNewAddress(to);\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        if (halted || tokens <= 0) revert();\n', '        if (frozenAccount[msg.sender] || frozenAccount[spender]) revert();\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
