['pragma solidity ^0.4.23;\n', '\n', '/*******************************************************************************\n', ' *\n', ' * Copyright (c) 2018 Decentralization Authority MDAO.\n', ' * Released under the MIT License.\n', ' *\n', ' * 0GOLD - ZeroGold\n', ' * Version 18.7.4\n', ' *\n', ' * https://d14na.org\n', ' * support@d14na.org\n', ' */\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * SafeMath\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * ERC Token Standard #20 Interface\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * ApproveAndCallFallBack\n', ' *\n', ' * Contract function to receive approval and execute function in one call\n', ' * (borrowed from MiniMeToken)\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * Owned contract\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * @notice ZeroGold DOES NOT HOLD ANY "OFFICIAL" AFFILIATION with ZeroNet Core,\n', ' *         ZeroNet.io nor any of its brands and affiliates.\n', ' *\n', ' *         ZeroGold DOES currently stand as the "OFFICIAL" token of\n', ' *         Zeronet Explorer, Zer0net.com, 0net.io and each of their\n', ' *         respective brands and affiliates.\n', ' *\n', ' *         Symbol       : 0GOLD\n', ' *         Name         : ZeroGold\n', ' *         Total supply : 21,000,000\n', ' *         Decimals     : 8\n', ' *\n', ' * @dev This is a standard ERC20 token contract, utilizing SafeMath along\n', ' *      with a few additional public descriptors:\n', ' *          - name\n', ' *          - symbol\n', ' *          - title\n', ' */\n', 'contract ZeroGold is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8  public decimals;\n', '    uint   public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', '        symbol          = &#39;0GOLD&#39;;\n', '        name            = &#39;ZeroGold&#39;;\n', '        decimals        = 8;\n', '        _totalSupply    = 21000000 * 10 ** uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Total supply\n', '     */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Transfer the balance from token owner&#39;s account to `to` account\n', '     * - Owner&#39;s account must have sufficient balance to transfer\n', '     * - 0 value transfers are allowed\n', '     */\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to]         = balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '     * from the token owner&#39;s account\n', '     *\n', '     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '     * recommends that there are no checks for the approval double-spend attack\n', '     * as this should be implemented in user interfaces\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Transfer `tokens` from the `from` account to the `to` account.\n', '     *\n', '     * The calling account must already have sufficient tokens approve(...)-d\n', '     * for spending from the `from` account and:\n', '     *     - From account must have sufficient balance to transfer\n', '     *     - Spender must have sufficient allowance to transfer\n', '     *     - 0 value transfers are allowed\n', '     */\n', '    function transferFrom(\n', '        address from, address to, uint tokens) public returns (\n', '        bool success) {\n', '        balances[from]            = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to]              = balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Returns the amount of tokens approved by the owner that can be\n', '     * transferred to the spender&#39;s account\n', '     */\n', '    function allowance(\n', '        address tokenOwner, address spender) public constant returns (\n', '        uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '     * from the token owner&#39;s account. The `spender` contract function\n', '     * `receiveApproval(...)` is then executed\n', '     */\n', '    function approveAndCall(\n', '        address spender, uint tokens, bytes data) public returns (\n', '        bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Don&#39;t accept ETH\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Owner can transfer out any accidentally sent ERC20 tokens\n', '     */\n', '    function transferAnyERC20Token(\n', '        address tokenAddress, uint tokens) public onlyOwner returns (\n', '        bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/*******************************************************************************\n', ' *\n', ' * Copyright (c) 2018 Decentralization Authority MDAO.\n', ' * Released under the MIT License.\n', ' *\n', ' * 0GOLD - ZeroGold\n', ' * Version 18.7.4\n', ' *\n', ' * https://d14na.org\n', ' * support@d14na.org\n', ' */\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * SafeMath\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * ERC Token Standard #20 Interface\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * ApproveAndCallFallBack\n', ' *\n', ' * Contract function to receive approval and execute function in one call\n', ' * (borrowed from MiniMeToken)\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * Owned contract\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/*******************************************************************************\n', ' *\n', ' * @notice ZeroGold DOES NOT HOLD ANY "OFFICIAL" AFFILIATION with ZeroNet Core,\n', ' *         ZeroNet.io nor any of its brands and affiliates.\n', ' *\n', ' *         ZeroGold DOES currently stand as the "OFFICIAL" token of\n', ' *         Zeronet Explorer, Zer0net.com, 0net.io and each of their\n', ' *         respective brands and affiliates.\n', ' *\n', ' *         Symbol       : 0GOLD\n', ' *         Name         : ZeroGold\n', ' *         Total supply : 21,000,000\n', ' *         Decimals     : 8\n', ' *\n', ' * @dev This is a standard ERC20 token contract, utilizing SafeMath along\n', ' *      with a few additional public descriptors:\n', ' *          - name\n', ' *          - symbol\n', ' *          - title\n', ' */\n', 'contract ZeroGold is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8  public decimals;\n', '    uint   public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', "        symbol          = '0GOLD';\n", "        name            = 'ZeroGold';\n", '        decimals        = 8;\n', '        _totalSupply    = 21000000 * 10 ** uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Total supply\n', '     */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', "     * Transfer the balance from token owner's account to `to` account\n", "     * - Owner's account must have sufficient balance to transfer\n", '     * - 0 value transfers are allowed\n', '     */\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to]         = balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "     * from the token owner's account\n", '     *\n', '     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '     * recommends that there are no checks for the approval double-spend attack\n', '     * as this should be implemented in user interfaces\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Transfer `tokens` from the `from` account to the `to` account.\n', '     *\n', '     * The calling account must already have sufficient tokens approve(...)-d\n', '     * for spending from the `from` account and:\n', '     *     - From account must have sufficient balance to transfer\n', '     *     - Spender must have sufficient allowance to transfer\n', '     *     - 0 value transfers are allowed\n', '     */\n', '    function transferFrom(\n', '        address from, address to, uint tokens) public returns (\n', '        bool success) {\n', '        balances[from]            = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to]              = balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Returns the amount of tokens approved by the owner that can be\n', "     * transferred to the spender's account\n", '     */\n', '    function allowance(\n', '        address tokenOwner, address spender) public constant returns (\n', '        uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "     * from the token owner's account. The `spender` contract function\n", '     * `receiveApproval(...)` is then executed\n', '     */\n', '    function approveAndCall(\n', '        address spender, uint tokens, bytes data) public returns (\n', '        bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', "     * Don't accept ETH\n", '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /***************************************************************************\n', '     *\n', '     * Owner can transfer out any accidentally sent ERC20 tokens\n', '     */\n', '    function transferAnyERC20Token(\n', '        address tokenAddress, uint tokens) public onlyOwner returns (\n', '        bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
