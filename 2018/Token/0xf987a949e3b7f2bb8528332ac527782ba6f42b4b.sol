['pragma solidity 0.4.25;\n', '// ----------------------------------------------------------------------------\n', '// &#39;PAYTOKEN&#39; contract with following features\n', '//      => In-built ICO functionality - Infinite duration\n', '//      => ERC20 Compliance\n', '//      => Higher control of ICO by admin/owner\n', '//      => selfdestruct functionality\n', '//      => SafeMath implementation \n', '//\n', '// Deployed to : 0x6A51a1415ED5e6156D4A6046C890e2f2a4Cfd0B9\n', '// Symbol      : PAYTK\n', '// Name        : PAYTOKEN\n', '// Total supply: 1,000,000,000  (1 Billion)\n', '// Decimals    : 18\n', '//\n', '// Copyright (c) 2018 Payou Ltd, Malta (https://paytoken.co)\n', '// ----------------------------------------------------------------------------\n', '   \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tstring public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\n', '            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '            name = tokenName;                                   // Set the name for display purposes\n', '            symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public {\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '           \temit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender&#39;s allowance\n', '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '          \temit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '    //*******************************************************//\n', '    //-------------  ADVANCED TOKEN STARTS HERE -------------//\n', '    //*******************************************************//\n', '    \n', '    contract PAYTOKEN is owned, TokenERC20 {\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '    \t/**********************************/\n', '        /* Code for the ERC20 PAYTOKEN */\n', '        /**********************************/\n', '    \n', '    \t// Public variables of the token\n', '    \tstring private tokenName = "PAYTOKEN";\n', '        string private tokenSymbol = "PAYTK";\n', '        uint256 private initialSupply = 1000000000; \t// Initial supply of the tokens   \n', '\n', '\t\t// Records for the fronzen accounts \n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '        /* Internal transfer, only can be called by this contract */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '\t\t\trequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\t\trequire (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '\t\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '\t\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\n', '\t\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n', '\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n', '\t\t\temit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '\t\t/// @notice Create `mintedAmount` tokens and send it to `target`\n', '\t\t/// @param target Address to receive the tokens\n', '\t\t/// @param mintedAmount the amount of tokens it will receive\n', '\t\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n', '\t\t\ttotalSupply = totalSupply.add(mintedAmount);\n', '\t\t \temit Transfer(0, this, mintedAmount);\n', '\t\t \temit Transfer(this, target, mintedAmount);\n', '\t\t}\n', '\n', '\t\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '\t\t/// @param target Address to be frozen\n', '\t\t/// @param freeze either to freeze it or not\n', '\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\n', '\t\t\t\tfrozenAccount[target] = freeze;\n', '\t\t\temit  FrozenFunds(target, freeze);\n', '\t\t}\n', '\n', '\t\t/**************************/\n', '\t\t/* Code for the Crowdsale */\n', '\t\t/**************************/\n', '\n', '\t\t//public variables for the Crowdsale\n', '\t\tuint256 public icoStartDate = 999 ;  // Any past timestamp\n', '\t\tuint256 public icoEndDate = 9999999999999999 ;    // Infinite end date.\n', '\t\tuint256 public exchangeRate = 10000;         // 1 ETH = 10000 Tokens \n', '\t\tuint256 public tokensSold = 0;              // how many tokens sold through crowdsale\n', '\n', '\t\t//@dev fallback function, only accepts ether if ICO is running or Reject\n', '\t\tfunction () payable public {\n', '\t\t\trequire(icoEndDate > now);\n', '\t\t\trequire(icoStartDate < now);\n', '            require(!safeguard);\n', '\t\t\tuint ethervalueWEI=msg.value;\n', '\t\t\t// calculate token amount to be sent\n', '\t\t\tuint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\n', '\t\t\ttokensSold = tokensSold.add(token);\n', '\t\t\t_transfer(this, msg.sender, token);              // makes the transfers\n', '\t\t\tforwardEherToOwner();\n', '\t\t}\n', '\n', '\t\t//Automatocally forwards ether from smart contract to owner address\n', '\t\tfunction forwardEherToOwner() internal {\n', '\t\t\towner.transfer(msg.value); \n', '\t\t}\n', '\n', '\t\t//function to start an ICO.\n', '\t\t//It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens), and token amounts to allocate for the ICO\n', '\t\t//It will transfer allocated amount to the smart contract from Owner\n', '\t\tfunction startIco(uint256 start,uint256 end, uint256 exchangeRateNew, uint256 TokensAllocationForICO) onlyOwner public {\n', '\t\t\trequire(start < end);\n', '\t\t\tuint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\n', '\t\t\trequire(balanceOf[msg.sender] > tokenAmount);\n', '\t\t\ticoStartDate=start;\n', '\t\t\ticoEndDate=end;\n', '\t\t\texchangeRate = exchangeRateNew;\n', '\t\t\tapprove(this,tokenAmount);\n', '\t\t\ttransfer(this,tokenAmount);\n', '        }\n', '        \n', '        //Stops an ICO.\n', '        //It will also transfer remaining tokens to owner\n', '\t\tfunction stopICO() onlyOwner public{\n', '            icoEndDate = 0;\n', '            uint256 tokenAmount=balanceOf[this];\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '        \n', '        //function to check wheter ICO is running or not.\n', '        function isICORunning() public view returns(bool){\n', '            if(icoEndDate > now && icoStartDate < now){\n', '                return true;                \n', '            }else{\n', '                return false;\n', '            }\n', '        }\n', '        \n', '        //Function to set ICO Exchange rate. \n', '    \tfunction setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n', '\t\t\texchangeRate=newExchangeRate;\n', '        }\n', '        \n', '        //Just in case, owner wants to transfer Tokens from contract to owner address\n', '        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n', '      \t\tuint256 tokenAmount = _amount.mul(1 ether);\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '          \n', '        //Just in case, owner wants to transfer Ether from contract to owner address\n', '        function manualWithdrawEther()onlyOwner public{\n', '\t\t\tuint256 amount=address(this).balance;\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t\t\n', '\t\t//selfdestruct function. just in case owner decided to destruct this contract.\n', '\t\tfunction destructContract()onlyOwner public{\n', '\t\t\tselfdestruct(owner);\n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, then all the non-owner functions will stop working.\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '\t\t\t    safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '\t\t}\n', '}']
['pragma solidity 0.4.25;\n', '// ----------------------------------------------------------------------------\n', "// 'PAYTOKEN' contract with following features\n", '//      => In-built ICO functionality - Infinite duration\n', '//      => ERC20 Compliance\n', '//      => Higher control of ICO by admin/owner\n', '//      => selfdestruct functionality\n', '//      => SafeMath implementation \n', '//\n', '// Deployed to : 0x6A51a1415ED5e6156D4A6046C890e2f2a4Cfd0B9\n', '// Symbol      : PAYTK\n', '// Name        : PAYTOKEN\n', '// Total supply: 1,000,000,000  (1 Billion)\n', '// Decimals    : 18\n', '//\n', '// Copyright (c) 2018 Payou Ltd, Malta (https://paytoken.co)\n', '// ----------------------------------------------------------------------------\n', '   \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tstring public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(1 ether);           // Update total supply with the decimal amount\n', '            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '            name = tokenName;                                   // Set the name for display purposes\n', '            symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public {\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '           \temit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '          \temit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '    //*******************************************************//\n', '    //-------------  ADVANCED TOKEN STARTS HERE -------------//\n', '    //*******************************************************//\n', '    \n', '    contract PAYTOKEN is owned, TokenERC20 {\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '    \t/**********************************/\n', '        /* Code for the ERC20 PAYTOKEN */\n', '        /**********************************/\n', '    \n', '    \t// Public variables of the token\n', '    \tstring private tokenName = "PAYTOKEN";\n', '        string private tokenSymbol = "PAYTK";\n', '        uint256 private initialSupply = 1000000000; \t// Initial supply of the tokens   \n', '\n', '\t\t// Records for the fronzen accounts \n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '        /* Internal transfer, only can be called by this contract */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '\t\t\trequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\t\trequire (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '\t\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '\t\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\n', '\t\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n', '\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n', '\t\t\temit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '\t\t/// @notice Create `mintedAmount` tokens and send it to `target`\n', '\t\t/// @param target Address to receive the tokens\n', '\t\t/// @param mintedAmount the amount of tokens it will receive\n', '\t\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n', '\t\t\ttotalSupply = totalSupply.add(mintedAmount);\n', '\t\t \temit Transfer(0, this, mintedAmount);\n', '\t\t \temit Transfer(this, target, mintedAmount);\n', '\t\t}\n', '\n', '\t\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '\t\t/// @param target Address to be frozen\n', '\t\t/// @param freeze either to freeze it or not\n', '\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\n', '\t\t\t\tfrozenAccount[target] = freeze;\n', '\t\t\temit  FrozenFunds(target, freeze);\n', '\t\t}\n', '\n', '\t\t/**************************/\n', '\t\t/* Code for the Crowdsale */\n', '\t\t/**************************/\n', '\n', '\t\t//public variables for the Crowdsale\n', '\t\tuint256 public icoStartDate = 999 ;  // Any past timestamp\n', '\t\tuint256 public icoEndDate = 9999999999999999 ;    // Infinite end date.\n', '\t\tuint256 public exchangeRate = 10000;         // 1 ETH = 10000 Tokens \n', '\t\tuint256 public tokensSold = 0;              // how many tokens sold through crowdsale\n', '\n', '\t\t//@dev fallback function, only accepts ether if ICO is running or Reject\n', '\t\tfunction () payable public {\n', '\t\t\trequire(icoEndDate > now);\n', '\t\t\trequire(icoStartDate < now);\n', '            require(!safeguard);\n', '\t\t\tuint ethervalueWEI=msg.value;\n', '\t\t\t// calculate token amount to be sent\n', '\t\t\tuint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\n', '\t\t\ttokensSold = tokensSold.add(token);\n', '\t\t\t_transfer(this, msg.sender, token);              // makes the transfers\n', '\t\t\tforwardEherToOwner();\n', '\t\t}\n', '\n', '\t\t//Automatocally forwards ether from smart contract to owner address\n', '\t\tfunction forwardEherToOwner() internal {\n', '\t\t\towner.transfer(msg.value); \n', '\t\t}\n', '\n', '\t\t//function to start an ICO.\n', '\t\t//It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens), and token amounts to allocate for the ICO\n', '\t\t//It will transfer allocated amount to the smart contract from Owner\n', '\t\tfunction startIco(uint256 start,uint256 end, uint256 exchangeRateNew, uint256 TokensAllocationForICO) onlyOwner public {\n', '\t\t\trequire(start < end);\n', '\t\t\tuint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\n', '\t\t\trequire(balanceOf[msg.sender] > tokenAmount);\n', '\t\t\ticoStartDate=start;\n', '\t\t\ticoEndDate=end;\n', '\t\t\texchangeRate = exchangeRateNew;\n', '\t\t\tapprove(this,tokenAmount);\n', '\t\t\ttransfer(this,tokenAmount);\n', '        }\n', '        \n', '        //Stops an ICO.\n', '        //It will also transfer remaining tokens to owner\n', '\t\tfunction stopICO() onlyOwner public{\n', '            icoEndDate = 0;\n', '            uint256 tokenAmount=balanceOf[this];\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '        \n', '        //function to check wheter ICO is running or not.\n', '        function isICORunning() public view returns(bool){\n', '            if(icoEndDate > now && icoStartDate < now){\n', '                return true;                \n', '            }else{\n', '                return false;\n', '            }\n', '        }\n', '        \n', '        //Function to set ICO Exchange rate. \n', '    \tfunction setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n', '\t\t\texchangeRate=newExchangeRate;\n', '        }\n', '        \n', '        //Just in case, owner wants to transfer Tokens from contract to owner address\n', '        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n', '      \t\tuint256 tokenAmount = _amount.mul(1 ether);\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '          \n', '        //Just in case, owner wants to transfer Ether from contract to owner address\n', '        function manualWithdrawEther()onlyOwner public{\n', '\t\t\tuint256 amount=address(this).balance;\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t\t\n', '\t\t//selfdestruct function. just in case owner decided to destruct this contract.\n', '\t\tfunction destructContract()onlyOwner public{\n', '\t\t\tselfdestruct(owner);\n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, then all the non-owner functions will stop working.\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '\t\t\t    safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '\t\t}\n', '}']
