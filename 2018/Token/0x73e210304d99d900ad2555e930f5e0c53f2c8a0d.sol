['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * @title ERC20Interface\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256) {}\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {}\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title StandardToken\n', ' * @dev ERC20 implementation\n', ' */\n', 'contract StandardToken is ERC20Interface {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        require(_to != 0x0);\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        require(_to != 0x0);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function pow(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a ** b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract provides basic authorization control\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title BaseToken\n', ' * @dev BaseToken Token Smart Contract\n', ' */\n', 'contract BaseToken is StandardToken, SafeMath, Ownable {\n', '\n', '    function withDecimals(uint number, uint decimals)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        return mul(number, pow(10, decimals));\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ApproveAndCallFallBack\n', ' * @dev Contract function to receive approval and execute function in one call, borrowed from MiniMeToken\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '/**\n', ' * @title Dainet\n', ' * @dev Dainet Token Smart Contract\n', ' */\n', 'contract Dainet is BaseToken {\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = '1.5';\n", '    uint256 public unitsPerEth;\n', '    uint256 public maxDainSell;\n', '    uint256 public totalEthPos;\n', '    uint256 public minimalEthPos;\n', '    uint256 public minEthAmount;\n', '\n', '    constructor() public {\n', '        name = "Dainet";\n', '        symbol = "DAIN";\n', '        decimals = 18;   \n', '\n', '        totalSupply = withDecimals(1300000000, decimals); \n', '\n', '        maxDainSell = withDecimals(845000000, decimals); \n', '        unitsPerEth = 2000;\n', '        minEthAmount = withDecimals(5, (18-2)); \n', '\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function() public payable{\n', '        uint256 amount = mul(msg.value, unitsPerEth);\n', '        require(balances[owner] >= amount);\n', '        require(balances[owner] >= maxDainSell);\n', '        require(msg.value >= minEthAmount);\n', '\n', '        balances[owner] = sub(balances[owner], amount);\n', '        maxDainSell = sub(maxDainSell, amount);\n', '        balances[msg.sender] = add(balances[msg.sender], amount);\n', '        emit Transfer(owner, msg.sender, amount);\n', '        totalEthPos = add(totalEthPos, msg.value);\n', '\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function changeUnitsPerEth(uint256 newValue) public onlyOwner {\n', '        unitsPerEth = newValue;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']