['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract DDXToken {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    bool public locked;\n', '\n', '    address public creator;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function DDXToken() public {\n', '        name = "Decentralized Derivatives Exchange Token";\n', '        symbol = "DDX";\n', '        decimals = 18;\n', '        totalSupply = 200000000 ether;\n', '\n', '        locked = true;\n', '        creator = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', "    // Don't let people randomly send ETH to contract\n", '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    // Once unlocked, transfer can never be locked again\n', '    function unlockTransfer() public {\n', '        require(msg.sender == creator);\n', '        locked = false;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Token must be unlocked to enable transferFrom\n', '        // transferFrom is used in public sales (i.e. Decentralized Exchanges)\n', '        // this mitigates risk of users selling the token to the public before proper disclosure/paperwork is in order\n', '        require(!locked);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']