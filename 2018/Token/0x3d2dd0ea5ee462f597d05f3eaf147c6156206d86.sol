['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * Sets the original `owner` of the contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        OwnershipTransferred(0, owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a new owner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_newOwner != 0);\n', '\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint _a, uint _b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '    \n', '        uint c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint _a, uint _b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        // Solidity automatically throws when dividing by 0\n', '        uint c = _a / _b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint _a, uint _b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint _a, uint _b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        uint c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' */\n', 'contract StandardToken is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint public totalSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event ChangeTokenInformation(string name, string symbol);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /**\n', '     * Owner can update token information here.\n', '     *\n', '     * It is often useful to conceal the actual token association, until\n', '     * the token operations, like central issuance or reissuance have been completed.\n', '     *\n', '     * This function allows the token owner to rename the token after the operations\n', '     * have been completed and then point the audience to use the token contract.\n', '     */\n', '    function changeTokenInformation(string _name, string _symbol)\n', '        public\n', '        onlyOwner\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        ChangeTokenInformation(_name, _symbol);\n', '    }\n', '\n', '\t/**\n', '\t * @dev Transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '\tfunction transfer(address _to, uint _value)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\trequire(_to != 0);\n', '        require(_value > 0);\n', '\n', '\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != 0);\n', '        require(_value > 0);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_addedValue > 0);\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_subtractedValue > 0);\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner The address which owns the funds.\n', '     * @param _spender The address which will spend the funds.\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title UpgradeAgent Interface\n', ' * @dev Upgrade agent transfers tokens to a new contract. Upgrade agent itself can be the\n', ' * token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '    bool public isUpgradeAgent = true;\n', '\n', '    function upgradeFrom(address _from, uint _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' */\n', 'contract MintableToken is StandardToken {\n', '\n', '\tbool public mintingFinished = false;\n', '\n', '\t/**\n', '     * Events\n', '     */\n', '\tevent Mint(address indexed to, uint amount);\n', '  \tevent MintFinished();\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to mint tokens\n', '\t * @param _to The address that will receive the minted tokens.\n', '\t * @param _amount The amount of tokens to mint.\n', '\t */\n', '\tfunction mint(address _to, uint _amount)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\tcanMint\n', '\t{\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalanceOf[_to] = balanceOf[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(0, _to, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to stop minting new tokens.\n', '\t */\n', '\tfunction finishMinting()\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t\tcanMint\n', '\t{\n', '\t\tmintingFinished = true;\n', '\t\tMintFinished();\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '    uint public cap;\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     */\n', '    function mint(address _to, uint _amount)\n', '        public\n', '        onlyOwner\n', '        canMint\n', '    {\n', '        require(totalSupply.add(_amount) <= cap);\n', '\n', '        super.mint(_to, _amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev Token that can be freeze "Transfer" function\n', ' */\n', 'contract PausableToken is StandardToken {\n', '\n', '    bool public isTradable = true;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event FreezeTransfer();\n', '    event UnfreezeTransfer();\n', '\n', '    modifier canTransfer() {\n', '\t\trequire(isTradable);\n', '\t\t_;\n', '\t}\n', '\n', '    /**\n', '     * Disallow to transfer token from an address to other address\n', '     */\n', '    function freezeTransfer()\n', '        public\n', '        onlyOwner\n', '    {\n', '        isTradable = false;\n', '        FreezeTransfer();\n', '    }\n', '\n', '    /**\n', '     * Allow to transfer token from an address to other address\n', '     */\n', '    function unfreezeTransfer()\n', '        public\n', '        onlyOwner\n', '    {\n', '        isTradable = true;\n', '        UnfreezeTransfer();\n', '    }\n', '\n', '    /**\n', '\t * @dev Transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '    function transfer(address _to, uint _value)\n', '\t\tpublic\n', '        canTransfer\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        canTransfer\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        canTransfer\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '        public\n', '        canTransfer\n', '        returns (bool)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '        public\n', '        canTransfer\n', '        returns (bool)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Upgradable token\n', ' */\n', 'contract UpgradableToken is StandardToken {\n', '\n', '    address public upgradeMaster;\n', '\n', '    // The next contract where the tokens will be migrated.\n', '    UpgradeAgent public upgradeAgent;\n', '\n', '    bool public isUpgradable = false;\n', '\n', '    // How many tokens we have upgraded by now.\n', '    uint public totalUpgraded;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event ChangeUpgradeMaster(address newMaster);\n', '    event ChangeUpgradeAgent(address newAgent);\n', '    event FreezeUpgrade();\n', '    event UnfreezeUpgrade();\n', '    event Upgrade(address indexed from, address indexed to, uint value);\n', '\n', '    modifier onlyUpgradeMaster() {\n', '\t\trequire(msg.sender == upgradeMaster);\n', '\t\t_;\n', '\t}\n', '\n', '    modifier canUpgrade() {\n', '\t\trequire(isUpgradable);\n', '\t\t_;\n', '\t}\n', '\n', '    /**\n', '     * Change the upgrade master.\n', '     * @param _newMaster New upgrade master.\n', '     */\n', '    function changeUpgradeMaster(address _newMaster)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_newMaster != 0);\n', '\n', '        upgradeMaster = _newMaster;\n', '        ChangeUpgradeMaster(_newMaster);\n', '    }\n', '\n', '    /**\n', '     * Change the upgrade agent.\n', '     * @param _newAgent New upgrade agent.\n', '     */\n', '    function changeUpgradeAgent(address _newAgent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(totalUpgraded == 0);\n', '\n', '        upgradeAgent = UpgradeAgent(_newAgent);\n', '\n', '        // Bad interface\n', '        if (!upgradeAgent.isUpgradeAgent()) {\n', '            revert();\n', '        }\n', '\n', '        ChangeUpgradeAgent(_newAgent);\n', '    }\n', '\n', '    /**\n', '     * Disallow to upgrade token to new smart contract\n', '     */\n', '    function freezeUpgrade()\n', '        public\n', '        onlyOwner\n', '    {\n', '        isUpgradable = false;\n', '        FreezeUpgrade();\n', '    }\n', '\n', '    /**\n', '     * Allow to upgrade token to new smart contract\n', '     */\n', '    function unfreezeUpgrade()\n', '        public\n', '        onlyOwner\n', '    {\n', '        isUpgradable = true;\n', '        UnfreezeUpgrade();\n', '    }\n', '\n', '    /**\n', '     * Token holder upgrade their tokens to a new smart contract.\n', '     */\n', '    function upgrade()\n', '        public\n', '        canUpgrade\n', '    {\n', '        uint amount = balanceOf[msg.sender];\n', '\n', '        require(amount > 0);\n', '\n', '        processUpgrade(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * Upgrader upgrade tokens of holder to a new smart contract.\n', '     * @param _holders List of token holder.\n', '     */\n', '    function forceUpgrade(address[] _holders)\n', '        public\n', '        onlyUpgradeMaster\n', '        canUpgrade\n', '    {\n', '        uint amount;\n', '\n', '        for (uint i = 0; i < _holders.length; i++) {\n', '            amount = balanceOf[_holders[i]];\n', '\n', '            if (amount == 0) {\n', '                continue;\n', '            }\n', '\n', '            processUpgrade(_holders[i], amount);\n', '        }\n', '    }\n', '\n', '    function processUpgrade(address _holder, uint _amount)\n', '        private\n', '    {\n', '        balanceOf[_holder] = balanceOf[_holder].sub(_amount);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply = totalSupply.sub(_amount);\n', '        totalUpgraded = totalUpgraded.add(_amount);\n', '\n', '        // Upgrade agent reissues the tokens\n', '        upgradeAgent.upgradeFrom(_holder, _amount);\n', '        Upgrade(_holder, upgradeAgent, _amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title QNTU 1.0 token\n', ' */\n', 'contract QNTU is UpgradableToken, CappedToken, PausableToken {\n', '\n', '    /**\n', '\t * @dev Constructor\n', '\t */\n', '    function QNTU()\n', '        public\n', '    {\n', '        symbol = "QNTU";\n', '        name = "QNTU Token";\n', '        decimals = 18;\n', '\n', '        uint multiplier = 10 ** uint(decimals);\n', '\n', '        cap = 120000000000 * multiplier;\n', '        totalSupply = 72000000000 * multiplier;\n', '\n', '        // 40%\n', '        balanceOf[0xd83ef0076580e595b3be39d654da97184623b9b5] = 4800000000 * multiplier;\n', '        balanceOf[0xd4e40860b41f666fbc6c3007f3d1434e353063d8] = 4800000000 * multiplier;\n', '        balanceOf[0x84dd4187a87055495d0c08fe260ca9cc9e02f09e] = 4800000000 * multiplier;\n', '        balanceOf[0x0556620d12c38babd0461e366b433682a5000fae] = 4800000000 * multiplier;\n', '        balanceOf[0x0f363f18f49aa350ba8fcf233cdd155a7b77af99] = 4800000000 * multiplier;\n', '        balanceOf[0x1a38292d3f685cd79bcdfc19fad7447ae762aa4c] = 4800000000 * multiplier;\n', '        balanceOf[0xb262d04ee29ad9ebacb1ab9da99398916f425d84] = 4800000000 * multiplier;\n', '        balanceOf[0xd8c2d6f12baf10258eb390be4377e460c1d033e2] = 4800000000 * multiplier;\n', '        balanceOf[0x1ca70fd8433ec97fa0777830a152d028d71b88fa] = 4800000000 * multiplier;\n', '        balanceOf[0x57be4b8c57c0bb061e05fdf85843503fba673394] = 4800000000 * multiplier;\n', '\n', '        Transfer(0, 0xd83ef0076580e595b3be39d654da97184623b9b5, 4800000000 * multiplier);\n', '        Transfer(0, 0xd4e40860b41f666fbc6c3007f3d1434e353063d8, 4800000000 * multiplier);\n', '        Transfer(0, 0x84dd4187a87055495d0c08fe260ca9cc9e02f09e, 4800000000 * multiplier);\n', '        Transfer(0, 0x0556620d12c38babd0461e366b433682a5000fae, 4800000000 * multiplier);\n', '        Transfer(0, 0x0f363f18f49aa350ba8fcf233cdd155a7b77af99, 4800000000 * multiplier);\n', '        Transfer(0, 0x1a38292d3f685cd79bcdfc19fad7447ae762aa4c, 4800000000 * multiplier);\n', '        Transfer(0, 0xb262d04ee29ad9ebacb1ab9da99398916f425d84, 4800000000 * multiplier);\n', '        Transfer(0, 0xd8c2d6f12baf10258eb390be4377e460c1d033e2, 4800000000 * multiplier);\n', '        Transfer(0, 0x1ca70fd8433ec97fa0777830a152d028d71b88fa, 4800000000 * multiplier);\n', '        Transfer(0, 0x57be4b8c57c0bb061e05fdf85843503fba673394, 4800000000 * multiplier);\n', '\n', '        // 20%\n', '        balanceOf[0xb6ff15b634571cb56532022fe00f96fee51322b3] = 4800000000 * multiplier;\n', '        balanceOf[0x631c87278de77902e762ba0ab57d55c10716e0b6] = 4800000000 * multiplier;\n', '        balanceOf[0x7fe443391d9a3eb0c401181c46a44eb6106bba2e] = 4800000000 * multiplier;\n', '        balanceOf[0x94905c20fa2596fdc7d37bab6dd67b52e2335122] = 4800000000 * multiplier;\n', '        balanceOf[0x6ad8038f53ae2800d45a31d8261b062a0b55d63b] = 4800000000 * multiplier;\n', '\n', '        Transfer(0, 0xb6ff15b634571cb56532022fe00f96fee51322b3, 4800000000 * multiplier);\n', '        Transfer(0, 0x631c87278de77902e762ba0ab57d55c10716e0b6, 4800000000 * multiplier);\n', '        Transfer(0, 0x7fe443391d9a3eb0c401181c46a44eb6106bba2e, 4800000000 * multiplier);\n', '        Transfer(0, 0x94905c20fa2596fdc7d37bab6dd67b52e2335122, 4800000000 * multiplier);\n', '        Transfer(0, 0x6ad8038f53ae2800d45a31d8261b062a0b55d63b, 4800000000 * multiplier);\n', '    }\n', '\n', '}']