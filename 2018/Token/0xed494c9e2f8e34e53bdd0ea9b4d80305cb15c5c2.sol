['pragma solidity ^0.4.23;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  // events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address addr) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  // events\n', '  event Approval(address indexed owner, address indexed agent, uint256 value);\n', '\n', '  // public functions\n', '  function allowance(address owner, address agent) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address agent, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  // public variables\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals = 18;\n', '\n', '  // internal variables\n', '  uint256 _totalSupply;\n', '  mapping(address => uint256) _balances;\n', '\n', '  // events\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address addr) public view returns (uint256 balance) {\n', '    return _balances[addr];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    require(value <= _balances[msg.sender]);\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  // internal functions\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  // public variables\n', '\n', '  // internal variables\n', '  mapping (address => mapping (address => uint256)) _allowances;\n', '\n', '  // events\n', '\n', '  // public functions\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowances[from][msg.sender]);\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address agent, uint256 value) public returns (bool) {\n', '    _allowances[msg.sender][agent] = value;\n', '    emit Approval(msg.sender, agent, value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address owner, address agent) public view returns (uint256) {\n', '    return _allowances[owner][agent];\n', '  }\n', '\n', '  function increaseApproval(address agent, uint value) public returns (bool) {\n', '    _allowances[msg.sender][agent] = _allowances[msg.sender][agent].add(value);\n', '    emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address agent, uint value) public returns (bool) {\n', '    uint allowanceValue = _allowances[msg.sender][agent];\n', '    if (value > allowanceValue) {\n', '      _allowances[msg.sender][agent] = 0;\n', '    } else {\n', '      _allowances[msg.sender][agent] = allowanceValue.sub(value);\n', '    }\n', '    emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);\n', '    return true;\n', '  }\n', '  // internal functions\n', '}\n', '\n', '\n', 'contract CWVToken is StandardToken {\n', '  // public variables\n', '  string public name = "CWV Chain";\n', '  string public symbol = "CWV";\n', '  uint8 public decimals = 18;\n', '\n', '  // internal variables\n', '\n', '  // events\n', '\n', '  // public functions\n', '  constructor() public {\n', '    //init _totalSupply\n', '    _totalSupply = 10000000000 * (10 ** uint256(decimals));\n', '\n', '    _balances[msg.sender] = _totalSupply;\n', '    emit Transfer(0x0, msg.sender, _totalSupply);\n', '  }\n', '\n', '\n', '  // internal functions\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  // events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address addr) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  // events\n', '  event Approval(address indexed owner, address indexed agent, uint256 value);\n', '\n', '  // public functions\n', '  function allowance(address owner, address agent) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address agent, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  // public variables\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals = 18;\n', '\n', '  // internal variables\n', '  uint256 _totalSupply;\n', '  mapping(address => uint256) _balances;\n', '\n', '  // events\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address addr) public view returns (uint256 balance) {\n', '    return _balances[addr];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    require(value <= _balances[msg.sender]);\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  // internal functions\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  // public variables\n', '\n', '  // internal variables\n', '  mapping (address => mapping (address => uint256)) _allowances;\n', '\n', '  // events\n', '\n', '  // public functions\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowances[from][msg.sender]);\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address agent, uint256 value) public returns (bool) {\n', '    _allowances[msg.sender][agent] = value;\n', '    emit Approval(msg.sender, agent, value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address owner, address agent) public view returns (uint256) {\n', '    return _allowances[owner][agent];\n', '  }\n', '\n', '  function increaseApproval(address agent, uint value) public returns (bool) {\n', '    _allowances[msg.sender][agent] = _allowances[msg.sender][agent].add(value);\n', '    emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address agent, uint value) public returns (bool) {\n', '    uint allowanceValue = _allowances[msg.sender][agent];\n', '    if (value > allowanceValue) {\n', '      _allowances[msg.sender][agent] = 0;\n', '    } else {\n', '      _allowances[msg.sender][agent] = allowanceValue.sub(value);\n', '    }\n', '    emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);\n', '    return true;\n', '  }\n', '  // internal functions\n', '}\n', '\n', '\n', 'contract CWVToken is StandardToken {\n', '  // public variables\n', '  string public name = "CWV Chain";\n', '  string public symbol = "CWV";\n', '  uint8 public decimals = 18;\n', '\n', '  // internal variables\n', '\n', '  // events\n', '\n', '  // public functions\n', '  constructor() public {\n', '    //init _totalSupply\n', '    _totalSupply = 10000000000 * (10 ** uint256(decimals));\n', '\n', '    _balances[msg.sender] = _totalSupply;\n', '    emit Transfer(0x0, msg.sender, _totalSupply);\n', '  }\n', '\n', '\n', '  // internal functions\n', '}']
