['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to\n', '  * @param _value The amount to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner The address to query the the balance of\n', '  * @return An uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 The amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Cryder token contract\n', ' * @dev The minting functionality is reimplemented, as opposed to inherited\n', ' * from MintableToken, to allow for giving right to mint to arbitery account.\n', ' */\n', 'contract CryderToken is StandardToken, Ownable, Pausable {\n', '  // Disable transfer unless explicitly enabled\n', '  function CryderToken() public { paused = true; }\n', '\n', '  // The address of the contract or user that is allowed to mint tokens.\n', '  address public minter;\n', '  \n', '  /**\n', '   * @dev Variables\n', '   *\n', '   * @public FREEZE_TIME uint the time when team tokens can be transfered\n', '   * @public bounty the address of bounty manager \n', '  */\n', '  uint public FREEZE_TIME = 1550682000;\n', '  address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A;\n', '\n', '  /**\n', '   * @dev Set the address of the minter\n', '   * @param _minter address to be set as minter.\n', '   *\n', '   * Note: We also need to implement "mint" method.\n', '   */\n', '  function setMinter(address _minter) public onlyOwner {\n', '      minter = _minter;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    require(msg.sender == minter);\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev account for paused/unpaused-state.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    // Check for paused with an exception of bounty manager and freeze team tokens for 1 year\n', '    require(msg.sender == bounty || (!paused && msg.sender != owner) || (!paused && msg.sender == owner && now > FREEZE_TIME));\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    // Check for paused with an exception of bounty manager and freeze team tokens for 1 year with an additional _from check\n', '    require((msg.sender == bounty && _from == bounty) || (!paused && msg.sender != owner && _from != owner) || (!paused && msg.sender == owner && now > FREEZE_TIME));\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Token meta-information\n', "   * @param name of the token as it's shown to user\n", '   * @param symbol of the token\n', '   * @param decimals number\n', '   * Number of indivisible tokens that make up 1 CRYDER = 10^{decimals}\n', '   */\n', '  string public constant name = "Cryder Token";\n', '  string public constant symbol = "CRYDER";\n', '  uint8  public constant decimals = 18;\n', '}\n', '\n', '/**\n', ' * @title Cryder crowdsale contract\n', ' * @dev Govern the sale:\n', ' *   1) Taking place in a specific limited period of time.\n', ' *   2) Having HARDCAP value set --- a number of sold tokens to end the sale\n', ' *\n', ' * Owner can change time parameters at any time --- just in case of emergency\n', ' * Owner can change minter at any time --- just in case of emergency\n', ' *\n', ' * !!! There is no way to change the address of the wallet or bounty manager !!!\n', ' */\n', 'contract CryderCrowdsale is Ownable {\n', '    // Use SafeMath library to provide methods for uint256-type vars.\n', '    using SafeMath for uint256;\n', '\n', '    // The hardcoded address of wallet\n', '    address public wallet;\n', '\n', '    // The address of presale token\n', '    CryderToken public presaleToken;\n', '    \n', '    // The address of sale token\n', '    CryderToken public token;\n', '    \n', '    // Bounty must be allocated only once\n', '    bool public isBountyAllocated = false;\n', '    \n', '    // Requested tokens array\n', '    mapping(address => bool) tokenRequests;\n', '\n', '    /**\n', '     * @dev Variables\n', '     *\n', '     * @public START_TIME uint the time of the start of the sale\n', '     * @public CLOSE_TIME uint the time of the end of the sale\n', '     * @public HARDCAP uint256 if @HARDCAP is reached, sale stops\n', '     * @public exchangeRate the amount of indivisible quantities (=10^18 CRYDER) given for 1 wei\n', '     * @public bounty the address of bounty manager \n', '     */\n', '    uint public START_TIME = 1516467600;\n', '    uint public CLOSE_TIME = 1519146000;\n', '    uint256 public HARDCAP = 400000000000000000000000000;\n', '    uint256 public exchangeRate = 3000;\n', '    address public bounty = 0xa258Eb1817aA122acBa4Af66A7A064AE6E10552A;\n', '\n', '    /**\n', '     * Fallback function\n', '     * @dev The contracts are prevented from using fallback function.\n', '     * That prevents loosing control of tokens that will eventually get attributed to the contract, not the user.\n', '     * To buy tokens from the wallet (that is a contract) user has to specify beneficiary of tokens using buyTokens method.\n', '     */\n', '    function () payable public {\n', '      require(msg.sender == tx.origin);\n', '      buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev A function to withdraw all funds.\n', '     * Normally, contract should not have ether at all.\n', '     */\n', '    function withdraw() onlyOwner public {\n', '      wallet.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '     * @dev The constructor sets the tokens address\n', '     * @param _token address\n', '     */\n', '    function CryderCrowdsale(address _presaleToken, address _token, address _wallet) public {\n', '      presaleToken = CryderToken(_presaleToken);\n', '      token  = CryderToken(_token);\n', '      wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(\n', '      address indexed purchaser,\n', '      address indexed beneficiary,\n', '      uint256 value,\n', '      uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the start and end of the sale.\n', '     * @param _start uint256 start of the sale.\n', '     * @param _close uint256 end of the sale.\n', '     */\n', '    function setTime(uint _start, uint _close) public onlyOwner {\n', '      require( _start < _close );\n', '      START_TIME = _start;\n', '      CLOSE_TIME = _close;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets exhange rate, ie amount of tokens (10^18 CRYDER) for 1 wei.\n', '     * @param _exchangeRate uint256 new exhange rate.\n', '     */\n', '    function setExchangeRate(uint256 _exchangeRate) public onlyOwner  {\n', '      require(now < START_TIME);\n', '      exchangeRate = _exchangeRate;\n', '    }\n', '\n', '    /**\n', "     * @dev Buy tokens for all sent ether. Tokens will be added to beneficiary's account\n", '     * @param beneficiary address the owner of bought tokens.\n', '     */\n', '    function buyTokens(address beneficiary) payable public {\n', '      uint256 total = token.totalSupply();\n', '      uint256 amount = msg.value;\n', '      require(amount > 0);\n', '\n', '      // Check that hardcap not reached, and sale-time.\n', '      require(total < HARDCAP);\n', '      require(now >= START_TIME);\n', '      require(now < CLOSE_TIME);\n', '\n', '      // Override exchange rate for daily bonuses\n', '      if (now < START_TIME + 3600 * 24 * 1) {\n', '          exchangeRate = 3900;\n', '      } else if (now < START_TIME + 3600 * 24 * 3) {\n', '          exchangeRate = 3750;\n', '      } else if (now < START_TIME + 3600 * 24 * 5) {\n', '          exchangeRate = 3600;\n', '      } else {\n', '          exchangeRate = 3000;\n', '      }\n', '\n', '      // Mint tokens bought for all sent ether to beneficiary\n', '      uint256 tokens = amount.mul(exchangeRate);\n', '\n', '      token.mint(beneficiary, tokens);\n', '      TokenPurchase(msg.sender, beneficiary, amount, tokens);\n', '\n', '      // Mint 8% tokens to wallet as a team part\n', '      uint256 teamTokens = tokens / 100 * 8;\n', '      token.mint(wallet, teamTokens);\n', '\n', '      // Finally, sent all the money to wallet\n', '      wallet.transfer(amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev One time command to allocate 5kk bounty tokens\n', '     */\n', '     \n', '     function allocateBounty() public returns (bool) {\n', '         // Check for bounty manager and allocation state\n', '         require(msg.sender == bounty && isBountyAllocated == false);\n', '         // Mint bounty tokens to bounty managers address\n', '         token.mint(bounty, 5000000000000000000000000);\n', '         isBountyAllocated = true;\n', '         return true;\n', '     }\n', '     \n', '     function requestTokens() public returns (bool) {\n', '         require(presaleToken.balanceOf(msg.sender) > 0 && tokenRequests[msg.sender] == false);\n', '         token.mint(msg.sender, presaleToken.balanceOf(msg.sender));\n', '         tokenRequests[msg.sender] = true;\n', '         return true;\n', '     }\n', '}']