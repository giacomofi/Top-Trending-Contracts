['pragma solidity ^0.4.25;\n', '\n', '//LIBRARIES\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "the SafeMath multiplication check failed");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \trequire(b > 0, "the SafeMath division check failed");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "the SafeMath subtraction check failed");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "the SafeMath addition check failed");\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t    require(b != 0, "the SafeMath modulo check failed");\n', '\t    return a % b;\n', '\t }\n', '}\n', '\n', '//CONTRACT INTERFACE\n', '\n', 'contract OneHundredthMonkey {\n', '\tfunction adminWithdraw() public {}\n', '}\n', '\n', '//MAIN CONTRACT\n', '\n', 'contract FoundationFund {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t//CONSTANTS\n', '\n', '\tuint256 public fundsReceived;\n', '\taddress public masterAdmin;\n', '\taddress public mainContract;\n', '\tbool public mainContractSet = false;\n', '\n', '\taddress public teamMemberA = 0x2597afE84661669E590016E51f8FB0059D1Ad63e;   \n', '\taddress public teamMemberB = 0x2E6C1b2B4F7307dc588c289C9150deEB1A66b73d;\n', '\taddress public teamMemberC = 0xB3CaC7157d772A7685824309Dc1eB79497839795;\n', '\taddress public teamMemberD = 0x87395d203B35834F79B46cd16313E6027AE4c9D4;\n', '\n', '\tuint256 public teamMemberArate = 30; //30%\n', '\tuint256 public teamMemberBrate = 30; //30%\n', '\tuint256 public teamMemberCrate = 20; //20% \n', '\tuint256 public teamMemberDrate = 20; //20% \n', '\n', '\tmapping (address => uint256) public teamMemberTotal;\n', '\tmapping (address => uint256) public teamMemberUnclaimed;\n', '\tmapping (address => uint256) public teamMemberClaimed;\n', '\tmapping (address => bool) public validTeamMember;\n', '\tmapping (address => bool) public isProposedAddress;\n', '\tmapping (address => bool) public isProposing;\n', '\tmapping (address => uint256) public proposingAddressIndex;\n', '\n', '\t//CONSTRUCTOR\n', '\n', '\tconstructor() public {\n', '\t\tmasterAdmin = msg.sender;\n', '\t\tvalidTeamMember[teamMemberA] = true;\n', '\t\tvalidTeamMember[teamMemberB] = true;\n', '\t\tvalidTeamMember[teamMemberC] = true;\n', '\t\tvalidTeamMember[teamMemberD] = true;\n', '\t}\n', '\n', '\t//MODIFIERS\n', '\t\n', '\tmodifier isTeamMember() { \n', '\t\trequire (validTeamMember[msg.sender] == true, "you are not a team member"); \n', '\t\t_; \n', '\t}\n', '\n', '\tmodifier isMainContractSet() { \n', '\t\trequire (mainContractSet == true, "the main contract is not yet set"); \n', '\t\t_; \n', '\t}\n', '\n', '\tmodifier onlyHumans() { \n', '        require (msg.sender == tx.origin, "no contracts allowed"); \n', '        _; \n', '    }\n', '\n', '\t//EVENTS\n', '\tevent fundsIn(\n', '\t\tuint256 _amount,\n', '\t\taddress _sender,\n', '\t\tuint256 _totalFundsReceived\n', '\t);\n', '\n', '\tevent fundsOut(\n', '\t\tuint256 _amount,\n', '\t\taddress _receiver\n', '\t);\n', '\n', '\tevent addressChangeProposed(\n', '\t\taddress _old,\n', '\t\taddress _new\n', '\t);\n', '\n', '\tevent addressChangeRemoved(\n', '\t\taddress _old,\n', '\t\taddress _new\n', '\t);\n', '\n', '\tevent addressChanged(\n', '\t\taddress _old,\n', '\t\taddress _new\n', '\t);\n', '\n', '\t//FUNCTIONS\n', '\n', '\t//add main contract address \n', '\tfunction setContractAddress(address _address) external onlyHumans() {\n', '\t\trequire (msg.sender == masterAdmin);\n', '\t\trequire (mainContractSet == false);\n', '\t\tmainContract = _address;\n', '\t\tmainContractSet = true;\n', '\t}\n', '\n', '\t//withdrawProxy\n', '\tfunction withdrawProxy() external isTeamMember() isMainContractSet() onlyHumans() {\n', '\t\tOneHundredthMonkey o = OneHundredthMonkey(mainContract);\n', '\t\to.adminWithdraw();\n', '\t}\n', '\n', '\t//team member withdraw\n', '\tfunction teamWithdraw() external isTeamMember() isMainContractSet() onlyHumans() {\n', '\t\n', '\t\t//set up for msg.sender\n', '\t\taddress user;\n', '\t\tuint256 rate;\n', '\t\tif (msg.sender == teamMemberA) {\n', '\t\t\tuser = teamMemberA;\n', '\t\t\trate = teamMemberArate;\n', '\t\t} else if (msg.sender == teamMemberB) {\n', '\t\t\tuser = teamMemberB;\n', '\t\t\trate = teamMemberBrate;\n', '\t\t} else if (msg.sender == teamMemberC) {\n', '\t\t\tuser = teamMemberC;\n', '\t\t\trate = teamMemberCrate;\n', '\t\t} else if (msg.sender == teamMemberD) {\n', '\t\t\tuser = teamMemberD;\n', '\t\t\trate = teamMemberDrate;\n', '\t\t}\n', '\t\t\n', '\t\t//update accounting \n', '\t\tuint256 teamMemberShare = fundsReceived.mul(rate).div(100);\n', '\t\tteamMemberTotal[user] = teamMemberShare;\n', '\t\tteamMemberUnclaimed[user] = teamMemberTotal[user].sub(teamMemberClaimed[user]);\n', '\t\t\n', '\t\t//safe transfer \n', '\t\tuint256 toTransfer = teamMemberUnclaimed[user];\n', '\t\tteamMemberUnclaimed[user] = 0;\n', '\t\tteamMemberClaimed[user] = teamMemberTotal[user];\n', '\t\tuser.transfer(toTransfer);\n', '\n', '\t\temit fundsOut(toTransfer, user);\n', '\t}\n', '\n', '\tfunction proposeNewAddress(address _new) external isTeamMember() onlyHumans() {\n', '\t\trequire (isProposedAddress[_new] == false, "this address cannot be proposed more than once");\n', '\t\trequire (isProposing[msg.sender] == false, "you can only propose one address at a time");\n', '\n', '\t\tisProposing[msg.sender] = true;\n', '\t\tisProposedAddress[_new] = true;\n', '\n', '\t\tif (msg.sender == teamMemberA) {\n', '\t\t\tproposingAddressIndex[_new] = 0;\n', '\t\t} else if (msg.sender == teamMemberB) {\n', '\t\t\tproposingAddressIndex[_new] = 1;\n', '\t\t} else if (msg.sender == teamMemberC) {\n', '\t\t\tproposingAddressIndex[_new] = 2;\n', '\t\t} else if (msg.sender == teamMemberD) {\n', '\t\t\tproposingAddressIndex[_new] = 3;\n', '\t\t}\n', '\n', '\t\temit addressChangeProposed(msg.sender, _new);\n', '\t}\n', '\n', '\tfunction removeProposal(address _new) external isTeamMember() onlyHumans() {\n', '\t\trequire (isProposedAddress[_new] == true, "this address must be proposed but not yet accepted");\n', '\t\trequire (isProposing[msg.sender] == true, "your address must be actively proposing");\n', '\n', '\t\tif (proposingAddressIndex[_new] == 0 && msg.sender == teamMemberA) {\n', '\t\t\tisProposedAddress[_new] = false;\n', '\t\t\tisProposing[msg.sender] = false;\n', '\t\t} else if (proposingAddressIndex[_new] == 1 && msg.sender == teamMemberB) {\n', '\t\t\tisProposedAddress[_new] = false;\n', '\t\t\tisProposing[msg.sender] = false;\n', '\t\t} else if (proposingAddressIndex[_new] == 2 && msg.sender == teamMemberC) {\n', '\t\t\tisProposedAddress[_new] = false;\n', '\t\t\tisProposing[msg.sender] = false;\n', '\t\t} else if (proposingAddressIndex[_new] == 3 && msg.sender == teamMemberD) {\n', '\t\t\tisProposedAddress[_new] = false;\n', '\t\t\tisProposing[msg.sender] = false;\n', '\t\t} \n', '\n', '\t\temit addressChangeRemoved(msg.sender, _new);\n', '\t}\n', '\n', '\tfunction acceptProposal() external onlyHumans() {\n', '\t\trequire (isProposedAddress[msg.sender] == true, "your address must be proposed");\n', '\t\t\n', '\t\tif (proposingAddressIndex[msg.sender] == 0) {\n', '\t\t\taddress old = teamMemberA;\n', '\t\t\tvalidTeamMember[old] = false;\n', '\t\t\tisProposing[old] = false;\n', '\t\t\tteamMemberA = msg.sender;\n', '\t\t\tvalidTeamMember[teamMemberA] = true;\n', '\t\t} else if (proposingAddressIndex[msg.sender] == 1) {\n', '\t\t\told = teamMemberB;\n', '\t\t\tvalidTeamMember[old] = false;\n', '\t\t\tisProposing[old] = false;\n', '\t\t\tteamMemberB = msg.sender;\n', '\t\t\tvalidTeamMember[teamMemberB] = true;\n', '\t\t} else if (proposingAddressIndex[msg.sender] == 2) {\n', '\t\t\told = teamMemberC;\n', '\t\t\tvalidTeamMember[old] = false;\n', '\t\t\tisProposing[old] = false;\n', '\t\t\tteamMemberC = msg.sender;\n', '\t\t\tvalidTeamMember[teamMemberC] = true;\n', '\t\t} else if (proposingAddressIndex[msg.sender] == 3) {\n', '\t\t\told = teamMemberD;\n', '\t\t\tvalidTeamMember[old] = false;\n', '\t\t\tisProposing[old] = false;\n', '\t\t\tteamMemberD = msg.sender;\n', '\t\t\tvalidTeamMember[teamMemberD] = true;\n', '\t\t} \n', '\n', '\t\tisProposedAddress[msg.sender] = false;\n', '\n', '\t\temit addressChanged(old, msg.sender);\n', '\t}\n', '\n', '\t//VIEW FUNCTIONS\n', '\n', '\tfunction balanceOf(address _user) public view returns(uint256 _balance) {\n', '\t\taddress user;\n', '\t\tuint256 rate;\n', '\t\tif (_user == teamMemberA) {\n', '\t\t\tuser = teamMemberA;\n', '\t\t\trate = teamMemberArate;\n', '\t\t} else if (_user == teamMemberB) {\n', '\t\t\tuser = teamMemberB;\n', '\t\t\trate = teamMemberBrate;\n', '\t\t} else if (_user == teamMemberC) {\n', '\t\t\tuser = teamMemberC;\n', '\t\t\trate = teamMemberCrate;\n', '\t\t} else if (_user == teamMemberD) {\n', '\t\t\tuser = teamMemberD;\n', '\t\t\trate = teamMemberDrate;\n', '\t\t} else {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 teamMemberShare = fundsReceived.mul(rate).div(100);\n', '\t\tuint256 unclaimed = teamMemberShare.sub(teamMemberClaimed[_user]); \n', '\n', '\t\treturn unclaimed;\n', '\t}\n', '\n', '\tfunction contractBalance() public view returns(uint256 _contractBalance) {\n', '\t    return address(this).balance;\n', '\t}\n', '\n', '\t//FALLBACK\n', '\n', '\tfunction () public payable {\n', '\t\tfundsReceived += msg.value;\n', '\t\temit fundsIn(msg.value, msg.sender, fundsReceived); \n', '\t}\n', '}']