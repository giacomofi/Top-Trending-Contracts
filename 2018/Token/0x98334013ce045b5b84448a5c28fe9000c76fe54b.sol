['contract BitSTDLogic {\n', '    function name()constant  public returns(string) {}\n', '\tfunction symbol()constant  public returns(string) {}\n', '\tfunction decimals()constant  public returns(uint8) {}\n', '\tfunction totalSupply()constant  public returns(uint256) {}\n', '\tfunction allowance(address add,address _add)constant  public returns(uint256) {}\n', '\tfunction sellPrice()constant  public returns(uint256) {}\n', '\tfunction buyPrice()constant  public returns(uint256) {}\n', '\tfunction frozenAccount(address add)constant  public returns(bool) {}\n', '\tfunction migration(address sender,address add) public{}\n', '\tfunction balanceOf(address add)constant  public returns(uint256) {}\n', '\tfunction transfer(address sender,address _to, uint256 _value) public {}\n', '\tfunction transferFrom(address _from,address sender, address _to, uint256 _value) public returns (bool success) {}\n', '\tfunction approve(address _spender,address sender, uint256 _value) public returns (bool success) {}\n', '\tfunction approveAndCall(address _spender,address sender,address _contract, uint256 _value, bytes _extraData)public returns (bool success) {}\n', '\tfunction burn(address sender,uint256 _value) public returns (bool success) {}\n', '\tfunction burnFrom(address _from,address sender, uint256 _value) public returns (bool success) {}\n', '\tfunction mintToken(address target,address _contract, uint256 mintedAmount)  public {}\n', '\tfunction freezeAccount(address target, bool freeze)  public {}\n', '\tfunction buy(address _contract,address sender,uint256 value) payable public {}\n', '\tfunction sell(address _contract,address sender,uint256 amount) public {}\n', '\tfunction Transfer_of_authority(address newOwner) public{}\n', '\tfunction Transfer_of_authority_data(address newOwner) public {}\n', '\tfunction setData(address dataAddress) public {}\n', '\t// Old contract data\n', '    function getOld_BalanceOfr(address add)constant  public returns(uint256){}\n', '}\n', 'contract BitSTDView{\n', '\n', '\tBitSTDLogic private logic;\n', '\taddress public owner;\n', '\n', '    // This creates a public event on the blockchain that notifies the customer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // This tells the customer how much money is being burned\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\t//start Query data interface\n', '    function balanceOf(address add)constant  public returns(uint256) {\n', '\t    return logic.balanceOf(add);\n', '\t}\n', '\n', '\tfunction name() constant  public returns(string) {\n', '\t    return logic.name();\n', '\t}\n', '\n', '\tfunction symbol() constant  public returns(string) {\n', '\t    return logic.symbol();\n', '\t}\n', '\n', '\tfunction decimals() constant  public returns(uint8) {\n', '\t    return logic.decimals();\n', '\t}\n', '\n', '\tfunction totalSupply() constant  public returns(uint256) {\n', '\t    return logic.totalSupply();\n', '\t}\n', '\n', '\tfunction allowance(address add,address _add) constant  public returns(uint256) {\n', '\t    return logic.allowance(add,_add);\n', '\t}\n', '\n', '\tfunction sellPrice() constant  public returns(uint256) {\n', '\t    return logic.sellPrice();\n', '\t}\n', '\n', '\tfunction buyPrice() constant  public returns(uint256) {\n', '\t    return logic.buyPrice();\n', '\t}\n', '\n', '\tfunction frozenAccount(address add) constant  public returns(bool) {\n', '\t    return logic.frozenAccount(add);\n', '\t}\n', '\n', '\t//End Query data interface\n', '\n', '\t//initialize\n', '    function BitSTDView(address logicAddressr) public {\n', '        logic=BitSTDLogic(logicAddressr);\n', '        owner=msg.sender;\n', '    }\n', '\n', '    //start Authority and control\n', '    modifier onlyOwner(){\n', '\t\trequire(msg.sender == owner);\n', '        _;\n', '\t}\n', '\n', '\t//Update the address of the data and logic layer\n', '    function setBitSTD(address dataAddress,address logicAddressr) onlyOwner public{\n', '        logic=BitSTDLogic(logicAddressr);\n', '        logic.setData(dataAddress);\n', '    }\n', '\n', '    //Hand over the logical layer authority\n', '    function Transfer_of_authority_logic(address newOwner) onlyOwner public{\n', '        logic.Transfer_of_authority(newOwner);\n', '    }\n', '\n', '    //Hand over the data layer authority\n', '    function Transfer_of_authority_data(address newOwner) onlyOwner public{\n', '        logic.Transfer_of_authority_data(newOwner);\n', '    }\n', '\n', '    //Hand over the view layer authority\n', '    function Transfer_of_authority(address newOwner) onlyOwner public{\n', '        owner=newOwner;\n', '    }\n', '    //End Authority and control\n', '\n', '    //data migration\n', '    function migration(address add) public{\n', '        logic.migration(msg.sender,add);\n', '        emit Transfer(msg.sender, add,logic.getOld_BalanceOfr(add));\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\tfunction transfer(address _to, uint256 _value) public {\n', '\t    logic.transfer(msg.sender,_to,_value);\n', '\t    emit Transfer(msg.sender, _to, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t    return logic.transferFrom( _from, msg.sender,  _to,  _value);\n', '\t     emit Transfer(_from, _to, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t    return logic.approve( _spender, msg.sender,  _value);\n', '\t}\n', '\n', '\t/**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\t    return logic.approveAndCall( _spender, msg.sender,this,  _value,  _extraData);\n', '\t}\n', '\n', '\t/**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '\tfunction burn(uint256 _value) public returns (bool success) {\n', '\t    return logic.burn( msg.sender, _value);\n', '\t    emit Burn(msg.sender, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\t    return logic.burnFrom( _from, msg.sender,  _value);\n', '\t    emit Burn(_from, _value);\n', '\t}\n', '\n', '\t/// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\t    logic.mintToken( target,this,  mintedAmount);\n', '\t    emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '\t}\n', '\n', '\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\n', '\t    logic.freezeAccount( target,  freeze);\n', '\t    emit FrozenFunds(target, freeze);\n', '\t}\n', '\n', '\t//The next two are buying and selling tokens\n', '\tfunction buy() payable public {\n', '\t    logic.buy( this,msg.sender,msg.value);\n', '\t}\n', '\n', '\tfunction sell(uint256 amount) public {\n', '\t    logic.sell( this,msg.sender, amount);\n', '\t}\n', '\n', '}']
['contract BitSTDLogic {\n', '    function name()constant  public returns(string) {}\n', '\tfunction symbol()constant  public returns(string) {}\n', '\tfunction decimals()constant  public returns(uint8) {}\n', '\tfunction totalSupply()constant  public returns(uint256) {}\n', '\tfunction allowance(address add,address _add)constant  public returns(uint256) {}\n', '\tfunction sellPrice()constant  public returns(uint256) {}\n', '\tfunction buyPrice()constant  public returns(uint256) {}\n', '\tfunction frozenAccount(address add)constant  public returns(bool) {}\n', '\tfunction migration(address sender,address add) public{}\n', '\tfunction balanceOf(address add)constant  public returns(uint256) {}\n', '\tfunction transfer(address sender,address _to, uint256 _value) public {}\n', '\tfunction transferFrom(address _from,address sender, address _to, uint256 _value) public returns (bool success) {}\n', '\tfunction approve(address _spender,address sender, uint256 _value) public returns (bool success) {}\n', '\tfunction approveAndCall(address _spender,address sender,address _contract, uint256 _value, bytes _extraData)public returns (bool success) {}\n', '\tfunction burn(address sender,uint256 _value) public returns (bool success) {}\n', '\tfunction burnFrom(address _from,address sender, uint256 _value) public returns (bool success) {}\n', '\tfunction mintToken(address target,address _contract, uint256 mintedAmount)  public {}\n', '\tfunction freezeAccount(address target, bool freeze)  public {}\n', '\tfunction buy(address _contract,address sender,uint256 value) payable public {}\n', '\tfunction sell(address _contract,address sender,uint256 amount) public {}\n', '\tfunction Transfer_of_authority(address newOwner) public{}\n', '\tfunction Transfer_of_authority_data(address newOwner) public {}\n', '\tfunction setData(address dataAddress) public {}\n', '\t// Old contract data\n', '    function getOld_BalanceOfr(address add)constant  public returns(uint256){}\n', '}\n', 'contract BitSTDView{\n', '\n', '\tBitSTDLogic private logic;\n', '\taddress public owner;\n', '\n', '    // This creates a public event on the blockchain that notifies the customer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // This tells the customer how much money is being burned\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\t//start Query data interface\n', '    function balanceOf(address add)constant  public returns(uint256) {\n', '\t    return logic.balanceOf(add);\n', '\t}\n', '\n', '\tfunction name() constant  public returns(string) {\n', '\t    return logic.name();\n', '\t}\n', '\n', '\tfunction symbol() constant  public returns(string) {\n', '\t    return logic.symbol();\n', '\t}\n', '\n', '\tfunction decimals() constant  public returns(uint8) {\n', '\t    return logic.decimals();\n', '\t}\n', '\n', '\tfunction totalSupply() constant  public returns(uint256) {\n', '\t    return logic.totalSupply();\n', '\t}\n', '\n', '\tfunction allowance(address add,address _add) constant  public returns(uint256) {\n', '\t    return logic.allowance(add,_add);\n', '\t}\n', '\n', '\tfunction sellPrice() constant  public returns(uint256) {\n', '\t    return logic.sellPrice();\n', '\t}\n', '\n', '\tfunction buyPrice() constant  public returns(uint256) {\n', '\t    return logic.buyPrice();\n', '\t}\n', '\n', '\tfunction frozenAccount(address add) constant  public returns(bool) {\n', '\t    return logic.frozenAccount(add);\n', '\t}\n', '\n', '\t//End Query data interface\n', '\n', '\t//initialize\n', '    function BitSTDView(address logicAddressr) public {\n', '        logic=BitSTDLogic(logicAddressr);\n', '        owner=msg.sender;\n', '    }\n', '\n', '    //start Authority and control\n', '    modifier onlyOwner(){\n', '\t\trequire(msg.sender == owner);\n', '        _;\n', '\t}\n', '\n', '\t//Update the address of the data and logic layer\n', '    function setBitSTD(address dataAddress,address logicAddressr) onlyOwner public{\n', '        logic=BitSTDLogic(logicAddressr);\n', '        logic.setData(dataAddress);\n', '    }\n', '\n', '    //Hand over the logical layer authority\n', '    function Transfer_of_authority_logic(address newOwner) onlyOwner public{\n', '        logic.Transfer_of_authority(newOwner);\n', '    }\n', '\n', '    //Hand over the data layer authority\n', '    function Transfer_of_authority_data(address newOwner) onlyOwner public{\n', '        logic.Transfer_of_authority_data(newOwner);\n', '    }\n', '\n', '    //Hand over the view layer authority\n', '    function Transfer_of_authority(address newOwner) onlyOwner public{\n', '        owner=newOwner;\n', '    }\n', '    //End Authority and control\n', '\n', '    //data migration\n', '    function migration(address add) public{\n', '        logic.migration(msg.sender,add);\n', '        emit Transfer(msg.sender, add,logic.getOld_BalanceOfr(add));\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\tfunction transfer(address _to, uint256 _value) public {\n', '\t    logic.transfer(msg.sender,_to,_value);\n', '\t    emit Transfer(msg.sender, _to, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t    return logic.transferFrom( _from, msg.sender,  _to,  _value);\n', '\t     emit Transfer(_from, _to, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t    return logic.approve( _spender, msg.sender,  _value);\n', '\t}\n', '\n', '\t/**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\t    return logic.approveAndCall( _spender, msg.sender,this,  _value,  _extraData);\n', '\t}\n', '\n', '\t/**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '\tfunction burn(uint256 _value) public returns (bool success) {\n', '\t    return logic.burn( msg.sender, _value);\n', '\t    emit Burn(msg.sender, _value);\n', '\t}\n', '\n', '\t/**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\t    return logic.burnFrom( _from, msg.sender,  _value);\n', '\t    emit Burn(_from, _value);\n', '\t}\n', '\n', '\t/// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\t    logic.mintToken( target,this,  mintedAmount);\n', '\t    emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '\t}\n', '\n', '\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\n', '\t    logic.freezeAccount( target,  freeze);\n', '\t    emit FrozenFunds(target, freeze);\n', '\t}\n', '\n', '\t//The next two are buying and selling tokens\n', '\tfunction buy() payable public {\n', '\t    logic.buy( this,msg.sender,msg.value);\n', '\t}\n', '\n', '\tfunction sell(uint256 amount) public {\n', '\t    logic.sell( this,msg.sender, amount);\n', '\t}\n', '\n', '}']
