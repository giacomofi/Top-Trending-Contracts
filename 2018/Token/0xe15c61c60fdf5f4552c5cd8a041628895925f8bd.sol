['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    // 本token的公共变量\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18位小数点，尽量不修改\n', '    uint256 public totalSupply;\n', '\n', '    // 余额数组\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance; //2维数组限额\n', '\n', '    //Token转移事件 This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // 蒸发某个账户的token This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * 初始化 合约 Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 小数变整数 乘18个0   Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // 初始token数量 Give the creator all initial tokens\n', '        name = tokenName;                                   // 设置token名称  Set the name for display purposes\n', '        symbol = tokenSymbol;                               // 设置token符号 Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * 赠送货币 Internal transfer, only can be called by this contract\n', ' \t付款地址，收款地址，数量\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 确定收款地址存在  Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // 检查付款地址是否有足够的余额 Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        //检查收款地址收到的金额是否是负数  Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        //收款地址和付款地址的总额  Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 付款地址中的余额-付款金额  Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // 收款地址中的余额+付款金额 Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // 判断付款行为后两个账户的总额是否发生变化   Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *从当前账户向其他账户发送token\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // 检查限额 Check allowance\n', '        allowance[_from][msg.sender] -= _value;  //减少相应的限额\n', '        _transfer(_from, _to, _value);  //调用调用交易，完成交易\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 设置账户限额  Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 设置其他账户限额 Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *蒸发自己的token\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   //判断使用者的余额是否充足 Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            //减掉token Subtract from the sender\n', '        totalSupply -= _value;                      //减掉总taoken数 Updates totalSupply\n', '        emit Burn(msg.sender, _value);              //触发Burn事件\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *蒸发别人的token\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // 检查别人的余额是否充足  Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // 检查限额是否充足 Check allowance\n', '        balanceOf[_from] -= _value;                         // 蒸发token Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // 去除限额 Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // 减掉总taoken数Update totalSupply\n', '        emit Burn(_from, _value);\t\t\t    //触发Burn事件\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', ' contract stsc is owned, TokenERC20{\n', '\n', '    bool public freeze=true;\n', '\n', '    function stsc() TokenERC20(20000000000,"StarbullCoin","STSC") public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (freeze);\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '\t    uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 付款地址中的余额-付款金额  Subtract from the sender\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '        // 判断付款行为后两个账户的总额是否发生变化   Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function setfreeze(bool state) onlyOwner public{\n', '        freeze=state;\n', '    }\n', ' }']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    // 本token的公共变量\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18位小数点，尽量不修改\n', '    uint256 public totalSupply;\n', '\n', '    // 余额数组\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance; //2维数组限额\n', '\n', '    //Token转移事件 This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // 蒸发某个账户的token This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * 初始化 合约 Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 小数变整数 乘18个0   Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // 初始token数量 Give the creator all initial tokens\n', '        name = tokenName;                                   // 设置token名称  Set the name for display purposes\n', '        symbol = tokenSymbol;                               // 设置token符号 Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * 赠送货币 Internal transfer, only can be called by this contract\n', ' \t付款地址，收款地址，数量\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 确定收款地址存在  Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // 检查付款地址是否有足够的余额 Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        //检查收款地址收到的金额是否是负数  Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        //收款地址和付款地址的总额  Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 付款地址中的余额-付款金额  Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // 收款地址中的余额+付款金额 Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // 判断付款行为后两个账户的总额是否发生变化   Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *从当前账户向其他账户发送token\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // 检查限额 Check allowance\n', '        allowance[_from][msg.sender] -= _value;  //减少相应的限额\n', '        _transfer(_from, _to, _value);  //调用调用交易，完成交易\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 设置账户限额  Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 设置其他账户限额 Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *蒸发自己的token\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   //判断使用者的余额是否充足 Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            //减掉token Subtract from the sender\n', '        totalSupply -= _value;                      //减掉总taoken数 Updates totalSupply\n', '        emit Burn(msg.sender, _value);              //触发Burn事件\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *蒸发别人的token\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // 检查别人的余额是否充足  Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // 检查限额是否充足 Check allowance\n', '        balanceOf[_from] -= _value;                         // 蒸发token Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // 去除限额 Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // 减掉总taoken数Update totalSupply\n', '        emit Burn(_from, _value);\t\t\t    //触发Burn事件\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', ' contract stsc is owned, TokenERC20{\n', '\n', '    bool public freeze=true;\n', '\n', '    function stsc() TokenERC20(20000000000,"StarbullCoin","STSC") public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (freeze);\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '\t    uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 付款地址中的余额-付款金额  Subtract from the sender\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '        // 判断付款行为后两个账户的总额是否发生变化   Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function setfreeze(bool state) onlyOwner public{\n', '        freeze=state;\n', '    }\n', ' }']
