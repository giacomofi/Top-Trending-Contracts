['pragma solidity ^0.4.18;\n', ' \n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'interface Token {\n', '  function balanceOf(address _owner) public constant returns (uint256 );\n', '  function transfer(address _to, uint256 _value) public ;\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract Airdropper is Ownable {\n', '    \n', '    function AirTransfer(address[] _recipients, uint _values, address _tokenAddress) onlyOwner public returns (bool) {\n', '        require(_recipients.length > 0);\n', '\n', '        Token token = Token(_tokenAddress);\n', '        \n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            token.transfer(_recipients[j], _values);\n', '        }\n', ' \n', '        return true;\n', '    }\n', ' \n', '     function withdrawalToken(address _tokenAddress) onlyOwner public { \n', '        Token token = Token(_tokenAddress);\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '\n', '}']