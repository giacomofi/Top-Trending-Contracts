['pragma solidity 0.4.21;\n', '\n', '\n', '\n', '    // Tipbot, Crypto For Everyone\n', '\n', '\n', '\n', '    // Contract Owner - Tipbot - 0x72BA45c9e729f13CD2F6AA4B410f83bE1410E982\n', '\n', '\n', '\n', '    // Official Website - http://www.Tipbot.io\n', '\n', '    // Official Twitter - http://www.twitter.com/officialtipbot\n', '\n', '    // Official Reddit - http://www.reddit.com/r/officialtipbot\n', '\n', '    // Official Telegram - http://www.t.me/officialtipbot/\n', '\n', '\n', '\n', '    // Contract Developed By - Tipbot LTD\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        // assert(b > 0); \n', '\n', '        uint256 c = a / b;\n', '\n', '        // assert(a == b * c + a % b); \n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '\n', '\n', '\n', '\n', '    function Ownable() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        require(newOwner != address(0));\n', '\n', '        owner = newOwner;\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract tipbotreg {\n', '\n', '    uint256 public stakeCommence;\n', '\n', '    uint256 public stakeMinAge;\n', '\n', '    uint256 public stakeMaxAge;\n', '\n', '    function mint() public returns (bool);\n', '\n', '    function coinAge() public payable returns (uint256);\n', '\n', '    function annualInterest() public view returns (uint256);\n', '\n', '    event Mint(address indexed _address, uint _reward);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', ' // Initial Configuration\n', '\n', ' \n', '\n', ' \n', '\n', 'contract tipbot is ERC20,tipbotreg,Ownable {\n', '\n', '        using SafeMath for uint256;\n', '\n', '\n', '\n', '        string public name = "tipbot";\n', '\n', '        string public symbol = "TIP";\n', '\n', '        \n', '\n', '        uint public decimals = 18;\n', '\n', '\n', '\n', '        \n', '\n', '        uint public stakeCommence; //Proof Of Stake Start Timestamp\n', '\n', '        \n', '\n', '        uint public stakeMinAge = 3 days; // Minimum Age For Coin Age: 3 days\n', '\n', '        \n', '\n', '        uint public stakeMaxAge = 90 days; // Maximimum age for coin age: 90 days\n', '\n', '        \n', '\n', '        uint public maxMintPoS = 10**17; // Proof Of Stake default interest equates to 10% annually\n', '\n', '        \n', '\n', '        uint public chainStartTime; // The timestamp in which the chain starts\n', '\n', '        \n', '\n', '        uint public chainStartBlock; //The block number in which the chain starts\n', '\n', '\n', '\n', '        uint public totalSupply;\n', '\n', '        \n', '\n', '        uint public maxTIPSupply;\n', '\n', '        \n', '\n', '        uint public initialTIPsupply;\n', '\n', '\n', '\n', '        struct transferInStruct{\n', '\n', '        \n', '\n', '        uint256 amount;\n', '\n', '        \n', '\n', '        uint64 time;\n', '\n', '    }\n', '\n', '\n', '\n', '        mapping(address => uint256) balances;\n', '\n', '        \n', '\n', '        mapping(address => mapping (address => uint256)) allowed;\n', '\n', '        \n', '\n', '        mapping(address => transferInStruct[]) transferIns;\n', '\n', '\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '\n', '   \n', '\n', '   \n', '\n', '   modifier onlyPayloadSize(uint size) {\n', '\n', '        require(msg.data.length >= size + 4);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    modifier canTIPMint() {\n', '\n', '        require(totalSupply < maxTIPSupply);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    function tipbot() public {\n', '\n', '    \n', '\n', '    // 104 Billion Token Initial Supply\n', '\n', '        initialTIPsupply = 104000000000000000000000000000; \n', '\n', '        \n', '\n', '    // 375 Billion Maximum Token Supply.\n', '\n', '        maxTIPSupply = 375000000000000000000000000000; \n', '\n', '        \n', '\n', '        chainStartTime = block.timestamp;\n', '\n', '        chainStartBlock = block.number;\n', '\n', '\n', '\n', '        balances[msg.sender] = initialTIPsupply;\n', '\n', '        totalSupply = initialTIPsupply;\n', '\n', '    }\n', '\n', '    \n', '\n', ' // Transfer Function\n', '\n', ' \n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '\n', '        if(msg.sender == _to) return mint();\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '\n', '        uint64 _now = uint64(block.timestamp);\n', '\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),_now));\n', '\n', '        transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    \n', '\n', '\n', '\n', ' // Balance Function\n', '\n', ' \n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '    \n', '\n', '\n', '\n', ' // Transfer Function\n', '\n', ' \n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        if(transferIns[_from].length > 0) delete transferIns[_from];\n', '\n', '        uint64 _now = uint64(block.timestamp);\n', '\n', '        transferIns[_from].push(transferInStruct(uint256(balances[_from]),_now));\n', '\n', '        transferIns[_to].push(transferInStruct(uint256(_value),_now));\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    \n', '\n', '// PoS must be manually triggered by the contract creator using a UNIX timestamp. It is advisable to set the timestamp 15 minutes ahead of time to prevent failure\n', '\n', '\n', '\n', '    function ownerSetStakeCommence(uint timestamp) public onlyOwner {\n', '\n', '        require((stakeCommence <= 0) && (timestamp >= chainStartTime));\n', '\n', '        stakeCommence = timestamp;\n', '\n', '    }\n', '\n', '    \n', '\n', '\n', '\n', '//approve function\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    \n', '\n', '    \n', '\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', ' // Mint Function\n', '\n', ' \n', '\n', ' \n', '\n', '    function mint() public canTIPMint returns (bool) {\n', '\n', '        if(balances[msg.sender] <= 0) return false;\n', '\n', '        if(transferIns[msg.sender].length <= 0) return false;\n', '\n', '\n', '\n', '        uint reward = getPoSReward(msg.sender);\n', '\n', '        if(reward <= 0) return false;\n', '\n', '\n', '\n', '        totalSupply = totalSupply.add(reward);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '\n', '        delete transferIns[msg.sender];\n', '\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),uint64(block.timestamp)));\n', '\n', '\n', '\n', '        emit Mint(msg.sender, reward);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function getBlockNumber() public view returns (uint blockNumber) {\n', '\n', '        blockNumber = block.number.sub(chainStartBlock);\n', '\n', '    }\n', '\n', '    \n', '\n', '// Coin Age Function\n', '\n', '\n', '\n', '    function coinAge() public payable returns (uint myCoinAge) {\n', '\n', '        myCoinAge = getCoinAge(msg.sender,block.timestamp);\n', '\n', '    }\n', '\n', '\n', '\n', '// Annual Interest  Function\n', '\n', '    function annualInterest() public view returns(uint interest) {\n', '\n', '        uint _now = block.timestamp;\n', '\n', '        interest = maxMintPoS;\n', '\n', '        if((_now.sub(stakeCommence)).div(365 days) == 0) {\n', '\n', '            interest = (770 * maxMintPoS).div(100);\n', '\n', '        } else if((_now.sub(stakeCommence)).div(365 days) == 1){\n', '\n', '            interest = (435 * maxMintPoS).div(100);\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '// Stake Reward Function\n', '\n', '\n', '\n', '    function getPoSReward(address _address) internal view returns (uint) {\n', '\n', '        require( (block.timestamp >= stakeCommence) && (stakeCommence > 0) );\n', '\n', '\n', '\n', '        uint _now = block.timestamp;\n', '\n', '        uint _coinAge = getCoinAge(_address, _now);\n', '\n', '        if(_coinAge <= 0) return 0;\n', '\n', '\n', '\n', '        uint interest = maxMintPoS;\n', '\n', '       \n', '\n', '        if((_now.sub(stakeCommence)).div(365 days) == 0) {\n', '\n', '            interest = (770 * maxMintPoS).div(100);\n', '\n', '        } else if((_now.sub(stakeCommence)).div(365 days) == 1){\n', '\n', '            // 2nd year effective annual interest rate is 50%\n', '\n', '            interest = (435 * maxMintPoS).div(100);\n', '\n', '        }\n', '\n', '\n', '\n', '        return (_coinAge * interest).div(365 * (10**decimals));\n', '\n', '    }\n', '\n', '\n', '\n', '    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\n', '\n', '        if(transferIns[_address].length <= 0) return 0;\n', '\n', '\n', '\n', '        for (uint i = 0; i < transferIns[_address].length; i++){\n', '\n', '            if( _now < uint(transferIns[_address][i].time).add(stakeMinAge) ) continue;\n', '\n', '\n', '\n', '            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\n', '\n', '            if( nCoinSeconds > stakeMaxAge ) nCoinSeconds = stakeMaxAge;\n', '\n', '\n', '\n', '            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '\n', ' // Batch Transfer Function\n', '\n', ' \n', '\n', '    function batchTransfer(address[] _recipients, uint[] _values) public onlyOwner returns (bool) {\n', '\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', '\n', '\n', '\n', '        uint total = 0;\n', '\n', '        for(uint i = 0; i < _values.length; i++){\n', '\n', '            total = total.add(_values[i]);\n', '\n', '        }\n', '\n', '        require(total <= balances[msg.sender]);\n', '\n', '\n', '\n', '        uint64 _now = uint64(block.timestamp);\n', '\n', '        for(uint j = 0; j < _recipients.length; j++){\n', '\n', '            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n', '\n', '            transferIns[_recipients[j]].push(transferInStruct(uint256(_values[j]),_now));\n', '\n', '            emit Transfer(msg.sender, _recipients[j], _values[j]);\n', '\n', '        }\n', '\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(total);\n', '\n', '        if(transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '\n', '        if(balances[msg.sender] > 0) transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),_now));\n', '\n', '\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    \n', '\n', '// Batch Token Function\n', '\n', '\n', '\n', '        function TokenBurn(uint _value) public onlyOwner {\n', '\n', '        require(_value > 0);\n', '\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        delete transferIns[msg.sender];\n', '\n', '        transferIns[msg.sender].push(transferInStruct(uint256(balances[msg.sender]),uint64(block.timestamp)));\n', '\n', '\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        initialTIPsupply = initialTIPsupply.sub(_value);\n', '\n', '        maxTIPSupply = maxTIPSupply.sub(_value*10);\n', '\n', '\n', '\n', '        emit Burn(msg.sender, _value);\n', '\n', '    }\n', '\n', '   \n', '\n', '}']