['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Climatecoin extended ERC20 token contract created on February the 17th, 2018 by Rincker Productions in the Netherlands \n', ' *\n', ' * For terms and conditions visit https://climatecoin.eu\n', ' */\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner == 0x0) revert();\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * Overflow aware uint math functions.\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  /*function assert(bool assertion) internal {\n', '    if (!assertion) revert();\n', '  }*/\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '/* ClimateCoin Contract */\n', 'contract ClimateCoinToken is owned, SafeMath, StandardToken {\n', '    string public code = "CLI";                                     // Set the name for display purposes\n', '    string public name = "ClimateCoin";                                     // Set the name for display purposes\n', '    string public symbol = "Ðš";                                             // Set the symbol for display purposes U+041A HTML-code: &#1050;\n', '    address public ClimateCoinAddress = this;                               // Address of the ClimateCoin token\n', '    uint8 public decimals = 2;                                              // Amount of decimals for display purposes\n', '    uint256 public totalSupply = 10000000;                                  // Set total supply of ClimateCoins (eight trillion)\n', '    uint256 public buyPriceEth = 1 finney;                                  // Buy price for ClimateCoins\n', '    uint256 public sellPriceEth = 1 finney;                                 // Sell price for ClimateCoins\n', '    uint256 public gasForCLI = 5 finney;                                    // Eth from contract against CLI to pay tx (10 times sellPriceEth)\n', '    uint256 public CLIForGas = 10;                                          // CLI to contract against eth to pay tx\n', "    uint256 public gasReserve = 0.2 ether;                                    // Eth amount that remains in the contract for gas and can't be sold\n", '    uint256 public minBalanceForAccounts = 10 finney;                       // Minimal eth balance of sender and recipient\n', '    bool public directTradeAllowed = false;                                 // Halt trading CLI by sending to the contract directly\n', '    \n', '    /* include mintable */\n', '    \n', '    event Mint(address indexed to, uint value);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '     modifier canMint() {\n', '    if(mintingFinished) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply = safeAdd(totalSupply,_amount);\n', '    balances[_to] = safeAdd(balances[_to],_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '  /* end mintable */\n', '\n', '\n', '/* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function ClimateCoinToken() public {\n', '        balances[msg.sender] = totalSupply;                                 // Give the creator all tokens\n', '    }\n', '\n', '\n', '/* Constructor parameters */\n', '    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) onlyOwner public {\n', '        buyPriceEth = newBuyPriceEth;                                       // Set prices to buy and sell CLI\n', '        sellPriceEth = newSellPriceEth;\n', '    }\n', '    function setGasForCLI(uint newGasAmountInWei) onlyOwner public {\n', '        gasForCLI = newGasAmountInWei;\n', '    }\n', '    function setCLIForGas(uint newCLIAmount) onlyOwner public {\n', '        CLIForGas = newCLIAmount;\n', '    }\n', '    function setGasReserve(uint newGasReserveInWei) onlyOwner public {\n', '        gasReserve = newGasReserveInWei;\n', '    }\n', '    function setMinBalance(uint minimumBalanceInWei) onlyOwner public {\n', '        minBalanceForAccounts = minimumBalanceInWei;\n', '    }\n', '\n', '\n', '/* Halts or unhalts direct trades without the sell/buy functions below */\n', '    function haltDirectTrade() onlyOwner public {\n', '        directTradeAllowed = false;\n', '    }\n', '    function unhaltDirectTrade() onlyOwner public {\n', '        directTradeAllowed = true;\n', '    }\n', '\n', '\n', '/* Transfer function extended by check of eth balances and pay transaction costs with CLI if not enough eth */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (_value < CLIForGas) revert();                                      // Prevents drain and spam\n', '        if (msg.sender != owner && _to == ClimateCoinAddress && directTradeAllowed) {\n', '            sellClimateCoinsAgainstEther(_value);                             // Trade ClimateCoins against eth by sending to the token contract\n', '            return true;\n', '        }\n', '\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {               // Check if sender has enough and for overflows\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value);   // Subtract CLI from the sender\n', '\n', '            if (msg.sender.balance >= minBalanceForAccounts && _to.balance >= minBalanceForAccounts) {    // Check if sender can pay gas and if recipient could\n', '                balances[_to] = safeAdd(balances[_to], _value);             // Add the same amount of CLI to the recipient\n', '                Transfer(msg.sender, _to, _value);                          // Notify anyone listening that this transfer took place\n', '                return true;\n', '            } else {\n', '                balances[this] = safeAdd(balances[this], CLIForGas);        // Pay CLIForGas to the contract\n', '                balances[_to] = safeAdd(balances[_to], safeSub(_value, CLIForGas));  // Recipient balance -CLIForGas\n', '                Transfer(msg.sender, _to, safeSub(_value, CLIForGas));      // Notify anyone listening that this transfer took place\n', '\n', '                if(msg.sender.balance < minBalanceForAccounts) {\n', '                    if(!msg.sender.send(gasForCLI)) revert();                  // Send eth to sender\n', '                  }\n', '                if(_to.balance < minBalanceForAccounts) {\n', '                    if(!_to.send(gasForCLI)) revert();                         // Send eth to recipient\n', '                }\n', '            }\n', '        } else { revert(); }\n', '    }\n', '\n', '\n', '/* User buys ClimateCoins and pays in Ether */\n', '    function buyClimateCoinsAgainstEther() public payable returns (uint amount) {\n', '        if (buyPriceEth == 0 || msg.value < buyPriceEth) revert();             // Avoid dividing 0, sending small amounts and spam\n', '        amount = msg.value / buyPriceEth;                                   // Calculate the amount of ClimateCoins\n', '        if (balances[this] < amount) revert();                                 // Check if it has enough to sell\n', "        balances[msg.sender] = safeAdd(balances[msg.sender], amount);       // Add the amount to buyer's balance\n", '        balances[this] = safeSub(balances[this], amount);                   // Subtract amount from ClimateCoin balance\n', '        Transfer(this, msg.sender, amount);                                 // Execute an event reflecting the change\n', '        return amount;\n', '    }\n', '\n', '\n', '/* User sells ClimateCoins and gets Ether */\n', '    function sellClimateCoinsAgainstEther(uint256 amount) public returns (uint revenue) {\n', '        if (sellPriceEth == 0 || amount < CLIForGas) revert();                // Avoid selling and spam\n', '        if (balances[msg.sender] < amount) revert();                           // Check if the sender has enough to sell\n', '        revenue = safeMul(amount, sellPriceEth);                            // Revenue = eth that will be send to the user\n', '        if (safeSub(this.balance, revenue) < gasReserve) revert();             // Keep min amount of eth in contract to provide gas for transactions\n', "        if (!msg.sender.send(revenue)) {                                    // Send ether to the seller. It's important\n", '            revert();                                                          // To do this last to avoid recursion attacks\n', '        } else {\n', '            balances[this] = safeAdd(balances[this], amount);               // Add the amount to ClimateCoin balance\n', "            balances[msg.sender] = safeSub(balances[msg.sender], amount);   // Subtract the amount from seller's balance\n", '            Transfer(this, msg.sender, revenue);                            // Execute an event reflecting on the change\n', '            return revenue;                                                 // End function and returns\n', '        }\n', '    }\n', '\n', '\n', '/* refund to owner */\n', '    function refundToOwner (uint256 amountOfEth, uint256 cli) public onlyOwner {\n', '        uint256 eth = safeMul(amountOfEth, 1 ether);\n', "        if (!msg.sender.send(eth)) {                                        // Send ether to the owner. It's important\n", '            revert();                                                          // To do this last to avoid recursion attacks\n', '        } else {\n', '            Transfer(this, msg.sender, eth);                                // Execute an event reflecting on the change\n', '        }\n', '        if (balances[this] < cli) revert();                                    // Check if it has enough to sell\n', "        balances[msg.sender] = safeAdd(balances[msg.sender], cli);          // Add the amount to buyer's balance\n", "        balances[this] = safeSub(balances[this], cli);                      // Subtract amount from seller's balance\n", '        Transfer(this, msg.sender, cli);                                    // Execute an event reflecting the change\n', '    }\n', '\n', '/* This unnamed function is called whenever someone tries to send ether to it and possibly sells ClimateCoins */\n', '    function() public payable {\n', '        if (msg.sender != owner) {\n', '            if (!directTradeAllowed) revert();\n', '            buyClimateCoinsAgainstEther();                                    // Allow direct trades by sending eth to the contract\n', '        }\n', '    }\n', '}']