['pragma solidity ^0.4.0;\n', '\n', '\n', 'contract TTC {\n', '    \n', '    \n', '    // function balanceOf(address _owner) public view returns (uint256 balance);\n', '    // function transfer(address _to, uint256 _value) public returns (bool success);\n', '    // function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    // function approve(address _spender, uint256 _value) public returns (bool success);\n', '    // function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint8 public decimals;                //How many decimals to show.\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    address admin;\n', '    mapping (address => bool) admin_list;\n', '\n', '    function TTC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        admin = msg.sender;\n', '        admin_list[admin] = true;\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '    \n', '    function admin_setAdmin(address _target,bool _isAdmin) public returns (bool success) {\n', '        require(msg.sender == admin);\n', '        admin_list[_target] = _isAdmin;\n', '        return true;\n', '    }\n', '    \n', '    function admin_transfer(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(admin_list[msg.sender]);\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.0;\n', '\n', '\n', 'contract TTC {\n', '    \n', '    \n', '    // function balanceOf(address _owner) public view returns (uint256 balance);\n', '    // function transfer(address _to, uint256 _value) public returns (bool success);\n', '    // function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    // function approve(address _spender, uint256 _value) public returns (bool success);\n', '    // function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint8 public decimals;                //How many decimals to show.\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    address admin;\n', '    mapping (address => bool) admin_list;\n', '\n', '    function TTC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        admin = msg.sender;\n', '        admin_list[admin] = true;\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '    \n', '    function admin_setAdmin(address _target,bool _isAdmin) public returns (bool success) {\n', '        require(msg.sender == admin);\n', '        admin_list[_target] = _isAdmin;\n', '        return true;\n', '    }\n', '    \n', '    function admin_transfer(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(admin_list[msg.sender]);\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
