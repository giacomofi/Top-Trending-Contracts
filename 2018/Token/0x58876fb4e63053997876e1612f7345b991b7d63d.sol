['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath{\n', '\tfunction safeMul(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeDiv(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b > 0);\n', '\t\tuint c = a / b;\n', '\t\tassert(a == b * c + a % b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeSub(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\tfunction assert(bool assertion) internal {\n', '\t\tif (!assertion) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// Contract that defines administrative actions\n', 'contract admined {\n', '\n', '\t// Define adminitrator address\n', '\taddress public admin;\n', '\n', '\t// Entry function sets the admin as the sender\n', '\tfunction admined(){\n', '\t\tadmin = msg.sender;\n', '\t}\n', '\n', '\t// Check if the sender is the admin\n', '\tmodifier onlyAdmin(){\n', '\t\trequire(msg.sender == admin);\n', '\t\t_;\n', '\t}\n', '\n', '\t// Transfer the admin role to a new address\n', '\tfunction transferAdminship(address newAdmin) public onlyAdmin {\n', '\t\tadmin = newAdmin;\n', '\t}\n', '}\n', '\n', '// Contract that creates the Token\n', 'contract Token is SafeMath {\n', '\n', '\t// Contract balance\n', '\tmapping (address => uint256) public balanceOf;\n', '\t// Token name\n', '\tstring public name = "MoralityAI";\n', '\t// Token symbol\n', '\tstring public symbol = "Mo";\n', '\t// Decimals to use\n', '\tuint8 public decimal = 18; \n', '\t// Total initial suppy\n', '\tuint256 public totalSupply = 1000000000000000000000000;\n', '\t// Transfer function interface\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t// Token creation function\n', '\tfunction Token(){\n', '\t\t// set the balance of the creator to the initial supply\n', '\t\tbalanceOf[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t// Transfer function used to send tokens to an address\n', '\tfunction transfer(address _to, uint256 _value){\n', '\t\t// Check if the creator actually has the required balance\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '\t\t// Check if the amount sent will not overflow\n', '\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\t\t// Substract tokens from the creator\n', '\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '\t\t// Add tokens to the transfer address\n', '\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '\t\t// Execute the transfer\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t}\n', '}\n', '\n', '// Contract that creates a token which inherits\n', '// the administrator contract properties and token contract properties\n', 'contract MoralityAI is admined, Token{\n', '\n', '\t// Create the token\n', '\tfunction MoralityAI() Token(){\n', '\t\tadmin = msg.sender;\n', '\t\tbalanceOf[admin] = totalSupply;\n', '\t}\n', '\n', '\t// Minting function that can only be called by the admin\n', '\tfunction mintToken(address target, uint256 mintedAmount) public onlyAdmin{\n', '\t\t// Increase the balance of the target address with the amount of minted tokens\n', '\t\tbalanceOf[target] = safeAdd(balanceOf[target], mintedAmount);\n', '\t\t// Increase the total supply of tokens\n', '\t\ttotalSupply = safeAdd(totalSupply, mintedAmount);\n', '\t\t// Transfer the amount to this contract\n', '\t\tTransfer(0, this, mintedAmount);\n', '\t\t// Then transfer the amount to the target address\n', '\t\tTransfer(this, target, mintedAmount);\n', '\t}\n', '\n', '\t// Toekn transfer function\n', '\tfunction transfer(address _to, uint256 _value) public{\n', '\t\t// Check if balance of the sender is not negative\n', '\t\trequire(balanceOf[msg.sender] > 0);\n', '\t\t// Check if balance of the sender is greater than or equal than the amount transfered\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '\t\t// Check for overflow\n', '\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\n', '\t\t// Substract the amount of tokens from the creator\n', '\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '\t\t// And add the amount of tokens to the target address\n', '\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '\t\t// Execute the transfer\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t}\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath{\n', '\tfunction safeMul(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeDiv(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b > 0);\n', '\t\tuint c = a / b;\n', '\t\tassert(a == b * c + a % b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeSub(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\tfunction assert(bool assertion) internal {\n', '\t\tif (!assertion) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// Contract that defines administrative actions\n', 'contract admined {\n', '\n', '\t// Define adminitrator address\n', '\taddress public admin;\n', '\n', '\t// Entry function sets the admin as the sender\n', '\tfunction admined(){\n', '\t\tadmin = msg.sender;\n', '\t}\n', '\n', '\t// Check if the sender is the admin\n', '\tmodifier onlyAdmin(){\n', '\t\trequire(msg.sender == admin);\n', '\t\t_;\n', '\t}\n', '\n', '\t// Transfer the admin role to a new address\n', '\tfunction transferAdminship(address newAdmin) public onlyAdmin {\n', '\t\tadmin = newAdmin;\n', '\t}\n', '}\n', '\n', '// Contract that creates the Token\n', 'contract Token is SafeMath {\n', '\n', '\t// Contract balance\n', '\tmapping (address => uint256) public balanceOf;\n', '\t// Token name\n', '\tstring public name = "MoralityAI";\n', '\t// Token symbol\n', '\tstring public symbol = "Mo";\n', '\t// Decimals to use\n', '\tuint8 public decimal = 18; \n', '\t// Total initial suppy\n', '\tuint256 public totalSupply = 1000000000000000000000000;\n', '\t// Transfer function interface\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t// Token creation function\n', '\tfunction Token(){\n', '\t\t// set the balance of the creator to the initial supply\n', '\t\tbalanceOf[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t// Transfer function used to send tokens to an address\n', '\tfunction transfer(address _to, uint256 _value){\n', '\t\t// Check if the creator actually has the required balance\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '\t\t// Check if the amount sent will not overflow\n', '\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\t\t// Substract tokens from the creator\n', '\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '\t\t// Add tokens to the transfer address\n', '\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '\t\t// Execute the transfer\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t}\n', '}\n', '\n', '// Contract that creates a token which inherits\n', '// the administrator contract properties and token contract properties\n', 'contract MoralityAI is admined, Token{\n', '\n', '\t// Create the token\n', '\tfunction MoralityAI() Token(){\n', '\t\tadmin = msg.sender;\n', '\t\tbalanceOf[admin] = totalSupply;\n', '\t}\n', '\n', '\t// Minting function that can only be called by the admin\n', '\tfunction mintToken(address target, uint256 mintedAmount) public onlyAdmin{\n', '\t\t// Increase the balance of the target address with the amount of minted tokens\n', '\t\tbalanceOf[target] = safeAdd(balanceOf[target], mintedAmount);\n', '\t\t// Increase the total supply of tokens\n', '\t\ttotalSupply = safeAdd(totalSupply, mintedAmount);\n', '\t\t// Transfer the amount to this contract\n', '\t\tTransfer(0, this, mintedAmount);\n', '\t\t// Then transfer the amount to the target address\n', '\t\tTransfer(this, target, mintedAmount);\n', '\t}\n', '\n', '\t// Toekn transfer function\n', '\tfunction transfer(address _to, uint256 _value) public{\n', '\t\t// Check if balance of the sender is not negative\n', '\t\trequire(balanceOf[msg.sender] > 0);\n', '\t\t// Check if balance of the sender is greater than or equal than the amount transfered\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '\t\t// Check for overflow\n', '\t\trequire(safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\n', '\t\t// Substract the amount of tokens from the creator\n', '\t\tbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '\t\t// And add the amount of tokens to the target address\n', '\t\tbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '\t\t// Execute the transfer\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t}\n', '}']
