['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic \n', '{\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '}\n', '\n', 'contract Airdroplet\n', '{\n', '\n', '    ERC20 public token;\n', '\n', '    function airdropExecute(address source, address[] recipents, uint256 amount) public\n', '    {\n', '\n', '        uint x = 0;\n', '        token = ERC20(source);\n', '\n', '        while(x < recipents.length)\n', '        {\n', '\n', '          token.transferFrom(msg.sender, recipents[x], amount);\n', '          x++;\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic \n', '{\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '}\n', '\n', 'contract Airdroplet\n', '{\n', '\n', '    ERC20 public token;\n', '\n', '    function airdropExecute(address source, address[] recipents, uint256 amount) public\n', '    {\n', '\n', '        uint x = 0;\n', '        token = ERC20(source);\n', '\n', '        while(x < recipents.length)\n', '        {\n', '\n', '          token.transferFrom(msg.sender, recipents[x], amount);\n', '          x++;\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '}']
