['pragma solidity ^0.4.16;\n', '\n', '\n', 'interface Presale {\n', '    function tokenAddress() constant returns (address);\n', '}\n', '\n', '\n', 'interface Crowdsale {\n', '    function tokenAddress() constant returns (address);\n', '}\n', '\n', '\n', 'contract Admins {\n', '    address public admin1;\n', '\n', '    address public admin2;\n', '\n', '    address public admin3;\n', '\n', '    function Admins(address a1, address a2, address a3) public {\n', '        admin1 = a1;\n', '        admin2 = a2;\n', '        admin3 = a3;\n', '    }\n', '\n', '    modifier onlyAdmins {\n', '        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _adminAddress) onlyAdmins public {\n', '\n', '        require(_adminAddress != admin1);\n', '        require(_adminAddress != admin2);\n', '        require(_adminAddress != admin3);\n', '\n', '        if (admin1 == msg.sender) {\n', '            admin1 = _adminAddress;\n', '        }\n', '        else\n', '        if (admin2 == msg.sender) {\n', '            admin2 = _adminAddress;\n', '        }\n', '        else\n', '        if (admin3 == msg.sender) {\n', '            admin3 = _adminAddress;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '    uint256 initialSupply,\n', '    string tokenName,\n', '    string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        // Update total supply with the decimal amount\n', '        balanceOf[this] = totalSupply;\n', '        // Give the creator all initial tokens\n', '        name = tokenName;\n', '        // Set the name for display purposes\n', '        symbol = tokenSymbol;\n', '        // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;\n', '        // Subtract from the sender\n', '        totalSupply -= _value;\n', '        // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;\n', '        // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;\n', '        // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract TrimpoToken is Admins, TokenERC20 {\n', '\n', '    uint public transferredManually = 0;\n', '\n', '    uint public transferredPresale = 0;\n', '\n', '    uint public transferredCrowdsale = 0;\n', '\n', '    address public presaleAddr;\n', '\n', '    address public crowdsaleAddr;\n', '\n', '    modifier onlyPresale {\n', '        require(msg.sender == presaleAddr);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsale {\n', '        require(msg.sender == crowdsaleAddr);\n', '        _;\n', '    }\n', '\n', '\n', '    function TrimpoToken(\n', '    uint256 initialSupply,\n', '    string tokenName,\n', '    string tokenSymbol,\n', '    address a1,\n', '    address a2,\n', '    address a3\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) Admins(a1, a2, a3) public {}\n', '\n', '\n', '    function transferManual(address _to, uint _value) onlyAdmins public {\n', '        _transfer(this, _to, _value);\n', '        transferredManually += _value;\n', '    }\n', '\n', '    function setPresale(address _presale) onlyAdmins public {\n', '        require(_presale != 0x0);\n', '        bool allow = false;\n', '        Presale newPresale = Presale(_presale);\n', '\n', '        if (newPresale.tokenAddress() == address(this)) {\n', '            presaleAddr = _presale;\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    function setCrowdsale(address _crowdsale) onlyAdmins public {\n', '        require(_crowdsale != 0x0);\n', '        Crowdsale newCrowdsale = Crowdsale(_crowdsale);\n', '\n', '        if (newCrowdsale.tokenAddress() == address(this)) {\n', '\n', '            crowdsaleAddr = _crowdsale;\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    function transferPresale(address _to, uint _value) onlyPresale public {\n', '        _transfer(this, _to, _value);\n', '        transferredPresale += _value;\n', '    }\n', '\n', '    function transferCrowdsale(address _to, uint _value) onlyCrowdsale public {\n', '        _transfer(this, _to, _value);\n', '        transferredCrowdsale += _value;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', 'interface Presale {\n', '    function tokenAddress() constant returns (address);\n', '}\n', '\n', '\n', 'interface Crowdsale {\n', '    function tokenAddress() constant returns (address);\n', '}\n', '\n', '\n', 'contract Admins {\n', '    address public admin1;\n', '\n', '    address public admin2;\n', '\n', '    address public admin3;\n', '\n', '    function Admins(address a1, address a2, address a3) public {\n', '        admin1 = a1;\n', '        admin2 = a2;\n', '        admin3 = a3;\n', '    }\n', '\n', '    modifier onlyAdmins {\n', '        require(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _adminAddress) onlyAdmins public {\n', '\n', '        require(_adminAddress != admin1);\n', '        require(_adminAddress != admin2);\n', '        require(_adminAddress != admin3);\n', '\n', '        if (admin1 == msg.sender) {\n', '            admin1 = _adminAddress;\n', '        }\n', '        else\n', '        if (admin2 == msg.sender) {\n', '            admin2 = _adminAddress;\n', '        }\n', '        else\n', '        if (admin3 == msg.sender) {\n', '            admin3 = _adminAddress;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '    uint256 initialSupply,\n', '    string tokenName,\n', '    string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        // Update total supply with the decimal amount\n', '        balanceOf[this] = totalSupply;\n', '        // Give the creator all initial tokens\n', '        name = tokenName;\n', '        // Set the name for display purposes\n', '        symbol = tokenSymbol;\n', '        // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;\n', '        // Subtract from the sender\n', '        totalSupply -= _value;\n', '        // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;\n', "        // Subtract from the sender's allowance\n", '        totalSupply -= _value;\n', '        // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract TrimpoToken is Admins, TokenERC20 {\n', '\n', '    uint public transferredManually = 0;\n', '\n', '    uint public transferredPresale = 0;\n', '\n', '    uint public transferredCrowdsale = 0;\n', '\n', '    address public presaleAddr;\n', '\n', '    address public crowdsaleAddr;\n', '\n', '    modifier onlyPresale {\n', '        require(msg.sender == presaleAddr);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsale {\n', '        require(msg.sender == crowdsaleAddr);\n', '        _;\n', '    }\n', '\n', '\n', '    function TrimpoToken(\n', '    uint256 initialSupply,\n', '    string tokenName,\n', '    string tokenSymbol,\n', '    address a1,\n', '    address a2,\n', '    address a3\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) Admins(a1, a2, a3) public {}\n', '\n', '\n', '    function transferManual(address _to, uint _value) onlyAdmins public {\n', '        _transfer(this, _to, _value);\n', '        transferredManually += _value;\n', '    }\n', '\n', '    function setPresale(address _presale) onlyAdmins public {\n', '        require(_presale != 0x0);\n', '        bool allow = false;\n', '        Presale newPresale = Presale(_presale);\n', '\n', '        if (newPresale.tokenAddress() == address(this)) {\n', '            presaleAddr = _presale;\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    function setCrowdsale(address _crowdsale) onlyAdmins public {\n', '        require(_crowdsale != 0x0);\n', '        Crowdsale newCrowdsale = Crowdsale(_crowdsale);\n', '\n', '        if (newCrowdsale.tokenAddress() == address(this)) {\n', '\n', '            crowdsaleAddr = _crowdsale;\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    function transferPresale(address _to, uint _value) onlyPresale public {\n', '        _transfer(this, _to, _value);\n', '        transferredPresale += _value;\n', '    }\n', '\n', '    function transferCrowdsale(address _to, uint _value) onlyCrowdsale public {\n', '        _transfer(this, _to, _value);\n', '        transferredCrowdsale += _value;\n', '    }\n', '\n', '}']
