['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' *  SafeMath  library\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * erc20 token methods\n', ' */\n', 'contract Token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/* ALLYToken   */\n', 'contract ALLYToken is Token {\n', '\n', '    /* total tokens */\n', '    string  public name = "ALLY";\n', '    string  public symbol = "ALLY";\n', '    uint8   public decimals = 18;\n', '    uint256 public totalSupply = 990000000 * 10 ** uint256(decimals);\n', '    address public owner;\n', '\n', '    /*  balance collections  */\n', '    mapping (address => uint256)  balances;\n', '    \n', '    mapping (address => mapping (address => uint256))  public allowance;\n', '\n', '    function ALLYToken() public {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '\n', '    /* transfer token to  _to */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '      _transfer(msg.sender, _to, _value);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '\n', '    }\n', '\n', '    /* transfer token from _from to  _to */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        _transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * transfer value token to "_to"\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '       require(_value > 0x0);\n', '       require(balances[_from] >= _value);\n', '       require(balances[_to] + _value > balances[_to]);\n', '       uint previousBalances = SafeMath.add(balances[_from], balances[_to]);\n', '       balances[_from] = SafeMath.sub(balances[_from], _value);                   \n', '       balances[_to] = SafeMath.add(balances[_to], _value); \n', '       assert(SafeMath.add(balances[_from], balances[_to]) == previousBalances);\n', '    }\n', '\n', '    /* get balance */\n', '    function balanceOf(address _owner)  public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* approve send token */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* approve _spender send token */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' *  SafeMath  library\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * erc20 token methods\n', ' */\n', 'contract Token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/* ALLYToken   */\n', 'contract ALLYToken is Token {\n', '\n', '    /* total tokens */\n', '    string  public name = "ALLY";\n', '    string  public symbol = "ALLY";\n', '    uint8   public decimals = 18;\n', '    uint256 public totalSupply = 990000000 * 10 ** uint256(decimals);\n', '    address public owner;\n', '\n', '    /*  balance collections  */\n', '    mapping (address => uint256)  balances;\n', '    \n', '    mapping (address => mapping (address => uint256))  public allowance;\n', '\n', '    function ALLYToken() public {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '\n', '    /* transfer token to  _to */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '      _transfer(msg.sender, _to, _value);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '\n', '    }\n', '\n', '    /* transfer token from _from to  _to */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        _transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * transfer value token to "_to"\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '       require(_value > 0x0);\n', '       require(balances[_from] >= _value);\n', '       require(balances[_to] + _value > balances[_to]);\n', '       uint previousBalances = SafeMath.add(balances[_from], balances[_to]);\n', '       balances[_from] = SafeMath.sub(balances[_from], _value);                   \n', '       balances[_to] = SafeMath.add(balances[_to], _value); \n', '       assert(SafeMath.add(balances[_from], balances[_to]) == previousBalances);\n', '    }\n', '\n', '    /* get balance */\n', '    function balanceOf(address _owner)  public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* approve send token */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* approve _spender send token */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '}']
