['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;\n', '}\n', '\n', 'contract TokenERC20 is token {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // Notifies clients about token transfers\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // Notifies clients about spending approval\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        require(_spender != 0x0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Presale is owned {\n', '    address public operations;\n', '\n', '    TokenERC20 public myToken;\n', '    uint256 public distributionSupply;\n', '    uint256 public priceOfToken;\n', '    uint256 factor;\n', '    uint public startBlock;\n', '    uint public endBlock;\n', '\n', '    uint256 defaultAuthorizedETH;\n', '    mapping (address => uint256) public authorizedETH;\n', '\n', '    uint256 public distributionRealized;\n', '    mapping (address => uint256) public realizedETH;\n', '    mapping (address => uint256) public realizedTokenBalance;\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes the presale\n', '     *\n', '     */\n', '    function Presale() public {\n', '        operations = 0x249aAb680bAF7ed84e0ebE55cD078650A17162Ca;\n', '        myToken = TokenERC20(0xeaAa3585ffDCc973a22929D09179dC06D517b84d);\n', '        uint256 decimals = uint256(myToken.decimals());\n', '        distributionSupply = 10 ** decimals * 600000;\n', '        priceOfToken = 3980891719745222;\n', '        startBlock = 4909000;\n', '        endBlock   = 4966700;\n', '        defaultAuthorizedETH = 8 ether;\n', '        factor = 10 ** decimals * 3 / 2;\n', '    }\n', '\n', '    modifier onlyOperations {\n', '        require(msg.sender == operations);\n', '        _;\n', '    }\n', '\n', '    function transferOperationsFunction(address _operations) onlyOwner public {\n', '        operations = _operations;\n', '    }\n', '\n', '    function authorizeAmount(address _account, uint32 _valueETH) onlyOperations public {\n', '        authorizedETH[_account] = uint256(_valueETH) * 1 ether;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        if (msg.sender != owner)\n', '        {\n', '            require(startBlock <= block.number && block.number <= endBlock);\n', '\n', '            uint256 senderAuthorizedETH = authorizedETH[msg.sender];\n', '            uint256 effectiveAuthorizedETH = (senderAuthorizedETH > 0)? senderAuthorizedETH: defaultAuthorizedETH;\n', '            require(msg.value + realizedETH[msg.sender] <= effectiveAuthorizedETH);\n', '\n', '            uint256 amountETH = msg.value;\n', '            uint256 amountToken = amountETH / priceOfToken * factor;\n', '            distributionRealized += amountToken;\n', '            realizedETH[msg.sender] += amountETH;\n', '            require(distributionRealized <= distributionSupply);\n', '\n', '            if (senderAuthorizedETH > 0)\n', '            {\n', '                myToken.transfer(msg.sender, amountToken);\n', '            }\n', '            else\n', '            {\n', '                realizedTokenBalance[msg.sender] += amountToken;\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferBalance(address _account) onlyOperations public {\n', '        uint256 amountToken = realizedTokenBalance[_account];\n', '\tif (amountToken > 0)\n', '        {\n', '            realizedTokenBalance[_account] = 0;\n', '            myToken.transfer(_account, amountToken);\n', '        }\n', '    }\n', '\n', '    function retrieveToken() onlyOwner public {\n', '        myToken.transfer(owner, myToken.balanceOf(this));\n', '    }\n', '\n', '    function retrieveETH(uint256 _amount) onlyOwner public {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function setBlocks(uint _startBlock, uint _endBlock) onlyOwner public {\n', '        require (_endBlock > _startBlock);\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '    }\n', '\n', '    function setPrice(uint256 _priceOfToken) onlyOwner public {\n', '        require (_priceOfToken > 0);\n', '        priceOfToken = _priceOfToken;\n', '    }\n', '}']