['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract CakToken is MintableToken {\n', '    string public constant name = "Cash Account Key";\n', '    string public constant symbol = "CAK";\n', '    uint8 public constant decimals = 0;\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', 'contract CakCrowdsale is Ownable, Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    enum SaleStages { Crowdsale, Finalized }\n', '    SaleStages public currentStage;\n', '\n', '    uint256 public constant TOKEN_CAP = 3e7;\n', '    uint256 public totalTokensMinted;\n', '\n', '    // allow managers to whitelist and confirm contributions by manager accounts\n', '    // (managers can be set and altered by owner, multiple manager accounts are possible\n', '    mapping(address => bool) public isManagers;\n', '\n', '    // true if address is allowed to invest\n', '    mapping(address => bool) public isWhitelisted;\n', '\n', '    // list of events\n', '    event ChangedInvestorWhitelisting(address indexed investor, bool whitelisted);\n', '    event ChangedManager(address indexed manager, bool active);\n', '    event PresaleMinted(address indexed beneficiary, uint256 tokenAmount);\n', '    event CakCalcAmount(uint256 tokenAmount, uint256 weiReceived, uint256 rate);\n', '    event RefundAmount(address indexed beneficiary, uint256 refundAmount);\n', '\n', '    // list of modifers\n', '    modifier onlyManager(){\n', '        require(isManagers[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsaleStage() {\n', '        require(currentStage == SaleStages.Crowdsale);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _startTime uint256\n', '     * @param _endTime unit256\n', '     * @param _rate uint256\n', '     * @param _wallet address\n', '     */\n', '    function CakCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '        public\n', '    {\n', '        setManager(msg.sender, true);\n', '        currentStage = SaleStages.Crowdsale;\n', '    }\n', '\n', '    /**\n', '    * @dev allows contract owner to mint tokens for presale or non-ETH contributions in batches\n', '     * @param _toList address[] array of the beneficiaries to receive tokens\n', '     * @param _tokenList uint256[] array of the token amounts to mint for the corresponding users\n', '    */\n', '    function batchMintPresaleTokens(address[] _toList, uint256[] _tokenList) external onlyOwner onlyCrowdsaleStage {\n', '        require(_toList.length == _tokenList.length);\n', '\n', '        for (uint256 i; i < _toList.length; i = i.add(1)) {\n', '            mintPresaleTokens(_toList[i], _tokenList[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev mint tokens for presale beneficaries\n', '     * @param _beneficiary address address of the presale buyer\n', '     * @param _amount unit256 amount of CAK tokens they will receieve\n', '     */\n', '    function mintPresaleTokens(address _beneficiary, uint256 _amount) public onlyOwner onlyCrowdsaleStage {\n', '        require(_beneficiary != address(0));\n', '        require(_amount > 0);\n', '        require(totalTokensMinted.add(_amount) <= TOKEN_CAP);\n', '        require(now < startTime);\n', '\n', '        token.mint(_beneficiary, _amount);\n', '        totalTokensMinted = totalTokensMinted.add(_amount);\n', '        PresaleMinted(_beneficiary, _amount);\n', '    }\n', '\n', '     /**\n', '     * @dev entry point for the buying of CAK tokens. overriding open zeppelins buyTokens()\n', '     * @param _beneficiary address address of the investor, must be whitelested first\n', '     */\n', '    function buyTokens(address _beneficiary) public payable onlyCrowdsaleStage {\n', '        require(_beneficiary != address(0));\n', '        require(isWhitelisted[msg.sender]);\n', '        require(validPurchase());\n', '        require(msg.value >= rate);  //rate == minimum amount in WEI to purchase 1 CAK token\n', '\n', '        uint256 weiAmount = msg.value;\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        // Calculate the amount of tokens\n', '        uint256 tokens = calcCakAmount(weiAmount);\n', '        CakCalcAmount(tokens, weiAmount, rate);\n', '        require(totalTokensMinted.add(tokens) <= TOKEN_CAP);\n', '\n', '        token.mint(_beneficiary, tokens);\n', '        totalTokensMinted = totalTokensMinted.add(tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        uint256 refundAmount = refundLeftOverWei(weiAmount, tokens);\n', '        if (refundAmount > 0) {\n', '            weiRaised = weiRaised.sub(refundAmount);\n', '            msg.sender.transfer(refundAmount);\n', '            RefundAmount(msg.sender, refundAmount);\n', '        }\n', '\n', '        forwardEther(refundAmount);\n', '    }\n', '\n', '     /**\n', '     * @dev set manager to true/false to enable/disable manager rights\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner {\n', '        require(_manager != address(0));\n', '        isManagers[_manager] = _active;\n', '        ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelister "account". This can be done from managers only\n', '     * @param _investor address address of the investor&#39;s wallet\n', '     */\n', '    function whiteListInvestor(address _investor) external onlyManager {\n', '        require(_investor != address(0));\n', '        isWhitelisted[_investor] = true;\n', '        ChangedInvestorWhitelisting(_investor, true);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelister "accounts". This can be done from managers only\n', '     * @param _investors address[] addresses of the investors&#39; wallet\n', '     */\n', '    function batchWhiteListInvestors(address[] _investors) external onlyManager {\n', '        address investor;\n', '\n', '        for (uint256 c; c < _investors.length; c = c.add(1)) {\n', '            investor = _investors[c]; // gas optimization\n', '            isWhitelisted[investor] = true;\n', '            ChangedInvestorWhitelisting(investor, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev un-whitelister "account". This can be done from managers only\n', '     * @param _investor address address of the investor&#39;s wallet\n', '     */\n', '    function unWhiteListInvestor(address _investor) external onlyManager {\n', '        require(_investor != address(0));\n', '        isWhitelisted[_investor] = false;\n', '        ChangedInvestorWhitelisting(_investor, false);\n', '    }\n', '\n', '    /**\n', '     * @dev ends the crowdsale, callable only by contract owner\n', '     */\n', '    function finalizeSale() public onlyOwner {\n', '         currentStage = SaleStages.Finalized;\n', '         token.finishMinting();\n', '    }\n', '\n', '    /**\n', '     * @dev calculate WEI to CAK tokens to mint\n', '     * @param weiReceived uint256 wei received from the investor\n', '     */\n', '    function calcCakAmount(uint256 weiReceived) public view returns (uint256) {\n', '        uint256 tokenAmount = weiReceived.div(rate);\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev calculate WEI refund to investor, if any. This handles rounding errors\n', '     * which are important here due to the 0 decimals\n', '     * @param weiReceived uint256 wei received from the investor\n', '     * @param tokenAmount uint256 CAK tokens minted for investor\n', '     */\n', '    function refundLeftOverWei(uint256 weiReceived, uint256 tokenAmount) internal view returns (uint256) {\n', '        uint256 refundAmount = 0;\n', '        uint256 weiInvested = tokenAmount.mul(rate);\n', '        if (weiInvested < weiReceived)\n', '            refundAmount = weiReceived.sub(weiInvested);\n', '        return refundAmount;\n', '    }\n', '\n', '    /**\n', '     * Overrides the Crowdsale.createTokenContract to create a CAK token\n', '     * instead of a default MintableToken.\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new CakToken();\n', '    }\n', '\n', '    /**\n', '     * @dev forward Ether to wallet with proper amount subtracting refund, if refund exists\n', '     * @param refund unint256 the amount refunded to the investor, if > 0 \n', '     */\n', '    function forwardEther(uint256 refund) internal {\n', '        wallet.transfer(msg.value.sub(refund));\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract CakToken is MintableToken {\n', '    string public constant name = "Cash Account Key";\n', '    string public constant symbol = "CAK";\n', '    uint8 public constant decimals = 0;\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', 'contract CakCrowdsale is Ownable, Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    enum SaleStages { Crowdsale, Finalized }\n', '    SaleStages public currentStage;\n', '\n', '    uint256 public constant TOKEN_CAP = 3e7;\n', '    uint256 public totalTokensMinted;\n', '\n', '    // allow managers to whitelist and confirm contributions by manager accounts\n', '    // (managers can be set and altered by owner, multiple manager accounts are possible\n', '    mapping(address => bool) public isManagers;\n', '\n', '    // true if address is allowed to invest\n', '    mapping(address => bool) public isWhitelisted;\n', '\n', '    // list of events\n', '    event ChangedInvestorWhitelisting(address indexed investor, bool whitelisted);\n', '    event ChangedManager(address indexed manager, bool active);\n', '    event PresaleMinted(address indexed beneficiary, uint256 tokenAmount);\n', '    event CakCalcAmount(uint256 tokenAmount, uint256 weiReceived, uint256 rate);\n', '    event RefundAmount(address indexed beneficiary, uint256 refundAmount);\n', '\n', '    // list of modifers\n', '    modifier onlyManager(){\n', '        require(isManagers[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsaleStage() {\n', '        require(currentStage == SaleStages.Crowdsale);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _startTime uint256\n', '     * @param _endTime unit256\n', '     * @param _rate uint256\n', '     * @param _wallet address\n', '     */\n', '    function CakCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '        public\n', '    {\n', '        setManager(msg.sender, true);\n', '        currentStage = SaleStages.Crowdsale;\n', '    }\n', '\n', '    /**\n', '    * @dev allows contract owner to mint tokens for presale or non-ETH contributions in batches\n', '     * @param _toList address[] array of the beneficiaries to receive tokens\n', '     * @param _tokenList uint256[] array of the token amounts to mint for the corresponding users\n', '    */\n', '    function batchMintPresaleTokens(address[] _toList, uint256[] _tokenList) external onlyOwner onlyCrowdsaleStage {\n', '        require(_toList.length == _tokenList.length);\n', '\n', '        for (uint256 i; i < _toList.length; i = i.add(1)) {\n', '            mintPresaleTokens(_toList[i], _tokenList[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev mint tokens for presale beneficaries\n', '     * @param _beneficiary address address of the presale buyer\n', '     * @param _amount unit256 amount of CAK tokens they will receieve\n', '     */\n', '    function mintPresaleTokens(address _beneficiary, uint256 _amount) public onlyOwner onlyCrowdsaleStage {\n', '        require(_beneficiary != address(0));\n', '        require(_amount > 0);\n', '        require(totalTokensMinted.add(_amount) <= TOKEN_CAP);\n', '        require(now < startTime);\n', '\n', '        token.mint(_beneficiary, _amount);\n', '        totalTokensMinted = totalTokensMinted.add(_amount);\n', '        PresaleMinted(_beneficiary, _amount);\n', '    }\n', '\n', '     /**\n', '     * @dev entry point for the buying of CAK tokens. overriding open zeppelins buyTokens()\n', '     * @param _beneficiary address address of the investor, must be whitelested first\n', '     */\n', '    function buyTokens(address _beneficiary) public payable onlyCrowdsaleStage {\n', '        require(_beneficiary != address(0));\n', '        require(isWhitelisted[msg.sender]);\n', '        require(validPurchase());\n', '        require(msg.value >= rate);  //rate == minimum amount in WEI to purchase 1 CAK token\n', '\n', '        uint256 weiAmount = msg.value;\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        // Calculate the amount of tokens\n', '        uint256 tokens = calcCakAmount(weiAmount);\n', '        CakCalcAmount(tokens, weiAmount, rate);\n', '        require(totalTokensMinted.add(tokens) <= TOKEN_CAP);\n', '\n', '        token.mint(_beneficiary, tokens);\n', '        totalTokensMinted = totalTokensMinted.add(tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        uint256 refundAmount = refundLeftOverWei(weiAmount, tokens);\n', '        if (refundAmount > 0) {\n', '            weiRaised = weiRaised.sub(refundAmount);\n', '            msg.sender.transfer(refundAmount);\n', '            RefundAmount(msg.sender, refundAmount);\n', '        }\n', '\n', '        forwardEther(refundAmount);\n', '    }\n', '\n', '     /**\n', '     * @dev set manager to true/false to enable/disable manager rights\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner {\n', '        require(_manager != address(0));\n', '        isManagers[_manager] = _active;\n', '        ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelister "account". This can be done from managers only\n', "     * @param _investor address address of the investor's wallet\n", '     */\n', '    function whiteListInvestor(address _investor) external onlyManager {\n', '        require(_investor != address(0));\n', '        isWhitelisted[_investor] = true;\n', '        ChangedInvestorWhitelisting(_investor, true);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelister "accounts". This can be done from managers only\n', "     * @param _investors address[] addresses of the investors' wallet\n", '     */\n', '    function batchWhiteListInvestors(address[] _investors) external onlyManager {\n', '        address investor;\n', '\n', '        for (uint256 c; c < _investors.length; c = c.add(1)) {\n', '            investor = _investors[c]; // gas optimization\n', '            isWhitelisted[investor] = true;\n', '            ChangedInvestorWhitelisting(investor, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev un-whitelister "account". This can be done from managers only\n', "     * @param _investor address address of the investor's wallet\n", '     */\n', '    function unWhiteListInvestor(address _investor) external onlyManager {\n', '        require(_investor != address(0));\n', '        isWhitelisted[_investor] = false;\n', '        ChangedInvestorWhitelisting(_investor, false);\n', '    }\n', '\n', '    /**\n', '     * @dev ends the crowdsale, callable only by contract owner\n', '     */\n', '    function finalizeSale() public onlyOwner {\n', '         currentStage = SaleStages.Finalized;\n', '         token.finishMinting();\n', '    }\n', '\n', '    /**\n', '     * @dev calculate WEI to CAK tokens to mint\n', '     * @param weiReceived uint256 wei received from the investor\n', '     */\n', '    function calcCakAmount(uint256 weiReceived) public view returns (uint256) {\n', '        uint256 tokenAmount = weiReceived.div(rate);\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev calculate WEI refund to investor, if any. This handles rounding errors\n', '     * which are important here due to the 0 decimals\n', '     * @param weiReceived uint256 wei received from the investor\n', '     * @param tokenAmount uint256 CAK tokens minted for investor\n', '     */\n', '    function refundLeftOverWei(uint256 weiReceived, uint256 tokenAmount) internal view returns (uint256) {\n', '        uint256 refundAmount = 0;\n', '        uint256 weiInvested = tokenAmount.mul(rate);\n', '        if (weiInvested < weiReceived)\n', '            refundAmount = weiReceived.sub(weiInvested);\n', '        return refundAmount;\n', '    }\n', '\n', '    /**\n', '     * Overrides the Crowdsale.createTokenContract to create a CAK token\n', '     * instead of a default MintableToken.\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new CakToken();\n', '    }\n', '\n', '    /**\n', '     * @dev forward Ether to wallet with proper amount subtracting refund, if refund exists\n', '     * @param refund unint256 the amount refunded to the investor, if > 0 \n', '     */\n', '    function forwardEther(uint256 refund) internal {\n', '        wallet.transfer(msg.value.sub(refund));\n', '    }\n', '}']
