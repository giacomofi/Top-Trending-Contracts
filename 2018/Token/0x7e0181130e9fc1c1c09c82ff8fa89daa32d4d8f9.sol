['pragma solidity ^0.4.23;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = 0x318d9e2fFEC1A7Cd217F77f799deBAd1e9064556;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', 'contract NGTToken is owned {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "NextGenToken";\n', '    string public constant symbol = "NGT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public constant initialSupply = 2200000000 * (10 ** uint256(decimals));\n', '\n', '    address public fundingReserve;\n', '    address public bountyReserve;\n', '    address public teamReserve;\n', '    address public advisorReserve;\n', '\n', '    uint256 fundingToken;\n', '    uint256 bountyToken;\n', '    uint256 teamToken;\n', '    uint256 advisorToken;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Burn(address indexed _from,uint256 _value);\n', '    event FrozenFunds(address _account, bool _frozen);\n', '    event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '\n', '    constructor() public {\n', '        totalSupply = initialSupply;\n', '        balanceOf[owner] = initialSupply;\n', '\n', '        bountyTransfers();\n', '    }\n', '\n', '    function bountyTransfers() internal {\n', '        fundingReserve = 0xb0F1D6798d943b9B58E3186390eeE71A57211678;\n', '        bountyReserve = 0x45273112b7C14727D6080b5337300a81AC5c3255;\n', '        teamReserve = 0x53ec41c8356bD4AEb9Fde2829d57Ee2370DA5Dd7;\n', '        advisorReserve = 0x28E1E401A0C7b09bfe6C2220f04236037Fd75454;\n', '\n', '        fundingToken = ( totalSupply * 25 ) / 100;\n', '        teamToken = ( totalSupply * 12 ) / 100;\n', '        bountyToken = ( totalSupply * 15 ) / 1000;\n', '        advisorToken = ( totalSupply * 15 ) / 1000;\n', '\n', '        balanceOf[msg.sender] = totalSupply - fundingToken - teamToken - bountyToken - advisorToken;\n', '        balanceOf[teamReserve] = teamToken;\n', '        balanceOf[bountyReserve] = bountyToken;\n', '        balanceOf[fundingReserve] = fundingToken;\n', '        balanceOf[advisorReserve] = advisorToken;\n', '\n', '        Transfer(msg.sender, fundingReserve, fundingToken);\n', '        Transfer(msg.sender, bountyReserve, bountyToken);\n', '        Transfer(msg.sender, teamReserve, teamToken);\n', '        Transfer(msg.sender, advisorReserve, advisorToken);\n', '    }\n', '\n', '    function _transfer(address _from,address _to,uint256 _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to,uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public onlyOwner returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address _account, bool _frozen) public onlyOwner {\n', '        frozenAccount[_account] = _frozen;\n', '        emit FrozenFunds(_account, _frozen);\n', '    }\n', '\n', '    function burnTokens(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender,_value);\n', '        return true;\n', '    }\n', '\n', '    function newTokens(address _owner, uint256 _value) public onlyOwner {\n', '        balanceOf[_owner] = balanceOf[_owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        emit Transfer(0, this, _value);\n', '        emit Transfer(this, _owner, _value);\n', '    }\n', '\n', '    function escrowAmount(address _account, uint256 _value) public onlyOwner {\n', '        _transfer(msg.sender, _account, _value);\n', '        freezeAccount(_account, true);\n', '    }\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = 0x318d9e2fFEC1A7Cd217F77f799deBAd1e9064556;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', 'contract NGTToken is owned {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "NextGenToken";\n', '    string public constant symbol = "NGT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public constant initialSupply = 2200000000 * (10 ** uint256(decimals));\n', '\n', '    address public fundingReserve;\n', '    address public bountyReserve;\n', '    address public teamReserve;\n', '    address public advisorReserve;\n', '\n', '    uint256 fundingToken;\n', '    uint256 bountyToken;\n', '    uint256 teamToken;\n', '    uint256 advisorToken;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Burn(address indexed _from,uint256 _value);\n', '    event FrozenFunds(address _account, bool _frozen);\n', '    event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '\n', '    constructor() public {\n', '        totalSupply = initialSupply;\n', '        balanceOf[owner] = initialSupply;\n', '\n', '        bountyTransfers();\n', '    }\n', '\n', '    function bountyTransfers() internal {\n', '        fundingReserve = 0xb0F1D6798d943b9B58E3186390eeE71A57211678;\n', '        bountyReserve = 0x45273112b7C14727D6080b5337300a81AC5c3255;\n', '        teamReserve = 0x53ec41c8356bD4AEb9Fde2829d57Ee2370DA5Dd7;\n', '        advisorReserve = 0x28E1E401A0C7b09bfe6C2220f04236037Fd75454;\n', '\n', '        fundingToken = ( totalSupply * 25 ) / 100;\n', '        teamToken = ( totalSupply * 12 ) / 100;\n', '        bountyToken = ( totalSupply * 15 ) / 1000;\n', '        advisorToken = ( totalSupply * 15 ) / 1000;\n', '\n', '        balanceOf[msg.sender] = totalSupply - fundingToken - teamToken - bountyToken - advisorToken;\n', '        balanceOf[teamReserve] = teamToken;\n', '        balanceOf[bountyReserve] = bountyToken;\n', '        balanceOf[fundingReserve] = fundingToken;\n', '        balanceOf[advisorReserve] = advisorToken;\n', '\n', '        Transfer(msg.sender, fundingReserve, fundingToken);\n', '        Transfer(msg.sender, bountyReserve, bountyToken);\n', '        Transfer(msg.sender, teamReserve, teamToken);\n', '        Transfer(msg.sender, advisorReserve, advisorToken);\n', '    }\n', '\n', '    function _transfer(address _from,address _to,uint256 _value) internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to,uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public onlyOwner returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address _account, bool _frozen) public onlyOwner {\n', '        frozenAccount[_account] = _frozen;\n', '        emit FrozenFunds(_account, _frozen);\n', '    }\n', '\n', '    function burnTokens(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender,_value);\n', '        return true;\n', '    }\n', '\n', '    function newTokens(address _owner, uint256 _value) public onlyOwner {\n', '        balanceOf[_owner] = balanceOf[_owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        emit Transfer(0, this, _value);\n', '        emit Transfer(this, _owner, _value);\n', '    }\n', '\n', '    function escrowAmount(address _account, uint256 _value) public onlyOwner {\n', '        _transfer(msg.sender, _account, _value);\n', '        freezeAccount(_account, true);\n', '    }\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '}']
