['pragma solidity ^0.4.18;\n', '\n', '/*\n', 'Developed by: https://www.investbtceur.com\n', '*/\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ALUXToken is owned, TokenERC20 {\n', '    uint256 public sellPrice = 10000000000000000;\n', '    uint256 public buyPrice = 10000000000000000;\n', '    bool public closeBuy = false;\n', '    bool public closeSell = false;\n', '    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;\n', '    uint256 public minimumCommission = 100000000000000;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event LogDeposit(address sender, uint amount);\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    function ALUXToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);\n', '        require (balanceOf[_from] >= _value);\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function refillTokens(uint256 _value) public onlyOwner{\n', '        _transfer(msg.sender, this, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        uint market_value = _value * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        uint market_value = _value * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[owner] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, owner, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\n', '        closeBuy = isClosedBuy;\n', '        closeSell = isClosedSell;\n', '    }\n', '\n', '    function deposit() payable public returns(bool success) {\n', '        address contr = this;\n', '        require((contr.balance + msg.value) > contr.balance);\n', '        LogDeposit(msg.sender, msg.value);\n', '        return true;\n', '    }\n', '\n', '    function withdraw(uint amountInWeis) onlyOwner public {\n', '        LogWithdrawal(msg.sender, amountInWeis);\n', '        owner.transfer(amountInWeis);\n', '    }\n', '\n', '    function buy() payable public {\n', '        require(!closeBuy);\n', '        uint amount = msg.value / buyPrice;\n', '        uint market_value = amount * buyPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '    \trequire(!closeSell);\n', '        address contr = this;\n', '        uint market_value = amount * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        uint amount_weis = market_value + commission;\n', '        require(contr.balance >= amount_weis);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(market_value);\n', '    }\n', '\n', '    function () public payable { buy(); }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/*\n', 'Developed by: https://www.investbtceur.com\n', '*/\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ALUXToken is owned, TokenERC20 {\n', '    uint256 public sellPrice = 10000000000000000;\n', '    uint256 public buyPrice = 10000000000000000;\n', '    bool public closeBuy = false;\n', '    bool public closeSell = false;\n', '    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;\n', '    uint256 public minimumCommission = 100000000000000;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event LogDeposit(address sender, uint amount);\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    function ALUXToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);\n', '        require (balanceOf[_from] >= _value);\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function refillTokens(uint256 _value) public onlyOwner{\n', '        _transfer(msg.sender, this, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        uint market_value = _value * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        uint market_value = _value * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[owner] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, owner, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\n', '        closeBuy = isClosedBuy;\n', '        closeSell = isClosedSell;\n', '    }\n', '\n', '    function deposit() payable public returns(bool success) {\n', '        address contr = this;\n', '        require((contr.balance + msg.value) > contr.balance);\n', '        LogDeposit(msg.sender, msg.value);\n', '        return true;\n', '    }\n', '\n', '    function withdraw(uint amountInWeis) onlyOwner public {\n', '        LogWithdrawal(msg.sender, amountInWeis);\n', '        owner.transfer(amountInWeis);\n', '    }\n', '\n', '    function buy() payable public {\n', '        require(!closeBuy);\n', '        uint amount = msg.value / buyPrice;\n', '        uint market_value = amount * buyPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '    \trequire(!closeSell);\n', '        address contr = this;\n', '        uint market_value = amount * sellPrice;\n', '        uint commission = market_value * 4 / 1000;\n', '        if (commission < minimumCommission){ commission = minimumCommission; }\n', '        uint amount_weis = market_value + commission;\n', '        require(contr.balance >= amount_weis);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(market_value);\n', '    }\n', '\n', '    function () public payable { buy(); }\n', '}']
