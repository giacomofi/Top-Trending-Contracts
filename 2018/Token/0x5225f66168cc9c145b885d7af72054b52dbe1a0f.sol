['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Autonomy is Ownable {\n', '    address public congress;\n', '\n', '    modifier onlyCongress() {\n', '        require(msg.sender == congress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev initialize a Congress contract address for this token\n', '     *\n', '     * @param _congress address the congress contract address\n', '     */\n', '    function initialCongress(address _congress) onlyOwner public {\n', '        require(_congress != address(0));\n', '        congress = _congress;\n', '    }\n', '\n', '    /**\n', '     * @dev set a Congress contract address for this token\n', '     * must change this address by the last congress contract\n', '     *\n', '     * @param _congress address the congress contract address\n', '     */\n', '    function changeCongress(address _congress) onlyCongress public {\n', '        require(_congress != address(0));\n', '        congress = _congress;\n', '    }\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract OwnerContract is Claimable {\n', '    Claimable public ownedContract;\n', '    address internal origOwner;\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        ownedContract = Claimable(_contract);\n', '        origOwner = ownedContract.owner();\n', '\n', '        // take ownership of the owned contract\n', '        ownedContract.claimOwnership();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to the original one.\n', '     *\n', '     */\n', '    function transferOwnershipBack() onlyOwner public {\n', '        ownedContract.transferOwnership(origOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to another one.\n', '     *\n', '     * @param _nextOwner the contract address that will be next Owner of the original Contract\n', '     */\n', '    function changeOwnershipto(address _nextOwner)  onlyOwner public {\n', '        ownedContract.transferOwnership(_nextOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract MintDRCT is OwnerContract, Autonomy {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public TOTAL_SUPPLY_CAP = 1000000000E18;\n', '    bool public capInitialized = false;\n', '\n', '    address[] internal mainAccounts = [\n', '        0xaD5CcBE3aaB42812aa05921F0513C509A4fb5b67, // tokensale\n', '        0xBD37616a455f1054644c27CC9B348CE18D490D9b, // community\n', '        0x4D9c90Cc719B9bd445cea9234F0d90BaA79ad629, // foundation\n', '        0x21000ec96084D2203C978E38d781C84F497b0edE  // miscellaneous\n', '    ];\n', '\n', '    uint8[] internal mainPercentages = [30, 40, 15, 15];\n', '\n', '    mapping (address => uint) internal accountCaps;\n', '\n', '    modifier afterCapInit() {\n', '        require(capInitialized);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev set capacity limitation for every main accounts\n', '     *\n', '     */\n', '    function initialCaps() onlyOwner public returns (bool) {\n', '        for (uint i = 0; i < mainAccounts.length; i = i.add(1)) {\n', '            accountCaps[mainAccounts[i]] = TOTAL_SUPPLY_CAP * mainPercentages[i] / 100;\n', '        }\n', '\n', '        capInitialized = true;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from one specific wallet addresses\n', '     *\n', '     * @param _ind uint8 the main account index\n', '     * @param _value uint256 the amounts of tokens to be minted\n', '     */\n', '    function mintUnderCap(uint _ind, uint256 _value) onlyOwner afterCapInit public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        address accountAddr = mainAccounts[_ind];\n', '        uint256 accountBalance = MintableToken(ownedContract).balanceOf(accountAddr);\n', '        require(_value <= accountCaps[accountAddr].sub(accountBalance));\n', '\n', '        return MintableToken(ownedContract).mint(accountAddr, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from serveral specific wallet addresses\n', '     *\n', '     * @param _values uint256 the amounts of tokens to be minted\n', '     */\n', '    function mintAll(uint256[] _values) onlyOwner afterCapInit public returns (bool) {\n', '        require(_values.length == mainAccounts.length);\n', '\n', '        bool res = true;\n', '        for(uint i = 0; i < _values.length; i = i.add(1)) {\n', '            res = mintUnderCap(i, _values[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from serveral specific wallet addresses upto cap limitation\n', '     *\n', '     */\n', '    function mintUptoCap() onlyOwner afterCapInit public returns (bool) {\n', '        bool res = true;\n', '        for(uint i = 0; i < mainAccounts.length; i = i.add(1)) {\n', '            require(MintableToken(ownedContract).balanceOf(mainAccounts[i]) == 0);\n', '            res = MintableToken(ownedContract).mint(mainAccounts[i], accountCaps[mainAccounts[i]]) && res;\n', '        }\n', '\n', '        require(res);\n', '        return MintableToken(ownedContract).finishMinting(); // when up to cap limit, then stop minting.\n', '    }\n', '\n', '    /**\n', '     * @dev raise the supply capacity of one specific wallet addresses\n', '     *\n', '     * @param _ind uint the main account index\n', '     * @param _value uint256 the amounts of tokens to be added to capacity limitation\n', '     */\n', '    function raiseCap(uint _ind, uint256 _value) onlyCongress afterCapInit public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        require(_value > 0);\n', '\n', '        accountCaps[mainAccounts[_ind]] = accountCaps[mainAccounts[_ind]].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev query the main account address of one type\n', '     *\n', '     * @param _ind the index of the main account\n', '     */\n', '    function getMainAccount(uint _ind) public view returns (address) {\n', '        require(_ind < mainAccounts.length);\n', '        return mainAccounts[_ind];\n', '    }\n', '\n', '    /**\n', '     * @dev query the supply capacity of one type of main account\n', '     *\n', '     * @param _ind the index of the main account\n', '     */\n', '    function getAccountCap(uint _ind) public view returns (uint256) {\n', '        require(_ind < mainAccounts.length);\n', '        return accountCaps[mainAccounts[_ind]];\n', '    }\n', '\n', '    /**\n', '     * @dev set one type of main account to another address\n', '     *\n', '     * @param _ind the main account index\n', '     * @param _newAddr address the new main account address\n', '     */\n', '    function setMainAccount(uint _ind, address _newAddr) onlyOwner public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        require(_newAddr != address(0));\n', '\n', '        mainAccounts[_ind] = _newAddr;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Autonomy is Ownable {\n', '    address public congress;\n', '\n', '    modifier onlyCongress() {\n', '        require(msg.sender == congress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev initialize a Congress contract address for this token\n', '     *\n', '     * @param _congress address the congress contract address\n', '     */\n', '    function initialCongress(address _congress) onlyOwner public {\n', '        require(_congress != address(0));\n', '        congress = _congress;\n', '    }\n', '\n', '    /**\n', '     * @dev set a Congress contract address for this token\n', '     * must change this address by the last congress contract\n', '     *\n', '     * @param _congress address the congress contract address\n', '     */\n', '    function changeCongress(address _congress) onlyCongress public {\n', '        require(_congress != address(0));\n', '        congress = _congress;\n', '    }\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract OwnerContract is Claimable {\n', '    Claimable public ownedContract;\n', '    address internal origOwner;\n', '\n', '    /**\n', '     * @dev bind a contract as its owner\n', '     *\n', '     * @param _contract the contract address that will be binded by this Owner Contract\n', '     */\n', '    function bindContract(address _contract) onlyOwner public returns (bool) {\n', '        require(_contract != address(0));\n', '        ownedContract = Claimable(_contract);\n', '        origOwner = ownedContract.owner();\n', '\n', '        // take ownership of the owned contract\n', '        ownedContract.claimOwnership();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to the original one.\n', '     *\n', '     */\n', '    function transferOwnershipBack() onlyOwner public {\n', '        ownedContract.transferOwnership(origOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev change the owner of the contract from this contract address to another one.\n', '     *\n', '     * @param _nextOwner the contract address that will be next Owner of the original Contract\n', '     */\n', '    function changeOwnershipto(address _nextOwner)  onlyOwner public {\n', '        ownedContract.transferOwnership(_nextOwner);\n', '        ownedContract = Claimable(address(0));\n', '        origOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract MintDRCT is OwnerContract, Autonomy {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public TOTAL_SUPPLY_CAP = 1000000000E18;\n', '    bool public capInitialized = false;\n', '\n', '    address[] internal mainAccounts = [\n', '        0xaD5CcBE3aaB42812aa05921F0513C509A4fb5b67, // tokensale\n', '        0xBD37616a455f1054644c27CC9B348CE18D490D9b, // community\n', '        0x4D9c90Cc719B9bd445cea9234F0d90BaA79ad629, // foundation\n', '        0x21000ec96084D2203C978E38d781C84F497b0edE  // miscellaneous\n', '    ];\n', '\n', '    uint8[] internal mainPercentages = [30, 40, 15, 15];\n', '\n', '    mapping (address => uint) internal accountCaps;\n', '\n', '    modifier afterCapInit() {\n', '        require(capInitialized);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev set capacity limitation for every main accounts\n', '     *\n', '     */\n', '    function initialCaps() onlyOwner public returns (bool) {\n', '        for (uint i = 0; i < mainAccounts.length; i = i.add(1)) {\n', '            accountCaps[mainAccounts[i]] = TOTAL_SUPPLY_CAP * mainPercentages[i] / 100;\n', '        }\n', '\n', '        capInitialized = true;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from one specific wallet addresses\n', '     *\n', '     * @param _ind uint8 the main account index\n', '     * @param _value uint256 the amounts of tokens to be minted\n', '     */\n', '    function mintUnderCap(uint _ind, uint256 _value) onlyOwner afterCapInit public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        address accountAddr = mainAccounts[_ind];\n', '        uint256 accountBalance = MintableToken(ownedContract).balanceOf(accountAddr);\n', '        require(_value <= accountCaps[accountAddr].sub(accountBalance));\n', '\n', '        return MintableToken(ownedContract).mint(accountAddr, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from serveral specific wallet addresses\n', '     *\n', '     * @param _values uint256 the amounts of tokens to be minted\n', '     */\n', '    function mintAll(uint256[] _values) onlyOwner afterCapInit public returns (bool) {\n', '        require(_values.length == mainAccounts.length);\n', '\n', '        bool res = true;\n', '        for(uint i = 0; i < _values.length; i = i.add(1)) {\n', '            res = mintUnderCap(i, _values[i]) && res;\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint DRC Tokens from serveral specific wallet addresses upto cap limitation\n', '     *\n', '     */\n', '    function mintUptoCap() onlyOwner afterCapInit public returns (bool) {\n', '        bool res = true;\n', '        for(uint i = 0; i < mainAccounts.length; i = i.add(1)) {\n', '            require(MintableToken(ownedContract).balanceOf(mainAccounts[i]) == 0);\n', '            res = MintableToken(ownedContract).mint(mainAccounts[i], accountCaps[mainAccounts[i]]) && res;\n', '        }\n', '\n', '        require(res);\n', '        return MintableToken(ownedContract).finishMinting(); // when up to cap limit, then stop minting.\n', '    }\n', '\n', '    /**\n', '     * @dev raise the supply capacity of one specific wallet addresses\n', '     *\n', '     * @param _ind uint the main account index\n', '     * @param _value uint256 the amounts of tokens to be added to capacity limitation\n', '     */\n', '    function raiseCap(uint _ind, uint256 _value) onlyCongress afterCapInit public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        require(_value > 0);\n', '\n', '        accountCaps[mainAccounts[_ind]] = accountCaps[mainAccounts[_ind]].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev query the main account address of one type\n', '     *\n', '     * @param _ind the index of the main account\n', '     */\n', '    function getMainAccount(uint _ind) public view returns (address) {\n', '        require(_ind < mainAccounts.length);\n', '        return mainAccounts[_ind];\n', '    }\n', '\n', '    /**\n', '     * @dev query the supply capacity of one type of main account\n', '     *\n', '     * @param _ind the index of the main account\n', '     */\n', '    function getAccountCap(uint _ind) public view returns (uint256) {\n', '        require(_ind < mainAccounts.length);\n', '        return accountCaps[mainAccounts[_ind]];\n', '    }\n', '\n', '    /**\n', '     * @dev set one type of main account to another address\n', '     *\n', '     * @param _ind the main account index\n', '     * @param _newAddr address the new main account address\n', '     */\n', '    function setMainAccount(uint _ind, address _newAddr) onlyOwner public returns (bool) {\n', '        require(_ind < mainAccounts.length);\n', '        require(_newAddr != address(0));\n', '\n', '        mainAccounts[_ind] = _newAddr;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}']
