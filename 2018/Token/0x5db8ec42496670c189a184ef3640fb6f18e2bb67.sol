['pragma solidity ^0.4.24;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract BTR is owned{\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor(string tokenName,string tokenSymbol,address tokenOwner) public {           \n', '        decimals = 18; // Amount of decimals for display purposes\n', '        totalSupply = 10000000000 * 10 ** uint(decimals); // Update total supply\n', '        balanceOf[tokenOwner] = totalSupply;// Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '\t\towner = tokenOwner;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require (_to != address(0));                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\trequire (_value > 0); \n', '        require (balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '\t\trequire (_value > 0);\n', '\t\trequire (balanceOf[msg.sender] >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_to != address(0));                                // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\trequire (_value > 0); \n', '        require (balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]);  // Check for overflows\n', '        require (_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require (balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '\t\trequire (_value > 0); \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                                // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) public returns (bool success) {\n', '        require (balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '\t\trequire (_value > 0); \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                      // Subtract from the sender\n', '        freezeOf[msg.sender] = freezeOf[msg.sender].add(_value);                                // Updates totalSupply\n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) public returns (bool success) {\n', '        require (freezeOf[msg.sender] >= _value);            // Check if the sender has enough\n', '\t\trequire (_value > 0); \n', '        freezeOf[msg.sender] = freezeOf[msg.sender].sub(_value);                      // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint256 amount) onlyOwner public {\n', '\t    msg.sender.transfer(amount);\n', '\t}\n', '\t\n', '\t// can accept ether\n', '\tfunction() external payable {\n', '    }\n', '}']