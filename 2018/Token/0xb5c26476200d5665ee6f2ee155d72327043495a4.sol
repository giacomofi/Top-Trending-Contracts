['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '  function upgradeFrom(address _from, uint256 _value) external;\n', '}\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ReceivingContract { \n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        \n', '        tkn.sig = bytes4(u);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract TORUE is ERC223Interface,ERC20Interface,Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public name = "torue";\n', '    string public symbol = "TRE";\n', '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 100e8 * 1e6;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) public lockedAccounts;\n', '    mapping (address => bool) public frozenAccounts;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public salvageableAddresses;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event Burn(address indexed burner, uint256 value);\n', '    event DistributeTokens(uint count,uint256 totalAmount);\n', '    event Upgrade(address indexed from, address indexed to, uint256 value);\n', '    event AccountLocked(address indexed addr, uint256 releaseTime);\n', '    event AccountFrozen(address indexed addr, bool frozen);\n', '\n', '    address ownerAddress = 0xA0Bf23D5Ef64B6DdEbF5343a3C897c53005ee665;\n', '    address lockupAddress1 = 0xB3c289934692ECE018d137fFcaB54631e6e2b405;\n', '    address lockupAddress2 = 0x533c43AF0DDb5ee5215c0139d917F1A871ff9CB5;\n', '\n', '    bool public compatible20 = true;\n', '    bool public compatible223 = true;\n', '    bool public compatible223ex = true;\n', '    \n', '    bool public mintingFinished = false;\n', '    bool public salvageFinished = false;\n', '    bool public paused = false;\n', '    bool public upgradable = false;\n', '    bool public upgradeAgentLocked = false;\n', '    \n', '    address public upgradeMaster;\n', '    address public upgradeAgent;\n', '    uint256 public totalUpgraded;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier isRunning(){\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    function TORUE() public {\n', '        require(msg.sender==ownerAddress);\n', '        owner = ownerAddress;\n', '        upgradeMaster = ownerAddress;\n', '        balances[owner] = totalSupply.mul(70).div(100);\n', '        balances[lockupAddress1] = totalSupply.mul(15).div(100);\n', '        balances[lockupAddress2] = totalSupply.mul(15).div(100);\n', '        paused = false;\n', '    }\n', '    \n', '    function switchCompatible20(bool _value) onlyOwner public {\n', '        compatible20 = _value;\n', '    }\n', '    function switchCompatible223(bool _value) onlyOwner public {\n', '        compatible223 = _value;\n', '    }\n', '    function switchCompatible223ex(bool _value) onlyOwner public {\n', '        compatible223ex = _value;\n', '    }\n', '\n', '    function switchPaused(bool _paused) onlyOwner public {\n', '        paused = _paused;\n', '    }\n', '    \n', '    function switchUpgradable(bool _value) onlyOwner public {\n', '        upgradable = _value;\n', '    }\n', '    \n', '    function switchUpgradeAgentLocked(bool _value) onlyOwner public {\n', '        upgradeAgentLocked = _value;\n', '    }\n', '\n', '    function isUnlocked(address _addr) private view returns (bool){\n', '        return(now > lockedAccounts[_addr] && frozenAccounts[_addr] == false);\n', '    }\n', '    \n', '    function isUnlockedBoth(address _addr) private view returns (bool){\n', '        return(now > lockedAccounts[msg.sender] && now > lockedAccounts[_addr] && frozenAccounts[msg.sender] == false && frozenAccounts[_addr] == false);\n', '    }\n', '    \n', '    function lockAccounts(address[] _addresses, uint256 _releaseTime) onlyOwner public {\n', '        require(_addresses.length > 0);\n', '                \n', '        for(uint j = 0; j < _addresses.length; j++){\n', '            require(lockedAccounts[_addresses[j]] < _releaseTime);\n', '            lockedAccounts[_addresses[j]] = _releaseTime;\n', '            AccountLocked(_addresses[j], _releaseTime);\n', '        }\n', '    }\n', '\n', '    function freezeAccounts(address[] _addresses, bool _value) onlyOwner public {\n', '        require(_addresses.length > 0);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_addresses[j] != 0x0);\n', '            frozenAccounts[_addresses[j]] = _value;\n', '            AccountFrozen(_addresses[j], _value);\n', '        }\n', '    }\n', '\n', '    function setSalvageable(address _addr, bool _value) onlyOwner public {\n', '        salvageableAddresses[_addr] = _value;\n', '    }\n', '    \n', '    function finishSalvage(address _addr) onlyOwner public returns (bool) {\n', '        require(_addr==owner);\n', '        salvageFinished = true;\n', '        return true;\n', '    }\n', '    \n', '    function salvageTokens(address _addr,uint256 _amount) onlyOwner public isRunning returns(bool) {\n', '        require(_amount > 0 && balances[_addr] >= _amount);\n', '        require(now > lockedAccounts[msg.sender] && now > lockedAccounts[_addr]);\n', '        require(salvageableAddresses[_addr] == true && salvageFinished == false);\n', '        balances[_addr] = balances[_addr].sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        Transfer(_addr, msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        require(isUnlocked(_from));\n', '        require(isUnlocked(_to));\n', '        \n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        if(isContract(_to)) {\n', '            bytes memory empty;\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public isRunning returns (bool) {\n', '        require(compatible223);\n', '        require(isUnlocked(_from));\n', '        require(isUnlocked(_to));\n', '        \n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        if(isContract(_to)) {\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public isRunning returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function finishMinting(address _addr) onlyOwner public returns (bool) {\n', '        require(_addr==owner);\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public isRunning {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint ln;\n', '        assembly {\n', '            ln := extcodesize(_addr)\n', '        }\n', '        return (ln > 0);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public isRunning returns (bool ok) {\n', '        require(compatible223ex);\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (isContract(_to)) {\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public isRunning returns (bool ok) {\n', '        require(compatible223);\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public isRunning returns (bool ok) {\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            bytes memory empty;\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '    \n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function distributeTokens(address[] _addresses, uint256 _amount) onlyOwner public isRunning returns(bool) {\n', '        require(_addresses.length > 0 && isUnlocked(msg.sender));\n', '\n', '        uint256 totalAmount = _amount.mul(_addresses.length);\n', '        require(balances[msg.sender] >= totalAmount);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(isUnlocked(_addresses[j]));\n', '            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\n', '            Transfer(msg.sender, _addresses[j], _amount);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        DistributeTokens(_addresses.length, totalAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function distributeTokens(address[] _addresses, uint256[] _amounts) onlyOwner public isRunning returns (bool) {\n', '        require(_addresses.length > 0 && _addresses.length == _amounts.length && isUnlocked(msg.sender));\n', '        uint256 totalAmount = 0;\n', '        for(uint j = 0; j < _addresses.length; j++){\n', '            require(_amounts[j] > 0 && _addresses[j] != 0x0 && isUnlocked(_addresses[j]));\n', '            totalAmount = totalAmount.add(_amounts[j]);\n', '        }\n', '        require(balances[msg.sender] >= totalAmount);\n', '        \n', '        for (j = 0; j < _addresses.length; j++) {\n', '            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\n', '            Transfer(msg.sender, _addresses[j], _amounts[j]);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        DistributeTokens(_addresses.length, totalAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function upgrade(uint256 _value) external isRunning {\n', '        require(upgradable);\n', '        require(upgradeAgent != 0);\n', '        require(_value != 0);\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '        UpgradeAgent(upgradeAgent).upgradeFrom(msg.sender, _value);\n', '        Upgrade(msg.sender, upgradeAgent, _value);\n', '    }\n', '    \n', '    function setUpgradeAgent(address _agent) external {\n', '        require(_agent != 0);\n', '        require(!upgradeAgentLocked);\n', '        require(msg.sender == upgradeMaster);\n', '        \n', '        upgradeAgent = _agent;\n', '        upgradeAgentLocked = true;\n', '    }\n', '    \n', '    function setUpgradeMaster(address _master) external {\n', '        require(_master != 0);\n', '        require(msg.sender == upgradeMaster);\n', '        \n', '        upgradeMaster = _master;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '  function upgradeFrom(address _from, uint256 _value) external;\n', '}\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ReceivingContract { \n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        \n', '        tkn.sig = bytes4(u);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract TORUE is ERC223Interface,ERC20Interface,Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public name = "torue";\n', '    string public symbol = "TRE";\n', '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 100e8 * 1e6;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) public lockedAccounts;\n', '    mapping (address => bool) public frozenAccounts;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public salvageableAddresses;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event Burn(address indexed burner, uint256 value);\n', '    event DistributeTokens(uint count,uint256 totalAmount);\n', '    event Upgrade(address indexed from, address indexed to, uint256 value);\n', '    event AccountLocked(address indexed addr, uint256 releaseTime);\n', '    event AccountFrozen(address indexed addr, bool frozen);\n', '\n', '    address ownerAddress = 0xA0Bf23D5Ef64B6DdEbF5343a3C897c53005ee665;\n', '    address lockupAddress1 = 0xB3c289934692ECE018d137fFcaB54631e6e2b405;\n', '    address lockupAddress2 = 0x533c43AF0DDb5ee5215c0139d917F1A871ff9CB5;\n', '\n', '    bool public compatible20 = true;\n', '    bool public compatible223 = true;\n', '    bool public compatible223ex = true;\n', '    \n', '    bool public mintingFinished = false;\n', '    bool public salvageFinished = false;\n', '    bool public paused = false;\n', '    bool public upgradable = false;\n', '    bool public upgradeAgentLocked = false;\n', '    \n', '    address public upgradeMaster;\n', '    address public upgradeAgent;\n', '    uint256 public totalUpgraded;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier isRunning(){\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    function TORUE() public {\n', '        require(msg.sender==ownerAddress);\n', '        owner = ownerAddress;\n', '        upgradeMaster = ownerAddress;\n', '        balances[owner] = totalSupply.mul(70).div(100);\n', '        balances[lockupAddress1] = totalSupply.mul(15).div(100);\n', '        balances[lockupAddress2] = totalSupply.mul(15).div(100);\n', '        paused = false;\n', '    }\n', '    \n', '    function switchCompatible20(bool _value) onlyOwner public {\n', '        compatible20 = _value;\n', '    }\n', '    function switchCompatible223(bool _value) onlyOwner public {\n', '        compatible223 = _value;\n', '    }\n', '    function switchCompatible223ex(bool _value) onlyOwner public {\n', '        compatible223ex = _value;\n', '    }\n', '\n', '    function switchPaused(bool _paused) onlyOwner public {\n', '        paused = _paused;\n', '    }\n', '    \n', '    function switchUpgradable(bool _value) onlyOwner public {\n', '        upgradable = _value;\n', '    }\n', '    \n', '    function switchUpgradeAgentLocked(bool _value) onlyOwner public {\n', '        upgradeAgentLocked = _value;\n', '    }\n', '\n', '    function isUnlocked(address _addr) private view returns (bool){\n', '        return(now > lockedAccounts[_addr] && frozenAccounts[_addr] == false);\n', '    }\n', '    \n', '    function isUnlockedBoth(address _addr) private view returns (bool){\n', '        return(now > lockedAccounts[msg.sender] && now > lockedAccounts[_addr] && frozenAccounts[msg.sender] == false && frozenAccounts[_addr] == false);\n', '    }\n', '    \n', '    function lockAccounts(address[] _addresses, uint256 _releaseTime) onlyOwner public {\n', '        require(_addresses.length > 0);\n', '                \n', '        for(uint j = 0; j < _addresses.length; j++){\n', '            require(lockedAccounts[_addresses[j]] < _releaseTime);\n', '            lockedAccounts[_addresses[j]] = _releaseTime;\n', '            AccountLocked(_addresses[j], _releaseTime);\n', '        }\n', '    }\n', '\n', '    function freezeAccounts(address[] _addresses, bool _value) onlyOwner public {\n', '        require(_addresses.length > 0);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_addresses[j] != 0x0);\n', '            frozenAccounts[_addresses[j]] = _value;\n', '            AccountFrozen(_addresses[j], _value);\n', '        }\n', '    }\n', '\n', '    function setSalvageable(address _addr, bool _value) onlyOwner public {\n', '        salvageableAddresses[_addr] = _value;\n', '    }\n', '    \n', '    function finishSalvage(address _addr) onlyOwner public returns (bool) {\n', '        require(_addr==owner);\n', '        salvageFinished = true;\n', '        return true;\n', '    }\n', '    \n', '    function salvageTokens(address _addr,uint256 _amount) onlyOwner public isRunning returns(bool) {\n', '        require(_amount > 0 && balances[_addr] >= _amount);\n', '        require(now > lockedAccounts[msg.sender] && now > lockedAccounts[_addr]);\n', '        require(salvageableAddresses[_addr] == true && salvageFinished == false);\n', '        balances[_addr] = balances[_addr].sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        Transfer(_addr, msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        require(isUnlocked(_from));\n', '        require(isUnlocked(_to));\n', '        \n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        if(isContract(_to)) {\n', '            bytes memory empty;\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public isRunning returns (bool) {\n', '        require(compatible223);\n', '        require(isUnlocked(_from));\n', '        require(isUnlocked(_to));\n', '        \n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        if(isContract(_to)) {\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isRunning returns (bool) {\n', '        require(compatible20);\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public isRunning returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function finishMinting(address _addr) onlyOwner public returns (bool) {\n', '        require(_addr==owner);\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public isRunning {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint ln;\n', '        assembly {\n', '            ln := extcodesize(_addr)\n', '        }\n', '        return (ln > 0);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public isRunning returns (bool ok) {\n', '        require(compatible223ex);\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (isContract(_to)) {\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public isRunning returns (bool ok) {\n', '        require(compatible223);\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public isRunning returns (bool ok) {\n', '        require(isUnlockedBoth(_to));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            bytes memory empty;\n', '            ReceivingContract rc = ReceivingContract(_to);\n', '            rc.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '    \n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function distributeTokens(address[] _addresses, uint256 _amount) onlyOwner public isRunning returns(bool) {\n', '        require(_addresses.length > 0 && isUnlocked(msg.sender));\n', '\n', '        uint256 totalAmount = _amount.mul(_addresses.length);\n', '        require(balances[msg.sender] >= totalAmount);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(isUnlocked(_addresses[j]));\n', '            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\n', '            Transfer(msg.sender, _addresses[j], _amount);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        DistributeTokens(_addresses.length, totalAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function distributeTokens(address[] _addresses, uint256[] _amounts) onlyOwner public isRunning returns (bool) {\n', '        require(_addresses.length > 0 && _addresses.length == _amounts.length && isUnlocked(msg.sender));\n', '        uint256 totalAmount = 0;\n', '        for(uint j = 0; j < _addresses.length; j++){\n', '            require(_amounts[j] > 0 && _addresses[j] != 0x0 && isUnlocked(_addresses[j]));\n', '            totalAmount = totalAmount.add(_amounts[j]);\n', '        }\n', '        require(balances[msg.sender] >= totalAmount);\n', '        \n', '        for (j = 0; j < _addresses.length; j++) {\n', '            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\n', '            Transfer(msg.sender, _addresses[j], _amounts[j]);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        DistributeTokens(_addresses.length, totalAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function upgrade(uint256 _value) external isRunning {\n', '        require(upgradable);\n', '        require(upgradeAgent != 0);\n', '        require(_value != 0);\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '        UpgradeAgent(upgradeAgent).upgradeFrom(msg.sender, _value);\n', '        Upgrade(msg.sender, upgradeAgent, _value);\n', '    }\n', '    \n', '    function setUpgradeAgent(address _agent) external {\n', '        require(_agent != 0);\n', '        require(!upgradeAgentLocked);\n', '        require(msg.sender == upgradeMaster);\n', '        \n', '        upgradeAgent = _agent;\n', '        upgradeAgentLocked = true;\n', '    }\n', '    \n', '    function setUpgradeMaster(address _master) external {\n', '        require(_master != 0);\n', '        require(msg.sender == upgradeMaster);\n', '        \n', '        upgradeMaster = _master;\n', '    }\n', '\n', '}']
