['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '      require(!paused);\n', '      _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '      require(paused);\n', '      _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '      paused = true;\n', '      emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '      paused = false;\n', '      emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract Freezable is Ownable{\n', '  mapping (address => bool) public frozenAccount;\n', '    \n', '  event FrozenFunds(address target, bool frozen);\n', '    \n', '  modifier whenUnfrozen(address target) {\n', '    require(!frozenAccount[target]);\n', '    _;\n', '  }\n', '  \n', '  function freezeAccount(address target, bool freeze) onlyOwner public{\n', '    frozenAccount[target] = freeze;\n', '    emit FrozenFunds(target, freeze);\n', '  }\n', '}\n', '\n', 'contract XERC20 is Pausable, Freezable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  event Burn(address account, uint256 value);\n', '  \n', '  function burn(address account, uint256 value) external onlyOwner returns (bool) {\n', '    _burn(account, value);\n', '    emit Burn(account, value);\n', '    return true;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public whenNotPaused whenUnfrozen(msg.sender) returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public whenNotPaused whenUnfrozen(from) returns (bool) {\n', '    require(value <= _allowed[from][msg.sender]);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns(bool)\n', '  {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns(bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '    _burn(account, value);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract UCXToken is XERC20 {\n', '  string public constant name = "UCXToken";\n', '  string public constant symbol = "UCX";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 2100000000 * (10 ** uint256(decimals));\n', '\n', '  address address1 = 0x777721dEe44137F84D016D9B8f4D5F654CE5c777;\n', '  address address2 = 0x7770533000cB5CF3f55a20caF22c60438F867777;\n', '  address address3 = 0x7772082428388bd2007822FaDedF33697fF3e777;\n', '  address address4 = 0x777036867957eEE02181157093131CAE6D2fd777;\n', '  address address5 = 0x7776BdF1d3db7536e12143785cD107FdF2cF6777;\n', '  address address6 = 0x7778211a82cDC694c59Dd7451e3FE17E14987777;\n', '  address address7 = 0x777775152FA83fb685d114A6B1302432A4ff8777;\n', '  address address8 = 0x7770ae1b5e71b5FccF1eA236C5CD069850817777;\n', '  address address9 = 0x7776312f8d9aDd9542F4C4a343cC55fBB3bf1777;\n', '  address address10 = 0x7773951672A5A097bAF3AC40bc425066a00d7777;\n', '  address address11 = 0x7771232DDd8d5a4d93Ea958C7B99611B2fe17777;\n', '  address address12 = 0x7778B8b23b7D872e02afb9A7413d103775dC5777;\n', '\n', '  constructor() public {\n', '    _mint(msg.sender, INITIAL_SUPPLY);\n', '\n', '    transfer(address1, 255000000 * (10 ** uint256(decimals)));\n', '    transfer(address2, 34000000 * (10 ** uint256(decimals)));\n', '    transfer(address3, 34000000 * (10 ** uint256(decimals)));\n', '    transfer(address4, 34000000 * (10 ** uint256(decimals)));\n', '    transfer(address5, 34000000 * (10 ** uint256(decimals)));\n', '    transfer(address6, 34000000 * (10 ** uint256(decimals)));\n', '    transfer(address7, 340000000 * (10 ** uint256(decimals)));\n', '    transfer(address8, 510000000 * (10 ** uint256(decimals)));\n', '    transfer(address9, 170000000 * (10 ** uint256(decimals)));\n', '    transfer(address10, 170000000 * (10 ** uint256(decimals)));\n', '    transfer(address11, 85000000 * (10 ** uint256(decimals)));\n', '    transfer(address12, 400000000 * (10 ** uint256(decimals)));\n', '\n', '    freezeAccount(address12,true);\n', '  }\n', '\n', '}']