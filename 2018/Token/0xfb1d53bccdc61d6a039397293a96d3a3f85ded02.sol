['pragma solidity ^0.4.24;\n', 'contract LTToken{\n', '  \n', '    uint256 public totalSupply;\n', '\n', '   \n', '    function balanceOf(address _owner)public constant returns (uint256 balance);\n', '\n', '  \n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '\n', '   \n', '    function transferFrom(address _from, address _to, uint256 _value)public returns   \n', '    (bool success);\n', '\n', '  \n', '    function approve(address _spender, uint256 _value)public returns (bool success);\n', '\n', '  \n', '    function allowance(address _owner, address _spender)public constant returns \n', '    (uint256 remaining);\n', '\n', '   \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '   \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract LTStandardToken is LTToken {\n', '    function transfer(address _to, uint256 _value)public returns (bool success) {\n', '\t    require(_to!= address(0));\n', '        require(balances[msg.sender] >= _value);\n', '\t\trequire(balances[_to] +_value>=balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns \n', '    (bool success) {\n', '        require(_to!= address(0));\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] +_value>=balances[_to]);\n', '\t\tbalances[_to] += _value;\n', '        balances[_from] -= _value; \n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)public returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '       emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract LTStandardCreateToken is LTStandardToken { \n', '\n', ' \n', '    string public name;                   \n', '    uint8 public decimals;              \n', '    string public symbol;              \n', '    string public version = &#39;H0.1&#39;;    \n', '\n', '    constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol)public {\n', '        balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '        totalSupply = _initialAmount;         // 设置初始总量\n', '        name = _tokenName;                   // token名称\n', '        decimals = _decimalUnits;           // 小数位数\n', '        symbol = _tokenSymbol;             // token简称\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value)public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '}']
['pragma solidity ^0.4.24;\n', 'contract LTToken{\n', '  \n', '    uint256 public totalSupply;\n', '\n', '   \n', '    function balanceOf(address _owner)public constant returns (uint256 balance);\n', '\n', '  \n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '\n', '   \n', '    function transferFrom(address _from, address _to, uint256 _value)public returns   \n', '    (bool success);\n', '\n', '  \n', '    function approve(address _spender, uint256 _value)public returns (bool success);\n', '\n', '  \n', '    function allowance(address _owner, address _spender)public constant returns \n', '    (uint256 remaining);\n', '\n', '   \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '   \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract LTStandardToken is LTToken {\n', '    function transfer(address _to, uint256 _value)public returns (bool success) {\n', '\t    require(_to!= address(0));\n', '        require(balances[msg.sender] >= _value);\n', '\t\trequire(balances[_to] +_value>=balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns \n', '    (bool success) {\n', '        require(_to!= address(0));\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] +_value>=balances[_to]);\n', '\t\tbalances[_to] += _value;\n', '        balances[_from] -= _value; \n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)public returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '       emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract LTStandardCreateToken is LTStandardToken { \n', '\n', ' \n', '    string public name;                   \n', '    uint8 public decimals;              \n', '    string public symbol;              \n', "    string public version = 'H0.1';    \n", '\n', '    constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol)public {\n', '        balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '        totalSupply = _initialAmount;         // 设置初始总量\n', '        name = _tokenName;                   // token名称\n', '        decimals = _decimalUnits;           // 小数位数\n', '        symbol = _tokenSymbol;             // token简称\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value)public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '}']
