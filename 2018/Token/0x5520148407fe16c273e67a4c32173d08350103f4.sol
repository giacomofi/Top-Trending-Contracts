['pragma solidity ^0.4.0;\n', '\n', 'interface Hash {\n', '   \n', '    function get() public returns (bytes32); \n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    uint256 public totalSupply;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    /*function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }*/\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Lotery is Ownable {\n', '\n', '  //event when gamer is buying a new ticket\n', '  event TicketSelling(uint periodNumber, address indexed from, bytes32 hash, uint when);\n', '\n', '  //event when period finished\n', '  event PeriodFinished(uint periodNumber, address indexed winnerAddr, uint reward, bytes32 winnerHash, uint when);\n', '\n', '  //event when any funds transferred\n', '  event TransferBenefit(address indexed to, uint value);\n', '\n', '  event JackPot(uint periodNumber, address winnerAddr, bytes32 winnerHash, uint value, uint when);\n', '\n', '\n', '//current period of the game\n', '  uint public currentPeriod;\n', '\n', '  //if maxTicketAmount is not rised and maxPeriodDuration from period start is gone everyone can finish current round\n', '  uint public maxPeriodDuration;\n', '\n', '  uint public maxTicketAmount;\n', '\n', '  //ticket price in this contract\n', '  uint public ticketPrice;\n', '\n', '  //part for owner\n', '  uint public benefitPercents;\n', '\n', '  //funds for owner\n', '  uint public benefitFunds;\n', '\n', '  //jackPot percents\n', '  uint public jackPotPercents;\n', '\n', '  uint public jackPotFunds;\n', '\n', '  bytes32 public jackPotBestHash;\n', '\n', '\n', '  //base game hash from other contract Hash\n', '  bytes32 private baseHash;\n', '\n', '  Hash private hashGenerator;\n', '\n', '  //period struct\n', '  struct period {\n', '  uint number;\n', '  uint startDate;\n', '  bytes32 winnerHash;\n', '  address winnerAddress;\n', '  uint raised;\n', '  uint ticketAmount;\n', '  bool finished;\n', '  uint reward;\n', '  }\n', '\n', '  //ticket struct\n', '  struct ticket {\n', '  uint number;\n', '  address addr;\n', '  bytes32 hash;\n', '  }\n', '\n', '\n', '  //ticket store\n', '  mapping (uint => mapping (uint => ticket)) public tickets;\n', '\n', '  //periods store\n', '  mapping (uint => period) public periods;\n', '\n', '\n', '  function Lotery(uint _maxPeriodDuration, uint _ticketPrice, uint _benefitPercents, uint _maxTicketAmount, address _hashAddr, uint _jackPotPercents) public {\n', '\n', '    require(_maxPeriodDuration > 0 && _ticketPrice > 0 && _benefitPercents > 0 && _benefitPercents < 50 && _maxTicketAmount > 0 && _jackPotPercents > 0 && _jackPotPercents < 50);\n', '    //set data in constructor\n', '    maxPeriodDuration = _maxPeriodDuration;\n', '    ticketPrice = _ticketPrice;\n', '    benefitPercents = _benefitPercents;\n', '    maxTicketAmount = _maxTicketAmount;\n', '    jackPotPercents = _jackPotPercents;\n', '\n', '    //get initial hash\n', '    hashGenerator = Hash(_hashAddr);\n', '    baseHash = hashGenerator.get();\n', '\n', '    //start initial period\n', '    periods[currentPeriod].number = currentPeriod;\n', '    periods[currentPeriod].startDate = now;\n', '\n', '\n', '  }\n', '\n', '\n', '\n', '  //start new period\n', '  function startNewPeriod() private {\n', '    //if prev period finished\n', '    require(periods[currentPeriod].finished);\n', '    //init new period\n', '    currentPeriod++;\n', '    periods[currentPeriod].number = currentPeriod;\n', '    periods[currentPeriod].startDate = now;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  //buy ticket with specified round and passing string data\n', '  function buyTicket(uint periodNumber, string data) payable public {\n', '\n', '    //only with ticket price!\n', '    require(msg.value == ticketPrice);\n', '    //only if current ticketAmount < maxTicketAmount\n', '    require(periods[periodNumber].ticketAmount < maxTicketAmount);\n', '    //roundNumber is currentRound\n', '    require(periodNumber == currentPeriod);\n', '\n', '    processTicketBuying(data, msg.value, msg.sender);\n', '\n', '  }\n', '\n', '\n', '  //buy ticket with msg.data and currentRound when transaction happened\n', '  function() payable public {\n', '\n', '    //only with ticket price!\n', '    require(msg.value == ticketPrice);\n', '    //only if current ticketAmount < maxTicketAmount\n', '    require(periods[currentPeriod].ticketAmount < maxTicketAmount);\n', '\n', '\n', '    processTicketBuying(string(msg.data), msg.value, msg.sender);\n', '\n', '\n', '  }\n', '\n', '  function processTicketBuying(string data, uint value, address sender) private {\n', '\n', '\n', '    //MAIN SECRET!\n', '    //calc ticket hash from baseHash and user data\n', '    //nobody knows baseHash\n', '    bytes32 hash = sha256(data, baseHash);\n', '\n', '    //update base hash for next tickets\n', '    baseHash = sha256(hash, baseHash);\n', '\n', '    //set winner if this is a best hash in round\n', '    if (periods[currentPeriod].ticketAmount == 0 || (hash < periods[currentPeriod].winnerHash)) {\n', '      periods[currentPeriod].winnerHash = hash;\n', '      periods[currentPeriod].winnerAddress = sender;\n', '    }\n', '\n', '    //update tickets store\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].number = periods[currentPeriod].ticketAmount;\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].addr = sender;\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].hash = hash;\n', '\n', '\n', '    //update periods store\n', '    periods[currentPeriod].ticketAmount++;\n', '    periods[currentPeriod].raised += value;\n', '\n', '    //call events\n', '    TicketSelling(currentPeriod, sender, hash, now);\n', '\n', '    //automatically finish and start new round if max ticket amount is raised\n', '    if (periods[currentPeriod].ticketAmount >= maxTicketAmount) {\n', '      finishRound();\n', '    }\n', '\n', '  }\n', '\n', '\n', '  //finish round\n', '  function finishRound() private {\n', '\n', '    //only if not finished yet\n', '    require(!periods[currentPeriod].finished);\n', '    //only if ticketAmount >= maxTicketAmount\n', '    require(periods[currentPeriod].ticketAmount >= maxTicketAmount);\n', '\n', '\n', '    //calc reward for current winner with minus %\n', '\n', '    uint fee = ((periods[currentPeriod].raised * benefitPercents) / 100);\n', '    uint jack = ((periods[currentPeriod].raised * jackPotPercents) / 100);\n', '\n', '\n', '    uint winnerReward = periods[currentPeriod].raised - fee - jack;\n', '\n', '    //calc owner benefit\n', '    benefitFunds += periods[currentPeriod].raised - winnerReward;\n', '\n', '\n', '    //if first time\n', '    if (jackPotBestHash == 0x0) {\n', '      jackPotBestHash = periods[currentPeriod].winnerHash;\n', '    }\n', '    //all other times\n', '    if (periods[currentPeriod].winnerHash < jackPotBestHash) {\n', '\n', '      jackPotBestHash = periods[currentPeriod].winnerHash;\n', '\n', '\n', '      if (jackPotFunds > 0) {\n', '        winnerReward += jackPotFunds;\n', '        JackPot(currentPeriod, periods[currentPeriod].winnerAddress, periods[currentPeriod].winnerHash, jackPotFunds, now);\n', '\n', '      }\n', '\n', '      jackPotFunds = 0;\n', '\n', '    }\n', '\n', '    //move jack to next round\n', '    jackPotFunds += jack;\n', '\n', '    //calc expected balance\n', '    uint plannedBalance = this.balance - winnerReward;\n', '\n', '    //send ether to winner\n', '    periods[currentPeriod].winnerAddress.transfer(winnerReward);\n', '\n', '    //update period data\n', '    periods[currentPeriod].reward = winnerReward;\n', '    periods[currentPeriod].finished = true;\n', '\n', '    //call events\n', '    PeriodFinished(currentPeriod, periods[currentPeriod].winnerAddress, winnerReward, periods[currentPeriod].winnerHash, now);\n', '\n', '    //automatically start new period\n', '    startNewPeriod();\n', '\n', '    //check balance\n', '    assert(this.balance == plannedBalance);\n', '  }\n', '\n', '  //benefit for owner\n', '  function benefit() public onlyOwner {\n', '    require(benefitFunds > 0);\n', '\n', '    uint plannedBalance = this.balance - benefitFunds;\n', '    owner.transfer(benefitFunds);\n', '    benefitFunds = 0;\n', '\n', '    TransferBenefit(owner, benefitFunds);\n', '    assert(this.balance == plannedBalance);\n', '  }\n', '\n', '  //manually finish and restart round\n', '  function finishRoundAndStartNew() public {\n', '    //only if round has tickets\n', '    require(periods[currentPeriod].ticketAmount > 0);\n', '    //only if date is expired\n', '    require(periods[currentPeriod].startDate + maxPeriodDuration < now);\n', '    //restart round\n', '    finishRound();\n', '  }\n', '\n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'interface Hash {\n', '   \n', '    function get() public returns (bytes32); \n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    uint256 public totalSupply;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    /*function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }*/\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Lotery is Ownable {\n', '\n', '  //event when gamer is buying a new ticket\n', '  event TicketSelling(uint periodNumber, address indexed from, bytes32 hash, uint when);\n', '\n', '  //event when period finished\n', '  event PeriodFinished(uint periodNumber, address indexed winnerAddr, uint reward, bytes32 winnerHash, uint when);\n', '\n', '  //event when any funds transferred\n', '  event TransferBenefit(address indexed to, uint value);\n', '\n', '  event JackPot(uint periodNumber, address winnerAddr, bytes32 winnerHash, uint value, uint when);\n', '\n', '\n', '//current period of the game\n', '  uint public currentPeriod;\n', '\n', '  //if maxTicketAmount is not rised and maxPeriodDuration from period start is gone everyone can finish current round\n', '  uint public maxPeriodDuration;\n', '\n', '  uint public maxTicketAmount;\n', '\n', '  //ticket price in this contract\n', '  uint public ticketPrice;\n', '\n', '  //part for owner\n', '  uint public benefitPercents;\n', '\n', '  //funds for owner\n', '  uint public benefitFunds;\n', '\n', '  //jackPot percents\n', '  uint public jackPotPercents;\n', '\n', '  uint public jackPotFunds;\n', '\n', '  bytes32 public jackPotBestHash;\n', '\n', '\n', '  //base game hash from other contract Hash\n', '  bytes32 private baseHash;\n', '\n', '  Hash private hashGenerator;\n', '\n', '  //period struct\n', '  struct period {\n', '  uint number;\n', '  uint startDate;\n', '  bytes32 winnerHash;\n', '  address winnerAddress;\n', '  uint raised;\n', '  uint ticketAmount;\n', '  bool finished;\n', '  uint reward;\n', '  }\n', '\n', '  //ticket struct\n', '  struct ticket {\n', '  uint number;\n', '  address addr;\n', '  bytes32 hash;\n', '  }\n', '\n', '\n', '  //ticket store\n', '  mapping (uint => mapping (uint => ticket)) public tickets;\n', '\n', '  //periods store\n', '  mapping (uint => period) public periods;\n', '\n', '\n', '  function Lotery(uint _maxPeriodDuration, uint _ticketPrice, uint _benefitPercents, uint _maxTicketAmount, address _hashAddr, uint _jackPotPercents) public {\n', '\n', '    require(_maxPeriodDuration > 0 && _ticketPrice > 0 && _benefitPercents > 0 && _benefitPercents < 50 && _maxTicketAmount > 0 && _jackPotPercents > 0 && _jackPotPercents < 50);\n', '    //set data in constructor\n', '    maxPeriodDuration = _maxPeriodDuration;\n', '    ticketPrice = _ticketPrice;\n', '    benefitPercents = _benefitPercents;\n', '    maxTicketAmount = _maxTicketAmount;\n', '    jackPotPercents = _jackPotPercents;\n', '\n', '    //get initial hash\n', '    hashGenerator = Hash(_hashAddr);\n', '    baseHash = hashGenerator.get();\n', '\n', '    //start initial period\n', '    periods[currentPeriod].number = currentPeriod;\n', '    periods[currentPeriod].startDate = now;\n', '\n', '\n', '  }\n', '\n', '\n', '\n', '  //start new period\n', '  function startNewPeriod() private {\n', '    //if prev period finished\n', '    require(periods[currentPeriod].finished);\n', '    //init new period\n', '    currentPeriod++;\n', '    periods[currentPeriod].number = currentPeriod;\n', '    periods[currentPeriod].startDate = now;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  //buy ticket with specified round and passing string data\n', '  function buyTicket(uint periodNumber, string data) payable public {\n', '\n', '    //only with ticket price!\n', '    require(msg.value == ticketPrice);\n', '    //only if current ticketAmount < maxTicketAmount\n', '    require(periods[periodNumber].ticketAmount < maxTicketAmount);\n', '    //roundNumber is currentRound\n', '    require(periodNumber == currentPeriod);\n', '\n', '    processTicketBuying(data, msg.value, msg.sender);\n', '\n', '  }\n', '\n', '\n', '  //buy ticket with msg.data and currentRound when transaction happened\n', '  function() payable public {\n', '\n', '    //only with ticket price!\n', '    require(msg.value == ticketPrice);\n', '    //only if current ticketAmount < maxTicketAmount\n', '    require(periods[currentPeriod].ticketAmount < maxTicketAmount);\n', '\n', '\n', '    processTicketBuying(string(msg.data), msg.value, msg.sender);\n', '\n', '\n', '  }\n', '\n', '  function processTicketBuying(string data, uint value, address sender) private {\n', '\n', '\n', '    //MAIN SECRET!\n', '    //calc ticket hash from baseHash and user data\n', '    //nobody knows baseHash\n', '    bytes32 hash = sha256(data, baseHash);\n', '\n', '    //update base hash for next tickets\n', '    baseHash = sha256(hash, baseHash);\n', '\n', '    //set winner if this is a best hash in round\n', '    if (periods[currentPeriod].ticketAmount == 0 || (hash < periods[currentPeriod].winnerHash)) {\n', '      periods[currentPeriod].winnerHash = hash;\n', '      periods[currentPeriod].winnerAddress = sender;\n', '    }\n', '\n', '    //update tickets store\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].number = periods[currentPeriod].ticketAmount;\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].addr = sender;\n', '    tickets[currentPeriod][periods[currentPeriod].ticketAmount].hash = hash;\n', '\n', '\n', '    //update periods store\n', '    periods[currentPeriod].ticketAmount++;\n', '    periods[currentPeriod].raised += value;\n', '\n', '    //call events\n', '    TicketSelling(currentPeriod, sender, hash, now);\n', '\n', '    //automatically finish and start new round if max ticket amount is raised\n', '    if (periods[currentPeriod].ticketAmount >= maxTicketAmount) {\n', '      finishRound();\n', '    }\n', '\n', '  }\n', '\n', '\n', '  //finish round\n', '  function finishRound() private {\n', '\n', '    //only if not finished yet\n', '    require(!periods[currentPeriod].finished);\n', '    //only if ticketAmount >= maxTicketAmount\n', '    require(periods[currentPeriod].ticketAmount >= maxTicketAmount);\n', '\n', '\n', '    //calc reward for current winner with minus %\n', '\n', '    uint fee = ((periods[currentPeriod].raised * benefitPercents) / 100);\n', '    uint jack = ((periods[currentPeriod].raised * jackPotPercents) / 100);\n', '\n', '\n', '    uint winnerReward = periods[currentPeriod].raised - fee - jack;\n', '\n', '    //calc owner benefit\n', '    benefitFunds += periods[currentPeriod].raised - winnerReward;\n', '\n', '\n', '    //if first time\n', '    if (jackPotBestHash == 0x0) {\n', '      jackPotBestHash = periods[currentPeriod].winnerHash;\n', '    }\n', '    //all other times\n', '    if (periods[currentPeriod].winnerHash < jackPotBestHash) {\n', '\n', '      jackPotBestHash = periods[currentPeriod].winnerHash;\n', '\n', '\n', '      if (jackPotFunds > 0) {\n', '        winnerReward += jackPotFunds;\n', '        JackPot(currentPeriod, periods[currentPeriod].winnerAddress, periods[currentPeriod].winnerHash, jackPotFunds, now);\n', '\n', '      }\n', '\n', '      jackPotFunds = 0;\n', '\n', '    }\n', '\n', '    //move jack to next round\n', '    jackPotFunds += jack;\n', '\n', '    //calc expected balance\n', '    uint plannedBalance = this.balance - winnerReward;\n', '\n', '    //send ether to winner\n', '    periods[currentPeriod].winnerAddress.transfer(winnerReward);\n', '\n', '    //update period data\n', '    periods[currentPeriod].reward = winnerReward;\n', '    periods[currentPeriod].finished = true;\n', '\n', '    //call events\n', '    PeriodFinished(currentPeriod, periods[currentPeriod].winnerAddress, winnerReward, periods[currentPeriod].winnerHash, now);\n', '\n', '    //automatically start new period\n', '    startNewPeriod();\n', '\n', '    //check balance\n', '    assert(this.balance == plannedBalance);\n', '  }\n', '\n', '  //benefit for owner\n', '  function benefit() public onlyOwner {\n', '    require(benefitFunds > 0);\n', '\n', '    uint plannedBalance = this.balance - benefitFunds;\n', '    owner.transfer(benefitFunds);\n', '    benefitFunds = 0;\n', '\n', '    TransferBenefit(owner, benefitFunds);\n', '    assert(this.balance == plannedBalance);\n', '  }\n', '\n', '  //manually finish and restart round\n', '  function finishRoundAndStartNew() public {\n', '    //only if round has tickets\n', '    require(periods[currentPeriod].ticketAmount > 0);\n', '    //only if date is expired\n', '    require(periods[currentPeriod].startDate + maxPeriodDuration < now);\n', '    //restart round\n', '    finishRound();\n', '  }\n', '\n', '\n', '}']
