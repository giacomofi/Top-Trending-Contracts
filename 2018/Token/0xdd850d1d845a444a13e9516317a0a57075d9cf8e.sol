['// 定义语言和版本\n', 'pragma solidity ^0.4.16;\n', '\n', '// 调用人合约\n', 'contract owned {\n', '\n', '    //地址\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //必须是自己\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    //转移所有权\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// 定义令牌接收接口\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '// 合约主要逻辑\n', 'contract TokenERC20 {\n', '\n', '    // Public variables of the token\n', '    // 令牌的公共变量\n', '    \n', '    // 令牌的名称\n', '    string public name;\n', '\n', '    // 令牌的标识\n', '    string public symbol;\n', '\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    // 强烈建议18位小数\n', '    uint8 public decimals = 18;\n', '    \n', '    // 总供应量\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    // 创建一个map保存所有代币持有者的余额\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // 地址配额\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    // 这将在区块链上生成将通知客户的公共事件\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    // 这将在区块链上生成将通知客户的公共事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    // 通知客户销毁的总量\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     * 构造函数\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public {               \n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens 给令牌创建者所有初始化的数量\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     * 内部转账，私有函数，内部调用\n', '     */\n', '    function _transfer( address _from, address _to, uint _value ) internal {\n', '\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        // 检查地址格式\n', '        require(_to != 0x0);\n', '\n', '        // Check if the sender has enough\n', '        // 检查转账者是否有足够token\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        // 检查是否超过最大量\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        // Subtract from the sender\n', '        // 转出人减少\n', '        balanceOf[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        // 转入人增加\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        // 该断言用于使用静态分析来查找代码中的错误，他们永远不应该失败\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     * 转账\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer( address _to, uint256 _value ) public returns (bool success) {\n', '\n', '        //这里注意发送者就是合约调用者\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     * 从另一个地址转移一定配额的token\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom( address _from, address _to, uint256 _value ) public returns (bool success) {\n', '\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance 检查从from地址中转移一定配额的token到to地址\n', '\n', '        allowance[_from][msg.sender] -= _value; //转入地址的数量减少\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * 设置配额给其他地址\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve( address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        allowance[msg.sender][_spender] = _value;   //调用地址给指定地址一定数量的配额\n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     * 设置配额给其他地址，并且触发\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall( address _spender, uint256 _value, bytes _extraData ) public returns (bool success) {\n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     * 销毁令牌\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough 检查销毁地址余额\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender 账户里减少\n', '        totalSupply -= _value;                      // Updates totalSupply 总供应量减少\n', '        emit Burn(msg.sender, _value);              // 销毁\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * 从指定账户销毁令牌\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender       地址\n', '     * @param _value the amount of money to burn    数量\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough 检查余额\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance 检查配额\n', '\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance \n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply 总供应量减少\n', '        emit Burn(_from, _value);                           // 销毁\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '// 高级版本\n', 'contract FOMOWINNER is owned, TokenERC20 {\n', '\n', '    // 销售价格\n', '    uint256 public sellPrice;\n', '\n', '    // 购买价格\n', '    uint256 public buyPrice;\n', '\n', '    // 定义冻结账户\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    // 冻结消息通知\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    // 构造\n', '    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    // 转账，内部私有函数\n', '    function _transfer( address _from, address _to, uint _value  ) internal {\n', '        \n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead 检查转账地址格式\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough 检查转出地址余额\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows           检查转入金额不能为负\n', '\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen  转出地址不在冻结账户中\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen 转入地址不在冻结账户中\n', '        balanceOf[_from] -= _value;                         // Subtract from the spender  转出地址减少\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient 转入地址增加\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    /// 蒸发\n', '    function mintToken( address target, uint256 mintedAmount ) onlyOwner public {\n', '\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    /// 冻结账户\n', '    function freezeAccount( address target, bool freeze ) onlyOwner public { \n', '\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    /// 设置价格，针对eth\n', '    function setPrices( uint256 newSellPrice, uint256 newBuyPrice ) onlyOwner public {\n', '\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    /// 从合约中购买令牌\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               // calculates the amount 计算收到的eth能换多少token\n', '        _transfer(this, msg.sender, amount);              // makes the transfers  token转账\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    /// 向合约卖出令牌\n', '    function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice); // checks if the contract has enough ether to buy 检查合约地址是否有足够的eth\n', '        _transfer(msg.sender, this, amount);              // makes the transfers  token转账\n', '        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks 向对方发送eth\n', '    }\n', '}']
['// 定义语言和版本\n', 'pragma solidity ^0.4.16;\n', '\n', '// 调用人合约\n', 'contract owned {\n', '\n', '    //地址\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //必须是自己\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    //转移所有权\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// 定义令牌接收接口\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '// 合约主要逻辑\n', 'contract TokenERC20 {\n', '\n', '    // Public variables of the token\n', '    // 令牌的公共变量\n', '    \n', '    // 令牌的名称\n', '    string public name;\n', '\n', '    // 令牌的标识\n', '    string public symbol;\n', '\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    // 强烈建议18位小数\n', '    uint8 public decimals = 18;\n', '    \n', '    // 总供应量\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    // 创建一个map保存所有代币持有者的余额\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // 地址配额\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    // 这将在区块链上生成将通知客户的公共事件\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    // 这将在区块链上生成将通知客户的公共事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    // 通知客户销毁的总量\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     * 构造函数\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) public {               \n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens 给令牌创建者所有初始化的数量\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     * 内部转账，私有函数，内部调用\n', '     */\n', '    function _transfer( address _from, address _to, uint _value ) internal {\n', '\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        // 检查地址格式\n', '        require(_to != 0x0);\n', '\n', '        // Check if the sender has enough\n', '        // 检查转账者是否有足够token\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        // 检查是否超过最大量\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        // Subtract from the sender\n', '        // 转出人减少\n', '        balanceOf[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        // 转入人增加\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        // 该断言用于使用静态分析来查找代码中的错误，他们永远不应该失败\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     * 转账\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer( address _to, uint256 _value ) public returns (bool success) {\n', '\n', '        //这里注意发送者就是合约调用者\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     * 从另一个地址转移一定配额的token\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom( address _from, address _to, uint256 _value ) public returns (bool success) {\n', '\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance 检查从from地址中转移一定配额的token到to地址\n', '\n', '        allowance[_from][msg.sender] -= _value; //转入地址的数量减少\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * 设置配额给其他地址\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve( address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        allowance[msg.sender][_spender] = _value;   //调用地址给指定地址一定数量的配额\n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     * 设置配额给其他地址，并且触发\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall( address _spender, uint256 _value, bytes _extraData ) public returns (bool success) {\n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     * 销毁令牌\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough 检查销毁地址余额\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender 账户里减少\n', '        totalSupply -= _value;                      // Updates totalSupply 总供应量减少\n', '        emit Burn(msg.sender, _value);              // 销毁\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * 从指定账户销毁令牌\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender       地址\n', '     * @param _value the amount of money to burn    数量\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough 检查余额\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance 检查配额\n', '\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance \n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply 总供应量减少\n', '        emit Burn(_from, _value);                           // 销毁\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '// 高级版本\n', 'contract FOMOWINNER is owned, TokenERC20 {\n', '\n', '    // 销售价格\n', '    uint256 public sellPrice;\n', '\n', '    // 购买价格\n', '    uint256 public buyPrice;\n', '\n', '    // 定义冻结账户\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    // 冻结消息通知\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    // 构造\n', '    constructor ( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    // 转账，内部私有函数\n', '    function _transfer( address _from, address _to, uint _value  ) internal {\n', '        \n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead 检查转账地址格式\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough 检查转出地址余额\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows           检查转入金额不能为负\n', '\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen  转出地址不在冻结账户中\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen 转入地址不在冻结账户中\n', '        balanceOf[_from] -= _value;                         // Subtract from the spender  转出地址减少\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient 转入地址增加\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    /// 蒸发\n', '    function mintToken( address target, uint256 mintedAmount ) onlyOwner public {\n', '\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    /// 冻结账户\n', '    function freezeAccount( address target, bool freeze ) onlyOwner public { \n', '\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    /// 设置价格，针对eth\n', '    function setPrices( uint256 newSellPrice, uint256 newBuyPrice ) onlyOwner public {\n', '\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    /// 从合约中购买令牌\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               // calculates the amount 计算收到的eth能换多少token\n', '        _transfer(this, msg.sender, amount);              // makes the transfers  token转账\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    /// 向合约卖出令牌\n', '    function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice); // checks if the contract has enough ether to buy 检查合约地址是否有足够的eth\n', '        _transfer(msg.sender, this, amount);              // makes the transfers  token转账\n', "        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks 向对方发送eth\n", '    }\n', '}']
