['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;                              \n', '    } \n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        owner = msg.sender;\n', '        totalSupply = initialSupply;  \n', '        balanceOf[msg.sender] = totalSupply;               \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;   \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                     \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '            owner = newOwner;\n', '    }\n', '\n', '    function createTokens(address _target, uint amount)public onlyOwner {\n', '        balanceOf[_target] += amount;\n', '        totalSupply += amount;\n', '        Transfer(0, owner, amount);\n', '        Transfer(owner, _target, amount);\n', '    }\n', '}']