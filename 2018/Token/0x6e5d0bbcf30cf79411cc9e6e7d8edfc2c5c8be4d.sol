['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '\trequire(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract EBCBToken is StandardToken {\n', '    string public name = &#39;EBCBToken&#39;;\n', '\tstring public symbol = &#39;EBCB&#39;;\n', '\tuint8 public decimals = 2;\n', '\tuint public INITIAL_SUPPLY = 100000000;\n', '\taddress public ceoAddress;\n', '\taddress public cooAddress = 0xD22adC4115e896485aB9C755Cd2972f297Aa24B8;\n', '\tuint256 public sellPrice = 0.0002 ether;\n', '    uint256 public buyPrice = 0.0002 ether;\n', '\t\n', '\tfunction EBCBToken() public {\n', '\t    totalSupply_ = INITIAL_SUPPLY;\n', '\t    balances[msg.sender] = INITIAL_SUPPLY.sub(2000000);\n', '\t    balances[cooAddress] = 2000000;\n', '\t    ceoAddress = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyCEOorCOO() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    function mintToken(uint256 mintedAmount) public onlyCEOorCOO {\n', '       totalSupply_ = totalSupply_.add(mintedAmount);\n', '       balances[msg.sender] = balances[msg.sender].add(mintedAmount);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyCEOorCOO {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function getBonusPool() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '\t\n', '    function buy() payable public returns (uint amount){\n', '        amount = msg.value.div(buyPrice);\n', '        require(balances[ceoAddress] >= amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        balances[ceoAddress] = balances[ceoAddress].sub(amount);\n', '        Transfer(ceoAddress, msg.sender, amount);\n', '        return amount;\n', '    }\n', '\t\n', '    function sell(uint amount) public returns (uint revenue){\n', '        require(balances[msg.sender] >= amount);\n', '        balances[ceoAddress] = balances[ceoAddress].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        revenue = amount.mul(sellPrice);\n', '        msg.sender.transfer(revenue);\n', '        Transfer(msg.sender, ceoAddress, amount);\n', '        return revenue;\n', '    }\n', '\t\n', '\tfunction batchTransfer(address[] _tos, uint256 _value) public {\n', '\t  for(uint i = 0; i < _tos.length; i++) {\n', '        transfer( _tos[i], _value);\n', '      }\n', '\t}\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '\trequire(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract EBCBToken is StandardToken {\n', "    string public name = 'EBCBToken';\n", "\tstring public symbol = 'EBCB';\n", '\tuint8 public decimals = 2;\n', '\tuint public INITIAL_SUPPLY = 100000000;\n', '\taddress public ceoAddress;\n', '\taddress public cooAddress = 0xD22adC4115e896485aB9C755Cd2972f297Aa24B8;\n', '\tuint256 public sellPrice = 0.0002 ether;\n', '    uint256 public buyPrice = 0.0002 ether;\n', '\t\n', '\tfunction EBCBToken() public {\n', '\t    totalSupply_ = INITIAL_SUPPLY;\n', '\t    balances[msg.sender] = INITIAL_SUPPLY.sub(2000000);\n', '\t    balances[cooAddress] = 2000000;\n', '\t    ceoAddress = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyCEOorCOO() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    function mintToken(uint256 mintedAmount) public onlyCEOorCOO {\n', '       totalSupply_ = totalSupply_.add(mintedAmount);\n', '       balances[msg.sender] = balances[msg.sender].add(mintedAmount);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyCEOorCOO {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function getBonusPool() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '\t\n', '    function buy() payable public returns (uint amount){\n', '        amount = msg.value.div(buyPrice);\n', '        require(balances[ceoAddress] >= amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        balances[ceoAddress] = balances[ceoAddress].sub(amount);\n', '        Transfer(ceoAddress, msg.sender, amount);\n', '        return amount;\n', '    }\n', '\t\n', '    function sell(uint amount) public returns (uint revenue){\n', '        require(balances[msg.sender] >= amount);\n', '        balances[ceoAddress] = balances[ceoAddress].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        revenue = amount.mul(sellPrice);\n', '        msg.sender.transfer(revenue);\n', '        Transfer(msg.sender, ceoAddress, amount);\n', '        return revenue;\n', '    }\n', '\t\n', '\tfunction batchTransfer(address[] _tos, uint256 _value) public {\n', '\t  for(uint i = 0; i < _tos.length; i++) {\n', '        transfer( _tos[i], _value);\n', '      }\n', '\t}\n', '}']
