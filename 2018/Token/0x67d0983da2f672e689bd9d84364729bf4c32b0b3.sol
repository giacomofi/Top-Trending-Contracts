['pragma solidity ^0.4.21;\n', '\n', '/// @title Ownable contract\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/// @title Mortal contract - used to selfdestruct once we have no use of this contract\n', 'contract Mortal is Ownable {\n', '    function executeSelfdestruct() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '/// @title ERC20 contract\n', '/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public view returns (uint);\n', '    function transfer(address to, uint value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/// @title WizzleInfinityHelper contract\n', 'contract CCAirdropper is Mortal {\n', '    \n', '    mapping (address => bool) public whitelisted;\n', '    ERC20 public token;\n', '\n', '    constructor(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    /// @dev Transfer tokens to addresses registered for airdrop\n', '    /// @param dests Array of addresses that have registered for airdrop\n', '    /// @param values Array of token amount for each address that have registered for airdrop\n', '    /// @return Number of transfers\n', '    function airdrop(address[] dests, uint256[] values) public onlyOwner returns (uint256) {\n', '        require(dests.length == values.length);\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '            token.transfer(dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return (i); \n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/// @title Ownable contract\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/// @title Mortal contract - used to selfdestruct once we have no use of this contract\n', 'contract Mortal is Ownable {\n', '    function executeSelfdestruct() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '/// @title ERC20 contract\n', '/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public view returns (uint);\n', '    function transfer(address to, uint value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/// @title WizzleInfinityHelper contract\n', 'contract CCAirdropper is Mortal {\n', '    \n', '    mapping (address => bool) public whitelisted;\n', '    ERC20 public token;\n', '\n', '    constructor(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    /// @dev Transfer tokens to addresses registered for airdrop\n', '    /// @param dests Array of addresses that have registered for airdrop\n', '    /// @param values Array of token amount for each address that have registered for airdrop\n', '    /// @return Number of transfers\n', '    function airdrop(address[] dests, uint256[] values) public onlyOwner returns (uint256) {\n', '        require(dests.length == values.length);\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '            token.transfer(dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return (i); \n', '    }\n', '}']
