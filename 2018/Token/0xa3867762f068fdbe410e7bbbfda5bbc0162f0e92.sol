['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  event PrivateFundEnabled();\n', '  event PrivateFundDisabled();\n', '\n', '  bool public paused = false;\n', '  bool public privateFundEnabled = true;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is private fund not end.\n', '   */\n', '  modifier whenPrivateFundDisabled() {\n', '    require(!privateFundEnabled);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is private fund end.\n', '   */\n', '  modifier whenPrivateFundEnabled() {\n', '    require(privateFundEnabled);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to end private fund, triggers stopped state\n', '   */\n', '  function disablePrivateFund() onlyOwner whenPrivateFundEnabled public {\n', '    privateFundEnabled = false;\n', '    emit PrivateFundDisabled();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unlock private fund, returns to normal state\n', '   */\n', '  function enablePrivateFund() onlyOwner whenPrivateFundDisabled public {\n', '    privateFundEnabled = true;\n', '    emit PrivateFundEnabled();\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract GlobalSharingEconomyCoin is Pausable, ERC20 {\n', '  using SafeMath for uint256;\n', '  event BatchTransfer(address indexed owner, bool value);\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => bool) allowedBatchTransfers;\n', '\n', '  constructor() public {\n', '    name = "GlobalSharingEconomyCoin";\n', '    symbol = "GSE";\n', '    decimals = 8;\n', '    totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '    balances[msg.sender] = totalSupply;\n', '    allowedBatchTransfers[msg.sender] = true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function setBatchTransfer(address _address, bool _value) public onlyOwner returns (bool) {\n', '    allowedBatchTransfers[_address] = _value;\n', '    emit BatchTransfer(_address, _value);\n', '    return true;\n', '  }\n', '\n', '  function getBatchTransfer(address _address) public onlyOwner view returns (bool) {\n', '    return allowedBatchTransfers[_address];\n', '  }\n', '\n', '  /**\n', '   * 只允许项目方空投，如果项目方禁止批量转币，也同时禁用空投\n', '   */\n', '  function airdrop(address[] _funds, uint256 _amount) public whenNotPaused whenPrivateFundEnabled returns (bool) {\n', '    require(allowedBatchTransfers[msg.sender]);\n', '    uint256 fundslen = _funds.length;\n', '    // 根据gaslimit的限制，超过300个地址的循环基本就无法成功执行了\n', '    require(fundslen > 0 && fundslen < 300);\n', '    \n', '    uint256 totalAmount = 0;\n', '    for (uint i = 0; i < fundslen; ++i){\n', '      balances[_funds[i]] = balances[_funds[i]].add(_amount);\n', '      totalAmount = totalAmount.add(_amount);\n', '      emit Transfer(msg.sender, _funds[i], _amount);\n', '    }\n', '\n', '    // 如果执行失败，则会回滚整个交易\n', '    require(balances[msg.sender] >= totalAmount);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 允许交易所和项目放方批量转币\n', '   * _funds: 批量转币地址\n', '   * _amounts: 每个地址的转币数量，长度必须跟_funds的长度相同\n', '   */\n', '  function batchTransfer(address[] _funds, uint256[] _amounts) public whenNotPaused whenPrivateFundEnabled returns (bool) {\n', '    require(allowedBatchTransfers[msg.sender]);\n', '    uint256 fundslen = _funds.length;\n', '    uint256 amountslen = _amounts.length;\n', '    require(fundslen == amountslen && fundslen > 0 && fundslen < 300);\n', '\n', '    uint256 totalAmount = 0;\n', '    for (uint i = 0; i < amountslen; ++i){\n', '      totalAmount = totalAmount.add(_amounts[i]);\n', '    }\n', '\n', '    require(balances[msg.sender] >= totalAmount);\n', '    for (uint j = 0; j < amountslen; ++j) {\n', '      balances[_funds[j]] = balances[_funds[j]].add(_amounts[j]);\n', '      emit Transfer(msg.sender, _funds[j], _amounts[j]);\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  event PrivateFundEnabled();\n', '  event PrivateFundDisabled();\n', '\n', '  bool public paused = false;\n', '  bool public privateFundEnabled = true;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is private fund not end.\n', '   */\n', '  modifier whenPrivateFundDisabled() {\n', '    require(!privateFundEnabled);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is private fund end.\n', '   */\n', '  modifier whenPrivateFundEnabled() {\n', '    require(privateFundEnabled);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to end private fund, triggers stopped state\n', '   */\n', '  function disablePrivateFund() onlyOwner whenPrivateFundEnabled public {\n', '    privateFundEnabled = false;\n', '    emit PrivateFundDisabled();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unlock private fund, returns to normal state\n', '   */\n', '  function enablePrivateFund() onlyOwner whenPrivateFundDisabled public {\n', '    privateFundEnabled = true;\n', '    emit PrivateFundEnabled();\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract GlobalSharingEconomyCoin is Pausable, ERC20 {\n', '  using SafeMath for uint256;\n', '  event BatchTransfer(address indexed owner, bool value);\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => bool) allowedBatchTransfers;\n', '\n', '  constructor() public {\n', '    name = "GlobalSharingEconomyCoin";\n', '    symbol = "GSE";\n', '    decimals = 8;\n', '    totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '    balances[msg.sender] = totalSupply;\n', '    allowedBatchTransfers[msg.sender] = true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function setBatchTransfer(address _address, bool _value) public onlyOwner returns (bool) {\n', '    allowedBatchTransfers[_address] = _value;\n', '    emit BatchTransfer(_address, _value);\n', '    return true;\n', '  }\n', '\n', '  function getBatchTransfer(address _address) public onlyOwner view returns (bool) {\n', '    return allowedBatchTransfers[_address];\n', '  }\n', '\n', '  /**\n', '   * 只允许项目方空投，如果项目方禁止批量转币，也同时禁用空投\n', '   */\n', '  function airdrop(address[] _funds, uint256 _amount) public whenNotPaused whenPrivateFundEnabled returns (bool) {\n', '    require(allowedBatchTransfers[msg.sender]);\n', '    uint256 fundslen = _funds.length;\n', '    // 根据gaslimit的限制，超过300个地址的循环基本就无法成功执行了\n', '    require(fundslen > 0 && fundslen < 300);\n', '    \n', '    uint256 totalAmount = 0;\n', '    for (uint i = 0; i < fundslen; ++i){\n', '      balances[_funds[i]] = balances[_funds[i]].add(_amount);\n', '      totalAmount = totalAmount.add(_amount);\n', '      emit Transfer(msg.sender, _funds[i], _amount);\n', '    }\n', '\n', '    // 如果执行失败，则会回滚整个交易\n', '    require(balances[msg.sender] >= totalAmount);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 允许交易所和项目放方批量转币\n', '   * _funds: 批量转币地址\n', '   * _amounts: 每个地址的转币数量，长度必须跟_funds的长度相同\n', '   */\n', '  function batchTransfer(address[] _funds, uint256[] _amounts) public whenNotPaused whenPrivateFundEnabled returns (bool) {\n', '    require(allowedBatchTransfers[msg.sender]);\n', '    uint256 fundslen = _funds.length;\n', '    uint256 amountslen = _amounts.length;\n', '    require(fundslen == amountslen && fundslen > 0 && fundslen < 300);\n', '\n', '    uint256 totalAmount = 0;\n', '    for (uint i = 0; i < amountslen; ++i){\n', '      totalAmount = totalAmount.add(_amounts[i]);\n', '    }\n', '\n', '    require(balances[msg.sender] >= totalAmount);\n', '    for (uint j = 0; j < amountslen; ++j) {\n', '      balances[_funds[j]] = balances[_funds[j]].add(_amounts[j]);\n', '      emit Transfer(msg.sender, _funds[j], _amounts[j]);\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}']
