['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MSPT is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "MySmartProperty Tokens";\n', '  string public constant symbol = "MSPT";\n', '  uint32 public constant decimals = 18;\n', '\n', '  address public addressSupporters;\n', '  address public addressEccles;\n', '  address public addressJenkins;\n', '  address public addressLeskiw;\n', '  address public addressBilborough;\n', '\n', '  uint public summSupporters = 1000000 * 1 ether;\n', '  uint public summEccles = 2000000 * 1 ether;\n', '  uint public summJenkins = 2000000 * 1 ether;\n', '  uint public summLeskiw = 2000000 * 1 ether;\n', '  uint public summBilborough = 3000000 * 1 ether;\n', '\n', '  function MSPT() public {\n', '    addressSupporters = 0x49ce9f664d9fe7774fE29F5ab17b46266e4437a4;\n', '    addressEccles = 0xF59C5199FCd7e29b2979831e39EfBcf16b90B485;\n', '    addressJenkins = 0x974e94C33a37e05c4cE292b43e7F50a57fAA5Bc7;\n', '    addressLeskiw = 0x3a7e8Eb6DDAa74e58a6F3A39E3d073A9eFA22160;\n', '    addressBilborough = 0xAabb89Ade1Fc2424b7FE837c40E214375Dcf9840;  \n', '      \n', '    //Founders and supporters initial Allocations\n', '    balances[addressSupporters] = balances[addressSupporters].add(summSupporters);\n', '    balances[addressEccles] = balances[addressEccles].add(summEccles);\n', '    balances[addressJenkins] = balances[addressJenkins].add(summJenkins);\n', '    balances[addressLeskiw] = balances[addressLeskiw].add(summLeskiw);\n', '    balances[addressBilborough] = balances[addressBilborough].add(summBilborough);\n', '    totalSupply = summSupporters.add(summEccles).add(summJenkins).add(summLeskiw).add(summBilborough);\n', '  }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  MSPT public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startPreICO;\n', '  uint256 public startICO;\n', '  uint256 public endPreICO;\n', '  uint256 public endICO;           \n', '  \n', '  uint256 public maxAmountPreICO;\n', '  uint256 public maxAmountICO;\n', '  \n', '  uint256 public totalPreICOAmount;\n', '  uint256 public totalICOAmount;\n', '  \n', '  // Remaining Token Allocation\n', '  uint public mintStart1; //15th July 2018\n', '  uint public mintStart2; //15th August 2018\n', '  uint public mintStart3; //15th December 2018\n', '  uint public mintStart4; //15th January 2018\n', '  uint public mintStart5; //15th July 2019     \n', '  \n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePreICO;\n', '  uint256 public rateICO;      \n', '\n', '  // minimum quantity values\n', '  uint256 public minQuanValues; \n', '  \n', '  // Remaining Token Allocation\n', '  uint256 public totalMintAmount; \n', '  uint256 public allowTotalMintAmount;\n', '  uint256 public mintAmount1;\n', '  uint256 public mintAmount2;\n', '  uint256 public mintAmount3;\n', '  uint256 public mintAmount4;\n', '  uint256 public mintAmount5;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  \n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    // total number of tokens\n', '    totalTokens = 100000000 * 1 ether;\n', '    // minimum quantity values\n', '    minQuanValues = 100000000000000000;\n', '    // start and end timestamps where investments are allowed\n', '    startPreICO = 1527948000; //3 June 2018 00:00:00 +10 GMT\n', '    endPreICO = 1530280800; //30 June 2018 00:00:00 +10 GMT\n', '    startICO = 1530280800; //30 June 2018 00:00:00 +10 GMT\n', '    endICO = startICO +  30 * 1 days;           \n', '    // restrictions on amounts during the ico stages\n', '    maxAmountPreICO = 12000000  * 1 ether;\n', '    maxAmountICO = 24000000  * 1 ether;\n', '    // rate decimals = 2;\n', '    ratePreICO = 79294;\n', '    rateICO = 59470;\n', '    // Remaining Token Allocation    \n', '    mintAmount1 = 10000000 * 1 ether;\n', '    mintAmount2 = 10000000 * 1 ether;\n', '    mintAmount3 = 10000000 * 1 ether;\n', '    mintAmount4 = 10000000 * 1 ether;\n', '    mintAmount5 = 10000000 * 1 ether;\n', '    \n', '    mintStart1 = 1538316000; //1st October  2018 +10 GMT\n', '    mintStart2 = 1540994400; //1st November 2018 +10 GMT\n', '    mintStart3 = 1551362400; //1st March    2019 +10 GMT\n', '    mintStart4 = 1554040800; //1st April    2019 +10 GMT\n', '    mintStart5 = 1569852000; //1st October  2019 +10 GMT\n', '    // address where funds are collected\n', '    wallet = 0x7Ac93a7A1F8304c003274512F6c46C132106FE8E;\n', '  }\n', '  function setRatePreICO(uint _ratePreICO) public {\n', '    ratePreICO = _ratePreICO;\n', '  }  \n', '  function setRateICO(uint _rateICO) public {\n', '    rateICO = _rateICO;\n', '  }    \n', '  \n', '  function createTokenContract() internal returns (MSPT) {\n', '    return new MSPT();\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minQuanValues);\n', '    if (now >= startPreICO && now < endPreICO && totalPreICOAmount < maxAmountPreICO && tokens == 0){\n', '      tokens = weiAmount.div(100).mul(ratePreICO);\n', '      if (maxAmountPreICO.sub(totalPreICOAmount) < tokens){\n', '        tokens = maxAmountPreICO.sub(totalPreICOAmount); \n', '        weiAmount = tokens.mul(100).div(ratePreICO);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreICOAmount = totalPreICOAmount.add(tokens);\n', '      if (totalPreICOAmount >= maxAmountPreICO){\n', '        startICO = now;\n', '        endICO = startICO + 30 * 1 days;\n', '      }   \n', '    }    \n', '    if (now >= startICO && totalICOAmount < maxAmountICO  && tokens == 0){\n', '      tokens = weiAmount.div(100).mul(rateICO);\n', '      if (maxAmountICO.sub(totalICOAmount) < tokens){\n', '        tokens = maxAmountICO.sub(totalICOAmount); \n', '        weiAmount = tokens.mul(100).div(rateICO);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalICOAmount = totalICOAmount.add(tokens);\n', '    }     \n', '    require(tokens > 0);\n', '    token.mint(beneficiary, tokens);\n', '    wallet.transfer(weiAmount);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  function mintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require(_amount > 0);\n', '    require(_to != address(0));\n', '    if (now >= mintStart1 && now < mintStart2){\n', '      allowTotalMintAmount = mintAmount1;  \n', '    }\n', '    if (now >= mintStart2 && now < mintStart3){\n', '      allowTotalMintAmount = mintAmount1.add(mintAmount2);  \n', '    }  \n', '    if (now >= mintStart3 && now < mintStart4){\n', '      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3);  \n', '    }       \n', '    if (now >= mintStart4 && now < mintStart5){\n', '      allowTotalMintAmount = mintAmount1.add(mintAmount2).add(mintAmount3).add(mintAmount4);  \n', '    }       \n', '    if (now >= mintStart5){\n', '      allowTotalMintAmount = totalMintAmount.add(totalTokens.sub(token.getTotalSupply()));\n', '    }       \n', '    require(_amount.add(totalMintAmount) <= allowTotalMintAmount);\n', '    token.mint(_to, _amount);\n', '    totalMintAmount = totalMintAmount.add(_amount);\n', '    return true;\n', '  }\n', '  function finishMintingTokens() onlyOwner public returns (bool) {\n', '    token.finishMinting(); \n', '  }\n', '}']