['pragma solidity ^0.4.16;\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) public constant returns(address);\n', '}\n', 'contract ReverseRegistrar {\n', '    function claim(address owner) public returns (bytes32);\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    function rens() internal {\n', '\tAbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b); // ENS addr\n', '\tReverseRegistrar registrar = ReverseRegistrar(ens.owner(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2)); // namehash(&#39;addr.reverse&#39;)\n', '\tif(address(registrar) != 0)\n', '\t    registrar.claim(owner);\n', '    }\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '        rens();\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '        rens();\n', '    }\n', '\n', '    function setAdmin(address newAdmin) onlyOwner public {\n', '        admin = newAdmin;\n', '    }\n', '}\n', '\n', 'contract RichiumToken is owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => bool) public approvedAccount;\n', '    \n', '    event ApprovedAccount(address target, bool approve);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    uint256 public bid;\n', '    uint256 public ask;\n', '\n', '    function RichiumToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * (10 ** uint256(decimals));\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '\n', '\tapprovedAccount[msg.sender] = true;\n', '    }\n', '\n', '    // Internal transfer, only called by this contract\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(approvedAccount[_from]);\n', '        require(approvedAccount[_to]);\n', '\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address from where to burn\n', '     * @param _value the amount of token to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public {\n', '        require(balanceOf[_from] >= _value);\n', '        balanceOf[_from] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '    }\n', '\n', '    /// @notice Withdraw `amount` to owner\n', '    /// @param amount amount to be withdrawn\n', '    function withdraw(uint256 amount) onlyOwner public {\n', '        require(address(this).balance >= amount);\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    /// @notice `Allow | Prevent` `target` from sending & receiving tokens\n', '    /// @param target Address to be allowed or not\n', '    /// @param approve either to allow it or not\n', '    function approveAccount(address target, bool approve) onlyAdmin public {\n', '        approvedAccount[target] = approve;\n', '        emit ApprovedAccount(target, approve);\n', '    }\n', '\n', '    /// @param newBid Price the users can sell to the contract\n', '    /// @param newAsk Price users can buy from the contract\n', '    function setPrices(uint256 newBid, uint256 newAsk) onlyAdmin public {\n', '        bid = newBid;\n', '        ask = newAsk;\n', '    }\n', '\n', '    /// fallback payable function\n', '    function () payable public {\n', '        buy();\n', '    }\n', '    \n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        require(ask > 0);\n', '        uint256 r = msg.value * (10 ** uint256(decimals));\n', '        require(r > msg.value);\n', '        _transfer(this, msg.sender, r / ask);\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        require(bid > 0);\n', '        require(amount * bid >= amount);\n', '        uint256 e = (amount * bid) / (10 ** uint256(decimals));\n', '        require(address(this).balance >= e);\n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(e);\t\t\t\t\t// sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) public constant returns(address);\n', '}\n', 'contract ReverseRegistrar {\n', '    function claim(address owner) public returns (bytes32);\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    function rens() internal {\n', '\tAbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b); // ENS addr\n', "\tReverseRegistrar registrar = ReverseRegistrar(ens.owner(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2)); // namehash('addr.reverse')\n", '\tif(address(registrar) != 0)\n', '\t    registrar.claim(owner);\n', '    }\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '        rens();\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '        rens();\n', '    }\n', '\n', '    function setAdmin(address newAdmin) onlyOwner public {\n', '        admin = newAdmin;\n', '    }\n', '}\n', '\n', 'contract RichiumToken is owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => bool) public approvedAccount;\n', '    \n', '    event ApprovedAccount(address target, bool approve);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    uint256 public bid;\n', '    uint256 public ask;\n', '\n', '    function RichiumToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * (10 ** uint256(decimals));\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '\n', '\tapprovedAccount[msg.sender] = true;\n', '    }\n', '\n', '    // Internal transfer, only called by this contract\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(approvedAccount[_from]);\n', '        require(approvedAccount[_to]);\n', '\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address from where to burn\n', '     * @param _value the amount of token to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public {\n', '        require(balanceOf[_from] >= _value);\n', '        balanceOf[_from] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '    }\n', '\n', '    /// @notice Withdraw `amount` to owner\n', '    /// @param amount amount to be withdrawn\n', '    function withdraw(uint256 amount) onlyOwner public {\n', '        require(address(this).balance >= amount);\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    /// @notice `Allow | Prevent` `target` from sending & receiving tokens\n', '    /// @param target Address to be allowed or not\n', '    /// @param approve either to allow it or not\n', '    function approveAccount(address target, bool approve) onlyAdmin public {\n', '        approvedAccount[target] = approve;\n', '        emit ApprovedAccount(target, approve);\n', '    }\n', '\n', '    /// @param newBid Price the users can sell to the contract\n', '    /// @param newAsk Price users can buy from the contract\n', '    function setPrices(uint256 newBid, uint256 newAsk) onlyAdmin public {\n', '        bid = newBid;\n', '        ask = newAsk;\n', '    }\n', '\n', '    /// fallback payable function\n', '    function () payable public {\n', '        buy();\n', '    }\n', '    \n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        require(ask > 0);\n', '        uint256 r = msg.value * (10 ** uint256(decimals));\n', '        require(r > msg.value);\n', '        _transfer(this, msg.sender, r / ask);\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        require(bid > 0);\n', '        require(amount * bid >= amount);\n', '        uint256 e = (amount * bid) / (10 ** uint256(decimals));\n', '        require(address(this).balance >= e);\n', '        _transfer(msg.sender, this, amount);\n', "        msg.sender.transfer(e);\t\t\t\t\t// sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']
