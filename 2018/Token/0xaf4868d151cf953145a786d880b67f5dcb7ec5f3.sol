['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is Ownable, StandardToken {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract Configurable {\n', '  uint256 public constant totalSaleLimit = 70000000;\n', '  uint256 public constant privateSaleLimit = 27300000;\n', '  uint256 public constant preSaleLimit = 38500000;\n', '  uint256 public constant saleLimit = 4200000;\n', '  uint256 public creationDate = now;\n', '  uint256 public constant teamLimit = 8000000;\n', '  uint256 teamReleased;\n', '  address public constant teamAddress = 0x7a615d4158202318750478432743cA615d0D83aF;\n', '}\n', '\n', 'contract Staged is Ownable, Configurable {\n', '  using SafeMath for uint256;\n', '  enum Stages {PrivateSale, PreSale, Sale}\n', '  Stages currentStage;\n', '  uint256 privateSale;\n', '  uint256 preSale;\n', '  uint256 sale;\n', '\n', '  function Staged() public {\n', '    currentStage = Stages.PrivateSale;\n', '  }\n', '\n', '  function setPrivateSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.PrivateSale;\n', '    return true;\n', '  }\n', '\n', '  function setPreSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.PreSale;\n', '    return true;\n', '  }\n', '\n', '  function setSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.Sale;\n', '    return true;\n', '  }\n', '\n', '  function tokensAmount(uint256 _wei) public view returns (uint256) {\n', '    if (_wei < 100000000000000000) return 0;\n', '    uint256 amount = _wei.mul(14005).div(1 ether);\n', '    if (currentStage == Stages.PrivateSale) {\n', '      if (_wei < 50000000000000000000) return 0;\n', '      if (_wei > 3000000000000000000000) return 0;\n', '      amount = amount.mul(130).div(100);\n', '      if (amount > privateSaleLimit.sub(privateSale)) return 0;\n', '    }\n', '    if (currentStage == Stages.PreSale) {\n', '      if (_wei > 30000000000000000000) return 0;\n', '      amount = amount.mul(110).div(100);\n', '      if (amount > preSaleLimit.sub(preSale)) return 0;\n', '    }\n', '    if (currentStage == Stages.Sale) {\n', '      if (amount > saleLimit.sub(sale)) return 0;\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  function addStageAmount(uint256 _amount) public {\n', '    if (currentStage == Stages.PrivateSale) {\n', '      require(_amount < privateSaleLimit.sub(privateSale)); \n', '      privateSale = privateSale.add(_amount);\n', '    }\n', '    if (currentStage == Stages.PreSale) {\n', '      require(_amount < preSaleLimit.sub(preSale));\n', '      privateSale = privateSale.add(_amount);\n', '    }\n', '    if (currentStage == Stages.Sale) {\n', '      require(_amount < saleLimit.sub(sale));\n', '      sale = sale.add(_amount);\n', '    }\n', '  }\n', '}\n', '\n', 'contract MintableToken is PausableToken, Configurable {\n', '   function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(totalSaleLimit.add(30000000) > totalSupply.add(_amount));\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(this), _to, _amount);\n', '    return true;\n', '  }  \n', '}\n', '\n', 'contract CrowdsaleToken is MintableToken, Staged {\n', '  function CrowdsaleToken() internal {\n', '    balances[owner] = 22000000; // bounty and marketing\n', '    totalSupply.add(22000000);\n', '  }\n', '  \n', '  function() public payable {\n', '    uint256 tokens = tokensAmount(msg.value);\n', '    require (tokens > 0);\n', '    addStageAmount(tokens);\n', '    owner.transfer(msg.value);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    emit Transfer(address(this), msg.sender, tokens);\n', '  }\n', '\n', '  function releaseTeamTokens() public {\n', '    uint256 timeSinceCreation = now.sub(creationDate);\n', '    uint256 teamTokens = timeSinceCreation.div(7776000).mul(1000000);\n', '    require (teamReleased < teamTokens);\n', '    teamTokens = teamTokens.sub(teamReleased);\n', '    if (teamReleased.add(teamTokens) > teamLimit) {\n', '      teamTokens = teamLimit.sub(teamReleased);\n', '    }\n', '    require (teamTokens > 0);\n', '    teamReleased = teamReleased.add(teamTokens);\n', '    balances[teamAddress] = balances[teamAddress].add(teamTokens);\n', '    totalSupply = totalSupply.add(teamTokens);\n', '    emit Transfer(address(this), teamAddress, teamTokens);\n', '  }\n', '}\n', '\n', 'contract WorkChain is CrowdsaleToken {   \n', '  string public constant name = "WorkChain";\n', '  string public constant symbol = "WCH";\n', '  uint32 public constant decimals = 0;\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is Ownable, StandardToken {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract Configurable {\n', '  uint256 public constant totalSaleLimit = 70000000;\n', '  uint256 public constant privateSaleLimit = 27300000;\n', '  uint256 public constant preSaleLimit = 38500000;\n', '  uint256 public constant saleLimit = 4200000;\n', '  uint256 public creationDate = now;\n', '  uint256 public constant teamLimit = 8000000;\n', '  uint256 teamReleased;\n', '  address public constant teamAddress = 0x7a615d4158202318750478432743cA615d0D83aF;\n', '}\n', '\n', 'contract Staged is Ownable, Configurable {\n', '  using SafeMath for uint256;\n', '  enum Stages {PrivateSale, PreSale, Sale}\n', '  Stages currentStage;\n', '  uint256 privateSale;\n', '  uint256 preSale;\n', '  uint256 sale;\n', '\n', '  function Staged() public {\n', '    currentStage = Stages.PrivateSale;\n', '  }\n', '\n', '  function setPrivateSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.PrivateSale;\n', '    return true;\n', '  }\n', '\n', '  function setPreSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.PreSale;\n', '    return true;\n', '  }\n', '\n', '  function setSale() public onlyOwner returns (bool) {\n', '    currentStage = Stages.Sale;\n', '    return true;\n', '  }\n', '\n', '  function tokensAmount(uint256 _wei) public view returns (uint256) {\n', '    if (_wei < 100000000000000000) return 0;\n', '    uint256 amount = _wei.mul(14005).div(1 ether);\n', '    if (currentStage == Stages.PrivateSale) {\n', '      if (_wei < 50000000000000000000) return 0;\n', '      if (_wei > 3000000000000000000000) return 0;\n', '      amount = amount.mul(130).div(100);\n', '      if (amount > privateSaleLimit.sub(privateSale)) return 0;\n', '    }\n', '    if (currentStage == Stages.PreSale) {\n', '      if (_wei > 30000000000000000000) return 0;\n', '      amount = amount.mul(110).div(100);\n', '      if (amount > preSaleLimit.sub(preSale)) return 0;\n', '    }\n', '    if (currentStage == Stages.Sale) {\n', '      if (amount > saleLimit.sub(sale)) return 0;\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  function addStageAmount(uint256 _amount) public {\n', '    if (currentStage == Stages.PrivateSale) {\n', '      require(_amount < privateSaleLimit.sub(privateSale)); \n', '      privateSale = privateSale.add(_amount);\n', '    }\n', '    if (currentStage == Stages.PreSale) {\n', '      require(_amount < preSaleLimit.sub(preSale));\n', '      privateSale = privateSale.add(_amount);\n', '    }\n', '    if (currentStage == Stages.Sale) {\n', '      require(_amount < saleLimit.sub(sale));\n', '      sale = sale.add(_amount);\n', '    }\n', '  }\n', '}\n', '\n', 'contract MintableToken is PausableToken, Configurable {\n', '   function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(totalSaleLimit.add(30000000) > totalSupply.add(_amount));\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(this), _to, _amount);\n', '    return true;\n', '  }  \n', '}\n', '\n', 'contract CrowdsaleToken is MintableToken, Staged {\n', '  function CrowdsaleToken() internal {\n', '    balances[owner] = 22000000; // bounty and marketing\n', '    totalSupply.add(22000000);\n', '  }\n', '  \n', '  function() public payable {\n', '    uint256 tokens = tokensAmount(msg.value);\n', '    require (tokens > 0);\n', '    addStageAmount(tokens);\n', '    owner.transfer(msg.value);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    emit Transfer(address(this), msg.sender, tokens);\n', '  }\n', '\n', '  function releaseTeamTokens() public {\n', '    uint256 timeSinceCreation = now.sub(creationDate);\n', '    uint256 teamTokens = timeSinceCreation.div(7776000).mul(1000000);\n', '    require (teamReleased < teamTokens);\n', '    teamTokens = teamTokens.sub(teamReleased);\n', '    if (teamReleased.add(teamTokens) > teamLimit) {\n', '      teamTokens = teamLimit.sub(teamReleased);\n', '    }\n', '    require (teamTokens > 0);\n', '    teamReleased = teamReleased.add(teamTokens);\n', '    balances[teamAddress] = balances[teamAddress].add(teamTokens);\n', '    totalSupply = totalSupply.add(teamTokens);\n', '    emit Transfer(address(this), teamAddress, teamTokens);\n', '  }\n', '}\n', '\n', 'contract WorkChain is CrowdsaleToken {   \n', '  string public constant name = "WorkChain";\n', '  string public constant symbol = "WCH";\n', '  uint32 public constant decimals = 0;\n', '}']
