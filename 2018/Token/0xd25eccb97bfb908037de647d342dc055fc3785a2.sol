['pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '\n', '/**\n', '* @title AccessControl\n', '* @notice This contract defines organizational roles and permissions.\n', '*/\n', 'contract AccessControl {\n', '    /**\n', '     * @notice ContractUpgrade is the event that will be emitted if we set a new contract address\n', '     */\n', '    event ContractUpgrade(address newContract);\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    /**\n', "     * @notice CEO's address FOOBAR\n", '     */\n', '    address public ceoAddress;\n', '\n', '    /**\n', "     * @notice CFO's address\n", '     */\n', '    address public cfoAddress;\n', '\n', '    /**\n', "     * @notice COO's address\n", '     */\n', '    address public cooAddress;\n', '\n', '    /**\n', '     * @notice withdrawal address\n', '     */\n', '    address public withdrawalAddress;\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by the CEO\n', '     */\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by the CFO\n', '     */\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by the COO\n', '     */\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by C-level execs\n', '     */\n', '    modifier onlyCLevel() {\n', '        require(\n', '        msg.sender == cooAddress ||\n', '        msg.sender == ceoAddress ||\n', '        msg.sender == cfoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by CEO or CFO\n', '     */\n', '    modifier onlyCEOOrCFO() {\n', '        require(\n', '        msg.sender == cfoAddress ||\n', '        msg.sender == ceoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function only callable by CEO or COO\n', '     */\n', '    modifier onlyCEOOrCOO() {\n', '        require(\n', '        msg.sender == cooAddress ||\n', '        msg.sender == ceoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets a new CEO\n', '     * @param _newCEO - the address of the new CEO\n', '     */\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets a new CFO\n', '     * @param _newCFO - the address of the new CFO\n', '     */\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets a new COO\n', '     * @param _newCOO - the address of the new COO\n', '     */\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice called by any C-level to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyCLevel whenNotPaused {\n', '        paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '     * @notice called by the CEO to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyCEO whenPaused {\n', '        paused = false;\n', '        emit Unpaused();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract LockToken is AccessControl {\n', '    mapping (address => uint256) private lockTokenNum;\n', '    mapping (address => uint256) private lockTokenTime;\n', '    \n', '    event SetLockTokenNum(address from,uint256 num);\n', '    event SetLockTokenTime(address from,uint256 time);\n', '    event SetLockTokenInfo(address from,uint256 num,uint256 time);\n', '\n', '    function setLockTokenNum (address from,uint256 num) public  whenNotPaused onlyCEO {\n', '        require(from != address(0));\n', '        lockTokenNum[from] = num;\n', '        emit SetLockTokenNum(from,num);\n', '    }\n', '    \n', '    function setLockTokenTime(address from,uint256 time) public whenNotPaused onlyCEO {\n', '        require(from != address(0));\n', '        lockTokenTime[from] = time;\n', '        emit SetLockTokenTime(from,time);\n', '    }\n', '    \n', '    function setLockTokenInfo(address from,uint256 num,uint256 time) public whenNotPaused onlyCEO {\n', '        require(from != address(0));\n', '        lockTokenNum[from] = num;\n', '        lockTokenTime[from] = time;\n', '        emit SetLockTokenInfo(from,num,time);\n', '    }\n', '    \n', '    \n', '    function setLockTokenInfoList (address[] froms,uint256[] nums, uint256[] times) public whenNotPaused onlyCEO {\n', '        for(uint256 i =0;i<froms.length ;i++ ){\n', '            require(froms[i] != address(0));\n', '            lockTokenNum[froms[i]] = nums[i];\n', '            lockTokenTime[froms[i]] = times[i];\n', '        }\n', '    }\n', '    \n', '    function getLockTokenNum (address from) public view returns (uint256) {\n', '        require(from != address(0));\n', '        return lockTokenNum[from];\n', '    }\n', '    \n', '    function getLockTokenTime(address from) public view returns (uint256) {\n', '        require(from != address(0));\n', '        return lockTokenTime[from];\n', '    }\n', '    \n', '    function getBlockTime() public view returns(uint256){\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20,LockToken{\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) public _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) public _allowed;\n', '\n', '  uint256 public _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view whenNotPaused\n', '    returns (uint256) \n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    uint256 time = getLockTokenTime(msg.sender);\n', '    uint256 blockTime = block.timestamp;\n', '    require(blockTime >time);\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '    require(spender != address(0));\n', '    uint256 time = getLockTokenTime(msg.sender);\n', '    uint256 blockTime = block.timestamp;\n', '    require(blockTime >time);\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '    uint256 time = getLockTokenTime(from);\n', '    uint256 blockTime = block.timestamp;\n', '    require(blockTime >time);\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title FTV\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `ERC20` functions.\n', ' */\n', 'contract FTV is ERC20 {\n', '\n', '  string public constant name = "fashion tv";\n', '  string public constant symbol = "FTV";\n', '  uint8 public constant decimals = 8;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  constructor() public {\n', '    paused =false;\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '    cfoAddress = msg.sender;\n', '    _mint(msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '}']