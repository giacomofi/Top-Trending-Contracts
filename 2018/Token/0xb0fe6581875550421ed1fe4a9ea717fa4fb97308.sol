['pragma solidity ^0.4.13;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return capReached || super.hasEnded();\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return withinCap && super.validPurchase();\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCappedCrowdsale is CappedCrowdsale, Ownable {\n', '\n', '    bool public isFinalized = false;\n', '    bool public reconciliationDateSet = false;\n', '    uint public reconciliationDate = 0;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', '    * work. Calls the contract&#39;s finalization function.\n', '    */\n', '    function finalize() onlyOwnerOrAfterReconciliation public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    function setReconciliationDate(uint _reconciliationDate) onlyOwner {\n', '        reconciliationDate = _reconciliationDate;\n', '        reconciliationDateSet = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {\n', '    }\n', '\n', '    modifier onlyOwnerOrAfterReconciliation(){\n', '        require(msg.sender == owner || (reconciliationDate <= now && reconciliationDateSet));\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract PoolSegregationCrowdsale is Ownable {\n', '    /**\n', '    * we include the crowdsale eventhough this is not treated in this contract (zeppelin&#39;s CappedCrowdsale )\n', '    */\n', '    enum POOLS {POOL_STRATEGIC_INVESTORS, POOL_COMPANY_RESERVE, POOL_USER_ADOPTION, POOL_TEAM, POOL_ADVISORS, POOL_PROMO}\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (uint => PoolInfo) poolMap;\n', '\n', '    struct PoolInfo {\n', '        uint contribution;\n', '        uint poolCap;\n', '    }\n', '\n', '    function PoolSegregationCrowdsale(uint _cap) {\n', '        poolMap[uint(POOLS.POOL_STRATEGIC_INVESTORS)] = PoolInfo(0, _cap.mul(285).div(1000));\n', '        poolMap[uint(POOLS.POOL_COMPANY_RESERVE)] = PoolInfo(0, _cap.mul(10).div(100));\n', '        poolMap[uint(POOLS.POOL_USER_ADOPTION)] = PoolInfo(0, _cap.mul(20).div(100));\n', '        poolMap[uint(POOLS.POOL_TEAM)] = PoolInfo(0, _cap.mul(3).div(100));\n', '        poolMap[uint(POOLS.POOL_ADVISORS)] = PoolInfo(0, _cap.mul(3).div(100));\n', '        poolMap[uint(POOLS.POOL_PROMO)] = PoolInfo(0, _cap.mul(3).div(100));\n', '    }\n', '\n', '    modifier onlyIfInPool(uint amount, uint poolId) {\n', '        PoolInfo poolInfo = poolMap[poolId];\n', '        require(poolInfo.contribution.add(amount) <= poolInfo.poolCap); \n', '        _;\n', '        poolInfo.contribution = poolInfo.contribution.add(amount);\n', '    }\n', '\n', '    function transferRemainingTokensToUserAdoptionPool(uint difference) internal {\n', '        poolMap[uint(POOLS.POOL_USER_ADOPTION)].poolCap = poolMap[uint(POOLS.POOL_USER_ADOPTION)].poolCap.add(difference);\n', '    }\n', '\n', '    function getPoolCapSize(uint poolId) public view returns(uint) {\n', '        return poolMap[poolId].poolCap;\n', '    }\n', '\n', '}\n', '\n', 'contract LuckCashCrowdsale is FinalizableCappedCrowdsale, PoolSegregationCrowdsale {\n', '\n', '    // whitelist registry contract\n', '    WhiteListRegistry public whitelistRegistry;\n', '    using SafeMath for uint;\n', '    uint constant public CAP = 600000000*1e18;\n', '    mapping (address => uint) contributions;\n', '\n', '    /**\n', '   * event for token vest fund launch\n', '   * @param beneficiary who will get the tokens once they are vested\n', '   * @param fund vest fund that will received the tokens\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '    event VestedTokensFor(address indexed beneficiary, address fund, uint256 tokenAmount);\n', '    /**\n', '    * event for finalize function call at the end of the crowdsale\n', '    */\n', '    event Finalized();    \n', '\n', '    /**\n', '   * event for token minting for private investors\n', '   * @param beneficiary who will get the tokens once they are vested\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '    event MintedTokensFor(address indexed beneficiary, uint256 tokenAmount);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _rate The token rate per ETH\n', '     * Percent value is saved in crowdsalePercent.\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _whiteListRegistry Address of the whitelist registry contract\n', '     */\n', '    function LuckCashCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _whiteListRegistry) public\n', '    CappedCrowdsale(CAP.mul(325).div(1000))\n', '    PoolSegregationCrowdsale(CAP)\n', '    FinalizableCappedCrowdsale()\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_whiteListRegistry != address(0));\n', '        whitelistRegistry = WhiteListRegistry(_whiteListRegistry);\n', '        LuckCashToken(token).pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates LuckCashToken contract. This is called on the Crowdsale contract constructor \n', '     */\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        return new LuckCashToken(CAP); // 600 million cap\n', '    }\n', '\n', '    /**\n', '     * @dev Mintes fresh token for a private investor.\n', '     * @param beneficiary The beneficiary of the minting\n', '     * @param amount The total token amount to be minted\n', '     */\n', '    function mintTokensFor(address beneficiary, uint256 amount, uint poolId) external onlyOwner onlyIfInPool(amount, poolId) {\n', '        require(beneficiary != address(0) && amount != 0);\n', '        // require(now <= endTime);\n', '\n', '        token.mint(beneficiary, amount);\n', '\n', '        MintedTokensFor(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a new contract for a vesting fund that will release funds for the beneficiary every quarter\n', '     * @param beneficiary The beneficiary of the funds\n', '     * @param amount The total token amount to be vested\n', '     * @param quarters The number of quarters over which the funds will vest. Every quarter a sum equal to amount.quarters will be release\n', '     */\n', '    function createVestFundFor(address beneficiary, uint256 amount, uint256 quarters, uint poolId) external onlyOwner onlyIfInPool(amount, poolId) {\n', '        require(beneficiary != address(0) && amount != 0);\n', '        require(quarters > 0);\n', '        // require(now <= endTime);\n', '\n', '        VestingFund fund = new VestingFund(beneficiary, endTime, quarters, token); // the vesting period starts when the crowdsale has ended\n', '        token.mint(fund, amount);\n', '\n', '        VestedTokensFor(beneficiary, fund, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev overrides Crowdsale#validPurchase to add whitelist logic\n', '     * @return true if buyers is able to buy at the moment\n', '     */\n', '    function validPurchase() internal view returns(bool) {\n', '        return super.validPurchase() && canContributeAmount(msg.sender, msg.value);\n', '    }\n', '\n', '    function transferFromCrowdsaleToUserAdoptionPool() public onlyOwner {\n', '        require(now > endTime);\n', '        \n', '        super.transferRemainingTokensToUserAdoptionPool(super.getTokenAmount(cap) - super.getTokenAmount(weiRaised));\n', '    }\n', '    \n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */ \n', '    function finalization() internal {\n', '        token.finishMinting();\n', '        LuckCashToken(token).unpause();\n', '\n', '        wallet.transfer(this.balance);\n', '\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev overrides Crowdsale#forwardFunds to report of funds transfer and not transfer into the wallet untill the end\n', '     */\n', '    function forwardFunds() internal {\n', '        reportContribution(msg.sender, msg.value);\n', '    }\n', '\n', '    function canContributeAmount(address _contributor, uint _amount) internal view returns (bool) {\n', '        uint totalAmount = contributions[_contributor].add(_amount);\n', '        return whitelistRegistry.isAmountAllowed(_contributor, totalAmount);  \n', '    }\n', '\n', '    function reportContribution(address _contributor, uint _amount) internal returns (bool) {\n', '       contributions[_contributor] = contributions[_contributor].add(_amount);\n', '    }\n', '\n', '}\n', '\n', 'contract VestingFund is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '  ERC20Basic public token;\n', '\n', '  uint256 public quarters;\n', '  uint256 public start;\n', '\n', '\n', '  uint256 public released;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, tokens are release in an incremental fashion after a quater has passed until _start + _quarters * 3 * months. \n', '   * By then all of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _quarters number of quarters the vesting will last\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function VestingFund(address _beneficiary, uint256 _start, uint256 _quarters, address _token) public {\n', '    \n', '    require(_beneficiary != address(0) && _token != address(0));\n', '    require(_quarters > 0);\n', '\n', '    beneficiary = _beneficiary;\n', '    quarters = _quarters;\n', '    start = _start;\n', '    token = ERC20Basic(_token);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function release() public {\n', '    uint256 unreleased = releasableAmount();\n', '    require(unreleased > 0);\n', '\n', '    released = released.add(unreleased);\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   */\n', '  function releasableAmount() public view returns(uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   */\n', '  function vestedAmount() public view returns(uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (now < start) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 dT = now.sub(start); // time passed since start\n', '    uint256 dQuarters = dT.div(90 days); // quarters passed\n', '\n', '    if (dQuarters >= quarters) {\n', '      return totalBalance; // return everything if vesting period ended\n', '    } else {\n', '      return totalBalance.mul(dQuarters).div(quarters); // ammount = total * (quarters passed / total quarters)\n', '    }\n', '  }\n', '}\n', '\n', 'contract WhiteListRegistry is Ownable {\n', '\n', '    mapping (address => WhiteListInfo) public whitelist;\n', '    using SafeMath for uint;\n', '\n', '    struct WhiteListInfo {\n', '        bool whiteListed;\n', '        uint minCap;\n', '        uint maxCap;\n', '    }\n', '\n', '    event AddedToWhiteList(\n', '        address contributor,\n', '        uint minCap,\n', '        uint maxCap\n', '    );\n', '\n', '    event RemovedFromWhiteList(\n', '        address _contributor\n', '    );\n', '\n', '    function addToWhiteList(address _contributor, uint _minCap, uint _maxCap) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        whitelist[_contributor] = WhiteListInfo(true, _minCap, _maxCap);\n', '        AddedToWhiteList(_contributor, _minCap, _maxCap);\n', '    }\n', '\n', '    function removeFromWhiteList(address _contributor) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        delete whitelist[_contributor];\n', '        RemovedFromWhiteList(_contributor);\n', '    }\n', '\n', '    function isWhiteListed(address _contributor) public view returns(bool) {\n', '        return whitelist[_contributor].whiteListed;\n', '    }\n', '\n', '    function isAmountAllowed(address _contributor, uint _amount) public view returns(bool) {\n', '       return whitelist[_contributor].maxCap >= _amount && whitelist[_contributor].minCap <= _amount && isWhiteListed(_contributor);\n', '    }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract LuckCashToken is PausableToken, CappedToken {\n', '    string public constant name = "LuckCash";\n', '    string public constant symbol = "LCK";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function LuckCashToken(uint _cap) public CappedToken(_cap) PausableToken() {\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return capReached || super.hasEnded();\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return withinCap && super.validPurchase();\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCappedCrowdsale is CappedCrowdsale, Ownable {\n', '\n', '    bool public isFinalized = false;\n', '    bool public reconciliationDateSet = false;\n', '    uint public reconciliationDate = 0;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwnerOrAfterReconciliation public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    function setReconciliationDate(uint _reconciliationDate) onlyOwner {\n', '        reconciliationDate = _reconciliationDate;\n', '        reconciliationDateSet = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {\n', '    }\n', '\n', '    modifier onlyOwnerOrAfterReconciliation(){\n', '        require(msg.sender == owner || (reconciliationDate <= now && reconciliationDateSet));\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract PoolSegregationCrowdsale is Ownable {\n', '    /**\n', "    * we include the crowdsale eventhough this is not treated in this contract (zeppelin's CappedCrowdsale )\n", '    */\n', '    enum POOLS {POOL_STRATEGIC_INVESTORS, POOL_COMPANY_RESERVE, POOL_USER_ADOPTION, POOL_TEAM, POOL_ADVISORS, POOL_PROMO}\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (uint => PoolInfo) poolMap;\n', '\n', '    struct PoolInfo {\n', '        uint contribution;\n', '        uint poolCap;\n', '    }\n', '\n', '    function PoolSegregationCrowdsale(uint _cap) {\n', '        poolMap[uint(POOLS.POOL_STRATEGIC_INVESTORS)] = PoolInfo(0, _cap.mul(285).div(1000));\n', '        poolMap[uint(POOLS.POOL_COMPANY_RESERVE)] = PoolInfo(0, _cap.mul(10).div(100));\n', '        poolMap[uint(POOLS.POOL_USER_ADOPTION)] = PoolInfo(0, _cap.mul(20).div(100));\n', '        poolMap[uint(POOLS.POOL_TEAM)] = PoolInfo(0, _cap.mul(3).div(100));\n', '        poolMap[uint(POOLS.POOL_ADVISORS)] = PoolInfo(0, _cap.mul(3).div(100));\n', '        poolMap[uint(POOLS.POOL_PROMO)] = PoolInfo(0, _cap.mul(3).div(100));\n', '    }\n', '\n', '    modifier onlyIfInPool(uint amount, uint poolId) {\n', '        PoolInfo poolInfo = poolMap[poolId];\n', '        require(poolInfo.contribution.add(amount) <= poolInfo.poolCap); \n', '        _;\n', '        poolInfo.contribution = poolInfo.contribution.add(amount);\n', '    }\n', '\n', '    function transferRemainingTokensToUserAdoptionPool(uint difference) internal {\n', '        poolMap[uint(POOLS.POOL_USER_ADOPTION)].poolCap = poolMap[uint(POOLS.POOL_USER_ADOPTION)].poolCap.add(difference);\n', '    }\n', '\n', '    function getPoolCapSize(uint poolId) public view returns(uint) {\n', '        return poolMap[poolId].poolCap;\n', '    }\n', '\n', '}\n', '\n', 'contract LuckCashCrowdsale is FinalizableCappedCrowdsale, PoolSegregationCrowdsale {\n', '\n', '    // whitelist registry contract\n', '    WhiteListRegistry public whitelistRegistry;\n', '    using SafeMath for uint;\n', '    uint constant public CAP = 600000000*1e18;\n', '    mapping (address => uint) contributions;\n', '\n', '    /**\n', '   * event for token vest fund launch\n', '   * @param beneficiary who will get the tokens once they are vested\n', '   * @param fund vest fund that will received the tokens\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '    event VestedTokensFor(address indexed beneficiary, address fund, uint256 tokenAmount);\n', '    /**\n', '    * event for finalize function call at the end of the crowdsale\n', '    */\n', '    event Finalized();    \n', '\n', '    /**\n', '   * event for token minting for private investors\n', '   * @param beneficiary who will get the tokens once they are vested\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '    event MintedTokensFor(address indexed beneficiary, uint256 tokenAmount);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _rate The token rate per ETH\n', '     * Percent value is saved in crowdsalePercent.\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _whiteListRegistry Address of the whitelist registry contract\n', '     */\n', '    function LuckCashCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _whiteListRegistry) public\n', '    CappedCrowdsale(CAP.mul(325).div(1000))\n', '    PoolSegregationCrowdsale(CAP)\n', '    FinalizableCappedCrowdsale()\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_whiteListRegistry != address(0));\n', '        whitelistRegistry = WhiteListRegistry(_whiteListRegistry);\n', '        LuckCashToken(token).pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates LuckCashToken contract. This is called on the Crowdsale contract constructor \n', '     */\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        return new LuckCashToken(CAP); // 600 million cap\n', '    }\n', '\n', '    /**\n', '     * @dev Mintes fresh token for a private investor.\n', '     * @param beneficiary The beneficiary of the minting\n', '     * @param amount The total token amount to be minted\n', '     */\n', '    function mintTokensFor(address beneficiary, uint256 amount, uint poolId) external onlyOwner onlyIfInPool(amount, poolId) {\n', '        require(beneficiary != address(0) && amount != 0);\n', '        // require(now <= endTime);\n', '\n', '        token.mint(beneficiary, amount);\n', '\n', '        MintedTokensFor(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a new contract for a vesting fund that will release funds for the beneficiary every quarter\n', '     * @param beneficiary The beneficiary of the funds\n', '     * @param amount The total token amount to be vested\n', '     * @param quarters The number of quarters over which the funds will vest. Every quarter a sum equal to amount.quarters will be release\n', '     */\n', '    function createVestFundFor(address beneficiary, uint256 amount, uint256 quarters, uint poolId) external onlyOwner onlyIfInPool(amount, poolId) {\n', '        require(beneficiary != address(0) && amount != 0);\n', '        require(quarters > 0);\n', '        // require(now <= endTime);\n', '\n', '        VestingFund fund = new VestingFund(beneficiary, endTime, quarters, token); // the vesting period starts when the crowdsale has ended\n', '        token.mint(fund, amount);\n', '\n', '        VestedTokensFor(beneficiary, fund, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev overrides Crowdsale#validPurchase to add whitelist logic\n', '     * @return true if buyers is able to buy at the moment\n', '     */\n', '    function validPurchase() internal view returns(bool) {\n', '        return super.validPurchase() && canContributeAmount(msg.sender, msg.value);\n', '    }\n', '\n', '    function transferFromCrowdsaleToUserAdoptionPool() public onlyOwner {\n', '        require(now > endTime);\n', '        \n', '        super.transferRemainingTokensToUserAdoptionPool(super.getTokenAmount(cap) - super.getTokenAmount(weiRaised));\n', '    }\n', '    \n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */ \n', '    function finalization() internal {\n', '        token.finishMinting();\n', '        LuckCashToken(token).unpause();\n', '\n', '        wallet.transfer(this.balance);\n', '\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev overrides Crowdsale#forwardFunds to report of funds transfer and not transfer into the wallet untill the end\n', '     */\n', '    function forwardFunds() internal {\n', '        reportContribution(msg.sender, msg.value);\n', '    }\n', '\n', '    function canContributeAmount(address _contributor, uint _amount) internal view returns (bool) {\n', '        uint totalAmount = contributions[_contributor].add(_amount);\n', '        return whitelistRegistry.isAmountAllowed(_contributor, totalAmount);  \n', '    }\n', '\n', '    function reportContribution(address _contributor, uint _amount) internal returns (bool) {\n', '       contributions[_contributor] = contributions[_contributor].add(_amount);\n', '    }\n', '\n', '}\n', '\n', 'contract VestingFund is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '  ERC20Basic public token;\n', '\n', '  uint256 public quarters;\n', '  uint256 public start;\n', '\n', '\n', '  uint256 public released;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, tokens are release in an incremental fashion after a quater has passed until _start + _quarters * 3 * months. \n', '   * By then all of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _quarters number of quarters the vesting will last\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function VestingFund(address _beneficiary, uint256 _start, uint256 _quarters, address _token) public {\n', '    \n', '    require(_beneficiary != address(0) && _token != address(0));\n', '    require(_quarters > 0);\n', '\n', '    beneficiary = _beneficiary;\n', '    quarters = _quarters;\n', '    start = _start;\n', '    token = ERC20Basic(_token);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function release() public {\n', '    uint256 unreleased = releasableAmount();\n', '    require(unreleased > 0);\n', '\n', '    released = released.add(unreleased);\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   */\n', '  function releasableAmount() public view returns(uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   */\n', '  function vestedAmount() public view returns(uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (now < start) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 dT = now.sub(start); // time passed since start\n', '    uint256 dQuarters = dT.div(90 days); // quarters passed\n', '\n', '    if (dQuarters >= quarters) {\n', '      return totalBalance; // return everything if vesting period ended\n', '    } else {\n', '      return totalBalance.mul(dQuarters).div(quarters); // ammount = total * (quarters passed / total quarters)\n', '    }\n', '  }\n', '}\n', '\n', 'contract WhiteListRegistry is Ownable {\n', '\n', '    mapping (address => WhiteListInfo) public whitelist;\n', '    using SafeMath for uint;\n', '\n', '    struct WhiteListInfo {\n', '        bool whiteListed;\n', '        uint minCap;\n', '        uint maxCap;\n', '    }\n', '\n', '    event AddedToWhiteList(\n', '        address contributor,\n', '        uint minCap,\n', '        uint maxCap\n', '    );\n', '\n', '    event RemovedFromWhiteList(\n', '        address _contributor\n', '    );\n', '\n', '    function addToWhiteList(address _contributor, uint _minCap, uint _maxCap) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        whitelist[_contributor] = WhiteListInfo(true, _minCap, _maxCap);\n', '        AddedToWhiteList(_contributor, _minCap, _maxCap);\n', '    }\n', '\n', '    function removeFromWhiteList(address _contributor) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        delete whitelist[_contributor];\n', '        RemovedFromWhiteList(_contributor);\n', '    }\n', '\n', '    function isWhiteListed(address _contributor) public view returns(bool) {\n', '        return whitelist[_contributor].whiteListed;\n', '    }\n', '\n', '    function isAmountAllowed(address _contributor, uint _amount) public view returns(bool) {\n', '       return whitelist[_contributor].maxCap >= _amount && whitelist[_contributor].minCap <= _amount && isWhiteListed(_contributor);\n', '    }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract LuckCashToken is PausableToken, CappedToken {\n', '    string public constant name = "LuckCash";\n', '    string public constant symbol = "LCK";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function LuckCashToken(uint _cap) public CappedToken(_cap) PausableToken() {\n', '\n', '    }\n', '}']
