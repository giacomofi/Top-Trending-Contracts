['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract FootCoin {\n', '    // Variáveis públicas do token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 8 casas decimais\n', '    uint256 public totalSupply;\n', '\n', '    // Criação de uma matriz com todos os saldos\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // Geração de um evento público no blockchain que notificará os clientes\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // Notificação aos clientes sobre a quantidade queimada\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Função Constrctor\n', '     *\n', '     * Inicializa o contrato com número inicial dos tokens para o criador do contrato\n', '     */\n', '    function FootCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Atualiza a oferta total com os valores decimais\n', '        balanceOf[msg.sender] = totalSupply;                // Envia ao criador todos os tokens iniciais\n', '        name = tokenName;                                   // Define o nome para fins de exibição\n', '        symbol = tokenSymbol;                               //  Definir o símbolo para fins de exibição\n', '    }\n', '\n', '    /**\n', '     * Transferência interna, só pode ser chamada por este contrato\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Impede a transferência para o endereço 0x0\n', '        require(_to != 0x0);\n', '        // Verifica o saldo do remetente\n', '        require(balanceOf[_from] >= _value);\n', '        // Verifica overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Guarda para conferência futura\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtrai do remetente\n', '        balanceOf[_from] -= _value;\n', '        // Adiciona o mesmo valor ao destinatário\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Verificação usada para usar a análise estática do contrato, elas nunca devem falhar\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transferência dos tokens\n', '     *\n', '     * Envio `_value` tokens para `_to` da sua conta\n', '     *\n', '     * @param _to O endereço do destinatário\n', '     * @param _value O valor a enviar\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    /**\n', '     * Destruição dos Tokens\n', '     *\n', '     * Remove `_value` tokens do sistema irreversivelmente\n', '     *\n', '     * @param _value O valor a ser queimado\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Verifique se tem o suficiente\n', '        balanceOf[msg.sender] -= _value;            // Subtrair do remetente\n', '        totalSupply -= _value;                      // Atualiza o totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']