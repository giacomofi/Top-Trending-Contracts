['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Arcturus is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "Arcturus star";\n', '    string public symbol = "ARC";\n', '\t\n', '    string public constant description = "Arcturus is a red giant of spectral type K0IIIâ€”an ageing star around 7.1 billion years old that has used up its core hydrogen and moved off the main sequence. It is 1.08 times as massive as the Sun, but has expanded to 25.4 times its diameter and is around 170 times as luminous.";\n', '\t\n', '    uint public decimals = 2;\n', '\tuint public constant INITIAL_SUPPLY = 1000000000 * 10**2 ;\n', '\n', '\t/* Distributors */\n', '    mapping (address => bool) public distributors;\n', '\t/* Distributors amount */\n', '    mapping (address => uint) private distributorsAmount;\n', '\t\n', '\taddress[] public distributorsList;\n', '\n', '    bool public byuoutActive;\n', '    uint public byuoutCount;\n', '    uint public priceForBasePart;\n', '\n', '    function Arcturus() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '\n', '\t/* Token can receive ETH */\n', '    function() external payable {\n', '\n', '    }\n', '\n', '\t/* define who can transfer Tokens: owner and distributors */\n', '    modifier canTransfer() {\n', '        require(distributors[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\t\n', '\t/* set distributor for address: state true/false = on/off distributing */\n', '    function setDistributor(address distributor, bool state, uint amount) external onlyOwner{\n', '\t\tdistributorsList.push(distributor);\n', '        distributors[distributor] = state;\n', '\t\t/* new */\n', '        distributorsAmount[distributor] = amount;\n', '    }\n', '\t/* set distributor for address: state true/false = on/off distributing */\n', '    function setDistributorAmount(address distributor, bool state, uint amount) external onlyOwner{\n', '        distributors[distributor] = state;\n', '        distributorsAmount[distributor] = amount;\n', '    }\n', '\t\n', '\t\n', '\t/* buyout mode is set to flag "status" value, true/false */\n', '    function setByuoutActive(bool status) public onlyOwner {\n', '        byuoutActive = status;\n', '    }\n', '\n', '\t/* set Max token count to buyout */\n', '    function setByuoutCount(uint count) public onlyOwner {\n', '        byuoutCount = count;\n', '    }\n', '\n', '\t/* set Token base-part prise in "wei" */\n', '    function setPriceForBasePart(uint newPriceForBasePart) public onlyOwner {\n', '        priceForBasePart = newPriceForBasePart;\n', '    }\n', '\n', '\t/* send Tokens to any investor by owner or distributor */\n', '    function sendToInvestor(address investor, uint value) public canTransfer {\n', '        require(investor != 0x0 && value > 0);\n', '        require(value <= balances[owner]);\n', '\n', '\t\t/* new */\n', '\t\trequire(distributorsAmount[msg.sender] >= value && value > 0);\n', '\t\tdistributorsAmount[msg.sender] = distributorsAmount[msg.sender].sub(value);\n', '\t\t\n', '        balances[owner] = balances[owner].sub(value);\n', '        balances[investor] = balances[investor].add(value);\n', '        addTokenHolder(investor);\n', '        Transfer(owner, investor, value);\n', '    }\n', '\n', '\t/* transfer method, with byuout */\n', '    function transfer(address to, uint value) public returns (bool success) {\n', '        require(to != 0x0 && value > 0);\n', '\n', '        if(to == owner && byuoutActive && byuoutCount > 0){\n', '            uint bonus = 0 ;\n', '            if(value > byuoutCount){\n', '                bonus = byuoutCount.mul(priceForBasePart);\n', '                byuoutCount = 0;\n', '            }else{\n', '                bonus = value.mul(priceForBasePart);\n', '                byuoutCount = byuoutCount.sub(value);\n', '            }\n', '            msg.sender.transfer(bonus);\n', '        }\n', '\n', '        addTokenHolder(to);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '        require(to != 0x0 && value > 0);\n', '        addTokenHolder(to);\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /* Token holders */\n', '\n', '    mapping(uint => address) public indexedTokenHolders;\n', '    mapping(address => uint) public tokenHolders;\n', '    uint public tokenHoldersCount = 0;\n', '\n', '    function addTokenHolder(address investor) private {\n', '        if(investor != owner && indexedTokenHolders[0] != investor && tokenHolders[investor] == 0){\n', '            tokenHolders[investor] = tokenHoldersCount;\n', '            indexedTokenHolders[tokenHoldersCount] = investor;\n', '            tokenHoldersCount ++;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Arcturus is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "Arcturus star";\n', '    string public symbol = "ARC";\n', '\t\n', '    string public constant description = "Arcturus is a red giant of spectral type K0IIIâ€”an ageing star around 7.1 billion years old that has used up its core hydrogen and moved off the main sequence. It is 1.08 times as massive as the Sun, but has expanded to 25.4 times its diameter and is around 170 times as luminous.";\n', '\t\n', '    uint public decimals = 2;\n', '\tuint public constant INITIAL_SUPPLY = 1000000000 * 10**2 ;\n', '\n', '\t/* Distributors */\n', '    mapping (address => bool) public distributors;\n', '\t/* Distributors amount */\n', '    mapping (address => uint) private distributorsAmount;\n', '\t\n', '\taddress[] public distributorsList;\n', '\n', '    bool public byuoutActive;\n', '    uint public byuoutCount;\n', '    uint public priceForBasePart;\n', '\n', '    function Arcturus() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '\n', '\t/* Token can receive ETH */\n', '    function() external payable {\n', '\n', '    }\n', '\n', '\t/* define who can transfer Tokens: owner and distributors */\n', '    modifier canTransfer() {\n', '        require(distributors[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\t\n', '\t/* set distributor for address: state true/false = on/off distributing */\n', '    function setDistributor(address distributor, bool state, uint amount) external onlyOwner{\n', '\t\tdistributorsList.push(distributor);\n', '        distributors[distributor] = state;\n', '\t\t/* new */\n', '        distributorsAmount[distributor] = amount;\n', '    }\n', '\t/* set distributor for address: state true/false = on/off distributing */\n', '    function setDistributorAmount(address distributor, bool state, uint amount) external onlyOwner{\n', '        distributors[distributor] = state;\n', '        distributorsAmount[distributor] = amount;\n', '    }\n', '\t\n', '\t\n', '\t/* buyout mode is set to flag "status" value, true/false */\n', '    function setByuoutActive(bool status) public onlyOwner {\n', '        byuoutActive = status;\n', '    }\n', '\n', '\t/* set Max token count to buyout */\n', '    function setByuoutCount(uint count) public onlyOwner {\n', '        byuoutCount = count;\n', '    }\n', '\n', '\t/* set Token base-part prise in "wei" */\n', '    function setPriceForBasePart(uint newPriceForBasePart) public onlyOwner {\n', '        priceForBasePart = newPriceForBasePart;\n', '    }\n', '\n', '\t/* send Tokens to any investor by owner or distributor */\n', '    function sendToInvestor(address investor, uint value) public canTransfer {\n', '        require(investor != 0x0 && value > 0);\n', '        require(value <= balances[owner]);\n', '\n', '\t\t/* new */\n', '\t\trequire(distributorsAmount[msg.sender] >= value && value > 0);\n', '\t\tdistributorsAmount[msg.sender] = distributorsAmount[msg.sender].sub(value);\n', '\t\t\n', '        balances[owner] = balances[owner].sub(value);\n', '        balances[investor] = balances[investor].add(value);\n', '        addTokenHolder(investor);\n', '        Transfer(owner, investor, value);\n', '    }\n', '\n', '\t/* transfer method, with byuout */\n', '    function transfer(address to, uint value) public returns (bool success) {\n', '        require(to != 0x0 && value > 0);\n', '\n', '        if(to == owner && byuoutActive && byuoutCount > 0){\n', '            uint bonus = 0 ;\n', '            if(value > byuoutCount){\n', '                bonus = byuoutCount.mul(priceForBasePart);\n', '                byuoutCount = 0;\n', '            }else{\n', '                bonus = value.mul(priceForBasePart);\n', '                byuoutCount = byuoutCount.sub(value);\n', '            }\n', '            msg.sender.transfer(bonus);\n', '        }\n', '\n', '        addTokenHolder(to);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '        require(to != 0x0 && value > 0);\n', '        addTokenHolder(to);\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /* Token holders */\n', '\n', '    mapping(uint => address) public indexedTokenHolders;\n', '    mapping(address => uint) public tokenHolders;\n', '    uint public tokenHoldersCount = 0;\n', '\n', '    function addTokenHolder(address investor) private {\n', '        if(investor != owner && indexedTokenHolders[0] != investor && tokenHolders[investor] == 0){\n', '            tokenHolders[investor] = tokenHoldersCount;\n', '            indexedTokenHolders[tokenHoldersCount] = investor;\n', '            tokenHoldersCount ++;\n', '        }\n', '    }\n', '}']
