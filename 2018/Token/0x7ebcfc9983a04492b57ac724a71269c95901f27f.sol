['pragma solidity ^0.4.24;\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public {\n', '    owner = 0x587c04e40346171dE18341fc9027395c3FdA83ab;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract PublicAirdrop is Ownable {\n', '  ERC20 public token = ERC20(0xe64A15389a64118a34408E0c4e18B2ECE6Ad2a2c);\n', '  function airdrop(address[] recipient, uint256[] amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount[i]);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '  function airdropToSubscribers(address[] recipient, uint256 amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '}']