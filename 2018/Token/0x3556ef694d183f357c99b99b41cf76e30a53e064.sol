['pragma solidity ^0.4.17;\n', '\n', 'library SafeCalc {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Migrations {\n', '  address public owner;\n', '  uint public last_completed_migration;\n', '\n', '  modifier restricted() {\n', '    if (msg.sender == owner) _;\n', '  }\n', '\n', '  function Migrations() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setCompleted(uint completed) public restricted {\n', '    last_completed_migration = completed;\n', '  }\n', '\n', '  function upgrade(address new_address) public restricted {\n', '    Migrations upgraded = Migrations(new_address);\n', '    upgraded.setCompleted(last_completed_migration);\n', '  }\n', '}\n', '\n', 'contract ERC20Standard {\n', '\n', '\n', '    // total amount of tokens\n', '    function totalSupply() public constant returns (uint256) ;\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '}\n', '\n', 'contract ERC20StandardToken is ERC20Standard {\n', '    using SafeCalc for uint256;\n', '\n', '    /*\n', '     *  ERC20StandardToken\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '\n', '    function transfer(address to, uint256 value) public returns (bool){\n', '        require(to !=address(0));\n', '\n', '        balances[msg.sender]=balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender,to,value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool){\n', '        require(to != address(0));\n', '\n', '        var allowanceAmount = allowances[from][msg.sender];\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowances[from][msg.sender] = allowanceAmount.sub(value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool){\n', '        require((value == 0) || (allowances[msg.sender][spender] == 0));\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256){\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public constant returns (uint256){\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', 'contract TongToken is ERC20StandardToken, Ownable {\n', '\n', '    // token information\n', '    string public constant name = "Tong Token";\n', '    string public constant symbol = "Tong";\n', '    uint256 public constant decimals = 18;\n', '    uint TotalTokenSupply=2100*(10**8)* (10**decimals);\n', '\n', '     function totalSupply() public constant returns (uint256 ) {\n', '          return TotalTokenSupply;\n', '      }\n', '\n', '    /// transfer all tokens to holders\n', '    address public constant MAIN_HOLDER_ADDR=0x48B7995cA6C311add45071D2267d97a46Aa02a0A;\n', '\n', '\n', '    function TongToken() public onlyOwner{\n', '        balances[MAIN_HOLDER_ADDR]+=TotalTokenSupply;\n', '        Transfer(0,MAIN_HOLDER_ADDR,TotalTokenSupply);\n', '      }\n', '\t  \n', '\t \n', '\t  \n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'library SafeCalc {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Migrations {\n', '  address public owner;\n', '  uint public last_completed_migration;\n', '\n', '  modifier restricted() {\n', '    if (msg.sender == owner) _;\n', '  }\n', '\n', '  function Migrations() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setCompleted(uint completed) public restricted {\n', '    last_completed_migration = completed;\n', '  }\n', '\n', '  function upgrade(address new_address) public restricted {\n', '    Migrations upgraded = Migrations(new_address);\n', '    upgraded.setCompleted(last_completed_migration);\n', '  }\n', '}\n', '\n', 'contract ERC20Standard {\n', '\n', '\n', '    // total amount of tokens\n', '    function totalSupply() public constant returns (uint256) ;\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '}\n', '\n', 'contract ERC20StandardToken is ERC20Standard {\n', '    using SafeCalc for uint256;\n', '\n', '    /*\n', '     *  ERC20StandardToken\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '\n', '    function transfer(address to, uint256 value) public returns (bool){\n', '        require(to !=address(0));\n', '\n', '        balances[msg.sender]=balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender,to,value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool){\n', '        require(to != address(0));\n', '\n', '        var allowanceAmount = allowances[from][msg.sender];\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowances[from][msg.sender] = allowanceAmount.sub(value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool){\n', '        require((value == 0) || (allowances[msg.sender][spender] == 0));\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256){\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public constant returns (uint256){\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', 'contract TongToken is ERC20StandardToken, Ownable {\n', '\n', '    // token information\n', '    string public constant name = "Tong Token";\n', '    string public constant symbol = "Tong";\n', '    uint256 public constant decimals = 18;\n', '    uint TotalTokenSupply=2100*(10**8)* (10**decimals);\n', '\n', '     function totalSupply() public constant returns (uint256 ) {\n', '          return TotalTokenSupply;\n', '      }\n', '\n', '    /// transfer all tokens to holders\n', '    address public constant MAIN_HOLDER_ADDR=0x48B7995cA6C311add45071D2267d97a46Aa02a0A;\n', '\n', '\n', '    function TongToken() public onlyOwner{\n', '        balances[MAIN_HOLDER_ADDR]+=TotalTokenSupply;\n', '        Transfer(0,MAIN_HOLDER_ADDR,TotalTokenSupply);\n', '      }\n', '\t  \n', '\t \n', '\t  \n', '}']
