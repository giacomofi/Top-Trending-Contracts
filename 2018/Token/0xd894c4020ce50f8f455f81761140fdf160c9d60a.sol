['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit onOwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Lockable\n', ' * @dev Base contract which allows to implement an emergency stop mechanism.\n', ' */\n', 'contract Lockable is Ownable {\n', '    event onLock();\n', '\n', '    bool public locked = false;\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not locked.\n', '     */\n', '    modifier whenNotLocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to set lock state, triggers stop/continue state\n', '     */\n', '    function setLock(bool _value) onlyOwner public {\n', '        locked = _value;\n', '        emit onLock();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function actualCap() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Lockable {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    uint256 actualCap_;\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev actual CAP\n', '     */\n', '    function actualCap() public view returns (uint256) {\n', '        return actualCap_;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        //owner can do even locked\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    event onMint(address indexed to, uint256 amount);\n', '    event onSetMintable();\n', '\n', '    bool public mintable = true;\n', '\n', '    modifier canMint() {\n', '        require(mintable);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner whenNotLocked canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit onMint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop/continue minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setMintable(bool _value) onlyOwner public returns (bool) {\n', '        mintable = _value;\n', '        emit onSetMintable();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '    event onBurn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) whenNotLocked public returns (bool)  {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        actualCap_ = actualCap_.sub(_value);\n', '        emit onBurn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Dropable\n', ' * @dev Base contract which allows to implement air drop mechanism.\n', ' */\n', 'contract DropableToken is MintableToken {\n', '    event onSetDropable();\n', '    event onSetDropAmount();\n', '\n', '    bool public dropable = false;\n', '    uint256 dropAmount_ = 100000 * (10 ** uint256(decimals)); // 0.00001% per drop\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is dropable.\n', '     */\n', '    modifier whenDropable() {\n', '        require(dropable);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev called by the owner to set dropable\n', '     */\n', '    function setDropable(bool _value) onlyOwner public {\n', '        dropable = _value;\n', '        emit onSetDropable();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to set default airdrop amount\n', '    */\n', '    function setDropAmount(uint256 _value) onlyOwner public {\n', '        dropAmount_ = _value;\n', '        emit onSetDropAmount();\n', '    }\n', '\n', '    /**\n', '     * @dev called by anyone to get the drop amount\n', '     */\n', '    function getDropAmount() public view returns (uint256) {\n', '        return dropAmount_;\n', '    }\n', '\n', '    /*batch airdrop functions*/\n', '    function airdropWithAmount(address [] _recipients, uint256 _value) onlyOwner canMint whenDropable external {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            address recipient = _recipients[i];\n', '            require(totalSupply_.add(_value) <= actualCap_);\n', '            mint(recipient, _value);\n', '        }\n', '    }\n', '\n', '    function airdrop(address [] _recipients) onlyOwner canMint whenDropable external {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            address recipient = _recipients[i];\n', '            require(totalSupply_.add(dropAmount_) <= actualCap_);\n', '            mint(recipient, dropAmount_);\n', '        }\n', '    }\n', '\n', '    /*get airdrop function*/\n', '    //one can get airdrop by themselves as long as they are willing to pay gas\n', '    function getAirdrop() whenNotLocked canMint whenDropable external returns (bool) {\n', '        require(totalSupply_.add(dropAmount_) <= actualCap_);\n', '        mint(msg.sender, dropAmount_);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Purchasable token\n', ' */\n', 'contract PurchasableToken is StandardToken {\n', '    event onPurchase(address indexed to, uint256 etherAmount, uint256 tokenAmount);\n', '    event onSetPurchasable();\n', '    event onSetTokenPrice();\n', '    event onWithdraw(address to, uint256 amount);\n', '\n', '    bool public purchasable = true;\n', '    uint256 tokenPrice_ = 0.0000000001 ether;\n', '    uint256 etherAmount_;\n', '\n', '    modifier canPurchase() {\n', '        require(purchasable);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to purchase tokens\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function purchase() whenNotLocked canPurchase public payable returns (bool) {\n', '        uint256 ethAmount = msg.value;\n', '        uint256 tokenAmount = ethAmount.div(tokenPrice_).mul(10 ** uint256(decimals));\n', '        require(totalSupply_.add(tokenAmount) <= actualCap_);\n', '        totalSupply_ = totalSupply_.add(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '        etherAmount_ = etherAmount_.add(ethAmount);\n', '        emit onPurchase(msg.sender, ethAmount, tokenAmount);\n', '        emit Transfer(address(0), msg.sender, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop/continue purchase new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setPurchasable(bool _value) onlyOwner public returns (bool) {\n', '        purchasable = _value;\n', '        emit onSetPurchasable();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to set default airdrop amount\n', '     */\n', '    function setTokenPrice(uint256 _value) onlyOwner public {\n', '        tokenPrice_ = _value;\n', '        emit onSetTokenPrice();\n', '    }\n', '\n', '    /**\n', '     * @dev called by anyone to get the token price for purchase\n', '     */\n', '    function getTokenPrice() public view returns (uint256) {\n', '        return tokenPrice_;\n', '    }\n', '\n', '    /**\n', '     * Withdraw the amount of ethers from the contract if any\n', '     */\n', '    function withdraw(uint256 _amountOfEthers) onlyOwner public returns (bool){\n', '        address ownerAddress = msg.sender;\n', '        require(etherAmount_>=_amountOfEthers);\n', '        ownerAddress.transfer(_amountOfEthers);\n', '        etherAmount_ = etherAmount_.sub(_amountOfEthers);\n', '        emit onWithdraw(ownerAddress, _amountOfEthers);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract RBTToken is DropableToken, BurnableToken, PurchasableToken {\n', '    string public name = "RBT - a flexible token which can be rebranded";\n', '    string public symbol = "RBT";\n', '    string public version = &#39;1.0&#39;;\n', '    string public desc = "";\n', '    uint256 constant CAP = 100000000000 * (10 ** uint256(decimals)); // total\n', '    uint256 constant STARTUP = 100000000 * (10 ** uint256(decimals)); // 0.1% startup\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender the STARTUP tokens.\n', '     */\n', '    function RBTToken() public {\n', '        mint(msg.sender, STARTUP);\n', '        actualCap_ = CAP;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH, fallback function\n', '    // ------------------------------------------------------------------------\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setVersion(string _version) onlyOwner public {\n', '        version = _version;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setDesc(string _desc) onlyOwner public {\n', '        desc = _desc;\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        if (approve(_spender, _value)) {\n', '            //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '            //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '            //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '            if (!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {revert();}\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* Approves and then calls the contract code*/\n', '    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        if (approve(_spender, _value)) {\n', '            //Call the contract code\n', '            if (!_spender.call(_extraData)) {revert();}\n', '            return true;\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit onOwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Lockable\n', ' * @dev Base contract which allows to implement an emergency stop mechanism.\n', ' */\n', 'contract Lockable is Ownable {\n', '    event onLock();\n', '\n', '    bool public locked = false;\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not locked.\n', '     */\n', '    modifier whenNotLocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to set lock state, triggers stop/continue state\n', '     */\n', '    function setLock(bool _value) onlyOwner public {\n', '        locked = _value;\n', '        emit onLock();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function actualCap() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Lockable {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    uint256 actualCap_;\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev actual CAP\n', '     */\n', '    function actualCap() public view returns (uint256) {\n', '        return actualCap_;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        //owner can do even locked\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(!locked || msg.sender == owner);\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    event onMint(address indexed to, uint256 amount);\n', '    event onSetMintable();\n', '\n', '    bool public mintable = true;\n', '\n', '    modifier canMint() {\n', '        require(mintable);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner whenNotLocked canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit onMint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop/continue minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setMintable(bool _value) onlyOwner public returns (bool) {\n', '        mintable = _value;\n', '        emit onSetMintable();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '    event onBurn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) whenNotLocked public returns (bool)  {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        actualCap_ = actualCap_.sub(_value);\n', '        emit onBurn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Dropable\n', ' * @dev Base contract which allows to implement air drop mechanism.\n', ' */\n', 'contract DropableToken is MintableToken {\n', '    event onSetDropable();\n', '    event onSetDropAmount();\n', '\n', '    bool public dropable = false;\n', '    uint256 dropAmount_ = 100000 * (10 ** uint256(decimals)); // 0.00001% per drop\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is dropable.\n', '     */\n', '    modifier whenDropable() {\n', '        require(dropable);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev called by the owner to set dropable\n', '     */\n', '    function setDropable(bool _value) onlyOwner public {\n', '        dropable = _value;\n', '        emit onSetDropable();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to set default airdrop amount\n', '    */\n', '    function setDropAmount(uint256 _value) onlyOwner public {\n', '        dropAmount_ = _value;\n', '        emit onSetDropAmount();\n', '    }\n', '\n', '    /**\n', '     * @dev called by anyone to get the drop amount\n', '     */\n', '    function getDropAmount() public view returns (uint256) {\n', '        return dropAmount_;\n', '    }\n', '\n', '    /*batch airdrop functions*/\n', '    function airdropWithAmount(address [] _recipients, uint256 _value) onlyOwner canMint whenDropable external {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            address recipient = _recipients[i];\n', '            require(totalSupply_.add(_value) <= actualCap_);\n', '            mint(recipient, _value);\n', '        }\n', '    }\n', '\n', '    function airdrop(address [] _recipients) onlyOwner canMint whenDropable external {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            address recipient = _recipients[i];\n', '            require(totalSupply_.add(dropAmount_) <= actualCap_);\n', '            mint(recipient, dropAmount_);\n', '        }\n', '    }\n', '\n', '    /*get airdrop function*/\n', '    //one can get airdrop by themselves as long as they are willing to pay gas\n', '    function getAirdrop() whenNotLocked canMint whenDropable external returns (bool) {\n', '        require(totalSupply_.add(dropAmount_) <= actualCap_);\n', '        mint(msg.sender, dropAmount_);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Purchasable token\n', ' */\n', 'contract PurchasableToken is StandardToken {\n', '    event onPurchase(address indexed to, uint256 etherAmount, uint256 tokenAmount);\n', '    event onSetPurchasable();\n', '    event onSetTokenPrice();\n', '    event onWithdraw(address to, uint256 amount);\n', '\n', '    bool public purchasable = true;\n', '    uint256 tokenPrice_ = 0.0000000001 ether;\n', '    uint256 etherAmount_;\n', '\n', '    modifier canPurchase() {\n', '        require(purchasable);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to purchase tokens\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function purchase() whenNotLocked canPurchase public payable returns (bool) {\n', '        uint256 ethAmount = msg.value;\n', '        uint256 tokenAmount = ethAmount.div(tokenPrice_).mul(10 ** uint256(decimals));\n', '        require(totalSupply_.add(tokenAmount) <= actualCap_);\n', '        totalSupply_ = totalSupply_.add(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '        etherAmount_ = etherAmount_.add(ethAmount);\n', '        emit onPurchase(msg.sender, ethAmount, tokenAmount);\n', '        emit Transfer(address(0), msg.sender, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop/continue purchase new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setPurchasable(bool _value) onlyOwner public returns (bool) {\n', '        purchasable = _value;\n', '        emit onSetPurchasable();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to set default airdrop amount\n', '     */\n', '    function setTokenPrice(uint256 _value) onlyOwner public {\n', '        tokenPrice_ = _value;\n', '        emit onSetTokenPrice();\n', '    }\n', '\n', '    /**\n', '     * @dev called by anyone to get the token price for purchase\n', '     */\n', '    function getTokenPrice() public view returns (uint256) {\n', '        return tokenPrice_;\n', '    }\n', '\n', '    /**\n', '     * Withdraw the amount of ethers from the contract if any\n', '     */\n', '    function withdraw(uint256 _amountOfEthers) onlyOwner public returns (bool){\n', '        address ownerAddress = msg.sender;\n', '        require(etherAmount_>=_amountOfEthers);\n', '        ownerAddress.transfer(_amountOfEthers);\n', '        etherAmount_ = etherAmount_.sub(_amountOfEthers);\n', '        emit onWithdraw(ownerAddress, _amountOfEthers);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract RBTToken is DropableToken, BurnableToken, PurchasableToken {\n', '    string public name = "RBT - a flexible token which can be rebranded";\n', '    string public symbol = "RBT";\n', "    string public version = '1.0';\n", '    string public desc = "";\n', '    uint256 constant CAP = 100000000000 * (10 ** uint256(decimals)); // total\n', '    uint256 constant STARTUP = 100000000 * (10 ** uint256(decimals)); // 0.1% startup\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender the STARTUP tokens.\n', '     */\n', '    function RBTToken() public {\n', '        mint(msg.sender, STARTUP);\n', '        actualCap_ = CAP;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH, fallback function\n", '    // ------------------------------------------------------------------------\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setVersion(string _version) onlyOwner public {\n', '        version = _version;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setDesc(string _desc) onlyOwner public {\n', '        desc = _desc;\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        if (approve(_spender, _value)) {\n', "            //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '            //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '            //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '            if (!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {revert();}\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* Approves and then calls the contract code*/\n', '    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        if (approve(_spender, _value)) {\n', '            //Call the contract code\n', '            if (!_spender.call(_extraData)) {revert();}\n', '            return true;\n', '        }\n', '    }\n', '\n', '}']
