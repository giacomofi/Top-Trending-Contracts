['pragma solidity ^0.4.24;\n', '\n', '//____________________________________________________________________________________\n', '//\n', '//  Welcome to Steganograph!\n', '//____________________________________________________________________________________|\n', '\n', '\n', '\n', 'contract Steganograph\n', '{\n', '\n', '\n', '    address     owner = 0x12C3Fd99ab45Bd806128E96062dc5A6C273d8AF6;\n', '\n', '\n', '    string      public standard = &#39;Token 0.1&#39;;\n', '    string      public name = &#39;Steganograph&#39;; \n', '    string      public symbol = &#39;PHY&#39;;\n', '    uint8       public decimals = 3; \n', '    uint256     public totalSupply = 1168000000000;\n', '    \n', '\n', '    mapping (address => uint256) balances;  \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    modifier ownerOnly() \n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }       \n', '\n', '\n', '    // We might change the token name only in case of emergency\n', '    // ____________________________________________________________________________________\n', '    function changeName(string _name) public ownerOnly returns(bool success) \n', '    {\n', '\n', '        name = _name;\n', '        emit NameChange(name);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // We might change the token symbol only in case of emergency\n', '    // ____________________________________________________________________________________\n', '    function changeSymbol(string _symbol) public ownerOnly returns(bool success) \n', '    {\n', '\n', '        symbol = _symbol;\n', '        emit SymbolChange(symbol);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // Use it to get your real PHY balance\n', '    // ____________________________________________________________________________________\n', '    function balanceOf(address _owner) public constant returns(uint256 tokens) \n', '    {\n', '\n', '        return balances[_owner];\n', '    }\n', '    \n', '\n', '    // Use it to transfer PHY to another address\n', '    // ____________________________________________________________________________________\n', '    function transfer(address _to, uint256 _value) public returns(bool success)\n', '    { \n', '\n', '        require(_value > 0 && balances[msg.sender] >= _value);\n', '\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // How much someone allows you to transfer from his/her address\n', '    // ____________________________________________________________________________________\n', '    function canTransferFrom(address _owner, address _spender) public constant returns(uint256 tokens) \n', '    {\n', '\n', '        require(_owner != 0x0 && _spender != 0x0);\n', '        \n', '\n', '        if (_owner == _spender)\n', '        {\n', '            return balances[_owner];\n', '        }\n', '        else \n', '        {\n', '            return allowed[_owner][_spender];\n', '        }\n', '    }\n', '\n', '    \n', '    // Transfer allowed amount of PHY tokens from another address\n', '    // ____________________________________________________________________________________\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) \n', '    {\n', '\n', '        require(_value > 0 && _from != 0x0 &&\n', '                allowed[_from][msg.sender] >= _value && \n', '                balances[_from] >= _value);\n', '                \n', '\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        balances[_to] += _value;    \n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    \n', '    // Allow someone transfer PHY tokens from your address\n', '    // ____________________________________________________________________________________\n', '    function approve(address _spender, uint256 _value) public returns(bool success)  \n', '    {\n', '\n', '        require(_spender != 0x0 && _spender != msg.sender);\n', '\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // Token constructor\n', '    // ____________________________________________________________________________________\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '        emit TokenDeployed(totalSupply);\n', '    }\n', '\n', '\n', '    // ====================================================================================\n', '    //\n', '    // List of all events\n', '\n', '    event NameChange(string _name);\n', '    event SymbolChange(string _symbol);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event TokenDeployed(uint256 _totalSupply);\n', '\n', '}']