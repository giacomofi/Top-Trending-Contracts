['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '    \n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '    \n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y; \n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '    \n', '}\n', '\n', 'contract Token {\n', '     /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256  balance);\n', '    \n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token ,SafeMath{\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSubtract(balances[msg.sender],_value);\n', '            balances[_to] = safeAdd(balances[_to],_value) ;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value) ;\n', '            balances[_from] = safeSubtract(balances[_from],_value) ;\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender],_value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '       emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract POCCToken is StandardToken  {\n', '    // metadata\n', '    string  public constant name = "POCC Token";\n', '    string  public constant symbol = "POCC";                                \n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '    uint256 public tokenExchangeRate = 80000;                              // 80000  tokens per 1 ETH\n', '    \n', '    address public owner; //owner\n', '    \n', '    // events \n', '    event DecreaseSupply(uint256 _value);\n', '\n', '    // constructor\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '        totalSupply = safeMult(10000000000,10 ** decimals);\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', '     /// @dev decrease the token&#39;s supply\n', '    function decreaseSupply (uint256 _value) onlyOwner  public{\n', '        if (balances[owner] < _value)  revert();\n', '        uint256 value = safeMult(_value , 10 ** decimals);\n', '        balances[owner] = safeSubtract(balances[owner],value);\n', '        totalSupply = safeSubtract(totalSupply, value);\n', '        emit DecreaseSupply(value);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '    \n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '    \n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y; \n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '    \n', '}\n', '\n', 'contract Token {\n', '     /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256  balance);\n', '    \n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token ,SafeMath{\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSubtract(balances[msg.sender],_value);\n', '            balances[_to] = safeAdd(balances[_to],_value) ;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value) ;\n', '            balances[_from] = safeSubtract(balances[_from],_value) ;\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender],_value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '       emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract POCCToken is StandardToken  {\n', '    // metadata\n', '    string  public constant name = "POCC Token";\n', '    string  public constant symbol = "POCC";                                \n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '    uint256 public tokenExchangeRate = 80000;                              // 80000  tokens per 1 ETH\n', '    \n', '    address public owner; //owner\n', '    \n', '    // events \n', '    event DecreaseSupply(uint256 _value);\n', '\n', '    // constructor\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '        totalSupply = safeMult(10000000000,10 ** decimals);\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', "     /// @dev decrease the token's supply\n", '    function decreaseSupply (uint256 _value) onlyOwner  public{\n', '        if (balances[owner] < _value)  revert();\n', '        uint256 value = safeMult(_value , 10 ** decimals);\n', '        balances[owner] = safeSubtract(balances[owner],value);\n', '        totalSupply = safeSubtract(totalSupply, value);\n', '        emit DecreaseSupply(value);\n', '    }\n', '    \n', '}']
