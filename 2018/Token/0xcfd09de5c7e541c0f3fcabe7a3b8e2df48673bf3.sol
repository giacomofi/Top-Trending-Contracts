['pragma solidity 0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    \n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Whitelisted contract\n', '// ----------------------------------------------------------------------------\n', 'contract Whitelist is Owned {\n', '    mapping (address => WElement) public whitelist;\n', '    mapping (address => RWElement) public regulatorWhitelist;\n', '    \n', '    event LogAddressEnabled(address indexed who);\n', '    event LogAddressDisabled(address indexed who);\n', '    event LogRegulatorEnabled(address indexed who);\n', '    event LogRegulatorDisabled(address indexed who);\n', '    \n', '    struct WElement{\n', '        bool enable;\n', '        address regulator;\n', '    }\n', '    \n', '    struct RWElement{\n', '        bool enable;\n', '        string name;\n', '    }\n', '    \n', '    modifier onlyWhitelisted() {\n', '        whitelisted(msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyRegulator() {\n', '        require(regulatorWhitelist[msg.sender].enable);\n', '        _;\n', '    }\n', '    \n', '    function whitelisted(address who) view internal{\n', '        require(whitelist[who].enable);\n', '        require(regulatorWhitelist[whitelist[who].regulator].enable);\n', '    }\n', '    \n', '    function enableRegulator(address who, string _name) onlyOwner public returns (bool success){\n', '        require(who!=address(0));\n', '        require(who!=address(this));\n', '        regulatorWhitelist[who].enable = true;\n', '        regulatorWhitelist[who].name = _name;\n', '        emit LogRegulatorEnabled(who);\n', '        return true;\n', '    }\n', '    \n', '    function disableRegulator(address who) onlyOwner public returns (bool success){\n', '        require(who!=owner);\n', '        regulatorWhitelist[who].enable = false;\n', '        emit LogRegulatorDisabled(who);\n', '        return true;\n', '    }\n', '    \n', '    //un regulator pu&#242; abilitare un address di un altro regulator? --> per noi NO\n', '    function enableAddress(address who) onlyRegulator public returns (bool success){\n', '        require(who!=address(0));\n', '        require(who!=address(this));\n', '        whitelist[who].enable = true;\n', '        whitelist[who].regulator = msg.sender;\n', '        emit LogAddressEnabled(who);\n', '        return true;\n', '    }\n', '    //un regulator pu&#242; disabilitare un address di un altro regulator?\n', '    function disableAddress(address who) onlyRegulator public returns (bool success){\n', '        require(who!=owner);\n', '        require(whitelist[who].regulator != address(0));\n', '        whitelist[who].enable = false;\n', '        emit LogAddressDisabled(who);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Marcellocoin is ERC20Interface, Whitelist{\n', '    using SafeMath for uint256;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 _totalSupply;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '\n', '    function Marcellocoin() public {\n', '        symbol = "MARCI";\n', '        name = "Marcellocoin is the future";\n', '        decimals = 10;\n', '        _totalSupply = 500000000 * 10**uint256(decimals);\n', '        balances[owner] = _totalSupply;\n', '        \n', '        enableRegulator(owner, "Marcellocoin Owner");\n', '        enableAddress(owner);\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) onlyWhitelisted public returns (bool success){\n', '        whitelisted(to);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) onlyWhitelisted public returns (bool success) {\n', '        whitelisted(spender);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) onlyWhitelisted public returns (bool success) {\n', '        whitelisted(from);\n', '        whitelisted(to);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    \n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Whitelisted contract\n', '// ----------------------------------------------------------------------------\n', 'contract Whitelist is Owned {\n', '    mapping (address => WElement) public whitelist;\n', '    mapping (address => RWElement) public regulatorWhitelist;\n', '    \n', '    event LogAddressEnabled(address indexed who);\n', '    event LogAddressDisabled(address indexed who);\n', '    event LogRegulatorEnabled(address indexed who);\n', '    event LogRegulatorDisabled(address indexed who);\n', '    \n', '    struct WElement{\n', '        bool enable;\n', '        address regulator;\n', '    }\n', '    \n', '    struct RWElement{\n', '        bool enable;\n', '        string name;\n', '    }\n', '    \n', '    modifier onlyWhitelisted() {\n', '        whitelisted(msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyRegulator() {\n', '        require(regulatorWhitelist[msg.sender].enable);\n', '        _;\n', '    }\n', '    \n', '    function whitelisted(address who) view internal{\n', '        require(whitelist[who].enable);\n', '        require(regulatorWhitelist[whitelist[who].regulator].enable);\n', '    }\n', '    \n', '    function enableRegulator(address who, string _name) onlyOwner public returns (bool success){\n', '        require(who!=address(0));\n', '        require(who!=address(this));\n', '        regulatorWhitelist[who].enable = true;\n', '        regulatorWhitelist[who].name = _name;\n', '        emit LogRegulatorEnabled(who);\n', '        return true;\n', '    }\n', '    \n', '    function disableRegulator(address who) onlyOwner public returns (bool success){\n', '        require(who!=owner);\n', '        regulatorWhitelist[who].enable = false;\n', '        emit LogRegulatorDisabled(who);\n', '        return true;\n', '    }\n', '    \n', '    //un regulator può abilitare un address di un altro regulator? --> per noi NO\n', '    function enableAddress(address who) onlyRegulator public returns (bool success){\n', '        require(who!=address(0));\n', '        require(who!=address(this));\n', '        whitelist[who].enable = true;\n', '        whitelist[who].regulator = msg.sender;\n', '        emit LogAddressEnabled(who);\n', '        return true;\n', '    }\n', '    //un regulator può disabilitare un address di un altro regulator?\n', '    function disableAddress(address who) onlyRegulator public returns (bool success){\n', '        require(who!=owner);\n', '        require(whitelist[who].regulator != address(0));\n', '        whitelist[who].enable = false;\n', '        emit LogAddressDisabled(who);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Marcellocoin is ERC20Interface, Whitelist{\n', '    using SafeMath for uint256;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 _totalSupply;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '\n', '    function Marcellocoin() public {\n', '        symbol = "MARCI";\n', '        name = "Marcellocoin is the future";\n', '        decimals = 10;\n', '        _totalSupply = 500000000 * 10**uint256(decimals);\n', '        balances[owner] = _totalSupply;\n', '        \n', '        enableRegulator(owner, "Marcellocoin Owner");\n', '        enableAddress(owner);\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) onlyWhitelisted public returns (bool success){\n', '        whitelisted(to);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) onlyWhitelisted public returns (bool success) {\n', '        whitelisted(spender);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) onlyWhitelisted public returns (bool success) {\n', '        whitelisted(from);\n', '        whitelisted(to);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '}']
