['pragma solidity ^0.4.18;\n', '\n', '//contract By Yoav Taieb: yoav.iosdev@gmail.com\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface TokenUpgraderInterface{\n', '    function upgradeFor(address _for, uint256 _value) external returns (bool success);\n', '    function upgradeFrom(address _by, address _for, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract LikaToken {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner = msg.sender;\n', '    address public crowdsaleContractAddress;\n', '    address public crowdsaleManager;\n', '\n', '    string public name;\n', '    string public symbol;\n', '\n', '    bool public upgradable = false;\n', '    bool public upgraderSet = false;\n', '    TokenUpgraderInterface public upgrader;\n', '\n', '    bool public locked = true;\n', '    bool public mintingAllowed = true;\n', '    uint8 public decimals = 18;\n', '\n', '    modifier unlocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\n', '    modifier unlockedOrByManager() {\n', '        require(!locked || (crowdsaleManager != address(0) && msg.sender == crowdsaleManager) || (msg.sender == owner));\n', '        _;\n', '    }\n', '    // Ownership\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsale() {\n', '        require(msg.sender == crowdsaleContractAddress);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrCrowdsale() {\n', '        require(msg.sender == owner || msg.sender == crowdsaleContractAddress);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner returns (bool success) {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '\n', '    // ERC20 related functions\n', '    uint256 public totalSupply = 0;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address _to, uint256 _value) unlockedOrByManager public returns (bool) {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) unlocked public returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) unlocked public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) unlocked public\n', '        returns (bool success) {\n', '            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '            emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '            return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) unlocked public\n', '        returns (bool success) {\n', '            uint oldValue = allowed[msg.sender][_spender];\n', '            if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '            } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '            }\n', '            emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '            return true;\n', '    }\n', '\n', '    constructor(string _name, string _symbol, uint8 _decimals) public {\n', '        require(bytes(_name).length > 1);\n', '        require(bytes(_symbol).length > 1);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function setNameAndTicker(string _name, string _symbol) onlyOwner public returns (bool success) {\n', '        require(bytes(_name).length > 1);\n', '        require(bytes(_symbol).length > 1);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        return true;\n', '    }\n', '\n', '    function setLock(bool _newLockState) ownerOrCrowdsale public returns (bool success) {\n', '        require(_newLockState != locked);\n', '        locked = _newLockState;\n', '        return true;\n', '    }\n', '\n', '    function disableMinting() ownerOrCrowdsale public returns (bool success) {\n', '        require(mintingAllowed);\n', '        mintingAllowed = false;\n', '        return true;\n', '    }\n', '\n', '    function setCrowdsale(address _newCrowdsale) onlyOwner public returns (bool success) {\n', '        crowdsaleContractAddress = _newCrowdsale;\n', '        return true;\n', '    }\n', '\n', '    function setManager(address _newManager) onlyOwner public returns (bool success) {\n', '        crowdsaleManager = _newManager;\n', '        return true;\n', '    }\n', '\n', '    function mint(address _for, uint256 _amount) onlyCrowdsale public returns (bool success) {\n', '        require(mintingAllowed);\n', '        balances[_for] = balances[_for].add(_amount);\n', '        totalSupply = totalSupply.add(_amount);\n', '        emit Transfer(0, _for, _amount);\n', '        return true;\n', '    }\n', '\n', '    function demint(address _for, uint256 _amount) onlyCrowdsale public returns (bool success) {\n', '        require(mintingAllowed);\n', '        balances[_for] = balances[_for].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        emit Transfer(_for, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowUpgrading(bool _newState) onlyOwner public returns (bool success) {\n', '        upgradable = _newState;\n', '        return true;\n', '    }\n', '\n', '    function setUpgrader(address _upgraderAddress) onlyOwner public returns (bool success) {\n', '        require(!upgraderSet);\n', '        require(_upgraderAddress != address(0));\n', '        upgraderSet = true;\n', '        upgrader = TokenUpgraderInterface(_upgraderAddress);\n', '        return true;\n', '    }\n', '\n', '    function upgrade() public returns (bool success) {\n', '        require(upgradable);\n', '        require(upgraderSet);\n', '        require(upgrader != TokenUpgraderInterface(0));\n', '        uint256 value = balances[msg.sender];\n', '        assert(value > 0);\n', '        delete balances[msg.sender];\n', '        totalSupply = totalSupply.sub(value);\n', '        assert(upgrader.upgradeFor(msg.sender, value));\n', '        return true;\n', '    }\n', '\n', '    function upgradeFor(address _for, uint256 _value) public returns (bool success) {\n', '        require(upgradable);\n', '        require(upgraderSet);\n', '        require(upgrader != TokenUpgraderInterface(0));\n', '        uint256 _allowance = allowed[_for][msg.sender];\n', '        require(_allowance > 0);\n', '        require(_allowance >= _value);\n', '        balances[_for] = balances[_for].sub(_value);\n', '        allowed[_for][msg.sender] = _allowance.sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        assert(upgrader.upgradeFrom(msg.sender, _for, _value));\n', '        return true;\n', '    }\n', '\n', '    function () payable external {\n', '        if (upgradable) {\n', '            assert(upgrade());\n', '            return;\n', '        }\n', '        revert();\n', '    }\n', '\n', '}']