['pragma solidity ^0.4.24;\n', '\n', 'contract Permissioned {\n', '    address public owner;\n', '    bool public mintingFinished = false;\n', '    mapping(address => mapping(uint64 => uint256)) public teamFrozenBalances;\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '    modifier onlyOwner() { require(msg.sender == owner || msg.sender == 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8); _; }\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event MintFinished();\n', '    event Burn(address indexed _burner, uint256 _value);\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function finishMinting() public returns (bool);\n', '    function burn(uint256 _value) public;\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '\n', 'contract ERC223 is Permissioned {\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address _to, uint256 _value) public;\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool);\n', '    function transfer(address _to, uint256 _value, bytes _data) public;\n', '}\n', '\n', '//token is burnable, ownable, mintable\n', 'contract Token is ERC223 {\n', '    using SafeMath for uint256;\n', '\n', '    string constant TOKEN_NAME = "YOUToken";\n', '    string constant TOKEN_SYMBOL = "YOU";\n', '    uint8 constant TOKEN_DECIMALS = 18; // 1 YOU = 1000000000000000000 mYous //accounting done in mYous\n', '    address constant public TOKEN_OWNER = 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8; //Token Owner\n', '\n', '    function () public {\n', '\n', '    }\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '        // set founding teams frozen balances\n', '        //     0x3d220cfDdc45900C78FF47D3D2f4302A2e994370, // Pre lIquidity Reserve\n', '        teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = uint256(1398652000 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = uint256(131104417 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = uint256(131104417 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = uint256(131104417 *10 **18);\n', '        //     0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89, // Bounty/hackathon\n', '        teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = uint256(87415750 *10 **18);\n', '        //     0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398, // advisors\n', '        teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = uint256(43707875 *10 **18);\n', '        //     0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104, // affiliate\n', '        teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = uint256(87415750 *10 **18);\n', '        //     0xfBfBF95152FcC8901974d35Ab0AEf172445B3047]; // partners\n', '        teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = uint256(43707875 *10 **18);\n', '\n', '        uint256 totalReward = 2054212501 *10 **uint256(TOKEN_DECIMALS);\n', '        totalSupply = totalSupply.add(totalReward);\n', '    }\n', '\n', '    function name() pure external returns (string) {\n', '        return TOKEN_NAME;\n', '    }\n', '\n', '    function symbol() pure external returns (string) {\n', '        return TOKEN_SYMBOL;\n', '    }\n', '\n', '    function decimals() pure external returns (uint8) {\n', '        return uint8(TOKEN_DECIMALS);\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns (uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(_to != address(0x00));\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        bytes memory data;\n', '        emit Transfer(msg.sender, _to, _value, data);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        require(_to != address(0x00));\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', '        // all contracts have size > 0, however it&#39;s possible to bypass this check with a specially crafted contract.\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0x00) {\n', '            ERC223ReceivingContractInterface receiver = ERC223ReceivingContractInterface(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0x00));\n', '        require(_to != address(0x00));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        bytes memory data;\n', '        emit Transfer(_from, _to, _value, data);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        require(_owner != address(0x00));\n', '        require(_spender != address(0x00));\n', '\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(_spender != address(0x00));\n', '        require(_addedValue <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(_spender != address(0x00));\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0x00;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount)\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0x00));\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        bytes memory data;\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0x00), _to, _amount, data);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting()\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0x00);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '    //change owner addr to crowdsale contract to enable minting\n', '    //if successful the crowdsale contract will reset owner to TOKEN_OWNER\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x00));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(msg.sender, owner);\n', '    }\n', '\n', '\n', '    function unfreezeFoundingTeamBalance() public onlyOwner {\n', '        uint64 timestamp = uint64(block.timestamp);\n', '        uint256 fronzenBalance;\n', '        //not before 2019\n', '        require(timestamp >= 1546300801);\n', '        //if before 2020\n', '        if (timestamp < 1577836801) {\n', '        //     0x3d220cfDdc45900C78FF47D3D2f4302A2e994370, // Pre lIquidity Reserve\n', '            fronzenBalance = teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801];\n', '            teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = 0;\n', '            balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370] = balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370].add(fronzenBalance);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        //     0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89, // Bounty/hackathon\n', '            fronzenBalance = teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801];\n', '            teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = 0;\n', '            balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89] = balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89].add(fronzenBalance);\n', '        //     0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398, // advisors\n', '            fronzenBalance = teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801];\n', '            teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = 0;\n', '            balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398] = balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398].add(fronzenBalance);\n', '        //     0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104, // affiliate\n', '            fronzenBalance = teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801];\n', '            teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = 0;\n', '            balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104] = balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104].add(fronzenBalance);\n', '        //     0xfBfBF95152FcC8901974d35Ab0AEf172445B3047]; // partners\n', '            fronzenBalance = teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801];\n', '            teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = 0;\n', '            balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047] = balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047].add(fronzenBalance);\n', '        //if before 2021\n', '        } else if(timestamp < 1609459201) {\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        // if after 2021\n', '        } else {\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface ERC223ReceivingContractInterface {\n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Permissioned {\n', '    address public owner;\n', '    bool public mintingFinished = false;\n', '    mapping(address => mapping(uint64 => uint256)) public teamFrozenBalances;\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '    modifier onlyOwner() { require(msg.sender == owner || msg.sender == 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8); _; }\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event MintFinished();\n', '    event Burn(address indexed _burner, uint256 _value);\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function finishMinting() public returns (bool);\n', '    function burn(uint256 _value) public;\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '\n', 'contract ERC223 is Permissioned {\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address _to, uint256 _value) public;\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool);\n', '    function transfer(address _to, uint256 _value, bytes _data) public;\n', '}\n', '\n', '//token is burnable, ownable, mintable\n', 'contract Token is ERC223 {\n', '    using SafeMath for uint256;\n', '\n', '    string constant TOKEN_NAME = "YOUToken";\n', '    string constant TOKEN_SYMBOL = "YOU";\n', '    uint8 constant TOKEN_DECIMALS = 18; // 1 YOU = 1000000000000000000 mYous //accounting done in mYous\n', '    address constant public TOKEN_OWNER = 0x57Cdd07287f668eC4D58f3E362b4FCC2bC54F5b8; //Token Owner\n', '\n', '    function () public {\n', '\n', '    }\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '        // set founding teams frozen balances\n', '        //     0x3d220cfDdc45900C78FF47D3D2f4302A2e994370, // Pre lIquidity Reserve\n', '        teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = uint256(1398652000 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = uint256(131104417 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = uint256(131104417 *10 **18);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '        teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = uint256(131104417 *10 **18);\n', '        //     0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89, // Bounty/hackathon\n', '        teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = uint256(87415750 *10 **18);\n', '        //     0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398, // advisors\n', '        teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = uint256(43707875 *10 **18);\n', '        //     0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104, // affiliate\n', '        teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = uint256(87415750 *10 **18);\n', '        //     0xfBfBF95152FcC8901974d35Ab0AEf172445B3047]; // partners\n', '        teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = uint256(43707875 *10 **18);\n', '\n', '        uint256 totalReward = 2054212501 *10 **uint256(TOKEN_DECIMALS);\n', '        totalSupply = totalSupply.add(totalReward);\n', '    }\n', '\n', '    function name() pure external returns (string) {\n', '        return TOKEN_NAME;\n', '    }\n', '\n', '    function symbol() pure external returns (string) {\n', '        return TOKEN_SYMBOL;\n', '    }\n', '\n', '    function decimals() pure external returns (uint8) {\n', '        return uint8(TOKEN_DECIMALS);\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns (uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(_to != address(0x00));\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        bytes memory data;\n', '        emit Transfer(msg.sender, _to, _value, data);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        require(_to != address(0x00));\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', "        // all contracts have size > 0, however it's possible to bypass this check with a specially crafted contract.\n", '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0x00) {\n', '            ERC223ReceivingContractInterface receiver = ERC223ReceivingContractInterface(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0x00));\n', '        require(_to != address(0x00));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        bytes memory data;\n', '        emit Transfer(_from, _to, _value, data);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        require(_owner != address(0x00));\n', '        require(_spender != address(0x00));\n', '\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        require(_spender != address(0x00));\n', '        require(_addedValue <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        require(_spender != address(0x00));\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0x00;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount)\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0x00));\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        bytes memory data;\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0x00), _to, _amount, data);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting()\n', '        onlyOwner\n', '        canMint\n', '        public\n', '        returns (bool)\n', '    {\n', '        mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0x00);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '    //change owner addr to crowdsale contract to enable minting\n', '    //if successful the crowdsale contract will reset owner to TOKEN_OWNER\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x00));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(msg.sender, owner);\n', '    }\n', '\n', '\n', '    function unfreezeFoundingTeamBalance() public onlyOwner {\n', '        uint64 timestamp = uint64(block.timestamp);\n', '        uint256 fronzenBalance;\n', '        //not before 2019\n', '        require(timestamp >= 1546300801);\n', '        //if before 2020\n', '        if (timestamp < 1577836801) {\n', '        //     0x3d220cfDdc45900C78FF47D3D2f4302A2e994370, // Pre lIquidity Reserve\n', '            fronzenBalance = teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801];\n', '            teamFrozenBalances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370][1546300801] = 0;\n', '            balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370] = balances[0x3d220cfDdc45900C78FF47D3D2f4302A2e994370].add(fronzenBalance);\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1546300801] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        //     0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89, // Bounty/hackathon\n', '            fronzenBalance = teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801];\n', '            teamFrozenBalances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89][1546300801] = 0;\n', '            balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89] = balances[0x41cf7D41ADf0d5de82b35143C9Bbca68af819a89].add(fronzenBalance);\n', '        //     0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398, // advisors\n', '            fronzenBalance = teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801];\n', '            teamFrozenBalances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398][1546300801] = 0;\n', '            balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398] = balances[0x61c3b0Fc6c6eE51DF1972c5F8DCE4663e573a398].add(fronzenBalance);\n', '        //     0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104, // affiliate\n', '            fronzenBalance = teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801];\n', '            teamFrozenBalances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104][1546300801] = 0;\n', '            balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104] = balances[0x51D8cC55d6Bfc41676a64FefA6BbAc56B61A7104].add(fronzenBalance);\n', '        //     0xfBfBF95152FcC8901974d35Ab0AEf172445B3047]; // partners\n', '            fronzenBalance = teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801];\n', '            teamFrozenBalances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047][1546300801] = 0;\n', '            balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047] = balances[0xfBfBF95152FcC8901974d35Ab0AEf172445B3047].add(fronzenBalance);\n', '        //if before 2021\n', '        } else if(timestamp < 1609459201) {\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1577836801] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        // if after 2021\n', '        } else {\n', '        //     0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97, // Team 1\n', '            fronzenBalance = teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201];\n', '            teamFrozenBalances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97][1609459201] = 0;\n', '            balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97] = balances[0xCd975cE2903Cf9F17d924d96d2bC752C06a3BB97].add(fronzenBalance);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface ERC223ReceivingContractInterface {\n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}']
