['pragma solidity 0.4.23;\n', '\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  \n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenVestingTimelock is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event Released(uint256 amount);\n', '    event Revoked();\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    uint256 public start;\n', '    uint256 public duration;\n', '\n', '    bool public revocable;\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    uint256 public released;\n', '    bool public revoked;\n', '\n', '  \n', '    constructor(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _duration,\n', '        bool _revokable,\n', '        uint256 _releaseTime\n', '    )\n', '    public\n', '    {\n', '        require(_beneficiary != address(0));\n', '        if (_releaseTime > 0) {\n', '            // solium-disable-next-line security/no-block-members\n', '            require(_releaseTime > block.timestamp);\n', '        }\n', '\n', '        beneficiary = _beneficiary;\n', '        revocable = _revokable;\n', '        duration = _duration;\n', '        start = _start;\n', '        token = _token;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '  \n', '    function release() public returns(bool) {\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        if (releaseTime > 0) {\n', '        // solium-disable-next-line security/no-block-members\n', '            require(block.timestamp >= releaseTime);\n', '        }\n', '\n', '        released = released.add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        emit Released(unreleased);\n', '\n', '        return true;\n', '    }\n', '\n', ' \n', '    function revoke() public onlyOwner returns(bool) {\n', '        require(revocable);\n', '        require(!revoked);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount();\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        revoked = true;\n', '\n', '        token.safeTransfer(owner, refund);\n', '\n', '        emit Revoked();\n', '\n', '        return true;\n', '    }\n', '\n', ' \n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(released);\n', '    }\n', '\n', ' \n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released);\n', '        // solium-disable-next-line security/no-block-members\n', '        if (block.timestamp < start) {\n', '            return 0;\n', '          // solium-disable-next-line security/no-block-members\n', '        } else if (block.timestamp >= start.add(duration) || revoked) {\n', '            return totalBalance;\n', '        } else {\n', '            // solium-disable-next-line security/no-block-members\n', '            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  \n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenVestingTimelock is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event Released(uint256 amount);\n', '    event Revoked();\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    uint256 public start;\n', '    uint256 public duration;\n', '\n', '    bool public revocable;\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    uint256 public released;\n', '    bool public revoked;\n', '\n', '  \n', '    constructor(\n', '        ERC20Basic _token,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _duration,\n', '        bool _revokable,\n', '        uint256 _releaseTime\n', '    )\n', '    public\n', '    {\n', '        require(_beneficiary != address(0));\n', '        if (_releaseTime > 0) {\n', '            // solium-disable-next-line security/no-block-members\n', '            require(_releaseTime > block.timestamp);\n', '        }\n', '\n', '        beneficiary = _beneficiary;\n', '        revocable = _revokable;\n', '        duration = _duration;\n', '        start = _start;\n', '        token = _token;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '  \n', '    function release() public returns(bool) {\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        if (releaseTime > 0) {\n', '        // solium-disable-next-line security/no-block-members\n', '            require(block.timestamp >= releaseTime);\n', '        }\n', '\n', '        released = released.add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        emit Released(unreleased);\n', '\n', '        return true;\n', '    }\n', '\n', ' \n', '    function revoke() public onlyOwner returns(bool) {\n', '        require(revocable);\n', '        require(!revoked);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount();\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        revoked = true;\n', '\n', '        token.safeTransfer(owner, refund);\n', '\n', '        emit Revoked();\n', '\n', '        return true;\n', '    }\n', '\n', ' \n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(released);\n', '    }\n', '\n', ' \n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released);\n', '        // solium-disable-next-line security/no-block-members\n', '        if (block.timestamp < start) {\n', '            return 0;\n', '          // solium-disable-next-line security/no-block-members\n', '        } else if (block.timestamp >= start.add(duration) || revoked) {\n', '            return totalBalance;\n', '        } else {\n', '            // solium-disable-next-line security/no-block-members\n', '            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '        }\n', '    }\n', '}']
