['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); \n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b); \n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract WCNToken is SafeMath{\n', '    string public name = "World Charge Network";\n', '    string public symbol = "WCN";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 12 * 10 ** 8 * 10 ** uint256(decimals);\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor() public{\n', '        balanceOf[msg.sender] = totalSupply;    // Give the creator all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        if (_to == 0x0) revert();                                               // Prevent transfer to 0x0 address\n', '        if (_value <= 0) revert(); \n', '        if (balanceOf[msg.sender] < _value) revert();                           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();                 // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);                  // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);     // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value <= 0) revert();\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_to == 0x0) revert();                                   // Prevent transfer to 0x0 address\n', '        if (_value <= 0) revert();\n', '        if (balanceOf[_from] < _value) revert();                    // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();     // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();        // Check allowance\n', '        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);  // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);      // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);      // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '}']