['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Token {\n', '\n', '      string public name = "DemoICO";\n', '      string public symbol = "DICO";\n', '      uint8 public decimals = 0;\n', '      uint public INITIAL_SUPPLY = 10000 * (uint256(10) ** decimals);\n', '\n', '      constructor() public {\n', '          _mint(msg.sender, INITIAL_SUPPLY);\n', '      }\n', '\n', '      event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '      );\n', '\n', '      event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '      );\n', '\n', '      using SafeMath for uint256;\n', '      mapping (address => uint256) private _balances;\n', '      mapping (address => mapping (address => uint256)) private _allowed;\n', '      uint256 private _totalSupply;\n', '\n', '      function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '      }\n', '\n', '      function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '      }\n', '\n', '      function allowance(\n', '        address owner,\n', '        address spender\n', '       )\n', '        public\n', '        view\n', '        returns (uint256)\n', '      {\n', '        return _allowed[owner][spender];\n', '      }\n', '\n', '      function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '      }\n', '\n', '      function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '      }\n', '\n', '      function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(value <= _allowed[from][msg.sender]);\n', '\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '      }\n', '\n', '      function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (\n', '          _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = (\n', '          _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '      }\n', '\n', '      function _transfer(address from, address to, uint256 value) internal {\n', '        require(value <= _balances[from]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '      }\n', '\n', '      function _mint(address account, uint256 value) internal {\n', '        require(account != 0);\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '      }\n', '\n', '      function _burn(address account, uint256 value) internal {\n', '        require(account != 0);\n', '        require(value <= _balances[account]);\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '      }\n', '\n', '      function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowed[account][msg.sender]);\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '          value);\n', '        _burn(account, value);\n', '      }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '      }\n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '      }\n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '      }\n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '      }\n', '      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '      }\n', '}']