['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is SafeMath {\n', '    uint256 public totalSupply;\n', '    function balanceOf( address who ) constant public returns (uint256 value);\n', '\n', '    function transfer( address to, uint256 value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint256 value) public returns (bool ok);\n', '    function approve( address spender, uint256 value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '    event Approval( address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', ' \n', 'contract Token is ERC20 {\n', '    string public constant version  = "1.0";\n', '    string public constant name     = "X";\n', '    string public constant symbol   = "X";\n', '    uint8  public constant decimals = 18;\n', '\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '    function Token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '        tokenName = name; \n', '        tokenSymbol = symbol; \n', '    }\n', '    \n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);                               \n', '        require(balances[_from] >= _value);                \n', '        require(balances[_to] + _value > balances[_to]); \n', '        balances[_from] -= _value;                         \n', '        balances[_to] += _value;                           \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function balanceOf(address _who) public constant returns (uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is SafeMath {\n', '    uint256 public totalSupply;\n', '    function balanceOf( address who ) constant public returns (uint256 value);\n', '\n', '    function transfer( address to, uint256 value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint256 value) public returns (bool ok);\n', '    function approve( address spender, uint256 value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '    event Approval( address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', ' \n', 'contract Token is ERC20 {\n', '    string public constant version  = "1.0";\n', '    string public constant name     = "X";\n', '    string public constant symbol   = "X";\n', '    uint8  public constant decimals = 18;\n', '\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '    function Token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '        tokenName = name; \n', '        tokenSymbol = symbol; \n', '    }\n', '    \n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);                               \n', '        require(balances[_from] >= _value);                \n', '        require(balances[_to] + _value > balances[_to]); \n', '        balances[_from] -= _value;                         \n', '        balances[_to] += _value;                           \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function balanceOf(address _who) public constant returns (uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
