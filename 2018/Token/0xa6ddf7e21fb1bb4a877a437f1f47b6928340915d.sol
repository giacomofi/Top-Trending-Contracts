['pragma solidity ^0.4.6;\n', ' \n', 'contract admined {\n', '  address public admin;\n', '\n', '  function admined(){\n', '    admin = msg.sender;\n', '  }\n', '\n', '  modifier onlyAdmin(){\n', '    require(msg.sender == admin) ;\n', '    _;\n', '  }\n', '\n', '  function transferAdminship(address newAdmin) onlyAdmin {\n', '    admin = newAdmin;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '       uint public totalSupply;\n', '       function totalSupply() constant  returns (uint256 _supply);\n', '\t   function name() constant  returns (string _name);\n', '\t   function symbol() constant  returns (string _symbol);\n', '\t   function decimals() constant  returns (uint8 _decimals);\n', '\t   function balanceOf(address who) constant returns (uint);\n', '\t   function transfer(address to, uint value);\n', '\t   \n', '\t   event Transfers(address indexed from, address indexed to, uint256 value);  \n', '        event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    \n', '\t   event TokenFallback(address from, uint value, bytes _data);\n', '\n', '}\n', 'contract ERC223ReceivingContract { \n', '\n', '    function tokenFallback(address from, uint value, bytes _data);\n', '    event TokenFallback(address from, uint value, bytes _data);\n', '}\n', '\n', 'contract AssetToken is admined,ERC223Interface{\n', '\n', ' mapping (address => uint256) public balanceOf;\n', '     mapping(address => mapping(address => uint256)) allowed;\n', '\n', ' uint256 public totalSupply;\n', ' string public name;\n', '  string public symbol;\n', '  uint8 public decimal; \n', '  uint256 public soldToken;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '   //Trigger when Tokens Burned\n', '        event Burn(address indexed from, uint256 value);\n', '\n', ' \n', '\n', '  function AssetToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralAdmin) {\n', ' balanceOf[msg.sender] = initialSupply;\n', '    totalSupply = initialSupply;\n', '    decimal = decimalUnits;\n', '    symbol = tokenSymbol;\n', '    name = tokenName;\n', '    soldToken=0;\n', '    \n', '    if(centralAdmin != 0)\n', '      admin = centralAdmin;\n', '    else\n', '      admin = msg.sender;\n', '    balanceOf[admin] = initialSupply;\n', '    totalSupply = initialSupply;  \n', '  }\n', '\n', '  function mintToken(address target, uint256 mintedAmount) onlyAdmin{\n', '    balanceOf[target] += mintedAmount;\n', '    totalSupply += mintedAmount;\n', '    Transfer(0, this, mintedAmount);\n', '    Transfer(this, target, mintedAmount);\n', '  }\n', '\n', '\n', '    function transfer(address _to, uint _value) {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '\t\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '\n', '}\n', '        soldToken+=_value;\n', '        Transfers(msg.sender, _to, _value);\n', '    }\n', '  \n', '    \n', '    \n', ' function balanceOf(address _owner) constant  returns (uint balance) {\n', '    return balanceOf[_owner];\n', '  }\n', '\n', '    \n', '    //Allow the owner to burn the token from their accounts\n', 'function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant  returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant  returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant  returns (uint8 _decimals) {\n', '      return decimal;\n', '  }\n', '  // Function to access total supply of tokens .\n', '   function totalSupply() constant returns(uint256 initialSupply) {\n', '        initialSupply = totalSupply;\n', '    }\n', '  \n', '\n', '\n', '}']
['pragma solidity ^0.4.6;\n', ' \n', 'contract admined {\n', '  address public admin;\n', '\n', '  function admined(){\n', '    admin = msg.sender;\n', '  }\n', '\n', '  modifier onlyAdmin(){\n', '    require(msg.sender == admin) ;\n', '    _;\n', '  }\n', '\n', '  function transferAdminship(address newAdmin) onlyAdmin {\n', '    admin = newAdmin;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '       uint public totalSupply;\n', '       function totalSupply() constant  returns (uint256 _supply);\n', '\t   function name() constant  returns (string _name);\n', '\t   function symbol() constant  returns (string _symbol);\n', '\t   function decimals() constant  returns (uint8 _decimals);\n', '\t   function balanceOf(address who) constant returns (uint);\n', '\t   function transfer(address to, uint value);\n', '\t   \n', '\t   event Transfers(address indexed from, address indexed to, uint256 value);  \n', '        event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    \n', '\t   event TokenFallback(address from, uint value, bytes _data);\n', '\n', '}\n', 'contract ERC223ReceivingContract { \n', '\n', '    function tokenFallback(address from, uint value, bytes _data);\n', '    event TokenFallback(address from, uint value, bytes _data);\n', '}\n', '\n', 'contract AssetToken is admined,ERC223Interface{\n', '\n', ' mapping (address => uint256) public balanceOf;\n', '     mapping(address => mapping(address => uint256)) allowed;\n', '\n', ' uint256 public totalSupply;\n', ' string public name;\n', '  string public symbol;\n', '  uint8 public decimal; \n', '  uint256 public soldToken;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '   //Trigger when Tokens Burned\n', '        event Burn(address indexed from, uint256 value);\n', '\n', ' \n', '\n', '  function AssetToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralAdmin) {\n', ' balanceOf[msg.sender] = initialSupply;\n', '    totalSupply = initialSupply;\n', '    decimal = decimalUnits;\n', '    symbol = tokenSymbol;\n', '    name = tokenName;\n', '    soldToken=0;\n', '    \n', '    if(centralAdmin != 0)\n', '      admin = centralAdmin;\n', '    else\n', '      admin = msg.sender;\n', '    balanceOf[admin] = initialSupply;\n', '    totalSupply = initialSupply;  \n', '  }\n', '\n', '  function mintToken(address target, uint256 mintedAmount) onlyAdmin{\n', '    balanceOf[target] += mintedAmount;\n', '    totalSupply += mintedAmount;\n', '    Transfer(0, this, mintedAmount);\n', '    Transfer(this, target, mintedAmount);\n', '  }\n', '\n', '\n', '    function transfer(address _to, uint _value) {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '\t\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '\n', '}\n', '        soldToken+=_value;\n', '        Transfers(msg.sender, _to, _value);\n', '    }\n', '  \n', '    \n', '    \n', ' function balanceOf(address _owner) constant  returns (uint balance) {\n', '    return balanceOf[_owner];\n', '  }\n', '\n', '    \n', '    //Allow the owner to burn the token from their accounts\n', 'function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant  returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant  returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant  returns (uint8 _decimals) {\n', '      return decimal;\n', '  }\n', '  // Function to access total supply of tokens .\n', '   function totalSupply() constant returns(uint256 initialSupply) {\n', '        initialSupply = totalSupply;\n', '    }\n', '  \n', '\n', '\n', '}']
