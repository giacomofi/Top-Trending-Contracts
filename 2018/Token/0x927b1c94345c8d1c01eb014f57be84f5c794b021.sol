['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Owned.sol\n', '\n', 'contract Owned {\n', '  event OwnerAddition(address indexed owner);\n', '\n', '  event OwnerRemoval(address indexed owner);\n', '\n', '  // owner address to enable admin functions\n', '  mapping (address => bool) public isOwner;\n', '\n', '  address[] public owners;\n', '\n', '  address public operator;\n', '\n', '  modifier onlyOwner {\n', '\n', '    require(isOwner[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOperator {\n', '    require(msg.sender == operator);\n', '    _;\n', '  }\n', '\n', '  function setOperator(address _operator) external onlyOwner {\n', '    require(_operator != address(0));\n', '    operator = _operator;\n', '  }\n', '\n', '  function removeOwner(address _owner) public onlyOwner {\n', '    require(owners.length > 1);\n', '    isOwner[_owner] = false;\n', '    for (uint i = 0; i < owners.length - 1; i++) {\n', '      if (owners[i] == _owner) {\n', '        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n', '        break;\n', '      }\n', '    }\n', '    owners.length = SafeMath.sub(owners.length, 1);\n', '    OwnerRemoval(_owner);\n', '  }\n', '\n', '  function addOwner(address _owner) external onlyOwner {\n', '    require(_owner != address(0));\n', '    if(isOwner[_owner]) return;\n', '    isOwner[_owner] = true;\n', '    owners.push(_owner);\n', '    OwnerAddition(_owner);\n', '  }\n', '\n', '  function setOwners(address[] _owners) internal {\n', '    for (uint i = 0; i < _owners.length; i++) {\n', '      require(_owners[i] != address(0));\n', '      isOwner[_owners[i]] = true;\n', '      OwnerAddition(_owners[i]);\n', '    }\n', '    owners = _owners;\n', '  }\n', '\n', '  function getOwners() public constant returns (address[])  {\n', '    return owners;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Token.sol\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.8;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/Leverjbounty.sol\n', '\n', 'contract Leverjbounty is Owned {\n', '\n', '  mapping (address => bool) public users;\n', '\n', '  mapping (address => uint256) public social;\n', '\n', '  uint256 public levPerUser;\n', '\n', '  Token public token;\n', '\n', '  bool public dropEnabled;\n', '\n', '  event Redeemed(address user, uint tokens);\n', '\n', '  modifier isDropEnabled{\n', '    require(dropEnabled);\n', '    _;\n', '  }\n', '\n', '  function Leverjbounty(address[] owners, address _token, uint256 _levPerUser) public {\n', '    require(_token != address(0x0));\n', '    require(_levPerUser > 0);\n', '    setOwners(owners);\n', '    token = Token(_token);\n', '    levPerUser = _levPerUser;\n', '  }\n', '\n', '  function addUsers(address[] _users) onlyOwner public {\n', '    require(_users.length > 0);\n', '    for (uint i = 0; i < _users.length; i++) {\n', '      users[_users[i]] = true;\n', '    }\n', '  }\n', '\n', '  function addSocial(address[] _users, uint256[] _tokens) onlyOwner public {\n', '    require(_users.length > 0 && _users.length == _tokens.length);\n', '    for (uint i = 0; i < _users.length; i++) {\n', '      social[_users[i]] = _tokens[i];\n', '    }\n', '  }\n', '\n', '  function removeUsers(address[] _users) onlyOwner public {\n', '    require(_users.length > 0);\n', '    for (uint i = 0; i < _users.length; i++) {\n', '      users[_users[i]] = false;\n', '    }\n', '  }\n', '\n', '  function toggleDrop() onlyOwner public {\n', '    dropEnabled = !dropEnabled;\n', '  }\n', '\n', '  function redeemTokens() isDropEnabled public {\n', '    uint256 balance = balanceOf(msg.sender);\n', '    require(balance > 0);\n', '    users[msg.sender] = false;\n', '    social[msg.sender] = 0;\n', '    token.transfer(msg.sender, balance);\n', '    Redeemed(msg.sender, balance);\n', '  }\n', '\n', '  function balanceOf(address user) public constant returns (uint256) {\n', '    uint256 levs = social[user];\n', '    if (users[user]) levs += levPerUser;\n', '    return levs;\n', '  }\n', '\n', '  function transferTokens(address _address, uint256 _amount) onlyOwner public {\n', '    token.transfer(_address, _amount);\n', '  }\n', '}']