['pragma solidity ^0.4.15;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract TtestaryToken is MintableToken {\n', '    \n', '    string public constant name = "Ttestary";\n', '    string public constant symbol = "TTARY";\n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract Ttestary is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    TtestaryToken public token = new TtestaryToken();\n', '    \n', '    address eth_addr;\n', '    uint devs_percent;\n', '    uint start;\n', '    uint period;\n', '    uint hardcap;\n', '    uint rate;\n', '\n', '    function Crowdsale() {\n', '        eth_addr = 0x785862CEBCEcE601c6E1f79315c9320A6721Ea92;\n', '        devs_percent = 3;\n', '        rate = 5000e18;\n', '        start = 1524060501;\n', '        period = 30;\n', '        hardcap = 500 ether;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '    \trequire(now > start && now < start + period * 1 days);\n', '    \t_;\n', '    }\n', '\t\n', '    modifier isUnderHardCap() {\n', '        require(eth_addr.balance <= hardcap);\n', '        _;\n', '    }\n', ' \n', '    function finishMinting() public onlyOwner {\n', '\tuint issuedTokenSupply = token.totalSupply();\n', '\tuint restrictedTokens = issuedTokenSupply.mul(devs_percent).div(100 - devs_percent);\n', '\ttoken.mint(eth_addr, restrictedTokens);\n', '        token.finishMinting();\n', '    }\n', ' \n', '   function createTokens() isUnderHardCap saleIsOn payable {\n', '        eth_addr.transfer(msg.value);\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        uint bonusTokens = 0;\n', '        if(now < start + (period * 1 days).div(5)) {\n', '          bonusTokens = tokens.div(5);\n', '        } else {\n', '          bonusTokens = 0;\n', '        } \n', '        tokens += bonusTokens;\n', '        token.mint(msg.sender, tokens);\n', '    }\n', ' \n', '    function() payable {\n', '        createTokens();\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract TtestaryToken is MintableToken {\n', '    \n', '    string public constant name = "Ttestary";\n', '    string public constant symbol = "TTARY";\n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract Ttestary is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    TtestaryToken public token = new TtestaryToken();\n', '    \n', '    address eth_addr;\n', '    uint devs_percent;\n', '    uint start;\n', '    uint period;\n', '    uint hardcap;\n', '    uint rate;\n', '\n', '    function Crowdsale() {\n', '        eth_addr = 0x785862CEBCEcE601c6E1f79315c9320A6721Ea92;\n', '        devs_percent = 3;\n', '        rate = 5000e18;\n', '        start = 1524060501;\n', '        period = 30;\n', '        hardcap = 500 ether;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '    \trequire(now > start && now < start + period * 1 days);\n', '    \t_;\n', '    }\n', '\t\n', '    modifier isUnderHardCap() {\n', '        require(eth_addr.balance <= hardcap);\n', '        _;\n', '    }\n', ' \n', '    function finishMinting() public onlyOwner {\n', '\tuint issuedTokenSupply = token.totalSupply();\n', '\tuint restrictedTokens = issuedTokenSupply.mul(devs_percent).div(100 - devs_percent);\n', '\ttoken.mint(eth_addr, restrictedTokens);\n', '        token.finishMinting();\n', '    }\n', ' \n', '   function createTokens() isUnderHardCap saleIsOn payable {\n', '        eth_addr.transfer(msg.value);\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        uint bonusTokens = 0;\n', '        if(now < start + (period * 1 days).div(5)) {\n', '          bonusTokens = tokens.div(5);\n', '        } else {\n', '          bonusTokens = 0;\n', '        } \n', '        tokens += bonusTokens;\n', '        token.mint(msg.sender, tokens);\n', '    }\n', ' \n', '    function() payable {\n', '        createTokens();\n', '    }\n', '    \n', '}']
