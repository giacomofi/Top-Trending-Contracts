['pragma solidity ^0.4.24;\n', '\n', 'contract DACCToken {\n', '\n', '    string public name = "Decentralized Accessible Content Chain";\n', '    string public symbol = "DACC";\n', '    uint256 public decimals = 6;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 30000000000000000;\n', '    bool public stopped = false;\n', '    address owner = 0x1e113613C889C76b792AdfdcbBd155904F3310a5;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        balanceOf[owner] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() isOwner public {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() isOwner public {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) isOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    function airdrop(address[] _DACusers,uint256[] _values) isRunning public {\n', '        require(_DACusers.length > 0);\n', '        require(_DACusers.length == _values.length);\n', '        uint256 amount = 0;\n', '        uint i = 0;\n', '        for (i = 0; i < _DACusers.length; i++) {\n', '            require(amount + _values[i] >= amount);\n', '            amount += _values[i];  \n', '        }\n', '        require(balanceOf[msg.sender] >= amount);\n', '        balanceOf[msg.sender] -= amount;\n', '        for (i = 0; i < _DACusers.length; i++) {\n', '            require(balanceOf[_DACusers[i]] + _values[i] >= balanceOf[_DACusers[i]]);\n', '            balanceOf[_DACusers[i]] += _values[i];\n', '            emit Transfer(msg.sender, _DACusers[i], _values[i]);\n', '        }\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract DACCToken {\n', '\n', '    string public name = "Decentralized Accessible Content Chain";\n', '    string public symbol = "DACC";\n', '    uint256 public decimals = 6;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 30000000000000000;\n', '    bool public stopped = false;\n', '    address owner = 0x1e113613C889C76b792AdfdcbBd155904F3310a5;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        balanceOf[owner] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) isRunning isValidAddress public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() isOwner public {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() isOwner public {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) isOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    function airdrop(address[] _DACusers,uint256[] _values) isRunning public {\n', '        require(_DACusers.length > 0);\n', '        require(_DACusers.length == _values.length);\n', '        uint256 amount = 0;\n', '        uint i = 0;\n', '        for (i = 0; i < _DACusers.length; i++) {\n', '            require(amount + _values[i] >= amount);\n', '            amount += _values[i];  \n', '        }\n', '        require(balanceOf[msg.sender] >= amount);\n', '        balanceOf[msg.sender] -= amount;\n', '        for (i = 0; i < _DACusers.length; i++) {\n', '            require(balanceOf[_DACusers[i]] + _values[i] >= balanceOf[_DACusers[i]]);\n', '            balanceOf[_DACusers[i]] += _values[i];\n', '            emit Transfer(msg.sender, _DACusers[i], _values[i]);\n', '        }\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
