['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Maths\n', ' * A library to make working with numbers in Solidity hurt your brain less.\n', ' */\n', 'library Maths {\n', '  /**\n', '   * @dev Adds two addends together, returns the sum\n', '   * @param addendA the first addend\n', '   * @param addendB the second addend\n', '   * @return sum the sum of the equation (e.g. addendA + addendB)\n', '   */\n', '  function plus(\n', '    uint256 addendA,\n', '    uint256 addendB\n', '  ) public pure returns (uint256 sum) {\n', '    sum = addendA + addendB;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts the minuend from the subtrahend, returns the difference\n', '   * @param minuend the minuend\n', '   * @param subtrahend the subtrahend\n', '   * @return difference the difference (e.g. minuend - subtrahend)\n', '   */\n', '  function minus(\n', '    uint256 minuend,\n', '    uint256 subtrahend\n', '  ) public pure returns (uint256 difference) {\n', '    assert(minuend >= subtrahend);\n', '    difference = minuend - subtrahend;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function mul(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    if (factorA == 0 || factorB == 0) return 0;\n', '    product = factorA * factorB;\n', '    assert(product / factorA == factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function times(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    return mul(factorA, factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function div(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    quotient = dividend / divisor;\n', '    assert(quotient * divisor == dividend);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function dividedBy(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    return div(dividend, divisor);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the quotient and remainder\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n', '   */\n', '  function divideSafely(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient, uint256 remainder) {\n', '    quotient = div(dividend, divisor);\n', '    remainder = dividend % divisor;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the lesser of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the lesser of the two values\n', '   */\n', '  function min(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a <= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the greater of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the greater of the two values\n', '   */\n', '  function max(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a >= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a < b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than or equal to b\n', '   */\n', '  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a <= b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is greater than b\n', '   */\n', '  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a > b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a >= b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\n', '  event ManagementChanged(address indexed previousManager, address indexed newManager);\n', '\n', '  /**\n', '   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Manageable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner or manager.\n', '   */\n', '  modifier onlyManagement() {\n', '    require(msg.sender == owner || msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipChanged(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner or manager to replace the current manager\n', '   * @param newManager The address to give contract management rights.\n', '   */\n', '  function replaceManager(address newManager) public onlyManagement {\n', '    require(newManager != address(0));\n', '    emit ManagementChanged(manager, newManager);\n', '    manager = newManager;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using Maths for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].minus(_value);\n', '    balances[_to] = balances[_to].plus(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  using Maths for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].minus(_value);\n', '    balances[_to] = balances[_to].plus(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.minus(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Manageable {\n', '  using Maths for uint256;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyManagement canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.plus(_amount);\n', '    balances[_to] = balances[_to].plus(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyManagement canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MythexToken is MintableToken {\n', '  using Maths for uint256;\n', '\n', '  string public constant name     = "Mythex";\n', '  string public constant symbol   = "MX";\n', '  uint8  public constant decimals = 0;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens assigned to a given address\n', '   * @param _burner The owner of the tokens to be burned\n', '   * @param _value The amount of token to be burned\n', '   * @return True if the operation was successful.\n', '   */\n', '  function burn(address _burner, uint256 _value) public onlyManagement returns (bool) {\n', '    require(_value <= balances[_burner]);\n', '    balances[_burner] = balances[_burner].minus(_value);\n', '    totalSupply_ = totalSupply_.minus(_value);\n', '    emit Burn(_burner, _value);\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Maths\n', ' * A library to make working with numbers in Solidity hurt your brain less.\n', ' */\n', 'library Maths {\n', '  /**\n', '   * @dev Adds two addends together, returns the sum\n', '   * @param addendA the first addend\n', '   * @param addendB the second addend\n', '   * @return sum the sum of the equation (e.g. addendA + addendB)\n', '   */\n', '  function plus(\n', '    uint256 addendA,\n', '    uint256 addendB\n', '  ) public pure returns (uint256 sum) {\n', '    sum = addendA + addendB;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts the minuend from the subtrahend, returns the difference\n', '   * @param minuend the minuend\n', '   * @param subtrahend the subtrahend\n', '   * @return difference the difference (e.g. minuend - subtrahend)\n', '   */\n', '  function minus(\n', '    uint256 minuend,\n', '    uint256 subtrahend\n', '  ) public pure returns (uint256 difference) {\n', '    assert(minuend >= subtrahend);\n', '    difference = minuend - subtrahend;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function mul(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    if (factorA == 0 || factorB == 0) return 0;\n', '    product = factorA * factorB;\n', '    assert(product / factorA == factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function times(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    return mul(factorA, factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function div(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    quotient = dividend / divisor;\n', '    assert(quotient * divisor == dividend);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function dividedBy(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    return div(dividend, divisor);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the quotient and remainder\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n', '   */\n', '  function divideSafely(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient, uint256 remainder) {\n', '    quotient = div(dividend, divisor);\n', '    remainder = dividend % divisor;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the lesser of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the lesser of the two values\n', '   */\n', '  function min(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a <= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the greater of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the greater of the two values\n', '   */\n', '  function max(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a >= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a < b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than or equal to b\n', '   */\n', '  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a <= b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is greater than b\n', '   */\n', '  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a > b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a >= b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\n', '  event ManagementChanged(address indexed previousManager, address indexed newManager);\n', '\n', '  /**\n', '   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Manageable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner or manager.\n', '   */\n', '  modifier onlyManagement() {\n', '    require(msg.sender == owner || msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipChanged(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner or manager to replace the current manager\n', '   * @param newManager The address to give contract management rights.\n', '   */\n', '  function replaceManager(address newManager) public onlyManagement {\n', '    require(newManager != address(0));\n', '    emit ManagementChanged(manager, newManager);\n', '    manager = newManager;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using Maths for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].minus(_value);\n', '    balances[_to] = balances[_to].plus(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  using Maths for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].minus(_value);\n', '    balances[_to] = balances[_to].plus(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.minus(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Manageable {\n', '  using Maths for uint256;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyManagement canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.plus(_amount);\n', '    balances[_to] = balances[_to].plus(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyManagement canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MythexToken is MintableToken {\n', '  using Maths for uint256;\n', '\n', '  string public constant name     = "Mythex";\n', '  string public constant symbol   = "MX";\n', '  uint8  public constant decimals = 0;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens assigned to a given address\n', '   * @param _burner The owner of the tokens to be burned\n', '   * @param _value The amount of token to be burned\n', '   * @return True if the operation was successful.\n', '   */\n', '  function burn(address _burner, uint256 _value) public onlyManagement returns (bool) {\n', '    require(_value <= balances[_burner]);\n', '    balances[_burner] = balances[_burner].minus(_value);\n', '    totalSupply_ = totalSupply_.minus(_value);\n', '    emit Burn(_burner, _value);\n', '    return true;\n', '  }\n', '}']
