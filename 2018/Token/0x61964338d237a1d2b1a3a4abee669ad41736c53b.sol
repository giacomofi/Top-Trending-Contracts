['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a && c >= b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is SafeMath {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  /**\n', '   *\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     require(msg.data.length == size + 4);\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '    require(_to != 0);\n', '    uint256 balanceFrom = balances[msg.sender];\n', '    require(_value <= balanceFrom);\n', '\n', '    // SafeMath safeSub will throw if there is not enough balance.\n', '    balances[msg.sender] = safeSub(balanceFrom, _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require(_to != 0);\n', '    uint256 allowToTrans = allowed[_from][msg.sender];\n', '    uint256 balanceFrom = balances[_from];\n', '    require(_value <= balanceFrom);\n', '    require(_value <= allowToTrans);\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balanceFrom, _value);\n', '    allowed[_from][msg.sender] = safeSub(allowToTrans, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '//    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    // require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * Atomic increment of approved spending\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   */\n', '  function addApproval(address _spender, uint256 _addedValue)\n', '  onlyPayloadSize(2 * 32)\n', '  public returns (bool success) {\n', '      uint256 oldValue = allowed[msg.sender][_spender];\n', '      allowed[msg.sender][_spender] = safeAdd(oldValue, _addedValue);\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Atomic decrement of approved spending.\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   */\n', '  function subApproval(address _spender, uint256 _subtractedValue)\n', '  onlyPayloadSize(2 * 32)\n', '  public returns (bool success) {\n', '\n', '      uint256 oldVal = allowed[msg.sender][_spender];\n', '\n', '      if (_subtractedValue > oldVal) {\n', '          allowed[msg.sender][_spender] = 0;\n', '      } else {\n', '          allowed[msg.sender][_spender] = safeSub(oldVal, _subtractedValue);\n', '      }\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MigrationAgent {\n', '  function migrateFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract UpgradeableToken is Ownable, StandardToken {\n', '  address public migrationAgent;\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '    // Migrate tokens to the new token contract\n', '    function migrate() public {\n', '        require(migrationAgent != 0);\n', '        uint value = balances[msg.sender];\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n', '        Upgrade(msg.sender, migrationAgent, value);\n', '    }\n', '\n', '    function () public payable {\n', '      require(migrationAgent != 0);\n', '      require(balances[msg.sender] > 0);\n', '      migrate();\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        migrationAgent = _agent;\n', '        UpgradeAgentSet(_agent);\n', '    }\n', '\n', '}\n', 'contract LTRYToken is UpgradeableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '\n', '  address public allTokenOwnerOnStart;\n', '  string public constant name = "Lottery";\n', '  string public constant symbol = "LTRY";\n', '  uint256 public constant decimals = 6;\n', '  \n', '\n', '  function LTRYToken() public {\n', '    allTokenOwnerOnStart = msg.sender;\n', '    totalSupply = 22000000000000;\n', '    balances[allTokenOwnerOnStart] = totalSupply;\n', '    Mint(allTokenOwnerOnStart, totalSupply);\n', '    Transfer(0x0, allTokenOwnerOnStart ,totalSupply);\n', '    MintFinished();\n', '  }\n', '  \n', '}\n', '\n', '// ============================================================================\n', '\n', 'contract IcoLTRYToken is Ownable, SafeMath {\n', '  address public wallet;\n', '  address public allTokenAddress;\n', '  bool public emergencyFlagAndHiddenCap = false;\n', '  // UNIX format\n', '  uint256 public startTime = 1519819200; // 28 Feb 2018 12:00:00 UTC\n', '  uint256 public endTime =   1524225600; // 20 Apr 2018 12:00:00 UTC\n', '\n', '  uint256 public USDto1ETH = 880; // 1 ether = 880$\n', '  uint256 public price; \n', '  uint256 public totalTokensSold = 0;\n', '  uint256 public constant maxTokensToSold = 15000000000000; // 60% * (100 000 000.000 000)\n', '  LTRYToken public token;\n', '\n', '  function IcoLTRYToken(address _wallet, LTRYToken _token) public {\n', '    wallet = _wallet;\n', '    token = _token;\n', '    allTokenAddress = token.allTokenOwnerOnStart();\n', '    price = 1 ether / USDto1ETH / 1000000;\n', '  }\n', '\n', '  function () public payable {\n', '    require(now <= endTime && now >= startTime);\n', '    require(!emergencyFlagAndHiddenCap);\n', '    require(totalTokensSold < maxTokensToSold);\n', '    uint256 value = msg.value;\n', '    uint256 tokensToSend = safeDiv(value, price);\n', '    require(tokensToSend >= 10000000 && tokensToSend <= 500000000000);\n', '    uint256 valueToReturn = safeSub(value, tokensToSend * price);\n', '    uint256 valueToWallet = safeSub(value, valueToReturn);\n', '\n', '    wallet.transfer(valueToWallet);\n', '    if (valueToReturn > 0) {\n', '      msg.sender.transfer(valueToReturn);\n', '   }\n', '    token.transferFrom(allTokenAddress, msg.sender, tokensToSend);\n', '    totalTokensSold += tokensToSend;\n', '  }\n', '\n', '    function ChangeUSDto1ETH(uint256 _USDto1ETH) onlyOwner public {\n', '        USDto1ETH = _USDto1ETH;\n', '        ChangePrice();\n', '    }\n', '\n', '  function ChangePrice() onlyOwner public {\n', '    uint256 priceWeiToUSD = 1 ether / USDto1ETH;\n', '    uint256 price1mToken = priceWeiToUSD / 1000000; // decimals = 6\n', '    if ( now <= startTime + 15 days) {\n', '      price = price1mToken * 1; // 1.000000Token =1.00 $ PreSale 20 first days\n', '    } \n', '    else {\n', '        price = price1mToken * 2; // 1.000000Token = 2.0 $ Sale\n', '      \n', '    }\n', '\n', '  }\n', '\n', '    function ChangeStart(uint _startTime) onlyOwner public {\n', '        startTime = _startTime;\n', '    }\n', '\n', '    function ChangeEnd(uint _endTime) onlyOwner public {\n', '        endTime = _endTime;\n', '    }\n', '\n', '\n', '  function emergencyAndHiddenCapToggle() onlyOwner public {\n', '    emergencyFlagAndHiddenCap = !emergencyFlagAndHiddenCap;\n', '  }\n', '\n', '}']