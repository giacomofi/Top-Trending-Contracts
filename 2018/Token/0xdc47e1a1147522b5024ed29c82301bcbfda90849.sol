['/** \n', '\tEtherus presale contract\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Mintable token\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    uint public totalSupply = 0;\n', '    address private minter;\n', '    bool public mintingEnabled = true;\n', '\n', '    modifier onlyMinter() {\n', '        require(minter == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function setMinter(address _minter) public onlyOwner {\n', '        minter = _minter;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public onlyMinter {\n', '        require(mintingEnabled);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0x0), _to, _amount);\n', '    }\n', '\n', '    function stopMinting() public onlyMinter {\n', '        mintingEnabled = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract EtherusPreSale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // Constants\n', '    // =========\n', '\n', '    uint private constant fractions = 1e18;\n', '    uint private constant millions = 1e6*fractions;\n', '\n', '    uint private constant CAP = 15*millions;\n', '    uint private constant SALE_CAP = 5*millions;\n', '    uint private constant ETR_USD_PRICE = 400; //in cents\n', '\n', '    uint public ethPrice = 40000; //in cents\n', '\n', '    // Events\n', '    // ======\n', '\n', '    event AltBuy(address holder, uint tokens, string txHash);\n', '    event Buy(address holder, uint tokens);\n', '    event RunSale();\n', '    event PauseSale();\n', '    event FinishSale();\n', '    event PriceSet(uint USDPerETH);\n', '\n', '    // State variables\n', '    // ===============\n', '\n', '    MintableToken public token;\n', '    address authority; //An account to control the contract on behalf of the owner\n', '    address robot; //An account to purchase tokens for altcoins\n', '    bool public isOpen = false;\n', '\n', '    // Constructor\n', '    // ===========\n', '\n', '    function EtherusPreSale(address _token, address _multisig, address _authority, address _robot) public {\n', '        token = MintableToken(_token);\n', '        authority = _authority;\n', '        robot = _robot;\n', '        transferOwnership(_multisig);\n', '    }\n', '\n', '    // Public functions\n', '    // ================\n', '\n', '    /**\n', '    * Gets the bonus in percents for the specified sum\n', '    */\n', '    function getBonus(uint ethSum) public view returns (uint){\n', '\n', '        uint usdSum = ethSum.mul(ethPrice).div(fractions);\n', '        if(usdSum >= 1e6*100)\n', '            return 100;\n', '        if(usdSum >= 5e5*100)\n', '            return 80;\n', '        if(usdSum >= 2.5e5*100)\n', '            return 70;\n', '        if(usdSum >= 2e5*100)\n', '            return 60;\n', '        if(usdSum >= 1.5e5*100)\n', '            return 50;\n', '        if(usdSum >= 1.25e5*100)\n', '            return 40;\n', '        if(usdSum >= 1e5*100)\n', '            return 30;\n', '        if(usdSum >= 7.5e4*100)\n', '            return 20;\n', '        if(usdSum >= 5e4*100)\n', '            return 10;\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * Computes number of tokens with bonus for the specified ether. Correctly\n', '    * adds bonuses if the sum is large enough to belong to several bonus intervals\n', '    */\n', '    function getTokensAmount(uint etherVal) public view returns (uint) {\n', '        uint bonus = getBonus(etherVal);\n', '        uint tokens = etherVal.mul(ethPrice).mul(100 + bonus).div(ETR_USD_PRICE*100);\n', '        return tokens;\n', '    }\n', '\n', '    function buy(address to) public payable onlyOpen {\n', '        uint amount = msg.value;\n', '        uint tokens = getTokensAmountUnderCap(amount);\n', '\n', '        owner.transfer(amount);\n', '        token.mint(to, tokens);\n', '\n', '        Buy(to, tokens);\n', '    }\n', '\n', '    function () public payable{\n', '        buy(msg.sender);\n', '    }\n', '\n', '    // Modifiers\n', '    // =================\n', '\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authority || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRobot() {\n', '        require(msg.sender == robot);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOpen() {\n', '        require(isOpen);\n', '        _;\n', '    }\n', '\n', '    // Priveleged functions\n', '    // ====================\n', '\n', '    /**\n', '    * Used to buy tokens for altcoins.\n', '    * Robot may call it before TokenSale officially starts to migrate early investors\n', '    */\n', '    function buyAlt(address to, uint etherAmount, string _txHash) public onlyRobot {\n', '        uint tokens = getTokensAmountUnderCap(etherAmount);\n', '        token.mint(to, tokens);\n', '        AltBuy(to, tokens, _txHash);\n', '    }\n', '\n', '    function setAuthority(address _authority) public onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function setRobot(address _robot) public onlyAuthority {\n', '        robot = _robot;\n', '    }\n', '\n', '    function setPrice(uint usdPerEther) public onlyAuthority {\n', '        //Ether is not expected to rate less than $1 and more than $100000 during presale\n', '        require(1*100 <= usdPerEther && usdPerEther <= 100000*100);\n', '        ethPrice = usdPerEther;\n', '        PriceSet(ethPrice);\n', '    }\n', '\n', '    // SALE state management: start / pause / finalize\n', '    // --------------------------------------------\n', '    function open(bool _open) public onlyAuthority {\n', '        isOpen = _open;\n', '        if (_open) {\n', '            RunSale();\n', '        } else {\n', '            PauseSale();\n', '        }\n', '    }\n', '\n', '    function finalize() public onlyAuthority {\n', '        uint diff = CAP.sub(token.totalSupply());\n', '        if(diff > 0) //The unsold capacity moves to team\n', '            token.mint(owner, diff);\n', '        token.stopMinting();\n', '        selfdestruct(owner);\n', '        FinishSale();\n', '    }\n', '\n', '    // Private functions\n', '    // =========================\n', '\n', '    /**\n', '    * Gets tokens for specified ether provided that they are still under the cap\n', '    */\n', '    function getTokensAmountUnderCap(uint etherAmount) private view returns (uint){\n', '        uint tokens = getTokensAmount(etherAmount);\n', '        require(tokens > 0);\n', '        require(tokens.add(token.totalSupply()) <= SALE_CAP);\n', '        return tokens;\n', '    }\n', '\n', '}']
['/** \n', '\tEtherus presale contract\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Mintable token\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    uint public totalSupply = 0;\n', '    address private minter;\n', '    bool public mintingEnabled = true;\n', '\n', '    modifier onlyMinter() {\n', '        require(minter == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function setMinter(address _minter) public onlyOwner {\n', '        minter = _minter;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public onlyMinter {\n', '        require(mintingEnabled);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0x0), _to, _amount);\n', '    }\n', '\n', '    function stopMinting() public onlyMinter {\n', '        mintingEnabled = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract EtherusPreSale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // Constants\n', '    // =========\n', '\n', '    uint private constant fractions = 1e18;\n', '    uint private constant millions = 1e6*fractions;\n', '\n', '    uint private constant CAP = 15*millions;\n', '    uint private constant SALE_CAP = 5*millions;\n', '    uint private constant ETR_USD_PRICE = 400; //in cents\n', '\n', '    uint public ethPrice = 40000; //in cents\n', '\n', '    // Events\n', '    // ======\n', '\n', '    event AltBuy(address holder, uint tokens, string txHash);\n', '    event Buy(address holder, uint tokens);\n', '    event RunSale();\n', '    event PauseSale();\n', '    event FinishSale();\n', '    event PriceSet(uint USDPerETH);\n', '\n', '    // State variables\n', '    // ===============\n', '\n', '    MintableToken public token;\n', '    address authority; //An account to control the contract on behalf of the owner\n', '    address robot; //An account to purchase tokens for altcoins\n', '    bool public isOpen = false;\n', '\n', '    // Constructor\n', '    // ===========\n', '\n', '    function EtherusPreSale(address _token, address _multisig, address _authority, address _robot) public {\n', '        token = MintableToken(_token);\n', '        authority = _authority;\n', '        robot = _robot;\n', '        transferOwnership(_multisig);\n', '    }\n', '\n', '    // Public functions\n', '    // ================\n', '\n', '    /**\n', '    * Gets the bonus in percents for the specified sum\n', '    */\n', '    function getBonus(uint ethSum) public view returns (uint){\n', '\n', '        uint usdSum = ethSum.mul(ethPrice).div(fractions);\n', '        if(usdSum >= 1e6*100)\n', '            return 100;\n', '        if(usdSum >= 5e5*100)\n', '            return 80;\n', '        if(usdSum >= 2.5e5*100)\n', '            return 70;\n', '        if(usdSum >= 2e5*100)\n', '            return 60;\n', '        if(usdSum >= 1.5e5*100)\n', '            return 50;\n', '        if(usdSum >= 1.25e5*100)\n', '            return 40;\n', '        if(usdSum >= 1e5*100)\n', '            return 30;\n', '        if(usdSum >= 7.5e4*100)\n', '            return 20;\n', '        if(usdSum >= 5e4*100)\n', '            return 10;\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * Computes number of tokens with bonus for the specified ether. Correctly\n', '    * adds bonuses if the sum is large enough to belong to several bonus intervals\n', '    */\n', '    function getTokensAmount(uint etherVal) public view returns (uint) {\n', '        uint bonus = getBonus(etherVal);\n', '        uint tokens = etherVal.mul(ethPrice).mul(100 + bonus).div(ETR_USD_PRICE*100);\n', '        return tokens;\n', '    }\n', '\n', '    function buy(address to) public payable onlyOpen {\n', '        uint amount = msg.value;\n', '        uint tokens = getTokensAmountUnderCap(amount);\n', '\n', '        owner.transfer(amount);\n', '        token.mint(to, tokens);\n', '\n', '        Buy(to, tokens);\n', '    }\n', '\n', '    function () public payable{\n', '        buy(msg.sender);\n', '    }\n', '\n', '    // Modifiers\n', '    // =================\n', '\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authority || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRobot() {\n', '        require(msg.sender == robot);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOpen() {\n', '        require(isOpen);\n', '        _;\n', '    }\n', '\n', '    // Priveleged functions\n', '    // ====================\n', '\n', '    /**\n', '    * Used to buy tokens for altcoins.\n', '    * Robot may call it before TokenSale officially starts to migrate early investors\n', '    */\n', '    function buyAlt(address to, uint etherAmount, string _txHash) public onlyRobot {\n', '        uint tokens = getTokensAmountUnderCap(etherAmount);\n', '        token.mint(to, tokens);\n', '        AltBuy(to, tokens, _txHash);\n', '    }\n', '\n', '    function setAuthority(address _authority) public onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function setRobot(address _robot) public onlyAuthority {\n', '        robot = _robot;\n', '    }\n', '\n', '    function setPrice(uint usdPerEther) public onlyAuthority {\n', '        //Ether is not expected to rate less than $1 and more than $100000 during presale\n', '        require(1*100 <= usdPerEther && usdPerEther <= 100000*100);\n', '        ethPrice = usdPerEther;\n', '        PriceSet(ethPrice);\n', '    }\n', '\n', '    // SALE state management: start / pause / finalize\n', '    // --------------------------------------------\n', '    function open(bool _open) public onlyAuthority {\n', '        isOpen = _open;\n', '        if (_open) {\n', '            RunSale();\n', '        } else {\n', '            PauseSale();\n', '        }\n', '    }\n', '\n', '    function finalize() public onlyAuthority {\n', '        uint diff = CAP.sub(token.totalSupply());\n', '        if(diff > 0) //The unsold capacity moves to team\n', '            token.mint(owner, diff);\n', '        token.stopMinting();\n', '        selfdestruct(owner);\n', '        FinishSale();\n', '    }\n', '\n', '    // Private functions\n', '    // =========================\n', '\n', '    /**\n', '    * Gets tokens for specified ether provided that they are still under the cap\n', '    */\n', '    function getTokensAmountUnderCap(uint etherAmount) private view returns (uint){\n', '        uint tokens = getTokensAmount(etherAmount);\n', '        require(tokens > 0);\n', '        require(tokens.add(token.totalSupply()) <= SALE_CAP);\n', '        return tokens;\n', '    }\n', '\n', '}']
