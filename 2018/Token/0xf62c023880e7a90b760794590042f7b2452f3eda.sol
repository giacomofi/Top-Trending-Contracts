['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/EtherRichLand.sol\n', '\n', 'contract EtherRichLand is Ownable, StandardToken {\n', '    string public constant name = "Ether Rich Land"; // name of token\n', '    string public constant symbol = "ERL"; // symbol of token\n', '    //uint8 public constant decimals = 18;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Investor {\n', '        uint256 weiDonated;\n', '        uint256 weiIncome;\n', '        address landlord;\n', '        uint256 taxRate;\n', '    }\n', '\n', '    mapping(uint256 => Investor) Land;\n', '    uint256 public weiCollected = 0;\n', '    uint256 public constant landTotal = 100;\n', '    address public constant manager1 = 0x978076A6a69A29f6f114072950A4AF9D2bB23435;\n', '    address public constant manager2 = 0xB362D19e44CbA1625d3837149F31bEaf318f5E61;\n', '    address public constant manager3 = 0xF62C64729717E230445C3A1Bbfc0c8fbdb9CCB72;\n', '\n', '   //address private crowdsale;\n', ' \n', '  constructor(\n', '    ) public {\n', '    //crowdsale = address(this);\n', '  }\n', '\n', '\n', '  function () external payable {\n', '\n', '    require(msg.value >= 0.001 ether); // minimal ether to buy\n', '\n', '    playGame(msg.sender, msg.value); // the msg.value is in wei\n', '  }\n', '\n', '\n', '  function getLandTaxRate(uint256 _value) internal pure returns (uint256) {\n', '    require(_value > 0);\n', '    uint256 _taxRate = 0;\n', '\n', '    if (_value > 0 && _value <= 1 ether) {\n', '        _taxRate = 1;\n', '    } else if (_value > 1 ether && _value <= 10 ether) {\n', '        _taxRate = 5;\n', '    } else if (_value > 10 ether && _value <= 100 ether) {\n', '        _taxRate = 10;\n', '    } else if (_value > 100 ether && _value <= 500 ether) {\n', '        _taxRate = 15;\n', '    } else if (_value > 500 ether && _value <= 1000 ether) {\n', '        _taxRate = 20;\n', '    } else if (_value > 1000 ether) {\n', '        _taxRate = 30;\n', '    }\n', '    return _taxRate;\n', '  }\n', '\n', '\n', '  function playGame(address _from, uint256 _value) private  \n', '  {\n', '    require(_from != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(_value > 0);\n', '\n', '    // the unit of the msg.value is in wei \n', '    uint256 _landId = uint256(blockhash(block.number-1))%landTotal;\n', '    uint256 _chanceId = uint256(blockhash(block.number-1))%10;\n', '\n', '    uint256 weiTotal;\n', '    address landlord;\n', '    uint256 weiToLandlord;\n', '    uint256 weiToSender;\n', '\n', '    if (Land[_landId].weiDonated > 0) {\n', '        // there is a landlord in the land\n', '        if (_from != Land[_landId].landlord) {\n', '            if (_chanceId == 5) {\n', '                // the old landlord get his wei and his landlord role is ended\n', '                weiTotal = Land[_landId].weiDonated + Land[_landId].weiIncome;\n', '                landlord = Land[_landId].landlord;\n', '                // the new player is the new landlord\n', '                Land[_landId].weiDonated = _value;\n', '                Land[_landId].weiIncome = 0;\n', '                Land[_landId].landlord = _from;\n', '                Land[_landId].taxRate = getLandTaxRate(_value);\n', '\n', '                landlord.transfer(weiTotal);\n', '            } else {\n', '                // pay tax to the landlord\n', '                weiToLandlord = _value * Land[_landId].taxRate / 100;\n', '                weiToSender = _value - weiToLandlord;\n', '                Land[_landId].weiIncome += weiToLandlord;\n', '\n', '                _from.transfer(weiToSender);\n', '            }\n', '        } else {\n', '            // change the tax rate of the land\n', '            Land[_landId].weiDonated += _value;\n', '            Land[_landId].taxRate = getLandTaxRate(Land[_landId].weiDonated);\n', '        }   \n', '    } else {\n', '        // no landlord in the land\n', '        Land[_landId].weiDonated = _value;\n', '        Land[_landId].weiIncome = 0;\n', '        Land[_landId].landlord = _from;\n', '        Land[_landId].taxRate = getLandTaxRate(_value);\n', '    }\n', '  }\n', '\n', '\n', '  function sellLand() public {\n', '    uint256 _landId;\n', '    uint256 totalWei = 0;\n', '    //uint256 totalIncome = 0;\n', '    address _from;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == msg.sender) {\n', '            totalWei += Land[_landId].weiDonated;\n', '            totalWei += Land[_landId].weiIncome;\n', '            //totalIncome += Land[_landId].weiIncome;\n', '            Land[_landId].weiDonated = 0;\n', '            Land[_landId].weiIncome = 0;\n', '            Land[_landId].landlord = 0x0;\n', '            Land[_landId].taxRate = 0;\n', '        }\n', '    }\n', '    if (totalWei > 0) {\n', '        uint256 communityFunding = totalWei * 1 / 100;\n', '        uint256 finalWei = totalWei - communityFunding;\n', '\n', '        weiCollected += communityFunding;\n', '        _from = msg.sender;\n', '        _from.transfer(finalWei);\n', '    }\n', '  }\n', '\n', '  function getMyBalance() view public returns (uint256, uint256, uint256) {\n', '    require(msg.sender != 0x0);\n', '    uint256 _landId;\n', '    uint256 _totalWeiDonated = 0;\n', '    uint256 _totalWeiIncome = 0;\n', '    uint256 _totalLand = 0;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == msg.sender) {\n', '            _totalWeiDonated += Land[_landId].weiDonated;\n', '            _totalWeiIncome += Land[_landId].weiIncome;\n', '            _totalLand += 1;\n', '        }\n', '    }\n', '    return (_totalLand, _totalWeiDonated, _totalWeiIncome);\n', '  }\n', '\n', '  function getBalanceOfAccount(address _to) view public onlyOwner() returns (uint256, uint256, uint256) {\n', '    require(_to != 0x0);\n', '\n', '    uint256 _landId;\n', '    uint256 _totalWeiDonated = 0;\n', '    uint256 _totalWeiIncome = 0;\n', '    uint256 _totalLand = 0;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == _to) {\n', '            _totalWeiDonated += Land[_landId].weiDonated;\n', '            _totalWeiIncome += Land[_landId].weiIncome;\n', '            _totalLand += 1;\n', '        }\n', '    }\n', '    return (_totalLand, _totalWeiDonated, _totalWeiIncome);\n', '  }\n', '\n', '  function sendFunding(address _to, uint256 _value) public onlyOwner() {\n', '    require(_to != 0x0);\n', '    require(_to == manager1 || _to == manager2 || _to == manager3);\n', '    require(_value > 0);\n', '    require(weiCollected >= _value);\n', '\n', '    weiCollected -= _value;\n', '    _to.transfer(_value); // wei\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/EtherRichLand.sol\n', '\n', 'contract EtherRichLand is Ownable, StandardToken {\n', '    string public constant name = "Ether Rich Land"; // name of token\n', '    string public constant symbol = "ERL"; // symbol of token\n', '    //uint8 public constant decimals = 18;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Investor {\n', '        uint256 weiDonated;\n', '        uint256 weiIncome;\n', '        address landlord;\n', '        uint256 taxRate;\n', '    }\n', '\n', '    mapping(uint256 => Investor) Land;\n', '    uint256 public weiCollected = 0;\n', '    uint256 public constant landTotal = 100;\n', '    address public constant manager1 = 0x978076A6a69A29f6f114072950A4AF9D2bB23435;\n', '    address public constant manager2 = 0xB362D19e44CbA1625d3837149F31bEaf318f5E61;\n', '    address public constant manager3 = 0xF62C64729717E230445C3A1Bbfc0c8fbdb9CCB72;\n', '\n', '   //address private crowdsale;\n', ' \n', '  constructor(\n', '    ) public {\n', '    //crowdsale = address(this);\n', '  }\n', '\n', '\n', '  function () external payable {\n', '\n', '    require(msg.value >= 0.001 ether); // minimal ether to buy\n', '\n', '    playGame(msg.sender, msg.value); // the msg.value is in wei\n', '  }\n', '\n', '\n', '  function getLandTaxRate(uint256 _value) internal pure returns (uint256) {\n', '    require(_value > 0);\n', '    uint256 _taxRate = 0;\n', '\n', '    if (_value > 0 && _value <= 1 ether) {\n', '        _taxRate = 1;\n', '    } else if (_value > 1 ether && _value <= 10 ether) {\n', '        _taxRate = 5;\n', '    } else if (_value > 10 ether && _value <= 100 ether) {\n', '        _taxRate = 10;\n', '    } else if (_value > 100 ether && _value <= 500 ether) {\n', '        _taxRate = 15;\n', '    } else if (_value > 500 ether && _value <= 1000 ether) {\n', '        _taxRate = 20;\n', '    } else if (_value > 1000 ether) {\n', '        _taxRate = 30;\n', '    }\n', '    return _taxRate;\n', '  }\n', '\n', '\n', '  function playGame(address _from, uint256 _value) private  \n', '  {\n', '    require(_from != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(_value > 0);\n', '\n', '    // the unit of the msg.value is in wei \n', '    uint256 _landId = uint256(blockhash(block.number-1))%landTotal;\n', '    uint256 _chanceId = uint256(blockhash(block.number-1))%10;\n', '\n', '    uint256 weiTotal;\n', '    address landlord;\n', '    uint256 weiToLandlord;\n', '    uint256 weiToSender;\n', '\n', '    if (Land[_landId].weiDonated > 0) {\n', '        // there is a landlord in the land\n', '        if (_from != Land[_landId].landlord) {\n', '            if (_chanceId == 5) {\n', '                // the old landlord get his wei and his landlord role is ended\n', '                weiTotal = Land[_landId].weiDonated + Land[_landId].weiIncome;\n', '                landlord = Land[_landId].landlord;\n', '                // the new player is the new landlord\n', '                Land[_landId].weiDonated = _value;\n', '                Land[_landId].weiIncome = 0;\n', '                Land[_landId].landlord = _from;\n', '                Land[_landId].taxRate = getLandTaxRate(_value);\n', '\n', '                landlord.transfer(weiTotal);\n', '            } else {\n', '                // pay tax to the landlord\n', '                weiToLandlord = _value * Land[_landId].taxRate / 100;\n', '                weiToSender = _value - weiToLandlord;\n', '                Land[_landId].weiIncome += weiToLandlord;\n', '\n', '                _from.transfer(weiToSender);\n', '            }\n', '        } else {\n', '            // change the tax rate of the land\n', '            Land[_landId].weiDonated += _value;\n', '            Land[_landId].taxRate = getLandTaxRate(Land[_landId].weiDonated);\n', '        }   \n', '    } else {\n', '        // no landlord in the land\n', '        Land[_landId].weiDonated = _value;\n', '        Land[_landId].weiIncome = 0;\n', '        Land[_landId].landlord = _from;\n', '        Land[_landId].taxRate = getLandTaxRate(_value);\n', '    }\n', '  }\n', '\n', '\n', '  function sellLand() public {\n', '    uint256 _landId;\n', '    uint256 totalWei = 0;\n', '    //uint256 totalIncome = 0;\n', '    address _from;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == msg.sender) {\n', '            totalWei += Land[_landId].weiDonated;\n', '            totalWei += Land[_landId].weiIncome;\n', '            //totalIncome += Land[_landId].weiIncome;\n', '            Land[_landId].weiDonated = 0;\n', '            Land[_landId].weiIncome = 0;\n', '            Land[_landId].landlord = 0x0;\n', '            Land[_landId].taxRate = 0;\n', '        }\n', '    }\n', '    if (totalWei > 0) {\n', '        uint256 communityFunding = totalWei * 1 / 100;\n', '        uint256 finalWei = totalWei - communityFunding;\n', '\n', '        weiCollected += communityFunding;\n', '        _from = msg.sender;\n', '        _from.transfer(finalWei);\n', '    }\n', '  }\n', '\n', '  function getMyBalance() view public returns (uint256, uint256, uint256) {\n', '    require(msg.sender != 0x0);\n', '    uint256 _landId;\n', '    uint256 _totalWeiDonated = 0;\n', '    uint256 _totalWeiIncome = 0;\n', '    uint256 _totalLand = 0;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == msg.sender) {\n', '            _totalWeiDonated += Land[_landId].weiDonated;\n', '            _totalWeiIncome += Land[_landId].weiIncome;\n', '            _totalLand += 1;\n', '        }\n', '    }\n', '    return (_totalLand, _totalWeiDonated, _totalWeiIncome);\n', '  }\n', '\n', '  function getBalanceOfAccount(address _to) view public onlyOwner() returns (uint256, uint256, uint256) {\n', '    require(_to != 0x0);\n', '\n', '    uint256 _landId;\n', '    uint256 _totalWeiDonated = 0;\n', '    uint256 _totalWeiIncome = 0;\n', '    uint256 _totalLand = 0;\n', '\n', '    for(_landId=0; _landId<landTotal;_landId++) {\n', '        if (Land[_landId].landlord == _to) {\n', '            _totalWeiDonated += Land[_landId].weiDonated;\n', '            _totalWeiIncome += Land[_landId].weiIncome;\n', '            _totalLand += 1;\n', '        }\n', '    }\n', '    return (_totalLand, _totalWeiDonated, _totalWeiIncome);\n', '  }\n', '\n', '  function sendFunding(address _to, uint256 _value) public onlyOwner() {\n', '    require(_to != 0x0);\n', '    require(_to == manager1 || _to == manager2 || _to == manager3);\n', '    require(_value > 0);\n', '    require(weiCollected >= _value);\n', '\n', '    weiCollected -= _value;\n', '    _to.transfer(_value); // wei\n', '  }\n', '}']
