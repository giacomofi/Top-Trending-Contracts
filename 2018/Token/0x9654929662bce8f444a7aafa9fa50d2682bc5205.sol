['pragma  solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable{\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '    \n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', ' \n', '    /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '    \n', '}\n', '\n', 'contract VTEXP is Ownable {\n', ' \n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  using SafeMath for uint256;\n', '  string public constant name = "VTEX Promo Token";\n', '  string public constant symbol = "VTEXP";\n', '  uint8 public constant decimals = 5;  // 18 is the most common number of decimal places\n', '  bool public mintingFinished = false;\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', ' \n', '  /**\n', '  * @dev Function to mint tokens\n', '  * @param _to The address that will receive the minted tokens.\n', '  * @param _amount The amount of tokens to mint.\n', '  * @return A boolean that indicates if the operation was successful.\n', '  */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    require(totalSupply <= 10000000000000);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit  Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to stop minting new tokens.\n', '  * @return True if the operation was successful.\n', '  */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= totalSupply);\n', '\n', '      balances[_to] = balances[_to].add(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      emit Transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', ' \n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', ' \n', ' \n', ' \n', '\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function balanceEth(address _owner) public constant returns (uint256 balance) {\n', '    return _owner.balance;\n', '  }\n', '    \n', '\n', '}']