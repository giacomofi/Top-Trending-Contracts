['pragma solidity ^0.4.22;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * A standard interface allows any tokens on Ethereum to be re-used by \n', ' * other applications: from wallets to decentralized exchanges.\n', ' */\n', 'contract ERC20 {\n', '\n', '    // optional functions\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '\n', '    // required functios\n', '    function balanceOf(address user) public view returns (uint256);\n', '    function allowance(address user, address spender) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool); \n', '    function approve(address spender, uint256 value) public returns (bool); \n', '\n', '    // required events\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed user, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenCC is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    address private _owner;\n', '    bool private _isStopped = false;\n', '    string private _name = "CChain CCHN";\n', '    string private _symbol = "CCHN";\n', '    uint8 private _decimals = 18;\n', '    uint256 private _totalSupply;\n', '\n', '    mapping (address => uint256) private _balanceOf;\n', '    mapping (address => mapping (address => uint256)) private _allowance;\n', '\n', '    event Mint(address indexed from, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 tokenSupply) public {\n', '        _owner = msg.sender;\n', '        _totalSupply = tokenSupply * 10 ** uint256(_decimals);\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    modifier unstopped() {\n', '        require(msg.sender == _owner || _isStopped == false);\n', '        _;\n', '    }\n', '\n', '    function owner() public view returns (address){\n', '        return _owner;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        if(_isStopped) {\n', '            _isStopped = false;\n', '        }\n', '    }\n', '\n', '    function stop() public onlyOwner {\n', '        if(_isStopped == false) {\n', '            _isStopped = true;\n', '        }\n', '    }\n', '\n', '    function isStopped() public view returns (bool) {\n', '        return _isStopped;\n', '    }\n', '\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function balanceOf(address user) public view returns (uint256) {\n', '        return _balanceOf[user];\n', '    }\n', '\n', '    function allowance(address user, address spender) public view returns (uint256) {\n', '        return _allowance[user][spender];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transferImpl(address from, address to, uint256 value) internal {\n', '        require(to != 0x0);\n', '        require(value > 0);\n', '        require(_balanceOf[from] >= value);\n', '        _balanceOf[from] = _balanceOf[from].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public unstopped returns (bool) {\n', '        transferImpl(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public unstopped returns (bool) {\n', '        require(value <= _allowance[from][msg.sender]);\n', '        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\n', '        transferImpl(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public unstopped returns (bool) {\n', '        _allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function mint(uint256 value) public onlyOwner {\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balanceOf[owner()] = _balanceOf[owner()].add(value);\n', '        emit Mint(owner(), value);\n', '    }\n', '\n', '    function burn(uint256 value) public unstopped returns (bool) {\n', '        require(_balanceOf[msg.sender] >= value);\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * A standard interface allows any tokens on Ethereum to be re-used by \n', ' * other applications: from wallets to decentralized exchanges.\n', ' */\n', 'contract ERC20 {\n', '\n', '    // optional functions\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '\n', '    // required functios\n', '    function balanceOf(address user) public view returns (uint256);\n', '    function allowance(address user, address spender) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool); \n', '    function approve(address spender, uint256 value) public returns (bool); \n', '\n', '    // required events\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed user, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenCC is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    address private _owner;\n', '    bool private _isStopped = false;\n', '    string private _name = "CChain CCHN";\n', '    string private _symbol = "CCHN";\n', '    uint8 private _decimals = 18;\n', '    uint256 private _totalSupply;\n', '\n', '    mapping (address => uint256) private _balanceOf;\n', '    mapping (address => mapping (address => uint256)) private _allowance;\n', '\n', '    event Mint(address indexed from, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 tokenSupply) public {\n', '        _owner = msg.sender;\n', '        _totalSupply = tokenSupply * 10 ** uint256(_decimals);\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    modifier unstopped() {\n', '        require(msg.sender == _owner || _isStopped == false);\n', '        _;\n', '    }\n', '\n', '    function owner() public view returns (address){\n', '        return _owner;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        if(_isStopped) {\n', '            _isStopped = false;\n', '        }\n', '    }\n', '\n', '    function stop() public onlyOwner {\n', '        if(_isStopped == false) {\n', '            _isStopped = true;\n', '        }\n', '    }\n', '\n', '    function isStopped() public view returns (bool) {\n', '        return _isStopped;\n', '    }\n', '\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function balanceOf(address user) public view returns (uint256) {\n', '        return _balanceOf[user];\n', '    }\n', '\n', '    function allowance(address user, address spender) public view returns (uint256) {\n', '        return _allowance[user][spender];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transferImpl(address from, address to, uint256 value) internal {\n', '        require(to != 0x0);\n', '        require(value > 0);\n', '        require(_balanceOf[from] >= value);\n', '        _balanceOf[from] = _balanceOf[from].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public unstopped returns (bool) {\n', '        transferImpl(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public unstopped returns (bool) {\n', '        require(value <= _allowance[from][msg.sender]);\n', '        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\n', '        transferImpl(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public unstopped returns (bool) {\n', '        _allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function mint(uint256 value) public onlyOwner {\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balanceOf[owner()] = _balanceOf[owner()].add(value);\n', '        emit Mint(owner(), value);\n', '    }\n', '\n', '    function burn(uint256 value) public unstopped returns (bool) {\n', '        require(_balanceOf[msg.sender] >= value);\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '}']
