['pragma solidity ^0.4.24;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '     address public owner; // current owner of the contract\n', '     uint256 public feesA = 1; \n', '     uint256 public feesB = 1; \n', '     uint256 public feesC = 1; \n', '     uint256 public feesD = 1; \n', '     address public addressA = 0xC61994B01607Ed7351e1D4FEE93fb0e661ceE39c;\n', '     address public addressB = 0x821D44F1d04936e8b95D2FFAE91DFDD6E6EA39F9;\n', '     address public addressC = 0xf193c2EC62466fd338710afab04574E7Eeb6C0e2;\n', '     address public addressD = 0x3105889390F894F8ee1d3f8f75E2c4dde57735bA;\n', '     \n', 'function founder() private {  // contract&#39;s constructor function\n', '        owner = msg.sender;\n', '        }\n', 'function change_owner (address newOwner) public{\n', '        require(owner == msg.sender);\n', '        owner = newOwner;\n', '        emit Changeownerlog(newOwner);\n', '    }\n', '    \n', 'function setfees (uint256 _value1, uint256 _value2, uint256 _value3, uint256 _value4) public {\n', '      require(owner == msg.sender);\n', '      if (_value1>0 && _value2>0 && _value3>0 &&_value4>0){\n', '      feesA = _value1;\n', '      feesB = _value2;\n', '      feesC = _value3;\n', '      feesD = _value4;\n', '      emit Setfeeslog(_value1,_value2,_value3,_value4);\n', '      }else {\n', '          \n', '      }\n', '}\n', '    \n', 'function setaddress (address _address1, address _address2, address _address3, address _address4) public {\n', '   require(owner == msg.sender);\n', '   addressA = _address1;\n', '   addressB = _address2;\n', '   addressC = _address3;\n', '   addressD = _address4;\n', '   emit Setfeeaddrlog(_address1,_address2,_address3,_address4);\n', '   }\n', '\n', '    \n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Fee1(address indexed from, address indexed to, uint256 value);\n', '    event Fee2(address indexed from, address indexed to, uint256 value);\n', '    event Fee3(address indexed from, address indexed to, uint256 value);\n', '    event Fee4(address indexed from, address indexed to, uint256 value);\n', '    // Reissue\n', '    event Reissuelog(uint256 value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value); \n', '    //setfees\n', '    event Setfeeslog(uint256 fee1,uint256 fee2,uint256 fee3,uint256 fee4);\n', '    //setfeeaddress\n', '    event Setfeeaddrlog(address,address,address,address);\n', '    //changeowner\n', '    event Changeownerlog(address);\n', '        \n', '     /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = msg.sender;                                 // Set contract owner\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        uint256 fees1 = (feesA *_value)/10000;\n', '        uint256 fees2 = (feesB *_value)/10000;\n', '        uint256 fees3 = (feesC *_value)/10000;\n', '        uint256 fees4 = (feesD *_value)/10000;\n', '        _value -= (fees1+fees2+fees3+fees4);\n', '        _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        _transfer(msg.sender, addressA, fees1);\n', '        emit Fee1(msg.sender, addressA, fees1);\n', '        _transfer(msg.sender, addressB, fees2);\n', '        emit Fee2(msg.sender, addressB, fees2);\n', '        _transfer(msg.sender, addressC, fees3);\n', '        emit Fee3(msg.sender, addressC, fees3);\n', '        _transfer(msg.sender, addressD, fees4);\n', '        emit Fee4(msg.sender, addressD, fees4);\n', '        }\n', '            \n', '\n', '    function Reissue(uint256 _value) public  {\n', '        require(owner == msg.sender);\n', '        balanceOf[msg.sender] += _value;            // Add to the sender\n', '        totalSupply += _value;                      // Updates totalSupply\n', '        emit Reissuelog(_value);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '     address public owner; // current owner of the contract\n', '     uint256 public feesA = 1; \n', '     uint256 public feesB = 1; \n', '     uint256 public feesC = 1; \n', '     uint256 public feesD = 1; \n', '     address public addressA = 0xC61994B01607Ed7351e1D4FEE93fb0e661ceE39c;\n', '     address public addressB = 0x821D44F1d04936e8b95D2FFAE91DFDD6E6EA39F9;\n', '     address public addressC = 0xf193c2EC62466fd338710afab04574E7Eeb6C0e2;\n', '     address public addressD = 0x3105889390F894F8ee1d3f8f75E2c4dde57735bA;\n', '     \n', "function founder() private {  // contract's constructor function\n", '        owner = msg.sender;\n', '        }\n', 'function change_owner (address newOwner) public{\n', '        require(owner == msg.sender);\n', '        owner = newOwner;\n', '        emit Changeownerlog(newOwner);\n', '    }\n', '    \n', 'function setfees (uint256 _value1, uint256 _value2, uint256 _value3, uint256 _value4) public {\n', '      require(owner == msg.sender);\n', '      if (_value1>0 && _value2>0 && _value3>0 &&_value4>0){\n', '      feesA = _value1;\n', '      feesB = _value2;\n', '      feesC = _value3;\n', '      feesD = _value4;\n', '      emit Setfeeslog(_value1,_value2,_value3,_value4);\n', '      }else {\n', '          \n', '      }\n', '}\n', '    \n', 'function setaddress (address _address1, address _address2, address _address3, address _address4) public {\n', '   require(owner == msg.sender);\n', '   addressA = _address1;\n', '   addressB = _address2;\n', '   addressC = _address3;\n', '   addressD = _address4;\n', '   emit Setfeeaddrlog(_address1,_address2,_address3,_address4);\n', '   }\n', '\n', '    \n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Fee1(address indexed from, address indexed to, uint256 value);\n', '    event Fee2(address indexed from, address indexed to, uint256 value);\n', '    event Fee3(address indexed from, address indexed to, uint256 value);\n', '    event Fee4(address indexed from, address indexed to, uint256 value);\n', '    // Reissue\n', '    event Reissuelog(uint256 value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value); \n', '    //setfees\n', '    event Setfeeslog(uint256 fee1,uint256 fee2,uint256 fee3,uint256 fee4);\n', '    //setfeeaddress\n', '    event Setfeeaddrlog(address,address,address,address);\n', '    //changeowner\n', '    event Changeownerlog(address);\n', '        \n', '     /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = msg.sender;                                 // Set contract owner\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        uint256 fees1 = (feesA *_value)/10000;\n', '        uint256 fees2 = (feesB *_value)/10000;\n', '        uint256 fees3 = (feesC *_value)/10000;\n', '        uint256 fees4 = (feesD *_value)/10000;\n', '        _value -= (fees1+fees2+fees3+fees4);\n', '        _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        _transfer(msg.sender, addressA, fees1);\n', '        emit Fee1(msg.sender, addressA, fees1);\n', '        _transfer(msg.sender, addressB, fees2);\n', '        emit Fee2(msg.sender, addressB, fees2);\n', '        _transfer(msg.sender, addressC, fees3);\n', '        emit Fee3(msg.sender, addressC, fees3);\n', '        _transfer(msg.sender, addressD, fees4);\n', '        emit Fee4(msg.sender, addressD, fees4);\n', '        }\n', '            \n', '\n', '    function Reissue(uint256 _value) public  {\n', '        require(owner == msg.sender);\n', '        balanceOf[msg.sender] += _value;            // Add to the sender\n', '        totalSupply += _value;                      // Updates totalSupply\n', '        emit Reissuelog(_value);\n', '    }\n', '    \n', '}']
