['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SplitPayment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitPayment {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public totalShares = 0;\n', '  uint256 public totalReleased = 0;\n', '\n', '  mapping(address => uint256) public shares;\n', '  mapping(address => uint256) public released;\n', '  address[] public payees;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  constructor(address[] _payees, uint256[] _shares) public payable {\n', '    require(_payees.length == _shares.length);\n', '\n', '    for (uint256 i = 0; i < _payees.length; i++) {\n', '      addPayee(_payees[i], _shares[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev payable fallback\n', '   */\n', '  function () public payable {}\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim() public {\n', '    address payee = msg.sender;\n', '\n', '    require(shares[payee] > 0);\n', '\n', '    uint256 totalReceived = address(this).balance.add(totalReleased);\n', '    uint256 payment = totalReceived.mul(\n', '      shares[payee]).div(\n', '        totalShares).sub(\n', '          released[payee]\n', '    );\n', '\n', '    require(payment != 0);\n', '    require(address(this).balance >= payment);\n', '\n', '    released[payee] = released[payee].add(payment);\n', '    totalReleased = totalReleased.add(payment);\n', '\n', '    payee.transfer(payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[_payee] = _shares;\n', '    totalShares = totalShares.add(_shares);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PFM token contract\n', ' * @dev ERC20-compatible token which is mintable, capped and timed crowdsalable\n', ' */\n', '\n', 'contract PFMToken is StandardToken, DetailedERC20, SplitPayment {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event Purchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  string constant TOKEN_NAME = "Prayer For Money";\n', '  string constant TOKEN_SYMBOL = "PFM";\n', '  uint8 constant TOKEN_DECIMALS = 18;\n', '  uint256 constant EXCHANGE_RATE = 10000;\n', '  uint256 constant HARD_CAP = 20000000 * (uint256(10)**TOKEN_DECIMALS);\n', '  uint256 constant MIN_PURCHASE = 1000 * (uint256(10)**(TOKEN_DECIMALS - 2));\n', '\n', '  uint256 public exchangeRate;          // Token units per wei on purchase\n', '  uint256 public hardCap;               // Maximum mintable tokens\n', '  uint256 public minPurchase;           // Minimum purchase tokens\n', '  uint256 public crowdsaleOpeningTime;  // Starting time for crowdsale\n', '  uint256 public crowdsaleClosingTime;  // Finishing time for crowdsale\n', '  uint256 public fundRaised;            // Amount of wei raised\n', '\n', '  constructor(\n', '    address[] _founders,\n', '    uint256[] _founderShares,\n', '    uint256 _crowdsaleOpeningTime, \n', '    uint256 _crowdsaleClosingTime\n', '  )\n', '    DetailedERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\n', '    SplitPayment(_founders, _founderShares)\n', '    public \n', '  {\n', '    require(_crowdsaleOpeningTime <= _crowdsaleClosingTime);\n', '\n', '    exchangeRate = EXCHANGE_RATE;\n', '    hardCap = HARD_CAP;\n', '    minPurchase = MIN_PURCHASE;\n', '    crowdsaleOpeningTime = _crowdsaleOpeningTime;\n', '    crowdsaleClosingTime = _crowdsaleClosingTime;\n', '\n', '    for (uint i = 0; i < _founders.length; i++) {\n', '      _mint(_founders[i], _founderShares[i]);\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function () public payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokenAmount = _getTokenAmount(weiAmount);\n', '\n', '    _validatePurchase(_beneficiary, weiAmount, tokenAmount);\n', '    _processPurchase(_beneficiary, weiAmount, tokenAmount);\n', '\n', '    emit Purchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokenAmount\n', '    );\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _validatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal view\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(_tokenAmount >= minPurchase);\n', '    require(totalSupply_ + _tokenAmount <= hardCap);\n', '    require(block.timestamp >= crowdsaleOpeningTime);\n', '    require(block.timestamp <= crowdsaleClosingTime);\n', '  }\n', '\n', '  /**\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _mint(_beneficiary, _tokenAmount);\n', '    fundRaised = fundRaised.add(_weiAmount);\n', '  }\n', '\n', '  /**\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _mint(\n', '    address _beneficiary, \n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    totalSupply_ = totalSupply_.add(_tokenAmount);\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '\n', '    emit Transfer(address(0), _beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(exchangeRate);\n', '  }\n', '}']