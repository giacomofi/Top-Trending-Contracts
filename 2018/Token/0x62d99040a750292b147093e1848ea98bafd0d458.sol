['pragma solidity ^0.4.23;\n', '\n', 'contract EthereumOneToken {\n', '    /* ERC20 Public variables of the token */\n', '    string public constant version = &#39;DU30 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* ERC20 This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '\n', '    /* store the block number when a withdrawal has been requested*/\n', '    mapping (address => withdrawalRequest) public withdrawalRequests;\n', '    struct withdrawalRequest {\n', '    uint sinceTime;\n', '    uint256 amount;\n', '    }\n', '\n', '    uint256 public constant initialSupply = 1000000000;\n', '\n', '    /**\n', '     * ERC20 events these generate a public event on the blockchain that will notify clients\n', '    */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Deposited(address indexed by, uint256 amount);\n', '\n', '    /**\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     * In our case, there&#39;s no initial supply. Tokens will be created as ether is sent\n', '     * to the fall-back function. Then tokens are burned when ether is withdrawn.\n', '     */\n', '    function EthereumOneToken(\n', '    string tokenName,\n', '    uint8 decimalUnits,\n', '    string tokenSymbol\n', '    ) {\n', '\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens (0 in this case)\n', '        totalSupply = initialSupply * 1000000000000000000;  // Update total supply (0 in this case)\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '  \n', '    modifier notPendingWithdrawal {\n', '        if (withdrawalRequests[msg.sender].sinceTime > 0) throw;\n', '        _;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) notPendingWithdrawal {\n', '        if (balanceOf[msg.sender] < _value) throw;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        if (withdrawalRequests[_to].sinceTime > 0) throw;   \n', '        balanceOf[msg.sender] -= _value;                     \n', '        balanceOf[_to] += _value;                          \n', '        Transfer(msg.sender, _to, _value);               \n', '    }\n', '\n', ' \n', '    function approve(address _spender, uint256 _value) notPendingWithdrawal\n', '    returns (bool success) {\n', '        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) throw;\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;                                      // we must return a bool as part of the ERC20\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC-20 Approves and then calls the receiving contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) notPendingWithdrawal\n', '    returns (bool success) {\n', '\n', '        if (!approve(_spender, _value)) return false;\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '            throw;\n', '        }\n', '        return true;\n', '    }\n', '\n', '  \n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success) {\n', '        // on the behalf of _from\n', '        if (withdrawalRequests[_from].sinceTime > 0) throw;   \n', '        if (withdrawalRequests[_to].sinceTime > 0) throw;     \n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        if (_value > allowance[_from][msg.sender]) throw;     \n', '        balanceOf[_from] -= _value;                           \n', '        balanceOf[_to] += _value;                            \n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Fallback function when sending ether to the contract\n', '     * Gas use: 65051\n', '    */\n', '    function () payable notPendingWithdrawal {\n', '        uint256 amount = msg.value;         // amount that was sent\n', '        if (amount == 0) throw;             // need to send some ETH\n', '        balanceOf[msg.sender] += amount;    // mint new tokens\n', '        totalSupply += amount;              // track the supply\n', '        Transfer(0, msg.sender, amount);    // notify of the event\n', '        Deposited(msg.sender, amount);\n', '    }\n', '}']