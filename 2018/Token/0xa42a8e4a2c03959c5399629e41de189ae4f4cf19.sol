['pragma solidity ^0.4.24;\n', '\n', 'contract J8TTokenInterface {\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract FeeInterface {\n', '  function getFee(uint _base, uint _amount) external view returns (uint256 fee);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '  address private _admin;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  event AdministrationTransferred(\n', '    address indexed previousAdmin,\n', '    address indexed newAdmin\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the admin.\n', '   */\n', '  function admin() public view returns(address) {\n', '    return _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(isAdmin());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the admin of the contract.\n', '   */\n', '  function isAdmin() public view returns(bool) {\n', '    return msg.sender == _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer admin control of the contract to a newAdmin.\n', '   * @param newAdmin The address to transfer admin powers to.\n', '   */\n', '  function transferAdministration(address newAdmin) public onlyOwner {\n', '    _transferAdministration(newAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers admin control of the contract to a newAdmin.\n', '   * @param newAdmin The address to transfer admin power to.\n', '   */\n', '  function _transferAdministration(address newAdmin) internal {\n', '    require(newAdmin != address(0));\n', '    require(newAdmin != address(this));\n', '    emit AdministrationTransferred(_admin, newAdmin);\n', '    _admin = newAdmin;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused, "Contract is paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused, "Contract is not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract WalletCoordinator is Pausable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  J8TTokenInterface public tokenContract;\n', '  FeeInterface public feeContract;\n', '  address public custodian;\n', '\n', '  event TransferSuccess(\n', '    address indexed fromAddress,\n', '    address indexed toAddress,\n', '    uint amount,\n', '    uint networkFee\n', '  );\n', '\n', '  event TokenAddressUpdated(\n', '    address indexed oldAddress,\n', '    address indexed newAddress\n', '  );\n', '\n', '  event FeeContractAddressUpdated(\n', '    address indexed oldAddress,\n', '    address indexed newAddress\n', '  );\n', '\n', '  event CustodianAddressUpdated(\n', '    address indexed oldAddress,\n', '    address indexed newAddress\n', '  );\n', '\n', '  /**\n', '   * @dev Allows the current smart contract to transfer amount of tokens from fromAddress to toAddress\n', '   */\n', '  function transfer(address _fromAddress, address _toAddress, uint _amount, uint _baseFee) public onlyAdmin whenNotPaused {\n', '    require(_amount > 0, "Amount must be greater than zero");\n', '    require(_fromAddress != _toAddress,  "Addresses _fromAddress and _toAddress are equal");\n', '    require(_fromAddress != address(0), "Address _fromAddress is 0x0");\n', '    require(_fromAddress != address(this), "Address _fromAddress is smart contract address");\n', '    require(_toAddress != address(0), "Address _toAddress is 0x0");\n', '    require(_toAddress != address(this), "Address _toAddress is smart contract address");\n', '\n', '    uint networkFee = feeContract.getFee(_baseFee, _amount);\n', '    uint fromBalance = tokenContract.balanceOf(_fromAddress);\n', '\n', '    require(_amount <= fromBalance, "Insufficient account balance");\n', '\n', '    require(tokenContract.transferFrom(_fromAddress, _toAddress, _amount.sub(networkFee)), "transferFrom did not succeed");\n', '    require(tokenContract.transferFrom(_fromAddress, custodian, networkFee), "transferFrom fee did not succeed");\n', '\n', '    emit TransferSuccess(_fromAddress, _toAddress, _amount, networkFee);\n', '  }\n', '\n', '  function getFee(uint _base, uint _amount) public view returns (uint256) {\n', '    return feeContract.getFee(_base, _amount);\n', '  }\n', '\n', '  function setTokenInterfaceAddress(address _newAddress) external onlyOwner whenPaused returns (bool) {\n', '    require(_newAddress != address(this), "The new token address is equal to the smart contract address");\n', '    require(_newAddress != address(0), "The new token address is equal to 0x0");\n', '    require(_newAddress != address(tokenContract), "The new token address is equal to the old token address");\n', '\n', '    address _oldAddress = tokenContract;\n', '    tokenContract = J8TTokenInterface(_newAddress);\n', '\n', '    emit TokenAddressUpdated(_oldAddress, _newAddress);\n', '\n', '    return true;\n', '  }\n', '\n', '  function setFeeContractAddress(address _newAddress) external onlyOwner whenPaused returns (bool) {\n', '    require(_newAddress != address(this), "The new fee contract address is equal to the smart contract address");\n', '    require(_newAddress != address(0), "The new fee contract address is equal to 0x0");\n', '\n', '    address _oldAddress = feeContract;\n', '    feeContract = FeeInterface(_newAddress);\n', '\n', '    emit FeeContractAddressUpdated(_oldAddress, _newAddress);\n', '\n', '    return true;\n', '  }\n', '\n', '  function setCustodianAddress(address _newAddress) external onlyOwner returns (bool) {\n', '    require(_newAddress != address(this), "The new custodian address is equal to the smart contract address");\n', '    require(_newAddress != address(0), "The new custodian address is equal to 0x0");\n', '\n', '    address _oldAddress = custodian;\n', '    custodian = _newAddress;\n', '\n', '    emit CustodianAddressUpdated(_oldAddress, _newAddress);\n', '\n', '    return true;\n', '  }\n', '}']