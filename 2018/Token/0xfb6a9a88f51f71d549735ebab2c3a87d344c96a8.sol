['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/act/LuHuToken.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// Vingochain Token smart contract - ERC20 Token Interface\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', 'interface tokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract LuHuToken is PausableToken {\n', '\n', '  using SafeERC20 for ERC20;\n', '  using SafeMath for uint;\n', '\n', '  /*\n', '  NOTE:\n', '  The following variables are OPTIONAL vanities. One does not have to include them.\n', '  They allow one to customise the token contract & in no way influences the core functionality.\n', '  Some wallets/interfaces might not even bother to look at this information.\n', '  */\n', '\n', '  // token number for 1 ether\n', '  uint public constant TOKEN_PER_ETHER = 60000;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Individual transaction contribution min and max amounts\n', '    // Set to 0 to switch off, or `x ether`\n', '    // ------------------------------------------------------------------------\n', '  uint private CONTRIBUTIONS_MIN = 1 ether;\n', '\n', '  uint constant public OFFSET = 420;\n', '\n', '  uint constant public MIN_CROWSALE_TIME = 600;\n', '\n', '  uint8 public constant DECIMALS = 18;\n', '    \n', '  uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '\n', '  uint public constant TOKENS_TOTAL = 100 * 10 ** 8 * DECIMALSFACTOR;\n', '\n', '  uint public constant TOKENS_CAP_ICO = 25 * 10 ** 8 * DECIMALSFACTOR;\n', '\n', '  string public name = "LuHuToken";\n', '  \n', '  uint8 public decimals = DECIMALS;\n', '\n', '  uint public divider = 10 ** uint(18 - decimals);\n', '  \n', '  string public symbol;\n', '\n', '  mapping(address => uint256) public weiBalances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tranche 1 token sale start date and end date\n', '    // Do not use the `now` function here\n', '    // ICO start - Mar 1st 2018 @ 8:00 a.m.\n', '    // ICO end - 30 days later after ICO started.\n', '    // ------------------------------------------------------------------------\n', '  uint public period = 30 days;\n', '  uint public startDate = 1519862400;\n', '  uint public endDate = startDate + period;\n', '\n', '  function setStartDate(uint _startDate) public onlyOwner {\n', '    uint nowTime = getNow();\n', '    require(startDate > nowTime);\n', '    require(_startDate > nowTime);\n', '    startDate = _startDate;\n', '    uint tempEndDate = startDate.add(MIN_CROWSALE_TIME);\n', '    if (endDate < tempEndDate) {\n', '      endDate = tempEndDate;\n', '    }\n', '  }\n', '\n', '  function setEndDate(uint _endDate) public onlyOwner {\n', '    uint nowTime = getNow();\n', '    require(endDate > nowTime);\n', '    require(_endDate > nowTime);\n', '    endDate = _endDate;\n', '  }\n', '\n', '  address public wallet;\n', '\n', '  uint public fakeNow = 0;\n', '\n', '  uint public crowsaleShare = 0;\n', '\n', '  function getNow() internal view returns (uint) {\n', '    if (fakeNow == 0) {\n', '      return now;\n', '    }\n', '    return fakeNow;\n', '  }\n', '\n', '  modifier validAddress(address addr) {\n', '    require(addr != address(0x0));\n', '    _;\n', '  }\n', '\n', '  mapping(address => bool) userWhitelist;\n', '\n', '  function whitelist(address user) onlyOwner public {\n', '    userWhitelist[user] = true;\n', '  }\n', '\n', '  function unWhitelist(address user) onlyOwner public {\n', '    userWhitelist[user] = false;\n', '  }\n', '\n', '  function isInWhitelist(address user) internal view returns (bool) {\n', '    return userWhitelist[user];\n', '  }\n', '\n', '  function LuHuToken(string _symbol, address _wallet) validAddress(_wallet) public {\n', '    symbol = _symbol;\n', '    totalSupply_ = TOKENS_TOTAL;\n', '    wallet = _wallet;\n', '    balances[wallet] = totalSupply_;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Accept ethers to buy tokens during the crowdsale(ICO)\n', '  // ------------------------------------------------------------------------\n', '  function () external payable {\n', '    proxyPayment(msg.sender);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return getNow() > endDate;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Accept ethers from one account for tokens to be created for another\n', '  // account. Can be used by exchanges to purchase tokens on behalf of\n', '  // it&#39;s user\n', '  // ------------------------------------------------------------------------\n', '  function proxyPayment(address participant) public payable {\n', '    \n', '    require(participant != address(0x0));\n', '\n', '    uint nowTime = getNow();\n', '    require(nowTime >= startDate && nowTime <= endDate);\n', '\n', '    require(isInWhitelist(msg.sender));\n', '    require(isInWhitelist(participant));\n', '\n', '    uint weiRaised = msg.value;\n', '\n', '    require(weiRaised >= CONTRIBUTIONS_MIN);\n', '\n', '    uint tokens = TOKEN_PER_ETHER.mul(weiRaised);\n', '    crowsaleShare = crowsaleShare.add(tokens);\n', '\n', '    require(crowsaleShare <= TOKENS_CAP_ICO);\n', '    \n', '    weiBalances[participant] = weiBalances[participant].add(weiRaised);\n', '\n', '    balances[participant] = balances[participant].add(tokens);\n', '    balances[wallet] = balances[wallet].sub(tokens);\n', '\n', '    wallet.transfer(weiRaised);\n', '    TokenPurchase(wallet, msg.sender, participant, weiRaised, tokens);\n', '\n', '  }\n', '\n', '  function changeWallet(address _wallet) onlyOwner public {\n', '    \n', '    require(_wallet != address(0x0));\n', '    \n', '    require(_wallet != wallet);\n', '\n', '      balances[_wallet] = balances[wallet];\n', '      balances[wallet] = 0;\n', '      wallet = _wallet;\n', '      WalletUpdated(wallet);\n', '  }\n', '  \n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\n', '    returns (bool success) \n', '  {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, this, _extraData);            \n', '          return true;\n', '      }\n', '      return false;\n', '  }\n', '\n', '  event TokenPurchase(address indexed wallet, address indexed purchaser, address indexed beneficiary, \n', '    uint256 value, uint256 amount);\n', '\n', '  event WalletUpdated(address newWallet);\n', '\n', '}\n', '\n', '// File: contracts/mocks/TokenMock.sol\n', '\n', '// @dev TokenMock mocks current time\n', '\n', 'contract TokenMock is LuHuToken {\n', '\n', '  function TokenMock(string symbol, address wallet) LuHuToken(symbol, wallet) public {\n', '  }\n', '\n', '  //this function will never be used in production env.\n', '  function setNow(uint _now) public onlyOwner {\n', '    fakeNow = _now;\n', '  }\n', '\n', '  function getNowFromOwner() public view returns (uint time) {\n', '    return getNow();\n', '  }\n', '\n', '}']