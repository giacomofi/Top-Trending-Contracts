['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint supply);\n', '    function balanceOf( address who ) constant public returns (uint value);\n', '    function allowance( address owner, address spender ) constant public returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) public returns (bool ok);\n', '    function approve( address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint              wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) constant public returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public\n', '        auth\n', '    {\n', '        require(owner_ != address(0));\n', '        \n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        assert(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    modifier authorized(bytes4 sig) {\n', '        assert(isAuthorized(msg.sender, sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) view internal returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSStop is DSAuth, DSNote {\n', '\n', '    bool public stopped;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    \n', '    function stop() public auth note {\n', '        stopped = true;\n', '    }\n', '    \n', '    function start() public auth note {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    \n', '    function max(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    \n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '    function hadd(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    \n', '    function hmax(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) pure internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    \n', '    function imax(int256 x, int256 y) pure internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    \n', '    function wmax(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) pure internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) pure internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    \n', '    function rmax(uint128 x, uint128 y) pure internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) pure internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract DSTokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    \n', '    constructor(uint256 supply) public {\n', '        _balances[msg.sender] = supply;\n', '        _supply = supply;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    \n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    \n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DSToken is DSTokenBase(0), DSStop {\n', '\n', '    string public name = "ERC20 CES";\n', '    string public symbol = "CES"; // token name\n', '    uint8  public decimals = 0;   // standard token precision\n', '\n', '    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) \n', '        public stoppable note returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '    \n', '    function approve(address guy, uint wad) public stoppable note returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function push(address dst, uint128 wad) public returns (bool) {\n', '        return transfer(dst, wad);\n', '    }\n', '    \n', '    function pull(address src, uint128 wad) public returns (bool) {\n', '        return transferFrom(src, msg.sender, wad);\n', '    }\n', '\n', '    function mint(uint128 wad) public auth stoppable note {\n', '        _balances[msg.sender] = add(_balances[msg.sender], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '\n', '    function burn(uint128 wad) public auth stoppable note {\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '    \n', '    /*\n', '    function setName(string name_, string symbol_) public auth {\n', '        name = name_;\n', '        symbol = symbol_;\n', '    }\n', '    */\n', '}\n', '\n', '\n', 'contract CESVendue is DSAuth, DSMath {\n', '    \n', '    DSToken public CES;\n', '    \n', '    uint public totalETH;      // total ETH was got by vendue\n', '    uint public price;         // vendue Reserve price\n', '    \n', '    uint32 public iaSupply;    // total initialize account for vendue\n', '    uint32 public iaLeft;      // how many initialize account was left\n', '    \n', '    struct accountInfo {\n', '        // vendue ETH\n', '        uint ethVendue;\n', '        \n', '        // The account name used at CES block chain ecocsystem\n', '        string accountName;\n', '        // The public key used for your account\n', '        string publicKey;\n', '        // The pinblock used for your account calc by your password\n', '        string pinblock;\n', '    }\n', '    \n', '    struct elfInfo {\n', '        // whether get the elf\n', '        bool bGetElf;\n', '        \n', '        // The elf sex\n', '        uint8 elfSex;\n', '        // The elf type\n', '        uint16 elfType;\n', '    }\n', '    \n', '    mapping (address => elfInfo)     public elfInfos;\n', '    mapping (address => accountInfo) public initAccInfos; //   init account\n', '    mapping (address => string)      public commonAccs;   // common account\n', '    \n', '    address public godOwner;// the owner who got the god after vendue was closed\n', '    uint16  public godID;   // god owner select his god\n', '    \n', '    bool public vendueClose = false;\n', '    bool public tokenFreeze = false;\n', '    \n', '    address[] public addrLists;\n', '    \n', '    uint startLine;\n', '    \n', '    \n', '    event LogFund(address backer, uint amount, bool isContribution, uint gift);\n', '    event LogFreeze();\n', '    event LogElf(address user, uint8 elfSex, uint16 elfType);\n', '    event LogGod(address owner, uint16 godID);\n', '    event LogInitAcc(address user, string account, string key, string pin);\n', '    event LogRegister(address user, string key, uint token);\n', '    \n', '\n', '    constructor() public {\n', '        iaSupply = 20000;\n', '        iaLeft = iaSupply;\n', '        startLine = now;\n', '        price = 5 ether;\n', '    }\n', '    \n', '    function initialize(DSToken tokenReward) public auth {\n', '        assert(address(CES) == address(0));\n', '        assert(tokenReward.owner() == address(this));\n', '        assert(tokenReward.authority() == DSAuthority(0));\n', '        assert(tokenReward.totalSupply() == 0);\n', '        \n', '        uint128 totalIssue     = 1000000000; //   1 billion coin total issue\n', '        uint128 coinDisable    =  600000000; // 0.6 billion coin for disable\n', '        uint128 coinContribute =  200000000; // 0.2 billion coin for contribute\n', '      //uint128 coinGiftA      =  100000000; // 0.1 billion coin gift for vendue\n', '        uint128 coinGiftB      =  100000000; // 0.1 billion coin for chain, APP, airdrops\n', '                                             \n', '        startLine = now;\n', '        \n', '        CES = tokenReward;\n', '        CES.mint(totalIssue);\n', '        CES.push(0x00, hadd(coinDisable, coinContribute));\n', '        CES.push(msg.sender, coinGiftB);\n', '    }\n', '    \n', '    function setPrice(uint price_) external auth {\n', '        require(!vendueClose);\n', '        \n', '        price = price_;\n', '    }\n', '    \n', '    function balanceToken() public view returns (uint256) {\n', '        assert(address(CES) != address(0));\n', '        \n', '        return CES.balanceOf(this);\n', '    }\n', '    \n', '    function todayDays() public view returns (uint) {\n', '        return (div(sub(now, startLine), 1 days) + 1);\n', '    }\n', '\n', '    function () public payable {\n', '        require(!vendueClose);\n', '        require(iaLeft > 0);\n', '        require(msg.value >= price);\n', '        require(initAccInfos[msg.sender].ethVendue == 0);\n', '        \n', '        uint money = msg.value;\n', '        initAccInfos[msg.sender].ethVendue = money;\n', '        totalETH = add(totalETH, money);\n', '        \n', '        iaLeft--;\n', '        \n', '        // release period is 7 day \n', '        // elf gift at first month\n', '        uint dayNow = todayDays();\n', '        if(dayNow <= (30 + 7)) {\n', '            elfInfos[msg.sender].bGetElf = true;\n', '        }\n', '        \n', '        uint coinNeed;\n', '        uint giftLeft = balanceToken();\n', '        \n', '        // coin gift by initialize account\n', '        if(dayNow <= (90 + 7)) {\n', '            if(giftLeft >= 3500) {\n', '                coinNeed = 3500;\n', '            }\n', '        }\n', '        else {\n', '            if(giftLeft >= 2000) {\n', '                coinNeed = 2000;\n', '            }\n', '        }\n', '        \n', '        // coin gift by overflow ETH\n', '        if(money > price) {\n', '            uint multiple = div(sub(money, price), 1 ether);\n', '            uint moreGift = mul(multiple, 800);\n', '\n', '            if(moreGift > 0 && (sub(giftLeft, coinNeed) >= moreGift)) {\n', '                coinNeed = add(coinNeed, moreGift);\n', '            }\n', '        }\n', '\n', '        if(coinNeed > 0) {\n', '            CES.transfer(msg.sender, coinNeed);\n', '        }\n', '        \n', '        pushAddr(msg.sender);\n', '        \n', '        emit LogFund(msg.sender, money, true, coinNeed);\n', '    }\n', '    \n', '    function withdrawal() external auth {\n', '        \n', '        uint takeNow = sub(address(this).balance, 1 finney);\n', '        \n', '        if(takeNow > 0) {\n', '            if (msg.sender.send(takeNow)) {\n', '                emit LogFund(msg.sender, takeNow, false, 0);\n', '            }\n', '        } \n', '    }\n', '    \n', '    function vendueClosed() external auth {\n', '        vendueClose = true;\n', '        distillGodOwner();\n', '    }\n', '    \n', '    function freezeToken() external auth {\n', '        require(vendueClose);\n', '\n', '        tokenFreeze = true;\n', '        CES.stop();\n', '        \n', '        emit LogFreeze();\n', '    }\n', '    \n', '    function distillGodOwner() public auth {\n', '        require(vendueClose);\n', '\n', '        uint ethHighest = 0;\n', '        address addrHighest = address(0);\n', '        \n', '        address addr;\n', '        for(uint i = 0; i < addrLists.length; i++) {\n', '            addr = addrLists[i];\n', '            \n', '            if(address(addr) == address(0)) {\n', '                continue;\n', '            }\n', '            \n', '            if(initAccInfos[addr].ethVendue > ethHighest) {\n', '                ethHighest  = initAccInfos[addr].ethVendue;\n', '                addrHighest = addr;\n', '            }\n', '        }\n', '        \n', '        godOwner = addrHighest;\n', '    }\n', '    \n', '    function pushAddr(address dst) internal {\n', '\n', '        bool bExist = false;\n', '        address addr;\n', '        for(uint i = 0; i < addrLists.length; i++) {\n', '            addr = addrLists[i];\n', '            \n', '            if(address(addr) == address(dst)) {\n', '                bExist = true;\n', '                break;\n', '            }\n', '        }\n', '        \n', '        if(!bExist)\n', '        {\n', '            addrLists.push(dst);\n', '        }\n', '    }\n', '    \n', '    // Do this after we provide elf type to you select\n', '    function selectElf(uint8 elfSex, uint16 elfType) external {\n', '        require(elfInfos[msg.sender].bGetElf);\n', '\n', '        elfInfos[msg.sender].elfSex = elfSex;\n', '        elfInfos[msg.sender].elfType = elfType;\n', '    \n', '        emit LogElf(msg.sender, elfSex, elfType);\n', '    }\n', '    \n', '    // Do this after we provide god to you select\n', '    function selectGod(uint16 godID_) external {\n', '        require(vendueClose);\n', '        require(msg.sender == godOwner);\n', '\n', '        godID = godID_;\n', '        \n', '        emit LogGod(godOwner, godID);\n', '    }\n', '    \n', '    // Do this after we provide tool to produce public key and encrypt your password\n', '    function regInitAccount(string account, string publicKey, string pinblock) external {\n', '        require(initAccInfos[msg.sender].ethVendue > 0);\n', '\n', '        assert(bytes(account).length <= 10 && bytes(account).length >= 2);\n', '        assert(bytes(publicKey).length <= 128); //maybe public key is 64 bytes\n', '        assert(bytes(pinblock).length == 16 || bytes(pinblock).length == 32);\n', '\n', '        initAccInfos[msg.sender].accountName = account;\n', '        initAccInfos[msg.sender].publicKey = publicKey;\n', '        initAccInfos[msg.sender].pinblock = pinblock;\n', '    \n', '        emit LogInitAcc(msg.sender, account, publicKey, pinblock);\n', '    }\n', '    \n', '    // register your account then tell me your public key for transform token to coin\n', "    // init account don't need to do this\n", '    function register(string publicKey) external {\n', '        require(tokenFreeze);\n', '\n', '        assert(bytes(publicKey).length <= 128); //maybe public key is 64 bytes\n', '\n', '        commonAccs[msg.sender] = publicKey;\n', '        \n', '        uint token = CES.balanceOf(msg.sender);\n', '        emit LogRegister(msg.sender, publicKey, token);\n', '    }\n', '    \n', '}']