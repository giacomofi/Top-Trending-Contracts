['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title EUROPEAN INVESTMENT FINANCIAL CENTER LTD (EIB)\n', ' *        53 Bedford Square, Fitzrovia, London, United Kingdom, WC1B 3DP\n', ' *        https://www.EIB.ai\n', ' *        https://t.me/EIB_exchange (Support)\n', ' */\n', '\n', '// File: contracts/browser/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/browser/ERC20.sol\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/browser/ERC223.sol\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', '\n', 'interface ERC223 {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '// File: contracts/browser/ContractReceiver.sol\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', 'contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data){\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '\n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '\n', '    function rewiewToken  () returns (address, uint, bytes, bytes4) {\n', '        TKN memory tkn;\n', '\n', '        return (tkn.sender, tkn.value, tkn.data, tkn.sig);\n', '\n', '    }\n', '}\n', '\n', '// File: contracts/browser/ERC223ReceivingContract.sol\n', '\n', '/**\n', ' * å½¡EUROPEAN INVESTMENT FINANCIAL CENTER LTD\n', ' * @title EIB\n', ' * @author FRASER, Matthew & EIB people\n', ' * @dev EIB is an ERC223 Token with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract EIB is ERC20, ERC223 {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function EIB (string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = "EIB";\n', '        _name = "EIB";\n', '        _decimals = 18;\n', '        _totalSupply = 30e9 * 1e18;\n', '        balances[msg.sender] = 30e9 * 1e18;\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '    Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '   \n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    require(_value > 0 );\n', '    if(isContract(_to)) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '    }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '}\n', '\n', '/*\n', ' * ERC20/ERC223 - EIB\n', ' *     Created by EIB.ai\n', ' */']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title EUROPEAN INVESTMENT FINANCIAL CENTER LTD (EIB)\n', ' *        53 Bedford Square, Fitzrovia, London, United Kingdom, WC1B 3DP\n', ' *        https://www.EIB.ai\n', ' *        https://t.me/EIB_exchange (Support)\n', ' */\n', '\n', '// File: contracts/browser/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/browser/ERC20.sol\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/browser/ERC223.sol\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', '\n', 'interface ERC223 {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '// File: contracts/browser/ContractReceiver.sol\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', 'contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data){\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '\n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '\n', '    function rewiewToken  () returns (address, uint, bytes, bytes4) {\n', '        TKN memory tkn;\n', '\n', '        return (tkn.sender, tkn.value, tkn.data, tkn.sig);\n', '\n', '    }\n', '}\n', '\n', '// File: contracts/browser/ERC223ReceivingContract.sol\n', '\n', '/**\n', ' * å½¡EUROPEAN INVESTMENT FINANCIAL CENTER LTD\n', ' * @title EIB\n', ' * @author FRASER, Matthew & EIB people\n', ' * @dev EIB is an ERC223 Token with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract EIB is ERC20, ERC223 {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function EIB (string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = "EIB";\n', '        _name = "EIB";\n', '        _decimals = 18;\n', '        _totalSupply = 30e9 * 1e18;\n', '        balances[msg.sender] = 30e9 * 1e18;\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '    Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '   \n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    require(_value > 0 );\n', '    if(isContract(_to)) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '    }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '}\n', '\n', '/*\n', ' * ERC20/ERC223 - EIB\n', ' *     Created by EIB.ai\n', ' */']
