['pragma solidity ^0.4.18;\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '\n', '  event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n', '\t\n', '\tfunction Ownable() public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwner(address _newOwner) onlyOwner public \n', '  {\n', '    require(_newOwner != address(0));\n', '    \n', '    address oldOwner = owner;\n', '    if (oldOwner != _newOwner)\n', '    {\n', '    \towner = _newOwner;\n', '    \t\n', '    \tOwnerChanged(oldOwner, _newOwner);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable is Ownable\n', '{\n', '\taddress public manager;\n', '\t\n', '\tevent ManagerChanged(address indexed _oldManager, address _newManager);\n', '\t\n', '\tfunction Manageable() public\n', '\t{\n', '\t\tmanager = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyManager()\n', '\t{\n', '\t\trequire(msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier onlyOwnerOrManager() \n', '\t{\n', '\t\trequire(msg.sender == owner || msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction changeManager(address _newManager) onlyOwner public \n', '\t{\n', '\t\trequire(_newManager != address(0));\n', '\t\t\n', '\t\taddress oldManager = manager;\n', '\t\tif (oldManager != _newManager)\n', '\t\t{\n', '\t\t\tmanager = _newManager;\n', '\t\t\t\n', '\t\t\tManagerChanged(oldManager, _newManager);\n', '\t\t}\n', '\t}\n', '\t\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title EBCoinToken\n', ' */\n', 'contract EBCoinToken is Manageable\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name     = "EBCoin";\n', '  string public constant symbol   = "EBC";\n', '  uint8  public constant decimals = 18;\n', '  \n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => uint256) public releaseTime;\n', '  bool public released;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event Mint(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _from, uint256 _value);\n', '  event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime);\n', '  event ReleasedChanged(bool _oldReleased, bool _newReleased);\n', '\n', '  modifier canTransfer(address _from)\n', '  {\n', '  \tif (releaseTime[_from] == 0)\n', '  \t{\n', '  \t\trequire(released);\n', '  \t}\n', '  \telse\n', '  \t{\n', '  \t\trequire(releaseTime[_from] <= now);\n', '  \t}\n', '  \t_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Transfer(msg.sender, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '    Transfer(_from, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '  \n', ' \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', ' \t{\n', '    allowed[msg.sender][_spender] = _value;\n', '    \n', '    Approval(msg.sender, _spender, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint256 _value, uint256 _releaseTime) onlyOwnerOrManager public returns (bool) \n', '  {\n', '  \trequire(_to != address(0));\n', '  \t\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Mint(_to, _value);\n', '    Transfer(0x0, _to, _value);\n', '    \n', '    setReleaseTime(_to, _releaseTime);\n', '    \n', '    return true;\n', '  }\n', '  \n', '  function burn(address _from, uint256 _value) onlyOwnerOrManager public returns (bool)\n', '  {\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    \n', '    Burn(_from, _value);\n', '    \n', '  \treturn true;\n', '  }\n', '\n', '  function setReleaseTime(address _owner, uint256 _newReleaseTime) onlyOwnerOrManager public returns (bool)\n', '  {\n', '    require(_owner != address(0));\n', '    \n', '  \tuint256 oldReleaseTime = releaseTime[_owner];\n', '  \tif (oldReleaseTime != _newReleaseTime)\n', '  \t{\n', '  \t\treleaseTime[_owner] = _newReleaseTime;\n', '    \n', '    \tReleaseTimeChanged(_owner, oldReleaseTime, _newReleaseTime);\n', '    \t\n', '    \treturn true;\n', '    }\n', '    \n', '    return false;\n', '  }\n', '  \n', '  function setReleased(bool _newReleased) onlyOwnerOrManager public returns (bool)\n', '  {\n', '  \tbool oldReleased = released;\n', '  \tif (oldReleased != _newReleased)\n', '  \t{\n', '  \t\treleased = _newReleased;\n', '  \t\n', '  \t\tReleasedChanged(oldReleased, _newReleased);\n', '  \t\t\n', '  \t\treturn true;\n', '  \t}\n', '  \t\n', '  \treturn false;\n', '  }\n', '  \n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */']
['pragma solidity ^0.4.18;\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '\n', '  event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n', '\t\n', '\tfunction Ownable() public\n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwner(address _newOwner) onlyOwner public \n', '  {\n', '    require(_newOwner != address(0));\n', '    \n', '    address oldOwner = owner;\n', '    if (oldOwner != _newOwner)\n', '    {\n', '    \towner = _newOwner;\n', '    \t\n', '    \tOwnerChanged(oldOwner, _newOwner);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable is Ownable\n', '{\n', '\taddress public manager;\n', '\t\n', '\tevent ManagerChanged(address indexed _oldManager, address _newManager);\n', '\t\n', '\tfunction Manageable() public\n', '\t{\n', '\t\tmanager = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyManager()\n', '\t{\n', '\t\trequire(msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tmodifier onlyOwnerOrManager() \n', '\t{\n', '\t\trequire(msg.sender == owner || msg.sender == manager);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction changeManager(address _newManager) onlyOwner public \n', '\t{\n', '\t\trequire(_newManager != address(0));\n', '\t\t\n', '\t\taddress oldManager = manager;\n', '\t\tif (oldManager != _newManager)\n', '\t\t{\n', '\t\t\tmanager = _newManager;\n', '\t\t\t\n', '\t\t\tManagerChanged(oldManager, _newManager);\n', '\t\t}\n', '\t}\n', '\t\n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */\n', '\n', '/**\n', ' * @title EBCoinToken\n', ' */\n', 'contract EBCoinToken is Manageable\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name     = "EBCoin";\n', '  string public constant symbol   = "EBC";\n', '  uint8  public constant decimals = 18;\n', '  \n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => uint256) public releaseTime;\n', '  bool public released;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event Mint(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _from, uint256 _value);\n', '  event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime);\n', '  event ReleasedChanged(bool _oldReleased, bool _newReleased);\n', '\n', '  modifier canTransfer(address _from)\n', '  {\n', '  \tif (releaseTime[_from] == 0)\n', '  \t{\n', '  \t\trequire(released);\n', '  \t}\n', '  \telse\n', '  \t{\n', '  \t\trequire(releaseTime[_from] <= now);\n', '  \t}\n', '  \t_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Transfer(msg.sender, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) \n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '    Transfer(_from, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '  \n', ' \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', ' \t{\n', '    allowed[msg.sender][_spender] = _value;\n', '    \n', '    Approval(msg.sender, _spender, _value);\n', '    \n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint256 _value, uint256 _releaseTime) onlyOwnerOrManager public returns (bool) \n', '  {\n', '  \trequire(_to != address(0));\n', '  \t\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Mint(_to, _value);\n', '    Transfer(0x0, _to, _value);\n', '    \n', '    setReleaseTime(_to, _releaseTime);\n', '    \n', '    return true;\n', '  }\n', '  \n', '  function burn(address _from, uint256 _value) onlyOwnerOrManager public returns (bool)\n', '  {\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    \n', '    Burn(_from, _value);\n', '    \n', '  \treturn true;\n', '  }\n', '\n', '  function setReleaseTime(address _owner, uint256 _newReleaseTime) onlyOwnerOrManager public returns (bool)\n', '  {\n', '    require(_owner != address(0));\n', '    \n', '  \tuint256 oldReleaseTime = releaseTime[_owner];\n', '  \tif (oldReleaseTime != _newReleaseTime)\n', '  \t{\n', '  \t\treleaseTime[_owner] = _newReleaseTime;\n', '    \n', '    \tReleaseTimeChanged(_owner, oldReleaseTime, _newReleaseTime);\n', '    \t\n', '    \treturn true;\n', '    }\n', '    \n', '    return false;\n', '  }\n', '  \n', '  function setReleased(bool _newReleased) onlyOwnerOrManager public returns (bool)\n', '  {\n', '  \tbool oldReleased = released;\n', '  \tif (oldReleased != _newReleased)\n', '  \t{\n', '  \t\treleased = _newReleased;\n', '  \t\n', '  \t\tReleasedChanged(oldReleased, _newReleased);\n', '  \t\t\n', '  \t\treturn true;\n', '  \t}\n', '  \t\n', '  \treturn false;\n', '  }\n', '  \n', '}\n', '\n', '/* -------------------------------------------------------------------------------- */']
