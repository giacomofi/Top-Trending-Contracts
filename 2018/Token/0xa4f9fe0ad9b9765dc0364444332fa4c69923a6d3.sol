['pragma solidity 0.4.24;\n', '/**\n', '* GRP TOKEN Contract\n', '* ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6b0d450a051f04050204450a000e072b0c060a020745080406">[email&#160;protected]</a>\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', '* Token contract interface for external use\n', '*/\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    }\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Master address is public\n', '    mapping(address => uint256) public level; //Admin level\n', '    bool public lockSupply; //Burn Lock flag\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() public {\n', '        admin = 0x6585b849371A40005F9dCda57668C832a5be1777; //Set initial admin\n', '        level[admin] = 2;\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n', '        require(msg.sender == admin || level[msg.sender] >= _level);\n', '        _;\n', '    }\n', '\n', '    modifier supplyLock() { //A modifier to lock burn transactions\n', '        require(lockSupply == false);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin(2) public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        level[_newAdmin] = 2;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {\n', '        level[_target] = _level;\n', '        emit AdminLevelSet(_target,_level);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set burn lock\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply\n', '        lockSupply = _set;\n', '        emit SetSupplyLock(_set);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event SetSupplyLock(bool _set);\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '    event AdminLevelSet(address _target,uint8 _level);\n', '\n', '}\n', '\n', '/**\n', '* @title Token definition\n', '* @dev Define token paramters including ERC20 ones\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _target The address of the holder of the tokens.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin(2) supplyLock public {\n', '        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n', '        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n', '        emit Burned(_target, _burnedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(address indexed _target, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '}\n', '\n', '/**\n', '* @title AssetGRP\n', '* @dev Initial supply creation\n', '*/\n', 'contract AssetGRP is ERC20Token {\n', '    string public name = &#39;Gripo&#39;;\n', '    uint8 public decimals = 18;\n', '    string public symbol = &#39;GRP&#39;;\n', '    string public version = &#39;1&#39;;\n', '\n', '    address writer = 0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd;\n', '\n', '    constructor() public {\n', '        totalSupply = 200000000 * (10**uint256(decimals)); //initial token creation\n', '        balances[writer] = totalSupply / 10000; //0.01%\n', '        balances[admin] = totalSupply.sub(balances[writer]);\n', '\n', '        emit Transfer(address(0), writer, balances[writer]);\n', '        emit Transfer(address(0), admin, balances[admin]);\n', '    }\n', '\n', '    /**\n', '    *@dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', '* GRP TOKEN Contract\n', '* ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', '* Token contract interface for external use\n', '*/\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    }\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Master address is public\n', '    mapping(address => uint256) public level; //Admin level\n', '    bool public lockSupply; //Burn Lock flag\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() public {\n', '        admin = 0x6585b849371A40005F9dCda57668C832a5be1777; //Set initial admin\n', '        level[admin] = 2;\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n', '        require(msg.sender == admin || level[msg.sender] >= _level);\n', '        _;\n', '    }\n', '\n', '    modifier supplyLock() { //A modifier to lock burn transactions\n', '        require(lockSupply == false);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin(2) public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        level[_newAdmin] = 2;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {\n', '        level[_target] = _level;\n', '        emit AdminLevelSet(_target,_level);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set burn lock\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply\n', '        lockSupply = _set;\n', '        emit SetSupplyLock(_set);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event SetSupplyLock(bool _set);\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '    event AdminLevelSet(address _target,uint8 _level);\n', '\n', '}\n', '\n', '/**\n', '* @title Token definition\n', '* @dev Define token paramters including ERC20 ones\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _target The address of the holder of the tokens.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin(2) supplyLock public {\n', '        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n', '        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n', '        emit Burned(_target, _burnedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(address indexed _target, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '}\n', '\n', '/**\n', '* @title AssetGRP\n', '* @dev Initial supply creation\n', '*/\n', 'contract AssetGRP is ERC20Token {\n', "    string public name = 'Gripo';\n", '    uint8 public decimals = 18;\n', "    string public symbol = 'GRP';\n", "    string public version = '1';\n", '\n', '    address writer = 0xA6bc924715A0B63C6E0a7653d3262D26F254EcFd;\n', '\n', '    constructor() public {\n', '        totalSupply = 200000000 * (10**uint256(decimals)); //initial token creation\n', '        balances[writer] = totalSupply / 10000; //0.01%\n', '        balances[admin] = totalSupply.sub(balances[writer]);\n', '\n', '        emit Transfer(address(0), writer, balances[writer]);\n', '        emit Transfer(address(0), admin, balances[admin]);\n', '    }\n', '\n', '    /**\n', '    *@dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
