['pragma solidity ^0.4.23;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  } \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EthAirdrop is Ownable {\n', '  uint256 public amountToSend;\n', '\n', '  function() payable public {}\n', '  \n', '  function destroyMe() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function sendEth(address[] addresses) onlyOwner public {\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      addresses[i].transfer(amountToSend);\n', '      emit TransferEth(addresses[i], amountToSend);\n', '    }\n', '  }\n', '\n', '  function changeAmount(uint256 _amount) onlyOwner public {\n', '    amountToSend = _amount;\n', '  }\n', '\n', '  function getEth() onlyOwner public {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '  \n', '  event TransferEth(address _address, uint256 _amount);\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  } \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EthAirdrop is Ownable {\n', '  uint256 public amountToSend;\n', '\n', '  function() payable public {}\n', '  \n', '  function destroyMe() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function sendEth(address[] addresses) onlyOwner public {\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      addresses[i].transfer(amountToSend);\n', '      emit TransferEth(addresses[i], amountToSend);\n', '    }\n', '  }\n', '\n', '  function changeAmount(uint256 _amount) onlyOwner public {\n', '    amountToSend = _amount;\n', '  }\n', '\n', '  function getEth() onlyOwner public {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '  \n', '  event TransferEth(address _address, uint256 _amount);\n', '}']
