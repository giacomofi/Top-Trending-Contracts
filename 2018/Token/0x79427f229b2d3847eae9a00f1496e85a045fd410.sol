['pragma solidity ^0.4.18;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract Kyber {\n', '    function getExpectedRate(\n', '        ERC20 src, \n', '        ERC20 dest, \n', '        uint srcQty\n', '    ) public view returns (uint, uint);\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    ) public payable returns(uint);\n', '} \n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract DTF is ERC20, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public KNCBalance;\n', '    uint public OMGBalance;\n', '\n', '    Kyber public kyber;\n', '    ERC20 public knc;\n', '    ERC20 public omg;\n', '    ERC20 public ieth;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "DTF";\n', '        name = "Decentralized Token Fund";\n', '        decimals = 18;\n', '        _totalSupply = 0;\n', '        balances[owner] = _totalSupply;\n', '        KNCBalance = 0;\n', '        OMGBalance = 0;\n', '        kyber = Kyber(0x964F35fAe36d75B1e72770e244F6595B68508CF5);\n', '        knc = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '        omg = ERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n', '        ieth = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '        // knc.approve(kyber, 2**255);\n', '        // omg.approve(kyber, 2**255);\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        if (to == address(0)) {\n', '            // uint kncCount = kyber.trade(knc, tokens, ieth, address(this), 2**256 - 1, 1, 0);\n', '            // uint omgCount = kyber.trade(omg, tokens, ieth, address(this), 2**256 - 1, 1, 0);\n', '            // uint totalCount = safeAdd(kncCount, omgCount);\n', '            // msg.sender.transfer(totalCount);\n', '            knc.transfer(msg.sender, tokens);\n', '            omg.transfer(msg.sender, tokens);\n', '            _totalSupply = safeSub(_totalSupply, tokens);\n', '        }\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        (uint kncExpectedPrice,) = kyber.getExpectedRate(ieth, knc, msg.value);\n', '        (uint omgExpectedPrice,) = kyber.getExpectedRate(ieth, omg, msg.value);\n', '        uint tmp = safeAdd(kncExpectedPrice, omgExpectedPrice);\n', '        uint kncCost = safeDiv(safeMul(omgExpectedPrice, msg.value), tmp);\n', '        uint omgCost = safeDiv(safeMul(kncExpectedPrice, msg.value), tmp);\n', '        uint kncCount = kyber.trade.value(kncCost)(ieth, kncCost, knc, address(this), 2**256 - 1, 1, 0);\n', '        uint omgCount = kyber.trade.value(omgCost)(ieth, omgCost, omg, address(this), 2**256 - 1, 1, 0);\n', '        uint totalCount = 0;\n', '        if (kncCount < omgCount) {\n', '            totalCount = kncCount;\n', '        } else {\n', '            totalCount = omgCount;\n', '        }\n', '        require(totalCount > 0);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], totalCount);\n', '        _totalSupply = safeAdd(_totalSupply, totalCount);\n', '        emit Transfer(address(0), msg.sender, totalCount);\n', '    }\n', '\n', '    function getExpectedRate(uint value) public view returns (uint, uint, uint, uint) {\n', '        require(value > 0);\n', '        (uint kncExpectedPrice,) = kyber.getExpectedRate(ieth, knc, value);\n', '        (uint omgExpectedPrice,) = kyber.getExpectedRate(ieth, omg, value);\n', '        uint totalExpectedPrice = safeDiv(safeMul(kncExpectedPrice, omgExpectedPrice), safeAdd(kncExpectedPrice, omgExpectedPrice));\n', '        uint totalExpectedCount = safeDiv(safeMul(value, totalExpectedPrice), 1 ether);\n', '        return (kncExpectedPrice, omgExpectedPrice, totalExpectedPrice, totalExpectedCount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function withdrawETH(uint value) public onlyOwner returns (bool success) {\n', '        owner.transfer(value);\n', '        return true;\n', '    }\n', '\n', '    function depositETH() public payable returns (bool success) {\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract Kyber {\n', '    function getExpectedRate(\n', '        ERC20 src, \n', '        ERC20 dest, \n', '        uint srcQty\n', '    ) public view returns (uint, uint);\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    ) public payable returns(uint);\n', '} \n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract DTF is ERC20, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public KNCBalance;\n', '    uint public OMGBalance;\n', '\n', '    Kyber public kyber;\n', '    ERC20 public knc;\n', '    ERC20 public omg;\n', '    ERC20 public ieth;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "DTF";\n', '        name = "Decentralized Token Fund";\n', '        decimals = 18;\n', '        _totalSupply = 0;\n', '        balances[owner] = _totalSupply;\n', '        KNCBalance = 0;\n', '        OMGBalance = 0;\n', '        kyber = Kyber(0x964F35fAe36d75B1e72770e244F6595B68508CF5);\n', '        knc = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '        omg = ERC20(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n', '        ieth = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '        // knc.approve(kyber, 2**255);\n', '        // omg.approve(kyber, 2**255);\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        if (to == address(0)) {\n', '            // uint kncCount = kyber.trade(knc, tokens, ieth, address(this), 2**256 - 1, 1, 0);\n', '            // uint omgCount = kyber.trade(omg, tokens, ieth, address(this), 2**256 - 1, 1, 0);\n', '            // uint totalCount = safeAdd(kncCount, omgCount);\n', '            // msg.sender.transfer(totalCount);\n', '            knc.transfer(msg.sender, tokens);\n', '            omg.transfer(msg.sender, tokens);\n', '            _totalSupply = safeSub(_totalSupply, tokens);\n', '        }\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        (uint kncExpectedPrice,) = kyber.getExpectedRate(ieth, knc, msg.value);\n', '        (uint omgExpectedPrice,) = kyber.getExpectedRate(ieth, omg, msg.value);\n', '        uint tmp = safeAdd(kncExpectedPrice, omgExpectedPrice);\n', '        uint kncCost = safeDiv(safeMul(omgExpectedPrice, msg.value), tmp);\n', '        uint omgCost = safeDiv(safeMul(kncExpectedPrice, msg.value), tmp);\n', '        uint kncCount = kyber.trade.value(kncCost)(ieth, kncCost, knc, address(this), 2**256 - 1, 1, 0);\n', '        uint omgCount = kyber.trade.value(omgCost)(ieth, omgCost, omg, address(this), 2**256 - 1, 1, 0);\n', '        uint totalCount = 0;\n', '        if (kncCount < omgCount) {\n', '            totalCount = kncCount;\n', '        } else {\n', '            totalCount = omgCount;\n', '        }\n', '        require(totalCount > 0);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], totalCount);\n', '        _totalSupply = safeAdd(_totalSupply, totalCount);\n', '        emit Transfer(address(0), msg.sender, totalCount);\n', '    }\n', '\n', '    function getExpectedRate(uint value) public view returns (uint, uint, uint, uint) {\n', '        require(value > 0);\n', '        (uint kncExpectedPrice,) = kyber.getExpectedRate(ieth, knc, value);\n', '        (uint omgExpectedPrice,) = kyber.getExpectedRate(ieth, omg, value);\n', '        uint totalExpectedPrice = safeDiv(safeMul(kncExpectedPrice, omgExpectedPrice), safeAdd(kncExpectedPrice, omgExpectedPrice));\n', '        uint totalExpectedCount = safeDiv(safeMul(value, totalExpectedPrice), 1 ether);\n', '        return (kncExpectedPrice, omgExpectedPrice, totalExpectedPrice, totalExpectedCount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function withdrawETH(uint value) public onlyOwner returns (bool success) {\n', '        owner.transfer(value);\n', '        return true;\n', '    }\n', '\n', '    function depositETH() public payable returns (bool success) {\n', '        return true;\n', '    }\n', '}']
