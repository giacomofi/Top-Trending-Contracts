['pragma solidity 0.4.24;\n', '\n', 'contract ReentrancyGuard {\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    \n', '    mapping (address=>bool) private whiteList;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused || whiteList[msg.sender]);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused || whiteList[msg.sender]);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '\n', '        emit Unpause();\n', '    }\n', '\n', '    function addToWhiteList(address[] _whiteList) external onlyOwner {\n', '        require(_whiteList.length > 0);\n', '\n', '        for(uint8 i = 0; i < _whiteList.length; i++) {\n', '            assert(_whiteList[i] != address(0));\n', '\n', '            whiteList[_whiteList[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeFromWhiteList(address[] _blackList) external onlyOwner {\n', '        require(_blackList.length > 0);\n', '\n', '        for(uint8 i = 0; i < _blackList.length; i++) {\n', '            assert(_blackList[i] != address(0));\n', '\n', '            whiteList[_blackList[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract W12TokenDistributor is Ownable {\n', '    W12Token public token;\n', '\n', '    mapping(uint32 => bool) public processedTransactions;\n', '\n', '    constructor() public {\n', '        token = new W12Token();\n', '    }\n', '\n', '    function isTransactionSuccessful(uint32 id) external view returns (bool) {\n', '        return processedTransactions[id];\n', '    }\n', '\n', '    modifier validateInput(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts) {\n', '        require(_receivers.length == _amounts.length);\n', '        require(_receivers.length == _payment_ids.length);\n', '\n', '        _;\n', '    }\n', '\n', '    function transferTokenOwnership() external onlyOwner {\n', '        token.transferOwnership(owner);\n', '    }\n', '}\n', '\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    constructor (ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime > block.timestamp);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(block.timestamp >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', 'contract W12Crowdsale is W12TokenDistributor, ReentrancyGuard {\n', '    uint public presaleStartDate = 1526817600;\n', '    uint public presaleEndDate = 1532088000;\n', '    uint public crowdsaleStartDate = 1532692800;\n', '    uint public crowdsaleEndDate = 1538049600;\n', '\n', '    uint public presaleTokenBalance = 20 * (10 ** 24);\n', '    uint public crowdsaleTokenBalance = 80 * (10 ** 24);\n', '\n', '    address public crowdsaleFundsWallet;\n', '\n', '    enum Stage { Inactive, FlashSale, Presale, Crowdsale }\n', '\n', '    event LockCreated(address indexed wallet, address timeLock1, address timeLock2, address timeLock3);\n', '\n', '    constructor(address _crowdsaleFundsWallet) public {\n', '        require(_crowdsaleFundsWallet != address(0));\n', '\n', '        // Wallet to hold collected Ether\n', '        crowdsaleFundsWallet = address(_crowdsaleFundsWallet);\n', '    }\n', '    \n', '    function setUpCrowdsale() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Tokens to sell during the first two phases of ICO\n', '        token.mint(address(this), presaleTokenBalance + crowdsaleTokenBalance);\n', '        // Partners\n', '        token.mint(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        // Bounty and support of ecosystem\n', '        token.mint(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        // Airdrop\n', '        token.mint(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a),  4 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        \n', '        address[] storage whiteList;\n', '\n', '        whiteList.push(address(this));\n', '        whiteList.push(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1));\n', '        whiteList.push(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde));\n', '        whiteList.push(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a));\n', '        whiteList.push(address(0xd13B531160Cfe6CC2f9a5615524CA636A0A94D88));\n', '        whiteList.push(address(0x3BAF5A51E6212d311Bc567b60bE84Fc180d39805));\n', '\n', '        token.addToWhiteList(whiteList);\n', '    }\n', '\n', '    function lockSeedInvestors() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Seed investors\n', '\n', '        address contributor1 = address(0xA0473967Bf75a9D6cA84A58975D26b6Fd3eecB32);\n', '        TokenTimelock t1c1 = new TokenTimelock(token, contributor1, 1541030400);\n', '        TokenTimelock t2c1 = new TokenTimelock(token, contributor1, 1572566400);\n', '        TokenTimelock t3c1 = new TokenTimelock(token, contributor1, 1604188800);\n', '\n', '        token.mint(t1c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor1, t1c1, t2c1, t3c1);\n', '\n', '        address contributor2 = address(0x7ff9837FebAACbD1d1d91066F9DC5bbE1Bf1C023);\n', '        TokenTimelock t1c2 = new TokenTimelock(token, contributor2, 1541030400);\n', '        TokenTimelock t2c2 = new TokenTimelock(token, contributor2, 1572566400);\n', '        TokenTimelock t3c2 = new TokenTimelock(token, contributor2, 1604188800);\n', '\n', '        token.mint(t1c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor2, t1c2, t2c2, t3c2);\n', '\n', '        address contributor3 = address(0xe4a7d4f7C358A56eA191Bb0aC3D8074327504Ac4);\n', '        TokenTimelock t1c3 = new TokenTimelock(token, contributor3, 1541030400);\n', '        TokenTimelock t2c3 = new TokenTimelock(token, contributor3, 1572566400);\n', '        TokenTimelock t3c3 = new TokenTimelock(token, contributor3, 1604188800);\n', '\n', '        token.mint(t1c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c3, 3 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor2, t1c3, t2c3, t3c3);\n', '    }\n', '\n', '    function lockTeamAndReserve() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Team lockup\n', '\n', '        address team = address(0x17abe2BA2Af3559A45C016F02EA5677017AA3362);\n', '        TokenTimelock t1c1 = new TokenTimelock(token, team, 1541030400);\n', '        TokenTimelock t2c1 = new TokenTimelock(token, team, 1572566400);\n', '        TokenTimelock t3c1 = new TokenTimelock(token, team, 1604188800);\n', '\n', '        token.mint(t1c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(team, t1c1, t2c1, t3c1);\n', '\n', '        // Reserve lockup\n', '\n', '        address reserve = address(0xE8bE756Ddd148dA0e2B440876A0Dc2FAC8BBE7A7);\n', '        TokenTimelock t1c2 = new TokenTimelock(token, reserve, 1541030400);\n', '        TokenTimelock t2c2 = new TokenTimelock(token, reserve, 1572566400);\n', '        TokenTimelock t3c2 = new TokenTimelock(token, reserve, 1604188800);\n', '\n', '        token.mint(t1c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(reserve, t1c2, t2c2, t3c2);\n', '    }\n', '\n', '    function () payable external {\n', '        Stage currentStage = getStage();\n', '\n', '        require(currentStage != Stage.Inactive);\n', '\n', '        uint currentRate = getCurrentRate();\n', '        uint tokensBought = msg.value * (10 ** 18) / currentRate;\n', '\n', '        token.transfer(msg.sender, tokensBought);\n', '        advanceStage(tokensBought, currentStage);\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint) {\n', '        uint currentSaleTime;\n', '        Stage currentStage = getStage();\n', '\n', '        if(currentStage == Stage.Presale) {\n', '            currentSaleTime = now - presaleStartDate;\n', '            uint presaleCoef = currentSaleTime * 100 / (presaleEndDate - presaleStartDate);\n', '            \n', '            return 262500000000000 + 35000000000000 * presaleCoef / 100;\n', '        }\n', '        \n', '        if(currentStage == Stage.Crowdsale) {\n', '            currentSaleTime = now - crowdsaleStartDate;\n', '            uint crowdsaleCoef = currentSaleTime * 100 / (crowdsaleEndDate - crowdsaleStartDate);\n', '\n', '            return 315000000000000 + 35000000000000 * crowdsaleCoef / 100;\n', '        }\n', '\n', '        if(currentStage == Stage.FlashSale) {\n', '            return 234500000000000;\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    function getStage() public view returns (Stage) {\n', '        if(now >= crowdsaleStartDate && now < crowdsaleEndDate) {\n', '            return Stage.Crowdsale;\n', '        }\n', '\n', '        if(now >= presaleStartDate) {\n', '            if(now < presaleStartDate + 1 days)\n', '                return Stage.FlashSale;\n', '\n', '            if(now < presaleEndDate)\n', '                return Stage.Presale;\n', '        }\n', '\n', '        return Stage.Inactive;\n', '    }\n', '\n', '    function bulkTransfer(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts)\n', '        external onlyOwner validateInput(_payment_ids, _receivers, _amounts) {\n', '\n', '        bool success = false;\n', '\n', '        for (uint i = 0; i < _receivers.length; i++) {\n', '            if (!processedTransactions[_payment_ids[i]]) {\n', '                success = token.transfer(_receivers[i], _amounts[i]);\n', '                processedTransactions[_payment_ids[i]] = success;\n', '\n', '                if (!success)\n', '                    break;\n', '\n', '                advanceStage(_amounts[i], getStage());\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferTokensToOwner() external onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    function advanceStage(uint tokensBought, Stage currentStage) internal {\n', '        if(currentStage == Stage.Presale || currentStage == Stage.FlashSale) {\n', '            if(tokensBought <= presaleTokenBalance)\n', '            {\n', '                presaleTokenBalance -= tokensBought;\n', '                return;\n', '            }\n', '        }\n', '        \n', '        if(currentStage == Stage.Crowdsale) {\n', '            if(tokensBought <= crowdsaleTokenBalance)\n', '            {\n', '                crowdsaleTokenBalance -= tokensBought;\n', '                return;\n', '            }\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    function withdrawFunds() external nonReentrant {\n', '        require(crowdsaleFundsWallet == msg.sender);\n', '\n', '        crowdsaleFundsWallet.transfer(address(this).balance);\n', '    }\n', '\n', '    function setPresaleStartDate(uint32 _presaleStartDate) external onlyOwner {\n', '        presaleStartDate = _presaleStartDate;\n', '    }\n', '\n', '    function setPresaleEndDate(uint32 _presaleEndDate) external onlyOwner {\n', '        presaleEndDate = _presaleEndDate;\n', '    }\n', '\n', '    function setCrowdsaleStartDate(uint32 _crowdsaleStartDate) external onlyOwner {\n', '        crowdsaleStartDate = _crowdsaleStartDate;\n', '    }\n', '\n', '    function setCrowdsaleEndDate(uint32 _crowdsaleEndDate) external onlyOwner {\n', '        crowdsaleEndDate = _crowdsaleEndDate;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_ + _amount;\n', '        balances[_to] = balances[_to] + _amount;\n', '\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor (string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_ + _amount <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_who] = balances[_who] - _value;\n', '        totalSupply_ = totalSupply_ - _value;\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        _burn(_from, _value);\n', '    }\n', '}\n', '\n', 'contract W12Token is StandardBurnableToken, CappedToken, DetailedERC20, PausableToken  {\n', '    constructor() CappedToken(400*(10**24)) DetailedERC20("W12 Token", "W12", 18) public { }\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract ReentrancyGuard {\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    \n', '    mapping (address=>bool) private whiteList;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused || whiteList[msg.sender]);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused || whiteList[msg.sender]);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '\n', '        emit Unpause();\n', '    }\n', '\n', '    function addToWhiteList(address[] _whiteList) external onlyOwner {\n', '        require(_whiteList.length > 0);\n', '\n', '        for(uint8 i = 0; i < _whiteList.length; i++) {\n', '            assert(_whiteList[i] != address(0));\n', '\n', '            whiteList[_whiteList[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeFromWhiteList(address[] _blackList) external onlyOwner {\n', '        require(_blackList.length > 0);\n', '\n', '        for(uint8 i = 0; i < _blackList.length; i++) {\n', '            assert(_blackList[i] != address(0));\n', '\n', '            whiteList[_blackList[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract W12TokenDistributor is Ownable {\n', '    W12Token public token;\n', '\n', '    mapping(uint32 => bool) public processedTransactions;\n', '\n', '    constructor() public {\n', '        token = new W12Token();\n', '    }\n', '\n', '    function isTransactionSuccessful(uint32 id) external view returns (bool) {\n', '        return processedTransactions[id];\n', '    }\n', '\n', '    modifier validateInput(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts) {\n', '        require(_receivers.length == _amounts.length);\n', '        require(_receivers.length == _payment_ids.length);\n', '\n', '        _;\n', '    }\n', '\n', '    function transferTokenOwnership() external onlyOwner {\n', '        token.transferOwnership(owner);\n', '    }\n', '}\n', '\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    constructor (ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime > block.timestamp);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(block.timestamp >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', 'contract W12Crowdsale is W12TokenDistributor, ReentrancyGuard {\n', '    uint public presaleStartDate = 1526817600;\n', '    uint public presaleEndDate = 1532088000;\n', '    uint public crowdsaleStartDate = 1532692800;\n', '    uint public crowdsaleEndDate = 1538049600;\n', '\n', '    uint public presaleTokenBalance = 20 * (10 ** 24);\n', '    uint public crowdsaleTokenBalance = 80 * (10 ** 24);\n', '\n', '    address public crowdsaleFundsWallet;\n', '\n', '    enum Stage { Inactive, FlashSale, Presale, Crowdsale }\n', '\n', '    event LockCreated(address indexed wallet, address timeLock1, address timeLock2, address timeLock3);\n', '\n', '    constructor(address _crowdsaleFundsWallet) public {\n', '        require(_crowdsaleFundsWallet != address(0));\n', '\n', '        // Wallet to hold collected Ether\n', '        crowdsaleFundsWallet = address(_crowdsaleFundsWallet);\n', '    }\n', '    \n', '    function setUpCrowdsale() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Tokens to sell during the first two phases of ICO\n', '        token.mint(address(this), presaleTokenBalance + crowdsaleTokenBalance);\n', '        // Partners\n', '        token.mint(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        // Bounty and support of ecosystem\n', '        token.mint(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        // Airdrop\n', '        token.mint(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a),  4 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        \n', '        address[] storage whiteList;\n', '\n', '        whiteList.push(address(this));\n', '        whiteList.push(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1));\n', '        whiteList.push(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde));\n', '        whiteList.push(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a));\n', '        whiteList.push(address(0xd13B531160Cfe6CC2f9a5615524CA636A0A94D88));\n', '        whiteList.push(address(0x3BAF5A51E6212d311Bc567b60bE84Fc180d39805));\n', '\n', '        token.addToWhiteList(whiteList);\n', '    }\n', '\n', '    function lockSeedInvestors() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Seed investors\n', '\n', '        address contributor1 = address(0xA0473967Bf75a9D6cA84A58975D26b6Fd3eecB32);\n', '        TokenTimelock t1c1 = new TokenTimelock(token, contributor1, 1541030400);\n', '        TokenTimelock t2c1 = new TokenTimelock(token, contributor1, 1572566400);\n', '        TokenTimelock t3c1 = new TokenTimelock(token, contributor1, 1604188800);\n', '\n', '        token.mint(t1c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor1, t1c1, t2c1, t3c1);\n', '\n', '        address contributor2 = address(0x7ff9837FebAACbD1d1d91066F9DC5bbE1Bf1C023);\n', '        TokenTimelock t1c2 = new TokenTimelock(token, contributor2, 1541030400);\n', '        TokenTimelock t2c2 = new TokenTimelock(token, contributor2, 1572566400);\n', '        TokenTimelock t3c2 = new TokenTimelock(token, contributor2, 1604188800);\n', '\n', '        token.mint(t1c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor2, t1c2, t2c2, t3c2);\n', '\n', '        address contributor3 = address(0xe4a7d4f7C358A56eA191Bb0aC3D8074327504Ac4);\n', '        TokenTimelock t1c3 = new TokenTimelock(token, contributor3, 1541030400);\n', '        TokenTimelock t2c3 = new TokenTimelock(token, contributor3, 1572566400);\n', '        TokenTimelock t3c3 = new TokenTimelock(token, contributor3, 1604188800);\n', '\n', '        token.mint(t1c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c3, 3 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(contributor2, t1c3, t2c3, t3c3);\n', '    }\n', '\n', '    function lockTeamAndReserve() external onlyOwner {\n', '        uint tokenDecimalsMultiplicator = 10 ** 18;\n', '\n', '        // Team lockup\n', '\n', '        address team = address(0x17abe2BA2Af3559A45C016F02EA5677017AA3362);\n', '        TokenTimelock t1c1 = new TokenTimelock(token, team, 1541030400);\n', '        TokenTimelock t2c1 = new TokenTimelock(token, team, 1572566400);\n', '        TokenTimelock t3c1 = new TokenTimelock(token, team, 1604188800);\n', '\n', '        token.mint(t1c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(team, t1c1, t2c1, t3c1);\n', '\n', '        // Reserve lockup\n', '\n', '        address reserve = address(0xE8bE756Ddd148dA0e2B440876A0Dc2FAC8BBE7A7);\n', '        TokenTimelock t1c2 = new TokenTimelock(token, reserve, 1541030400);\n', '        TokenTimelock t2c2 = new TokenTimelock(token, reserve, 1572566400);\n', '        TokenTimelock t3c2 = new TokenTimelock(token, reserve, 1604188800);\n', '\n', '        token.mint(t1c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t2c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '        token.mint(t3c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\n', '\n', '        emit LockCreated(reserve, t1c2, t2c2, t3c2);\n', '    }\n', '\n', '    function () payable external {\n', '        Stage currentStage = getStage();\n', '\n', '        require(currentStage != Stage.Inactive);\n', '\n', '        uint currentRate = getCurrentRate();\n', '        uint tokensBought = msg.value * (10 ** 18) / currentRate;\n', '\n', '        token.transfer(msg.sender, tokensBought);\n', '        advanceStage(tokensBought, currentStage);\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint) {\n', '        uint currentSaleTime;\n', '        Stage currentStage = getStage();\n', '\n', '        if(currentStage == Stage.Presale) {\n', '            currentSaleTime = now - presaleStartDate;\n', '            uint presaleCoef = currentSaleTime * 100 / (presaleEndDate - presaleStartDate);\n', '            \n', '            return 262500000000000 + 35000000000000 * presaleCoef / 100;\n', '        }\n', '        \n', '        if(currentStage == Stage.Crowdsale) {\n', '            currentSaleTime = now - crowdsaleStartDate;\n', '            uint crowdsaleCoef = currentSaleTime * 100 / (crowdsaleEndDate - crowdsaleStartDate);\n', '\n', '            return 315000000000000 + 35000000000000 * crowdsaleCoef / 100;\n', '        }\n', '\n', '        if(currentStage == Stage.FlashSale) {\n', '            return 234500000000000;\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    function getStage() public view returns (Stage) {\n', '        if(now >= crowdsaleStartDate && now < crowdsaleEndDate) {\n', '            return Stage.Crowdsale;\n', '        }\n', '\n', '        if(now >= presaleStartDate) {\n', '            if(now < presaleStartDate + 1 days)\n', '                return Stage.FlashSale;\n', '\n', '            if(now < presaleEndDate)\n', '                return Stage.Presale;\n', '        }\n', '\n', '        return Stage.Inactive;\n', '    }\n', '\n', '    function bulkTransfer(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts)\n', '        external onlyOwner validateInput(_payment_ids, _receivers, _amounts) {\n', '\n', '        bool success = false;\n', '\n', '        for (uint i = 0; i < _receivers.length; i++) {\n', '            if (!processedTransactions[_payment_ids[i]]) {\n', '                success = token.transfer(_receivers[i], _amounts[i]);\n', '                processedTransactions[_payment_ids[i]] = success;\n', '\n', '                if (!success)\n', '                    break;\n', '\n', '                advanceStage(_amounts[i], getStage());\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferTokensToOwner() external onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    function advanceStage(uint tokensBought, Stage currentStage) internal {\n', '        if(currentStage == Stage.Presale || currentStage == Stage.FlashSale) {\n', '            if(tokensBought <= presaleTokenBalance)\n', '            {\n', '                presaleTokenBalance -= tokensBought;\n', '                return;\n', '            }\n', '        }\n', '        \n', '        if(currentStage == Stage.Crowdsale) {\n', '            if(tokensBought <= crowdsaleTokenBalance)\n', '            {\n', '                crowdsaleTokenBalance -= tokensBought;\n', '                return;\n', '            }\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    function withdrawFunds() external nonReentrant {\n', '        require(crowdsaleFundsWallet == msg.sender);\n', '\n', '        crowdsaleFundsWallet.transfer(address(this).balance);\n', '    }\n', '\n', '    function setPresaleStartDate(uint32 _presaleStartDate) external onlyOwner {\n', '        presaleStartDate = _presaleStartDate;\n', '    }\n', '\n', '    function setPresaleEndDate(uint32 _presaleEndDate) external onlyOwner {\n', '        presaleEndDate = _presaleEndDate;\n', '    }\n', '\n', '    function setCrowdsaleStartDate(uint32 _crowdsaleStartDate) external onlyOwner {\n', '        crowdsaleStartDate = _crowdsaleStartDate;\n', '    }\n', '\n', '    function setCrowdsaleEndDate(uint32 _crowdsaleEndDate) external onlyOwner {\n', '        crowdsaleEndDate = _crowdsaleEndDate;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_ + _amount;\n', '        balances[_to] = balances[_to] + _amount;\n', '\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor (string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_ + _amount <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who] - _value;\n', '        totalSupply_ = totalSupply_ - _value;\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        _burn(_from, _value);\n', '    }\n', '}\n', '\n', 'contract W12Token is StandardBurnableToken, CappedToken, DetailedERC20, PausableToken  {\n', '    constructor() CappedToken(400*(10**24)) DetailedERC20("W12 Token", "W12", 18) public { }\n', '}']
