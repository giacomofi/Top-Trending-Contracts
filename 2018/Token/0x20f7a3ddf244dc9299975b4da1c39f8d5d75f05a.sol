['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/OwnClaimRenounceable.sol\n', '\n', '/**\n', ' * @title `owner` can renounce its role and leave the contract unowned.\n', ' * @dev There can not be a new `owner`.\n', ' * @dev No `onlyOwner` functions can ever be called again.\n', ' */\n', 'contract OwnClaimRenounceable is Claimable {\n', '\n', '    function renounceOwnershipForever(uint8 _confirm)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_confirm == 73); // Owner knows what he&#39;s doing\n', '        owner = address(0);\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/TokenController.sol\n', '\n', '/** The interface for a token contract to notify a controller of every transfers. */\n', 'contract TokenController {\n', '    bytes4 public constant INTERFACE = bytes4(keccak256("TokenController"));\n', '\n', '    function allowTransfer(address _sender, address _from, address _to, uint256 _value, bytes _purpose) public returns (bool);\n', '}\n', '\n', '\n', '// Basic examples\n', '\n', 'contract YesController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return true; // allow all transfers\n', '    }\n', '}\n', '\n', '\n', 'contract NoController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return false; // veto all transfers\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SapienCoin.sol\n', '\n', '/**\n', ' * @title Has a `controller`.\n', ' * @dev The `controller` must be a contract implementing TokenController.\n', ' * @dev The `controller` can track or veto the tokens transfers.\n', ' * @dev The `controller` can assign its role to another address.\n', ' * @dev The `owner` have all the powers of the `controller`.\n', ' */\n', 'contract Controlled is OwnClaimRenounceable {\n', '\n', '    bytes4 public constant TOKEN_CONTROLLER_INTERFACE = bytes4(keccak256("TokenController"));\n', '    TokenController public controller;\n', '\n', '    function Controlled() public {}\n', '\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyControllerOrOwner {\n', '        require((msg.sender == address(controller)) || (msg.sender == owner));\n', '        _;\n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(TokenController _newController)\n', '        public onlyControllerOrOwner\n', '    {\n', '        if(address(_newController) != address(0)) {\n', '            // Check type to prevent mistakes\n', '            require(_newController.INTERFACE() == TOKEN_CONTROLLER_INTERFACE);\n', '        }\n', '        controller = _newController;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ControlledToken is StandardToken, Controlled {\n', '\n', '    modifier controllerCallback(address _from, address _to, uint256 _value, bytes _purpose) {\n', '        // If a controller is present, ask it about the transfer.\n', '        if(address(controller) != address(0)) {\n', '            bool _allow = controller.allowTransfer(msg.sender, _from, _to, _value, _purpose);\n', '            if(!_allow) {\n', '                return; // Do not transfer\n', '            }\n', '        }\n', '        _; // Proceed with the transfer\n', '    }\n', '\n', '    /** @dev ERC20 transfer with controller callback */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        controllerCallback(msg.sender, _to, _value, hex"")\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /** @dev ERC20 transferFrom with controller callback */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        controllerCallback(_from, _to, _value, hex"")\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens to a specified address, including a purpose.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _purpose Arbitrary data attached to the transaction.\n', '    */\n', '    function transferWithPurpose(address _to, uint256 _value, bytes _purpose)\n', '        public\n', '        controllerCallback(msg.sender, _to, _value, _purpose)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BatchToken is ControlledToken {\n', '\n', '    /**\n', '    * @dev Transfer to many addresses in a single transaction.\n', '    * @dev Call transfer(to, amount) with the arguments taken from two arrays.\n', '    * @dev If one transfer is invalid, everything is aborted.\n', '    * @dev The `_expectZero` option is intended for the initial batch minting.\n', '    *      It allows operations to be retried and prevents double-minting due to the\n', '    *      asynchronous and uncertain nature of blockchain transactions.\n', '    *      It should be avoided after trading has started.\n', '    * @param _toArray Addresses that will receive tokens.\n', '    * @param _amountArray Amounts of tokens to transfer, in the same order as `_toArray`.\n', '    * @param _expectZero If false, transfer the tokens immediately.\n', '    *                    If true, expect the current balance of `_to` to be zero before\n', '    *                    the transfer. If not zero, skip this transfer but continue.\n', '    */\n', '    function transferBatchIdempotent(address[] _toArray, uint256[] _amountArray, bool _expectZero)\n', '        // Anyone can call if they have the balance\n', '        public\n', '    {\n', '        // Check that the arrays are the same size\n', '        uint256 _count = _toArray.length;\n', '        require(_amountArray.length == _count);\n', '\n', '        for (uint256 i = 0; i < _count; i++) {\n', '            address _to = _toArray[i];\n', '            // Either regular transfer, or check that BasicToken.balances is zero.\n', '            if(!_expectZero || (balanceOf(_to) == 0)) {\n', '                transfer(_to, _amountArray[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title The Sapien Token.\n', ' */\n', 'contract SapienToken is BatchToken {\n', '\n', '    string public constant name = "Sapien Network";\n', '    string public constant symbol = "SPN";\n', '    uint256 public constant decimals = 6;\n', '    string public constant website = "https://sapien.network";\n', '\n', '    /**\n', '    * @dev The maximum supply that can be minted, in microSPN.\n', '    *      500M with 6 decimals.\n', '    */\n', '    uint256 public constant MAX_SUPPLY_USPN = 500 * 1000 * 1000 * (10**decimals);\n', '\n', '    function SapienToken() public {\n', '        // All initial tokens to owner\n', '        balances[msg.sender] = MAX_SUPPLY_USPN;\n', '        totalSupply_ = MAX_SUPPLY_USPN;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/OwnClaimRenounceable.sol\n', '\n', '/**\n', ' * @title `owner` can renounce its role and leave the contract unowned.\n', ' * @dev There can not be a new `owner`.\n', ' * @dev No `onlyOwner` functions can ever be called again.\n', ' */\n', 'contract OwnClaimRenounceable is Claimable {\n', '\n', '    function renounceOwnershipForever(uint8 _confirm)\n', '        public\n', '        onlyOwner\n', '    {\n', "        require(_confirm == 73); // Owner knows what he's doing\n", '        owner = address(0);\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/TokenController.sol\n', '\n', '/** The interface for a token contract to notify a controller of every transfers. */\n', 'contract TokenController {\n', '    bytes4 public constant INTERFACE = bytes4(keccak256("TokenController"));\n', '\n', '    function allowTransfer(address _sender, address _from, address _to, uint256 _value, bytes _purpose) public returns (bool);\n', '}\n', '\n', '\n', '// Basic examples\n', '\n', 'contract YesController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return true; // allow all transfers\n', '    }\n', '}\n', '\n', '\n', 'contract NoController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return false; // veto all transfers\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SapienCoin.sol\n', '\n', '/**\n', ' * @title Has a `controller`.\n', ' * @dev The `controller` must be a contract implementing TokenController.\n', ' * @dev The `controller` can track or veto the tokens transfers.\n', ' * @dev The `controller` can assign its role to another address.\n', ' * @dev The `owner` have all the powers of the `controller`.\n', ' */\n', 'contract Controlled is OwnClaimRenounceable {\n', '\n', '    bytes4 public constant TOKEN_CONTROLLER_INTERFACE = bytes4(keccak256("TokenController"));\n', '    TokenController public controller;\n', '\n', '    function Controlled() public {}\n', '\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyControllerOrOwner {\n', '        require((msg.sender == address(controller)) || (msg.sender == owner));\n', '        _;\n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(TokenController _newController)\n', '        public onlyControllerOrOwner\n', '    {\n', '        if(address(_newController) != address(0)) {\n', '            // Check type to prevent mistakes\n', '            require(_newController.INTERFACE() == TOKEN_CONTROLLER_INTERFACE);\n', '        }\n', '        controller = _newController;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ControlledToken is StandardToken, Controlled {\n', '\n', '    modifier controllerCallback(address _from, address _to, uint256 _value, bytes _purpose) {\n', '        // If a controller is present, ask it about the transfer.\n', '        if(address(controller) != address(0)) {\n', '            bool _allow = controller.allowTransfer(msg.sender, _from, _to, _value, _purpose);\n', '            if(!_allow) {\n', '                return; // Do not transfer\n', '            }\n', '        }\n', '        _; // Proceed with the transfer\n', '    }\n', '\n', '    /** @dev ERC20 transfer with controller callback */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        controllerCallback(msg.sender, _to, _value, hex"")\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /** @dev ERC20 transferFrom with controller callback */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        controllerCallback(_from, _to, _value, hex"")\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens to a specified address, including a purpose.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _purpose Arbitrary data attached to the transaction.\n', '    */\n', '    function transferWithPurpose(address _to, uint256 _value, bytes _purpose)\n', '        public\n', '        controllerCallback(msg.sender, _to, _value, _purpose)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BatchToken is ControlledToken {\n', '\n', '    /**\n', '    * @dev Transfer to many addresses in a single transaction.\n', '    * @dev Call transfer(to, amount) with the arguments taken from two arrays.\n', '    * @dev If one transfer is invalid, everything is aborted.\n', '    * @dev The `_expectZero` option is intended for the initial batch minting.\n', '    *      It allows operations to be retried and prevents double-minting due to the\n', '    *      asynchronous and uncertain nature of blockchain transactions.\n', '    *      It should be avoided after trading has started.\n', '    * @param _toArray Addresses that will receive tokens.\n', '    * @param _amountArray Amounts of tokens to transfer, in the same order as `_toArray`.\n', '    * @param _expectZero If false, transfer the tokens immediately.\n', '    *                    If true, expect the current balance of `_to` to be zero before\n', '    *                    the transfer. If not zero, skip this transfer but continue.\n', '    */\n', '    function transferBatchIdempotent(address[] _toArray, uint256[] _amountArray, bool _expectZero)\n', '        // Anyone can call if they have the balance\n', '        public\n', '    {\n', '        // Check that the arrays are the same size\n', '        uint256 _count = _toArray.length;\n', '        require(_amountArray.length == _count);\n', '\n', '        for (uint256 i = 0; i < _count; i++) {\n', '            address _to = _toArray[i];\n', '            // Either regular transfer, or check that BasicToken.balances is zero.\n', '            if(!_expectZero || (balanceOf(_to) == 0)) {\n', '                transfer(_to, _amountArray[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title The Sapien Token.\n', ' */\n', 'contract SapienToken is BatchToken {\n', '\n', '    string public constant name = "Sapien Network";\n', '    string public constant symbol = "SPN";\n', '    uint256 public constant decimals = 6;\n', '    string public constant website = "https://sapien.network";\n', '\n', '    /**\n', '    * @dev The maximum supply that can be minted, in microSPN.\n', '    *      500M with 6 decimals.\n', '    */\n', '    uint256 public constant MAX_SUPPLY_USPN = 500 * 1000 * 1000 * (10**decimals);\n', '\n', '    function SapienToken() public {\n', '        // All initial tokens to owner\n', '        balances[msg.sender] = MAX_SUPPLY_USPN;\n', '        totalSupply_ = MAX_SUPPLY_USPN;\n', '    }\n', '\n', '}']
