['// contracts/Funding.sol\n', 'pragma solidity ^0.4.19;\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value > 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_value > 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_value > 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(_addedValue > 0);\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(_subtractedValue > 0);\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract Funding is StandardToken, BurnableToken, Ownable {\n', '  string public constant name = "HolographicPictureChain"; \n', '  string public constant symbol = "HOLP"; \n', '  uint8 public constant decimals = 18; \n', '  uint256 public constant INITIAL_SUPPLY = 2000000000 * (10 ** uint256(decimals));\n', '  address public agent;\n', '\n', '  function Funding() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '  function setAgent(address _agent) public onlyOwner returns (bool) {\n', '  \trequire(_agent != address(0));\n', '\tagent = _agent;\n', '\treturn true;\n', '  }\n', '  //do multiple transaction in on call\n', '  function batchTransfer(address[] _tos, uint256[] _values) public returns (bool) {\n', '\trequire(_tos.length > 0);\n', '\trequire(_values.length > 0);\n', '\trequire(_tos.length == _values.length);\n', '\taddress curOwner = msg.sender;\n', '\tif(agent != address(0) && agent == msg.sender){\n', '\t\tcurOwner = owner;\n', '\t}\n', '\tuint256 totalValue = 0;\n', '        uint arrLen = _values.length;\n', '\tfor (uint i = 0; i < arrLen; i ++){\n', '\t\ttotalValue = totalValue.add( _values[i]);\n', '\t}\n', '\trequire(totalValue <= balances[curOwner]);\n', '\tfor (uint idx = 0; idx < arrLen; idx ++){\n', '\t\taddress curAddress = _tos[idx];\n', '\t\tbalances[curOwner] = balances[curOwner].sub(_values[idx]);\n', '\t\tbalances[curAddress] = balances[curAddress].add( _values[idx]);\n', '\t\temit Transfer(curOwner, curAddress, _values[idx]);\n', '\t}\n', '\treturn true;\n', '  }\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value > 0);\n', '    require(_to != address(0));\n', '    address curOwner = msg.sender;\n', '    if(agent != address(0) && agent == msg.sender){\n', '    \tcurOwner = owner;\n', '    }\n', '    require(_value <= balances[curOwner]);\n', '    balances[curOwner] = balances[curOwner].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(curOwner, _to, _value);\n', '    return true;\n', '  }\n', '}']