['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract CRTTToken is Ownable {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    string public constant name = "CRTT Token";\n', '    string public constant symbol = "CRTT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 constant restrictedPercent = 25; //should never be set above 100\n', '    address constant restrictedAddress = 0xDFfc94eb3e4cA1fef33a2aF22ECd66c724707388;\n', '    uint256 constant mintFinishTime = 1551448800;\n', '    uint256 constant transferAllowTime = 1552140000;\n', '    uint256 public constant hardcap = 299000000 * 1 ether;\n', '    \n', '    bool public transferAllowed = false;\n', '    bool public mintingFinished = false;\n', '    \n', '    modifier whenTransferAllowed() {\n', '        require(transferAllowed || now > transferAllowTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        require(now < mintFinishTime);\n', '        _;\n', '    }\n', '    \n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '  \n', '    function transfer(address _to, uint256 _value) whenTransferAllowed public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) whenTransferAllowed public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        //NOTE: To prevent attack vectors like the one discussed here: \n', '        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\n', '        //clients SHOULD make sure to create user interfaces in such a way \n', '        //that they set the allowance first to 0 before setting it to another value for the same spender. \n', '    \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '   \n', '    function allowTransfer() onlyOwner public {\n', '        transferAllowed = true;\n', '    }\n', '    \n', '    function batchMint(address[] _to, uint256[] _value) onlyOwner saleIsOn canMint public returns (bool) {\n', '        require(_to.length == _value.length);\n', '        \n', '        uint256 valueSum = 0;\n', '        \n', '        for (uint256 i = 0; i < _to.length; i++) {\n', '            require(_to[i] != address(0));\n', '            require(_value[i] > 0);\n', '            \n', '            balances[_to[i]] = balances[_to[i]] + _value[i];\n', '            assert(balances[_to[i]] >= _value[i]);\n', '            Transfer(address(0), _to[i], _value[i]);\n', '            \n', '            valueSum = valueSum + _value[i];\n', '            assert(valueSum >= _value[i]);\n', '        }\n', '        \n', '        uint256 restrictedSum = valueSum * restrictedPercent;\n', '        assert(restrictedSum / valueSum == restrictedPercent);\n', '        restrictedSum = restrictedSum / (100 - restrictedPercent);\n', '        \n', '        balances[restrictedAddress] = balances[restrictedAddress] + restrictedSum;\n', '        assert(balances[restrictedAddress] >= restrictedSum);\n', '        Transfer(address(0), restrictedAddress, restrictedSum);\n', '        \n', '        uint256 totalSupplyNew = totalSupply + valueSum;\n', '        assert(totalSupplyNew >= valueSum);\n', '        totalSupplyNew = totalSupplyNew + restrictedSum;\n', '        assert(totalSupplyNew >= restrictedSum);\n', '        \n', '        require(totalSupplyNew <= hardcap);\n', '        totalSupply = totalSupplyNew;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        totalSupply = totalSupply - _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from] - _value;\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        totalSupply = totalSupply - _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    event MintFinished();\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract CRTTToken is Ownable {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    string public constant name = "CRTT Token";\n', '    string public constant symbol = "CRTT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 constant restrictedPercent = 25; //should never be set above 100\n', '    address constant restrictedAddress = 0xDFfc94eb3e4cA1fef33a2aF22ECd66c724707388;\n', '    uint256 constant mintFinishTime = 1551448800;\n', '    uint256 constant transferAllowTime = 1552140000;\n', '    uint256 public constant hardcap = 299000000 * 1 ether;\n', '    \n', '    bool public transferAllowed = false;\n', '    bool public mintingFinished = false;\n', '    \n', '    modifier whenTransferAllowed() {\n', '        require(transferAllowed || now > transferAllowTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        require(now < mintFinishTime);\n', '        _;\n', '    }\n', '    \n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '  \n', '    function transfer(address _to, uint256 _value) whenTransferAllowed public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) whenTransferAllowed public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from] - _value;\n', '        balances[_to] = balances[_to] + _value;\n', '        //assert(balances[_to] >= _value); no need to check, since mint has limited hardcap\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        //NOTE: To prevent attack vectors like the one discussed here: \n', '        //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\n', '        //clients SHOULD make sure to create user interfaces in such a way \n', '        //that they set the allowance first to 0 before setting it to another value for the same spender. \n', '    \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '   \n', '    function allowTransfer() onlyOwner public {\n', '        transferAllowed = true;\n', '    }\n', '    \n', '    function batchMint(address[] _to, uint256[] _value) onlyOwner saleIsOn canMint public returns (bool) {\n', '        require(_to.length == _value.length);\n', '        \n', '        uint256 valueSum = 0;\n', '        \n', '        for (uint256 i = 0; i < _to.length; i++) {\n', '            require(_to[i] != address(0));\n', '            require(_value[i] > 0);\n', '            \n', '            balances[_to[i]] = balances[_to[i]] + _value[i];\n', '            assert(balances[_to[i]] >= _value[i]);\n', '            Transfer(address(0), _to[i], _value[i]);\n', '            \n', '            valueSum = valueSum + _value[i];\n', '            assert(valueSum >= _value[i]);\n', '        }\n', '        \n', '        uint256 restrictedSum = valueSum * restrictedPercent;\n', '        assert(restrictedSum / valueSum == restrictedPercent);\n', '        restrictedSum = restrictedSum / (100 - restrictedPercent);\n', '        \n', '        balances[restrictedAddress] = balances[restrictedAddress] + restrictedSum;\n', '        assert(balances[restrictedAddress] >= restrictedSum);\n', '        Transfer(address(0), restrictedAddress, restrictedSum);\n', '        \n', '        uint256 totalSupplyNew = totalSupply + valueSum;\n', '        assert(totalSupplyNew >= valueSum);\n', '        totalSupplyNew = totalSupplyNew + restrictedSum;\n', '        assert(totalSupplyNew >= restrictedSum);\n', '        \n', '        require(totalSupplyNew <= hardcap);\n', '        totalSupply = totalSupplyNew;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        balances[msg.sender] = balances[msg.sender] - _value;\n', '        totalSupply = totalSupply - _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from] - _value;\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '        totalSupply = totalSupply - _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    event MintFinished();\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '}']
