['pragma solidity ^0.4.24;\n', 'contract Ownable {\n', '    address public owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = false;\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Contract Paused. Events/Transaction Paused until Further Notice");\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(paused, "Contract Functionality Resumed");\n', '        _;\n', '    }\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', 'contract ERC20Token {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '}\n', 'contract Airdrop is Ownable, Pausable {\n', '    event TokenDrop(address indexed _from, address indexed _to, uint256 _value);\n', '    function drop(ERC20Token _token, address[] _recipients, uint256[] _values) public onlyOwner whenNotPaused {\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            _token.transferFrom(msg.sender, _recipients[i], _values[i]);\n', '            emit TokenDrop(msg.sender, _recipients[i], _values[i]);\n', '        }\n', '    }\n', '}']