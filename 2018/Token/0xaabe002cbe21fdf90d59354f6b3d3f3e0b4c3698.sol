['pragma solidity ^0.4.16;\n', '//FYN Airdrop contract for Tokens\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', ' \n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier onlyAdmin() {\n', '    if (msg.sender != admin) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract tntsend is Ownable {\n', '    address public tokenaddress;\n', '   \n', '    \n', '    function tntsend(){\n', '        tokenaddress = \t0x08f5a9235b08173b7569f83645d2c7fb55e8ccd8;\n', '        admin = msg.sender;\n', '    }\n', '    function setupairdrop(address _tokenaddr,address _admin) onlyOwner {\n', '        tokenaddress = _tokenaddr;\n', '        admin= _admin;\n', '    }\n', '    \n', '    function multisend(address[] dests, uint256[] values)\n', '    onlyAdmin\n', '    returns (uint256) {\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '           ERC20(tokenaddress).transfer(dests[i], values[i]);\n', '           i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '}']