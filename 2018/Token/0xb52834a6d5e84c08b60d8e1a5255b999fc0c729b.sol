['pragma solidity ^0.4.18 ;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContractiumInterface {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function contractSpend(address _from, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function owner() public view returns (address);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract AirdropContractium is Ownable {\n', '    \n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    //Contractium contract interface\n', '    ContractiumInterface ctuContract;\n', '\n', '    //Store addresses submitted\n', '    mapping(address => bool) submitted;\n', '    \n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_AIRDROP = 20000000 * (10 ** uint256(decimals));\n', '    address public constant CTU_ADDRESS = 0x943ACa8ed65FBf188A7D369Cfc2BeE0aE435ee1B;\n', '    address public ctu_owner = 0x69f4965e77dFF568cF2f8877F2B39d636D581ae8;\n', '    \n', '    uint256 public reward = 200 * (10 ** uint256(decimals));\n', '    uint256 public remainAirdrop;\n', '   \n', '    event Submit(address _addr, bool _isSuccess);\n', '   \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        remainAirdrop = INITIAL_AIRDROP;\n', '        ctuContract = ContractiumInterface(CTU_ADDRESS);\n', '    }\n', '    \n', '    function getAirdrop() public isNotSubmitted isRemain returns (bool) {\n', '        return submit(msg.sender);\n', '    }\n', '    \n', '    function batchSubmit(address[] _addresses) public onlyOwner {\n', '        for(uint i; i < _addresses.length; i++) {\n', '            if (!submitted[_addresses[i]]) {\n', '                submit(_addresses[i]);\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    function submit(address _addr) private returns (bool) {\n', '        address _from = ctu_owner;\n', '        address _to = _addr;\n', '        uint256 _value = uint256(reward);\n', '        bool isSuccess = ctuContract.transferFrom(_from, _to, _value);\n', '        \n', '        if (isSuccess) {\n', '            submitted[_to] = true;\n', '            remainAirdrop = remainAirdrop.sub(_value);\n', '        }\n', '        \n', '        emit Submit(_addr, isSuccess);\n', '        \n', '        closeAirdrop();\n', '        return isSuccess;\n', '    }\n', '    \n', '    \n', '    modifier isNotSubmitted() {\n', '        require(!submitted[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier isRemain() {\n', '        require(remainAirdrop > 0);\n', '        require(reward > 0);\n', '        _;\n', '    }\n', '    \n', '    function closeAirdrop() private {\n', '        address _owner = ctu_owner;\n', '        address _spender = address(this);\n', '        uint256 _remain = ctuContract.allowance(_owner, _spender);\n', '        \n', '        if (_remain < reward) {\n', '            reward = 0;\n', '            remainAirdrop = 0;\n', '        }\n', '    }\n', '  \n', '    function setCtuContract(address _ctuAddress) public onlyOwner  returns (bool) {\n', '        require(_ctuAddress != address(0x0));\n', '        ctuContract = ContractiumInterface(_ctuAddress);\n', '        ctu_owner = ctuContract.owner();\n', '        return true;\n', '    }\n', '    \n', '    function setRemainAirdrop(uint256 _remain) public onlyOwner  returns (bool) {\n', '        remainAirdrop = _remain;\n', '        return true;\n', '    }\n', '    \n', '    function setReward(uint256 _reward) public onlyOwner  returns (bool) {\n', '        reward = _reward;\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _addr) public onlyOwner {\n', '        super.transferOwnership(_addr);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18 ;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContractiumInterface {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function contractSpend(address _from, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function owner() public view returns (address);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract AirdropContractium is Ownable {\n', '    \n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    //Contractium contract interface\n', '    ContractiumInterface ctuContract;\n', '\n', '    //Store addresses submitted\n', '    mapping(address => bool) submitted;\n', '    \n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_AIRDROP = 20000000 * (10 ** uint256(decimals));\n', '    address public constant CTU_ADDRESS = 0x943ACa8ed65FBf188A7D369Cfc2BeE0aE435ee1B;\n', '    address public ctu_owner = 0x69f4965e77dFF568cF2f8877F2B39d636D581ae8;\n', '    \n', '    uint256 public reward = 200 * (10 ** uint256(decimals));\n', '    uint256 public remainAirdrop;\n', '   \n', '    event Submit(address _addr, bool _isSuccess);\n', '   \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        remainAirdrop = INITIAL_AIRDROP;\n', '        ctuContract = ContractiumInterface(CTU_ADDRESS);\n', '    }\n', '    \n', '    function getAirdrop() public isNotSubmitted isRemain returns (bool) {\n', '        return submit(msg.sender);\n', '    }\n', '    \n', '    function batchSubmit(address[] _addresses) public onlyOwner {\n', '        for(uint i; i < _addresses.length; i++) {\n', '            if (!submitted[_addresses[i]]) {\n', '                submit(_addresses[i]);\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    function submit(address _addr) private returns (bool) {\n', '        address _from = ctu_owner;\n', '        address _to = _addr;\n', '        uint256 _value = uint256(reward);\n', '        bool isSuccess = ctuContract.transferFrom(_from, _to, _value);\n', '        \n', '        if (isSuccess) {\n', '            submitted[_to] = true;\n', '            remainAirdrop = remainAirdrop.sub(_value);\n', '        }\n', '        \n', '        emit Submit(_addr, isSuccess);\n', '        \n', '        closeAirdrop();\n', '        return isSuccess;\n', '    }\n', '    \n', '    \n', '    modifier isNotSubmitted() {\n', '        require(!submitted[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier isRemain() {\n', '        require(remainAirdrop > 0);\n', '        require(reward > 0);\n', '        _;\n', '    }\n', '    \n', '    function closeAirdrop() private {\n', '        address _owner = ctu_owner;\n', '        address _spender = address(this);\n', '        uint256 _remain = ctuContract.allowance(_owner, _spender);\n', '        \n', '        if (_remain < reward) {\n', '            reward = 0;\n', '            remainAirdrop = 0;\n', '        }\n', '    }\n', '  \n', '    function setCtuContract(address _ctuAddress) public onlyOwner  returns (bool) {\n', '        require(_ctuAddress != address(0x0));\n', '        ctuContract = ContractiumInterface(_ctuAddress);\n', '        ctu_owner = ctuContract.owner();\n', '        return true;\n', '    }\n', '    \n', '    function setRemainAirdrop(uint256 _remain) public onlyOwner  returns (bool) {\n', '        remainAirdrop = _remain;\n', '        return true;\n', '    }\n', '    \n', '    function setReward(uint256 _reward) public onlyOwner  returns (bool) {\n', '        reward = _reward;\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _addr) public onlyOwner {\n', '        super.transferOwnership(_addr);\n', '    }\n', '\n', '}']
