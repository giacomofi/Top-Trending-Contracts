['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal constant returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal constant returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal constant returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', 'contract HelloToken {\n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public constant name    = "Hello Token";  //The Token&#39;s name\n', '    uint8 public constant decimals = 18;               //Number of decimals of the smallest unit\n', '    string public constant symbol  = "HelloT";            //An identifier    \n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    \n', '    // packed to 256bit to save gas usage.\n', '    struct Supplies {\n', '        // uint128&#39;s max value is about 3e38.\n', '        // it&#39;s enough to present amount of tokens\n', '        uint128 totalSupply;\n', '    }\n', '    \n', '    Supplies supplies;\n', '    \n', '    // Packed to 256bit to save gas usage.    \n', '    struct Account {\n', '        // uint112&#39;s max value is about 5e33.\n', '        // it&#39;s enough to present amount of tokens\n', '        uint112 balance;\n', '    }\n', '    \n', '\n', '    // This creates an array with all balances\n', '    mapping (address => Account) public balanceOf;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function HelloToken() public {\n', '        supplies.totalSupply = 1*(10**10) * (10 ** 18);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender].balance = uint112(supplies.totalSupply);                // Give the creator all initial tokens\n', '    }\n', '    \n', '    // Send back ether sent to me\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from].balance >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to].balance + _value >= balanceOf[_to].balance);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from].balance + balanceOf[_to].balance;\n', '        // Subtract from the sender\n', '        balanceOf[_from].balance -= uint112(_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to].balance = _value.add(balanceOf[_to].balance).toUINT112();\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from].balance + balanceOf[_to].balance == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    \n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender].balance >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender].balance -= uint112(_value);            // Subtract from the sender\n', '        supplies.totalSupply -= uint128(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Total Supply\n', '     *\n', '     * View Total Supply\n', '     *\n', '     * Return Total Supply\n', '     * \n', '     */\n', '    function totalSupply() public constant returns (uint256 supply){\n', '        return supplies.totalSupply;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal constant returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal constant returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal constant returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', 'contract HelloToken {\n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public constant name    = "Hello Token";  //The Token\'s name\n', '    uint8 public constant decimals = 18;               //Number of decimals of the smallest unit\n', '    string public constant symbol  = "HelloT";            //An identifier    \n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    \n', '    // packed to 256bit to save gas usage.\n', '    struct Supplies {\n', "        // uint128's max value is about 3e38.\n", "        // it's enough to present amount of tokens\n", '        uint128 totalSupply;\n', '    }\n', '    \n', '    Supplies supplies;\n', '    \n', '    // Packed to 256bit to save gas usage.    \n', '    struct Account {\n', "        // uint112's max value is about 5e33.\n", "        // it's enough to present amount of tokens\n", '        uint112 balance;\n', '    }\n', '    \n', '\n', '    // This creates an array with all balances\n', '    mapping (address => Account) public balanceOf;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function HelloToken() public {\n', '        supplies.totalSupply = 1*(10**10) * (10 ** 18);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender].balance = uint112(supplies.totalSupply);                // Give the creator all initial tokens\n', '    }\n', '    \n', '    // Send back ether sent to me\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from].balance >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to].balance + _value >= balanceOf[_to].balance);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from].balance + balanceOf[_to].balance;\n', '        // Subtract from the sender\n', '        balanceOf[_from].balance -= uint112(_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to].balance = _value.add(balanceOf[_to].balance).toUINT112();\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from].balance + balanceOf[_to].balance == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    \n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender].balance >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender].balance -= uint112(_value);            // Subtract from the sender\n', '        supplies.totalSupply -= uint128(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Total Supply\n', '     *\n', '     * View Total Supply\n', '     *\n', '     * Return Total Supply\n', '     * \n', '     */\n', '    function totalSupply() public constant returns (uint256 supply){\n', '        return supplies.totalSupply;\n', '    }\n', '}']
