['pragma solidity ^0.4.18;\n', '\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '} \n', ' contract ContractReceiver {\n', '     \n', '   struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '    \n', '    address [] public senders;\n', '    function tokenFallback(address _from, uint _value, bytes _data) public  {\n', '        require(_from != address(0));\n', '        require(_value>0);\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '        senders.push(_from);\n', '    }\n', '}\n', 'contract ERC223Interface {\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string);\n', '  function symbol() public view returns (string);\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC223Token  is ERC223Interface  {\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string internal _name;\n', '  string internal _symbol;\n', '  uint internal _decimals;\n', '  uint256 internal _totalSupply;\n', '   using SafeMath for uint;\n', '  \n', '  \n', '  // Function to access name of token .\n', '  function name() public view returns (string) {\n', '      return _name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public view returns (string) {\n', '      return _symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public view returns (uint ) {\n', '      return _decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public view returns (uint256 ) {\n', '      return _totalSupply;\n', '  }\n', '  \n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '     require(_to != address(0));\n', '    if(isContract(_to)) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add( _value);\n', '        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '      \n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(_value>0);\n', '    require(balanceOf(msg.sender)>=_value);\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add( _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(_value>0);\n', '    require(balanceOf(msg.sender)>=_value);\n', '    balances[msg.sender] = balanceOf(msg.sender).sub( _value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '}\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Balances is Ownable,\n', 'ERC223Token {\n', '    mapping(address => bool)public modules;\n', '    using SafeMath for uint256; \n', '    address public tokenTransferAddress;  \n', '     function Balances()public {\n', '        // constructor\n', '    }\n', '    // Address where funds are collected\n', '\n', '    function updateModuleStatus(address _module, bool status)public onlyOwner {\n', '        require(_module != address(0));\n', '        modules[_module] = status;\n', '    }\n', '\n', '    function updateTokenTransferAddress(address _tokenAddr)public onlyOwner {\n', '        require(_tokenAddr != address(0));\n', '        tokenTransferAddress = _tokenAddr;\n', '\n', '    }\n', '\n', '    modifier onlyModule() {\n', '        require(modules[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function increaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n', '        bool\n', '    ) {\n', '        require(recieverAddr != address(0));\n', '        require(balances[tokenTransferAddress] >= _tokens);\n', '        balances[tokenTransferAddress] = balances[tokenTransferAddress].sub(_tokens);\n', '        balances[recieverAddr] = balances[recieverAddr].add(_tokens);\n', '        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n', '        return true;\n', '    }\n', '    function decreaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n', '        bool\n', '    ) {\n', '        require(recieverAddr != address(0));\n', '        require(balances[recieverAddr] >= _tokens);\n', '        balances[recieverAddr] = balances[recieverAddr].sub(_tokens);\n', '        balances[tokenTransferAddress] = balances[tokenTransferAddress].add(_tokens);\n', '        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n', '        return true;\n', '    }\n', '\n', '   \n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Gig9 is Balances,\n', 'Pausable,\n', 'Destructible {\n', '    \n', '    function Gig9()public {\n', '        _name = "GIG9";\n', '        _symbol = "GIG";\n', '        _decimals = 8;\n', '        _totalSupply = 268000000 * (10 ** _decimals);\n', '        owner = msg.sender;\n', '        balances[0x0A35230Af852bc0C094978851640Baf796f1cC9D] = _totalSupply;\n', '        tokenTransferAddress = 0x0A35230Af852bc0C094978851640Baf796f1cC9D;\n', '    }\n', '\n', '    function ()public {\n', '        revert();\n', '\n', '    }\n', '\n', '   \n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '} \n', ' contract ContractReceiver {\n', '     \n', '   struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '    \n', '    address [] public senders;\n', '    function tokenFallback(address _from, uint _value, bytes _data) public  {\n', '        require(_from != address(0));\n', '        require(_value>0);\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '        senders.push(_from);\n', '    }\n', '}\n', 'contract ERC223Interface {\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string);\n', '  function symbol() public view returns (string);\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC223Token  is ERC223Interface  {\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string internal _name;\n', '  string internal _symbol;\n', '  uint internal _decimals;\n', '  uint256 internal _totalSupply;\n', '   using SafeMath for uint;\n', '  \n', '  \n', '  // Function to access name of token .\n', '  function name() public view returns (string) {\n', '      return _name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public view returns (string) {\n', '      return _symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public view returns (uint ) {\n', '      return _decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public view returns (uint256 ) {\n', '      return _totalSupply;\n', '  }\n', '  \n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '     require(_to != address(0));\n', '    if(isContract(_to)) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add( _value);\n', '        assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '      \n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(_value>0);\n', '    require(balanceOf(msg.sender)>=_value);\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add( _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    require(_value>0);\n', '    require(balanceOf(msg.sender)>=_value);\n', '    balances[msg.sender] = balanceOf(msg.sender).sub( _value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '}\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Balances is Ownable,\n', 'ERC223Token {\n', '    mapping(address => bool)public modules;\n', '    using SafeMath for uint256; \n', '    address public tokenTransferAddress;  \n', '     function Balances()public {\n', '        // constructor\n', '    }\n', '    // Address where funds are collected\n', '\n', '    function updateModuleStatus(address _module, bool status)public onlyOwner {\n', '        require(_module != address(0));\n', '        modules[_module] = status;\n', '    }\n', '\n', '    function updateTokenTransferAddress(address _tokenAddr)public onlyOwner {\n', '        require(_tokenAddr != address(0));\n', '        tokenTransferAddress = _tokenAddr;\n', '\n', '    }\n', '\n', '    modifier onlyModule() {\n', '        require(modules[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function increaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n', '        bool\n', '    ) {\n', '        require(recieverAddr != address(0));\n', '        require(balances[tokenTransferAddress] >= _tokens);\n', '        balances[tokenTransferAddress] = balances[tokenTransferAddress].sub(_tokens);\n', '        balances[recieverAddr] = balances[recieverAddr].add(_tokens);\n', '        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n', '        return true;\n', '    }\n', '    function decreaseBalance(address recieverAddr, uint256 _tokens)onlyModule public returns(\n', '        bool\n', '    ) {\n', '        require(recieverAddr != address(0));\n', '        require(balances[recieverAddr] >= _tokens);\n', '        balances[recieverAddr] = balances[recieverAddr].sub(_tokens);\n', '        balances[tokenTransferAddress] = balances[tokenTransferAddress].add(_tokens);\n', '        emit Transfer(tokenTransferAddress,recieverAddr,_tokens);\n', '        return true;\n', '    }\n', '\n', '   \n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Gig9 is Balances,\n', 'Pausable,\n', 'Destructible {\n', '    \n', '    function Gig9()public {\n', '        _name = "GIG9";\n', '        _symbol = "GIG";\n', '        _decimals = 8;\n', '        _totalSupply = 268000000 * (10 ** _decimals);\n', '        owner = msg.sender;\n', '        balances[0x0A35230Af852bc0C094978851640Baf796f1cC9D] = _totalSupply;\n', '        tokenTransferAddress = 0x0A35230Af852bc0C094978851640Baf796f1cC9D;\n', '    }\n', '\n', '    function ()public {\n', '        revert();\n', '\n', '    }\n', '\n', '   \n', '\n', '}']
