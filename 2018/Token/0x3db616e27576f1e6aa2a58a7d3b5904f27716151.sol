['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool); \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '    \n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner    = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '}\n', '\n', 'contract BlackList is Ownable {\n', '\n', '    event Lock(address indexed LockedAddress);\n', '    event Unlock(address indexed UnLockedAddress);\n', '\n', '    mapping( address => bool ) public blackList;\n', '\n', '    modifier CheckBlackList { require(blackList[msg.sender] != true); _; }\n', '\n', '    function SetLockAddress(address _lockAddress) external onlyOwner returns (bool) {\n', '        require(_lockAddress != address(0));\n', '        require(_lockAddress != owner);\n', '        require(blackList[_lockAddress] != true);\n', '        \n', '        blackList[_lockAddress] = true;\n', '        \n', '        emit Lock(_lockAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '    function UnLockAddress(address _unlockAddress) external onlyOwner returns (bool) {\n', '        require(blackList[_unlockAddress] != false);\n', '        \n', '        blackList[_unlockAddress] = false;\n', '        \n', '        emit Unlock(_unlockAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '        emit Transfer(_from, _to, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    \n', '        emit Approval(msg.sender, _spender, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '    \n', '        if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MultiTransferToken is StandardToken, Ownable {\n', '\n', '    function MultiTransfer(address[] _to, uint256[] _amount) onlyOwner public returns (bool) {\n', '        require(_to.length == _amount.length);\n', '\n', '        uint256 ui;\n', '        uint256 amountSum = 0;\n', '    \n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            require(_to[ui] != address(0));\n', '\n', '            amountSum = amountSum.add(_amount[ui]);\n', '        }\n', '\n', '        require(amountSum <= balances[msg.sender]);\n', '\n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount[ui]);\n', '            balances[_to[ui]] = balances[_to[ui]].add(_amount[ui]);\n', '        \n', '            emit Transfer(msg.sender, _to[ui], _amount[ui]);\n', '        }\n', '    \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event BurnAdminAmount(address indexed burner, uint256 value);\n', '\n', '    function burnAdminAmount(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit BurnAdminAmount(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '    modifier cannotMint() { require(mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '    \n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable, BlackList {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Project Community 활성화를 위한상평통보\n', '// @Creator Ryan_KIM\n', '// @Source \n', '// ----------------------------------------------------------------------------\n', 'contract Sangpyeongtongbo is PausableToken, MintableToken, BurnableToken, MultiTransferToken {\n', '    string public name = "Sangpyeongtongbo";\n', '    string public symbol = "SPTB";\n', '    uint256 public decimals = 18;\n', '}']