['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        require(a == b * c + a % b); // There is no case in which this doesnâ€™t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a-b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BIToken {\n', '\n', '    ///Public variables of the token\n', '    string public constant name = "Basic Integration Token";\n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol="BINTO";\n', '    string public constant version = "1.0";\n', '    using SafeMath for uint256;\n', '    address public ownerAccount;\n', '    uint256 public totalSupply;\n', '    \n', '    //initialSupply of token without decimals\n', '    uint256 public constant initialSupply = 1000 * (10**6); //total tokens without decimals\n', '    \n', '    //initial rate\n', '    uint256 public purchaseRate = 10000;\n', '    \n', '    //to finish the sale\n', '    bool public isSaleEnded = false;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    constructor () public {\n', '        ownerAccount = msg.sender;\n', '        totalSupply = initialSupply*(10**uint256(decimals));\n', '        balances[msg.sender] = totalSupply; \n', '    }\n', '    \n', '    //setting Modifier\n', '    modifier onlyOwner() {\n', '        require (msg.sender == ownerAccount);\n', '        _;\n', '    }\n', '    \n', '    //purchase rate is changed by  owner in ico and post ico phases\n', '    function setPurchaseRate(uint newRate) public onlyOwner {\n', '        require(purchaseRate != newRate);\n', '        purchaseRate = newRate;\n', '    }\n', '    \n', '    //burn token held by  owner only in case he decides so to destroy\n', '    //any extra tokens in far future.\n', '    function burnToken(uint numberOfTokens) public onlyOwner {\n', '        require(numberOfTokens > 0);\n', '        require(balances[msg.sender] >= numberOfTokens);\n', '        balances[msg.sender] = balances[msg.sender].sub(numberOfTokens);\n', '        totalSupply = totalSupply.sub(numberOfTokens);\n', '        emit Burn(msg.sender,numberOfTokens);\n', '        emit Transfer(msg.sender, address(0), numberOfTokens);\n', '    }\n', '\n', '    function endSale() public onlyOwner {\n', '        isSaleEnded = true;\n', '    }\n', '\n', '    //sending Eather to Owner\n', '    function sendEtherToOwner() payable public {\n', '        uint256 owneramount = msg.value;\n', '        require(isSaleEnded == false);\n', '        require(owneramount > 0);\n', '        uint256 tokens = purchaseRate.mul(owneramount);\n', '        require(tokens > 0);\n', '        //increse allowances , those will be reduced in transferFrom method again\n', '        allowed[ownerAccount][msg.sender] = allowed[ownerAccount][msg.sender].add(tokens);\n', '        transferFrom(ownerAccount,msg.sender, tokens);\n', '        ownerAccount.transfer(owneramount);\n', '    }\n', '        \n', '    \n', '    //Transfer Token directly to Owner \n', '    function () payable public {\n', '        sendEtherToOwner();\n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) public  returns (bool){\n', '        \n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        //check condition to avoid Overflows\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '     \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      \n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender,uint _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender,uint _subtractedValue) public returns (bool){\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }    \n', '    \n', '}']