['pragma solidity ^0.4.22;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address delegate;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    delegate = newOwner;\n', '  }\n', '\n', '  function confirmChangeOwnership() public {\n', '    require(msg.sender == delegate);\n', '    emit OwnershipTransferred(owner, delegate);\n', '    owner = delegate;\n', '    delegate = 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TransferFilter is Ownable {\n', '  bool public isTransferable;\n', '  mapping( address => bool ) public mapAddressPass;\n', '  mapping( address => bool ) public mapAddressBlock;\n', '\n', '  event LogFilterPass(address indexed target, bool status);\n', '  event LogFilterBlock(address indexed target, bool status);\n', '\n', '  // if Token transfer\n', '  modifier checkTokenTransfer(address source) {\n', '      if (isTransferable == true) {\n', '          require(mapAddressBlock[source] == false);\n', '      }\n', '      else {\n', '          require(mapAddressPass[source] == true);\n', '      }\n', '      _;\n', '  }\n', '\n', '  constructor() public {\n', '      isTransferable = true;\n', '  }\n', '\n', '  function setTransferable(bool status) public onlyOwner {\n', '      isTransferable = status;\n', '  }\n', '\n', '  function isInPassFilter(address user) public view returns (bool) {\n', '    return mapAddressPass[user];\n', '  }\n', '\n', '  function isInBlockFilter(address user) public view returns (bool) {\n', '    return mapAddressBlock[user];\n', '  }\n', '\n', '  function addressToPass(address[] target, bool status)\n', '  public\n', '  onlyOwner\n', '  {\n', '    for( uint i = 0 ; i < target.length ; i++ ) {\n', '        address targetAddress = target[i];\n', '        bool old = mapAddressPass[targetAddress];\n', '        if (old != status) {\n', '            if (status == true) {\n', '                mapAddressPass[targetAddress] = true;\n', '                emit LogFilterPass(targetAddress, true);\n', '            }\n', '            else {\n', '                delete mapAddressPass[targetAddress];\n', '                emit LogFilterPass(targetAddress, false);\n', '            }\n', '        }\n', '    }\n', '  }\n', '\n', '  function addressToBlock(address[] target, bool status)\n', '  public\n', '  onlyOwner\n', '  {\n', '      for( uint i = 0 ; i < target.length ; i++ ) {\n', '          address targetAddress = target[i];\n', '          bool old = mapAddressBlock[targetAddress];\n', '          if (old != status) {\n', '              if (status == true) {\n', '                  mapAddressBlock[targetAddress] = true;\n', '                  emit LogFilterBlock(targetAddress, true);\n', '              }\n', '              else {\n', '                  delete mapAddressBlock[targetAddress];\n', '                  emit LogFilterBlock(targetAddress, false);\n', '              }\n', '          }\n', '      }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, TransferFilter {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)\n', '  onlyPayloadSize(2 * 32)\n', '  checkTokenTransfer(msg.sender)\n', '  public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '  onlyPayloadSize(3 * 32)\n', '  checkTokenTransfer(_from)\n', '  public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value)\n', '  onlyPayloadSize(2 * 32)\n', '  checkTokenTransfer(msg.sender)\n', '  public returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  function burn(address _from, uint256 _amount) public onlyOwner {\n', '    require(_amount <= balances[_from]);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    emit Transfer(_from, address(0), _amount);\n', '    emit Burn(_from, _amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is BurnableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '  address public minter;\n', '\n', '  constructor() public {\n', '    minter = msg.sender;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasPermission() {\n', '    require(msg.sender == owner || msg.sender == minter);\n', '    _;\n', '  }\n', '\n', '  function () public payable {\n', '    require(false);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) canMint hasPermission public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() canMint onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract VoltraCoin is MintableToken {\n', '\n', '  string public constant name = "VoltraCoin"; // solium-disable-line uppercase\n', '  string public constant symbol = "VLT"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  constructor() public {\n', '    totalSupply = 0;\n', '  }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address delegate;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    delegate = newOwner;\n', '  }\n', '\n', '  function confirmChangeOwnership() public {\n', '    require(msg.sender == delegate);\n', '    emit OwnershipTransferred(owner, delegate);\n', '    owner = delegate;\n', '    delegate = 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TransferFilter is Ownable {\n', '  bool public isTransferable;\n', '  mapping( address => bool ) public mapAddressPass;\n', '  mapping( address => bool ) public mapAddressBlock;\n', '\n', '  event LogFilterPass(address indexed target, bool status);\n', '  event LogFilterBlock(address indexed target, bool status);\n', '\n', '  // if Token transfer\n', '  modifier checkTokenTransfer(address source) {\n', '      if (isTransferable == true) {\n', '          require(mapAddressBlock[source] == false);\n', '      }\n', '      else {\n', '          require(mapAddressPass[source] == true);\n', '      }\n', '      _;\n', '  }\n', '\n', '  constructor() public {\n', '      isTransferable = true;\n', '  }\n', '\n', '  function setTransferable(bool status) public onlyOwner {\n', '      isTransferable = status;\n', '  }\n', '\n', '  function isInPassFilter(address user) public view returns (bool) {\n', '    return mapAddressPass[user];\n', '  }\n', '\n', '  function isInBlockFilter(address user) public view returns (bool) {\n', '    return mapAddressBlock[user];\n', '  }\n', '\n', '  function addressToPass(address[] target, bool status)\n', '  public\n', '  onlyOwner\n', '  {\n', '    for( uint i = 0 ; i < target.length ; i++ ) {\n', '        address targetAddress = target[i];\n', '        bool old = mapAddressPass[targetAddress];\n', '        if (old != status) {\n', '            if (status == true) {\n', '                mapAddressPass[targetAddress] = true;\n', '                emit LogFilterPass(targetAddress, true);\n', '            }\n', '            else {\n', '                delete mapAddressPass[targetAddress];\n', '                emit LogFilterPass(targetAddress, false);\n', '            }\n', '        }\n', '    }\n', '  }\n', '\n', '  function addressToBlock(address[] target, bool status)\n', '  public\n', '  onlyOwner\n', '  {\n', '      for( uint i = 0 ; i < target.length ; i++ ) {\n', '          address targetAddress = target[i];\n', '          bool old = mapAddressBlock[targetAddress];\n', '          if (old != status) {\n', '              if (status == true) {\n', '                  mapAddressBlock[targetAddress] = true;\n', '                  emit LogFilterBlock(targetAddress, true);\n', '              }\n', '              else {\n', '                  delete mapAddressBlock[targetAddress];\n', '                  emit LogFilterBlock(targetAddress, false);\n', '              }\n', '          }\n', '      }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, TransferFilter {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)\n', '  onlyPayloadSize(2 * 32)\n', '  checkTokenTransfer(msg.sender)\n', '  public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '  onlyPayloadSize(3 * 32)\n', '  checkTokenTransfer(_from)\n', '  public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value)\n', '  onlyPayloadSize(2 * 32)\n', '  checkTokenTransfer(msg.sender)\n', '  public returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  function burn(address _from, uint256 _amount) public onlyOwner {\n', '    require(_amount <= balances[_from]);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    emit Transfer(_from, address(0), _amount);\n', '    emit Burn(_from, _amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is BurnableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '  address public minter;\n', '\n', '  constructor() public {\n', '    minter = msg.sender;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasPermission() {\n', '    require(msg.sender == owner || msg.sender == minter);\n', '    _;\n', '  }\n', '\n', '  function () public payable {\n', '    require(false);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) canMint hasPermission public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() canMint onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract VoltraCoin is MintableToken {\n', '\n', '  string public constant name = "VoltraCoin"; // solium-disable-line uppercase\n', '  string public constant symbol = "VLT"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  constructor() public {\n', '    totalSupply = 0;\n', '  }\n', '}']
