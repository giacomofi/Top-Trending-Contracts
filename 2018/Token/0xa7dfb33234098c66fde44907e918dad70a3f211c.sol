['pragma solidity ^0.4.21;\n', '\n', 'contract ReceivingContract {\n', '    function onTokenReceived(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Gate {\n', '    ERC20Basic private TOKEN;\n', '    address private PROXY;\n', '\n', '    /// Gates are to be created by the TokenProxy.\n', '    function Gate(ERC20Basic _token, address _proxy) public {\n', '        TOKEN = _token;\n', '        PROXY = _proxy;\n', '    }\n', '\n', '    /// Transfer requested amount of tokens from Gate to Proxy address.\n', '    /// Only the Proxy can request this and should request transfer of all\n', '    /// tokens.\n', '    function transferToProxy(uint256 _value) public {\n', '        require(msg.sender == PROXY);\n', '\n', '        require(TOKEN.transfer(PROXY, _value));\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenProxy is StandardToken, BurnableToken {\n', '\n', '    ERC20Basic public TOKEN;\n', '\n', '    mapping(address => address) private gates;\n', '\n', '\n', '    event GateOpened(address indexed gate, address indexed user);\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function TokenProxy(ERC20Basic _token) public {\n', '        TOKEN = _token;\n', '    }\n', '\n', '    function getGateAddress(address _user) external view returns (address) {\n', '        return gates[_user];\n', '    }\n', '\n', '    /// Create a new migration Gate for the User.\n', '    function openGate() external {\n', '        address user = msg.sender;\n', '\n', '        // Do not allow creating more than one Gate per User.\n', '        require(gates[user] == 0);\n', '\n', '        // Create new Gate.\n', '        address gate = new Gate(TOKEN, this);\n', '\n', '        // Remember User - Gate relationship.\n', '        gates[user] = gate;\n', '\n', '        emit GateOpened(gate, user);\n', '    }\n', '\n', '    function transferFromGate() external {\n', '        address user = msg.sender;\n', '\n', '        address gate = gates[user];\n', '\n', '        // Make sure the User&#39;s Gate exists.\n', '        require(gate != 0);\n', '\n', '        uint256 value = TOKEN.balanceOf(gate);\n', '\n', '        Gate(gate).transferToProxy(value);\n', '\n', '        // Handle the information about the amount of migrated tokens.\n', '        // This is a trusted information becase it comes from the Gate.\n', '        totalSupply_ += value;\n', '        balances[user] += value;\n', '\n', '        emit Mint(user, value);\n', '    }\n', '\n', '    function withdraw(uint256 _value) external {\n', '        withdrawTo(_value, msg.sender);\n', '    }\n', '\n', '    function withdrawTo(uint256 _value, address _destination) public {\n', '        require(_value > 0 && _destination != address(0));\n', '        burn(_value);\n', '        TOKEN.transfer(_destination, _value);\n', '    }\n', '}\n', '\n', 'contract GolemNetworkTokenBatching is TokenProxy {\n', '\n', '    string public constant name = "Golem Network Token Batching";\n', '    string public constant symbol = "GNTB";\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    event BatchTransfer(address indexed from, address indexed to, uint256 value,\n', '        uint64 closureTime);\n', '\n', '    function GolemNetworkTokenBatching(ERC20Basic _gntToken) TokenProxy(_gntToken) public {\n', '    }\n', '\n', '    function batchTransfer(bytes32[] payments, uint64 closureTime) external {\n', '        require(block.timestamp >= closureTime);\n', '\n', '        uint balance = balances[msg.sender];\n', '\n', '        for (uint i = 0; i < payments.length; ++i) {\n', '            // A payment contains compressed data:\n', '            // first 96 bits (12 bytes) is a value,\n', '            // following 160 bits (20 bytes) is an address.\n', '            bytes32 payment = payments[i];\n', '            address addr = address(payment);\n', '            require(addr != address(0) && addr != msg.sender);\n', '            uint v = uint(payment) / 2**160;\n', '            require(v <= balance);\n', '            balances[addr] += v;\n', '            balance -= v;\n', '            emit BatchTransfer(msg.sender, addr, v, closureTime);\n', '        }\n', '\n', '        balances[msg.sender] = balance;\n', '    }\n', '\n', '    function transferAndCall(address to, uint256 value, bytes data) external {\n', '      // Transfer always returns true so no need to check return value\n', '      transfer(to, value);\n', '\n', '      // No need to check whether recipient is a contract, this method is\n', '      // supposed to used only with contract recipients\n', '      ReceivingContract(to).onTokenReceived(msg.sender, value, data);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ReceivingContract {\n', '    function onTokenReceived(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Gate {\n', '    ERC20Basic private TOKEN;\n', '    address private PROXY;\n', '\n', '    /// Gates are to be created by the TokenProxy.\n', '    function Gate(ERC20Basic _token, address _proxy) public {\n', '        TOKEN = _token;\n', '        PROXY = _proxy;\n', '    }\n', '\n', '    /// Transfer requested amount of tokens from Gate to Proxy address.\n', '    /// Only the Proxy can request this and should request transfer of all\n', '    /// tokens.\n', '    function transferToProxy(uint256 _value) public {\n', '        require(msg.sender == PROXY);\n', '\n', '        require(TOKEN.transfer(PROXY, _value));\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenProxy is StandardToken, BurnableToken {\n', '\n', '    ERC20Basic public TOKEN;\n', '\n', '    mapping(address => address) private gates;\n', '\n', '\n', '    event GateOpened(address indexed gate, address indexed user);\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function TokenProxy(ERC20Basic _token) public {\n', '        TOKEN = _token;\n', '    }\n', '\n', '    function getGateAddress(address _user) external view returns (address) {\n', '        return gates[_user];\n', '    }\n', '\n', '    /// Create a new migration Gate for the User.\n', '    function openGate() external {\n', '        address user = msg.sender;\n', '\n', '        // Do not allow creating more than one Gate per User.\n', '        require(gates[user] == 0);\n', '\n', '        // Create new Gate.\n', '        address gate = new Gate(TOKEN, this);\n', '\n', '        // Remember User - Gate relationship.\n', '        gates[user] = gate;\n', '\n', '        emit GateOpened(gate, user);\n', '    }\n', '\n', '    function transferFromGate() external {\n', '        address user = msg.sender;\n', '\n', '        address gate = gates[user];\n', '\n', "        // Make sure the User's Gate exists.\n", '        require(gate != 0);\n', '\n', '        uint256 value = TOKEN.balanceOf(gate);\n', '\n', '        Gate(gate).transferToProxy(value);\n', '\n', '        // Handle the information about the amount of migrated tokens.\n', '        // This is a trusted information becase it comes from the Gate.\n', '        totalSupply_ += value;\n', '        balances[user] += value;\n', '\n', '        emit Mint(user, value);\n', '    }\n', '\n', '    function withdraw(uint256 _value) external {\n', '        withdrawTo(_value, msg.sender);\n', '    }\n', '\n', '    function withdrawTo(uint256 _value, address _destination) public {\n', '        require(_value > 0 && _destination != address(0));\n', '        burn(_value);\n', '        TOKEN.transfer(_destination, _value);\n', '    }\n', '}\n', '\n', 'contract GolemNetworkTokenBatching is TokenProxy {\n', '\n', '    string public constant name = "Golem Network Token Batching";\n', '    string public constant symbol = "GNTB";\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    event BatchTransfer(address indexed from, address indexed to, uint256 value,\n', '        uint64 closureTime);\n', '\n', '    function GolemNetworkTokenBatching(ERC20Basic _gntToken) TokenProxy(_gntToken) public {\n', '    }\n', '\n', '    function batchTransfer(bytes32[] payments, uint64 closureTime) external {\n', '        require(block.timestamp >= closureTime);\n', '\n', '        uint balance = balances[msg.sender];\n', '\n', '        for (uint i = 0; i < payments.length; ++i) {\n', '            // A payment contains compressed data:\n', '            // first 96 bits (12 bytes) is a value,\n', '            // following 160 bits (20 bytes) is an address.\n', '            bytes32 payment = payments[i];\n', '            address addr = address(payment);\n', '            require(addr != address(0) && addr != msg.sender);\n', '            uint v = uint(payment) / 2**160;\n', '            require(v <= balance);\n', '            balances[addr] += v;\n', '            balance -= v;\n', '            emit BatchTransfer(msg.sender, addr, v, closureTime);\n', '        }\n', '\n', '        balances[msg.sender] = balance;\n', '    }\n', '\n', '    function transferAndCall(address to, uint256 value, bytes data) external {\n', '      // Transfer always returns true so no need to check return value\n', '      transfer(to, value);\n', '\n', '      // No need to check whether recipient is a contract, this method is\n', '      // supposed to used only with contract recipients\n', '      ReceivingContract(to).onTokenReceived(msg.sender, value, data);\n', '    }\n', '}']
