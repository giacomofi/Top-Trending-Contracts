['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    function allowance(address owner, address spender)public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value)public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value)public returns (bool) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    function Ownable()public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(address _to, uint256 _amount)public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(0, _to, _amount);\n', '        return true;\n', '    }\n', '    /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '    function finishMinting()public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MultiLevelToken is MintableToken {\n', '\n', '    string public constant name = "Multi-Marketing token";\n', '    string public constant symbol = "MMT";\n', '    uint32 public constant decimals = 18;\n', '}\n', '\n', 'contract Crowdsale is MultiLevelToken{\n', '\n', '    using SafeMath for uint;\n', '\n', '    address multisig;\n', '    uint multisigPercent;\n', '\n', '    MultiLevelToken public token = new MultiLevelToken();\n', '    uint rate;\n', '    uint tokens;\n', '    uint value;\n', '\n', '    uint256 DEC = 10 ** uint256(decimals);\n', '\n', '    uint public tier;\n', '    uint i;\n', '    uint public a=1;\n', '    uint public b=1;\n', '    uint public c=1;\n', '    uint parent;\n', '    uint256 parentMoney;\n', '    address public whom;\n', '    mapping (uint => mapping(address => uint)) tree;\n', '    mapping (uint => mapping(uint => address)) order;\n', '\n', '    function Crowdsale()public {\n', '\n', '        multisig = 0x5b6029d086D98669e30c8B9c289e78370ae2Db3C;\n', '        multisigPercent = 10;\n', '        rate = 100000000000000000000;\n', '    }\n', '\n', '    function finishMinting() public onlyOwner returns(bool)  {\n', '        token.finishMinting();\n', '        return true;\n', '    }\n', '\n', '    function distribute() public{\n', '\n', '        for (i=1;i<=10;i++){\n', '            while (parent >1){\n', '                if (parent%3==0){\n', '                    parent=parent.div(3);\n', '                    whom = order[tier][parent];\n', '                    token.mint(whom,parentMoney);\n', '                }\n', '                else if ((parent-1)%3==0){\n', '                    parent=(parent-1)/3;\n', '                    whom = order[tier][parent];\n', '                    token.mint(whom,parentMoney);\n', '                }\n', '                else{\n', '                    parent=(parent+1)/3;\n', '                    whom = order[tier][parent];\n', '                    token.mint(whom,parentMoney);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function createTokens()public  payable {\n', '        assert(msg.value >= 50000000000000000);\n', '        uint _multisig = msg.value.mul(multisigPercent).div(100);\n', '        tokens = rate.mul(msg.value).div(1 ether);\n', '        tokens = tokens.mul(55).div(100);\n', '        parentMoney = msg.value.mul(35).div(10);\n', '\n', '        if (msg.value >= 50000000000000000 && msg.value < 100000000000000000) { // 0.05 - 0.1 Ether\n', '            tier=1;\n', '            tree[tier][msg.sender]=a;\n', '            order[tier][a]=msg.sender;\n', '            parent = a;\n', '            a+=1;\n', '            distribute();\n', '        }\n', '        else if (msg.value >= 100000000000000000 && msg.value < 500000000000000000) { // 0.1 - 0.5 ether\n', '            tier=2;\n', '            tree[tier][msg.sender]=b;\n', '            order[tier][b]=msg.sender;\n', '            parent = b;\n', '            b+=1;\n', '            distribute();\n', '        }\n', '        else if(msg.value >= 500000000000000000) { // more than  0,5 ether\n', '            tier=3;\n', '            tree[tier][msg.sender]=c;\n', '            order[tier][c]=msg.sender;\n', '            parent = c;\n', '            c+=1;\n', '            distribute();\n', '        }\n', '        token.mint(msg.sender, tokens);\n', '        totalSupply = totalSupply.add(tokens);\n', '        multisig.transfer(_multisig);\n', '    }\n', '\n', '    function receiveApproval(address from, uint skolko) public payable onlyOwner{\n', '        from.transfer(skolko.mul(1000000000000));\n', '    }\n', '\n', '    function() public payable {\n', '        createTokens();\n', '    }\n', '    /* transfer Ether from contract\n', '    amount = 1 ==  1 ETHER */\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\n', '    {\n', '        amount = amount;\n', '        _to.transfer(amount);\n', '    }\n', '    \n', '    function setmsg(address newmultisig) public onlyOwner {\n', '        multisig = newmultisig;\n', '    }\n', '    \n', '    function setmsgprcnt(uint newpersent) public onlyOwner {\n', '        multisigPercent = newpersent;\n', '    }\n', '}']