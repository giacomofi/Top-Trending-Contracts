['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SafePercent {\n', '  using SafeMath for uint256;\n', '\n', '  function percent(uint256 numerator, uint256 denominator, uint256 precision)\n', '    pure\n', '    public\n', '    returns(uint256)\n', '  {\n', '    uint256 _numerator = numerator.mul(10 ** (precision + 1));\n', '    // we get rid of that precision + 1 by dividing by 10 here\n', '    //  (adding 5 first to correctly floor() the result)\n', '    uint256 quotient = ((_numerator.div(denominator)).add(5)).div(10);\n', '\n', '    return (quotient);\n', '  }\n', '}\n', '\n', 'contract SafePayloadChecker {\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract PATH is MintableToken, BurnableToken, SafePayloadChecker {\n', '  /**\n', '   * @dev the original supply, for posterity, since totalSupply will decrement on burn\n', '   */\n', '  uint256 public initialSupply = 400000000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * ERC20 Identification Functions\n', '   */\n', '  string public constant name    = "PATH Token"; // solium-disable-line uppercase\n', '  string public constant symbol  = "PATH"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  /**\n', '   * @dev the time at which token holders can begin transferring tokens\n', '   */\n', '  uint256 public transferableStartTime;\n', '\n', '  address privatePresaleWallet;\n', '  address publicPresaleContract;\n', '  address publicCrowdsaleContract;\n', '  address pathTeamMultisig;\n', '  TokenVesting public founderTokenVesting;\n', '\n', '  /**\n', '   * @dev the token sale contract(s) and team can move tokens\n', '   * @dev   before the lockup expires\n', '   */\n', '  modifier onlyWhenTransferEnabled()\n', '  {\n', '    if (now <= transferableStartTime) {\n', '      require(\n', '        msg.sender == privatePresaleWallet || // solium-disable-line operator-whitespace\n', '        msg.sender == publicPresaleContract || // solium-disable-line operator-whitespace\n', '        msg.sender == publicCrowdsaleContract || // solium-disable-line operator-whitespace\n', '        msg.sender == pathTeamMultisig\n', '      );\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev require that this contract cannot affect itself\n', '   */\n', '  modifier validDestination(address _addr)\n', '  {\n', '    require(_addr != address(this));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  function PATH(uint256 _transferableStartTime)\n', '    public\n', '  {\n', '    transferableStartTime = _transferableStartTime;\n', '  }\n', '\n', '  /**\n', '   * @dev override transfer token for a specified address to add validDestination\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    validDestination(_to)\n', '    onlyWhenTransferEnabled\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev override transferFrom token for a specified address to add validDestination\n', '   * @param _from The address to transfer from.\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    onlyPayloadSize(32 + 32 + 32) // address (32) + address (32) + uint256 (32)\n', '    validDestination(_to)\n', '    onlyWhenTransferEnabled\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev burn tokens, but also include a Transfer(sender, 0x0, value) event\n', '   * @param _value The amount to be burned.\n', '   */\n', '  function burn(uint256 _value)\n', '    onlyWhenTransferEnabled\n', '    public\n', '  {\n', '    super.burn(_value);\n', '  }\n', '\n', '  /**\n', '   * @dev burn tokens on behalf of someone\n', '   * @param _from The address of the owner of the token.\n', '   * @param _value The amount to be burned.\n', '   */\n', '  function burnFrom(address _from, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    onlyWhenTransferEnabled\n', '    public\n', '  {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(_from, _value);\n', '    Transfer(_from, address(0), _value);\n', '  }\n', '\n', '  /**\n', '   * @dev override approval functions to include safe payload checking\n', '   */\n', '  function approve(address _spender, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev distribute the tokens once the crowdsale addresses are known\n', '   * @dev only callable once and disables minting at the end\n', '   */\n', '  function distributeTokens(\n', '    address _privatePresaleWallet,\n', '    address _publicPresaleContract,\n', '    address _publicCrowdsaleContract,\n', '    address _pathCompanyMultisig,\n', '    address _pathAdvisorVault,\n', '    address _pathFounderAddress\n', '  )\n', '    onlyOwner\n', '    canMint\n', '    external\n', '  {\n', '    // Set addresses\n', '    privatePresaleWallet = _privatePresaleWallet;\n', '    publicPresaleContract = _publicPresaleContract;\n', '    publicCrowdsaleContract = _publicCrowdsaleContract;\n', '    pathTeamMultisig = _pathCompanyMultisig;\n', '\n', '    // Mint all tokens according to the established allocations\n', '    mint(_privatePresaleWallet, 200000000 * (10 ** uint256(decimals)));\n', '    // ^ 50%\n', '    mint(_publicPresaleContract, 32000000 * (10 ** uint256(decimals)));\n', '    // ^ 8%\n', '    mint(_publicCrowdsaleContract, 8000000 * (10 ** uint256(decimals)));\n', '    // ^ 2%\n', '    mint(_pathCompanyMultisig, 80000000 * (10 ** uint256(decimals)));\n', '    // ^ 20%\n', '    mint(_pathAdvisorVault, 40000000 * (10 ** uint256(decimals)));\n', '    // ^ 10%\n', '\n', '    // deploy a token vesting contract for the founder tokens\n', '    uint256 cliff = 6 * 4 weeks; // 4 months\n', '    founderTokenVesting = new TokenVesting(\n', '      _pathFounderAddress,\n', '      now,   // start vesting now\n', '      cliff, // cliff time\n', '      cliff, // 100% unlocked at cliff\n', '      false  // irrevocable\n', '    );\n', '    // and then mint tokens to the vesting contract\n', '    mint(address(founderTokenVesting), 40000000 * (10 ** uint256(decimals)));\n', '    // ^ 10%\n', '\n', '    // immediately finish minting\n', '    finishMinting();\n', '\n', '    assert(totalSupply_ == initialSupply);\n', '  }\n', '}\n', '\n', 'contract StandardCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  PATH public token;  // Path Modification\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  function StandardCrowdsale(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    PATH _token\n', '  )\n', '    public\n', '  {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    require(token.transfer(beneficiary, tokens)); // PATH Modification\n', '\n', '    TokenPurchase(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '}\n', '\n', 'contract FinalizableCrowdsale is StandardCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableCrowdsale is FinalizableCrowdsale {\n', '  /**\n', '   * @dev Burns any tokens held by this address.\n', '   */\n', '  function finalization() internal {\n', '    token.burn(token.balanceOf(address(this)));\n', '    super.finalization();\n', '  }\n', '}\n', '\n', 'contract RateConfigurable is StandardCrowdsale, Ownable {\n', '\n', '  modifier onlyBeforeStart() {\n', '    require(now < startTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev allow the owner to update the rate before the crowdsale starts\n', '   * @dev in order to account for ether valuation fluctuation\n', '   */\n', '  function updateRate(uint256 _rate)\n', '    onlyOwner\n', '    onlyBeforeStart\n', '    external\n', '  {\n', '    rate = _rate;\n', '  }\n', '}\n', '\n', 'contract ReallocatableCrowdsale is StandardCrowdsale, Ownable {\n', '\n', '  /**\n', '   * @dev reallocate funds from this crowdsale to another\n', '   */\n', '  function reallocate(uint256 _value)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(!hasEnded());\n', '    reallocation(_value);\n', '  }\n', '\n', '  /**\n', '   * @dev perform the actual reallocation\n', '   * @dev must be overridden to do anything\n', '   */\n', '  function reallocation(uint256 _value)\n', '    internal\n', '  {\n', '  }\n', '}\n', '\n', 'contract PathPublicCrowdsale is RateConfigurable, BurnableCrowdsale, ReallocatableCrowdsale, SafePercent {\n', '  using SafeMath for uint256;\n', '\n', '  address public pathAdvisorVault;\n', '  address public privatePresaleWallet;\n', '\n', '  function PathPublicCrowdsale (\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    address _pathAdvisorVault,\n', '    PATH _token,\n', '    address _privatePresaleWallet\n', '  )\n', '    BurnableCrowdsale()\n', '    StandardCrowdsale(_startTime, _endTime, _rate, _wallet, _token)\n', '    public\n', '  {\n', '    pathAdvisorVault = _pathAdvisorVault;\n', '    privatePresaleWallet = _privatePresaleWallet;\n', '  }\n', '\n', '  function finalization() internal {\n', '    // First Burn the Crowdsale and then the advisors\n', '    super.finalization();\n', '    uint256 amountToBurn = calculateBurnAmount();\n', '    TokenVault(pathAdvisorVault).approve(\n', '      address(this),\n', '      token,\n', '      amountToBurn\n', '    );\n', '    token.burnFrom(pathAdvisorVault, amountToBurn);\n', '    TokenVault(pathAdvisorVault).open();\n', '  }\n', '\n', '  function calculateBurnAmount()\n', '    internal\n', '    view\n', '    returns (uint256)\n', '  {\n', '    // @TODO(shrugs) - remove 0.6 constant (ideally)\n', '    // 0.6 is the percent of the tokens that are handled by the sale\n', '    // and therefore the only tokens that affect advisor burning\n', '    uint256 maxPossibleRaised = token.initialSupply().mul(3).div(5); // 60%\n', '    uint256 actuallyRaised = token.totalSupply().sub(\n', '      token.initialSupply().mul(2).div(5) // 40%\n', '    );\n', '\n', '    uint256 precision = 4; // decimal places of precision\n', '    uint256 raisedRatio = percent(actuallyRaised, maxPossibleRaised, precision);\n', '    // ^ [00000, 10000]\n', '    uint256 burnRatio = (10 ** precision).sub(raisedRatio);\n', '    // 10000 is for the 4 decimals of precision\n', '    uint256 amountToBurnWithPrecision = token.balanceOf(pathAdvisorVault).mul(burnRatio);\n', '    // balance * burnRatio = amountToBurn, but *10^4\n', '\n', '    return amountToBurnWithPrecision.div(10 ** precision);\n', '  }\n', '\n', '  /**\n', '   * @dev Implements tiered token amount based on number of weeks since startTime\n', '   * @dev Overrides getTokenAmount method from StandardCrowdsale.sol\n', '   */\n', '  function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    var timeSinceStart = now - startTime;\n', '\n', '    uint256 discountMultiplier;\n', '    if (timeSinceStart <= 1 weeks) {\n', '      discountMultiplier = 70;\n', '    } else if (timeSinceStart <= 2 weeks) {\n', '      discountMultiplier = 80;\n', '    } else if (timeSinceStart <= 3 weeks) {\n', '      discountMultiplier = 90;\n', '    } else {\n', '      discountMultiplier = 100;\n', '    }\n', '\n', '    return weiAmount.mul(rate).mul(100).div(discountMultiplier);\n', '  }\n', '\n', '  function reallocation(uint256 _value)\n', '    internal\n', '  {\n', '    require(token.transfer(privatePresaleWallet, _value));\n', '  }\n', '}\n', '\n', 'contract TokenVault is Ownable {\n', '\n', '  /**\n', '   * @dev whether or not this vault is open and the tokens are available for withdrawal\n', '   */\n', '  bool public open = false;\n', '\n', '  address public beneficiary;\n', '\n', '  modifier isOpen() {\n', '    require(open);\n', '    _;\n', '  }\n', '\n', '  modifier onlyBeneficiary() {\n', '    require(msg.sender == beneficiary);\n', '    _;\n', '  }\n', '\n', '  function TokenVault(address _beneficiary)\n', '    public\n', '  {\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * @dev opens the vault, allowing the Tokens to be withdrawn,\n', '   * @dev   only callable by the owner (crowdsale)\n', '   */\n', '  function open()\n', '    onlyOwner\n', '    external\n', '  {\n', '    open = true;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw all tokens to the caller\n', '   */\n', '  function withdraw(StandardToken _token)\n', '    isOpen\n', '    onlyBeneficiary\n', '    external\n', '  {\n', '    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\n', '  }\n', '\n', '  function approve(\n', '    address _beneficiary,\n', '    StandardToken _token,\n', '    uint256 _value\n', '  )\n', '    onlyOwner\n', '    public\n', '  {\n', '    require(_token.approve(_beneficiary, _value));\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SafePercent {\n', '  using SafeMath for uint256;\n', '\n', '  function percent(uint256 numerator, uint256 denominator, uint256 precision)\n', '    pure\n', '    public\n', '    returns(uint256)\n', '  {\n', '    uint256 _numerator = numerator.mul(10 ** (precision + 1));\n', '    // we get rid of that precision + 1 by dividing by 10 here\n', '    //  (adding 5 first to correctly floor() the result)\n', '    uint256 quotient = ((_numerator.div(denominator)).add(5)).div(10);\n', '\n', '    return (quotient);\n', '  }\n', '}\n', '\n', 'contract SafePayloadChecker {\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract PATH is MintableToken, BurnableToken, SafePayloadChecker {\n', '  /**\n', '   * @dev the original supply, for posterity, since totalSupply will decrement on burn\n', '   */\n', '  uint256 public initialSupply = 400000000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * ERC20 Identification Functions\n', '   */\n', '  string public constant name    = "PATH Token"; // solium-disable-line uppercase\n', '  string public constant symbol  = "PATH"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  /**\n', '   * @dev the time at which token holders can begin transferring tokens\n', '   */\n', '  uint256 public transferableStartTime;\n', '\n', '  address privatePresaleWallet;\n', '  address publicPresaleContract;\n', '  address publicCrowdsaleContract;\n', '  address pathTeamMultisig;\n', '  TokenVesting public founderTokenVesting;\n', '\n', '  /**\n', '   * @dev the token sale contract(s) and team can move tokens\n', '   * @dev   before the lockup expires\n', '   */\n', '  modifier onlyWhenTransferEnabled()\n', '  {\n', '    if (now <= transferableStartTime) {\n', '      require(\n', '        msg.sender == privatePresaleWallet || // solium-disable-line operator-whitespace\n', '        msg.sender == publicPresaleContract || // solium-disable-line operator-whitespace\n', '        msg.sender == publicCrowdsaleContract || // solium-disable-line operator-whitespace\n', '        msg.sender == pathTeamMultisig\n', '      );\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev require that this contract cannot affect itself\n', '   */\n', '  modifier validDestination(address _addr)\n', '  {\n', '    require(_addr != address(this));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  function PATH(uint256 _transferableStartTime)\n', '    public\n', '  {\n', '    transferableStartTime = _transferableStartTime;\n', '  }\n', '\n', '  /**\n', '   * @dev override transfer token for a specified address to add validDestination\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    validDestination(_to)\n', '    onlyWhenTransferEnabled\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev override transferFrom token for a specified address to add validDestination\n', '   * @param _from The address to transfer from.\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    onlyPayloadSize(32 + 32 + 32) // address (32) + address (32) + uint256 (32)\n', '    validDestination(_to)\n', '    onlyWhenTransferEnabled\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev burn tokens, but also include a Transfer(sender, 0x0, value) event\n', '   * @param _value The amount to be burned.\n', '   */\n', '  function burn(uint256 _value)\n', '    onlyWhenTransferEnabled\n', '    public\n', '  {\n', '    super.burn(_value);\n', '  }\n', '\n', '  /**\n', '   * @dev burn tokens on behalf of someone\n', '   * @param _from The address of the owner of the token.\n', '   * @param _value The amount to be burned.\n', '   */\n', '  function burnFrom(address _from, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    onlyWhenTransferEnabled\n', '    public\n', '  {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(_from, _value);\n', '    Transfer(_from, address(0), _value);\n', '  }\n', '\n', '  /**\n', '   * @dev override approval functions to include safe payload checking\n', '   */\n', '  function approve(address _spender, uint256 _value)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    onlyPayloadSize(32 + 32) // address (32) + uint256 (32)\n', '    public\n', '    returns (bool)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev distribute the tokens once the crowdsale addresses are known\n', '   * @dev only callable once and disables minting at the end\n', '   */\n', '  function distributeTokens(\n', '    address _privatePresaleWallet,\n', '    address _publicPresaleContract,\n', '    address _publicCrowdsaleContract,\n', '    address _pathCompanyMultisig,\n', '    address _pathAdvisorVault,\n', '    address _pathFounderAddress\n', '  )\n', '    onlyOwner\n', '    canMint\n', '    external\n', '  {\n', '    // Set addresses\n', '    privatePresaleWallet = _privatePresaleWallet;\n', '    publicPresaleContract = _publicPresaleContract;\n', '    publicCrowdsaleContract = _publicCrowdsaleContract;\n', '    pathTeamMultisig = _pathCompanyMultisig;\n', '\n', '    // Mint all tokens according to the established allocations\n', '    mint(_privatePresaleWallet, 200000000 * (10 ** uint256(decimals)));\n', '    // ^ 50%\n', '    mint(_publicPresaleContract, 32000000 * (10 ** uint256(decimals)));\n', '    // ^ 8%\n', '    mint(_publicCrowdsaleContract, 8000000 * (10 ** uint256(decimals)));\n', '    // ^ 2%\n', '    mint(_pathCompanyMultisig, 80000000 * (10 ** uint256(decimals)));\n', '    // ^ 20%\n', '    mint(_pathAdvisorVault, 40000000 * (10 ** uint256(decimals)));\n', '    // ^ 10%\n', '\n', '    // deploy a token vesting contract for the founder tokens\n', '    uint256 cliff = 6 * 4 weeks; // 4 months\n', '    founderTokenVesting = new TokenVesting(\n', '      _pathFounderAddress,\n', '      now,   // start vesting now\n', '      cliff, // cliff time\n', '      cliff, // 100% unlocked at cliff\n', '      false  // irrevocable\n', '    );\n', '    // and then mint tokens to the vesting contract\n', '    mint(address(founderTokenVesting), 40000000 * (10 ** uint256(decimals)));\n', '    // ^ 10%\n', '\n', '    // immediately finish minting\n', '    finishMinting();\n', '\n', '    assert(totalSupply_ == initialSupply);\n', '  }\n', '}\n', '\n', 'contract StandardCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  PATH public token;  // Path Modification\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  function StandardCrowdsale(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    PATH _token\n', '  )\n', '    public\n', '  {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    require(token.transfer(beneficiary, tokens)); // PATH Modification\n', '\n', '    TokenPurchase(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '}\n', '\n', 'contract FinalizableCrowdsale is StandardCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableCrowdsale is FinalizableCrowdsale {\n', '  /**\n', '   * @dev Burns any tokens held by this address.\n', '   */\n', '  function finalization() internal {\n', '    token.burn(token.balanceOf(address(this)));\n', '    super.finalization();\n', '  }\n', '}\n', '\n', 'contract RateConfigurable is StandardCrowdsale, Ownable {\n', '\n', '  modifier onlyBeforeStart() {\n', '    require(now < startTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev allow the owner to update the rate before the crowdsale starts\n', '   * @dev in order to account for ether valuation fluctuation\n', '   */\n', '  function updateRate(uint256 _rate)\n', '    onlyOwner\n', '    onlyBeforeStart\n', '    external\n', '  {\n', '    rate = _rate;\n', '  }\n', '}\n', '\n', 'contract ReallocatableCrowdsale is StandardCrowdsale, Ownable {\n', '\n', '  /**\n', '   * @dev reallocate funds from this crowdsale to another\n', '   */\n', '  function reallocate(uint256 _value)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(!hasEnded());\n', '    reallocation(_value);\n', '  }\n', '\n', '  /**\n', '   * @dev perform the actual reallocation\n', '   * @dev must be overridden to do anything\n', '   */\n', '  function reallocation(uint256 _value)\n', '    internal\n', '  {\n', '  }\n', '}\n', '\n', 'contract PathPublicCrowdsale is RateConfigurable, BurnableCrowdsale, ReallocatableCrowdsale, SafePercent {\n', '  using SafeMath for uint256;\n', '\n', '  address public pathAdvisorVault;\n', '  address public privatePresaleWallet;\n', '\n', '  function PathPublicCrowdsale (\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    address _pathAdvisorVault,\n', '    PATH _token,\n', '    address _privatePresaleWallet\n', '  )\n', '    BurnableCrowdsale()\n', '    StandardCrowdsale(_startTime, _endTime, _rate, _wallet, _token)\n', '    public\n', '  {\n', '    pathAdvisorVault = _pathAdvisorVault;\n', '    privatePresaleWallet = _privatePresaleWallet;\n', '  }\n', '\n', '  function finalization() internal {\n', '    // First Burn the Crowdsale and then the advisors\n', '    super.finalization();\n', '    uint256 amountToBurn = calculateBurnAmount();\n', '    TokenVault(pathAdvisorVault).approve(\n', '      address(this),\n', '      token,\n', '      amountToBurn\n', '    );\n', '    token.burnFrom(pathAdvisorVault, amountToBurn);\n', '    TokenVault(pathAdvisorVault).open();\n', '  }\n', '\n', '  function calculateBurnAmount()\n', '    internal\n', '    view\n', '    returns (uint256)\n', '  {\n', '    // @TODO(shrugs) - remove 0.6 constant (ideally)\n', '    // 0.6 is the percent of the tokens that are handled by the sale\n', '    // and therefore the only tokens that affect advisor burning\n', '    uint256 maxPossibleRaised = token.initialSupply().mul(3).div(5); // 60%\n', '    uint256 actuallyRaised = token.totalSupply().sub(\n', '      token.initialSupply().mul(2).div(5) // 40%\n', '    );\n', '\n', '    uint256 precision = 4; // decimal places of precision\n', '    uint256 raisedRatio = percent(actuallyRaised, maxPossibleRaised, precision);\n', '    // ^ [00000, 10000]\n', '    uint256 burnRatio = (10 ** precision).sub(raisedRatio);\n', '    // 10000 is for the 4 decimals of precision\n', '    uint256 amountToBurnWithPrecision = token.balanceOf(pathAdvisorVault).mul(burnRatio);\n', '    // balance * burnRatio = amountToBurn, but *10^4\n', '\n', '    return amountToBurnWithPrecision.div(10 ** precision);\n', '  }\n', '\n', '  /**\n', '   * @dev Implements tiered token amount based on number of weeks since startTime\n', '   * @dev Overrides getTokenAmount method from StandardCrowdsale.sol\n', '   */\n', '  function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    var timeSinceStart = now - startTime;\n', '\n', '    uint256 discountMultiplier;\n', '    if (timeSinceStart <= 1 weeks) {\n', '      discountMultiplier = 70;\n', '    } else if (timeSinceStart <= 2 weeks) {\n', '      discountMultiplier = 80;\n', '    } else if (timeSinceStart <= 3 weeks) {\n', '      discountMultiplier = 90;\n', '    } else {\n', '      discountMultiplier = 100;\n', '    }\n', '\n', '    return weiAmount.mul(rate).mul(100).div(discountMultiplier);\n', '  }\n', '\n', '  function reallocation(uint256 _value)\n', '    internal\n', '  {\n', '    require(token.transfer(privatePresaleWallet, _value));\n', '  }\n', '}\n', '\n', 'contract TokenVault is Ownable {\n', '\n', '  /**\n', '   * @dev whether or not this vault is open and the tokens are available for withdrawal\n', '   */\n', '  bool public open = false;\n', '\n', '  address public beneficiary;\n', '\n', '  modifier isOpen() {\n', '    require(open);\n', '    _;\n', '  }\n', '\n', '  modifier onlyBeneficiary() {\n', '    require(msg.sender == beneficiary);\n', '    _;\n', '  }\n', '\n', '  function TokenVault(address _beneficiary)\n', '    public\n', '  {\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * @dev opens the vault, allowing the Tokens to be withdrawn,\n', '   * @dev   only callable by the owner (crowdsale)\n', '   */\n', '  function open()\n', '    onlyOwner\n', '    external\n', '  {\n', '    open = true;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw all tokens to the caller\n', '   */\n', '  function withdraw(StandardToken _token)\n', '    isOpen\n', '    onlyBeneficiary\n', '    external\n', '  {\n', '    require(_token.transfer(msg.sender, _token.balanceOf(address(this))));\n', '  }\n', '\n', '  function approve(\n', '    address _beneficiary,\n', '    StandardToken _token,\n', '    uint256 _value\n', '  )\n', '    onlyOwner\n', '    public\n', '  {\n', '    require(_token.approve(_beneficiary, _value));\n', '  }\n', '}']
