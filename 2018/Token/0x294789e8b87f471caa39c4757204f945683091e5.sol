['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  \n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', ' \n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', 'contract AMFC is StandardToken, BurnableToken, Ownable {\n', '    // Constants\n', '    string  public constant name = "Anything Macgic Fans";\n', '    string  public constant symbol = "AMFC";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY      = 500000000 * (10 ** uint256(decimals));\n', '\n', '    address constant LOCK_ADDR = 0xF63Fb7657B11B408eEdD263fE0753E1665E7400a;\n', '    uint256 constant LOCK_SUPPLY    = 300000000 * (10 ** uint256(decimals));  \n', '    uint256 constant UNLOCK_2Y    =   200000000 * (10 ** uint256(decimals)); \n', '    uint256 constant UNLOCK_1Y    =   100000000 * (10 ** uint256(decimals)); \n', '\n', '    uint256 constant OWNER_SUPPLY      = INITIAL_SUPPLY - LOCK_SUPPLY;\n', '\n', '    mapping(address => uint256)  balanceLocked;   //地址 - 锁定代币数量\n', '    mapping(address => uint256)  lockAtTime;      //地址 - 锁定起始时间点\n', '    \n', '  \n', '    uint256 public buyPrice = 585;\n', '    bool public crowdsaleClosed;\n', '    bool public transferEnabled = true;\n', '\n', '\n', '    constructor() public {\n', '      totalSupply_ = INITIAL_SUPPLY;\n', '\n', '      balances[msg.sender] = OWNER_SUPPLY;\n', '      emit Transfer(0x0, msg.sender, OWNER_SUPPLY);\n', '\n', '      balances[LOCK_ADDR] = LOCK_SUPPLY;\n', '      emit Transfer(0x0, LOCK_ADDR, LOCK_SUPPLY);\n', '\n', '      _lock(LOCK_ADDR);\n', '    }\n', '\n', '    function _lock(address _owner) internal {\n', '        balanceLocked[_owner] =  balances[_owner];  \n', '        lockAtTime[_owner] = now;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {     \n', '        require (balances[_from] >= _value);               // Check if the sender has enough\n', '        require (balances[_to] + _value > balances[_to]); // Check for overflows\n', '   \n', '        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);                            // Add the same to the recipient\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function setPrices(bool closebuy, uint256 newBuyPrice) onlyOwner public {\n', '        crowdsaleClosed = closebuy;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function () external payable {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value ;               // calculates the amount\n', ' \n', '        _transfer(owner, msg.sender, amount.mul(buyPrice)); \n', '        owner.transfer(amount);\n', '    }\n', '\n', '    //取回eth, 参数设为0 则全部取回, 否则取回指定数量的eth\n', '    function safeWithdrawal(uint _value ) onlyOwner public {\n', '       if (_value == 0) \n', '           owner.transfer(address(this).balance);\n', '       else\n', '           owner.transfer(_value);\n', '    }\n', '\n', ' \n', '    function enableTransfer(bool _enable) onlyOwner external {\n', '        transferEnabled = _enable;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transferEnabled);\n', '        require(checkLocked(_from, _value));\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transferEnabled);\n', '        require(checkLocked(msg.sender, _value));\n', '        \n', '        return super.transfer(_to, _value);\n', '    }    \n', '  \n', '    // 传入要锁定的地址, 锁定数量为地址当前拥有的数量\n', '    //流程:\n', '    //ICO 完成后,  调用此函数设置锁定地址, 然后调用 enableTransfer 函数允许转token\n', '    function lockAddress( address[] _addr ) onlyOwner external  {\n', '        for (uint i = 0; i < _addr.length; i++) {\n', '          _lock(_addr[i]);\n', '        }\n', '    }\n', '    \n', '    // 解锁地址\n', '    function unlockAddress( address[] _addr ) onlyOwner external  {\n', '        for (uint i = 0; i < _addr.length; i++) {\n', '          balanceLocked[_addr[i]] =  0;  \n', '        }\n', '    }\n', ' \n', '\n', '   function checkLocked(address _addr, uint256 _value) internal view returns (bool) {\n', '      if (balanceLocked[_addr] > 0) {   //address is locked\n', '         if (now > lockAtTime[_addr] + 3 years) {  \n', '             return true;\n', '         } else if (now > lockAtTime[_addr] + 2 years)   {\n', '             return (balances[_addr] - _value >= UNLOCK_1Y);\n', '         } else if (now > lockAtTime[_addr] + 1 years)   {\n', '             return (balances[_addr] - _value >= UNLOCK_2Y);    \n', '         }  else {\n', '             return false;   \n', '         }  \n', '      }\n', '     \n', '      return true;\n', '   } \n', '        \n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  \n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', ' \n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', 'contract AMFC is StandardToken, BurnableToken, Ownable {\n', '    // Constants\n', '    string  public constant name = "Anything Macgic Fans";\n', '    string  public constant symbol = "AMFC";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY      = 500000000 * (10 ** uint256(decimals));\n', '\n', '    address constant LOCK_ADDR = 0xF63Fb7657B11B408eEdD263fE0753E1665E7400a;\n', '    uint256 constant LOCK_SUPPLY    = 300000000 * (10 ** uint256(decimals));  \n', '    uint256 constant UNLOCK_2Y    =   200000000 * (10 ** uint256(decimals)); \n', '    uint256 constant UNLOCK_1Y    =   100000000 * (10 ** uint256(decimals)); \n', '\n', '    uint256 constant OWNER_SUPPLY      = INITIAL_SUPPLY - LOCK_SUPPLY;\n', '\n', '    mapping(address => uint256)  balanceLocked;   //地址 - 锁定代币数量\n', '    mapping(address => uint256)  lockAtTime;      //地址 - 锁定起始时间点\n', '    \n', '  \n', '    uint256 public buyPrice = 585;\n', '    bool public crowdsaleClosed;\n', '    bool public transferEnabled = true;\n', '\n', '\n', '    constructor() public {\n', '      totalSupply_ = INITIAL_SUPPLY;\n', '\n', '      balances[msg.sender] = OWNER_SUPPLY;\n', '      emit Transfer(0x0, msg.sender, OWNER_SUPPLY);\n', '\n', '      balances[LOCK_ADDR] = LOCK_SUPPLY;\n', '      emit Transfer(0x0, LOCK_ADDR, LOCK_SUPPLY);\n', '\n', '      _lock(LOCK_ADDR);\n', '    }\n', '\n', '    function _lock(address _owner) internal {\n', '        balanceLocked[_owner] =  balances[_owner];  \n', '        lockAtTime[_owner] = now;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {     \n', '        require (balances[_from] >= _value);               // Check if the sender has enough\n', '        require (balances[_to] + _value > balances[_to]); // Check for overflows\n', '   \n', '        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);                            // Add the same to the recipient\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function setPrices(bool closebuy, uint256 newBuyPrice) onlyOwner public {\n', '        crowdsaleClosed = closebuy;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function () external payable {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value ;               // calculates the amount\n', ' \n', '        _transfer(owner, msg.sender, amount.mul(buyPrice)); \n', '        owner.transfer(amount);\n', '    }\n', '\n', '    //取回eth, 参数设为0 则全部取回, 否则取回指定数量的eth\n', '    function safeWithdrawal(uint _value ) onlyOwner public {\n', '       if (_value == 0) \n', '           owner.transfer(address(this).balance);\n', '       else\n', '           owner.transfer(_value);\n', '    }\n', '\n', ' \n', '    function enableTransfer(bool _enable) onlyOwner external {\n', '        transferEnabled = _enable;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transferEnabled);\n', '        require(checkLocked(_from, _value));\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transferEnabled);\n', '        require(checkLocked(msg.sender, _value));\n', '        \n', '        return super.transfer(_to, _value);\n', '    }    \n', '  \n', '    // 传入要锁定的地址, 锁定数量为地址当前拥有的数量\n', '    //流程:\n', '    //ICO 完成后,  调用此函数设置锁定地址, 然后调用 enableTransfer 函数允许转token\n', '    function lockAddress( address[] _addr ) onlyOwner external  {\n', '        for (uint i = 0; i < _addr.length; i++) {\n', '          _lock(_addr[i]);\n', '        }\n', '    }\n', '    \n', '    // 解锁地址\n', '    function unlockAddress( address[] _addr ) onlyOwner external  {\n', '        for (uint i = 0; i < _addr.length; i++) {\n', '          balanceLocked[_addr[i]] =  0;  \n', '        }\n', '    }\n', ' \n', '\n', '   function checkLocked(address _addr, uint256 _value) internal view returns (bool) {\n', '      if (balanceLocked[_addr] > 0) {   //address is locked\n', '         if (now > lockAtTime[_addr] + 3 years) {  \n', '             return true;\n', '         } else if (now > lockAtTime[_addr] + 2 years)   {\n', '             return (balances[_addr] - _value >= UNLOCK_1Y);\n', '         } else if (now > lockAtTime[_addr] + 1 years)   {\n', '             return (balances[_addr] - _value >= UNLOCK_2Y);    \n', '         }  else {\n', '             return false;   \n', '         }  \n', '      }\n', '     \n', '      return true;\n', '   } \n', '        \n', '}']
