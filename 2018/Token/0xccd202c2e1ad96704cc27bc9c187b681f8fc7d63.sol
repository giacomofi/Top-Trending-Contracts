['pragma solidity ^0.4.11;\n', '//Math operations with safety checks\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '//creator\n', 'contract owned{\n', '    address public Admin;\n', '    function owned() public {\n', '        Admin = msg.sender;\n', '    }\n', '    modifier onlyAdmin{\n', '        require(msg.sender == Admin);\n', '        _;\n', '    }\n', '    function transferAdmin(address NewAdmin) onlyAdmin public {\n', '        Admin = NewAdmin;\n', '    }\n', '}\n', '\n', '//public\n', 'contract Erc{\n', '    using SafeMath for uint;\n', '    uint public totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    \n', '    function balanceOf(address _in) constant returns (uint);\n', '    function disqualified(address _from,uint value);\n', '    function transfer(address _to , uint value);\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transferFrom(address from,address to ,uint value);\n', '    function approve(address spender, uint value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from , address indexed to , uint value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Disqualified(address targetAD, uint value);\n', '     \n', '    modifier onlyPayloadSize(uint size) {\n', '    if(msg.data.length < size + 4) {throw;}_;\n', '    }\n', '    \n', '    function _transfer(address _from ,address _to, uint _value) onlyPayloadSize(2 * 32) internal {\n', '    require(!frozenAccount[_from]);                     \n', '    require(!frozenAccount[_to]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    }\n', '}\n', '\n', '//function\n', 'contract StandardToken is Erc,owned{\n', '    //check if user illicit activity,freezeAccount and back to totalSupply\n', '    function disqualified(address targetAD, uint _value) onlyAdmin public {\n', '        require(balances[targetAD] >= _value);  \n', '        balances[targetAD] -= _value;           \n', '        totalSupply -= _value;                    \n', '        Disqualified(msg.sender, _value);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyAdmin public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '    _transfer(msg.sender, _to, _value);\n', '    }\n', '  \n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyAdmin public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;              // calculates the amount\n', '        Transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '    \n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);     // checks if the contract has enough ether to buy\n', '        Transfer(msg.sender, this, amount);              // makes the transfers\n', '        msg.sender.transfer(amount * sellPrice);         // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    }\n', '}\n', '\n', '//contract\n', 'contract SOC is StandardToken {\n', '    string public name = "CADT Token";\n', '    string public symbol = "CADT";\n', '    uint public decimals = 8;\n', '    uint public INITIAL_SUPPLY = 50000000000000000; // Initial supply is 500,000,000 SOC\n', '\n', '    function SOC(){\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '//Math operations with safety checks\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '//creator\n', 'contract owned{\n', '    address public Admin;\n', '    function owned() public {\n', '        Admin = msg.sender;\n', '    }\n', '    modifier onlyAdmin{\n', '        require(msg.sender == Admin);\n', '        _;\n', '    }\n', '    function transferAdmin(address NewAdmin) onlyAdmin public {\n', '        Admin = NewAdmin;\n', '    }\n', '}\n', '\n', '//public\n', 'contract Erc{\n', '    using SafeMath for uint;\n', '    uint public totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    \n', '    function balanceOf(address _in) constant returns (uint);\n', '    function disqualified(address _from,uint value);\n', '    function transfer(address _to , uint value);\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transferFrom(address from,address to ,uint value);\n', '    function approve(address spender, uint value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from , address indexed to , uint value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Disqualified(address targetAD, uint value);\n', '     \n', '    modifier onlyPayloadSize(uint size) {\n', '    if(msg.data.length < size + 4) {throw;}_;\n', '    }\n', '    \n', '    function _transfer(address _from ,address _to, uint _value) onlyPayloadSize(2 * 32) internal {\n', '    require(!frozenAccount[_from]);                     \n', '    require(!frozenAccount[_to]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    }\n', '}\n', '\n', '//function\n', 'contract StandardToken is Erc,owned{\n', '    //check if user illicit activity,freezeAccount and back to totalSupply\n', '    function disqualified(address targetAD, uint _value) onlyAdmin public {\n', '        require(balances[targetAD] >= _value);  \n', '        balances[targetAD] -= _value;           \n', '        totalSupply -= _value;                    \n', '        Disqualified(msg.sender, _value);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyAdmin public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '    _transfer(msg.sender, _to, _value);\n', '    }\n', '  \n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyAdmin public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;              // calculates the amount\n', '        Transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '    \n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);     // checks if the contract has enough ether to buy\n', '        Transfer(msg.sender, this, amount);              // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);         // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}\n', '\n', '//contract\n', 'contract SOC is StandardToken {\n', '    string public name = "CADT Token";\n', '    string public symbol = "CADT";\n', '    uint public decimals = 8;\n', '    uint public INITIAL_SUPPLY = 50000000000000000; // Initial supply is 500,000,000 SOC\n', '\n', '    function SOC(){\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '}']
