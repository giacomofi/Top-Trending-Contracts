['pragma solidity ^0.4.20;\n', ' \n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '  \n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  address public saleAgent;\n', '  address public partner;\n', '\n', '  modifier onlyAdmin() {\n', '    require(msg.sender == owner || msg.sender == saleAgent || msg.sender == partner);\n', '    _;\n', '  }\n', '\n', '  function setSaleAgent(address newSaleAgent) onlyOwner public {\n', '    require(newSaleAgent != address(0)); \n', '    saleAgent = newSaleAgent;\n', '  }\n', '\n', '  function setPartner(address newPartner) onlyOwner public {\n', '    require(newPartner != address(0)); \n', '    partner = newPartner;\n', '  }\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 public storageTime = 1522749600; // 04/03/2018 @ 10:00am (UTC)\n', '\n', '  modifier checkStorageTime() {\n', '    require(now >= storageTime);\n', '    _;\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint256 numwords) {\n', '    assert(msg.data.length >= numwords * 32 + 4);\n', '    _;\n', '  }\n', '\n', '  function setStorageTime(uint256 _time) public onlyOwner {\n', '    storageTime = _time;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public\n', '  onlyPayloadSize(2) whenNotPaused checkStorageTime returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public \n', '  onlyPayloadSize(3) whenNotPaused checkStorageTime returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public \n', '  onlyPayloadSize(2) whenNotPaused returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '   /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public \n', '  onlyPayloadSize(2)\n', '  returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public \n', '  onlyPayloadSize(2)\n', '  returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken{\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyAdmin whenNotPaused canMint returns  (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(this), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyPayloadSize(1) {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) public \n', '  onlyPayloadSize(2)\n', '  returns (bool success) {\n', '    require(balances[_from] >= _value);// Check if the targeted balance is enough\n', '    require(_value <= allowed[_from][msg.sender]);// Check allowance\n', '    balances[_from] = balances[_from].sub(_value); // Subtract from the targeted balance\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Subtract from the sender&#39;s allowance\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(_from, _value);\n', '    return true;\n', '    }\n', '}\n', '\n', 'contract AlttexToken is BurnableToken {\n', '    string public constant name = "Alttex";\n', '    string public constant symbol = "ALTX";\n', '    uint8 public constant decimals = 8;\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    uint256 public startTimeRound1;\n', '    uint256 public endTimeRound1;\n', '\n', '    uint256 public startTimeRound2;\n', '    uint256 public endTimeRound2;\n', '\n', '    // one token per one rate\n', '    uint256 public rateRound1 = 1200;\n', '    uint256 public rateRound2 = 900;\n', '\n', '    uint256 constant dec = 10 ** 8;\n', '    uint256 public supply = 50000000 * 10 ** 8;\n', '    uint256 public percentTokensToSale = 60;\n', '    uint256 public tokensToSale = supply.mul(percentTokensToSale).div(100);\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    AlttexToken public token;\n', '    // Amount of raised money in wei\n', '    uint256 public weiRaised = 21678 * 10 ** 16; // 216.78 ETH\n', '    uint256 public minTokensToSale = 45 * dec;\n', '    // Company addresses\n', '    address public TeamAndAdvisors;\n', '    address public Investors;\n', '\n', '    uint256 timeBonus1 = 20;\n', '    uint256 timeBonus2 = 10;\n', '\n', '    // Round bonuses\n', '    uint256 bonus1 = 10;\n', '    uint256 bonus2 = 15;\n', '    uint256 bonus3 = 20;\n', '    uint256 bonus4 = 30;\n', '\n', '    // Amount bonuses\n', '    uint256 amount1 = 500 * dec;\n', '    uint256 amount2 = 1000 * dec;\n', '    uint256 amount3 = 5000 * dec;\n', '    uint256 amount4 = 10000 * dec;\n', '\n', '    bool initalMinted = false;\n', '    bool initialWeiRaised = false;\n', '    bool checkBonus = false;\n', '\n', '    function Crowdsale(\n', '        address _token,\n', '        uint256 _startTimeRound1, // 1520121600 - 03/04/2018 @ 12:00am (UTC)\n', '        uint256 _startTimeRound2, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\n', '        uint256 _endTimeRound1, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\n', '        uint256 _endTimeRound2, // 1525305600 - 05/03/2018 @ 12:00am (UTC)\n', '        address _wallet,\n', '        address _TeamAndAdvisors,\n', '        address _Investors) public {\n', '        require(_token != address(0));\n', '        require(_endTimeRound1 > _startTimeRound1);\n', '        require(_endTimeRound2 > _startTimeRound2);\n', '        require(_wallet != address(0));\n', '        require(_TeamAndAdvisors != address(0));\n', '        require(_Investors != address(0));\n', '        token = AlttexToken(_token);\n', '        startTimeRound1 = _startTimeRound1;\n', '        startTimeRound2 = _startTimeRound2;\n', '        endTimeRound1 = _endTimeRound1;\n', '        endTimeRound2 = _endTimeRound2;\n', '        wallet = _wallet;\n', '        TeamAndAdvisors = _TeamAndAdvisors;\n', '        Investors = _Investors;\n', '    }\n', '\n', '    function initialMint() onlyOwner public {\n', '        require(!initalMinted);\n', '        uint256 _initialRaised = 17472 * 10 ** 16;\n', '        uint256 _tokens = _initialRaised.mul(1500).div(10 ** 10);\n', '        token.mint(Investors, _tokens.add(_tokens.mul(40).div(100)));\n', '        initalMinted = true;\n', '    }\n', '\n', '    function initialWeiRais(uint256 _newInitialWeiRais) onlyOwner public {\n', '        require(!initialWeiRaised);\n', '        weiRaised = _newInitialWeiRais;\n', '        initialWeiRaised = true;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        uint tokenSupply = token.totalSupply();\n', '        require(now > startTimeRound1 && now < endTimeRound2);\n', '        require(tokenSupply <= supply);\n', '        _;\n', '    }\n', '\n', '    function setPercentTokensToSale(\n', '        uint256 _newPercentTokensToSale) onlyOwner public {\n', '        percentTokensToSale = _newPercentTokensToSale;\n', '    }\n', '\n', '    function setMinTokensToSale(\n', '        uint256 _newMinTokensToSale) onlyOwner public {\n', '        minTokensToSale = _newMinTokensToSale;\n', '    }\n', '\n', '    function setCheckBonus(\n', '        bool _newCheckBonus) onlyOwner public {\n', '        checkBonus = _newCheckBonus;\n', '    }\n', '\n', '    function setAmount(\n', '        uint256 _newAmount1,\n', '        uint256 _newAmount2,\n', '        uint256 _newAmount3,\n', '        uint256 _newAmount4) onlyOwner public {\n', '        amount1 = _newAmount1;\n', '        amount2 = _newAmount2;\n', '        amount3 = _newAmount3;\n', '        amount4 = _newAmount4;\n', '    }\n', '\n', '    function setBonuses(\n', '        uint256 _newBonus1,\n', '        uint256 _newBonus2,\n', '        uint256 _newBonus3,\n', '        uint256 _newBonus4) onlyOwner public {\n', '        bonus1 = _newBonus1;\n', '        bonus2 = _newBonus2;\n', '        bonus3 = _newBonus3;\n', '        bonus4 = _newBonus4;\n', '    }\n', '\n', '    function setRoundTime(\n', '      uint256 _newStartTimeRound2,\n', '      uint256 _newEndTimeRound2) onlyOwner public {\n', '      require(_newEndTimeRound2 > _newStartTimeRound2);\n', '        startTimeRound2 = _newStartTimeRound2;\n', '        endTimeRound2 = _newEndTimeRound2;\n', '    }\n', '\n', '    function setRate(uint256 _newRateRound2) public onlyOwner {\n', '        rateRound2 = _newRateRound2;\n', '    }\n', '\n', '    function setTimeBonus(uint256 _newTimeBonus) public onlyOwner {\n', '        timeBonus2 = _newTimeBonus;\n', '    }\n', ' \n', '    function setTeamAddress(\n', '        address _newTeamAndAdvisors,\n', '        address _newInvestors,\n', '        address _newWallet) onlyOwner public {\n', '        require(_newTeamAndAdvisors != address(0));\n', '        require(_newInvestors != address(0));\n', '        require(_newWallet != address(0));\n', '        TeamAndAdvisors = _newTeamAndAdvisors;\n', '        Investors = _newInvestors;\n', '        wallet = _newWallet;\n', '    }\n', '\n', '\n', '    function getAmount(uint256 _value) internal view returns (uint256) {\n', '        uint256 amount = 0;\n', '        uint256 all = 100;\n', '        uint256 tokenSupply = token.totalSupply();\n', '        if(now >= startTimeRound1 && now < endTimeRound1) { // Round 1\n', '            amount = _value.mul(rateRound1);\n', '            amount = amount.add(amount.mul(timeBonus1).div(all));\n', '        } else if(now >= startTimeRound2 && now < endTimeRound2) { // Round 2\n', '            amount = _value.mul(rateRound2);\n', '            amount = amount.add(amount.mul(timeBonus2).div(all));\n', '        } \n', '        require(amount >= minTokensToSale);\n', '        require(amount != 0 && amount.add(tokenSupply) < tokensToSale);\n', '        return amount;\n', '    }\n', '\n', '    function getBonus(uint256 _value) internal view returns (uint256) {\n', '        if(_value >= amount1 && _value < amount2) { \n', '            return bonus1;\n', '        } else if(_value >= amount2 && _value < amount3) {\n', '            return bonus2;\n', '        } else if(_value >= amount3 && _value < amount4) {\n', '            return bonus3;\n', '        } else if(_value >= amount4) {\n', '            return bonus4;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * events for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenPartners(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '    function buyTokens(address beneficiary) saleIsOn public payable {\n', '        require(beneficiary != address(0));\n', '        uint256 weiAmount = (msg.value).div(10 ** 10);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getAmount(weiAmount);\n', '\n', '        if(checkBonus) {\n', '          uint256 bonusNow = getBonus(tokens);\n', '          tokens = tokens.add(tokens.mul(bonusNow).div(100));\n', '        }\n', '        \n', '        weiRaised = weiRaised.add(msg.value);\n', '        uint256 taaTokens = tokens.mul(20).div(100);\n', '\n', '        require(tokens.add(taaTokens).add(token.totalSupply()) <= tokensToSale);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        token.mint(TeamAndAdvisors, taaTokens);\n', '        TokenPartners(msg.sender, TeamAndAdvisors, taaTokens);\n', '        wallet.transfer(msg.value);\n', '        \n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // @return true if tokensale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTimeRound2;\n', '    }\n', '\n', '    function kill() onlyOwner public { selfdestruct(owner); }\n', '    \n', '}']
['pragma solidity ^0.4.20;\n', ' \n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '  \n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  address public saleAgent;\n', '  address public partner;\n', '\n', '  modifier onlyAdmin() {\n', '    require(msg.sender == owner || msg.sender == saleAgent || msg.sender == partner);\n', '    _;\n', '  }\n', '\n', '  function setSaleAgent(address newSaleAgent) onlyOwner public {\n', '    require(newSaleAgent != address(0)); \n', '    saleAgent = newSaleAgent;\n', '  }\n', '\n', '  function setPartner(address newPartner) onlyOwner public {\n', '    require(newPartner != address(0)); \n', '    partner = newPartner;\n', '  }\n', '\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 public storageTime = 1522749600; // 04/03/2018 @ 10:00am (UTC)\n', '\n', '  modifier checkStorageTime() {\n', '    require(now >= storageTime);\n', '    _;\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint256 numwords) {\n', '    assert(msg.data.length >= numwords * 32 + 4);\n', '    _;\n', '  }\n', '\n', '  function setStorageTime(uint256 _time) public onlyOwner {\n', '    storageTime = _time;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public\n', '  onlyPayloadSize(2) whenNotPaused checkStorageTime returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public \n', '  onlyPayloadSize(3) whenNotPaused checkStorageTime returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public \n', '  onlyPayloadSize(2) whenNotPaused returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '   /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public \n', '  onlyPayloadSize(2)\n', '  returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public \n', '  onlyPayloadSize(2)\n', '  returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken{\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyAdmin whenNotPaused canMint returns  (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(this), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyPayloadSize(1) {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) public \n', '  onlyPayloadSize(2)\n', '  returns (bool success) {\n', '    require(balances[_from] >= _value);// Check if the targeted balance is enough\n', '    require(_value <= allowed[_from][msg.sender]);// Check allowance\n', '    balances[_from] = balances[_from].sub(_value); // Subtract from the targeted balance\n', "    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\n", '    totalSupply = totalSupply.sub(_value);\n', '    Burn(_from, _value);\n', '    return true;\n', '    }\n', '}\n', '\n', 'contract AlttexToken is BurnableToken {\n', '    string public constant name = "Alttex";\n', '    string public constant symbol = "ALTX";\n', '    uint8 public constant decimals = 8;\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    uint256 public startTimeRound1;\n', '    uint256 public endTimeRound1;\n', '\n', '    uint256 public startTimeRound2;\n', '    uint256 public endTimeRound2;\n', '\n', '    // one token per one rate\n', '    uint256 public rateRound1 = 1200;\n', '    uint256 public rateRound2 = 900;\n', '\n', '    uint256 constant dec = 10 ** 8;\n', '    uint256 public supply = 50000000 * 10 ** 8;\n', '    uint256 public percentTokensToSale = 60;\n', '    uint256 public tokensToSale = supply.mul(percentTokensToSale).div(100);\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    AlttexToken public token;\n', '    // Amount of raised money in wei\n', '    uint256 public weiRaised = 21678 * 10 ** 16; // 216.78 ETH\n', '    uint256 public minTokensToSale = 45 * dec;\n', '    // Company addresses\n', '    address public TeamAndAdvisors;\n', '    address public Investors;\n', '\n', '    uint256 timeBonus1 = 20;\n', '    uint256 timeBonus2 = 10;\n', '\n', '    // Round bonuses\n', '    uint256 bonus1 = 10;\n', '    uint256 bonus2 = 15;\n', '    uint256 bonus3 = 20;\n', '    uint256 bonus4 = 30;\n', '\n', '    // Amount bonuses\n', '    uint256 amount1 = 500 * dec;\n', '    uint256 amount2 = 1000 * dec;\n', '    uint256 amount3 = 5000 * dec;\n', '    uint256 amount4 = 10000 * dec;\n', '\n', '    bool initalMinted = false;\n', '    bool initialWeiRaised = false;\n', '    bool checkBonus = false;\n', '\n', '    function Crowdsale(\n', '        address _token,\n', '        uint256 _startTimeRound1, // 1520121600 - 03/04/2018 @ 12:00am (UTC)\n', '        uint256 _startTimeRound2, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\n', '        uint256 _endTimeRound1, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\n', '        uint256 _endTimeRound2, // 1525305600 - 05/03/2018 @ 12:00am (UTC)\n', '        address _wallet,\n', '        address _TeamAndAdvisors,\n', '        address _Investors) public {\n', '        require(_token != address(0));\n', '        require(_endTimeRound1 > _startTimeRound1);\n', '        require(_endTimeRound2 > _startTimeRound2);\n', '        require(_wallet != address(0));\n', '        require(_TeamAndAdvisors != address(0));\n', '        require(_Investors != address(0));\n', '        token = AlttexToken(_token);\n', '        startTimeRound1 = _startTimeRound1;\n', '        startTimeRound2 = _startTimeRound2;\n', '        endTimeRound1 = _endTimeRound1;\n', '        endTimeRound2 = _endTimeRound2;\n', '        wallet = _wallet;\n', '        TeamAndAdvisors = _TeamAndAdvisors;\n', '        Investors = _Investors;\n', '    }\n', '\n', '    function initialMint() onlyOwner public {\n', '        require(!initalMinted);\n', '        uint256 _initialRaised = 17472 * 10 ** 16;\n', '        uint256 _tokens = _initialRaised.mul(1500).div(10 ** 10);\n', '        token.mint(Investors, _tokens.add(_tokens.mul(40).div(100)));\n', '        initalMinted = true;\n', '    }\n', '\n', '    function initialWeiRais(uint256 _newInitialWeiRais) onlyOwner public {\n', '        require(!initialWeiRaised);\n', '        weiRaised = _newInitialWeiRais;\n', '        initialWeiRaised = true;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        uint tokenSupply = token.totalSupply();\n', '        require(now > startTimeRound1 && now < endTimeRound2);\n', '        require(tokenSupply <= supply);\n', '        _;\n', '    }\n', '\n', '    function setPercentTokensToSale(\n', '        uint256 _newPercentTokensToSale) onlyOwner public {\n', '        percentTokensToSale = _newPercentTokensToSale;\n', '    }\n', '\n', '    function setMinTokensToSale(\n', '        uint256 _newMinTokensToSale) onlyOwner public {\n', '        minTokensToSale = _newMinTokensToSale;\n', '    }\n', '\n', '    function setCheckBonus(\n', '        bool _newCheckBonus) onlyOwner public {\n', '        checkBonus = _newCheckBonus;\n', '    }\n', '\n', '    function setAmount(\n', '        uint256 _newAmount1,\n', '        uint256 _newAmount2,\n', '        uint256 _newAmount3,\n', '        uint256 _newAmount4) onlyOwner public {\n', '        amount1 = _newAmount1;\n', '        amount2 = _newAmount2;\n', '        amount3 = _newAmount3;\n', '        amount4 = _newAmount4;\n', '    }\n', '\n', '    function setBonuses(\n', '        uint256 _newBonus1,\n', '        uint256 _newBonus2,\n', '        uint256 _newBonus3,\n', '        uint256 _newBonus4) onlyOwner public {\n', '        bonus1 = _newBonus1;\n', '        bonus2 = _newBonus2;\n', '        bonus3 = _newBonus3;\n', '        bonus4 = _newBonus4;\n', '    }\n', '\n', '    function setRoundTime(\n', '      uint256 _newStartTimeRound2,\n', '      uint256 _newEndTimeRound2) onlyOwner public {\n', '      require(_newEndTimeRound2 > _newStartTimeRound2);\n', '        startTimeRound2 = _newStartTimeRound2;\n', '        endTimeRound2 = _newEndTimeRound2;\n', '    }\n', '\n', '    function setRate(uint256 _newRateRound2) public onlyOwner {\n', '        rateRound2 = _newRateRound2;\n', '    }\n', '\n', '    function setTimeBonus(uint256 _newTimeBonus) public onlyOwner {\n', '        timeBonus2 = _newTimeBonus;\n', '    }\n', ' \n', '    function setTeamAddress(\n', '        address _newTeamAndAdvisors,\n', '        address _newInvestors,\n', '        address _newWallet) onlyOwner public {\n', '        require(_newTeamAndAdvisors != address(0));\n', '        require(_newInvestors != address(0));\n', '        require(_newWallet != address(0));\n', '        TeamAndAdvisors = _newTeamAndAdvisors;\n', '        Investors = _newInvestors;\n', '        wallet = _newWallet;\n', '    }\n', '\n', '\n', '    function getAmount(uint256 _value) internal view returns (uint256) {\n', '        uint256 amount = 0;\n', '        uint256 all = 100;\n', '        uint256 tokenSupply = token.totalSupply();\n', '        if(now >= startTimeRound1 && now < endTimeRound1) { // Round 1\n', '            amount = _value.mul(rateRound1);\n', '            amount = amount.add(amount.mul(timeBonus1).div(all));\n', '        } else if(now >= startTimeRound2 && now < endTimeRound2) { // Round 2\n', '            amount = _value.mul(rateRound2);\n', '            amount = amount.add(amount.mul(timeBonus2).div(all));\n', '        } \n', '        require(amount >= minTokensToSale);\n', '        require(amount != 0 && amount.add(tokenSupply) < tokensToSale);\n', '        return amount;\n', '    }\n', '\n', '    function getBonus(uint256 _value) internal view returns (uint256) {\n', '        if(_value >= amount1 && _value < amount2) { \n', '            return bonus1;\n', '        } else if(_value >= amount2 && _value < amount3) {\n', '            return bonus2;\n', '        } else if(_value >= amount3 && _value < amount4) {\n', '            return bonus3;\n', '        } else if(_value >= amount4) {\n', '            return bonus4;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * events for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenPartners(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '    function buyTokens(address beneficiary) saleIsOn public payable {\n', '        require(beneficiary != address(0));\n', '        uint256 weiAmount = (msg.value).div(10 ** 10);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getAmount(weiAmount);\n', '\n', '        if(checkBonus) {\n', '          uint256 bonusNow = getBonus(tokens);\n', '          tokens = tokens.add(tokens.mul(bonusNow).div(100));\n', '        }\n', '        \n', '        weiRaised = weiRaised.add(msg.value);\n', '        uint256 taaTokens = tokens.mul(20).div(100);\n', '\n', '        require(tokens.add(taaTokens).add(token.totalSupply()) <= tokensToSale);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        token.mint(TeamAndAdvisors, taaTokens);\n', '        TokenPartners(msg.sender, TeamAndAdvisors, taaTokens);\n', '        wallet.transfer(msg.value);\n', '        \n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // @return true if tokensale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTimeRound2;\n', '    }\n', '\n', '    function kill() onlyOwner public { selfdestruct(owner); }\n', '    \n', '}']
