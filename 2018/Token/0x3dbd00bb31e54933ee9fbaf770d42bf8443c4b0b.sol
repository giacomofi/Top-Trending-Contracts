['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Migrations {\n', '    address public owner;\n', '    uint public last_completed_migration;\n', '\n', '    modifier restricted() {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    function Migrations() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setCompleted(uint completed) restricted public {\n', '        last_completed_migration = completed;\n', '    }\n', '\n', '    function upgrade(address new_address) restricted public {\n', '        Migrations upgraded = Migrations(new_address);\n', '        upgraded.setCompleted(last_completed_migration);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TimeLockedWallet {\n', '\n', '    address public creator;\n', '    address public owner;\n', '    uint256 public unlockDate;\n', '    uint256 public createdAt;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function TimeLockedWallet(\n', '        address _creator,\n', '        address _owner,\n', '        uint256 _unlockDate\n', '    ) public {\n', '        creator = 0x3FC217e72846A3F86f541FAbC99F61e38E1dBF6E;\n', '        owner = 0x3FC217e72846A3F86f541FAbC99F61e38E1dBF6E;\n', '        unlockDate = 1540944000;\n', '        createdAt = now;\n', '    }\n', '\n', '    // keep all the ether sent to this address\n', '    function() payable public { \n', '        Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // callable by owner only, after specified time\n', '    function withdraw() onlyOwner public {\n', '       require(now >= unlockDate);\n', '       //now send all the balance\n', '       msg.sender.transfer(this.balance);\n', '       Withdrew(msg.sender, this.balance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawTokens(address _tokenContract) onlyOwner public {\n', '       require(now >= unlockDate);\n', '       ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint256 tokenBalance = token.balanceOf(this);\n', '       token.transfer(owner, tokenBalance);\n', '       WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n', '    }\n', '\n', '    function info() public view returns(address, address, uint256, uint256, uint256) {\n', '        return (creator, owner, unlockDate, createdAt, this.balance);\n', '    }\n', '\n', '    event Received(address from, uint256 amount);\n', '    event Withdrew(address to, uint256 amount);\n', '    event WithdrewTokens(address tokenContract, address to, uint256 amount);\n', '}\n', '\n', 'contract TimeLockedWalletFactory {\n', ' \n', '    mapping(address => address[]) wallets;\n', '\n', '    function getWallets(address _user) \n', '        public\n', '        view\n', '        returns(address[])\n', '    {\n', '        return wallets[_user];\n', '    }\n', '\n', '    function newTimeLockedWallet(address _owner, uint256 _unlockDate)\n', '        payable\n', '        public\n', '        returns(address wallet)\n', '    {\n', '        // Create new wallet.\n', '        wallet = new TimeLockedWallet(msg.sender, _owner, _unlockDate);\n', '        \n', "        // Add wallet to sender's wallets.\n", '        wallets[msg.sender].push(wallet);\n', '\n', "        // If owner is the same as sender then add wallet to sender's wallets too.\n", '        if(msg.sender != _owner){\n', '            wallets[_owner].push(wallet);\n', '        }\n', '\n', '        // Send ether from this transaction to the created contract.\n', '        wallet.transfer(msg.value);\n', '\n', '        // Emit event.\n', '        Created(wallet, msg.sender, _owner, now, _unlockDate, msg.value);\n', '    }\n', '\n', '    // Prevents accidental sending of ether to the factory\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    event Created(address wallet, address from, address to, uint256 createdAt, uint256 unlockDate, uint256 amount);\n', '}\n', '\n', '/**\n', ' * @title Honey Share Coin\n', ' */\n', '\n', 'contract HoneyShareCoin is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  string public name = "Honey Share Coin";\n', '  string public symbol = "HSC";\n', '  uint256 public decimals = 18;\n', '\n', '  function HoneyShareCoin() public {\n', '    totalSupply = 2000000000000000000000000000;\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[0x3FC217e72846A3F86f541FAbC99F61e38E1dBF6E];\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']