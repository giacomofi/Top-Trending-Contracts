['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MultiEthSender {\n', '  using SafeMath for uint256;\n', '\n', '  event Send(uint256 _amount, address indexed _receiver);\n', '  \n', '  function() public payable {\n', '  }\n', '\n', '  function multiSendEth(\n', '    uint256 amount, \n', '    address[] list\n', '  ) \n', '  external \n', '  returns (bool) \n', '  {\n', '\n', '    uint256 totalList = list.length;\n', '    uint256 totalAmount = amount.mul(totalList);\n', '    require(address(this).balance > totalAmount);\n', '\n', '    for (uint256 i = 0; i < list.length; i++) {\n', '      require(list[i] != address(0));\n', '      require(list[i].send(amount));\n', '\n', '      emit Send(amount, list[i]);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '}']