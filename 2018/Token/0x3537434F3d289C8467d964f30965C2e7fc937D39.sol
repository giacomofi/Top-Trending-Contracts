['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract AimiToken {\n', '    //---------------------------------------变量---------------------------------------- \n', '    string public name = "艾米币";//代币名字\n', '    string public symbol = "AT"; //代币符号\n', '    uint8 public decimals = 8; //代币小数位\n', '    uint256 public _totalSupply ; //代币总量10亿\n', '     mapping(address => uint256) balances;\n', '    //用一个映射类型的变量，来记录被冻结的账户\n', '    mapping(address=>bool) public frozenATAccount;\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    bool  transfersEnabled = false ;//是否激活代币交易 ，true为激活，默认不激活 \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    address public owner;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(frozenATAccount[_to]==false);\n', '    require(frozenATAccount[msg.sender]==false);\n', '    require(transfersEnabled==true);\n', '    balances[_from] = sub(balances[_from],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    allowed[_from][msg.sender] = sub(allowed[_from][msg.sender],_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender],_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = sub(oldValue,_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(frozenATAccount[_to]==false);\n', '    require(frozenATAccount[msg.sender]==false);\n', '    require(transfersEnabled==true);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = sub(balances[msg.sender],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '       return _totalSupply;\n', '    }\n', ' \n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '   /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '  \n', '  \n', '  \n', '    \n', '    //-----------------------------------------构造方法--------------------------------------------- \n', '    //构造函数,\n', '    function AimiToken(address _sentM,uint256 __totalSupply) public payable{\n', '        //手动指定代币的拥有者，如果不填，则默认为合约的部署者\n', '        if(_sentM !=0){\n', '            owner = _sentM;\n', '        }\n', '        if(__totalSupply!=0){\n', '            _totalSupply = __totalSupply;\n', '        }\n', '        //初始化合约的拥有者全部代币 \n', '        balances[owner] = _totalSupply;\n', '   \n', '    }\n', ' \n', ' function frozenAccount(address froze_address) public onlyOwner{\n', '     frozenATAccount[froze_address]=true;\n', ' } \n', '  function unfrozenATAccount(address unfroze_address) public onlyOwner{\n', '     frozenATAccount[unfroze_address]=false;\n', ' } \n', ' \n', '   function openTransfer() public onlyOwner{\n', '    transfersEnabled=true;\n', ' } \n', '   function closeTransfer() public onlyOwner{\n', '     transfersEnabled=true;\n', ' } \n', '}']