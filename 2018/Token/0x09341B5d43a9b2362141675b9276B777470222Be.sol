['pragma solidity ^0.4.24;\n', '/**\n', ' * @title SafeMath v0.1.9\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' */\n', ' \n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf( address who ) public view returns (uint value);\n', '    function allowance( address owner, address spender ) public view returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) public returns (bool ok);\n', '    function approve( address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '/*\n', ' * contract : Ownable\n', ' */\n', ' contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            emit OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '/*\n', ' * Pausable contract\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public returns (bool) {\n', '        paused = true;\n', '        emit Pause();\n', '        return true;\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public returns (bool) {\n', '        paused = false;\n', '        emit Unpause();\n', '        return true;\n', '    }\n', '}\n', '/**\n', ' contract : NTechToken\n', ' */\n', 'contract NTechToken is ERC20, Ownable, Pausable{\n', '    /**\n', '     代币基本信息\n', '     */\n', '    string public                   name = "NTech";\n', '    string public                   symbol = "NT";\n', '    uint8 constant public           decimals = 18;\n', '    uint256                         supply;\n', '\n', '    mapping (address => uint256)                        balances;\n', '    mapping (address => mapping (address => uint256))   approvals;\n', '    uint256 public constant initSupply = 10000000000;       // 10,000,000,000\n', '\n', '    constructor() public {\n', '        supply = SafeMath.mul(uint256(initSupply),uint256(10)**uint256(decimals));\n', '        balances[msg.sender] = supply; \n', '    }\n', '    // ERC 20\n', '    function totalSupply() public view returns (uint256){\n', '        return supply ;\n', '    }\n', '\n', '    function balanceOf(address src) public view returns (uint256) {\n', '        return balances[src];\n', '    }\n', '\n', '    function allowance(address src, address guy) public view returns (uint256) {\n', '        return approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) whenNotPaused public returns (bool) {\n', '        require(balances[msg.sender] >= wad);                   // 要有足够余额\n', '        require(dst != 0x0);                                    // 不能送到无效地址\n', '\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], wad);  // -    \n', '        balances[dst] = SafeMath.add(balances[dst], wad);                // +\n', '        \n', '        emit Transfer(msg.sender, dst, wad);                    // 记录事件\n', '        \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad) whenNotPaused public returns (bool) {\n', '        require(balances[src] >= wad);                          // 要有足够余额\n', '        require(approvals[src][msg.sender] >= wad);\n', '        \n', '        approvals[src][msg.sender] = SafeMath.sub(approvals[src][msg.sender], wad);\n', '        balances[src] = SafeMath.sub(balances[src], wad);\n', '        balances[dst] = SafeMath.add(balances[dst], wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) whenNotPaused public returns (bool) {\n', '        require(wad != 0);\n', '        approvals[msg.sender][guy] = wad;\n', '        emit Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    \n', '}']