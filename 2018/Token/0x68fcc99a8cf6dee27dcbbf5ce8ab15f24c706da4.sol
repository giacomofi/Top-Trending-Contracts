['pragma solidity ^0.4.24;\n', '\n', 'contract BaseContract {\n', '    bool public TokensAreFrozen = true;\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyByOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyByOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Contract is BaseContract {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event BurnTokens(address indexed from, uint256 value);\n', '    event FreezeTokensFrom(address indexed _owner);\n', '    event UnfreezeTokensFrom(address indexed _owner);\n', '}\n', '\n', 'library SafeMath {\n', '    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        return c;\n', '    }\n', '\n', '    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a + b;\n', '        return c;\n', '    }\n', '\n', '    function Div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Freedom is ERC20Contract {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public constant tokenName = "Freedom";\n', '    string public constant tokenSymbol = "FREE";\n', '    uint256 public totalSupply = 1000000000e8;\n', '    uint8 public decimals = 8;\n', '\n', '    constructor () public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        totalSupply = totalSupply;\n', '        decimals = decimals;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint256 _size) {\n', '        require(msg.data.length >= _size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        require(!TokensAreFrozen);\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].Sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].Add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(!TokensAreFrozen);\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[_from] >= _value && allowance >= _value);\n', '        balanceOf[_to]   = balanceOf[_to].Add(_value);\n', '        balanceOf[_from] = balanceOf[_from].Sub(_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!TokensAreFrozen);\n', '        require(_spender != address(0));\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function freezeTokens(address _owner) external onlyByOwner {\n', '        require(TokensAreFrozen == false);\n', '        TokensAreFrozen = true;\n', '        emit FreezeTokensFrom(_owner);\n', '    }\n', '    \n', '    function unfreezeTokens(address _owner) external onlyByOwner {\n', '        require(TokensAreFrozen == true);\n', '        TokensAreFrozen = false;\n', '        emit UnfreezeTokensFrom(_owner);\n', '    }\n', '    \n', '    function burnTokens(address _owner, uint256 _value) external onlyByOwner {\n', '        require(!TokensAreFrozen);\n', '        require(balanceOf[_owner] >= _value);\n', '        balanceOf[_owner] -= _value;\n', '        totalSupply -= _value;\n', '        emit BurnTokens(_owner, _value);\n', '    }\n', '    \n', '    function withdraw() external onlyByOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function() payable public {\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract BaseContract {\n', '    bool public TokensAreFrozen = true;\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyByOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyByOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Contract is BaseContract {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event BurnTokens(address indexed from, uint256 value);\n', '    event FreezeTokensFrom(address indexed _owner);\n', '    event UnfreezeTokensFrom(address indexed _owner);\n', '}\n', '\n', 'library SafeMath {\n', '    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        return c;\n', '    }\n', '\n', '    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a + b;\n', '        return c;\n', '    }\n', '\n', '    function Div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Freedom is ERC20Contract {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public constant tokenName = "Freedom";\n', '    string public constant tokenSymbol = "FREE";\n', '    uint256 public totalSupply = 1000000000e8;\n', '    uint8 public decimals = 8;\n', '\n', '    constructor () public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        totalSupply = totalSupply;\n', '        decimals = decimals;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint256 _size) {\n', '        require(msg.data.length >= _size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        require(!TokensAreFrozen);\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].Sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].Add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(!TokensAreFrozen);\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[_from] >= _value && allowance >= _value);\n', '        balanceOf[_to]   = balanceOf[_to].Add(_value);\n', '        balanceOf[_from] = balanceOf[_from].Sub(_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].Sub(_value);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!TokensAreFrozen);\n', '        require(_spender != address(0));\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function freezeTokens(address _owner) external onlyByOwner {\n', '        require(TokensAreFrozen == false);\n', '        TokensAreFrozen = true;\n', '        emit FreezeTokensFrom(_owner);\n', '    }\n', '    \n', '    function unfreezeTokens(address _owner) external onlyByOwner {\n', '        require(TokensAreFrozen == true);\n', '        TokensAreFrozen = false;\n', '        emit UnfreezeTokensFrom(_owner);\n', '    }\n', '    \n', '    function burnTokens(address _owner, uint256 _value) external onlyByOwner {\n', '        require(!TokensAreFrozen);\n', '        require(balanceOf[_owner] >= _value);\n', '        balanceOf[_owner] -= _value;\n', '        totalSupply -= _value;\n', '        emit BurnTokens(_owner, _value);\n', '    }\n', '    \n', '    function withdraw() external onlyByOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function() payable public {\n', '    }\n', '}']
