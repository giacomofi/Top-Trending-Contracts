['pragma solidity ^0.4.18;\n', '\n', 'contract DBC {\n', '    mapping (address => uint256) private balances;\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint256 public totalSupply;\n', '    address private originAddress;\n', '    bool private locked;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    function DBC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        originAddress = msg.sender;\n', '        locked = false;\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!locked);\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function setLock(bool _locked)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        locked = _locked;\n', '        return true;\n', '    }\n', '    function burnFrom(address _who,uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        assert(balances[_who] >= _value);\n', '        totalSupply -= _value;\n', '        balances[_who] -= _value;\n', '        return true;\n', '    }\n', '    function makeCoin(uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        totalSupply += _value;\n', '        balances[originAddress] += _value;\n', '        return true;\n', '    }\n', '    function transferBack(address _who,uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        assert(balances[_who] >= _value);\n', '        balances[_who] -= _value;\n', '        balances[originAddress] += _value;\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract DBC {\n', '    mapping (address => uint256) private balances;\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint256 public totalSupply;\n', '    address private originAddress;\n', '    bool private locked;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    function DBC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        originAddress = msg.sender;\n', '        locked = false;\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!locked);\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function setLock(bool _locked)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        locked = _locked;\n', '        return true;\n', '    }\n', '    function burnFrom(address _who,uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        assert(balances[_who] >= _value);\n', '        totalSupply -= _value;\n', '        balances[_who] -= _value;\n', '        return true;\n', '    }\n', '    function makeCoin(uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        totalSupply += _value;\n', '        balances[originAddress] += _value;\n', '        return true;\n', '    }\n', '    function transferBack(address _who,uint256 _value)public returns (bool){\n', '        require(msg.sender == originAddress);\n', '        assert(balances[_who] >= _value);\n', '        balances[_who] -= _value;\n', '        balances[originAddress] += _value;\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '\n', '}']
