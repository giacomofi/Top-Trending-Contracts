['pragma solidity ^0.4.2;\n', '\n', '// Safe maths\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _data) public;\n', '}\n', '\n', '// Owned contract\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint _supply);\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract VouchCoin is Ownable, ERC20Interface {\n', '  using SafeMath for uint;\n', '\n', '  uint public _totalSupply = 10000000000000000;\n', '  string public constant name = "VouchCoin";\n', '  string public constant symbol = "VHC";\n', '  uint public constant decimals = 8;\n', '  string public standard = "VouchCoin token v2.0";\n', '\n', '  mapping (address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowances;\n', '\n', '  event Burn(address indexed _from, uint _value);\n', '\n', '  // Constructor\n', '  function VouchCoin() public {\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  // Total supply\n', '  function totalSupply() public constant returns (uint _supply) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  // Get the token balance of address\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Transfer tokens from owner address\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    require(_to != 0x0);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns(bool success) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint _value, bytes _data) public returns (bool success) {\n', '    approve(_spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '    ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, _data);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  function burnTokens(uint _amount) public onlyOwner {\n', '    _totalSupply = _totalSupply.sub(_amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    emit Burn(msg.sender, _amount);\n', '    emit Transfer(msg.sender, 0x0, _amount);\n', '  }\n', '}']
['pragma solidity ^0.4.2;\n', '\n', '// Safe maths\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _data) public;\n', '}\n', '\n', '// Owned contract\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint _supply);\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract VouchCoin is Ownable, ERC20Interface {\n', '  using SafeMath for uint;\n', '\n', '  uint public _totalSupply = 10000000000000000;\n', '  string public constant name = "VouchCoin";\n', '  string public constant symbol = "VHC";\n', '  uint public constant decimals = 8;\n', '  string public standard = "VouchCoin token v2.0";\n', '\n', '  mapping (address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowances;\n', '\n', '  event Burn(address indexed _from, uint _value);\n', '\n', '  // Constructor\n', '  function VouchCoin() public {\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  // Total supply\n', '  function totalSupply() public constant returns (uint _supply) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  // Get the token balance of address\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Transfer tokens from owner address\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    require(_to != 0x0);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns(bool success) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint _value, bytes _data) public returns (bool success) {\n', '    approve(_spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '    ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, _data);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  function burnTokens(uint _amount) public onlyOwner {\n', '    _totalSupply = _totalSupply.sub(_amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    emit Burn(msg.sender, _amount);\n', '    emit Transfer(msg.sender, 0x0, _amount);\n', '  }\n', '}']
