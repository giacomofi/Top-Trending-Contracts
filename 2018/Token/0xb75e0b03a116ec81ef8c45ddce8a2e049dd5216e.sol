['pragma solidity ^0.4.24;\n', '\n', 'contract BasicTokenInterface{\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    event ApprovalReceived(address indexed from, uint256 indexed amount, address indexed tokenAddr, bytes data);\n', '    function receiveApproval(address from, uint256 amount, address tokenAddr, bytes data) public{\n', '        emit ApprovalReceived(from, amount, tokenAddr, data);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20TokenInterface is BasicTokenInterface, ApproveAndCallFallBack{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);   \n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function transferTokens(address token, uint amount) public returns (bool success);\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'pragma experimental "v0.5.0";\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a && c >= b);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || b == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(a > 0 && b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract BasicToken is BasicTokenInterface{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint public totalSupply;\n', '    mapping (address => uint256) internal balances;\n', '    \n', '    modifier checkpayloadsize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    } \n', '\n', '    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        success = true;\n', '        balances[msg.sender] -= _value;\n', '\n', '        //If sent to contract address reduce the supply\n', '        if(_to == address(this)){\n', '            totalSupply = totalSupply.sub(_value);\n', '        }else{\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return success;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ManagedToken is BasicToken {\n', '    address manager;\n', '    modifier restricted(){\n', '        require(msg.sender == manager,"Function can only be used by manager");\n', '        _;\n', '    }\n', '\n', '    function setManager(address newManager) public restricted{\n', '        balances[newManager] = balances[manager];\n', '        balances[manager] = 0;\n', '        manager = newManager;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, ManagedToken{\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from,address _to,uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner,address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //Permit manager to sweep any tokens that landed here\n', '    function transferTokens(address token,uint _value) public restricted returns (bool success){\n', '        return ERC20Token(token).transfer(msg.sender,_value);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract FlairDrop is ERC20Token {\n', '\n', '    address flairdrop;\n', '    uint tokenPrice;\n', '    event AirDropEvent(address indexed tokencontract, address[] destinations,uint[] indexed amounts);\n', '    \n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable{\n', '        address(manager).transfer(msg.value);\n', '        uint tokensBought = msg.value.div(tokenPrice);\n', '        balances[msg.sender] = balances[msg.sender].add(tokensBought);\n', '        totalSupply = totalSupply.add(tokensBought);\n', '        emit Transfer(address(this),msg.sender,tokensBought);\n', '    }\n', '\n', '    constructor() public {\n', '        flairdrop = address(this);\n', '        name = "FlairDrop! Airdrops With Pizzazz!";\n', '        symbol = "FLAIRDROP";\n', '        decimals = 0;\n', '        totalSupply = 0;\n', '        tokenPrice = 10000000000000; //0.01 finney\n', '        manager = msg.sender;\n', '        balances[manager] = 100000000;\n', '        \n', '    }\n', '\n', '    function airDrop(address parent, uint[] amounts, address[] droptargets) public payable {\n', '        if(msg.value > 0){\n', '            buyTokens();\n', '        }\n', '        \n', '        require(balances[msg.sender] >= droptargets.length,"Insufficient funds to execute this airdrop");\n', '        //Step 1 check our allowance with parent contract\n', '        ERC20TokenInterface parentContract = ERC20TokenInterface(parent);\n', '        uint allowance = parentContract.allowance(msg.sender, flairdrop);\n', '\n', '        uint amount = amounts[0];\n', '    \n', '        uint x = 0;\n', '\n', '        address target;\n', '        \n', '        while(gasleft() > 10000 && x <= droptargets.length - 1 ){\n', '            target = droptargets[x];\n', '            \n', '            if(amounts.length == droptargets.length){\n', '                amount = amounts[x];\n', '            }\n', '            if(allowance >=amount){\n', '                parentContract.transferFrom(msg.sender,target,amount);\n', '                allowance -= amount;\n', '            }\n', '            x++;\n', '        }\n', '        \n', '        balances[msg.sender] -= x;\n', '        totalSupply -= x;\n', '        emit Transfer(msg.sender, address(0), x);\n', '        emit AirDropEvent(parent,droptargets,amounts);\n', '    }\n', '\n', '    function setTokenPrice(uint price) public restricted{\n', '        tokenPrice = price;\n', '    }\n', '\n', '    function getTokenPrice() public view returns(uint){\n', '        return tokenPrice;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract BasicTokenInterface{\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    event ApprovalReceived(address indexed from, uint256 indexed amount, address indexed tokenAddr, bytes data);\n', '    function receiveApproval(address from, uint256 amount, address tokenAddr, bytes data) public{\n', '        emit ApprovalReceived(from, amount, tokenAddr, data);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20TokenInterface is BasicTokenInterface, ApproveAndCallFallBack{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);   \n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function transferTokens(address token, uint amount) public returns (bool success);\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'pragma experimental "v0.5.0";\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a && c >= b);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || b == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(a > 0 && b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract BasicToken is BasicTokenInterface{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    uint public totalSupply;\n', '    mapping (address => uint256) internal balances;\n', '    \n', '    modifier checkpayloadsize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    } \n', '\n', '    function transfer(address _to, uint256 _value) public checkpayloadsize(2*32) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        success = true;\n', '        balances[msg.sender] -= _value;\n', '\n', '        //If sent to contract address reduce the supply\n', '        if(_to == address(this)){\n', '            totalSupply = totalSupply.sub(_value);\n', '        }else{\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return success;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ManagedToken is BasicToken {\n', '    address manager;\n', '    modifier restricted(){\n', '        require(msg.sender == manager,"Function can only be used by manager");\n', '        _;\n', '    }\n', '\n', '    function setManager(address newManager) public restricted{\n', '        balances[newManager] = balances[manager];\n', '        balances[manager] = 0;\n', '        manager = newManager;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, ManagedToken{\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from,address _to,uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner,address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //Permit manager to sweep any tokens that landed here\n', '    function transferTokens(address token,uint _value) public restricted returns (bool success){\n', '        return ERC20Token(token).transfer(msg.sender,_value);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract FlairDrop is ERC20Token {\n', '\n', '    address flairdrop;\n', '    uint tokenPrice;\n', '    event AirDropEvent(address indexed tokencontract, address[] destinations,uint[] indexed amounts);\n', '    \n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable{\n', '        address(manager).transfer(msg.value);\n', '        uint tokensBought = msg.value.div(tokenPrice);\n', '        balances[msg.sender] = balances[msg.sender].add(tokensBought);\n', '        totalSupply = totalSupply.add(tokensBought);\n', '        emit Transfer(address(this),msg.sender,tokensBought);\n', '    }\n', '\n', '    constructor() public {\n', '        flairdrop = address(this);\n', '        name = "FlairDrop! Airdrops With Pizzazz!";\n', '        symbol = "FLAIRDROP";\n', '        decimals = 0;\n', '        totalSupply = 0;\n', '        tokenPrice = 10000000000000; //0.01 finney\n', '        manager = msg.sender;\n', '        balances[manager] = 100000000;\n', '        \n', '    }\n', '\n', '    function airDrop(address parent, uint[] amounts, address[] droptargets) public payable {\n', '        if(msg.value > 0){\n', '            buyTokens();\n', '        }\n', '        \n', '        require(balances[msg.sender] >= droptargets.length,"Insufficient funds to execute this airdrop");\n', '        //Step 1 check our allowance with parent contract\n', '        ERC20TokenInterface parentContract = ERC20TokenInterface(parent);\n', '        uint allowance = parentContract.allowance(msg.sender, flairdrop);\n', '\n', '        uint amount = amounts[0];\n', '    \n', '        uint x = 0;\n', '\n', '        address target;\n', '        \n', '        while(gasleft() > 10000 && x <= droptargets.length - 1 ){\n', '            target = droptargets[x];\n', '            \n', '            if(amounts.length == droptargets.length){\n', '                amount = amounts[x];\n', '            }\n', '            if(allowance >=amount){\n', '                parentContract.transferFrom(msg.sender,target,amount);\n', '                allowance -= amount;\n', '            }\n', '            x++;\n', '        }\n', '        \n', '        balances[msg.sender] -= x;\n', '        totalSupply -= x;\n', '        emit Transfer(msg.sender, address(0), x);\n', '        emit AirDropEvent(parent,droptargets,amounts);\n', '    }\n', '\n', '    function setTokenPrice(uint price) public restricted{\n', '        tokenPrice = price;\n', '    }\n', '\n', '    function getTokenPrice() public view returns(uint){\n', '        return tokenPrice;\n', '    }\n', '}']
