['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title Photochain token vesting period contract\n', ' *\n', ' * @dev PhotochainVesting is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract PhotochainVesting {\n', '    // ERC20 token contract being held\n', '    ERC20 public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    constructor(ERC20 _token, address _beneficiary, uint256 _releaseTime) public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime > block.timestamp, "Release time must be in future");\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime < block.timestamp + 3 * 365 days, "Release time must not exceed 3 years");\n', '\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(block.timestamp >= releaseTime, "Release time must pass");\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        require(amount > 0, "Contract must hold any tokens");\n', '\n', '        require(token.transfer(beneficiary, amount), "Transfer must succeed");\n', '    }\n', '}']