['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/** Function to receive approval and execute in one call\n', '*/\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address _from, uint256 _tokens, address _token, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title HEdpAY Token Contract that can hold and transfer ERC-20 tokens\n', ' */\n', 'contract HedpayToken is  IERC20, Contactable {\n', '\n', '   using SafeMath for uint;\n', '\n', '   string public  name;\n', '   string public symbol;\n', '   uint8 public decimals;\n', '   uint public _totalSupply;\n', '\n', '   mapping(address => uint) balances;\n', '   mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /**\n', '    * @dev Constructor that sets the initial contract parameters\n', '    */\n', '    constructor() public {\n', '        name = "HEdpAY";\n', '        symbol = "Hdp.Ñ„";\n', '        decimals = 4;\n', '        _totalSupply = 10000000000000; //1 billion * 10000 (decimals)\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Return actual totalSupply value\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    /**\n', '    * @dev Get the token balance for account of token owner\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        require(_owner != address(0));\n', '\t\treturn balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the specified accounts approval value\n', '    * @param _owner address the tokens owner\n', '    * @param _spender address the tokens spender\n', '    * @return uint the specified accounts spending tokens amount\n', '    */\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint) {\n', '        require(_owner != address(0));\n', '        require(_spender != address(0));\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to transfer tokens\n', '    * @param _to address the tokens recepient\n', '    * @param _value uint amount of the tokens to be transferred\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to transfer tokens from the approved `msg.sender` account\n', '    * @param _from address the tokens owner\n', '    * @param _to address the tokens recepient\n', '    * @param _value uint amount of the tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '\t\trequire(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_value <= allowance(_from, msg.sender));\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\t\temit Approval(_from, msg.sender, allowance(_from, msg.sender));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to approve account to spend owned tokens\n', '    * @param _spender address the tokens spender\n', '    * @param _value uint amount of the tokens to be approved\n', '    */\n', '   function approve(address _spender, uint _value) public  returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@dev Function to approve for spender to transferFrom tokens\n', '    *@param _spender address of the spender\n', '    *@param _tokens the value of tokens for transferring\n', '    *@param _data is used for metadata\n', '    */\n', '    function approveAndCall(address _spender, uint _tokens, bytes _data) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _tokens, this, _data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@dev Function allows owner to transfer out\n', '    *any accidentally sent tokens\n', '    *@param _tokenAddress the address of tokens holder\n', '    *@param _tokens the amount of tokens for transferring\n', '    */\n', '    function transferAnyERC20Token(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\n', '        return IERC20(_tokenAddress).transfer(owner, _tokens);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/** Function to receive approval and execute in one call\n', '*/\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address _from, uint256 _tokens, address _token, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title HEdpAY Token Contract that can hold and transfer ERC-20 tokens\n', ' */\n', 'contract HedpayToken is  IERC20, Contactable {\n', '\n', '   using SafeMath for uint;\n', '\n', '   string public  name;\n', '   string public symbol;\n', '   uint8 public decimals;\n', '   uint public _totalSupply;\n', '\n', '   mapping(address => uint) balances;\n', '   mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /**\n', '    * @dev Constructor that sets the initial contract parameters\n', '    */\n', '    constructor() public {\n', '        name = "HEdpAY";\n', '        symbol = "Hdp.Ñ„";\n', '        decimals = 4;\n', '        _totalSupply = 10000000000000; //1 billion * 10000 (decimals)\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Return actual totalSupply value\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    /**\n', '    * @dev Get the token balance for account of token owner\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        require(_owner != address(0));\n', '\t\treturn balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the specified accounts approval value\n', '    * @param _owner address the tokens owner\n', '    * @param _spender address the tokens spender\n', '    * @return uint the specified accounts spending tokens amount\n', '    */\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint) {\n', '        require(_owner != address(0));\n', '        require(_spender != address(0));\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to transfer tokens\n', '    * @param _to address the tokens recepient\n', '    * @param _value uint amount of the tokens to be transferred\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to transfer tokens from the approved `msg.sender` account\n', '    * @param _from address the tokens owner\n', '    * @param _to address the tokens recepient\n', '    * @param _value uint amount of the tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '\t\trequire(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_value <= allowance(_from, msg.sender));\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\t\temit Approval(_from, msg.sender, allowance(_from, msg.sender));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to approve account to spend owned tokens\n', '    * @param _spender address the tokens spender\n', '    * @param _value uint amount of the tokens to be approved\n', '    */\n', '   function approve(address _spender, uint _value) public  returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@dev Function to approve for spender to transferFrom tokens\n', '    *@param _spender address of the spender\n', '    *@param _tokens the value of tokens for transferring\n', '    *@param _data is used for metadata\n', '    */\n', '    function approveAndCall(address _spender, uint _tokens, bytes _data) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _tokens, this, _data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@dev Function allows owner to transfer out\n', '    *any accidentally sent tokens\n', '    *@param _tokenAddress the address of tokens holder\n', '    *@param _tokens the amount of tokens for transferring\n', '    */\n', '    function transferAnyERC20Token(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\n', '        return IERC20(_tokenAddress).transfer(owner, _tokens);\n', '    }\n', '\n', '}']
