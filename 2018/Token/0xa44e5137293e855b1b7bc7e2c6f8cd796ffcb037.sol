['pragma solidity ^0.4.19;\n', '\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  function Owned(\n', '    )\n', '      public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(\n', '    address _owner)\n', '      onlyOwner public {\n', '        require(_owner != 0x0);\n', '\n', '        owner = _owner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _value,\n', '    address _token,\n', '    bytes _extraData)\n', '      public;\n', '}\n', '\n', 'contract ERC20Token {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  function ERC20Token(\n', '    string _tokenName,\n', '    string _tokenSymbol,\n', '    uint8 _decimals,\n', '    uint256 _totalSupply)\n', '      public {\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '  function _transfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value)\n', '      internal {\n', '        require(_to != 0x0);\n', '        require(_from != 0x0);\n', '        require(_from != _to);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value)\n', '      public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value)\n', '      public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        allowance[_from][msg.sender] -= _value;\n', '        \n', '        _transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value)\n', '      public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        \n', '        return true;\n', '    }\n', '\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _extraData)\n', '      public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '          \n', '          return true;\n', '        }\n', '    }\n', '\n', '  function burn(\n', '    uint256 _value)\n', '      public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '\n', '        Burn(msg.sender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '  function burnFrom(\n', '    address _from,\n', '    uint256 _value)\n', '      public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '\n', '        Burn(_from, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Sentinel is Owned, ERC20Token {\n', '  mapping (bytes32 => address) public services;\n', '\n', '  function Sentinel(\n', '    string _tokenName,\n', '    string _tokenSymbol,\n', '    uint8 _decimals,\n', '    uint256 _totalSupply)\n', '      ERC20Token(_tokenName, _tokenSymbol, _decimals, _totalSupply) public {\n', '    }\n', '\n', '  function deployService(\n', '    bytes32 _serviceName,\n', '    address _serviceAddress)\n', '      onlyOwner public {\n', '        services[_serviceName] = _serviceAddress;\n', '    }\n', '\n', '  function payService(\n', '    bytes32 _serviceName,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value)\n', '      public {\n', '        require(msg.sender != 0x0);\n', '        require(services[_serviceName] != 0x0);\n', '        require(msg.sender == services[_serviceName]);\n', '        require(_from != 0x0);\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '}']