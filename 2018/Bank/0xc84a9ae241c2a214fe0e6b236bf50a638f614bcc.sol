['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ParticipantToken is StandardToken, Pausable {\n', '  uint16 public totalParticipants = 0;\n', '  mapping(address => bool) internal participants;\n', '\n', '  modifier onlyParticipant() {\n', '    require(isParticipant(msg.sender));\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    addParticipant(owner);\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n', '    require(isParticipant(_to));\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n', '    require(isParticipant(_from));\n', '    require(isParticipant(_to));\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function isParticipant(address _address) public view returns (bool) {\n', '    return participants[_address] == true;\n', '  }\n', '  \n', '  function addParticipant(address _address) public onlyOwner whenNotPaused {\n', '    require(isParticipant(_address) == false);\n', '    \n', '    participants[_address] = true;\n', '    totalParticipants++;\n', '  }\n', '  \n', '  function removeParticipant(address _address) public onlyOwner whenNotPaused {\n', '    require(isParticipant(_address));\n', '    require(balances[_address] == 0);\n', '    \n', '    participants[_address] = false;\n', '    totalParticipants--;\n', '  }\n', '}\n', '\n', 'contract DistributionToken is ParticipantToken {\n', '  uint256 public tokenDistributionDuration = 30 days;\n', '  uint256 public currentDistributionAmount;\n', '  uint256 public tokenDistributionStartTime;\n', '  uint256 public tokenDistributionEndTime;\n', '  address public tokenDistributionPool;\n', '  \n', '  mapping(address => uint256) private unclaimedTokens;\n', '  mapping(address => uint256) private lastUnclaimedTokenUpdates;\n', '  \n', '  event TokenDistribution(address participant, uint256 value);\n', '  \n', '  constructor() public {\n', '    tokenDistributionPool = owner;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require((_to != tokenDistributionPool && msg.sender != tokenDistributionPool) || now >= tokenDistributionEndTime);\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require((_to != tokenDistributionPool && _from != tokenDistributionPool) || now >= tokenDistributionEndTime);\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function claimTokens() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(tokenDistributionEndTime > 0 && now < tokenDistributionEndTime);\n', '    require(msg.sender != tokenDistributionPool);\n', '    require(lastUnclaimedTokenUpdates[msg.sender] < tokenDistributionStartTime);\n', '    \n', '    unclaimedTokens[msg.sender] = calcClaimableTokens();\n', '    lastUnclaimedTokenUpdates[msg.sender] = now;\n', '    \n', '    uint256 value = unclaimedTokens[msg.sender];\n', '    unclaimedTokens[msg.sender] = 0;\n', '    \n', '    balances[tokenDistributionPool] = balances[tokenDistributionPool].sub(value);\n', '    balances[msg.sender] = balances[msg.sender].add(value);\n', '    emit TokenDistribution(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableTokens() public view onlyParticipant returns (uint256) {\n', '    if (lastUnclaimedTokenUpdates[msg.sender] >= tokenDistributionStartTime) {\n', '      return unclaimedTokens[msg.sender];\n', '    }\n', '    \n', '    return calcClaimableTokens();\n', '  }\n', '  \n', '  function setTokenDistributionPool(address _tokenDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n', '    require(tokenDistributionEndTime < now);\n', '    require(isParticipant(_tokenDistributionPool));\n', '    \n', '    tokenDistributionPool = _tokenDistributionPool;\n', '    return true;\n', '  }\n', '  \n', '  function startTokenDistribution() public onlyOwner whenNotPaused returns(bool) {\n', '    require(tokenDistributionEndTime < now);\n', '    require(balanceOf(tokenDistributionPool) > 0);\n', '    \n', '    currentDistributionAmount = balanceOf(tokenDistributionPool);\n', '    tokenDistributionEndTime = now.add(tokenDistributionDuration);\n', '    tokenDistributionStartTime = now;\n', '    return true;\n', '  }\n', '\n', '  function calcClaimableTokens() private view onlyParticipant returns(uint256) {\n', '    return (currentDistributionAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n', '  }\n', '}\n', '\n', 'contract DividendToken is DistributionToken {\n', '  uint256 public dividendDistributionDuration = 30 days;\n', '  uint256 public currentDividendAmount;\n', '  uint256 public dividendDistributionStartTime;\n', '  uint256 public dividendDistributionEndTime;\n', '  address public dividendDistributionPool;\n', '  \n', '  mapping(address => uint256) private unclaimedDividends;\n', '  mapping(address => uint256) private lastUnclaimedDividendUpdates;\n', '  mapping(address => uint256) private unclaimedOCDividends;\n', '  mapping(address => uint256) private lastUnclaimedOCDividendUpdates;\n', '  \n', '  event DividendDistribution(address participant, uint256 value);\n', '  event OCDividendClaim(address participant, uint256 value);\n', '  event OCDividendDistribution(address participant, uint256 value);\n', '  \n', '  constructor() public {\n', '    dividendDistributionPool = owner;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require((_to != dividendDistributionPool && msg.sender != dividendDistributionPool) || now >= dividendDistributionEndTime);\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require((_to != dividendDistributionPool && _from != dividendDistributionPool) || now >= dividendDistributionEndTime);\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function claimDividend() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(msg.sender != dividendDistributionPool);\n', '    \n', '    updateUnclaimedDividend();\n', '    \n', '    uint256 value = unclaimedDividends[msg.sender];\n', '    unclaimedDividends[msg.sender] = 0;\n', '    \n', '    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n', '    balances[msg.sender] = balances[msg.sender].add(value);\n', '    emit DividendDistribution(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableDividend() public view onlyParticipant returns (uint256) {\n', '    if (lastUnclaimedDividendUpdates[msg.sender] >= dividendDistributionStartTime) {\n', '      return unclaimedDividends[msg.sender];\n', '    }\n', '    \n', '    return calcDividend();\n', '  }\n', '  \n', '  function claimOCDividend() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(msg.sender != dividendDistributionPool);\n', '    \n', '    updateUnclaimedDividend();\n', '    \n', '    uint256 value = unclaimedDividends[msg.sender];\n', '    unclaimedDividends[msg.sender] = 0;\n', '    \n', '    unclaimedOCDividends[msg.sender] = value;\n', '    lastUnclaimedOCDividendUpdates[msg.sender] = now;\n', '    \n', '    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n', '    balances[owner] = balances[owner].add(value);\n', '    emit OCDividendClaim(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableOCDividend(address _address) public view onlyOwner returns (uint256) {\n', '    if (isParticipant(_address) == false) {\n', '      return 0;\n', '    }\n', '    \n', '    if (dividendDistributionEndTime <= 0 || now >= dividendDistributionEndTime) {\n', '      return 0;\n', '    }\n', '    \n', '    if (lastUnclaimedOCDividendUpdates[_address] < dividendDistributionStartTime) {\n', '      return 0;\n', '    }\n', '    \n', '    return unclaimedOCDividends[_address];\n', '  }\n', '  \n', '  function payoutOCDividend(address _address) public onlyOwner whenNotPaused returns (bool) {\n', '    require(isParticipant(_address));\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(unclaimedOCDividends[_address] > 0);\n', '    \n', '    uint256 value = unclaimedOCDividends[_address];\n', '    unclaimedOCDividends[_address] = 0;\n', '    emit OCDividendDistribution(_address, value);\n', '    return true;\n', '  }\n', '  \n', '  function setDividendDistributionPool(address _dividendDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime < now);\n', '    require(isParticipant(_dividendDistributionPool));\n', '    \n', '    dividendDistributionPool = _dividendDistributionPool;\n', '    return true;\n', '  }\n', '  \n', '  function startDividendDistribution() public onlyOwner whenNotPaused returns(bool) {\n', '    require(dividendDistributionEndTime < now);\n', '    require(balanceOf(dividendDistributionPool) > 0);\n', '    \n', '    currentDividendAmount = balanceOf(dividendDistributionPool);\n', '    dividendDistributionEndTime = now.add(dividendDistributionDuration);\n', '    dividendDistributionStartTime = now;\n', '    return true;\n', '  }\n', '\n', '  function calcDividend() private view onlyParticipant returns(uint256) {\n', '    return (currentDividendAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n', '  }\n', '  \n', '  function updateUnclaimedDividend() private whenNotPaused {\n', '    require(lastUnclaimedDividendUpdates[msg.sender] < dividendDistributionStartTime);\n', '    \n', '    unclaimedDividends[msg.sender] = calcDividend();\n', '    lastUnclaimedDividendUpdates[msg.sender] = now;\n', '  }\n', '}\n', '\n', 'contract ThisToken is DividendToken {\n', '  string public name = "ThisToken";\n', '  string public symbol = "THIS";\n', '  uint8 public decimals = 18;\n', '\n', '  function setTotalSupply(uint256 _totalSupply) public onlyOwner whenNotPaused {\n', '    require(_totalSupply != totalSupply_);\n', '\n', '    uint256 diff;\n', '\n', '    if (_totalSupply < totalSupply_) {\n', '      diff = totalSupply_.sub(_totalSupply);\n', '      balances[owner] = balances[owner].sub(diff);\n', '    } else {\n', '      diff = _totalSupply.sub(totalSupply_);\n', '      balances[owner] = balances[owner].add(diff);\n', '    }\n', '\n', '    totalSupply_ = _totalSupply;\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ParticipantToken is StandardToken, Pausable {\n', '  uint16 public totalParticipants = 0;\n', '  mapping(address => bool) internal participants;\n', '\n', '  modifier onlyParticipant() {\n', '    require(isParticipant(msg.sender));\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    addParticipant(owner);\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n', '    require(isParticipant(_to));\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyParticipant whenNotPaused returns (bool) {\n', '    require(isParticipant(_from));\n', '    require(isParticipant(_to));\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function isParticipant(address _address) public view returns (bool) {\n', '    return participants[_address] == true;\n', '  }\n', '  \n', '  function addParticipant(address _address) public onlyOwner whenNotPaused {\n', '    require(isParticipant(_address) == false);\n', '    \n', '    participants[_address] = true;\n', '    totalParticipants++;\n', '  }\n', '  \n', '  function removeParticipant(address _address) public onlyOwner whenNotPaused {\n', '    require(isParticipant(_address));\n', '    require(balances[_address] == 0);\n', '    \n', '    participants[_address] = false;\n', '    totalParticipants--;\n', '  }\n', '}\n', '\n', 'contract DistributionToken is ParticipantToken {\n', '  uint256 public tokenDistributionDuration = 30 days;\n', '  uint256 public currentDistributionAmount;\n', '  uint256 public tokenDistributionStartTime;\n', '  uint256 public tokenDistributionEndTime;\n', '  address public tokenDistributionPool;\n', '  \n', '  mapping(address => uint256) private unclaimedTokens;\n', '  mapping(address => uint256) private lastUnclaimedTokenUpdates;\n', '  \n', '  event TokenDistribution(address participant, uint256 value);\n', '  \n', '  constructor() public {\n', '    tokenDistributionPool = owner;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require((_to != tokenDistributionPool && msg.sender != tokenDistributionPool) || now >= tokenDistributionEndTime);\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require((_to != tokenDistributionPool && _from != tokenDistributionPool) || now >= tokenDistributionEndTime);\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function claimTokens() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(tokenDistributionEndTime > 0 && now < tokenDistributionEndTime);\n', '    require(msg.sender != tokenDistributionPool);\n', '    require(lastUnclaimedTokenUpdates[msg.sender] < tokenDistributionStartTime);\n', '    \n', '    unclaimedTokens[msg.sender] = calcClaimableTokens();\n', '    lastUnclaimedTokenUpdates[msg.sender] = now;\n', '    \n', '    uint256 value = unclaimedTokens[msg.sender];\n', '    unclaimedTokens[msg.sender] = 0;\n', '    \n', '    balances[tokenDistributionPool] = balances[tokenDistributionPool].sub(value);\n', '    balances[msg.sender] = balances[msg.sender].add(value);\n', '    emit TokenDistribution(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableTokens() public view onlyParticipant returns (uint256) {\n', '    if (lastUnclaimedTokenUpdates[msg.sender] >= tokenDistributionStartTime) {\n', '      return unclaimedTokens[msg.sender];\n', '    }\n', '    \n', '    return calcClaimableTokens();\n', '  }\n', '  \n', '  function setTokenDistributionPool(address _tokenDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n', '    require(tokenDistributionEndTime < now);\n', '    require(isParticipant(_tokenDistributionPool));\n', '    \n', '    tokenDistributionPool = _tokenDistributionPool;\n', '    return true;\n', '  }\n', '  \n', '  function startTokenDistribution() public onlyOwner whenNotPaused returns(bool) {\n', '    require(tokenDistributionEndTime < now);\n', '    require(balanceOf(tokenDistributionPool) > 0);\n', '    \n', '    currentDistributionAmount = balanceOf(tokenDistributionPool);\n', '    tokenDistributionEndTime = now.add(tokenDistributionDuration);\n', '    tokenDistributionStartTime = now;\n', '    return true;\n', '  }\n', '\n', '  function calcClaimableTokens() private view onlyParticipant returns(uint256) {\n', '    return (currentDistributionAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n', '  }\n', '}\n', '\n', 'contract DividendToken is DistributionToken {\n', '  uint256 public dividendDistributionDuration = 30 days;\n', '  uint256 public currentDividendAmount;\n', '  uint256 public dividendDistributionStartTime;\n', '  uint256 public dividendDistributionEndTime;\n', '  address public dividendDistributionPool;\n', '  \n', '  mapping(address => uint256) private unclaimedDividends;\n', '  mapping(address => uint256) private lastUnclaimedDividendUpdates;\n', '  mapping(address => uint256) private unclaimedOCDividends;\n', '  mapping(address => uint256) private lastUnclaimedOCDividendUpdates;\n', '  \n', '  event DividendDistribution(address participant, uint256 value);\n', '  event OCDividendClaim(address participant, uint256 value);\n', '  event OCDividendDistribution(address participant, uint256 value);\n', '  \n', '  constructor() public {\n', '    dividendDistributionPool = owner;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require((_to != dividendDistributionPool && msg.sender != dividendDistributionPool) || now >= dividendDistributionEndTime);\n', '    \n', '    super.transfer(_to, _value);\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require((_to != dividendDistributionPool && _from != dividendDistributionPool) || now >= dividendDistributionEndTime);\n', '    \n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function claimDividend() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(msg.sender != dividendDistributionPool);\n', '    \n', '    updateUnclaimedDividend();\n', '    \n', '    uint256 value = unclaimedDividends[msg.sender];\n', '    unclaimedDividends[msg.sender] = 0;\n', '    \n', '    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n', '    balances[msg.sender] = balances[msg.sender].add(value);\n', '    emit DividendDistribution(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableDividend() public view onlyParticipant returns (uint256) {\n', '    if (lastUnclaimedDividendUpdates[msg.sender] >= dividendDistributionStartTime) {\n', '      return unclaimedDividends[msg.sender];\n', '    }\n', '    \n', '    return calcDividend();\n', '  }\n', '  \n', '  function claimOCDividend() public onlyParticipant whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(msg.sender != dividendDistributionPool);\n', '    \n', '    updateUnclaimedDividend();\n', '    \n', '    uint256 value = unclaimedDividends[msg.sender];\n', '    unclaimedDividends[msg.sender] = 0;\n', '    \n', '    unclaimedOCDividends[msg.sender] = value;\n', '    lastUnclaimedOCDividendUpdates[msg.sender] = now;\n', '    \n', '    balances[dividendDistributionPool] = balances[dividendDistributionPool].sub(value);\n', '    balances[owner] = balances[owner].add(value);\n', '    emit OCDividendClaim(msg.sender, value);\n', '    return true;\n', '  }\n', '  \n', '  function claimableOCDividend(address _address) public view onlyOwner returns (uint256) {\n', '    if (isParticipant(_address) == false) {\n', '      return 0;\n', '    }\n', '    \n', '    if (dividendDistributionEndTime <= 0 || now >= dividendDistributionEndTime) {\n', '      return 0;\n', '    }\n', '    \n', '    if (lastUnclaimedOCDividendUpdates[_address] < dividendDistributionStartTime) {\n', '      return 0;\n', '    }\n', '    \n', '    return unclaimedOCDividends[_address];\n', '  }\n', '  \n', '  function payoutOCDividend(address _address) public onlyOwner whenNotPaused returns (bool) {\n', '    require(isParticipant(_address));\n', '    require(dividendDistributionEndTime > 0 && now < dividendDistributionEndTime);\n', '    require(unclaimedOCDividends[_address] > 0);\n', '    \n', '    uint256 value = unclaimedOCDividends[_address];\n', '    unclaimedOCDividends[_address] = 0;\n', '    emit OCDividendDistribution(_address, value);\n', '    return true;\n', '  }\n', '  \n', '  function setDividendDistributionPool(address _dividendDistributionPool) public onlyOwner whenNotPaused returns (bool) {\n', '    require(dividendDistributionEndTime < now);\n', '    require(isParticipant(_dividendDistributionPool));\n', '    \n', '    dividendDistributionPool = _dividendDistributionPool;\n', '    return true;\n', '  }\n', '  \n', '  function startDividendDistribution() public onlyOwner whenNotPaused returns(bool) {\n', '    require(dividendDistributionEndTime < now);\n', '    require(balanceOf(dividendDistributionPool) > 0);\n', '    \n', '    currentDividendAmount = balanceOf(dividendDistributionPool);\n', '    dividendDistributionEndTime = now.add(dividendDistributionDuration);\n', '    dividendDistributionStartTime = now;\n', '    return true;\n', '  }\n', '\n', '  function calcDividend() private view onlyParticipant returns(uint256) {\n', '    return (currentDividendAmount.mul(balanceOf(msg.sender))).div(totalSupply_);\n', '  }\n', '  \n', '  function updateUnclaimedDividend() private whenNotPaused {\n', '    require(lastUnclaimedDividendUpdates[msg.sender] < dividendDistributionStartTime);\n', '    \n', '    unclaimedDividends[msg.sender] = calcDividend();\n', '    lastUnclaimedDividendUpdates[msg.sender] = now;\n', '  }\n', '}\n', '\n', 'contract ThisToken is DividendToken {\n', '  string public name = "ThisToken";\n', '  string public symbol = "THIS";\n', '  uint8 public decimals = 18;\n', '\n', '  function setTotalSupply(uint256 _totalSupply) public onlyOwner whenNotPaused {\n', '    require(_totalSupply != totalSupply_);\n', '\n', '    uint256 diff;\n', '\n', '    if (_totalSupply < totalSupply_) {\n', '      diff = totalSupply_.sub(_totalSupply);\n', '      balances[owner] = balances[owner].sub(diff);\n', '    } else {\n', '      diff = _totalSupply.sub(totalSupply_);\n', '      balances[owner] = balances[owner].add(diff);\n', '    }\n', '\n', '    totalSupply_ = _totalSupply;\n', '  }\n', '}']
