['pragma solidity ^0.4.22;\n', '\n', '// GetPaid Token Project Updated\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract GetPaidToken is ERC20 {\n', '\n', '  \n', '    using SafeMath for uint256;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public blacklist;\n', '\n', '    string public constant name = "GetPaid";\n', '    string public constant symbol = "GPaid";\n', '    uint public constant decimals = 18;\n', '    \n', '    uint256 public totalSupply = 30000000000e18;\n', '    \n', '    uint256 public totalDistributed = 0;\n', '\n', '    uint256 public totalValue = 0;\n', '    \n', '    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n', '    \n', '    uint256 public value = 200000e18;\n', '\n', '    uint256 public tokensPerEth = 20000000e18;\n', '\n', '    uint256 public constant minContribution = 1 ether / 100; // 0.01 Eth\n', '\n', '    uint256 public constant maxTotalValue = 15000000000e18;\n', '\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Distr(address indexed to, uint256 amount);\n', '    event Distr0(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event ZeroEthFinished();\n', '\n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '\n', '    event TokensPerEthUpdated(uint _tokensPerEth);\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    bool public distributionFinished = false;\n', '\n', '    bool public zeroDistrFinished = false;\n', '    \n', '\n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function finishZeroDistribution() onlyOwner canDistr public returns (bool) {\n', '        zeroDistrFinished = true;\n', '        emit ZeroEthFinished();\n', '        return true;\n', '    }\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '\n', '    function distr0(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        require( totalValue < maxTotalValue );\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalValue = totalValue.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '        \n', '        if (totalValue >= maxTotalValue) {\n', '            zeroDistrFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '\n', '    function () external payable {\n', '        getTokens();\n', '     }\n', '\n', '    function getTokens() payable canDistr public {\n', '        \n', '        address investor = msg.sender;\n', '        uint256 toGive = value;\n', '        uint256 tokens = 0;\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;\n', '        uint256 bonusFourth = 0;\n', '        uint256 bonusHalf = 0;\n', '        uint256 bonusTwentyFive = 0;\n', '        uint256 bonusFifty = 0;\n', '        uint256 bonusOneHundred = 0;\n', '        bonusFourth = tokens / 4;\n', '        bonusHalf = tokens / 2;\n', '        bonusTwentyFive = tokens.add(bonusFourth);\n', '        bonusFifty = tokens.add(bonusHalf);\n', '        bonusOneHundred = tokens.add(tokens);\n', '        \n', '\n', '        if (msg.value == 0 ether) {\n', '            require( blacklist[investor] == false );\n', '            require( totalValue <= maxTotalValue );\n', '            distr0(investor, toGive);\n', '            blacklist[investor] = true;\n', '\n', '            if (totalValue >= maxTotalValue) {\n', '                zeroDistrFinished = true;\n', '            }\n', '        } \n', '        \n', '        if (msg.value > 0 ether && msg.value < 0.1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, tokens);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 0.1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusTwentyFive);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 0.1 ether && msg.value < 0.5 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusTwentyFive);\n', '    \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 0.5 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusFifty);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 0.5 ether && msg.value < 1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusFifty);\n', '    \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 1 ether) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusOneHundred);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 1 ether) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusOneHundred);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint _amount) internal {\n', '\n', '        require( _amount > 0 );      \n', '\n', '        require( totalDistributed < totalSupply );\n', '        \n', '        balances[_participant] = balances[_participant].add(_amount);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '        //log\n', '        emit Airdrop(_participant, _amount, balances[_participant]);\n', '        emit Transfer(address(0), _participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n', '        doAirdrop(_participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n', '    }\n', '\n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '// GetPaid Token Project Updated\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract GetPaidToken is ERC20 {\n', '\n', '  \n', '    using SafeMath for uint256;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public blacklist;\n', '\n', '    string public constant name = "GetPaid";\n', '    string public constant symbol = "GPaid";\n', '    uint public constant decimals = 18;\n', '    \n', '    uint256 public totalSupply = 30000000000e18;\n', '    \n', '    uint256 public totalDistributed = 0;\n', '\n', '    uint256 public totalValue = 0;\n', '    \n', '    uint256 public totalRemaining = totalSupply.sub(totalDistributed);\n', '    \n', '    uint256 public value = 200000e18;\n', '\n', '    uint256 public tokensPerEth = 20000000e18;\n', '\n', '    uint256 public constant minContribution = 1 ether / 100; // 0.01 Eth\n', '\n', '    uint256 public constant maxTotalValue = 15000000000e18;\n', '\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Distr(address indexed to, uint256 amount);\n', '    event Distr0(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event ZeroEthFinished();\n', '\n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '\n', '    event TokensPerEthUpdated(uint _tokensPerEth);\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    bool public distributionFinished = false;\n', '\n', '    bool public zeroDistrFinished = false;\n', '    \n', '\n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function finishZeroDistribution() onlyOwner canDistr public returns (bool) {\n', '        zeroDistrFinished = true;\n', '        emit ZeroEthFinished();\n', '        return true;\n', '    }\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '\n', '    function distr0(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        require( totalValue < maxTotalValue );\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalValue = totalValue.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '        \n', '        if (totalValue >= maxTotalValue) {\n', '            zeroDistrFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '\n', '    function () external payable {\n', '        getTokens();\n', '     }\n', '\n', '    function getTokens() payable canDistr public {\n', '        \n', '        address investor = msg.sender;\n', '        uint256 toGive = value;\n', '        uint256 tokens = 0;\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;\n', '        uint256 bonusFourth = 0;\n', '        uint256 bonusHalf = 0;\n', '        uint256 bonusTwentyFive = 0;\n', '        uint256 bonusFifty = 0;\n', '        uint256 bonusOneHundred = 0;\n', '        bonusFourth = tokens / 4;\n', '        bonusHalf = tokens / 2;\n', '        bonusTwentyFive = tokens.add(bonusFourth);\n', '        bonusFifty = tokens.add(bonusHalf);\n', '        bonusOneHundred = tokens.add(tokens);\n', '        \n', '\n', '        if (msg.value == 0 ether) {\n', '            require( blacklist[investor] == false );\n', '            require( totalValue <= maxTotalValue );\n', '            distr0(investor, toGive);\n', '            blacklist[investor] = true;\n', '\n', '            if (totalValue >= maxTotalValue) {\n', '                zeroDistrFinished = true;\n', '            }\n', '        } \n', '        \n', '        if (msg.value > 0 ether && msg.value < 0.1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, tokens);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 0.1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusTwentyFive);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 0.1 ether && msg.value < 0.5 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusTwentyFive);\n', '    \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 0.5 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusFifty);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 0.5 ether && msg.value < 1 ether ) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusFifty);\n', '    \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value == 1 ether) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusOneHundred);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '\n', '        if (msg.value > 1 ether) {\n', '            blacklist[investor] = false;\n', '            require( msg.value >= minContribution );\n', '            require( msg.value > 0 );\n', '            distr(investor, bonusOneHundred);\n', '\n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint _amount) internal {\n', '\n', '        require( _amount > 0 );      \n', '\n', '        require( totalDistributed < totalSupply );\n', '        \n', '        balances[_participant] = balances[_participant].add(_amount);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '        //log\n', '        emit Airdrop(_participant, _amount, balances[_participant]);\n', '        emit Transfer(address(0), _participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n', '        doAirdrop(_participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n', '    }\n', '\n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']
