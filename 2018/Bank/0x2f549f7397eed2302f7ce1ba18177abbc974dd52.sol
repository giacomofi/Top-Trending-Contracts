['pragma solidity 0.4.20;\n', '\n', '/*==============================================================\n', '=                     http://poharj.com/                       =\n', '=                  https://discord.gg/Q2NQec                   =\n', '= http://powc.io/?c=0x2f549f7397eed2302f7ce1ba18177abbc974dd52 =\n', '================================================================\n', '\n', '\n', '/*\n', '  ___ ___    _____ __________      ____.\n', ' /   |   \\  /  _  \\\\______   \\    |    |\n', '/    ~    \\/  /_\\  \\|       _/    |    |\n', '\\    Y    /    |    \\    |   \\/\\__|    |\n', ' \\___|_  /\\____|__  /____|_  /\\________|\n', '       \\/         \\/       \\/           \n', '\n', '\n', '* -> Features!\n', '* All the features from the original Po contract, with dividend fee 33%:\n', '* [x] Highly Secure: Hundreds of thousands of investers have invested in the original contract.\n', '* [X] Purchase/Sell: You can perform partial sell orders. If you succumb to weak hands, you don&#39;t have to dump all of your bags.\n', '* [x] Purchase/Sell: You can transfer tokens between wallets. Trading is possible from within the contract.\n', '* [x] Masternodes: The implementation of Ethereum Staking in the world.\n', '* [x] Masternodes: Holding 50 PoHarj Tokens allow you to generate a Masternode link, Masternode links are used as unique entry points to the contract.\n', '* [x] Masternodes: All players who enter the contract through your Masternode have 30% of their 33% dividends fee rerouted from the master-node, to the node-master.\n', '*\n', '*/\n', '\n', 'contract PoHarj {\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    string public name = "The Real HarjCoin";\n', '    string public symbol = "PoHarj";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 3; // 33% dividends\n', '    uint constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint constant internal magnitude = 2**64;\n', '\n', '    // proof of stake (defaults at 50 tokens)\n', '    uint public stakingRequirement = 50e18;\n', '\n', '\n', '   /*===============================\n', '    =            STORAGE           =\n', '    ==============================*/\n', '    \n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint) internal tokenBalanceLedger_;\n', '    mapping(address => uint) internal referralBalance_;\n', '    mapping(address => int) internal payoutsTo_;\n', '    uint internal tokenSupply_ = 0;\n', '    uint internal profitPerShare_;\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    \n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint incomingEthereum,\n', '        uint tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint tokensBurned,\n', '        uint ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint ethereumReinvested,\n', '        uint tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint tokens\n', '    );\n', '\n', '\n', '    /*=======================================\n', '    =            CONSTRUCTOR                =\n', '    =======================================*/\n', '    \n', '    function PoHarj() public payable {\n', '        // Owner can only pre-mine once (0.999ETH)\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '\n', '\n', '    /*=======================================\n', '    =           PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint) {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function to handle ethereum that was send straight to the contract\n', '     *  Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function() payable public {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '\n', '    /// @dev Converts all of caller&#39;s dividends to tokens.\n', '    function reinvest() onlyStronghands public {\n', '        // fetch dividends\n', '        uint _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() public {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() onlyStronghands public {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint _amountOfTokens) onlyBagholders public {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint _tokens = _amountOfTokens;\n', '        uint _ethereum = tokensToEthereum_(_tokens);\n', '        uint _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int _updatedPayouts = (int) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', '     *  Remember, there&#39;s a 20% fee here as well.\n', '     */\n', '    function transfer(address _toAddress, uint _amountOfTokens) onlyBagholders public returns (bool) {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (myDividends(true) > 0) {\n', '            withdraw();\n', '        }\n', '\n', '        // liquify 20% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint) {\n', '        return this.balance;\n', '    }\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint) {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress) public view returns (uint) {\n', '        return (uint) ((int)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function sellPrice() public view returns (uint) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint _ethereum = tokensToEthereum_(1e18);\n', '            uint _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function buyPrice() public view returns (uint) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint _ethereum = tokensToEthereum_(1e18);\n', '            uint _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint _ethereumToSpend) public view returns (uint) {\n', '        uint _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint _tokensToSell) public view returns (uint) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint _incomingEthereum, address _referredBy) internal returns (uint) {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint _fee = _dividends * magnitude;\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if (\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if (tokenSupply_ > 0) {\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int _updatedPayouts = (int) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint _ethereum) internal view returns (uint) {\n', '        uint _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', '     *  It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint _tokens) internal view returns (uint) {\n', '        uint tokens_ = (_tokens + 1e18);\n', '        uint _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    /// @dev This is where all your gas goes.\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '    /// @dev Only people with tokens\n', '    modifier onlyBagholders {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only people with profits\n', '    modifier onlyStronghands {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity 0.4.20;\n', '\n', '/*==============================================================\n', '=                     http://poharj.com/                       =\n', '=                  https://discord.gg/Q2NQec                   =\n', '= http://powc.io/?c=0x2f549f7397eed2302f7ce1ba18177abbc974dd52 =\n', '================================================================\n', '\n', '\n', '/*\n', '  ___ ___    _____ __________      ____.\n', ' /   |   \\  /  _  \\\\______   \\    |    |\n', '/    ~    \\/  /_\\  \\|       _/    |    |\n', '\\    Y    /    |    \\    |   \\/\\__|    |\n', ' \\___|_  /\\____|__  /____|_  /\\________|\n', '       \\/         \\/       \\/           \n', '\n', '\n', '* -> Features!\n', '* All the features from the original Po contract, with dividend fee 33%:\n', '* [x] Highly Secure: Hundreds of thousands of investers have invested in the original contract.\n', "* [X] Purchase/Sell: You can perform partial sell orders. If you succumb to weak hands, you don't have to dump all of your bags.\n", '* [x] Purchase/Sell: You can transfer tokens between wallets. Trading is possible from within the contract.\n', '* [x] Masternodes: The implementation of Ethereum Staking in the world.\n', '* [x] Masternodes: Holding 50 PoHarj Tokens allow you to generate a Masternode link, Masternode links are used as unique entry points to the contract.\n', '* [x] Masternodes: All players who enter the contract through your Masternode have 30% of their 33% dividends fee rerouted from the master-node, to the node-master.\n', '*\n', '*/\n', '\n', 'contract PoHarj {\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    string public name = "The Real HarjCoin";\n', '    string public symbol = "PoHarj";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 3; // 33% dividends\n', '    uint constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint constant internal magnitude = 2**64;\n', '\n', '    // proof of stake (defaults at 50 tokens)\n', '    uint public stakingRequirement = 50e18;\n', '\n', '\n', '   /*===============================\n', '    =            STORAGE           =\n', '    ==============================*/\n', '    \n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint) internal tokenBalanceLedger_;\n', '    mapping(address => uint) internal referralBalance_;\n', '    mapping(address => int) internal payoutsTo_;\n', '    uint internal tokenSupply_ = 0;\n', '    uint internal profitPerShare_;\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    \n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint incomingEthereum,\n', '        uint tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint tokensBurned,\n', '        uint ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint ethereumReinvested,\n', '        uint tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint tokens\n', '    );\n', '\n', '\n', '    /*=======================================\n', '    =            CONSTRUCTOR                =\n', '    =======================================*/\n', '    \n', '    function PoHarj() public payable {\n', '        // Owner can only pre-mine once (0.999ETH)\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '\n', '\n', '    /*=======================================\n', '    =           PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint) {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function to handle ethereum that was send straight to the contract\n', '     *  Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function() payable public {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '\n', "    /// @dev Converts all of caller's dividends to tokens.\n", '    function reinvest() onlyStronghands public {\n', '        // fetch dividends\n', '        uint _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() public {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() onlyStronghands public {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint _amountOfTokens) onlyBagholders public {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint _tokens = _amountOfTokens;\n', '        uint _ethereum = tokensToEthereum_(_tokens);\n', '        uint _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int _updatedPayouts = (int) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', "     *  Remember, there's a 20% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint _amountOfTokens) onlyBagholders public returns (bool) {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (myDividends(true) > 0) {\n', '            withdraw();\n', '        }\n', '\n', '        // liquify 20% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint) {\n', '        return this.balance;\n', '    }\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint) {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress) public view returns (uint) {\n', '        return (uint) ((int)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function sellPrice() public view returns (uint) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint _ethereum = tokensToEthereum_(1e18);\n', '            uint _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function buyPrice() public view returns (uint) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint _ethereum = tokensToEthereum_(1e18);\n', '            uint _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint _ethereumToSpend) public view returns (uint) {\n', '        uint _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint _tokensToSell) public view returns (uint) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint _incomingEthereum, address _referredBy) internal returns (uint) {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint _fee = _dividends * magnitude;\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if (\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', "        // we can't give people infinite ethereum\n", '        if (tokenSupply_ > 0) {\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int _updatedPayouts = (int) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint _ethereum) internal view returns (uint) {\n', '        uint _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', "     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint _tokens) internal view returns (uint) {\n', '        uint tokens_ = (_tokens + 1e18);\n', '        uint _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    /// @dev This is where all your gas goes.\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '    /// @dev Only people with tokens\n', '    modifier onlyBagholders {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only people with profits\n', '    modifier onlyStronghands {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
