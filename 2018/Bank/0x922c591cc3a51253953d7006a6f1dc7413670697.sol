['pragma solidity ^0.4.24;\n', 'contract Token {\n', '    function balanceOf(address guy) public view returns (uint);\n', '    function transfer(address dst, uint wad) public returns (bool);\n', '}\n', '\n', 'contract RecuringInternetPayer{\n', '    address zac  = 0x1F4E7Db8514Ec4E99467a8d2ee3a63094a904e7A;\n', '    address josh = 0x650a7762FdB32BF64849345209DeaA8F9574cBC7;\n', '    Token dai = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359); //DAI token address\n', '    uint constant perSecondDaiParticlePayout = 28935185185185 ; // $75 x 10^18 / (60*60*24*30)\n', '    uint amountPaid;\n', '    uint createdAt;\n', '    \n', '    constructor() public { createdAt = now; }\n', '\n', '    modifier onlyZacOrJosh(){ require(msg.sender == zac || msg.sender == josh); _; }\n', '    \n', '    function payJosh() public{\n', '        uint totalPayout = perSecondDaiParticlePayout * (now - createdAt);\n', '        dai.transfer(josh, totalPayout - amountPaid);\n', '        amountPaid = totalPayout;\n', '    }\n', '    function withdraw() public onlyZacOrJosh{\n', '        payJosh();\n', '        dai.transfer(zac, dai.balanceOf(this));\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', 'contract Token {\n', '    function balanceOf(address guy) public view returns (uint);\n', '    function transfer(address dst, uint wad) public returns (bool);\n', '}\n', '\n', 'contract RecuringInternetPayer{\n', '    address zac  = 0x1F4E7Db8514Ec4E99467a8d2ee3a63094a904e7A;\n', '    address josh = 0x650a7762FdB32BF64849345209DeaA8F9574cBC7;\n', '    Token dai = Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359); //DAI token address\n', '    uint constant perSecondDaiParticlePayout = 28935185185185 ; // $75 x 10^18 / (60*60*24*30)\n', '    uint amountPaid;\n', '    uint createdAt;\n', '    \n', '    constructor() public { createdAt = now; }\n', '\n', '    modifier onlyZacOrJosh(){ require(msg.sender == zac || msg.sender == josh); _; }\n', '    \n', '    function payJosh() public{\n', '        uint totalPayout = perSecondDaiParticlePayout * (now - createdAt);\n', '        dai.transfer(josh, totalPayout - amountPaid);\n', '        amountPaid = totalPayout;\n', '    }\n', '    function withdraw() public onlyZacOrJosh{\n', '        payJosh();\n', '        dai.transfer(zac, dai.balanceOf(this));\n', '    }\n', '}']
