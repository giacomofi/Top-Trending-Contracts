['pragma solidity ^0.4.25;\n', '\n', '/*\n', '* http://ethedge.co\n', '* https://gosutech.github.io (backup)\n', '*\n', '* Decentralized token exchange concept\n', '* A sustainable business model (non-zero-sum game)\n', '*\n', '* [✓] 5% Withdraw fee\n', '* [✓] 5+9+1%=15% Deposit fee\n', '*       9% Trade capital fee. Use to do profit on different crypto assets and pay dividends back, if success.\n', '*       5% To token holders\n', '*       1% devs costs\n', '* [✓] 1% Token transfer.\n', '* [✓] 15% Referal link. Lifetime.\n', '*\n', '* ---How to use:\n', '*  1. Send from ETH wallet to the smart contract address any amount ETH.\n', '*  2.   1) Reinvest your profit by sending 0.00000001 ETH transaction to contract address\n', '*       2) Claim your profit by sending 0.00000002 ETH transaction to contract address\n', '*       3) Full exit (sell all and withdraw) by sending 0.00000003 ETH transaction to contract address\n', '*  3. If you have innactive period more than 1 year - your account can be burned. Funds divided for token holders.\n', '*  4. We use trade capital to invest to different crypto assets\n', '*  5. Top big token holders can request audit.\n', '*/\n', '\n', '    interface DevsInterface {\n', '    function payDividends(string _sourceDesc) public payable;\n', '}\n', '\n', '\n', 'contract ETHedgeToken {\n', '\n', '    modifier onlyBagholders {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStronghands {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', '    //added section\n', '    //Modifier that only allows owner of the bag to Smart Contract AKA Good to use the function\n', '    modifier onlyOwner{\n', '        require(msg.sender == owner_, "Only owner can do this!");\n', '        _;\n', '    }\n', '    \n', '    event onPayDividends(\n', '        uint256 incomingDividends,\n', '        string sourceDescription,\n', '        address indexed customerAddress,\n', '        uint timestamp\n', ');\n', '\n', '    event onBurn(\n', '        uint256 DividentsFromNulled,\n', '        address indexed customerAddress,\n', '        address indexed senderAddress,\n', '        uint timestamp\n', ');\n', '\n', '    event onNewRefferal(\n', '        address indexed userAddress,\n', '        address indexed refferedByAddress,\n', '        uint timestamp\n', ');\n', '\n', '    event onTakeCapital(\n', '        address indexed capitalAddress,\n', '        address indexed devAddress,\n', '        uint256 capitalEth,\n', '        uint256 devEth,\n', '        address indexed senderAddress,\n', '        uint timestamp\n', ');\n', '\n', '    event Approval(\n', '        address indexed tokenOwner,\n', '        address indexed spender,\n', '        uint tokens\n', ');\n', '\n', '//end added section\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint timestamp,\n', '        uint256 price\n', ');\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned,\n', '        uint timestamp,\n', '        uint256 price\n', ');\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', ');\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', ');\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', ');\n', '\n', '    string public name = "ETH hedge token";\n', '    string public symbol = "EHT";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal entryFee_ = 15;//full costs\n', '    uint8 constant internal transferFee_ = 1;\n', '    uint8 constant internal exitFee_ = 5;\n', '    uint8 constant internal refferalFee_ = 15;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2 ** 64;\n', '    uint256 public stakingRequirement = 50e18;\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => address) internal refferals_;\n', '    // Owner of account approves the transfer of an amount to another account. ERC20 needed.\n', '    mapping(address => mapping (address => uint256)) allowed_;\n', '    uint256 internal tokenSupply_;\n', '    uint256 internal profitPerShare_;\n', '    //added section\n', '    address private owner_=msg.sender;\n', '    mapping(address => uint256) internal lastupdate_;\n', '    //time through your account cant be nulled\n', '    uint private constant timePassive_ = 365 days;\n', '    //uint private constant timePassive_ = 1 minutes; // for test\n', '    //Percents go to exchange bots\n', '    uint8 constant internal entryFeeCapital_ = 9;\n', '    //Admins reward percent\n', '    uint8 constant internal entryFeeReward_ = 1;\n', '    address public capital_=msg.sender;\n', '    address public devReward_=0xafC1D46163308c81BFb12d305CCb7deAbb39E1fE;//devs contract address\n', '    uint256 public capitalAmount_;\n', '    uint256 public AdminRewardAmount_;\n', '    \n', '    \n', '    //This function transfer ownership of contract from one entity to another\n', '    function transferOwnership(address _newOwner) public onlyOwner{\n', '        require(_newOwner != address(0));\n', '        owner_ = _newOwner;\n', '    }\n', '    \n', '    //This function change addresses for exchange capital and admin reward\n', '    function changeOuts(address _newCapital) public onlyOwner{\n', '        //check if not empty\n', '        require(_newCapital != address(0));\n', '        capital_ = _newCapital;\n', '    }\n', '\n', '    //Pay dividends\n', '    function payDividends(string _sourceDesc) public payable {\n', '        payDivsValue(msg.value,_sourceDesc);\n', '    }\n', '\n', '    //Pay dividends internal with value\n', '    function payDivsValue(uint256 _amountOfDivs,string _sourceDesc) internal {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = _amountOfDivs;\n', '        if (tokenSupply_ > 0) {\n', '            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n', '        }\n', '        emit onPayDividends(_dividends,_sourceDesc,_customerAddress,now);\n', '    }\n', '\n', '    //If account dont have buy, sell, reinvest, transfer(from), trasfer(to, if more stakingRequirement) action for 1 year - it can be burned. All ETH go to dividends\n', '    function burn(address _checkForInactive) public {\n', '        address _customerAddress = _checkForInactive;\n', '        require(lastupdate_[_customerAddress]!=0 && now >= SafeMath.add(lastupdate_[_customerAddress],timePassive_), "This account cant be nulled!");\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '        \n', '        uint256 _dividends = dividendsOf(_customerAddress);\n', '        _dividends += referralBalance_[_customerAddress];\n', "        payDivsValue(_dividends,'Burn coins');\n", '\n', '        delete tokenBalanceLedger_[_customerAddress];\n', '        delete referralBalance_[_customerAddress];\n', '        delete payoutsTo_[_customerAddress];\n', '        delete lastupdate_[_customerAddress];\n', '        emit onBurn(_dividends,_customerAddress,msg.sender,now);\n', '    }\n', '  \n', '    //Owner can get trade capital and reward \n', '    function takeCapital() public{\n', '        require(capitalAmount_>0 && AdminRewardAmount_>0, "No fundz, sorry!");\n', '        uint256 capitalAmountTrans=capitalAmount_;\n', '        uint256 adminAmountTrans=AdminRewardAmount_;\n', '        capitalAmount_=0;\n', '        AdminRewardAmount_=0;\n', '//        capital_.transfer(capitalAmountTrans); // to trade capital\n', '        capital_.call.value(capitalAmountTrans)(); // to trade capital, can use another contract\n', '        DevsInterface devContract_ = DevsInterface(devReward_);\n', "        devContract_.payDividends.value(adminAmountTrans)('ethedge.co source');\n", '        emit onTakeCapital(capital_,devReward_,capitalAmountTrans,adminAmountTrans,msg.sender,now);\n', '    }\n', '    \n', '     // Send `tokens` amount of tokens from address `from` to address `to`\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed_[_from][_to];\n', '        uint256 _amountOfTokens=_value;\n', '        require(tokenBalanceLedger_[_from] >= _amountOfTokens && allowance >= _amountOfTokens);\n', '        if ((dividendsOf(_from) + referralBalance_[_from])>0){\n', '            withdrawAddr(_from);\n', '        }\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from],_amountOfTokens);\n', '        tokenBalanceLedger_[_to] =SafeMath.add(tokenBalanceLedger_[_to],_taxedTokens);\n', '        payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_to] += (int256) (profitPerShare_ * _taxedTokens);\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        allowed_[_from][_to] = SafeMath.sub(allowed_[_from][_to],_amountOfTokens);\n', '        emit Transfer(_from, _to, _amountOfTokens);\n', '        return true;\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed_[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed_[_owner][_spender];\n', '    }\n', '    //end added section\n', '    \n', '    function buy(address _referredBy) public payable returns (uint256) {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    function() payable public {\n', '        if (msg.value == 1e10) {\n', '            reinvest();\n', '        }\n', '        else if (msg.value == 2e10) {\n', '            withdraw();\n', '        }\n', '        else if (msg.value == 3e10) {\n', '            exit();\n', '        }\n', '        else {\n', '            purchaseTokens(msg.value, 0x0);\n', '        }\n', '    }\n', '\n', '    function reinvest() onlyStronghands public {\n', '        uint256 _dividends = myDividends(false);\n', '        address _customerAddress = msg.sender;\n', '        lastupdate_[_customerAddress] = now;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    function exit() public {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '        withdraw();\n', '    }\n', '\n', '    function withdraw() onlyStronghands public {\n', '        address _customerAddress = msg.sender;\n', '        withdrawAddr(_customerAddress);\n', '    }\n', '\n', '    function withdrawAddr(address _fromAddress) onlyStronghands internal {\n', '        address _customerAddress = _fromAddress;\n', '        lastupdate_[_customerAddress] = now;\n', '        uint256 _dividends = myDividends(false);\n', '        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        _customerAddress.transfer(_dividends);\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    function sell(uint256 _amountOfTokens) onlyBagholders public {\n', '        address _customerAddress = msg.sender;\n', '        lastupdate_[_customerAddress] = now;\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        if (tokenSupply_ > 0) {\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n', '    }\n', '\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n', '        address _customerAddress = msg.sender;\n', '        lastupdate_[_customerAddress] = now;\n', '        if (_amountOfTokens>stakingRequirement) {\n', '            lastupdate_[_toAddress] = now;\n', '        }\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        if (myDividends(true) > 0) {\n', '            withdraw();\n', '        }\n', '\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function totalEthereumBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    function refferedBy(address _customerAddress) public view returns (address) {\n', '        return refferals_[_customerAddress];\n', '    }\n', '\n', '    function myTokens() public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    function balanceOf(address _customerAddress) public view returns (uint256) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    function dividendsOf(address _customerAddress) public view returns (uint256) {\n', '        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    function sellPrice() public view returns (uint256) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    function buyPrice() public view returns (uint256) {\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        lastupdate_[_customerAddress] = now;\n', '\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_-entryFeeCapital_-entryFeeReward_), 100);\n', '//        uint256 _fullTax = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n', '        uint256 _capitalTrade = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeCapital_), 100);\n', '        uint256 _adminReward = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeReward_), 100);\n', '        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.div(SafeMath.mul(_incomingEthereum, 100-entryFee_), 100);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n', '\n', '//set refferal. lifetime\n', '        if (\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '            _referredBy != _customerAddress &&\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement &&\n', '            refferals_[_customerAddress] == 0x0\n', '        ) {\n', '            refferals_[_customerAddress] = _referredBy;\n', '            emit onNewRefferal(_customerAddress,_referredBy, now);\n', '        }\n', '\n', '//use refferal\n', '        if (\n', '            refferals_[_customerAddress] != 0x0 &&\n', '            tokenBalanceLedger_[refferals_[_customerAddress]] >= stakingRequirement\n', '        ) {\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        if (tokenSupply_ > 0) {\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n', '            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n', '        } else {\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '        \n', '        capitalAmount_=SafeMath.add(capitalAmount_,_capitalTrade);\n', '        AdminRewardAmount_=SafeMath.add(AdminRewardAmount_,_adminReward);\n', '        if (capitalAmount_>1e17){ //more than 0.1 ETH - send outs\n', '            takeCapital();\n', '        }\n', '\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '            (\n', '                (\n', '                    SafeMath.sub(\n', '                        (sqrt\n', '                            (\n', '                                (_tokenPriceInitial ** 2)\n', '                                +\n', '                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n', '                                +\n', '                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n', '                                +\n', '                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n', '                            )\n', '                        ), _tokenPriceInitial\n', '                    )\n', '                ) / (tokenPriceIncremental_)\n', '            ) - (tokenSupply_);\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '            (\n', '                SafeMath.sub(\n', '                    (\n', '                        (\n', '                            (\n', '                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n', '                            ) - tokenPriceIncremental_\n', '                        ) * (tokens_ - 1e18)\n', '                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n', '                )\n', '                / 1e18);\n', '\n', '        return _etherReceived;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = (x + 1) / 2;\n', '        y = x;\n', '\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']