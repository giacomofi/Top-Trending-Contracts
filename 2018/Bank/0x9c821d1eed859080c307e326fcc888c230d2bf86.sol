['pragma solidity ^0.4.11;\n', '/**\n', '* Token Batch assignments \n', '*/\n', '\n', ' contract token {\n', '\n', '    function balanceOf(address _owner) public returns (uint256 bal);\n', '    function transfer(address _to, uint256 _value) public returns (bool); \n', ' \n', ' }\n', '\n', '\n', '/**\n', ' * This contract is administered\n', ' */\n', '\n', 'contract admined {\n', '    address public admin; //Admin address is public\n', '    /**\n', '    * @dev This constructor set the initial admin of the contract\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the adminship of the contract\n', '    * @param _newAdmin The address of the new admin.\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        TransferAdminship(admin);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdmin);\n', '    event Admined(address administrador);\n', '}\n', '\n', 'contract Sender is admined {\n', '    \n', '    token public ERC20Token;\n', '    mapping (address => bool) public flag; //Balances mapping\n', '    uint256 public price; //with all decimals\n', '    \n', '    function Sender (token _addressOfToken, uint256 _initialPrice) public {\n', '        price = _initialPrice;\n', '        ERC20Token = _addressOfToken; \n', '    }\n', '\n', '    function updatePrice(uint256 _newPrice) onlyAdmin public {\n', '        price = _newPrice;\n', '    }\n', '\n', '    function contribute() public payable { //It takes an array of addresses and an amount\n', '        require(flag[msg.sender] == false);\n', '        flag[msg.sender] = true;\n', '        ERC20Token.transfer(msg.sender,price);\n', '    }\n', '\n', '    function withdraw() onlyAdmin public{\n', '        require(admin.send(this.balance));\n', '        ERC20Token.transfer(admin, ERC20Token.balanceOf(this));\n', '    }\n', '\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '}']