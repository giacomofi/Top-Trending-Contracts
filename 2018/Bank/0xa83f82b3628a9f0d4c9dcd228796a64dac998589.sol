['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenContract {\n', '  function transfer(address _recipient, uint256 _amount) external returns (bool);\n', '  function balanceOf(address _holder) external view returns (uint256);\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract Exchange is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public buyPrice;\n', '  uint256 public sellPrice;\n', '  address public tokenAddress;\n', '  uint256 private fullEther = 1 ether;\n', '\n', '\n', '  constructor() public {\n', '    buyPrice = 600;\n', '    sellPrice = 400;\n', '    tokenAddress = 0x0;\n', '  }\n', '\n', '  function setBuyPrice(uint256 _price) onlyOwner public {\n', '    buyPrice = _price;\n', '  }\n', '\n', '  function setSellPrice(uint256 _price) onlyOwner public {\n', '    sellPrice = _price;\n', '  }\n', '\n', '  function() payable public {\n', '    sellTokens();\n', '  }\n', '\n', '  function sellTokens() payable public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 tokensToSell = msg.value.mul(sellPrice);\n', '    require(tkn.balanceOf(address(this)) >= tokensToSell);\n', '    tkn.transfer(msg.sender, tokensToSell);\n', '    emit SellTransaction(msg.value, tokensToSell);\n', '  }\n', '\n', '  function buyTokens(uint256 _amount) public {\n', '    address seller = msg.sender;\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 transactionPrice = _amount.div(buyPrice);\n', '    require (address(this).balance >= transactionPrice);\n', '    require (tkn.transferFrom(msg.sender, address(this), _amount));\n', '    seller.transfer(transactionPrice);\n', '    emit BuyTransaction(transactionPrice, _amount);\n', '  }\n', '\n', '  function getBalance(uint256 _amount) onlyOwner public {\n', '    msg.sender.transfer(_amount);\n', '  }\n', '\n', '  function getTokens(uint256 _amount) onlyOwner public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    tkn.transfer(msg.sender, _amount);\n', '  }\n', '\n', '  function killMe() onlyOwner public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 tokensLeft = tkn.balanceOf(address(this));\n', '    tkn.transfer(msg.sender, tokensLeft);\n', '    msg.sender.transfer(address(this).balance);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function changeToken(address _address) onlyOwner public {\n', '    tokenAddress = _address;\n', '  }\n', '\n', '  event SellTransaction(uint256 ethAmount, uint256 tokenAmount);\n', '  event BuyTransaction(uint256 ethAmount, uint256 tokenAmount);\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenContract {\n', '  function transfer(address _recipient, uint256 _amount) external returns (bool);\n', '  function balanceOf(address _holder) external view returns (uint256);\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract Exchange is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public buyPrice;\n', '  uint256 public sellPrice;\n', '  address public tokenAddress;\n', '  uint256 private fullEther = 1 ether;\n', '\n', '\n', '  constructor() public {\n', '    buyPrice = 600;\n', '    sellPrice = 400;\n', '    tokenAddress = 0x0;\n', '  }\n', '\n', '  function setBuyPrice(uint256 _price) onlyOwner public {\n', '    buyPrice = _price;\n', '  }\n', '\n', '  function setSellPrice(uint256 _price) onlyOwner public {\n', '    sellPrice = _price;\n', '  }\n', '\n', '  function() payable public {\n', '    sellTokens();\n', '  }\n', '\n', '  function sellTokens() payable public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 tokensToSell = msg.value.mul(sellPrice);\n', '    require(tkn.balanceOf(address(this)) >= tokensToSell);\n', '    tkn.transfer(msg.sender, tokensToSell);\n', '    emit SellTransaction(msg.value, tokensToSell);\n', '  }\n', '\n', '  function buyTokens(uint256 _amount) public {\n', '    address seller = msg.sender;\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 transactionPrice = _amount.div(buyPrice);\n', '    require (address(this).balance >= transactionPrice);\n', '    require (tkn.transferFrom(msg.sender, address(this), _amount));\n', '    seller.transfer(transactionPrice);\n', '    emit BuyTransaction(transactionPrice, _amount);\n', '  }\n', '\n', '  function getBalance(uint256 _amount) onlyOwner public {\n', '    msg.sender.transfer(_amount);\n', '  }\n', '\n', '  function getTokens(uint256 _amount) onlyOwner public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    tkn.transfer(msg.sender, _amount);\n', '  }\n', '\n', '  function killMe() onlyOwner public {\n', '    TokenContract tkn = TokenContract(tokenAddress);\n', '    uint256 tokensLeft = tkn.balanceOf(address(this));\n', '    tkn.transfer(msg.sender, tokensLeft);\n', '    msg.sender.transfer(address(this).balance);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function changeToken(address _address) onlyOwner public {\n', '    tokenAddress = _address;\n', '  }\n', '\n', '  event SellTransaction(uint256 ethAmount, uint256 tokenAmount);\n', '  event BuyTransaction(uint256 ethAmount, uint256 tokenAmount);\n', '}']
