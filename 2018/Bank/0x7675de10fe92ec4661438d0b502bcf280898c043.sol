['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    address public acceptableAddress;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        acceptableAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAcceptable() {\n', '        require(msg.sender == acceptableAddress);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function transferAcceptable(address newAcceptable) public onlyOwner {\n', '        require(newAcceptable != address(0));\n', '        OwnershipTransferred(acceptableAddress, newAcceptable);\n', '        acceptableAddress = newAcceptable;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract EternalStorage is Ownable {\n', '\n', '    function () public payable {\n', '        require(msg.sender == acceptableAddress || msg.sender == owner);\n', '    }\n', '\n', '    mapping(bytes32 => uint) public uintStorage;\n', '\n', '    function getUInt(bytes32 record) public view returns (uint) {\n', '        return uintStorage[record];\n', '    }\n', '\n', '    function setUInt(bytes32 record, uint value) public onlyAcceptable {\n', '        uintStorage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => string) public stringStorage;\n', '\n', '    function getString(bytes32 record) public view returns (string) {\n', '        return stringStorage[record];\n', '    }\n', '\n', '    function setString(bytes32 record, string value) public onlyAcceptable {\n', '        stringStorage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => address) public addressStorage;\n', '\n', '    function getAdd(bytes32 record) public view returns (address) {\n', '        return addressStorage[record];\n', '    }\n', '\n', '    function setAdd(bytes32 record, address value) public onlyAcceptable {\n', '        addressStorage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => bytes) public bytesStorage;\n', '\n', '    function getBytes(bytes32 record) public view returns (bytes) {\n', '        return bytesStorage[record];\n', '    }\n', '\n', '    function setBytes(bytes32 record, bytes value) public onlyAcceptable {\n', '        bytesStorage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => bytes32) public bytes32Storage;\n', '\n', '    function getBytes32(bytes32 record) public view returns (bytes32) {\n', '        return bytes32Storage[record];\n', '    }\n', '\n', '    function setBytes32(bytes32 record, bytes32 value) public onlyAcceptable {\n', '        bytes32Storage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => bool) public booleanStorage;\n', '\n', '    function getBool(bytes32 record) public view returns (bool) {\n', '        return booleanStorage[record];\n', '    }\n', '\n', '    function setBool(bytes32 record, bool value) public  onlyAcceptable {\n', '        booleanStorage[record] = value;\n', '    }\n', '\n', '    mapping(bytes32 => int) public intStorage;\n', '\n', '    function getInt(bytes32 record) public view returns (int) {\n', '        return intStorage[record];\n', '    }\n', '\n', '    function setInt(bytes32 record, int value) public onlyAcceptable {\n', '        intStorage[record] = value;\n', '    }\n', '\n', '    function getBalance() public constant returns (uint) {\n', '        return this.balance;\n', '    }\n', '\n', '    function withdraw(address beneficiary) public onlyAcceptable {\n', '        uint balance = getUInt(keccak256(beneficiary, "balance"));\n', '        setUInt(keccak256(beneficiary, "balance"), 0);\n', '        beneficiary.transfer(balance);\n', '    }\n', '}']