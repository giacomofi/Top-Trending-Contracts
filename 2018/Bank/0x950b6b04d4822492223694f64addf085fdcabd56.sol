['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '/* \n', 'SHOW ME WHAT YOU GOT\n', '        ___          \n', '    . -^   `--,      \n', '   /# =========`-_   \n', '  /# (--====___====\\ \n', ' /#   .- --.  . --.| \n', '/##   |  * ) (   * ),\n', '|##   \\    /\\ \\   / |\n', '|###   ---   \\ ---  |\n', '|####      ___)    #|\n', '|######           ##|\n', ' \\##### ---------- / \n', '  \\####           (  \n', '   `\\###          |  \n', '     \\###         |  \n', '      \\##        |   \n', '       \\###.    .)   \n', '        `======/    \n', '\n', '*/\n', '// similar to the original shrimper , with these changes:\n', '// 0. already initialized\n', '// 1. the "free" 314 Morties cost 0.001 eth (in line with the mining fee)\n', '// 2. bots should have a harder time, and whales can compete for the devfee\n', '\n', '\n', 'contract RickAndMortyShrimper{\n', '    string public name = "RickAndMortyShrimper";\n', '\tstring public symbol = "RickAndMortyS";\n', '    //uint256 morties_PER_RickAndMorty_PER_SECOND=1;\n', '    uint256 public morties_TO_HATCH_1RickAndMorty=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_RickAndMorty=314;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryRickAndMorty;\n', '    mapping (address => uint256) public claimedmorties;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketmorties = 1000000000;\n', '    uint256 public RnMmasterReq=100000;\n', '    \n', '    function RickAndMortyShrimper() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    modifier onlyCEO(){\n', '\t\trequire(msg.sender == ceoAddress );\n', '\t\t_;\n', '\t}\n', '    function becomePickleRick() public{\n', '        require(initialized);\n', '        require(hatcheryRickAndMorty[msg.sender]>=RnMmasterReq);\n', '        hatcheryRickAndMorty[msg.sender]=SafeMath.sub(hatcheryRickAndMorty[msg.sender],RnMmasterReq);\n', '        RnMmasterReq=SafeMath.add(RnMmasterReq,100000);//+100k RickAndMortys each time\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function hatchMorties(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 mortiesUsed=getMymorties();\n', '        uint256 newRickAndMorty=SafeMath.div(mortiesUsed,morties_TO_HATCH_1RickAndMorty);\n', '        hatcheryRickAndMorty[msg.sender]=SafeMath.add(hatcheryRickAndMorty[msg.sender],newRickAndMorty);\n', '        claimedmorties[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral morties\n', '        claimedmorties[referrals[msg.sender]]=SafeMath.add(claimedmorties[referrals[msg.sender]],SafeMath.div(mortiesUsed,5));\n', '        \n', '        //boost market to nerf RickAndMorty hoarding\n', '        marketmorties=SafeMath.add(marketmorties,SafeMath.div(mortiesUsed,10));\n', '    }\n', '    function sellMorties() public{\n', '        require(initialized);\n', '        uint256 hasmorties=getMymorties();\n', '        uint256 eggValue=calculatemortiesell(hasmorties);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedmorties[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketmorties=SafeMath.add(marketmorties,hasmorties);\n', '        ceoAddress.transfer(fee);\n', '    }\n', '    function buyMorties() public payable{\n', '        require(initialized);\n', '        uint256 mortiesBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        mortiesBought=SafeMath.sub(mortiesBought,devFee(mortiesBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedmorties[msg.sender]=SafeMath.add(claimedmorties[msg.sender],mortiesBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculatemortiesell(uint256 morties) public view returns(uint256){\n', '        return calculateTrade(morties,marketmorties,this.balance);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketmorties);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 morties) public payable{\n', '        require(marketmorties==0);\n', '        initialized=true;\n', '        marketmorties=morties;\n', '    }\n', '    function getFreeRickAndMorty() public payable{\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //RnMmaster gets this entrance fee\n', '        require(hatcheryRickAndMorty[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryRickAndMorty[msg.sender]=STARTING_RickAndMorty;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyRickAndMorty() public view returns(uint256){\n', '        return hatcheryRickAndMorty[msg.sender];\n', '    }\n', '    function getRnMmasterReq() public view returns(uint256){\n', '        return RnMmasterReq;\n', '    }\n', '    function getMymorties() public view returns(uint256){\n', '        return SafeMath.add(claimedmorties[msg.sender],getmortiesSinceLastHatch(msg.sender));\n', '    }\n', '    function getmortiesSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(morties_TO_HATCH_1RickAndMorty,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryRickAndMorty[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function transferOwnership() onlyCEO public {\n', '\t\tuint256 etherBalance = this.balance;\n', '\t\tceoAddress.transfer(etherBalance);\n', '\t}\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '/* \n', 'SHOW ME WHAT YOU GOT\n', '        ___          \n', '    . -^   `--,      \n', '   /# =========`-_   \n', '  /# (--====___====\\ \n', ' /#   .- --.  . --.| \n', '/##   |  * ) (   * ),\n', '|##   \\    /\\ \\   / |\n', '|###   ---   \\ ---  |\n', '|####      ___)    #|\n', '|######           ##|\n', ' \\##### ---------- / \n', '  \\####           (  \n', '   `\\###          |  \n', '     \\###         |  \n', '      \\##        |   \n', '       \\###.    .)   \n', '        `======/    \n', '\n', '*/\n', '// similar to the original shrimper , with these changes:\n', '// 0. already initialized\n', '// 1. the "free" 314 Morties cost 0.001 eth (in line with the mining fee)\n', '// 2. bots should have a harder time, and whales can compete for the devfee\n', '\n', '\n', 'contract RickAndMortyShrimper{\n', '    string public name = "RickAndMortyShrimper";\n', '\tstring public symbol = "RickAndMortyS";\n', '    //uint256 morties_PER_RickAndMorty_PER_SECOND=1;\n', '    uint256 public morties_TO_HATCH_1RickAndMorty=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_RickAndMorty=314;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryRickAndMorty;\n', '    mapping (address => uint256) public claimedmorties;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketmorties = 1000000000;\n', '    uint256 public RnMmasterReq=100000;\n', '    \n', '    function RickAndMortyShrimper() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    modifier onlyCEO(){\n', '\t\trequire(msg.sender == ceoAddress );\n', '\t\t_;\n', '\t}\n', '    function becomePickleRick() public{\n', '        require(initialized);\n', '        require(hatcheryRickAndMorty[msg.sender]>=RnMmasterReq);\n', '        hatcheryRickAndMorty[msg.sender]=SafeMath.sub(hatcheryRickAndMorty[msg.sender],RnMmasterReq);\n', '        RnMmasterReq=SafeMath.add(RnMmasterReq,100000);//+100k RickAndMortys each time\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function hatchMorties(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 mortiesUsed=getMymorties();\n', '        uint256 newRickAndMorty=SafeMath.div(mortiesUsed,morties_TO_HATCH_1RickAndMorty);\n', '        hatcheryRickAndMorty[msg.sender]=SafeMath.add(hatcheryRickAndMorty[msg.sender],newRickAndMorty);\n', '        claimedmorties[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral morties\n', '        claimedmorties[referrals[msg.sender]]=SafeMath.add(claimedmorties[referrals[msg.sender]],SafeMath.div(mortiesUsed,5));\n', '        \n', '        //boost market to nerf RickAndMorty hoarding\n', '        marketmorties=SafeMath.add(marketmorties,SafeMath.div(mortiesUsed,10));\n', '    }\n', '    function sellMorties() public{\n', '        require(initialized);\n', '        uint256 hasmorties=getMymorties();\n', '        uint256 eggValue=calculatemortiesell(hasmorties);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedmorties[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketmorties=SafeMath.add(marketmorties,hasmorties);\n', '        ceoAddress.transfer(fee);\n', '    }\n', '    function buyMorties() public payable{\n', '        require(initialized);\n', '        uint256 mortiesBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        mortiesBought=SafeMath.sub(mortiesBought,devFee(mortiesBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedmorties[msg.sender]=SafeMath.add(claimedmorties[msg.sender],mortiesBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculatemortiesell(uint256 morties) public view returns(uint256){\n', '        return calculateTrade(morties,marketmorties,this.balance);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketmorties);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 morties) public payable{\n', '        require(marketmorties==0);\n', '        initialized=true;\n', '        marketmorties=morties;\n', '    }\n', '    function getFreeRickAndMorty() public payable{\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //RnMmaster gets this entrance fee\n', '        require(hatcheryRickAndMorty[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryRickAndMorty[msg.sender]=STARTING_RickAndMorty;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyRickAndMorty() public view returns(uint256){\n', '        return hatcheryRickAndMorty[msg.sender];\n', '    }\n', '    function getRnMmasterReq() public view returns(uint256){\n', '        return RnMmasterReq;\n', '    }\n', '    function getMymorties() public view returns(uint256){\n', '        return SafeMath.add(claimedmorties[msg.sender],getmortiesSinceLastHatch(msg.sender));\n', '    }\n', '    function getmortiesSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(morties_TO_HATCH_1RickAndMorty,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryRickAndMorty[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function transferOwnership() onlyCEO public {\n', '\t\tuint256 etherBalance = this.balance;\n', '\t\tceoAddress.transfer(etherBalance);\n', '\t}\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
