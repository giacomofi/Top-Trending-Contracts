['pragma solidity ^0.4.24;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerAdmin() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    function setAdmin(address _admin)public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '    function balanceOf(address who)public view returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '    function allowance(address owner, address spender)public view returns (uint256);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '//************* BlackList *************\n', 'contract BlackList is Ownable {\n', '\n', '    function getBlackListStatus(address _address) external view returns (bool) {\n', '        return isBlackListed[_address];\n', '    }\n', '\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList(address _evilUser) public onlyOwnerAdmin {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyOwnerAdmin {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', '//************* WhiteList *************\n', '// White list of free-of-fee.\n', '\n', 'contract WhiteList is Ownable {\n', '\n', '    function getWhiteListStatus(address _address) external view returns (bool) {\n', '        return isWhiteListed[_address];\n', '    }\n', '\n', '    mapping (address => bool) public isWhiteListed;\n', '    \n', '    function addWhiteList(address _User) public onlyOwnerAdmin {\n', '        isWhiteListed[_User] = true;\n', '        emit AddedWhiteList(_User);\n', '    }\n', '\n', '    function removeWhiteList(address _User) public onlyOwnerAdmin {\n', '        isWhiteListed[_User] = false;\n', '        emit RemovedWhiteList(_User);\n', '    }\n', '\n', '    event AddedWhiteList(address _user);\n', '    event RemovedWhiteList(address _user);\n', '\n', '}\n', '\n', '//************* KYC ********************\n', '\n', 'contract KYC is Ownable {\n', '    bool public needVerified = false;\n', '\n', '    mapping (address => bool) public verifiedAccount;\n', '\n', '    event VerifiedAccount(address target, bool Verified);\n', '    event Error_No_Binding_Address(address _from, address _to);\n', '    event OpenKYC();\n', '    event CloseKYC();\n', '\n', '    function openKYC() onlyOwnerAdmin public {\n', '        needVerified = true;\n', '        emit OpenKYC();\n', '    }\n', '\n', '    function closeKYC() onlyOwnerAdmin public {\n', '        needVerified = false;\n', '        emit CloseKYC();\n', '    }\n', '\n', '    function verifyAccount(address _target, bool _Verify) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        verifiedAccount[_target] = _Verify;\n', '        emit VerifiedAccount(_target, _Verify);\n', '    }\n', '\n', '    function checkIsKYC(address _from, address _to)public view returns (bool) {\n', '        return (!needVerified || (needVerified && verifiedAccount[_from] && verifiedAccount[_to]));\n', '    }\n', '}\n', '\n', '//************* TWDT Token *************\n', '\n', 'contract TWDTToken is ERC20,Ownable,KYC,BlackList,WhiteList {\n', '    using SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    uint256 public constant decimals = 6;\n', '\n', '    //Wallet address.\n', '    address public blackFundsWallet;\n', '    address public redeemWallet;\n', '    address public feeWallet;\n', '\n', '    //Transaction fees.\n', '    uint256 public feeRate = 0;\n', '    uint256 public minimumFee = 0;\n', '    uint256 public maximumFee = 0;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => bool) public frozenAccountSend;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event FrozenFundsSend(address target, bool frozen);\n', '    event Logs(string log);\n', '\n', '    event TransferredBlackFunds(address _blackListedUser, uint256 _balance);\n', '    event Redeem(uint256 amount);\n', '\n', '    event Fee(uint256 feeRate, uint256 minFee, uint256 maxFee);\n', '\n', '    constructor() public {\n', '        name = "Taiwan Digital Token";\n', '        symbol = "TWDT-ETH";\n', '        totalSupply = 100000000000*(10**decimals);\n', '        balanceOf[msg.sender] = totalSupply;\t\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns (uint256 balance) {\n', '        return balanceOf[_who];\n', '    }\n', '\n', '    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        // require(balanceOf[_from] >= _value);\n', '        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(!frozenAccount[_from]);                  \n', '        require(!frozenAccount[_to]); \n', '        require(!frozenAccountSend[_from]);\n', '        require(!isBlackListed[_from]);\n', '        if(checkIsKYC(_from, _to)){\n', '            //Round down.\n', '            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n', '            if(isWhiteListed[_from] || isWhiteListed[_to]){\n', '                fee = 0;\n', '            }else if(fee != 0){\n', '                if (fee > maximumFee) {\n', '                    fee = maximumFee;\n', '                } else if (fee < minimumFee){\n', '                    fee = minimumFee;\n', '                }\n', '            }\n', '            \n', '            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n', '            uint256 sendAmount = _value.sub(fee);\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '            if (fee > 0) {\n', '                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n', '                emit Transfer(_from, feeWallet, fee);\n', '            }\n', '            emit Transfer(_from, _to, sendAmount);\n', '            return true;\n', '        } else {\n', '            //If not pass KYC, throw the event.\n', '            emit Error_No_Binding_Address(_from, _to);\n', '            return false;\n', '        }\n', '    }\n', '\t\n', '    function transfer(address _to, uint256 _value) public returns (bool){\t    \n', '        return _transferFrom(msg.sender,_to,_value);\n', '    }\n', '    function transferLog(address _to, uint256 _value,string logs) public returns (bool){\n', '        bool _status = _transferFrom(msg.sender,_to,_value);\n', '        emit Logs(logs);\n', '        return _status;\n', '    }\n', '\t\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        require(_spender != address(0));\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\t\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require(allowed[_from][msg.sender] >= _value);\n', '        // require(balanceOf[_from] >= _value);\n', '        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccountSend[_from]);\n', '        require(!isBlackListed[_from]); \n', '        if(checkIsKYC(_from, _to)){\n', '            //Round down.\n', '            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n', '            if(isWhiteListed[_from] || isWhiteListed[_to]){\n', '                fee = 0;\n', '            }else if(fee != 0){\n', '                if (fee > maximumFee) {\n', '                    fee = maximumFee;\n', '                } else if (fee < minimumFee){\n', '                    fee = minimumFee;\n', '                }\n', '            }\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n', '            uint256 sendAmount = _value.sub(fee);\n', '\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '            if (fee > 0) {\n', '                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n', '                emit Transfer(_from, feeWallet, fee);\n', '            }\n', '            emit Transfer(_from, _to, sendAmount);\n', '            return true;\n', '        } else {\n', '            // If not pass KYC, throw the event.\n', '            emit Error_No_Binding_Address(_from, _to);\n', '            return false;\n', '        }\n', '    }\n', '        \n', '    function freezeAccount(address _target, bool _freeze) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    function freezeAccountSend(address _target, bool _freeze) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        frozenAccountSend[_target] = _freeze;\n', '        emit FrozenFundsSend(_target, _freeze);\n', '    }\n', '\n', '    // Transfer of illegal funds.\n', '    // It can transfer tokens to blackFundsWallet only.\n', '    function transferBlackFunds(address _blackListedUser) public onlyOwnerAdmin {\n', '        require(blackFundsWallet != address(0));\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint256 dirtyFunds = balanceOf[_blackListedUser];\n', '        balanceOf[_blackListedUser] = 0;\n', '        balanceOf[blackFundsWallet] = balanceOf[blackFundsWallet].add(dirtyFunds);\n', '        emit Transfer(_blackListedUser, blackFundsWallet, dirtyFunds);\n', '        emit TransferredBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    // Burn tokens when user stops rent.\n', '    // It can burn tokens from redeemWallet only.\n', '    function redeem(uint256 amount) public onlyOwnerAdmin {\n', '        require(redeemWallet != address(0));\n', '        require(totalSupply >= amount);\n', '        require(balanceOf[redeemWallet] >= amount);\n', '\n', '        totalSupply = totalSupply.sub(amount);\n', '        balanceOf[redeemWallet] = balanceOf[redeemWallet].sub(amount);\n', '        emit Transfer(redeemWallet, address(0), amount);\n', '        emit Redeem(amount);\n', '    }\n', '\n', '    // Mint a new amount of tokens.\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != address(0));\n', '        require(_mintedAmount > 0);\n', '        require(!frozenAccount[_target]);\n', '        // require(totalSupply + _mintedAmount > totalSupply);\n', '        // require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\n', '        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        emit Transfer(address(0), this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    // Set the illegal fund wallet.\n', '    function setBlackFundsWallet(address _target) onlyOwner public {\n', '        blackFundsWallet = _target;\n', '    }\n', '\n', '    // Set the redeem wallet.\n', '    function setRedeemWallet(address _target) onlyOwner public {\n', '        redeemWallet = _target;\n', '    }\n', '\n', '    // Set the fee wallet.\n', '    function setFeeWallet(address _target) onlyOwner public {\n', '        feeWallet = _target;\n', '    }\n', '\n', '    // Set the token transfer fee.\n', '    // The maximum of feeRate is 0.1%.\n', '    // The maximum of fee is 100 TWDT.\n', '    function setFee(uint256 _feeRate, uint256 _minimumFee, uint256 _maximumFee) onlyOwner public {\n', '        require(_feeRate <= 10);\n', '        require(_maximumFee <= 100);\n', '        require(_minimumFee <= _maximumFee);\n', '\n', '        feeRate = _feeRate;\n', '        minimumFee = _minimumFee.mul(10**decimals);\n', '        maximumFee = _maximumFee.mul(10**decimals);\n', '\n', '        emit Fee(feeRate, minimumFee, maximumFee);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerAdmin() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    function setAdmin(address _admin)public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '    function balanceOf(address who)public view returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '    function allowance(address owner, address spender)public view returns (uint256);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '//************* BlackList *************\n', 'contract BlackList is Ownable {\n', '\n', '    function getBlackListStatus(address _address) external view returns (bool) {\n', '        return isBlackListed[_address];\n', '    }\n', '\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList(address _evilUser) public onlyOwnerAdmin {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyOwnerAdmin {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', '//************* WhiteList *************\n', '// White list of free-of-fee.\n', '\n', 'contract WhiteList is Ownable {\n', '\n', '    function getWhiteListStatus(address _address) external view returns (bool) {\n', '        return isWhiteListed[_address];\n', '    }\n', '\n', '    mapping (address => bool) public isWhiteListed;\n', '    \n', '    function addWhiteList(address _User) public onlyOwnerAdmin {\n', '        isWhiteListed[_User] = true;\n', '        emit AddedWhiteList(_User);\n', '    }\n', '\n', '    function removeWhiteList(address _User) public onlyOwnerAdmin {\n', '        isWhiteListed[_User] = false;\n', '        emit RemovedWhiteList(_User);\n', '    }\n', '\n', '    event AddedWhiteList(address _user);\n', '    event RemovedWhiteList(address _user);\n', '\n', '}\n', '\n', '//************* KYC ********************\n', '\n', 'contract KYC is Ownable {\n', '    bool public needVerified = false;\n', '\n', '    mapping (address => bool) public verifiedAccount;\n', '\n', '    event VerifiedAccount(address target, bool Verified);\n', '    event Error_No_Binding_Address(address _from, address _to);\n', '    event OpenKYC();\n', '    event CloseKYC();\n', '\n', '    function openKYC() onlyOwnerAdmin public {\n', '        needVerified = true;\n', '        emit OpenKYC();\n', '    }\n', '\n', '    function closeKYC() onlyOwnerAdmin public {\n', '        needVerified = false;\n', '        emit CloseKYC();\n', '    }\n', '\n', '    function verifyAccount(address _target, bool _Verify) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        verifiedAccount[_target] = _Verify;\n', '        emit VerifiedAccount(_target, _Verify);\n', '    }\n', '\n', '    function checkIsKYC(address _from, address _to)public view returns (bool) {\n', '        return (!needVerified || (needVerified && verifiedAccount[_from] && verifiedAccount[_to]));\n', '    }\n', '}\n', '\n', '//************* TWDT Token *************\n', '\n', 'contract TWDTToken is ERC20,Ownable,KYC,BlackList,WhiteList {\n', '    using SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    uint256 public constant decimals = 6;\n', '\n', '    //Wallet address.\n', '    address public blackFundsWallet;\n', '    address public redeemWallet;\n', '    address public feeWallet;\n', '\n', '    //Transaction fees.\n', '    uint256 public feeRate = 0;\n', '    uint256 public minimumFee = 0;\n', '    uint256 public maximumFee = 0;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => bool) public frozenAccountSend;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event FrozenFundsSend(address target, bool frozen);\n', '    event Logs(string log);\n', '\n', '    event TransferredBlackFunds(address _blackListedUser, uint256 _balance);\n', '    event Redeem(uint256 amount);\n', '\n', '    event Fee(uint256 feeRate, uint256 minFee, uint256 maxFee);\n', '\n', '    constructor() public {\n', '        name = "Taiwan Digital Token";\n', '        symbol = "TWDT-ETH";\n', '        totalSupply = 100000000000*(10**decimals);\n', '        balanceOf[msg.sender] = totalSupply;\t\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns (uint256 balance) {\n', '        return balanceOf[_who];\n', '    }\n', '\n', '    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        // require(balanceOf[_from] >= _value);\n', '        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(!frozenAccount[_from]);                  \n', '        require(!frozenAccount[_to]); \n', '        require(!frozenAccountSend[_from]);\n', '        require(!isBlackListed[_from]);\n', '        if(checkIsKYC(_from, _to)){\n', '            //Round down.\n', '            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n', '            if(isWhiteListed[_from] || isWhiteListed[_to]){\n', '                fee = 0;\n', '            }else if(fee != 0){\n', '                if (fee > maximumFee) {\n', '                    fee = maximumFee;\n', '                } else if (fee < minimumFee){\n', '                    fee = minimumFee;\n', '                }\n', '            }\n', '            \n', '            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n', '            uint256 sendAmount = _value.sub(fee);\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '            if (fee > 0) {\n', '                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n', '                emit Transfer(_from, feeWallet, fee);\n', '            }\n', '            emit Transfer(_from, _to, sendAmount);\n', '            return true;\n', '        } else {\n', '            //If not pass KYC, throw the event.\n', '            emit Error_No_Binding_Address(_from, _to);\n', '            return false;\n', '        }\n', '    }\n', '\t\n', '    function transfer(address _to, uint256 _value) public returns (bool){\t    \n', '        return _transferFrom(msg.sender,_to,_value);\n', '    }\n', '    function transferLog(address _to, uint256 _value,string logs) public returns (bool){\n', '        bool _status = _transferFrom(msg.sender,_to,_value);\n', '        emit Logs(logs);\n', '        return _status;\n', '    }\n', '\t\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        require(_spender != address(0));\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\t\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require(allowed[_from][msg.sender] >= _value);\n', '        // require(balanceOf[_from] >= _value);\n', '        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccountSend[_from]);\n', '        require(!isBlackListed[_from]); \n', '        if(checkIsKYC(_from, _to)){\n', '            //Round down.\n', '            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n', '            if(isWhiteListed[_from] || isWhiteListed[_to]){\n', '                fee = 0;\n', '            }else if(fee != 0){\n', '                if (fee > maximumFee) {\n', '                    fee = maximumFee;\n', '                } else if (fee < minimumFee){\n', '                    fee = minimumFee;\n', '                }\n', '            }\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n', '            uint256 sendAmount = _value.sub(fee);\n', '\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n', '            if (fee > 0) {\n', '                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n', '                emit Transfer(_from, feeWallet, fee);\n', '            }\n', '            emit Transfer(_from, _to, sendAmount);\n', '            return true;\n', '        } else {\n', '            // If not pass KYC, throw the event.\n', '            emit Error_No_Binding_Address(_from, _to);\n', '            return false;\n', '        }\n', '    }\n', '        \n', '    function freezeAccount(address _target, bool _freeze) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    function freezeAccountSend(address _target, bool _freeze) onlyOwnerAdmin public {\n', '        require(_target != address(0));\n', '        frozenAccountSend[_target] = _freeze;\n', '        emit FrozenFundsSend(_target, _freeze);\n', '    }\n', '\n', '    // Transfer of illegal funds.\n', '    // It can transfer tokens to blackFundsWallet only.\n', '    function transferBlackFunds(address _blackListedUser) public onlyOwnerAdmin {\n', '        require(blackFundsWallet != address(0));\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint256 dirtyFunds = balanceOf[_blackListedUser];\n', '        balanceOf[_blackListedUser] = 0;\n', '        balanceOf[blackFundsWallet] = balanceOf[blackFundsWallet].add(dirtyFunds);\n', '        emit Transfer(_blackListedUser, blackFundsWallet, dirtyFunds);\n', '        emit TransferredBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    // Burn tokens when user stops rent.\n', '    // It can burn tokens from redeemWallet only.\n', '    function redeem(uint256 amount) public onlyOwnerAdmin {\n', '        require(redeemWallet != address(0));\n', '        require(totalSupply >= amount);\n', '        require(balanceOf[redeemWallet] >= amount);\n', '\n', '        totalSupply = totalSupply.sub(amount);\n', '        balanceOf[redeemWallet] = balanceOf[redeemWallet].sub(amount);\n', '        emit Transfer(redeemWallet, address(0), amount);\n', '        emit Redeem(amount);\n', '    }\n', '\n', '    // Mint a new amount of tokens.\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != address(0));\n', '        require(_mintedAmount > 0);\n', '        require(!frozenAccount[_target]);\n', '        // require(totalSupply + _mintedAmount > totalSupply);\n', '        // require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\n', '        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        emit Transfer(address(0), this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    // Set the illegal fund wallet.\n', '    function setBlackFundsWallet(address _target) onlyOwner public {\n', '        blackFundsWallet = _target;\n', '    }\n', '\n', '    // Set the redeem wallet.\n', '    function setRedeemWallet(address _target) onlyOwner public {\n', '        redeemWallet = _target;\n', '    }\n', '\n', '    // Set the fee wallet.\n', '    function setFeeWallet(address _target) onlyOwner public {\n', '        feeWallet = _target;\n', '    }\n', '\n', '    // Set the token transfer fee.\n', '    // The maximum of feeRate is 0.1%.\n', '    // The maximum of fee is 100 TWDT.\n', '    function setFee(uint256 _feeRate, uint256 _minimumFee, uint256 _maximumFee) onlyOwner public {\n', '        require(_feeRate <= 10);\n', '        require(_maximumFee <= 100);\n', '        require(_minimumFee <= _maximumFee);\n', '\n', '        feeRate = _feeRate;\n', '        minimumFee = _minimumFee.mul(10**decimals);\n', '        maximumFee = _maximumFee.mul(10**decimals);\n', '\n', '        emit Fee(feeRate, minimumFee, maximumFee);\n', '    }\n', '}']
