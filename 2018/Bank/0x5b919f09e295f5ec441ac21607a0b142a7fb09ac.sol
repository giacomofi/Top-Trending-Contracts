['pragma solidity ^0.4.23;\n', '\n', 'interface TokenContract {\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract Airdrop {\n', '  address public owner;\n', '  bool public isTheContract = true;\n', '\n', '  constructor() public {\n', '  \n', '    owner = msg.sender;\n', '  }\n', '\n', '  function sendTokens(address[] addresses, uint256[] _amount, address _tokenAddress) public {\n', '    //require(msg.sender == owner);\n', '    uint256 addressCount = addresses.length;\n', '    uint256 amountCount = _amount.length;\n', '    require(addressCount == amountCount);\n', '    TokenContract tkn = TokenContract(_tokenAddress);\n', '    for (uint256 i = 0; i < addressCount; i++) {\n', '      tkn.transfer(addresses[i], _amount[i]);\n', '    }\n', '  }\n', '\n', '  function destroyMe() public {\n', '    require(msg.sender == owner);\n', '    selfdestruct(owner);\n', '  }\n', '    \n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'interface TokenContract {\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', 'contract Airdrop {\n', '  address public owner;\n', '  bool public isTheContract = true;\n', '\n', '  constructor() public {\n', '  \n', '    owner = msg.sender;\n', '  }\n', '\n', '  function sendTokens(address[] addresses, uint256[] _amount, address _tokenAddress) public {\n', '    //require(msg.sender == owner);\n', '    uint256 addressCount = addresses.length;\n', '    uint256 amountCount = _amount.length;\n', '    require(addressCount == amountCount);\n', '    TokenContract tkn = TokenContract(_tokenAddress);\n', '    for (uint256 i = 0; i < addressCount; i++) {\n', '      tkn.transfer(addresses[i], _amount[i]);\n', '    }\n', '  }\n', '\n', '  function destroyMe() public {\n', '    require(msg.sender == owner);\n', '    selfdestruct(owner);\n', '  }\n', '    \n', '}']
