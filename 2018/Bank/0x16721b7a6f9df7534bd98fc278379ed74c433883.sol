['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'interface HourglassInterface  {\n', '    function() payable external;\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function reinvest() external;\n', '    function withdraw() external;\n', '    function exit() external;\n', '    function dividendsOf(address _playerAddress) external view returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function stakingRequirement() external view returns(uint256);\n', '}\n', 'contract DivMultisigHackable is Owned {\n', 'HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '\n', 'function buyp3d(uint256 amt) internal{\n', 'P3Dcontract_.buy.value(amt)(this);\n', '}\n', 'function claimdivs() internal{\n', 'P3Dcontract_.withdraw();\n', '}\n', '// amount of divs available\n', '\n', 'struct HackableSignature {\n', '    address owner;\n', '    uint256 hackingcost;\n', '    uint256 encryption;\n', '}\n', 'uint256 private ethtosend;\n', 'uint256 private nexId;\n', 'uint256 public totalsigs;\n', 'mapping(uint256 => HackableSignature) public Multisigs;  \n', 'mapping(address => uint256) public lasthack;\n', '\n', 'address public contrp3d = 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe;\n', 'uint256 private div;\n', 'uint256 private count;\n', 'constructor(uint256 amtsigs) public{\n', '    for(nexId = 0; nexId < amtsigs;nexId++){\n', '    Multisigs[nexId].owner = msg.sender;\n', '    Multisigs[nexId].hackingcost = 1;\n', '    Multisigs[nexId].encryption = 1;\n', '}\n', 'totalsigs = amtsigs;\n', '}\n', 'event onHarvest(\n', '        address customerAddress,\n', '        uint256 amount\n', '    );\n', 'function harvestabledivs()\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return ( P3Dcontract_.dividendsOf(address(this)))  ;\n', '    }\n', 'function amountofp3d() external view returns(uint256){\n', '    return ( P3Dcontract_.balanceOf(address(this)))  ;\n', '}\n', 'function Hacksig(uint256 nmbr) public payable{\n', '    require(lasthack[msg.sender] < block.number);\n', '    require(nmbr < totalsigs);\n', '    require(Multisigs[nmbr].owner != msg.sender);\n', '    require(msg.value >= Multisigs[nmbr].hackingcost + Multisigs[nmbr].encryption);\n', '    Multisigs[nmbr].owner = msg.sender;\n', '    Multisigs[nmbr].hackingcost ++;\n', '    Multisigs[nmbr].encryption = 0;\n', '    lasthack[msg.sender] = block.number;\n', '}\n', 'function Encrypt(uint256 nmbr) public payable{\n', '    require(Multisigs[nmbr].owner == msg.sender);//prevent encryption of hacked sig\n', '    Multisigs[nmbr].encryption += msg.value;\n', '    }\n', '\n', 'function HackDivs() public payable{\n', '    div = harvestabledivs();\n', '    require(msg.value >= 1 finney);\n', '    require(div > 0);\n', '    count = 0;\n', '    for(nexId = 0; nexId < totalsigs;nexId++){\n', '    if(Multisigs[nexId].owner == msg.sender){\n', '        count++;\n', '    }\n', '}\n', 'require(count > totalsigs/2);\n', '    claimdivs();\n', '    //1% to owner\n', '    ethtosend = div /100;\n', '    owner.transfer(ethtosend);\n', '    ethtosend = ethtosend * 99;\n', '    msg.sender.transfer(ethtosend);\n', '    emit onHarvest(msg.sender,ethtosend);\n', '}\n', '\n', 'function Expand() public {\n', '    //1% to owner\n', '    ethtosend = this.balance /100;\n', '    owner.transfer(ethtosend);\n', '    //99% buy p3d\n', '    buyp3d(this.balance);\n', '}\n', '\n', 'function () external payable{}\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'interface HourglassInterface  {\n', '    function() payable external;\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function reinvest() external;\n', '    function withdraw() external;\n', '    function exit() external;\n', '    function dividendsOf(address _playerAddress) external view returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function stakingRequirement() external view returns(uint256);\n', '}\n', 'contract DivMultisigHackable is Owned {\n', 'HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '\n', 'function buyp3d(uint256 amt) internal{\n', 'P3Dcontract_.buy.value(amt)(this);\n', '}\n', 'function claimdivs() internal{\n', 'P3Dcontract_.withdraw();\n', '}\n', '// amount of divs available\n', '\n', 'struct HackableSignature {\n', '    address owner;\n', '    uint256 hackingcost;\n', '    uint256 encryption;\n', '}\n', 'uint256 private ethtosend;\n', 'uint256 private nexId;\n', 'uint256 public totalsigs;\n', 'mapping(uint256 => HackableSignature) public Multisigs;  \n', 'mapping(address => uint256) public lasthack;\n', '\n', 'address public contrp3d = 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe;\n', 'uint256 private div;\n', 'uint256 private count;\n', 'constructor(uint256 amtsigs) public{\n', '    for(nexId = 0; nexId < amtsigs;nexId++){\n', '    Multisigs[nexId].owner = msg.sender;\n', '    Multisigs[nexId].hackingcost = 1;\n', '    Multisigs[nexId].encryption = 1;\n', '}\n', 'totalsigs = amtsigs;\n', '}\n', 'event onHarvest(\n', '        address customerAddress,\n', '        uint256 amount\n', '    );\n', 'function harvestabledivs()\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return ( P3Dcontract_.dividendsOf(address(this)))  ;\n', '    }\n', 'function amountofp3d() external view returns(uint256){\n', '    return ( P3Dcontract_.balanceOf(address(this)))  ;\n', '}\n', 'function Hacksig(uint256 nmbr) public payable{\n', '    require(lasthack[msg.sender] < block.number);\n', '    require(nmbr < totalsigs);\n', '    require(Multisigs[nmbr].owner != msg.sender);\n', '    require(msg.value >= Multisigs[nmbr].hackingcost + Multisigs[nmbr].encryption);\n', '    Multisigs[nmbr].owner = msg.sender;\n', '    Multisigs[nmbr].hackingcost ++;\n', '    Multisigs[nmbr].encryption = 0;\n', '    lasthack[msg.sender] = block.number;\n', '}\n', 'function Encrypt(uint256 nmbr) public payable{\n', '    require(Multisigs[nmbr].owner == msg.sender);//prevent encryption of hacked sig\n', '    Multisigs[nmbr].encryption += msg.value;\n', '    }\n', '\n', 'function HackDivs() public payable{\n', '    div = harvestabledivs();\n', '    require(msg.value >= 1 finney);\n', '    require(div > 0);\n', '    count = 0;\n', '    for(nexId = 0; nexId < totalsigs;nexId++){\n', '    if(Multisigs[nexId].owner == msg.sender){\n', '        count++;\n', '    }\n', '}\n', 'require(count > totalsigs/2);\n', '    claimdivs();\n', '    //1% to owner\n', '    ethtosend = div /100;\n', '    owner.transfer(ethtosend);\n', '    ethtosend = ethtosend * 99;\n', '    msg.sender.transfer(ethtosend);\n', '    emit onHarvest(msg.sender,ethtosend);\n', '}\n', '\n', 'function Expand() public {\n', '    //1% to owner\n', '    ethtosend = this.balance /100;\n', '    owner.transfer(ethtosend);\n', '    //99% buy p3d\n', '    buyp3d(this.balance);\n', '}\n', '\n', 'function () external payable{}\n', '}']
