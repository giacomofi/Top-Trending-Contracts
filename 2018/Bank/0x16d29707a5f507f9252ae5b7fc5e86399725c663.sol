['pragma solidity ^0.4.24;\n', '\n', '\n', '/* Smart Contract Security Audit by Callisto Network */\n', ' \n', '/* Mizhen Boss represents the right of being a member of Mizhen community \n', ' * Holders can use different tools and share profits in all the games developed by Mizhen team\n', ' * Total number of MZBoss is 21,000,000\n', ' * The price of MZBoss is constant at 0.005 ether\n', ' * Purchase fee is 15%, pay customers buy MZBoss, of which 10% is distributed to tokenholders, 5% is sent to community for further development.\n', ' * There is not selling fee\n', ' * The purchase fee is evenly distributed to the existing MZBoss holders\n', ' * All MZBoss holders will receive profit from different game pots\n', ' * Mizhen Team\n', ' */\n', ' \n', 'contract MZBoss {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier transferCheck(uint256 _amountOfTokens) {\n', '        address _customerAddress = msg.sender;\n', '        require((_amountOfTokens > 0) && (_amountOfTokens <= tokenBalanceLedger_[_customerAddress]));\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        address _customerAddress = msg.sender;\n', '        require(dividendsOf(_customerAddress) > 0);\n', '        _;\n', '    }\n', '    \n', '    // Check if the play has enough ETH to buy tokens\n', '    modifier enoughToreinvest() {\n', '        address _customerAddress = msg.sender;\n', '        uint256 priceForOne = (tokenPriceInitial_*100)/85;\n', '        require((dividendsOf(_customerAddress) >= priceForOne) && (_tokenLeft >= calculateTokensReceived(dividendsOf(_customerAddress))));\n', '        _; \n', '    } \n', '    \n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress] == true);\n', '        _;\n', '    }\n', '    \n', '    // Check if the play has enough ETH to buy tokens\n', '    modifier enoughToBuytoken (){\n', '        uint256 _amountOfEthereum = msg.value;\n', '        uint256 priceForOne = (tokenPriceInitial_*100)/85;\n', '        require((_amountOfEthereum >= priceForOne) && (_tokenLeft >= calculateTokensReceived(_amountOfEthereum)));\n', '        _; \n', '    } \n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    \n', '    event OnTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensBought,\n', '        uint256 tokenSupplyUpdate,\n', '        uint256 tokenLeftUpdate\n', '    );\n', '    \n', '    event OnTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensSold,\n', '        uint256 ethereumEarned,\n', '        uint256 tokenSupplyUpdate,\n', '        uint256 tokenLeftUpdate\n', '    );\n', '    \n', '    event OnReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensBought,\n', '        uint256 tokenSupplyUpdate,\n', '        uint256 tokenLeftUpdate\n', '    );\n', '    \n', '    event OnWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    \n', '    // distribution of profit from pot\n', '    event OnTotalProfitPot(\n', '        uint256 _totalProfitPot\n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Mizhen";\n', '    string public symbol = "MZBoss";\n', '    uint256 constant public totalToken = 21000000e18; //total 21000000 MZBoss tokens \n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10; // percentage of fee sent to token holders \n', '    uint8 constant internal toCommunity_ = 5; // percentage of fee sent to community. \n', '    uint256 constant internal tokenPriceInitial_ = 5e15; // the price is constant and does not change as the purchase increases.\n', '    uint256 constant internal magnitude = 1e18; // related to payoutsTo_, profitPershare_, profitPerSharePot_, profitPerShareNew_\n', '\n', '    \n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 1e19;\n', '    uint256 constant internal ambassadorQuota_ = 1e19;\n', '    \n', '    // exchange address, in the future customers can exchange MZBoss without the price limitation\n', '    mapping(address => bool) public exchangeAddress_;\n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) public tokenBalanceLedger_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '\n', '    uint256 public tokenSupply_ = 0; // total sold tokens \n', '    uint256 public _tokenLeft = 21000000e18;\n', '    uint256 public totalEthereumBalance1 = 0;\n', '    uint256 public profitPerShare_ = 0 ;\n', '\n', '    uint256 public _totalProfitPot = 0;\n', '    address constant internal _communityAddress = 0x43e8587aCcE957629C9FD2185dD700dcDdE1dD1E;\n', '    \n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '    \n', '    // when this is set to true, only ambassadors can purchase tokens \n', '    bool public onlyAmbassadors = true;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    constructor ()\n', '        public\n', '    \n', '    {\n', '        // add administrators here\n', '        administrators[0x6dAd1d9D24674bC9199237F93beb6E25b55Ec763] = true;\n', '\n', '        // add the ambassadors here.\n', '        ambassadors_[0x64BFD8F0F51569AEbeBE6AD2a1418462bCBeD842] = true;\n', '    }\n', '    \n', '    function purchaseTokens()  \n', '        enoughToBuytoken ()\n', '        public\n', '        payable\n', '    {\n', '           address _customerAddress = msg.sender;\n', '           uint256 _amountOfEthereum = msg.value;\n', '        \n', '        // are we still in the ambassador phase? \n', '        if( onlyAmbassadors && (SafeMath.sub(totalEthereumBalance(), _amountOfEthereum) < ambassadorQuota_ )){ \n', '            require(\n', '                // is the customer in the ambassador list? \n', '                (ambassadors_[_customerAddress] == true) &&\n', '                \n', '                // does the customer purchase exceed the max ambassador quota? \n', '                (SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum) <= ambassadorMaxPurchase_)\n', '            );\n', '            \n', '            // updated the accumulated quota    \n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '            \n', '            totalEthereumBalance1 = SafeMath.add(totalEthereumBalance1, _amountOfEthereum);\n', '            uint256 _amountOfTokens = ethereumToTokens_(_amountOfEthereum); \n', '            \n', '            tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '            \n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens); \n', '            \n', '            _tokenLeft = SafeMath.sub(totalToken, tokenSupply_); \n', '            \n', '            emit OnTokenPurchase(_customerAddress, _amountOfEthereum, _amountOfTokens, tokenSupply_, _tokenLeft);\n', '         \n', '        } \n', '        \n', '        else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            \n', '            purchaseTokensAfter(_amountOfEthereum); \n', '                \n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '     * profit distribution from game pot\n', '     */\n', '    function potDistribution()\n', '        public\n', '        payable\n', '    {\n', '        //\n', '        require(msg.value > 0);\n', '        uint256 _incomingEthereum = msg.value;\n', '        if(tokenSupply_ > 0){\n', '            \n', '            // profit per share \n', '            uint256 profitPerSharePot_ = SafeMath.mul(_incomingEthereum, magnitude) / (tokenSupply_);\n', '            \n', '            // update profitPerShare_, adding profit from game pot\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, profitPerSharePot_);\n', '            \n', '        } else {\n', '            // send to community\n', '            payoutsTo_[_communityAddress] -=  (int256) (_incomingEthereum);\n', '            \n', '        }\n', '        \n', '        //update _totalProfitPot\n', '        _totalProfitPot = SafeMath.add(_incomingEthereum, _totalProfitPot); \n', '    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        enoughToreinvest()\n', '        public\n', '    {\n', '        \n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // fetch dividends\n', '        uint256 _dividends = dividendsOf(_customerAddress); \n', '        \n', '        uint256 priceForOne = (tokenPriceInitial_*100)/85;\n', '        \n', '        // minimum purchase 1 ether token\n', '        if (_dividends >= priceForOne) { \n', '        \n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        purchaseTokensAfter(_dividends);\n', '            \n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends);\n', '        \n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = dividendsOf(_customerAddress); \n', '        \n', '        // update dividend tracker, in order to calculate with payoutsTo which is int256, _dividends need to be casted to int256 first\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends);\n', '\n', '        \n', '        // send eth\n', '        _customerAddress.transfer(_dividends);\n', '        \n', '        // fire event\n', '        emit OnWithdraw(_customerAddress, _dividends);\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, 0); // no fee when sell, but there is transaction fee included here\n', '        \n', '        require((tokenBalanceLedger_[_customerAddress] >= _amountOfTokens) && ( totalEthereumBalance1 >= _taxedEthereum ) && (_amountOfTokens > 0));\n', '        \n', '        // update the amount of the sold tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        totalEthereumBalance1 = SafeMath.sub(totalEthereumBalance1, _taxedEthereum);\n', '        \n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (SafeMath.add(SafeMath.mul(profitPerShare_, _tokens)/magnitude, _taxedEthereum));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        \n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        _tokenLeft = SafeMath.sub(totalToken, tokenSupply_);\n', '        \n', '        // fire event\n', '        emit OnTokenSell(_customerAddress, _tokens, _taxedEthereum, tokenSupply_, _tokenLeft);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     */\n', '    function transfer(uint256 _amountOfTokens, address _toAddress)\n', '        transferCheck(_amountOfTokens)\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(dividendsOf(_customerAddress) > 0) withdraw();\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (SafeMath.mul(profitPerShare_ , _amountOfTokens)/magnitude);\n', '        payoutsTo_[_toAddress] += (int256) (SafeMath.mul(profitPerShare_ , _amountOfTokens)/magnitude);\n', '        \n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * \n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    /**\n', '     * Method to view the current sold tokens\n', '     * \n', '     */\n', '    function tokenSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the payoutsTo_ of any single address.\n', '     */\n', '    function payoutsTo(address _customerAddress)\n', '        public\n', '        view\n', '        returns(int256)\n', '    {\n', '        return payoutsTo_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        public \n', '        view\n', '        returns(uint256)\n', '    {\n', '        \n', '        uint256 _TokensEther = tokenBalanceLedger_[_customerAddress];\n', '        \n', '        if ((int256(SafeMath.mul(profitPerShare_, _TokensEther)/magnitude) - payoutsTo_[_customerAddress]) > 0 )\n', '           return uint256(int256(SafeMath.mul(profitPerShare_, _TokensEther)/magnitude) - payoutsTo_[_customerAddress]);  \n', '        else \n', '           return 0;\n', '    }\n', '\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) \n', '        public \n', '        pure \n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.mul(_ethereumToSpend, dividendFee_) / 100;\n', '        uint256 _communityDistribution = SafeMath.mul(_ethereumToSpend, toCommunity_) / 100;\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, SafeMath.add(_communityDistribution,_dividends));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        pure \n', '        returns(uint256)\n', '    {\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, 0); // transaction fee\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokensAfter(uint256 _incomingEthereum) \n', '        private\n', '    {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // distribution as dividend to token holders\n', '        uint256 _dividends = SafeMath.mul(_incomingEthereum, dividendFee_) / 100; \n', '        \n', '        // sent to community address\n', '        uint256 _communityDistribution = SafeMath.mul(_incomingEthereum, toCommunity_) / 100;\n', '        \n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, SafeMath.add(_communityDistribution, _dividends));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum); \n', '\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // minimum purchase 1 token\n', '        require((_amountOfTokens >= 1e18) && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_)); \n', '\n', '        \n', '        // profitPerShare calculation assuming the _dividends are only distributed to the holders before the new customer\n', "        // the tokenSupply_ here is the supply without considering the new customer's buying amount\n", '        \n', '        if (tokenSupply_ == 0){\n', '            \n', '            uint256 profitPerShareNew_ = 0;\n', '        }else{\n', '            \n', '            profitPerShareNew_ = SafeMath.mul(_dividends, magnitude) / (tokenSupply_); \n', '        } \n', '        \n', '        // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, profitPerShareNew_); \n', '        \n', "        // assumed total dividends considering the new customer's buying amount \n", '        uint256 _dividendsAssumed = SafeMath.div(SafeMath.mul(profitPerShare_, _amountOfTokens), magnitude);\n', '            \n', '        // extra dividends in the assumed dividens, which does not exist \n', '        // this part is considered as the existing payoutsTo_ to the new customer\n', '        uint256 _dividendsExtra = _dividendsAssumed;\n', '        \n', '        \n', "        // update the new customer's payoutsTo_; cast _dividendsExtra to int256 first because payoutsTo is int256\n", '        payoutsTo_[_customerAddress] += (int256) (_dividendsExtra);\n', '            \n', '        // add tokens to the pool, update the tokenSupply_\n', '        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens); \n', '            \n', '        _tokenLeft = SafeMath.sub(totalToken, tokenSupply_);\n', '        totalEthereumBalance1 = SafeMath.add(totalEthereumBalance1, _taxedEthereum);\n', '        \n', '        // send to community\n', '        _communityAddress.transfer(_communityDistribution);\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        \n', '        // fire event\n', '        emit OnTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, tokenSupply_, _tokenLeft);\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        require (_ethereum > 0);\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_;\n', '        \n', '        uint256 _tokensReceived = SafeMath.mul(_ethereum, magnitude) / _tokenPriceInitial;\n', '                    \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        pure\n', '        returns(uint256)\n', '    {   \n', '        uint256 tokens_ = _tokens;\n', '        \n', '        uint256 _etherReceived = SafeMath.mul (tokenPriceInitial_, tokens_) / magnitude;\n', '            \n', '        return _etherReceived;\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']