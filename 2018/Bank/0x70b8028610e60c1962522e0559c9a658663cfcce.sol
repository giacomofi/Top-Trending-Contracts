['pragma solidity ^0.4.25;\n', '\n', 'contract Olympus {\n', '    using SafeMath for uint;\n', '    \n', '    address private constant supportAddress = 0x0bD47808d4A09aD155b00C39dBb101Fb71e1C0f0;\n', '    uint private constant supportPercent = 1;\n', '    \n', '    mapping(address => uint) private shares;\n', '    uint private totalShares;\n', '    uint private totalPersons;\n', '    \n', '    function getBalance(address _account) public constant returns (uint) {\n', '        if (totalShares == 0)\n', '            return 0;\n', '        uint contractBalance = address(this).balance;\n', '        uint profitPercent = calculateProfitPercent(contractBalance, totalPersons);\n', '        return contractBalance.mul(shares[_account]).mul(profitPercent).div(totalShares).div(100);\n', '    }\n', '    \n', '    function() public payable {\n', '        address sender = msg.sender;\n', '        uint amount = msg.value;\n', '        if (amount > 0) {\n', '            if (totalPersons > 10)\n', '                supportAddress.transfer(calculateSupportPercent(amount));\n', '            if (totalShares > 0)\n', '                amount = amount.mul(totalShares).div(address(this).balance.sub(amount));\n', '            if (shares[sender] == 0)\n', '                totalPersons++;\n', '            shares[sender] = shares[sender].add(amount);\n', '            totalShares = totalShares.add(amount);\n', '        } else {\n', '            amount = getBalance(sender);\n', '            totalShares = totalShares.sub(shares[sender]);\n', '            shares[sender] = 0;\n', '            totalPersons--;\n', '            uint percent = calculateSupportPercent(amount);\n', '            supportAddress.transfer(percent);\n', '            sender.transfer(amount - percent);\n', '            if (totalPersons == 0)\n', '                supportAddress.transfer(address(this).balance);\n', '        }\n', '    }\n', '    \n', '    function calculateProfitPercent(uint _balance, uint _totalPersons) private pure returns (uint) {\n', '        if (_balance >= 8e20 || _totalPersons == 1) // 800 ETH\n', '            return 95;\n', '        else if (_balance >= 4e20) // 400 ETH\n', '            return 94;\n', '        else if (_balance >= 2e20) // 200 ETH\n', '            return 93;\n', '        else if (_balance >= 1e20) // 100 ETH\n', '            return 92;\n', '        else if (_balance >= 5e19) // 50 ETH\n', '            return 91;\n', '        else\n', '            return 90;\n', '    }\n', '    \n', '    function calculateSupportPercent(uint _amount) private pure returns (uint) {\n', '        return _amount * supportPercent / 100;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']