['// pragma solidity ^0.4.0;\n', 'contract MigrationAgent {\n', '    event Migrated( uint indexed id, address indexed from, uint amount, string eos_account_name);\n', '    event NameRegistered(address indexed from, string eos_account_name);\n', '\n', '    struct Migration {\n', '        uint id;\n', '        address participant;\n', '        string eos_account_name;\n', '        uint amount;\n', '    }\n', '\n', '    address game_address = 0xb1;\n', '    address public token_address = 0x089A6D83282Fb8988A656189F1E7A73FA6C1caC2;\n', '    uint public migration_id = 0;\n', '    \n', '    mapping(address => string) public registrations;\n', '    mapping(uint => Migration) public migrations;\n', '    mapping(address => Migration[]) public participant_migrations;\n', '\n', '    function migrateFrom(address participant, uint amount) public {\n', '        if (msg.sender != token_address || !participantRegistered(participant) || amount < 0.0001 ether) revert();\n', '        if (participant != game_address)\n', '        {\n', '            var migration = Migration(migration_id, participant, registrations[participant], amount);\n', '            participant_migrations[participant].push(migration);\n', '            migrations[migration_id] = migration;\n', '            emit Migrated(migration_id, participant, amount, registrations[participant]);\n', '            migration_id++;\n', '        }\n', '    }\n', '    \n', '    function register(string eos_account_name) public\n', '    {\n', '        registrations[msg.sender] = eos_account_name;\n', '        if (participantRegistered(msg.sender))\n', '            emit NameRegistered(msg.sender, eos_account_name);\n', '    }\n', '    \n', '    function participantRegistered(address participant) public constant returns (bool)\n', '    {\n', '        return participant == game_address || keccak256(registrations[participant]) != keccak256("");\n', '    }\n', '}']
['// pragma solidity ^0.4.0;\n', 'contract MigrationAgent {\n', '    event Migrated( uint indexed id, address indexed from, uint amount, string eos_account_name);\n', '    event NameRegistered(address indexed from, string eos_account_name);\n', '\n', '    struct Migration {\n', '        uint id;\n', '        address participant;\n', '        string eos_account_name;\n', '        uint amount;\n', '    }\n', '\n', '    address game_address = 0xb1;\n', '    address public token_address = 0x089A6D83282Fb8988A656189F1E7A73FA6C1caC2;\n', '    uint public migration_id = 0;\n', '    \n', '    mapping(address => string) public registrations;\n', '    mapping(uint => Migration) public migrations;\n', '    mapping(address => Migration[]) public participant_migrations;\n', '\n', '    function migrateFrom(address participant, uint amount) public {\n', '        if (msg.sender != token_address || !participantRegistered(participant) || amount < 0.0001 ether) revert();\n', '        if (participant != game_address)\n', '        {\n', '            var migration = Migration(migration_id, participant, registrations[participant], amount);\n', '            participant_migrations[participant].push(migration);\n', '            migrations[migration_id] = migration;\n', '            emit Migrated(migration_id, participant, amount, registrations[participant]);\n', '            migration_id++;\n', '        }\n', '    }\n', '    \n', '    function register(string eos_account_name) public\n', '    {\n', '        registrations[msg.sender] = eos_account_name;\n', '        if (participantRegistered(msg.sender))\n', '            emit NameRegistered(msg.sender, eos_account_name);\n', '    }\n', '    \n', '    function participantRegistered(address participant) public constant returns (bool)\n', '    {\n', '        return participant == game_address || keccak256(registrations[participant]) != keccak256("");\n', '    }\n', '}']
