['pragma solidity ^0.4.18;\n', '\n', 'contract Token {\n', '    \n', '  function totalSupply() constant returns (uint256 supply) {}\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '  function transfer(address _to,uint256 _value) returns (bool success) {}\n', '  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}\n', '  function approve(address _spender,uint256 _value) returns (bool success) {}\n', '  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '  event Approval(address indexed _owner,address indexed _spender,uint256 _value);\n', '\n', '  uint decimals;\n', '  string name;\n', '}\n', '\n', 'contract SafeMath {\n', '    \n', '  function safeMul(uint a,uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function safeDiv(uint a,uint b) internal returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a,uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a,uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract ShortOrder is SafeMath {\n', '\n', '  address admin;\n', '\n', '  struct Order {\n', '    uint coupon;\n', '    uint balance;\n', '    uint shortBalance;\n', '    bool tokenDeposit;\n', '    mapping (address => uint) longBalance;\n', '  }\n', '\n', '  mapping (address => mapping (bytes32 => Order)) orderRecord;\n', '\n', '  event TokenFulfillment(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\n', '  event CouponDeposit(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\n', '  event LongPlace(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint value,uint blockNumber);\n', '  event LongBought(address[2] sellerShort,uint[3] amountNonceExpiry,uint blockNumber);\n', '  event TokenLongExercised(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint amount,uint blockNumber);\n', '  event EthLongExercised(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\n', '  event DonationClaimed(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint balance,uint blockNumber);\n', '  event NonActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint blockNumber);\n', '  event ActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint balance,uint blockNumber);\n', '\n', '  modifier onlyAdmin() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  function ShortOrder() {\n', '    admin = msg.sender;\n', '  }\n', '\n', '  function changeAdmin(address _admin) external onlyAdmin {\n', '    admin = _admin;\n', '  }\n', '  \n', '  function tokenFulfillmentDeposit(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&\n', '      block.number > tokenMinMaxDMWCNonce[3] &&\n', '      block.number <= tokenMinMaxDMWCNonce[4] && \n', '      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\n', '      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2] &&      \n', '      !orderRecord[msg.sender][orderHash].tokenDeposit\n', '    );\n', '    Token(tokenUser[0]).transferFrom(msg.sender,this,tokenMinMaxDMWCNonce[0]);\n', '    orderRecord[msg.sender][orderHash].shortBalance = safeAdd(orderRecord[msg.sender][orderHash].shortBalance,tokenMinMaxDMWCNonce[0]);\n', '    orderRecord[msg.sender][orderHash].tokenDeposit = true;\n', '    TokenFulfillment(tokenUser,tokenMinMaxDMWCNonce,block.number);\n', '  }\n', '\n', '  function depositCoupon(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external payable {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&\n', '      msg.value == tokenMinMaxDMWCNonce[6] &&\n', '      orderRecord[msg.sender][orderHash].coupon == uint(0) &&\n', '      block.number <= tokenMinMaxDMWCNonce[3]\n', '    );\n', '    orderRecord[msg.sender][orderHash].coupon = safeAdd(orderRecord[msg.sender][orderHash].coupon,msg.value);\n', '    CouponDeposit(tokenUser,tokenMinMaxDMWCNonce,block.number);\n', '  }\n', '\n', '  function placeLong(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external payable {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '    require(  \n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\n', '      block.number <= tokenMinMaxDMWCNonce[3] &&\n', '      orderRecord[tokenUser[1]][orderHash].coupon == tokenMinMaxDMWCNonce[6] &&\n', '      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\n', '      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2]\n', '    );\n', '    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = safeAdd(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],msg.value);\n', '    orderRecord[tokenUser[1]][orderHash].balance = safeAdd(orderRecord[tokenUser[1]][orderHash].balance,msg.value);\n', '    LongPlace(tokenUser,tokenMinMaxDMWCNonce,msg.value,block.number);\n', '  }\n', '\n', '  function buyLong(address[2] sellerShort,uint[3] amountNonceExpiry,uint8 v,bytes32[3] hashRS) external payable {\n', '    bytes32 longTransferHash = keccak256 (\n', '        sellerShort[0],\n', '        amountNonceExpiry[0],\n', '        amountNonceExpiry[1],\n', '        amountNonceExpiry[2]\n', '    );\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",longTransferHash),v,hashRS[1],hashRS[2]) == sellerShort[1] &&\n', '      block.number <= amountNonceExpiry[2] &&\n', '      msg.value == amountNonceExpiry[0]\n', '    );\n', '    sellerShort[0].transfer(amountNonceExpiry[0]);\n', '    orderRecord[sellerShort[1]][hashRS[0]].longBalance[msg.sender] = orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]];\n', '    orderRecord[sellerShort[1]][hashRS[0]].longBalance[sellerShort[0]] = uint(0);\n', '    LongBought(sellerShort,amountNonceExpiry,block.number);\n', '  }\n', '\n', '  function exerciseLong(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\n', '      block.number > tokenMinMaxDMWCNonce[4] &&\n', '      block.number <= tokenMinMaxDMWCNonce[5] &&\n', '      orderRecord[msg.sender][orderHash].balance > tokenMinMaxDMWCNonce[1] &&\n', '      orderRecord[msg.sender][orderHash].balance <= tokenMinMaxDMWCNonce[2]\n', '    );\n', '    uint couponAmount = safeDiv(safeMul(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],orderRecord[tokenUser[1]][orderHash].coupon),tokenMinMaxDMWCNonce[2]);\n', '    if(orderRecord[msg.sender][orderHash].tokenDeposit) {\n', '      uint amount = safeDiv(safeMul(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],orderRecord[tokenUser[1]][orderHash].shortBalance),tokenMinMaxDMWCNonce[2]);\n', '      msg.sender.transfer(couponAmount);\n', '      Token(tokenUser[0]).transfer(msg.sender,amount);\n', '      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\n', '      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\n', '      orderRecord[tokenUser[1]][orderHash].shortBalance = safeSub(orderRecord[tokenUser[1]][orderHash].shortBalance,amount);\n', '      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\n', '      TokenLongExercised(tokenUser,tokenMinMaxDMWCNonce,amount,block.number);\n', '    }\n', '    else if(!orderRecord[msg.sender][orderHash].tokenDeposit){\n', '      msg.sender.transfer(safeAdd(couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]));\n', '      orderRecord[tokenUser[1]][orderHash].coupon = safeSub(orderRecord[tokenUser[1]][orderHash].coupon,couponAmount);\n', '      orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\n', '      orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0); \n', '      EthLongExercised(tokenUser,tokenMinMaxDMWCNonce,block.number);\n', '    }\n', '  }\n', '\n', '  function claimDonations(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external onlyAdmin {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\n', '      block.number > tokenMinMaxDMWCNonce[5]\n', '    );\n', '    admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance));\n', '    Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance);\n', '    orderRecord[tokenUser[1]][orderHash].balance = uint(0);\n', '    orderRecord[tokenUser[1]][orderHash].coupon = uint(0);\n', '    orderRecord[tokenUser[1]][orderHash].shortBalance = uint(0);\n', '    DonationClaimed(tokenUser,tokenMinMaxDMWCNonce,orderRecord[tokenUser[1]][orderHash].balance,block.number);\n', '  }\n', '\n', '  function nonActivationShortWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&\n', '      block.number > tokenMinMaxDMWCNonce[3] &&\n', '      orderRecord[tokenUser[1]][orderHash].balance < tokenMinMaxDMWCNonce[1]\n', '    );\n', '    msg.sender.transfer(orderRecord[msg.sender][orderHash].coupon);\n', '    orderRecord[msg.sender][orderHash].coupon = uint(0);\n', '    NonActivationWithdrawal(tokenUser,tokenMinMaxDMWCNonce,block.number);\n', '  }\n', '\n', '  function nonActivationWithdrawal(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce,uint8 v,bytes32[2] rs) external {\n', '    bytes32 orderHash = keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '\n', '    require(\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&\n', '      block.number > tokenMinMaxDMWCNonce[3] &&\n', '      block.number <= tokenMinMaxDMWCNonce[5] &&\n', '      orderRecord[tokenUser[1]][orderHash].balance < tokenMinMaxDMWCNonce[1]\n', '    );\n', '    msg.sender.transfer(orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\n', '    orderRecord[tokenUser[1]][orderHash].balance = safeSub(orderRecord[tokenUser[1]][orderHash].balance,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);\n', '    orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender] = uint(0);\n', '    ActivationWithdrawal(tokenUser,tokenMinMaxDMWCNonce,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender],block.number);\n', '  }\n', '\n', '  function returnBalance(address _creator,bytes32 orderHash) external constant returns (uint) {\n', '    return orderRecord[_creator][orderHash].balance;\n', '  }\n', '\n', '  function returnTokenBalance(address _creator,bytes32 orderHash) external constant returns (uint) {\n', '    return orderRecord[_creator][orderHash].shortBalance;\n', '  }\n', '\n', '  function returnUserBalance(address[2] creatorUser,bytes32 orderHash) external constant returns (uint) {\n', '    return orderRecord[creatorUser[0]][orderHash].longBalance[creatorUser[1]];\n', '  }\n', '\n', '  function returnCoupon(address _creator,bytes32 orderHash) external constant returns (uint) {\n', '    return orderRecord[_creator][orderHash].coupon;\n', '  }\n', '\n', '  function returnTokenDepositState(address _creator,bytes32 orderHash) external constant returns (bool) {\n', '    return orderRecord[_creator][orderHash].tokenDeposit;\n', '  }\n', ' \n', '  function returnHash(address[2] tokenUser,uint[8] tokenMinMaxDMWCNonce)  external pure returns (bytes32) {\n', '    return  \n', '      keccak256 (\n', '        tokenUser[0],\n', '        tokenUser[1],\n', '        tokenMinMaxDMWCNonce[0],\n', '        tokenMinMaxDMWCNonce[1], \n', '        tokenMinMaxDMWCNonce[2],\n', '        tokenMinMaxDMWCNonce[3],\n', '        tokenMinMaxDMWCNonce[4],\n', '        tokenMinMaxDMWCNonce[5], \n', '        tokenMinMaxDMWCNonce[6],\n', '        tokenMinMaxDMWCNonce[7]\n', '      );\n', '  }\n', '\n', '\n', '  function returnAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\n', '    return ecrecover(orderHash,v,rs[0],rs[1]);\n', '  }\n', '\n', '  function returnHashLong(address seller,uint[3] amountNonceExpiry)  external pure returns (bytes32) {\n', '    return keccak256(seller,amountNonceExpiry[0],amountNonceExpiry[1],amountNonceExpiry[2]);\n', '  }\n', '\n', '  function returnLongAddress(bytes32 orderHash,uint8 v,bytes32[2] rs) external pure returns (address) {\n', '    return ecrecover(orderHash,v,rs[0],rs[1]);\n', '  }\n', '\n', '  function returnCoupon(address[3] tokenUserSender,bytes32 orderHash) external view returns (uint){\n', '    return orderRecord[tokenUserSender[1]][orderHash].coupon;\n', '  }\n', '\n', '  function returnLongTokenAmount(address[3] tokenUserSender,bytes32 orderHash) external view returns (uint) {\n', '    return orderRecord[tokenUserSender[1]][orderHash].shortBalance;\n', '  }\n', '\n', '}']