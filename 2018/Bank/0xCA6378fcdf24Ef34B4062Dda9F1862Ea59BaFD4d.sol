['pragma solidity ^0.4.23;\n', '\n', 'contract God {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyTokenHolders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyProfitsHolders() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    event onInjectEtherFromIco(uint _incomingEthereum, uint _dividends, uint profitPerShare_);\n', '\n', '    event onInjectEtherToDividend(address sender, uint _incomingEthereum, uint profitPerShare_);\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "God";\n', '    string public symbol = "God";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2 ** 64;\n', '\n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '\n', '    uint constant internal  MIN_TOKEN_TRANSFER = 1e10;\n', '\n', '\n', '    /*================================\n', '     =            DATASETS            =\n', '     ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    // administrator list (see above on what they can do)\n', '    address internal owner;\n', '    mapping(address => bool) public administrators;\n', '\n', '    address bankAddress;\n', '    mapping(address => bool) public contractAddresses;\n', '\n', '    int internal contractPayout = 0;\n', '\n', '    bool internal isProjectBonus = true;\n', '    uint internal projectBonus = 0;\n', '    uint internal projectBonusRate = 10;  // 1/10\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    constructor()\n', '    public\n', '    {\n', '        // add administrators here\n', '        owner = msg.sender;\n', '        administrators[owner] = true;\n', '    }\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '    public\n', '    payable\n', '    returns (uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '    public\n', '    payable\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '\n', '    function injectEtherFromIco()\n', '    public\n', '    payable\n', '    {\n', '        uint _incomingEthereum = msg.value;\n', '        require(_incomingEthereum > 0);\n', '        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '\n', '        if (isProjectBonus) {\n', '            uint temp = SafeMath.div(_dividends, projectBonusRate);\n', '            _dividends = SafeMath.sub(_dividends, temp);\n', '            projectBonus = SafeMath.add(projectBonus, temp);\n', '        }\n', '        profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '        emit onInjectEtherFromIco(_incomingEthereum, _dividends, profitPerShare_);\n', '    }\n', '\n', '    function injectEtherToDividend()\n', '    public\n', '    payable\n', '    {\n', '        uint _incomingEthereum = msg.value;\n', '        require(_incomingEthereum > 0);\n', '        profitPerShare_ += (_incomingEthereum * magnitude / (tokenSupply_));\n', '        emit onInjectEtherToDividend(msg.sender, _incomingEthereum, profitPerShare_);\n', '    }\n', '\n', '    function injectEther()\n', '    public\n', '    payable\n', '    {}\n', '\n', '    /**\n', '     * Converts all of caller&#39;s dividends to tokens.\n', '     */\n', '    function reinvest()\n', '    onlyProfitsHolders()\n', '    public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false);\n', '        // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '    public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '    onlyProfitsHolders()\n', '    public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false);\n', '        // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '    onlyTokenHolders()\n', '    public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        if (isProjectBonus) {\n', '            uint temp = SafeMath.div(_dividends, projectBonusRate);\n', '            _dividends = SafeMath.sub(_dividends, temp);\n', '            projectBonus = SafeMath.add(projectBonus, temp);\n', '        }\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * Remember, there&#39;s a 10% fee here as well.\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '    onlyTokenHolders()\n', '    public\n', '    returns (bool)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        require(_amountOfTokens >= MIN_TOKEN_TRANSFER\n', '        && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        bytes memory empty;\n', '        transferFromInternal(_customerAddress, _toAddress, _amountOfTokens, empty);\n', '        return true;\n', '    }\n', '\n', '    function transferFromInternal(address _from, address _toAddress, uint _amountOfTokens, bytes _data)\n', '    internal\n', '    {\n', '        require(_toAddress != address(0x0));\n', '        uint fromLength;\n', '        uint toLength;\n', '        assembly {\n', '            fromLength := extcodesize(_from)\n', '            toLength := extcodesize(_toAddress)\n', '        }\n', '\n', '        if (fromLength > 0 && toLength <= 0) {\n', '            // contract to human\n', '            contractAddresses[_from] = true;\n', '            contractPayout -= (int) (_amountOfTokens);\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '            payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '        } else if (fromLength <= 0 && toLength > 0) {\n', '            // human to contract\n', '            contractAddresses[_toAddress] = true;\n', '            contractPayout += (int) (_amountOfTokens);\n', '            tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\n', '            payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '        } else if (fromLength > 0 && toLength > 0) {\n', '            // contract to contract\n', '            contractAddresses[_from] = true;\n', '            contractAddresses[_toAddress] = true;\n', '        } else {\n', '            // human to human\n', '            payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '            payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '        }\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '\n', '        // to contract\n', '        if (toLength > 0) {\n', '            ERC223Receiving receiver = ERC223Receiving(_toAddress);\n', '            receiver.tokenFallback(_from, _amountOfTokens, _data);\n', '        }\n', '\n', '        // fire event\n', '        emit Transfer(_from, _toAddress, _amountOfTokens);\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _toAddress, uint _amountOfTokens)\n', '    public\n', '    returns (bool)\n', '    {\n', '        // Setup variables\n', '        address _customerAddress = _from;\n', '        bytes memory empty;\n', '        // Make sure we own the tokens we&#39;re transferring, are ALLOWED to transfer that many tokens,\n', '        // and are transferring at least one full token.\n', '        require(_amountOfTokens >= MIN_TOKEN_TRANSFER\n', '        && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]\n', '        && _amountOfTokens <= allowed[_customerAddress][msg.sender]);\n', '\n', '        transferFromInternal(_from, _toAddress, _amountOfTokens, empty);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amountOfTokens);\n', '\n', '        // Good old ERC20.\n', '        return true;\n', '\n', '    }\n', '\n', '    function transferTo(address _from, address _to, uint _amountOfTokens, bytes _data)\n', '    public\n', '    {\n', '        if (_from != msg.sender) {\n', '            require(_amountOfTokens >= MIN_TOKEN_TRANSFER\n', '            && _amountOfTokens <= tokenBalanceLedger_[_from]\n', '            && _amountOfTokens <= allowed[_from][msg.sender]);\n', '            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _amountOfTokens);\n', '        }\n', '        else {\n', '            require(_amountOfTokens >= MIN_TOKEN_TRANSFER\n', '            && _amountOfTokens <= tokenBalanceLedger_[_from]);\n', '        }\n', '        transferFromInternal(_from, _to, _amountOfTokens, _data);\n', '    }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '\n', '    function setBank(address _identifier, uint256 value)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        bankAddress = _identifier;\n', '        contractAddresses[_identifier] = true;\n', '        tokenBalanceLedger_[_identifier] = value;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        require(_identifier != owner);\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function getContractPayout()\n', '    onlyAdministrator()\n', '    public\n', '    view\n', '    returns (int)\n', '    {\n', '        return contractPayout;\n', '    }\n', '\n', '    function getIsProjectBonus()\n', '    onlyAdministrator()\n', '    public\n', '    view\n', '    returns (bool)\n', '    {\n', '        return isProjectBonus;\n', '    }\n', '\n', '    function setIsProjectBonus(bool value)\n', '    onlyAdministrator()\n', '    public\n', '    {\n', '        isProjectBonus = value;\n', '    }\n', '\n', '    function getProjectBonus()\n', '    onlyAdministrator()\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        return projectBonus;\n', '    }\n', '\n', '    function takeProjectBonus(address to, uint value)\n', '    onlyAdministrator()\n', '    public {\n', '        require(value <= projectBonus);\n', '        to.transfer(value);\n', '    }\n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '\n', '    // erc 20\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return getBalance(_customerAddress);\n', '    }\n', '\n', '    function getProfitPerShare()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return (uint256) ((int256)(tokenSupply_*profitPerShare_)) / magnitude;\n', '    }\n', '\n', '    function getContractETH()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '    view\n', '    public\n', '    returns (uint256)\n', '    {\n', '        if(contractAddresses[_customerAddress]){\n', '            return 0;\n', '        }\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function getBalance(address _customerAddress)\n', '    view\n', '    public\n', '    returns (uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '    view\n', '    public\n', '    returns (uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '    internal\n', '    returns (uint256)\n', '    {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '\n', '        if (isProjectBonus) {\n', '            uint temp = SafeMath.div(_undividedDividends, projectBonusRate);\n', '            _dividends = SafeMath.sub(_dividends, temp);\n', '            projectBonus = SafeMath.add(projectBonus, temp);\n', '        }\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if (\n', '        // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if (tokenSupply_ > 0) {\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '        (\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (sqrt\n', '        (\n', '            (_tokenPriceInitial ** 2)\n', '            +\n', '            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n', '            +\n', '            (((tokenPriceIncremental_) ** 2) * (tokenSupply_ ** 2))\n', '            +\n', '            (2 * (tokenPriceIncremental_) * _tokenPriceInitial * tokenSupply_)\n', '        )\n', '            ), _tokenPriceInitial\n', '        )\n', '        ) / (tokenPriceIncremental_)\n', '        ) - (tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens)\n', '    internal\n', '    view\n', '    returns (uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (\n', '            (\n', '            (\n', '            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n', '            ) - tokenPriceIncremental_\n', '            ) * (tokens_ - 1e18)\n', '            ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n', '        )\n', '        / 1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC223Receiving {\n', '    function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']