['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/NetworkSettings.sol\n', '\n', '// solhint-disable-line\n', '\n', '\n', '\n', '/// @title Atonomi Network Settings\n', '/// @notice This contract controls all owner configurable variables in the network\n', 'contract NetworkSettings is Ownable {\n', '    /// @title Registration Fee\n', '    /// @notice Manufacturer pays token to register a device\n', '    /// @notice Manufacturer will recieve a share in any reputation updates for a device\n', '    uint256 public registrationFee;\n', '\n', '    /// @title Activiation Fee\n', '    /// @notice Manufacturer or Device Owner pays token to activate device\n', '    uint256 public activationFee;\n', '\n', '    /// @title Default Reputation Reward\n', '    /// @notice The default reputation reward set for new manufacturers\n', '    uint256 public defaultReputationReward;\n', '\n', '    /// @title Reputation Share for IRN Nodes\n', '    /// @notice percentage that the irn node or auditor receives (remaining goes to manufacturer)\n', '    uint256 public reputationIRNNodeShare;\n', '\n', '    /// @title Block threshold\n', '    /// @notice the number of blocks that need to pass between reputation updates to gain the full reward\n', '    uint256 public blockThreshold;\n', '\n', '    /// @notice emitted everytime the registration fee changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event RegistrationFeeUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime the activation fee changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event ActivationFeeUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime the default reputation reward changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event DefaultReputationRewardUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime owner changes the contributation share for reputation authors\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _percentage new percentage value\n', '    event ReputationIRNNodeShareUpdated(\n', '        address indexed _sender,\n', '        uint256 _percentage\n', '    );\n', '\n', '    /// @notice emitted everytime the block threshold is changed\n', '    /// @param _sender ethereum account who made the change\n', '    /// @param _newBlockThreshold new value for all token pools\n', '    event RewardBlockThresholdChanged(\n', '        address indexed _sender,\n', '        uint256 _newBlockThreshold\n', '    );\n', '\n', '    /// @notice Constructor for Atonomi Reputation contract\n', '    /// @param _registrationFee initial registration fee on the network\n', '    /// @param _activationFee initial activation fee on the network\n', '    /// @param _defaultReputationReward initial reputation reward on the network\n', '    /// @param _reputationIRNNodeShare share that the reputation author recieves (remaining goes to manufacturer)\n', '    /// @param _blockThreshold the number of blocks that need to pass to receive the full reward\n', '    constructor(\n', '        uint256 _registrationFee,\n', '        uint256 _activationFee,\n', '        uint256 _defaultReputationReward,\n', '        uint256 _reputationIRNNodeShare,\n', '        uint256 _blockThreshold) public {\n', '        require(_activationFee > 0, "activation fee must be greater than 0");\n', '        require(_registrationFee > 0, "registration fee must be greater than 0");\n', '        require(_defaultReputationReward > 0, "default reputation reward must be greater than 0");\n', '        require(_reputationIRNNodeShare > 0, "new share must be larger than zero");\n', '        require(_reputationIRNNodeShare < 100, "new share must be less than 100");\n', '\n', '        activationFee = _activationFee;\n', '        registrationFee = _registrationFee;\n', '        defaultReputationReward = _defaultReputationReward;\n', '        reputationIRNNodeShare = _reputationIRNNodeShare;\n', '        blockThreshold = _blockThreshold;\n', '    }\n', '\n', '    /// @notice sets the global registration fee\n', '    /// @param _registrationFee new fee for registrations in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setRegistrationFee(uint256 _registrationFee) public onlyOwner returns (bool) {\n', '        require(_registrationFee > 0, "new registration fee must be greater than zero");\n', '        require(_registrationFee != registrationFee, "new registration fee must be different");\n', '        registrationFee = _registrationFee;\n', '        emit RegistrationFeeUpdated(msg.sender, _registrationFee);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global activation fee\n', '    /// @param _activationFee new fee for activations in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setActivationFee(uint256 _activationFee) public onlyOwner returns (bool) {\n', '        require(_activationFee > 0, "new activation fee must be greater than zero");\n', '        require(_activationFee != activationFee, "new activation fee must be different");\n', '        activationFee = _activationFee;\n', '        emit ActivationFeeUpdated(msg.sender, _activationFee);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the default reputation reward for new manufacturers\n', '    /// @param _defaultReputationReward new reward for reputation score changes in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setDefaultReputationReward(uint256 _defaultReputationReward) public onlyOwner returns (bool) {\n', '        require(_defaultReputationReward > 0, "new reputation reward must be greater than zero");\n', '        require(_defaultReputationReward != defaultReputationReward, "new reputation reward must be different");\n', '        defaultReputationReward = _defaultReputationReward;\n', '        emit DefaultReputationRewardUpdated(msg.sender, _defaultReputationReward);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global reputation reward share allotted to the authors and manufacturers\n', '    /// @param _reputationIRNNodeShare new percentage of the reputation reward allotted to author\n', '    /// @return true if successful, otherwise false\n', '    function setReputationIRNNodeShare(uint256 _reputationIRNNodeShare) public onlyOwner returns (bool) {\n', '        require(_reputationIRNNodeShare > 0, "new share must be larger than zero");\n', '        require(_reputationIRNNodeShare < 100, "new share must be less than to 100");\n', '        require(reputationIRNNodeShare != _reputationIRNNodeShare, "new share must be different");\n', '        reputationIRNNodeShare = _reputationIRNNodeShare;\n', '        emit ReputationIRNNodeShareUpdated(msg.sender, _reputationIRNNodeShare);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global block threshold for rewards\n', '    /// @param _newBlockThreshold new value for all token pools\n', '    /// @return true if successful, otherwise false\n', '    function setRewardBlockThreshold(uint _newBlockThreshold) public onlyOwner returns (bool) {\n', '        require(_newBlockThreshold != blockThreshold, "must be different");\n', '        blockThreshold = _newBlockThreshold;\n', '        emit RewardBlockThresholdChanged(msg.sender, _newBlockThreshold);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/NetworkSettings.sol\n', '\n', '// solhint-disable-line\n', '\n', '\n', '\n', '/// @title Atonomi Network Settings\n', '/// @notice This contract controls all owner configurable variables in the network\n', 'contract NetworkSettings is Ownable {\n', '    /// @title Registration Fee\n', '    /// @notice Manufacturer pays token to register a device\n', '    /// @notice Manufacturer will recieve a share in any reputation updates for a device\n', '    uint256 public registrationFee;\n', '\n', '    /// @title Activiation Fee\n', '    /// @notice Manufacturer or Device Owner pays token to activate device\n', '    uint256 public activationFee;\n', '\n', '    /// @title Default Reputation Reward\n', '    /// @notice The default reputation reward set for new manufacturers\n', '    uint256 public defaultReputationReward;\n', '\n', '    /// @title Reputation Share for IRN Nodes\n', '    /// @notice percentage that the irn node or auditor receives (remaining goes to manufacturer)\n', '    uint256 public reputationIRNNodeShare;\n', '\n', '    /// @title Block threshold\n', '    /// @notice the number of blocks that need to pass between reputation updates to gain the full reward\n', '    uint256 public blockThreshold;\n', '\n', '    /// @notice emitted everytime the registration fee changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event RegistrationFeeUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime the activation fee changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event ActivationFeeUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime the default reputation reward changes\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _amount new fee value in ATMI tokens\n', '    event DefaultReputationRewardUpdated(\n', '        address indexed _sender,\n', '        uint256 _amount\n', '    );\n', '\n', '    /// @notice emitted everytime owner changes the contributation share for reputation authors\n', '    /// @param _sender ethereum account of participant that made the change\n', '    /// @param _percentage new percentage value\n', '    event ReputationIRNNodeShareUpdated(\n', '        address indexed _sender,\n', '        uint256 _percentage\n', '    );\n', '\n', '    /// @notice emitted everytime the block threshold is changed\n', '    /// @param _sender ethereum account who made the change\n', '    /// @param _newBlockThreshold new value for all token pools\n', '    event RewardBlockThresholdChanged(\n', '        address indexed _sender,\n', '        uint256 _newBlockThreshold\n', '    );\n', '\n', '    /// @notice Constructor for Atonomi Reputation contract\n', '    /// @param _registrationFee initial registration fee on the network\n', '    /// @param _activationFee initial activation fee on the network\n', '    /// @param _defaultReputationReward initial reputation reward on the network\n', '    /// @param _reputationIRNNodeShare share that the reputation author recieves (remaining goes to manufacturer)\n', '    /// @param _blockThreshold the number of blocks that need to pass to receive the full reward\n', '    constructor(\n', '        uint256 _registrationFee,\n', '        uint256 _activationFee,\n', '        uint256 _defaultReputationReward,\n', '        uint256 _reputationIRNNodeShare,\n', '        uint256 _blockThreshold) public {\n', '        require(_activationFee > 0, "activation fee must be greater than 0");\n', '        require(_registrationFee > 0, "registration fee must be greater than 0");\n', '        require(_defaultReputationReward > 0, "default reputation reward must be greater than 0");\n', '        require(_reputationIRNNodeShare > 0, "new share must be larger than zero");\n', '        require(_reputationIRNNodeShare < 100, "new share must be less than 100");\n', '\n', '        activationFee = _activationFee;\n', '        registrationFee = _registrationFee;\n', '        defaultReputationReward = _defaultReputationReward;\n', '        reputationIRNNodeShare = _reputationIRNNodeShare;\n', '        blockThreshold = _blockThreshold;\n', '    }\n', '\n', '    /// @notice sets the global registration fee\n', '    /// @param _registrationFee new fee for registrations in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setRegistrationFee(uint256 _registrationFee) public onlyOwner returns (bool) {\n', '        require(_registrationFee > 0, "new registration fee must be greater than zero");\n', '        require(_registrationFee != registrationFee, "new registration fee must be different");\n', '        registrationFee = _registrationFee;\n', '        emit RegistrationFeeUpdated(msg.sender, _registrationFee);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global activation fee\n', '    /// @param _activationFee new fee for activations in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setActivationFee(uint256 _activationFee) public onlyOwner returns (bool) {\n', '        require(_activationFee > 0, "new activation fee must be greater than zero");\n', '        require(_activationFee != activationFee, "new activation fee must be different");\n', '        activationFee = _activationFee;\n', '        emit ActivationFeeUpdated(msg.sender, _activationFee);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the default reputation reward for new manufacturers\n', '    /// @param _defaultReputationReward new reward for reputation score changes in ATMI tokens\n', '    /// @return true if successful, otherwise false\n', '    function setDefaultReputationReward(uint256 _defaultReputationReward) public onlyOwner returns (bool) {\n', '        require(_defaultReputationReward > 0, "new reputation reward must be greater than zero");\n', '        require(_defaultReputationReward != defaultReputationReward, "new reputation reward must be different");\n', '        defaultReputationReward = _defaultReputationReward;\n', '        emit DefaultReputationRewardUpdated(msg.sender, _defaultReputationReward);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global reputation reward share allotted to the authors and manufacturers\n', '    /// @param _reputationIRNNodeShare new percentage of the reputation reward allotted to author\n', '    /// @return true if successful, otherwise false\n', '    function setReputationIRNNodeShare(uint256 _reputationIRNNodeShare) public onlyOwner returns (bool) {\n', '        require(_reputationIRNNodeShare > 0, "new share must be larger than zero");\n', '        require(_reputationIRNNodeShare < 100, "new share must be less than to 100");\n', '        require(reputationIRNNodeShare != _reputationIRNNodeShare, "new share must be different");\n', '        reputationIRNNodeShare = _reputationIRNNodeShare;\n', '        emit ReputationIRNNodeShareUpdated(msg.sender, _reputationIRNNodeShare);\n', '        return true;\n', '    }\n', '\n', '    /// @notice sets the global block threshold for rewards\n', '    /// @param _newBlockThreshold new value for all token pools\n', '    /// @return true if successful, otherwise false\n', '    function setRewardBlockThreshold(uint _newBlockThreshold) public onlyOwner returns (bool) {\n', '        require(_newBlockThreshold != blockThreshold, "must be different");\n', '        blockThreshold = _newBlockThreshold;\n', '        emit RewardBlockThresholdChanged(msg.sender, _newBlockThreshold);\n', '        return true;\n', '    }\n', '}']
