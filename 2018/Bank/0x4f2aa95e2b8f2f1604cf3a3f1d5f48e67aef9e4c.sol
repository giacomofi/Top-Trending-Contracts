['pragma solidity 0.4.24;\n', 'contract Owned \n', '{\n', '    address public owner;\n', '    address public ownerCandidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        ownerCandidate = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == ownerCandidate);  \n', '        owner = ownerCandidate;\n', '    }\n', '}\n', '\n', 'contract Priced\n', '{\n', '    modifier costs(uint price)\n', '    {\n', '        //They must pay exactly 0.5 eth\n', '        require(msg.value == price);\n', '        _;\n', '    }\n', '}\n', '//UPDATED 9/8/18: Added auto unlock\n', '//                Changed the Register to track people so it does not have to loop through \n', '//UPDATED 9/10/18: Changed it to only accept 0.5 eth, anything over or under will just fail\n', '\n', 'contract Teris is Owned, Priced\n', '{\n', '    string public debugString;\n', '    \n', '    //Wallets\n', '    address adminWallet = 0x45FEbD925Aa0439eE6bF2ffF5996201e199Efb5b;\n', '\n', '    //wallet rotations\n', '    uint8 public devWalletRotation = 0;\n', '    \n', '    //To set up for only 4 active transactions\n', '    mapping(address => uint8) transactionLimits;\n', '    \n', '    //Lock the contract after 640 transactions! (uint16 stores up to 65,535)\n', '    // Changednge to 10 for testing\n', '    uint256 maxTransactions = 640;\n', '    uint16 totalTransactions;\n', '    modifier notLocked()\n', '    {\n', '        require(!isLocked());\n', '        _;\n', '    }\n', '    \n', '    //Structs\n', '    struct Participant\n', '    {\n', '        address ethAddress;\n', '        bool paid;\n', '    }\n', '    \n', '    Participant[] allParticipants;\n', '    uint16 lastPaidParticipant;\n', '    \n', '    //Set up a blacklist\n', '     mapping(address => bool) blacklist;\n', '\n', '    bool testing = false;\n', '    \n', '    /* ------------------------------------------------\n', '    //              MAIN FUNCTIONS\n', '    ---------------------------------------------------*/   \n', '\n', '    //Silentflame - Added costs(500 finney)\n', '    function register() public payable costs(500 finney) notLocked\n', '    {\n', '        //Silentflame - Added to remove exponential gas cost increase on register\n', '        transactionLimits[msg.sender]++;    \n', '        \n', '        if(!testing)\n', '        {\n', '            require(_checkTransactions(msg.sender));\n', '        }\n', '        \n', '        require(!blacklist[msg.sender]);\n', '            \n', '        \n', '        //transfer eth to admin wallet\n', '        _payFees();\n', '        \n', '        //add user to the participant list, as unpaid\n', '        allParticipants.push(Participant(msg.sender, false));\n', '        \n', '        //Count this transaction\n', '        totalTransactions++;\n', '        \n', '        //try and pay whoever you can\n', '        _payout();\n', '        \n', '    }\n', '    \n', '    /* ------------------------------------------------\n', '    //              INTERNAL FUNCTIONS\n', '    ---------------------------------------------------*/\n', '    \n', '    function _checkTransactions(address _toCheck) private view returns(bool)\n', '    {\n', '        //Silentflame - Removed old logic!\n', '        \n', '        //Silentflame - Added to remove exponential gas cost increase on register\n', '        if(transactionLimits[_toCheck] > 4)\n', '            return false;\n', '        else\n', '            return true;\n', '        \n', '        \n', '    }\n', '    \n', '    //Pays the Admin fees\n', '    function _payFees() private\n', '    {\n', '        adminWallet.transfer(162500000000000000); // .1625\n', '   \n', '\n', '        address walletAddress ;\n', '        devWalletRotation++;\n', '        \n', '        \n', '        if(devWalletRotation >= 7)\n', '            devWalletRotation = 1;\n', '        \n', '        if(devWalletRotation == 1)\n', '            walletAddress = 0x556FD37b59D20C62A778F0610Fb1e905b112b7DE;\n', '        else if(devWalletRotation == 2)\n', '            walletAddress = 0x92f94ecdb1ba201cd0e4a0a9a9bccb1faa3a3de0;\n', '        else if(devWalletRotation == 3)\n', '            walletAddress = 0x41271507434E21dBd5F09624181d7Cd70Bf06Cbf;\n', '        else if (devWalletRotation == 4)\n', '            walletAddress = 0xbeb07c2d5beca948eb7d7eaf60a30e900f470f8d;\n', '        else if (devWalletRotation == 5)\n', '            walletAddress = 0xcd7c53462067f0d0b8809be9e3fb143679a270bb;\n', '        else if (devWalletRotation == 6)\n', '            walletAddress = 0x9184B1D0106c1b7663D4C3bBDBF019055BB813aC;\n', '        else\n', '            walletAddress = adminWallet;\n', '            \n', '            \n', '            \n', '        \n', '        walletAddress.transfer(25000000000000000);\n', '        \n', '\n', '    }\n', '\n', '    //Tries to pay people, starting from the last paid transaction\n', '    function _payout() private\n', '    {\n', '\n', '        for(uint16 i = lastPaidParticipant; i < allParticipants.length; i++)\n', '        {\n', '            if(allParticipants[i].paid)\n', '            {\n', '                lastPaidParticipant = i;\n', '                continue;\n', '            }\n', '            else\n', '            {\n', '                if(address(this).balance < 625000000000000000)\n', '                    break;\n', '                \n', '                allParticipants[i].ethAddress.transfer(625000000000000000);\n', '                allParticipants[i].paid = true;\n', '                transactionLimits[allParticipants[i].ethAddress]--; //Silentflame - added to remove gas cost on register\n', '                lastPaidParticipant = i;\n', '            }\n', '        }\n', '        \n', '        //Silentflame attemptAutoUnlock\n', '        if(lastPaidParticipant >= maxTransactions)\n', '            _unlockContract();\n', '    }\n', '    \n', '    function _unlockContract() internal\n', '    {\n', '        //Clear all the transaction limits\n', '        for(uint256 i = 0; i < allParticipants.length; i++)\n', '        {\n', '            transactionLimits[allParticipants[i].ethAddress] = 0;\n', '        }\n', '        \n', '        //delete all the participants\n', '        delete allParticipants;\n', '\n', '        lastPaidParticipant = 0;\n', '        \n', '        //If there is any remaining funds (there shouldnt be) send it to trading wallet\n', '        adminWallet.transfer(address(this).balance);\n', '        totalTransactions = 0;\n', '    }\n', '\n', '    /* ------------------------------------------------\n', '    //                ADMIN FUNCTIONS\n', '    ---------------------------------------------------*/\n', '    function changeMaxTransactions(uint256 _amount) public onlyOwner\n', '    {\n', '        maxTransactions = _amount;\n', '    }\n', '    \n', '    function unlockContract() public onlyOwner\n', '    {\n', '         //Clear all the transaction limits\n', '        for(uint256 i = 0; i < allParticipants.length; i++)\n', '        {\n', '            transactionLimits[allParticipants[i].ethAddress] = 0;\n', '        }\n', '        \n', '        //delete all the participants\n', '        delete allParticipants;\n', '\n', '        lastPaidParticipant = 0;\n', '        \n', '        //If there is any remaining funds (there shouldnt be) send it to trading wallet\n', '        adminWallet.transfer(address(this).balance);\n', '        totalTransactions = 0;       \n', '    }\n', '\n', '    //Allows an injection to add balance into the contract without\n', '    //creating a new contract.\n', '    function addBalance() payable public onlyOwner\n', '    {\n', '        _payout();\n', '    }\n', '    \n', '    function forcePayout() public onlyOwner\n', '    {\n', '        _payout();\n', '    }\n', '    \n', '    function isTesting() public view onlyOwner returns(bool) \n', '    {\n', '        return(testing);\n', '    }\n', '    \n', '    function changeAdminWallet(address _newWallet) public onlyOwner\n', '    {\n', '        adminWallet = _newWallet;\n', '    }\n', '    \n', '    function setTesting(bool _testing) public onlyOwner\n', '    {\n', '        testing = _testing;\n', '    }\n', '    \n', '    function addToBlackList(address _addressToAdd) public onlyOwner\n', '    {\n', '        blacklist[_addressToAdd] = true;\n', '    }\n', '    \n', '    function removeFromBlackList(address _addressToRemove) public onlyOwner\n', '    {\n', '        blacklist[_addressToRemove] = false;\n', '    }\n', '\n', '    /* ------------------------------------------------\n', '    //                      GETTERS\n', '    ---------------------------------------------------*/\n', '    function checkMyTransactions() public view returns(uint256)\n', '    {\n', '        return transactionLimits[msg.sender];\n', '    }\n', '    \n', '    function getPeopleBeforeMe(address _address) public view returns(uint256)\n', '    {\n', '        uint counter = 0;\n', '        \n', '        for(uint16 i = lastPaidParticipant; i < allParticipants.length; i++)\n', '        {\n', '            if(allParticipants[i].ethAddress != _address)\n', '            {\n', '                counter++;\n', '            }\n', '            else\n', '            {\n', '                break;\n', '            }\n', '        }\n', '        \n', '        return counter;\n', '    }\n', '    \n', '    function getMyOwed(address _address) public view returns(uint256)\n', '    {\n', '        uint counter = 0;\n', '        \n', '        for(uint16 i = 0; i < allParticipants.length; i++)\n', '        {\n', '            if(allParticipants[i].ethAddress == _address)\n', '            {\n', '                if(!allParticipants[i].paid)\n', '                {\n', '                    counter++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        return (counter * 625000000000000000);\n', '    }\n', '    \n', '    //For seeing how much balance is in the contract\n', '    function getBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    //For seeing if the contract is locked\n', '    function isLocked() public view returns(bool)\n', '    {\n', '        if(totalTransactions >= maxTransactions)\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '    //For seeing how many transactions a user has put into the system\n', '    function getParticipantTransactions(address _address) public view returns(uint8)\n', '    {\n', '        return transactionLimits[_address];\n', '    }\n', '    \n', '    //For getting the details about a transaction (the address and if the transaction was paid)\n', '    function getTransactionInformation(uint _id) public view returns(address, bool)\n', '    {\n', '        return(allParticipants[_id].ethAddress, allParticipants[_id].paid);\n', '    }\n', '\n', '    //For getting the ID of the last Paid transaction\n', '    function getLastPaidTransaction() public view returns(uint)\n', '    {\n', '        return (lastPaidParticipant);\n', '    }\n', '    \n', '    //For getting how many transactions there are total\n', '    function getNumberOfTransactions() public view returns(uint)\n', '    {\n', '        return (allParticipants.length);\n', '    }\n', '}']