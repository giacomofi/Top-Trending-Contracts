['pragma solidity ^0.4.24;\n', '\n', '/*\n', '* Wall Street Market presents......\n', '\n', '.______    __       __    __   _______      ______  __    __   __  .______        _______      ___      .___  ___.  _______ \n', '|   _  \\  |  |     |  |  |  | |   ____|    /      ||  |  |  | |  | |   _  \\      /  _____|    /   \\     |   \\/   | |   ____|\n', '|  |_)  | |  |     |  |  |  | |  |__      |  ,----&#39;|  |__|  | |  | |  |_)  |    |  |  __     /  ^  \\    |  \\  /  | |  |__   \n', '|   _  <  |  |     |  |  |  | |   __|     |  |     |   __   | |  | |   ___/     |  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|  \n', '|  |_)  | |  `----.|  `--&#39;  | |  |____    |  `----.|  |  |  | |  | |  |         |  |__| |  /  _____  \\  |  |  |  | |  |____ \n', '|______/  |_______| \\______/  |_______|    \\______||__|  |__| |__| | _|          \\______| /__/     \\__\\ |__|  |__| |_______|\n', '                                                                                                                            \n', '(BCHIP)\n', '\n', 'website:    https://wallstreetmarket.tk\n', '\n', 'discord:    https://discord.gg/8AFP9gS\n', '\n', '25% Dividends Fees/Payouts\n', '\n', '5% of Buy In Fee Will Go into Buying Tokens from the contract for "THE 82" group until \n', '400,000 tokens have been distributed.  25% Fee will apply for these transactions.\n', '\n', 'After this the 5% fee will be reserved for use in additional card and lending games using BCHIP tokens.\n', '\n', 'Referral Program pays out 33% of Buy-in/Sell Fees to user of masternode link\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract AcceptsExchange {\n', '    BlueChipGame public tokenContract;\n', '\n', '    function AcceptsExchange(address _tokenContract) public {\n', '        tokenContract = BlueChipGame(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\n', '}\n', '\n', '\n', 'contract BlueChipGame {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyActive(){\n', '        \n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '\n', ' \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "BlueChipExchange";\n', '    string public symbol = "BCHIP";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '\n', '   \n', '    uint256 public totalEthFundRecieved; // total ETH Bond recieved from this contract\n', '    uint256 public totalEthFundCollected; // total ETH Bond collected in this contract\n', '\n', '    // proof of stake (defaults at 25 tokens)\n', '    uint256 public stakingRequirement = 25e18;\n', '\n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 2.5 ether;\n', '    uint256 constant internal ambassadorQuota_ = 2.5 ether;\n', '\n', '    uint constant internal total82Tokens = 390148;\n', '\n', '\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    mapping(uint => address) internal theGroupofEightyTwo;\n', '    mapping(uint => uint) internal theGroupofEightyTwoAmount;\n', '\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '\n', '    uint8 public dividendFee_ = 20; // 20% dividend fee on each buy and sell\n', '    uint8 public fundFee_ = 0; // 5% bond fund fee on each buy and sell\n', '    uint8 public altFundFee_ = 5; // Fund fee rate on each buy and sell for future game\n', '\n', '    bool boolPay82 = false;\n', '    bool bool82Mode = true;\n', '    bool boolContractActive = true;\n', '\n', '    uint bondFund = 0;\n', '\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '\n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '    // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\n', '\n', '    mapping(address => address) public stickyRef;\n', '\n', '     address public bondFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;   //Bond Fund\n', '     address public altFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;    //Alternate Fund for Future Game\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --\n', '    */\n', '    function BlueChipGame()\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[msg.sender] = true;\n', '\n', '    //*  Populate the 82 Mappings \n', '        theGroupofEightyTwo[1] = 0x41fe3738b503cbafd01c1fd8dd66b7fe6ec11b01;\n', '        theGroupofEightyTwo[2] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\n', '        theGroupofEightyTwo[3] = 0xc29a6dd21801e58566df9f003b7011e30724543e;\n', '        theGroupofEightyTwo[4] = 0xc63ea85cc823c440319013d4b30e19b66466642d;\n', '        theGroupofEightyTwo[5] = 0xc6f827796a2e1937fd7f97c4e0a4906c476794f6;\n', '        theGroupofEightyTwo[6] = 0xe74b1ea522b9d558c8e8719c3b1c4a9050b531ca;\n', '        theGroupofEightyTwo[7] = 0x6b90d498062140c607d03fd642377eeaa325703e;\n', '        theGroupofEightyTwo[8] = 0x5f1088110edcba27fc206cdcc326b413b5867361;\n', '        theGroupofEightyTwo[9] = 0xc92fd0e554b12eb10f584819eec2394a9a6f3d1d;\n', '        theGroupofEightyTwo[10] = 0xb62a0ac2338c227748e3ce16d137c6282c9870cf;\n', '        theGroupofEightyTwo[11] = 0x3f6c42409da6faf117095131168949ab81d5947d;\n', '        theGroupofEightyTwo[12] = 0xd54c47b3165508fb5418dbdec59a0d2448eeb3d7;\n', '        theGroupofEightyTwo[13] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\n', '        theGroupofEightyTwo[14] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\n', '        theGroupofEightyTwo[15] = 0x5f5996f9e1960655d6fc00b945fef90672370d9f;\n', '        theGroupofEightyTwo[16] = 0x3825c8ba07166f34ce9a2cd1e08a68b105c82cb9;\n', '        theGroupofEightyTwo[17] = 0x7f3e05b4f258e1c15a0ef49894cffa1d89ceb9d3;\n', '        theGroupofEightyTwo[18] = 0x3191acf877495e5f4e619ec722f6f38839182660;\n', '        theGroupofEightyTwo[19] = 0x14f981ec7b0f59df6e1c56502e272298f221d763;\n', '        theGroupofEightyTwo[20] = 0xae817ec70d8b621bb58a047e63c31445f79e20dc;\n', '        theGroupofEightyTwo[21] = 0xc43af3becac9c810384b69cf061f2d7ec73105c4;\n', '        theGroupofEightyTwo[22] = 0x0743469569ed5cc44a51216a1bf5ad7e7f90f40e;\n', '        theGroupofEightyTwo[23] = 0xff6a4d0ed374ba955048664d6ef5448c6cd1d56a;\n', '        theGroupofEightyTwo[24] = 0x62358a483311b3de29ae987b990e19de6259fa9c;\n', '        theGroupofEightyTwo[25] = 0xa0fea1bcfa32713afdb73b9908f6cb055022e95f;\n', '        theGroupofEightyTwo[26] = 0xb2af816608e1a4d0fb12b81028f32bac76256eba;\n', '        theGroupofEightyTwo[27] = 0x977193d601b364f38ab1a832dbaef69ca7833992;\n', '        theGroupofEightyTwo[28] = 0xed3547f0ed028361685b39cd139aa841df6629ab;\n', '        theGroupofEightyTwo[29] = 0xe40ff298079493cba637d92089e3d1db403974cb;\n', '        theGroupofEightyTwo[30] = 0xae3dc7fa07f9dd030fa56c027e90998ed9fe9d61;\n', '        theGroupofEightyTwo[31] = 0x2dd35e7a6f5fcc28d146c04be641f969f6d1e403;\n', '        theGroupofEightyTwo[32] = 0x2afe21ec5114339922d38546a3be7a0b871d3a0d;\n', '        theGroupofEightyTwo[33] = 0x6696fee394bb224d0154ea6b58737dca827e1960;\n', '        theGroupofEightyTwo[34] = 0xccdf159b1340a35c3567b669c836a88070051314;\n', '        theGroupofEightyTwo[35] = 0x1c3416a34c86f9ddcd05c7828bf5693308d19e0b;\n', '        theGroupofEightyTwo[36] = 0x846dedb19b105edafac2c9410fa2b5e73b596a14;\n', '        theGroupofEightyTwo[37] = 0x3e9294f9b01bc0bcb91413112c75c3225c65d0b3;\n', '        theGroupofEightyTwo[38] = 0x3a5ce61c74343dde474bad4210cccf1dac7b1934;\n', '        theGroupofEightyTwo[39] = 0x38e123f89a7576b2942010ad1f468cc0ea8f9f4b;\n', '        theGroupofEightyTwo[40] = 0xdcd8bad894035b5c554ad450ca84ae6be0b73122;\n', '        theGroupofEightyTwo[41] = 0xcfab320d4379a84fe3736eccf56b09916e35097b;\n', '        theGroupofEightyTwo[42] = 0x12f53c1d7caea0b41010a0e53d89c801ed579b5a;\n', '        theGroupofEightyTwo[43] = 0x5145a296e1bb9d4cf468d6d97d7b6d15700f39ef;\n', '        theGroupofEightyTwo[44] = 0xac707a1b4396a309f4ad01e3da4be607bbf14089;\n', '        theGroupofEightyTwo[45] = 0x38602d1446fe063444b04c3ca5ecde0cba104240;\n', '        theGroupofEightyTwo[46] = 0xc951d3463ebba4e9ec8ddfe1f42bc5895c46ec8f;\n', '        theGroupofEightyTwo[47] = 0x69e566a65d00ad5987359db9b3ced7e1cfe9ac69;\n', '        theGroupofEightyTwo[48] = 0x533b14f6d04ed3c63a68d5e80b7b1f6204fb4213;\n', '        theGroupofEightyTwo[49] = 0x5fa0b03bee5b4e6643a1762df718c0a4a7c1842f;\n', '        theGroupofEightyTwo[50] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[51] = 0xc371117e0adfafe2a3b7b6ba71b7c0352ca7789d;\n', '        theGroupofEightyTwo[52] = 0xcade49e583bc226f19894458f8e2051289f1ac85;\n', '        theGroupofEightyTwo[53] = 0xe3fc95aba6655619db88b523ab487d5273db484f;\n', '        theGroupofEightyTwo[54] = 0x22e4d1433377a2a18452e74fd4ba9eea01824f7d;\n', '        theGroupofEightyTwo[55] = 0x32ae5eff81881a9a70fcacada5bb1925cabca508;\n', '        theGroupofEightyTwo[56] = 0xb864d177c291368b52a63a95eeff36e3731303c1;\n', '        theGroupofEightyTwo[57] = 0x46091f77b224576e224796de5c50e8120ad7d764;\n', '        theGroupofEightyTwo[58] = 0xc6407dd687a179aa11781b8a1e416bd0515923c2;\n', '        theGroupofEightyTwo[59] = 0x2502ce06dcb61ddf5136171768dfc08d41db0a75;\n', '        theGroupofEightyTwo[60] = 0x6b80ca9c66cdcecc39893993df117082cc32bb16;\n', '        theGroupofEightyTwo[61] = 0xa511ddba25ffd74f19a400fa581a15b5044855ce;\n', '        theGroupofEightyTwo[62] = 0xce81d90ae52d34588a95db59b89948c8fec487ce;\n', '        theGroupofEightyTwo[63] = 0x6d60dbf559bbf0969002f19979cad909c2644dad;\n', '        theGroupofEightyTwo[64] = 0x45101255a2bcad3175e6fda4020a9b77e6353a9a;\n', '        theGroupofEightyTwo[65] = 0xe9078d7539e5eac3b47801a6ecea8a9ec8f59375;\n', '        theGroupofEightyTwo[66] = 0x41a21b264f9ebf6cf571d4543a5b3ab1c6bed98c;\n', '        theGroupofEightyTwo[67] = 0x471e8d970c30e61403186b6f245364ae790d14c3;\n', '        theGroupofEightyTwo[68] = 0x6eb7f74ff7f57f7ba45ca71712bccef0588d8f0d;\n', '        theGroupofEightyTwo[69] = 0xe6d6bc079d76dc70fcec5de84721c7b0074d164b;\n', '        theGroupofEightyTwo[70] = 0x3ec5972c2177a08fd5e5f606f19ab262d28ceffe;\n', '        theGroupofEightyTwo[71] = 0x108b87a18877104e07bd870af70dfc2487447262;\n', '        theGroupofEightyTwo[72] = 0x3129354440e4639d2b809ca03d4ccc6277ac8167;\n', '        theGroupofEightyTwo[73] = 0x21572b6a855ee8b1392ed1003ecf3474fa83de3e;\n', '        theGroupofEightyTwo[74] = 0x75ab98f33a7a60c4953cb907747b498e0ee8edf7;\n', '        theGroupofEightyTwo[75] = 0x0fe6967f9a5bb235fc74a63e3f3fc5853c55c083;\n', '        theGroupofEightyTwo[76] = 0x49545640b9f3266d13cce842b298d450c0f8d776;\n', '        theGroupofEightyTwo[77] = 0x9327128ead2495f60d41d3933825ffd8080d4d42;\n', '        theGroupofEightyTwo[78] = 0x82b4e53a7d6bf6c72cc57f8d70dae90a34f0870f;\n', '        theGroupofEightyTwo[79] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[80] = 0x3749d556c167dd73d536a6faaf0bb4ace8f7dab9;\n', '        theGroupofEightyTwo[81] = 0x3039f6857071692b540d9e1e759a0add93af3fed;\n', '        theGroupofEightyTwo[82] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[83] = 0x13015632fa722C12E862fF38c8cF2354cbF26c47;   //This one is for testing\n', '\n', '\n', '        theGroupofEightyTwoAmount[1] = 100000;\n', '        theGroupofEightyTwoAmount[2] = 30000;\n', '        theGroupofEightyTwoAmount[3] = 24400;\n', '        theGroupofEightyTwoAmount[4] = 21111;\n', '        theGroupofEightyTwoAmount[5] = 14200;\n', '        theGroupofEightyTwoAmount[6] = 13788;\n', '        theGroupofEightyTwoAmount[7] = 12003;\n', '        theGroupofEightyTwoAmount[8] = 11000;\n', '        theGroupofEightyTwoAmount[9] = 11000;\n', '        theGroupofEightyTwoAmount[10] = 8800;\n', '        theGroupofEightyTwoAmount[11] = 7000;\n', '        theGroupofEightyTwoAmount[12] = 7000;\n', '        theGroupofEightyTwoAmount[13] = 6000;\n', '        theGroupofEightyTwoAmount[14] = 5400;\n', '        theGroupofEightyTwoAmount[15] = 5301;\n', '        theGroupofEightyTwoAmount[16] = 5110;\n', '        theGroupofEightyTwoAmount[17] = 5018;\n', '        theGroupofEightyTwoAmount[18] = 5000;\n', '        theGroupofEightyTwoAmount[19] = 5000;\n', '        theGroupofEightyTwoAmount[20] = 5000;\n', '        theGroupofEightyTwoAmount[21] = 5000;\n', '        theGroupofEightyTwoAmount[22] = 4400;\n', '        theGroupofEightyTwoAmount[23] = 4146;\n', '        theGroupofEightyTwoAmount[24] = 4086;\n', '        theGroupofEightyTwoAmount[25] = 4000;\n', '        theGroupofEightyTwoAmount[26] = 4000;\n', '        theGroupofEightyTwoAmount[27] = 3500;\n', '        theGroupofEightyTwoAmount[28] = 3216;\n', '        theGroupofEightyTwoAmount[29] = 3200;\n', '        theGroupofEightyTwoAmount[30] = 3183;\n', '        theGroupofEightyTwoAmount[31] = 3100;\n', '        theGroupofEightyTwoAmount[32] = 3001;\n', '        theGroupofEightyTwoAmount[33] = 2205;\n', '        theGroupofEightyTwoAmount[34] = 2036;\n', '        theGroupofEightyTwoAmount[35] = 2000;\n', '        theGroupofEightyTwoAmount[36] = 2000;\n', '        theGroupofEightyTwoAmount[37] = 1632;\n', '        theGroupofEightyTwoAmount[38] = 1600;\n', '        theGroupofEightyTwoAmount[39] = 1500;\n', '        theGroupofEightyTwoAmount[40] = 1500;\n', '        theGroupofEightyTwoAmount[41] = 1478;\n', '        theGroupofEightyTwoAmount[42] = 1300;\n', '        theGroupofEightyTwoAmount[43] = 1200;\n', '        theGroupofEightyTwoAmount[44] = 1127;\n', '        theGroupofEightyTwoAmount[45] = 1050;\n', '        theGroupofEightyTwoAmount[46] = 1028;\n', '        theGroupofEightyTwoAmount[47] = 1011;\n', '        theGroupofEightyTwoAmount[48] = 1000;\n', '        theGroupofEightyTwoAmount[49] = 1000;\n', '        theGroupofEightyTwoAmount[50] = 1000;\n', '        theGroupofEightyTwoAmount[51] = 1000;\n', '        theGroupofEightyTwoAmount[52] = 1000;\n', '        theGroupofEightyTwoAmount[53] = 1000;\n', '        theGroupofEightyTwoAmount[54] = 983;\n', '        theGroupofEightyTwoAmount[55] = 980;\n', '        theGroupofEightyTwoAmount[56] = 960;\n', '        theGroupofEightyTwoAmount[57] = 900;\n', '        theGroupofEightyTwoAmount[58] = 900;\n', '        theGroupofEightyTwoAmount[59] = 839;\n', '        theGroupofEightyTwoAmount[60] = 800;\n', '        theGroupofEightyTwoAmount[61] = 800;\n', '        theGroupofEightyTwoAmount[62] = 800;\n', '        theGroupofEightyTwoAmount[63] = 798;\n', '        theGroupofEightyTwoAmount[64] = 750;\n', '        theGroupofEightyTwoAmount[65] = 590;\n', '        theGroupofEightyTwoAmount[66] = 500;\n', '        theGroupofEightyTwoAmount[67] = 500;\n', '        theGroupofEightyTwoAmount[68] = 500;\n', '        theGroupofEightyTwoAmount[69] = 500;\n', '        theGroupofEightyTwoAmount[70] = 415;\n', '        theGroupofEightyTwoAmount[71] = 388;\n', '        theGroupofEightyTwoAmount[72] = 380;\n', '        theGroupofEightyTwoAmount[73] = 300;\n', '        theGroupofEightyTwoAmount[74] = 300;\n', '        theGroupofEightyTwoAmount[75] = 170;\n', '        theGroupofEightyTwoAmount[76] = 164;\n', '        theGroupofEightyTwoAmount[77] = 142;\n', '        theGroupofEightyTwoAmount[78] = 70;\n', '        theGroupofEightyTwoAmount[79] = 69;\n', '        theGroupofEightyTwoAmount[80] = 16;\n', '        theGroupofEightyTwoAmount[81] = 5;\n', '        theGroupofEightyTwoAmount[82] = 1;\n', '        theGroupofEightyTwoAmount[83] = 1;  //This one is for testing\n', '\n', '    }\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        onlyActive()\n', '        returns(uint256)\n', '    {\n', '        \n', '        require(tx.gasprice <= 0.05 szabo);\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '        onlyActive()\n', '    {\n', '        require(tx.gasprice <= 0.05 szabo);\n', '\n', '        if (boolPay82) {  //Add to the Eth Fund if boolPay82 set to true\n', '            \n', '           totalEthFundCollected = SafeMath.add(totalEthFundCollected, msg.value);\n', '\n', '        } else{\n', '            purchaseTokens(msg.value, 0x0);\n', '        }\n', '\n', '        \n', '    }\n', '\n', '\n', '    function buyTokensfor82()\n', '        public\n', '        onlyAdministrator()\n', '    {\n', '        //Periodically Use the Bond Fund to buy tokens and distribute to the Group of 82\n', '        if(bool82Mode) \n', '        {\n', '            uint counter = 83;\n', '            uint _ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '\n', '            totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, _ethToPay);\n', '\n', '            while (counter > 0) { \n', '\n', '                uint _distAmountLocal = SafeMath.div(SafeMath.mul(_ethToPay, theGroupofEightyTwoAmount[counter]),total82Tokens);\n', '\n', '                purchaseTokensfor82(_distAmountLocal, 0x0, counter);\n', '               \n', '                counter = counter - 1;\n', '            } \n', '           \n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Sends Bondf Fund ether to the bond contract\n', '     * \n', '     */\n', '    function payFund() payable public \n', '    onlyAdministrator()\n', '    {\n', '        \n', '        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '        require(ethToPay > 1);\n', '\n', '        uint256 _altEthToPay = SafeMath.div(SafeMath.mul(ethToPay,altFundFee_),100);\n', '      \n', '        uint256 _bondEthToPay = SafeMath.div(SafeMath.mul(ethToPay,fundFee_),100);\n', ' \n', '\n', '        totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\n', '\n', '        if(_bondEthToPay > 0){\n', '            if(!bondFundAddress.call.value(_bondEthToPay).gas(400000)()) {\n', '                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _bondEthToPay);\n', '            }\n', '        }\n', '\n', '        if(_altEthToPay > 0){\n', '            if(!altFundAddress.call.value(_altEthToPay).gas(400000)()) {\n', '                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _altEthToPay);\n', '            }\n', '        }\n', '      \n', '    }\n', '\n', '    /**\n', '     * Converts all of caller&#39;s dividends to tokens.\n', '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '        \n', '        uint256 _refPayout = _dividends / 3;\n', '        _dividends = SafeMath.sub(_dividends, _refPayout);\n', '        (_dividends,) = handleRef(stickyRef[msg.sender], _refPayout, _dividends, 0);\n', '\n', '        // Take out dividends and then _fundPayout\n', '        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '\n', '        // Add ethereum to send to fund\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * REMEMBER THIS IS 0% TRANSFER FEE\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsExchange receiver = AcceptsExchange(_to);\n', '        require(receiver.tokenFallback(msg.sender, _value, _data));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '\n', ' /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    * We add ability to track the initial sender so we pass that to determine the bond holder\n', '    */\n', '    function transferAndCallExpanded(address _to, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsExchange receiver = AcceptsExchange(_to);\n', '        require(receiver.tokenFallbackExpanded(msg.sender, _value, _data, msg.sender, _referrer));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Additional check that the game address we are sending tokens to is a contract\n', '     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     */\n', '     function isContract(address _addr) private constant returns (bool is_contract) {\n', '       // retrieve the size of the code on target address, this needs assembly\n', '       uint length;\n', '       assembly { length := extcodesize(_addr) }\n', '       return length > 0;\n', '     }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    //function disableInitialStage()\n', '    //    onlyAdministrator()\n', '    //    public\n', '    //{\n', '    //    onlyAmbassadors = false;\n', '    //}\n', '\n', '    \n', '  \n', '    function setBondFundAddress(address _newBondFundAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        bondFundAddress = _newBondFundAddress;\n', '    }\n', '\n', '    \n', '    function setAltFundAddress(address _newAltFundAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        altFundAddress = _newAltFundAddress;\n', '    }\n', '\n', '\n', '    /**\n', '     * Set fees/rates\n', '     */\n', '    function setFeeRates(uint8 _newDivRate, uint8 _newFundFee, uint8 _newAltRate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newDivRate <= 25);\n', '        require(_newAltRate + _newFundFee <= 5);\n', '\n', '        dividendFee_ = _newDivRate;\n', '        fundFee_ = _newFundFee;\n', '        altFundFee_ = _newAltRate;\n', '    }\n', '\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Add or remove game contract, which can accept Wall Street Market tokens\n', '     */\n', '    function setCanAcceptTokens(address _address, bool _value)\n', '      onlyAdministrator()\n', '      public\n', '    {\n', '        canAcceptTokens_[_address] = _value;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '\n', '      /**\n', '     * Set if we will pay the 82 group with funds in\n', '     */\n', '    function setBool82(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolPay82 = _bool;\n', '    }\n', '\n', '\n', '      /**\n', '     *Set if we will use 5% fund to purchase new tokens for 82 group\n', '     */\n', '    function set82Mode(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        bool82Mode = _bool;\n', '    }\n', '\n', '     /**\n', '     *Set flag for contract to accept ether\n', '     */\n', '    function setContractActive(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolContractActive = _bool;\n', '    }\n', '\n', '    \n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', ' \n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_ + altFundFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to show ether waiting to be send to fund in contract\n', '     */\n', '    function etherToSendFund()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    // Make sure we will send back excess if user sends more then 5 ether before 10 ETH in contract\n', '    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n', '      notContract()// no contracts allowed\n', '      internal\n', '      returns(uint256) {\n', '\n', '      uint256 purchaseEthereum = _incomingEthereum;\n', '      uint256 excess;\n', '      if(purchaseEthereum > 2.5 ether) { // check if the transaction is over 2.5 ether\n', '          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 10 ether) { // if so check the contract is less then 100 ether\n', '              purchaseEthereum = 2.5 ether;\n', '              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n', '          }\n', '      }\n', '\n', '      purchaseTokens(purchaseEthereum, _referredBy);\n', '\n', '      if (excess > 0) {\n', '        msg.sender.transfer(excess);\n', '      }\n', '    }\n', '\n', '    function handleRef(address _ref, uint _referralBonus, uint _currentDividends, uint _currentFee) internal returns (uint, uint){\n', '        uint _dividends = _currentDividends;\n', '        uint _fee = _currentFee;\n', '        address _referredBy = stickyRef[msg.sender];\n', '        if (_referredBy == address(0x0)){\n', '            _referredBy = _ref;\n', '        }\n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            if (stickyRef[msg.sender] == address(0x0)){\n', '                stickyRef[msg.sender] = _referredBy;\n', '            }\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus/2);\n', '            address currentRef = stickyRef[_referredBy];\n', '            if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n', '                referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*3);\n', '                currentRef = stickyRef[currentRef];\n', '                if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n', '                    referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*2);\n', '                }\n', '                else{\n', '                    _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2 - (_referralBonus/10)*3);\n', '                    _fee = _dividends * magnitude;\n', '                }\n', '            }\n', '            else{\n', '                _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2);\n', '                _fee = _dividends * magnitude;\n', '            }\n', '            \n', '            \n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        return (_dividends, _fee);\n', '    }\n', '\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '       \n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _fee;\n', '        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if(tokenSupply_ > 0){\n', ' \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '\n', '    //*Seperate function to handle internal purchases for the 82 Group\n', '    function purchaseTokensfor82(uint256 _incomingEthereum, address _referredBy, uint _playerIndex)\n', '       \n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _fee;\n', '        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if(tokenSupply_ > 0){\n', ' \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]] = SafeMath.add(tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[theGroupofEightyTwo[_playerIndex]] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(theGroupofEightyTwo[_playerIndex], _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '* Wall Street Market presents......\n', '\n', '.______    __       __    __   _______      ______  __    __   __  .______        _______      ___      .___  ___.  _______ \n', '|   _  \\  |  |     |  |  |  | |   ____|    /      ||  |  |  | |  | |   _  \\      /  _____|    /   \\     |   \\/   | |   ____|\n', "|  |_)  | |  |     |  |  |  | |  |__      |  ,----'|  |__|  | |  | |  |_)  |    |  |  __     /  ^  \\    |  \\  /  | |  |__   \n", '|   _  <  |  |     |  |  |  | |   __|     |  |     |   __   | |  | |   ___/     |  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|  \n', "|  |_)  | |  `----.|  `--'  | |  |____    |  `----.|  |  |  | |  | |  |         |  |__| |  /  _____  \\  |  |  |  | |  |____ \n", '|______/  |_______| \\______/  |_______|    \\______||__|  |__| |__| | _|          \\______| /__/     \\__\\ |__|  |__| |_______|\n', '                                                                                                                            \n', '(BCHIP)\n', '\n', 'website:    https://wallstreetmarket.tk\n', '\n', 'discord:    https://discord.gg/8AFP9gS\n', '\n', '25% Dividends Fees/Payouts\n', '\n', '5% of Buy In Fee Will Go into Buying Tokens from the contract for "THE 82" group until \n', '400,000 tokens have been distributed.  25% Fee will apply for these transactions.\n', '\n', 'After this the 5% fee will be reserved for use in additional card and lending games using BCHIP tokens.\n', '\n', 'Referral Program pays out 33% of Buy-in/Sell Fees to user of masternode link\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract AcceptsExchange {\n', '    BlueChipGame public tokenContract;\n', '\n', '    function AcceptsExchange(address _tokenContract) public {\n', '        tokenContract = BlueChipGame(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\n', '}\n', '\n', '\n', 'contract BlueChipGame {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyActive(){\n', '        \n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '\n', ' \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "BlueChipExchange";\n', '    string public symbol = "BCHIP";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '\n', '   \n', '    uint256 public totalEthFundRecieved; // total ETH Bond recieved from this contract\n', '    uint256 public totalEthFundCollected; // total ETH Bond collected in this contract\n', '\n', '    // proof of stake (defaults at 25 tokens)\n', '    uint256 public stakingRequirement = 25e18;\n', '\n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 2.5 ether;\n', '    uint256 constant internal ambassadorQuota_ = 2.5 ether;\n', '\n', '    uint constant internal total82Tokens = 390148;\n', '\n', '\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    mapping(uint => address) internal theGroupofEightyTwo;\n', '    mapping(uint => uint) internal theGroupofEightyTwoAmount;\n', '\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '\n', '    uint8 public dividendFee_ = 20; // 20% dividend fee on each buy and sell\n', '    uint8 public fundFee_ = 0; // 5% bond fund fee on each buy and sell\n', '    uint8 public altFundFee_ = 5; // Fund fee rate on each buy and sell for future game\n', '\n', '    bool boolPay82 = false;\n', '    bool bool82Mode = true;\n', '    bool boolContractActive = true;\n', '\n', '    uint bondFund = 0;\n', '\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '\n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '    // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\n', '\n', '    mapping(address => address) public stickyRef;\n', '\n', '     address public bondFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;   //Bond Fund\n', '     address public altFundAddress = 0x1822435de9b923a7a8c4fbd2f6d0aa8f743d3010;    //Alternate Fund for Future Game\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --\n', '    */\n', '    function BlueChipGame()\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[msg.sender] = true;\n', '\n', '    //*  Populate the 82 Mappings \n', '        theGroupofEightyTwo[1] = 0x41fe3738b503cbafd01c1fd8dd66b7fe6ec11b01;\n', '        theGroupofEightyTwo[2] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\n', '        theGroupofEightyTwo[3] = 0xc29a6dd21801e58566df9f003b7011e30724543e;\n', '        theGroupofEightyTwo[4] = 0xc63ea85cc823c440319013d4b30e19b66466642d;\n', '        theGroupofEightyTwo[5] = 0xc6f827796a2e1937fd7f97c4e0a4906c476794f6;\n', '        theGroupofEightyTwo[6] = 0xe74b1ea522b9d558c8e8719c3b1c4a9050b531ca;\n', '        theGroupofEightyTwo[7] = 0x6b90d498062140c607d03fd642377eeaa325703e;\n', '        theGroupofEightyTwo[8] = 0x5f1088110edcba27fc206cdcc326b413b5867361;\n', '        theGroupofEightyTwo[9] = 0xc92fd0e554b12eb10f584819eec2394a9a6f3d1d;\n', '        theGroupofEightyTwo[10] = 0xb62a0ac2338c227748e3ce16d137c6282c9870cf;\n', '        theGroupofEightyTwo[11] = 0x3f6c42409da6faf117095131168949ab81d5947d;\n', '        theGroupofEightyTwo[12] = 0xd54c47b3165508fb5418dbdec59a0d2448eeb3d7;\n', '        theGroupofEightyTwo[13] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\n', '        theGroupofEightyTwo[14] = 0x285d366834afaa8628226e65913e0dd1aa26b1f8;\n', '        theGroupofEightyTwo[15] = 0x5f5996f9e1960655d6fc00b945fef90672370d9f;\n', '        theGroupofEightyTwo[16] = 0x3825c8ba07166f34ce9a2cd1e08a68b105c82cb9;\n', '        theGroupofEightyTwo[17] = 0x7f3e05b4f258e1c15a0ef49894cffa1d89ceb9d3;\n', '        theGroupofEightyTwo[18] = 0x3191acf877495e5f4e619ec722f6f38839182660;\n', '        theGroupofEightyTwo[19] = 0x14f981ec7b0f59df6e1c56502e272298f221d763;\n', '        theGroupofEightyTwo[20] = 0xae817ec70d8b621bb58a047e63c31445f79e20dc;\n', '        theGroupofEightyTwo[21] = 0xc43af3becac9c810384b69cf061f2d7ec73105c4;\n', '        theGroupofEightyTwo[22] = 0x0743469569ed5cc44a51216a1bf5ad7e7f90f40e;\n', '        theGroupofEightyTwo[23] = 0xff6a4d0ed374ba955048664d6ef5448c6cd1d56a;\n', '        theGroupofEightyTwo[24] = 0x62358a483311b3de29ae987b990e19de6259fa9c;\n', '        theGroupofEightyTwo[25] = 0xa0fea1bcfa32713afdb73b9908f6cb055022e95f;\n', '        theGroupofEightyTwo[26] = 0xb2af816608e1a4d0fb12b81028f32bac76256eba;\n', '        theGroupofEightyTwo[27] = 0x977193d601b364f38ab1a832dbaef69ca7833992;\n', '        theGroupofEightyTwo[28] = 0xed3547f0ed028361685b39cd139aa841df6629ab;\n', '        theGroupofEightyTwo[29] = 0xe40ff298079493cba637d92089e3d1db403974cb;\n', '        theGroupofEightyTwo[30] = 0xae3dc7fa07f9dd030fa56c027e90998ed9fe9d61;\n', '        theGroupofEightyTwo[31] = 0x2dd35e7a6f5fcc28d146c04be641f969f6d1e403;\n', '        theGroupofEightyTwo[32] = 0x2afe21ec5114339922d38546a3be7a0b871d3a0d;\n', '        theGroupofEightyTwo[33] = 0x6696fee394bb224d0154ea6b58737dca827e1960;\n', '        theGroupofEightyTwo[34] = 0xccdf159b1340a35c3567b669c836a88070051314;\n', '        theGroupofEightyTwo[35] = 0x1c3416a34c86f9ddcd05c7828bf5693308d19e0b;\n', '        theGroupofEightyTwo[36] = 0x846dedb19b105edafac2c9410fa2b5e73b596a14;\n', '        theGroupofEightyTwo[37] = 0x3e9294f9b01bc0bcb91413112c75c3225c65d0b3;\n', '        theGroupofEightyTwo[38] = 0x3a5ce61c74343dde474bad4210cccf1dac7b1934;\n', '        theGroupofEightyTwo[39] = 0x38e123f89a7576b2942010ad1f468cc0ea8f9f4b;\n', '        theGroupofEightyTwo[40] = 0xdcd8bad894035b5c554ad450ca84ae6be0b73122;\n', '        theGroupofEightyTwo[41] = 0xcfab320d4379a84fe3736eccf56b09916e35097b;\n', '        theGroupofEightyTwo[42] = 0x12f53c1d7caea0b41010a0e53d89c801ed579b5a;\n', '        theGroupofEightyTwo[43] = 0x5145a296e1bb9d4cf468d6d97d7b6d15700f39ef;\n', '        theGroupofEightyTwo[44] = 0xac707a1b4396a309f4ad01e3da4be607bbf14089;\n', '        theGroupofEightyTwo[45] = 0x38602d1446fe063444b04c3ca5ecde0cba104240;\n', '        theGroupofEightyTwo[46] = 0xc951d3463ebba4e9ec8ddfe1f42bc5895c46ec8f;\n', '        theGroupofEightyTwo[47] = 0x69e566a65d00ad5987359db9b3ced7e1cfe9ac69;\n', '        theGroupofEightyTwo[48] = 0x533b14f6d04ed3c63a68d5e80b7b1f6204fb4213;\n', '        theGroupofEightyTwo[49] = 0x5fa0b03bee5b4e6643a1762df718c0a4a7c1842f;\n', '        theGroupofEightyTwo[50] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[51] = 0xc371117e0adfafe2a3b7b6ba71b7c0352ca7789d;\n', '        theGroupofEightyTwo[52] = 0xcade49e583bc226f19894458f8e2051289f1ac85;\n', '        theGroupofEightyTwo[53] = 0xe3fc95aba6655619db88b523ab487d5273db484f;\n', '        theGroupofEightyTwo[54] = 0x22e4d1433377a2a18452e74fd4ba9eea01824f7d;\n', '        theGroupofEightyTwo[55] = 0x32ae5eff81881a9a70fcacada5bb1925cabca508;\n', '        theGroupofEightyTwo[56] = 0xb864d177c291368b52a63a95eeff36e3731303c1;\n', '        theGroupofEightyTwo[57] = 0x46091f77b224576e224796de5c50e8120ad7d764;\n', '        theGroupofEightyTwo[58] = 0xc6407dd687a179aa11781b8a1e416bd0515923c2;\n', '        theGroupofEightyTwo[59] = 0x2502ce06dcb61ddf5136171768dfc08d41db0a75;\n', '        theGroupofEightyTwo[60] = 0x6b80ca9c66cdcecc39893993df117082cc32bb16;\n', '        theGroupofEightyTwo[61] = 0xa511ddba25ffd74f19a400fa581a15b5044855ce;\n', '        theGroupofEightyTwo[62] = 0xce81d90ae52d34588a95db59b89948c8fec487ce;\n', '        theGroupofEightyTwo[63] = 0x6d60dbf559bbf0969002f19979cad909c2644dad;\n', '        theGroupofEightyTwo[64] = 0x45101255a2bcad3175e6fda4020a9b77e6353a9a;\n', '        theGroupofEightyTwo[65] = 0xe9078d7539e5eac3b47801a6ecea8a9ec8f59375;\n', '        theGroupofEightyTwo[66] = 0x41a21b264f9ebf6cf571d4543a5b3ab1c6bed98c;\n', '        theGroupofEightyTwo[67] = 0x471e8d970c30e61403186b6f245364ae790d14c3;\n', '        theGroupofEightyTwo[68] = 0x6eb7f74ff7f57f7ba45ca71712bccef0588d8f0d;\n', '        theGroupofEightyTwo[69] = 0xe6d6bc079d76dc70fcec5de84721c7b0074d164b;\n', '        theGroupofEightyTwo[70] = 0x3ec5972c2177a08fd5e5f606f19ab262d28ceffe;\n', '        theGroupofEightyTwo[71] = 0x108b87a18877104e07bd870af70dfc2487447262;\n', '        theGroupofEightyTwo[72] = 0x3129354440e4639d2b809ca03d4ccc6277ac8167;\n', '        theGroupofEightyTwo[73] = 0x21572b6a855ee8b1392ed1003ecf3474fa83de3e;\n', '        theGroupofEightyTwo[74] = 0x75ab98f33a7a60c4953cb907747b498e0ee8edf7;\n', '        theGroupofEightyTwo[75] = 0x0fe6967f9a5bb235fc74a63e3f3fc5853c55c083;\n', '        theGroupofEightyTwo[76] = 0x49545640b9f3266d13cce842b298d450c0f8d776;\n', '        theGroupofEightyTwo[77] = 0x9327128ead2495f60d41d3933825ffd8080d4d42;\n', '        theGroupofEightyTwo[78] = 0x82b4e53a7d6bf6c72cc57f8d70dae90a34f0870f;\n', '        theGroupofEightyTwo[79] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[80] = 0x3749d556c167dd73d536a6faaf0bb4ace8f7dab9;\n', '        theGroupofEightyTwo[81] = 0x3039f6857071692b540d9e1e759a0add93af3fed;\n', '        theGroupofEightyTwo[82] = 0xb74d5f0a81ce99ac1857133e489bc2b4954935ff;\n', '        theGroupofEightyTwo[83] = 0x13015632fa722C12E862fF38c8cF2354cbF26c47;   //This one is for testing\n', '\n', '\n', '        theGroupofEightyTwoAmount[1] = 100000;\n', '        theGroupofEightyTwoAmount[2] = 30000;\n', '        theGroupofEightyTwoAmount[3] = 24400;\n', '        theGroupofEightyTwoAmount[4] = 21111;\n', '        theGroupofEightyTwoAmount[5] = 14200;\n', '        theGroupofEightyTwoAmount[6] = 13788;\n', '        theGroupofEightyTwoAmount[7] = 12003;\n', '        theGroupofEightyTwoAmount[8] = 11000;\n', '        theGroupofEightyTwoAmount[9] = 11000;\n', '        theGroupofEightyTwoAmount[10] = 8800;\n', '        theGroupofEightyTwoAmount[11] = 7000;\n', '        theGroupofEightyTwoAmount[12] = 7000;\n', '        theGroupofEightyTwoAmount[13] = 6000;\n', '        theGroupofEightyTwoAmount[14] = 5400;\n', '        theGroupofEightyTwoAmount[15] = 5301;\n', '        theGroupofEightyTwoAmount[16] = 5110;\n', '        theGroupofEightyTwoAmount[17] = 5018;\n', '        theGroupofEightyTwoAmount[18] = 5000;\n', '        theGroupofEightyTwoAmount[19] = 5000;\n', '        theGroupofEightyTwoAmount[20] = 5000;\n', '        theGroupofEightyTwoAmount[21] = 5000;\n', '        theGroupofEightyTwoAmount[22] = 4400;\n', '        theGroupofEightyTwoAmount[23] = 4146;\n', '        theGroupofEightyTwoAmount[24] = 4086;\n', '        theGroupofEightyTwoAmount[25] = 4000;\n', '        theGroupofEightyTwoAmount[26] = 4000;\n', '        theGroupofEightyTwoAmount[27] = 3500;\n', '        theGroupofEightyTwoAmount[28] = 3216;\n', '        theGroupofEightyTwoAmount[29] = 3200;\n', '        theGroupofEightyTwoAmount[30] = 3183;\n', '        theGroupofEightyTwoAmount[31] = 3100;\n', '        theGroupofEightyTwoAmount[32] = 3001;\n', '        theGroupofEightyTwoAmount[33] = 2205;\n', '        theGroupofEightyTwoAmount[34] = 2036;\n', '        theGroupofEightyTwoAmount[35] = 2000;\n', '        theGroupofEightyTwoAmount[36] = 2000;\n', '        theGroupofEightyTwoAmount[37] = 1632;\n', '        theGroupofEightyTwoAmount[38] = 1600;\n', '        theGroupofEightyTwoAmount[39] = 1500;\n', '        theGroupofEightyTwoAmount[40] = 1500;\n', '        theGroupofEightyTwoAmount[41] = 1478;\n', '        theGroupofEightyTwoAmount[42] = 1300;\n', '        theGroupofEightyTwoAmount[43] = 1200;\n', '        theGroupofEightyTwoAmount[44] = 1127;\n', '        theGroupofEightyTwoAmount[45] = 1050;\n', '        theGroupofEightyTwoAmount[46] = 1028;\n', '        theGroupofEightyTwoAmount[47] = 1011;\n', '        theGroupofEightyTwoAmount[48] = 1000;\n', '        theGroupofEightyTwoAmount[49] = 1000;\n', '        theGroupofEightyTwoAmount[50] = 1000;\n', '        theGroupofEightyTwoAmount[51] = 1000;\n', '        theGroupofEightyTwoAmount[52] = 1000;\n', '        theGroupofEightyTwoAmount[53] = 1000;\n', '        theGroupofEightyTwoAmount[54] = 983;\n', '        theGroupofEightyTwoAmount[55] = 980;\n', '        theGroupofEightyTwoAmount[56] = 960;\n', '        theGroupofEightyTwoAmount[57] = 900;\n', '        theGroupofEightyTwoAmount[58] = 900;\n', '        theGroupofEightyTwoAmount[59] = 839;\n', '        theGroupofEightyTwoAmount[60] = 800;\n', '        theGroupofEightyTwoAmount[61] = 800;\n', '        theGroupofEightyTwoAmount[62] = 800;\n', '        theGroupofEightyTwoAmount[63] = 798;\n', '        theGroupofEightyTwoAmount[64] = 750;\n', '        theGroupofEightyTwoAmount[65] = 590;\n', '        theGroupofEightyTwoAmount[66] = 500;\n', '        theGroupofEightyTwoAmount[67] = 500;\n', '        theGroupofEightyTwoAmount[68] = 500;\n', '        theGroupofEightyTwoAmount[69] = 500;\n', '        theGroupofEightyTwoAmount[70] = 415;\n', '        theGroupofEightyTwoAmount[71] = 388;\n', '        theGroupofEightyTwoAmount[72] = 380;\n', '        theGroupofEightyTwoAmount[73] = 300;\n', '        theGroupofEightyTwoAmount[74] = 300;\n', '        theGroupofEightyTwoAmount[75] = 170;\n', '        theGroupofEightyTwoAmount[76] = 164;\n', '        theGroupofEightyTwoAmount[77] = 142;\n', '        theGroupofEightyTwoAmount[78] = 70;\n', '        theGroupofEightyTwoAmount[79] = 69;\n', '        theGroupofEightyTwoAmount[80] = 16;\n', '        theGroupofEightyTwoAmount[81] = 5;\n', '        theGroupofEightyTwoAmount[82] = 1;\n', '        theGroupofEightyTwoAmount[83] = 1;  //This one is for testing\n', '\n', '    }\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        onlyActive()\n', '        returns(uint256)\n', '    {\n', '        \n', '        require(tx.gasprice <= 0.05 szabo);\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '        onlyActive()\n', '    {\n', '        require(tx.gasprice <= 0.05 szabo);\n', '\n', '        if (boolPay82) {  //Add to the Eth Fund if boolPay82 set to true\n', '            \n', '           totalEthFundCollected = SafeMath.add(totalEthFundCollected, msg.value);\n', '\n', '        } else{\n', '            purchaseTokens(msg.value, 0x0);\n', '        }\n', '\n', '        \n', '    }\n', '\n', '\n', '    function buyTokensfor82()\n', '        public\n', '        onlyAdministrator()\n', '    {\n', '        //Periodically Use the Bond Fund to buy tokens and distribute to the Group of 82\n', '        if(bool82Mode) \n', '        {\n', '            uint counter = 83;\n', '            uint _ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '\n', '            totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, _ethToPay);\n', '\n', '            while (counter > 0) { \n', '\n', '                uint _distAmountLocal = SafeMath.div(SafeMath.mul(_ethToPay, theGroupofEightyTwoAmount[counter]),total82Tokens);\n', '\n', '                purchaseTokensfor82(_distAmountLocal, 0x0, counter);\n', '               \n', '                counter = counter - 1;\n', '            } \n', '           \n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Sends Bondf Fund ether to the bond contract\n', '     * \n', '     */\n', '    function payFund() payable public \n', '    onlyAdministrator()\n', '    {\n', '        \n', '        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '        require(ethToPay > 1);\n', '\n', '        uint256 _altEthToPay = SafeMath.div(SafeMath.mul(ethToPay,altFundFee_),100);\n', '      \n', '        uint256 _bondEthToPay = SafeMath.div(SafeMath.mul(ethToPay,fundFee_),100);\n', ' \n', '\n', '        totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\n', '\n', '        if(_bondEthToPay > 0){\n', '            if(!bondFundAddress.call.value(_bondEthToPay).gas(400000)()) {\n', '                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _bondEthToPay);\n', '            }\n', '        }\n', '\n', '        if(_altEthToPay > 0){\n', '            if(!altFundAddress.call.value(_altEthToPay).gas(400000)()) {\n', '                totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, _altEthToPay);\n', '            }\n', '        }\n', '      \n', '    }\n', '\n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '        \n', '        uint256 _refPayout = _dividends / 3;\n', '        _dividends = SafeMath.sub(_dividends, _refPayout);\n', '        (_dividends,) = handleRef(stickyRef[msg.sender], _refPayout, _dividends, 0);\n', '\n', '        // Take out dividends and then _fundPayout\n', '        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '\n', '        // Add ethereum to send to fund\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * REMEMBER THIS IS 0% TRANSFER FEE\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsExchange receiver = AcceptsExchange(_to);\n', '        require(receiver.tokenFallback(msg.sender, _value, _data));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '\n', ' /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    * We add ability to track the initial sender so we pass that to determine the bond holder\n', '    */\n', '    function transferAndCallExpanded(address _to, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Wall Street Exchange platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsExchange receiver = AcceptsExchange(_to);\n', '        require(receiver.tokenFallbackExpanded(msg.sender, _value, _data, msg.sender, _referrer));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Additional check that the game address we are sending tokens to is a contract\n', '     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     */\n', '     function isContract(address _addr) private constant returns (bool is_contract) {\n', '       // retrieve the size of the code on target address, this needs assembly\n', '       uint length;\n', '       assembly { length := extcodesize(_addr) }\n', '       return length > 0;\n', '     }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    //function disableInitialStage()\n', '    //    onlyAdministrator()\n', '    //    public\n', '    //{\n', '    //    onlyAmbassadors = false;\n', '    //}\n', '\n', '    \n', '  \n', '    function setBondFundAddress(address _newBondFundAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        bondFundAddress = _newBondFundAddress;\n', '    }\n', '\n', '    \n', '    function setAltFundAddress(address _newAltFundAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        altFundAddress = _newAltFundAddress;\n', '    }\n', '\n', '\n', '    /**\n', '     * Set fees/rates\n', '     */\n', '    function setFeeRates(uint8 _newDivRate, uint8 _newFundFee, uint8 _newAltRate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newDivRate <= 25);\n', '        require(_newAltRate + _newFundFee <= 5);\n', '\n', '        dividendFee_ = _newDivRate;\n', '        fundFee_ = _newFundFee;\n', '        altFundFee_ = _newAltRate;\n', '    }\n', '\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Add or remove game contract, which can accept Wall Street Market tokens\n', '     */\n', '    function setCanAcceptTokens(address _address, bool _value)\n', '      onlyAdministrator()\n', '      public\n', '    {\n', '        canAcceptTokens_[_address] = _value;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '\n', '      /**\n', '     * Set if we will pay the 82 group with funds in\n', '     */\n', '    function setBool82(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolPay82 = _bool;\n', '    }\n', '\n', '\n', '      /**\n', '     *Set if we will use 5% fund to purchase new tokens for 82 group\n', '     */\n', '    function set82Mode(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        bool82Mode = _bool;\n', '    }\n', '\n', '     /**\n', '     *Set flag for contract to accept ether\n', '     */\n', '    function setContractActive(bool _bool)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolContractActive = _bool;\n', '    }\n', '\n', '    \n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', ' \n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_ + altFundFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to show ether waiting to be send to fund in contract\n', '     */\n', '    function etherToSendFund()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    // Make sure we will send back excess if user sends more then 5 ether before 10 ETH in contract\n', '    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n', '      notContract()// no contracts allowed\n', '      internal\n', '      returns(uint256) {\n', '\n', '      uint256 purchaseEthereum = _incomingEthereum;\n', '      uint256 excess;\n', '      if(purchaseEthereum > 2.5 ether) { // check if the transaction is over 2.5 ether\n', '          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 10 ether) { // if so check the contract is less then 100 ether\n', '              purchaseEthereum = 2.5 ether;\n', '              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n', '          }\n', '      }\n', '\n', '      purchaseTokens(purchaseEthereum, _referredBy);\n', '\n', '      if (excess > 0) {\n', '        msg.sender.transfer(excess);\n', '      }\n', '    }\n', '\n', '    function handleRef(address _ref, uint _referralBonus, uint _currentDividends, uint _currentFee) internal returns (uint, uint){\n', '        uint _dividends = _currentDividends;\n', '        uint _fee = _currentFee;\n', '        address _referredBy = stickyRef[msg.sender];\n', '        if (_referredBy == address(0x0)){\n', '            _referredBy = _ref;\n', '        }\n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            if (stickyRef[msg.sender] == address(0x0)){\n', '                stickyRef[msg.sender] = _referredBy;\n', '            }\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus/2);\n', '            address currentRef = stickyRef[_referredBy];\n', '            if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n', '                referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*3);\n', '                currentRef = stickyRef[currentRef];\n', '                if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n', '                    referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*2);\n', '                }\n', '                else{\n', '                    _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2 - (_referralBonus/10)*3);\n', '                    _fee = _dividends * magnitude;\n', '                }\n', '            }\n', '            else{\n', '                _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2);\n', '                _fee = _dividends * magnitude;\n', '            }\n', '            \n', '            \n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        return (_dividends, _fee);\n', '    }\n', '\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '       \n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _fee;\n', '        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', ' \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '\n', '    //*Seperate function to handle internal purchases for the 82 Group\n', '    function purchaseTokensfor82(uint256 _incomingEthereum, address _referredBy, uint _playerIndex)\n', '       \n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_ + altFundFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _fee;\n', '        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\n', '        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', ' \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]] = SafeMath.add(tokenBalanceLedger_[theGroupofEightyTwo[_playerIndex]], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[theGroupofEightyTwo[_playerIndex]] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(theGroupofEightyTwo[_playerIndex], _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
