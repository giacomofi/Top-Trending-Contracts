['pragma solidity ^0.4.24;\n', '\n', 'contract Oasis{\n', '    function getBestOffer(address sell_gem, address buy_gem) public constant returns(uint256);\n', '    function getOffer(uint id) public constant returns (uint, address, uint, address);\n', '}\n', '\n', 'contract EtherShrimpFutures{\n', '    using SafeMath for uint;\n', '    Oasis market;\n', '    address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    uint256 public EGGS_TO_HATCH_1SHRIMP=86400; //seconds in a day\n', '    uint256 public STARTING_SHRIMP=300;\n', '    uint256 internal PSN=10000;\n', '    uint256 internal PSNH=5000;\n', '    bool public initialized=false;\n', '    uint256 public marketEggs;\n', '    address public ceoAddress;\n', '    uint256 public numberOfFarmers;\n', '    mapping (address => uint256) public hatcheryShrimp;\n', '    mapping (address => uint256) public claimedEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    mapping (address => uint256) public lastHatchPrice;\n', '    address[] farmers;\n', '    \n', '    constructor() public{\n', '        ceoAddress=msg.sender;\n', '        market = Oasis(0x14FBCA95be7e99C15Cc2996c6C9d841e54B79425);\n', '    }\n', '    function hatchEggs(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        if(hatcheryShrimp[msg.sender] == 0){\n', '            numberOfFarmers += 1;\n', '            farmers.push(msg.sender);\n', '        }\n', '        uint256 eggsUsed=getMyEggs();\n', '        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n', '        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        lastHatchPrice[msg.sender] = getPrice();\n', '        //send referral eggs\n', '        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '        //boost market to nerf shrimp hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n', '        \n', '    }\n', '    function sellEggs() public{\n', '        require(initialized);\n', '        uint256 hasEggs=getMyEggs();\n', '        uint256 eggValue=calculateEggSell(hasEggs,msg.sender);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketEggs=SafeMath.add(marketEggs,hasEggs);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '    }\n', '    function buyEggs() public payable{\n', '        require(initialized);\n', '        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div( SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateEggSell(uint256 eggs, address adr) public view returns(uint256){\n', '        uint sellValue = calculateTrade(eggs,marketEggs,address(this).balance);\n', '        uint currentPrice = getPrice();\n', '        uint diff = getDiff(currentPrice,lastHatchPrice[adr]);\n', '        uint bonusFactor = SafeMath.mul(diff,5);\n', '        if(bonusFactor > 1e18) {\n', '            bonusFactor = 1e18; //at max stay true to original\n', '        }\n', '        return SafeMath.mul(sellValue,bonusFactor).div(1e18);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketEggs);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,address(this).balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,2),100);\n', '    }\n', '    function seedMarket(uint256 eggs) public payable{\n', '        require(marketEggs==0);\n', '        initialized=true;\n', '        marketEggs=eggs;\n', '    }\n', '    function getFreeShrimp() public{\n', '        require(initialized);\n', '        require(hatcheryShrimp[msg.sender]==0);\n', '        numberOfFarmers += 1;\n', '        farmers.push(msg.sender);\n', '        lastHatch[msg.sender]=now;\n', '        lastHatchPrice[msg.sender] = getPrice();\n', '        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    function getMyShrimp() public view returns(uint256){\n', '        return hatcheryShrimp[msg.sender];\n', '    }\n', '    function getMyEggs() public view returns(uint256){\n', '        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n', '    }\n', '    function getLastHatchPrice(address adr) public view returns(uint256) {\n', '        return lastHatchPrice[adr];\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function getDiff(uint256 a, uint256 b) public view returns(uint256) {\n', '        uint change;\n', '        uint diff;\n', '        if( a >= b ) change = a - b;\n', '        else change = b - a;\n', '        if( change != 0 ) diff = SafeMath.div(change*1e18, b); //b is the final value\n', '        return diff;\n', '    }\n', '    function getPrice() public view returns(uint256) {\n', '        uint id1 = market.getBestOffer(weth,dai);\n', '        uint id2 = market.getBestOffer(dai,weth);\n', '        uint payAmt;\n', '        uint buyAmt;\n', '        address payGem;\n', '        address buyGem;\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id1);\n', '        uint price1 = SafeMath.div(buyAmt*1e18, payAmt);\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id2);\n', '        uint price2 = SafeMath.div(payAmt*1e18, buyAmt);\n', '        uint avgPrice = SafeMath.add(price1,price2).div(2);\n', '        return avgPrice;\n', '    }\n', '    function getPoolAvgHatchPrice() public view returns(uint256) {\n', '        uint256 poolSum;\n', '        for(uint i=0; i<farmers.length; i++) {\n', '            poolSum = SafeMath.add(lastHatchPrice[farmers[i]],poolSum);\n', '        }\n', '        return SafeMath.div(poolSum,farmers.length);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Oasis{\n', '    function getBestOffer(address sell_gem, address buy_gem) public constant returns(uint256);\n', '    function getOffer(uint id) public constant returns (uint, address, uint, address);\n', '}\n', '\n', 'contract EtherShrimpFutures{\n', '    using SafeMath for uint;\n', '    Oasis market;\n', '    address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    uint256 public EGGS_TO_HATCH_1SHRIMP=86400; //seconds in a day\n', '    uint256 public STARTING_SHRIMP=300;\n', '    uint256 internal PSN=10000;\n', '    uint256 internal PSNH=5000;\n', '    bool public initialized=false;\n', '    uint256 public marketEggs;\n', '    address public ceoAddress;\n', '    uint256 public numberOfFarmers;\n', '    mapping (address => uint256) public hatcheryShrimp;\n', '    mapping (address => uint256) public claimedEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    mapping (address => uint256) public lastHatchPrice;\n', '    address[] farmers;\n', '    \n', '    constructor() public{\n', '        ceoAddress=msg.sender;\n', '        market = Oasis(0x14FBCA95be7e99C15Cc2996c6C9d841e54B79425);\n', '    }\n', '    function hatchEggs(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        if(hatcheryShrimp[msg.sender] == 0){\n', '            numberOfFarmers += 1;\n', '            farmers.push(msg.sender);\n', '        }\n', '        uint256 eggsUsed=getMyEggs();\n', '        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n', '        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        lastHatchPrice[msg.sender] = getPrice();\n', '        //send referral eggs\n', '        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '        //boost market to nerf shrimp hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n', '        \n', '    }\n', '    function sellEggs() public{\n', '        require(initialized);\n', '        uint256 hasEggs=getMyEggs();\n', '        uint256 eggValue=calculateEggSell(hasEggs,msg.sender);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedEggs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketEggs=SafeMath.add(marketEggs,hasEggs);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '    }\n', '    function buyEggs() public payable{\n', '        require(initialized);\n', '        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div( SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateEggSell(uint256 eggs, address adr) public view returns(uint256){\n', '        uint sellValue = calculateTrade(eggs,marketEggs,address(this).balance);\n', '        uint currentPrice = getPrice();\n', '        uint diff = getDiff(currentPrice,lastHatchPrice[adr]);\n', '        uint bonusFactor = SafeMath.mul(diff,5);\n', '        if(bonusFactor > 1e18) {\n', '            bonusFactor = 1e18; //at max stay true to original\n', '        }\n', '        return SafeMath.mul(sellValue,bonusFactor).div(1e18);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketEggs);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,address(this).balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,2),100);\n', '    }\n', '    function seedMarket(uint256 eggs) public payable{\n', '        require(marketEggs==0);\n', '        initialized=true;\n', '        marketEggs=eggs;\n', '    }\n', '    function getFreeShrimp() public{\n', '        require(initialized);\n', '        require(hatcheryShrimp[msg.sender]==0);\n', '        numberOfFarmers += 1;\n', '        farmers.push(msg.sender);\n', '        lastHatch[msg.sender]=now;\n', '        lastHatchPrice[msg.sender] = getPrice();\n', '        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    function getMyShrimp() public view returns(uint256){\n', '        return hatcheryShrimp[msg.sender];\n', '    }\n', '    function getMyEggs() public view returns(uint256){\n', '        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n', '    }\n', '    function getLastHatchPrice(address adr) public view returns(uint256) {\n', '        return lastHatchPrice[adr];\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function getDiff(uint256 a, uint256 b) public view returns(uint256) {\n', '        uint change;\n', '        uint diff;\n', '        if( a >= b ) change = a - b;\n', '        else change = b - a;\n', '        if( change != 0 ) diff = SafeMath.div(change*1e18, b); //b is the final value\n', '        return diff;\n', '    }\n', '    function getPrice() public view returns(uint256) {\n', '        uint id1 = market.getBestOffer(weth,dai);\n', '        uint id2 = market.getBestOffer(dai,weth);\n', '        uint payAmt;\n', '        uint buyAmt;\n', '        address payGem;\n', '        address buyGem;\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id1);\n', '        uint price1 = SafeMath.div(buyAmt*1e18, payAmt);\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id2);\n', '        uint price2 = SafeMath.div(payAmt*1e18, buyAmt);\n', '        uint avgPrice = SafeMath.add(price1,price2).div(2);\n', '        return avgPrice;\n', '    }\n', '    function getPoolAvgHatchPrice() public view returns(uint256) {\n', '        uint256 poolSum;\n', '        for(uint i=0; i<farmers.length; i++) {\n', '            poolSum = SafeMath.add(lastHatchPrice[farmers[i]],poolSum);\n', '        }\n', '        return SafeMath.div(poolSum,farmers.length);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
