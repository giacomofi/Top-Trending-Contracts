['pragma solidity ^0.4.18;\n', '\n', 'contract TittyBase {\n', '\n', '    event Transfer(address indexed from, address indexed to);\n', '    event Creation(address indexed from, uint256 tittyId, uint256 wpId);\n', '    event AddAccessory(uint256 tittyId, uint256 accessoryId);\n', '\n', '    struct Accessory {\n', '\n', '        uint256 id;\n', '        string name;\n', '        uint256 price;\n', '        bool isActive;\n', '\n', '    }\n', '\n', '    struct Titty {\n', '\n', '        uint256 id;\n', '        string name;\n', '        string gender;\n', '        uint256 originalPrice;\n', '        uint256 salePrice;\n', '        uint256[] accessories;\n', '        bool forSale;\n', '    }\n', '\n', '    //Storage\n', '    Titty[] Titties;\n', '    Accessory[] Accessories;\n', '    mapping (uint256 => address) public tittyIndexToOwner;\n', '    mapping (address => uint256) public ownerTittiesCount;\n', '    mapping (uint256 => address) public tittyApproveIndex;\n', '\n', '    function _transfer(address _from, address _to, uint256 _tittyId) internal {\n', '\n', '        ownerTittiesCount[_to]++;\n', '\n', '        tittyIndexToOwner[_tittyId] = _to;\n', '        if (_from != address(0)) {\n', '            ownerTittiesCount[_from]--;\n', '            delete tittyApproveIndex[_tittyId];\n', '        }\n', '\n', '        Transfer(_from, _to);\n', '\n', '    }\n', '\n', '    function _changeTittyPrice (uint256 _newPrice, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.salePrice = _newPrice;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function _setTittyForSale (bool _forSale, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.forSale = _forSale;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function _changeName (string _name, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.name = _name;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function addAccessory (uint256 _id, string _name, uint256 _price, uint256 tittyId ) internal returns (uint) {\n', '\n', '        Accessory memory _accessory = Accessory({\n', '\n', '            id: _id,\n', '            name: _name,\n', '            price: _price,\n', '            isActive: true\n', '\n', '        });\n', '\n', '        Titty storage titty = Titties[tittyId];\n', '        uint256 newAccessoryId = Accessories.push(_accessory) - 1;\n', '        titty.accessories.push(newAccessoryId);\n', '        AddAccessory(tittyId, newAccessoryId);\n', '\n', '        return newAccessoryId;\n', '\n', '    }\n', '\n', '    function totalAccessories(uint256 _tittyId) public view returns (uint256) {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        return titty.accessories.length;\n', '\n', '    }\n', '\n', '    function getAccessory(uint256 _tittyId, uint256 _aId) public view returns (uint256 id, string name,  uint256 price, bool active) {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        uint256 accId = titty.accessories[_aId];\n', '        Accessory storage accessory = Accessories[accId];\n', '        id = accessory.id;\n', '        name = accessory.name;\n', '        price = accessory.price;\n', '        active = accessory.isActive;\n', '\n', '    }\n', '\n', '    function createTitty (uint256 _id, string _gender, uint256 _price, address _owner, string _name) internal returns (uint) {\n', '        \n', '        Titty memory _titty = Titty({\n', '            id: _id,\n', '            name: _name,\n', '            gender: _gender,\n', '            originalPrice: _price,\n', '            salePrice: _price,\n', '            accessories: new uint256[](0),\n', '            forSale: false\n', '        });\n', '\n', '        uint256 newTittyId = Titties.push(_titty) - 1;\n', '\n', '        Creation(\n', '            _owner,\n', '            newTittyId,\n', '            _id\n', '        );\n', '\n', '        _transfer(0, _owner, newTittyId);\n', '        return newTittyId;\n', '    }\n', '\n', '    \n', '\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4024253425002138292f2d3a252e6e232f">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '    function implementsERC721() public pure returns (bool);\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TittyOwnership is TittyBase, ERC721 {\n', '\n', '    string public name = "CryptoTittes";\n', '    string public symbol = "CT";\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function _isOwner(address _user, uint256 _tittyId) internal view returns (bool) {\n', '        return tittyIndexToOwner[_tittyId] == _user;\n', '    }\n', '\n', '    function _approve(uint256 _tittyId, address _approved) internal {\n', '         tittyApproveIndex[_tittyId] = _approved; \n', '    }\n', '\n', '    function _approveFor(address _user, uint256 _tittyId) internal view returns (bool) {\n', '         return tittyApproveIndex[_tittyId] == _user; \n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return Titties.length - 1;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownerTittiesCount[_owner];\n', '    }\n', '    \n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        owner = tittyIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        require(_isOwner(msg.sender, _tokenId));\n', '        _approve(_tokenId, _to);\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require(_approveFor(msg.sender, _tokenId));\n', '        require(_isOwner(_from, _tokenId));\n', '\n', '        _transfer(_from, _to, _tokenId);\n', '        \n', '\n', '    }\n', '    function transfer(address _to, uint256 _tokenId) public {\n', '        require(_to != address(0));\n', '        require(_isOwner(msg.sender, _tokenId));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract TittyPurchase is TittyOwnership {\n', '\n', '    address private wallet;\n', '    address private boat;\n', '\n', '    function TittyPurchase(address _wallet, address _boat) public {\n', '        wallet = _wallet;\n', '        boat = _boat;\n', '\n', '        createTitty(0, "unissex", 1000000000, address(0), "genesis");\n', '    }\n', '\n', '    function purchaseNew(uint256 _id, string _name, string _gender, uint256 _price) public payable {\n', '\n', '        if (msg.value == 0 && msg.value != _price)\n', '            revert();\n', '\n', '        uint256 boatFee = calculateBoatFee(msg.value);\n', '        createTitty(_id, _gender, _price, msg.sender, _name);\n', '        wallet.transfer(msg.value - boatFee);\n', '        boat.transfer(boatFee);\n', '\n', '    }\n', '\n', '    function purchaseExistent(uint256 _tittyId) public payable {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        uint256 fee = calculateFee(titty.salePrice);\n', '        if (msg.value == 0 && msg.value != titty.salePrice)\n', '            revert();\n', '        \n', '        uint256 val = msg.value - fee;\n', '        address owner = tittyIndexToOwner[_tittyId];\n', '        _approve(_tittyId, msg.sender);\n', '        transferFrom(owner, msg.sender, _tittyId);\n', '        owner.transfer(val);\n', '        wallet.transfer(fee);\n', '\n', '    }\n', '\n', '    function purchaseAccessory(uint256 _tittyId, uint256 _accId, string _name, uint256 _price) public payable {\n', '\n', '        if (msg.value == 0 && msg.value != _price)\n', '            revert();\n', '\n', '        wallet.transfer(msg.value);\n', '        addAccessory(_accId, _name, _price,  _tittyId);\n', '        \n', '        \n', '    }\n', '\n', '    function getAmountOfTitties() public view returns(uint) {\n', '        return Titties.length;\n', '    }\n', '\n', '    function getLatestId() public view returns (uint) {\n', '        return Titties.length - 1;\n', '    }\n', '\n', '    function getTittyByWpId(address _owner, uint256 _wpId) public view returns (bool own, uint256 tittyId) {\n', '        \n', '        for (uint256 i = 1; i<=totalSupply(); i++) {\n', '            Titty storage titty = Titties[i];\n', '            bool isOwner = _isOwner(_owner, i);\n', '            if (titty.id == _wpId && isOwner) {\n', '                return (true, i);\n', '            }\n', '        }\n', '        \n', '        return (false, 0);\n', '    }\n', '\n', '    function belongsTo(address _account, uint256 _tittyId) public view returns (bool) {\n', '        return _isOwner(_account, _tittyId);\n', '    }\n', '\n', '    function changePrice(uint256 _price, uint256 _tittyId) public {\n', '        _changeTittyPrice(_price, _tittyId);\n', '    }\n', '\n', '    function changeName(string _name, uint256 _tittyId) public {\n', '        _changeName(_name, _tittyId);\n', '    }\n', '\n', '    function makeItSellable(uint256 _tittyId) public {\n', '        _setTittyForSale(true, _tittyId);\n', '    }\n', '\n', '    function calculateFee (uint256 _price) internal pure returns(uint) {\n', '        return (_price * 10)/100;\n', '    }\n', '\n', '    function calculateBoatFee (uint256 _price) internal pure returns(uint) {\n', '        return (_price * 25)/100;\n', '    }\n', '\n', '    function() external {}\n', '\n', '    function getATitty(uint256 _tittyId)\n', '        public \n', '        view \n', '        returns (\n', '        uint256 id,\n', '        string name,\n', '        string gender,\n', '        uint256 originalPrice,\n', '        uint256 salePrice,\n', '        bool forSale\n', '        ) {\n', '\n', '            Titty storage titty = Titties[_tittyId];\n', '            id = titty.id;\n', '            name = titty.name;\n', '            gender = titty.gender;\n', '            originalPrice = titty.originalPrice;\n', '            salePrice = titty.salePrice;\n', '            forSale = titty.forSale;\n', '        }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract TittyBase {\n', '\n', '    event Transfer(address indexed from, address indexed to);\n', '    event Creation(address indexed from, uint256 tittyId, uint256 wpId);\n', '    event AddAccessory(uint256 tittyId, uint256 accessoryId);\n', '\n', '    struct Accessory {\n', '\n', '        uint256 id;\n', '        string name;\n', '        uint256 price;\n', '        bool isActive;\n', '\n', '    }\n', '\n', '    struct Titty {\n', '\n', '        uint256 id;\n', '        string name;\n', '        string gender;\n', '        uint256 originalPrice;\n', '        uint256 salePrice;\n', '        uint256[] accessories;\n', '        bool forSale;\n', '    }\n', '\n', '    //Storage\n', '    Titty[] Titties;\n', '    Accessory[] Accessories;\n', '    mapping (uint256 => address) public tittyIndexToOwner;\n', '    mapping (address => uint256) public ownerTittiesCount;\n', '    mapping (uint256 => address) public tittyApproveIndex;\n', '\n', '    function _transfer(address _from, address _to, uint256 _tittyId) internal {\n', '\n', '        ownerTittiesCount[_to]++;\n', '\n', '        tittyIndexToOwner[_tittyId] = _to;\n', '        if (_from != address(0)) {\n', '            ownerTittiesCount[_from]--;\n', '            delete tittyApproveIndex[_tittyId];\n', '        }\n', '\n', '        Transfer(_from, _to);\n', '\n', '    }\n', '\n', '    function _changeTittyPrice (uint256 _newPrice, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.salePrice = _newPrice;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function _setTittyForSale (bool _forSale, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.forSale = _forSale;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function _changeName (string _name, uint256 _tittyId) internal {\n', '\n', '        require(tittyIndexToOwner[_tittyId] == msg.sender);\n', '        Titty storage _titty = Titties[_tittyId];\n', '        _titty.name = _name;\n', '\n', '        Titties[_tittyId] = _titty;\n', '    }\n', '\n', '    function addAccessory (uint256 _id, string _name, uint256 _price, uint256 tittyId ) internal returns (uint) {\n', '\n', '        Accessory memory _accessory = Accessory({\n', '\n', '            id: _id,\n', '            name: _name,\n', '            price: _price,\n', '            isActive: true\n', '\n', '        });\n', '\n', '        Titty storage titty = Titties[tittyId];\n', '        uint256 newAccessoryId = Accessories.push(_accessory) - 1;\n', '        titty.accessories.push(newAccessoryId);\n', '        AddAccessory(tittyId, newAccessoryId);\n', '\n', '        return newAccessoryId;\n', '\n', '    }\n', '\n', '    function totalAccessories(uint256 _tittyId) public view returns (uint256) {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        return titty.accessories.length;\n', '\n', '    }\n', '\n', '    function getAccessory(uint256 _tittyId, uint256 _aId) public view returns (uint256 id, string name,  uint256 price, bool active) {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        uint256 accId = titty.accessories[_aId];\n', '        Accessory storage accessory = Accessories[accId];\n', '        id = accessory.id;\n', '        name = accessory.name;\n', '        price = accessory.price;\n', '        active = accessory.isActive;\n', '\n', '    }\n', '\n', '    function createTitty (uint256 _id, string _gender, uint256 _price, address _owner, string _name) internal returns (uint) {\n', '        \n', '        Titty memory _titty = Titty({\n', '            id: _id,\n', '            name: _name,\n', '            gender: _gender,\n', '            originalPrice: _price,\n', '            salePrice: _price,\n', '            accessories: new uint256[](0),\n', '            forSale: false\n', '        });\n', '\n', '        uint256 newTittyId = Titties.push(_titty) - 1;\n', '\n', '        Creation(\n', '            _owner,\n', '            newTittyId,\n', '            _id\n', '        );\n', '\n', '        _transfer(0, _owner, newTittyId);\n', '        return newTittyId;\n', '    }\n', '\n', '    \n', '\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    function implementsERC721() public pure returns (bool);\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TittyOwnership is TittyBase, ERC721 {\n', '\n', '    string public name = "CryptoTittes";\n', '    string public symbol = "CT";\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function _isOwner(address _user, uint256 _tittyId) internal view returns (bool) {\n', '        return tittyIndexToOwner[_tittyId] == _user;\n', '    }\n', '\n', '    function _approve(uint256 _tittyId, address _approved) internal {\n', '         tittyApproveIndex[_tittyId] = _approved; \n', '    }\n', '\n', '    function _approveFor(address _user, uint256 _tittyId) internal view returns (bool) {\n', '         return tittyApproveIndex[_tittyId] == _user; \n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return Titties.length - 1;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownerTittiesCount[_owner];\n', '    }\n', '    \n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        owner = tittyIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        require(_isOwner(msg.sender, _tokenId));\n', '        _approve(_tokenId, _to);\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require(_approveFor(msg.sender, _tokenId));\n', '        require(_isOwner(_from, _tokenId));\n', '\n', '        _transfer(_from, _to, _tokenId);\n', '        \n', '\n', '    }\n', '    function transfer(address _to, uint256 _tokenId) public {\n', '        require(_to != address(0));\n', '        require(_isOwner(msg.sender, _tokenId));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract TittyPurchase is TittyOwnership {\n', '\n', '    address private wallet;\n', '    address private boat;\n', '\n', '    function TittyPurchase(address _wallet, address _boat) public {\n', '        wallet = _wallet;\n', '        boat = _boat;\n', '\n', '        createTitty(0, "unissex", 1000000000, address(0), "genesis");\n', '    }\n', '\n', '    function purchaseNew(uint256 _id, string _name, string _gender, uint256 _price) public payable {\n', '\n', '        if (msg.value == 0 && msg.value != _price)\n', '            revert();\n', '\n', '        uint256 boatFee = calculateBoatFee(msg.value);\n', '        createTitty(_id, _gender, _price, msg.sender, _name);\n', '        wallet.transfer(msg.value - boatFee);\n', '        boat.transfer(boatFee);\n', '\n', '    }\n', '\n', '    function purchaseExistent(uint256 _tittyId) public payable {\n', '\n', '        Titty storage titty = Titties[_tittyId];\n', '        uint256 fee = calculateFee(titty.salePrice);\n', '        if (msg.value == 0 && msg.value != titty.salePrice)\n', '            revert();\n', '        \n', '        uint256 val = msg.value - fee;\n', '        address owner = tittyIndexToOwner[_tittyId];\n', '        _approve(_tittyId, msg.sender);\n', '        transferFrom(owner, msg.sender, _tittyId);\n', '        owner.transfer(val);\n', '        wallet.transfer(fee);\n', '\n', '    }\n', '\n', '    function purchaseAccessory(uint256 _tittyId, uint256 _accId, string _name, uint256 _price) public payable {\n', '\n', '        if (msg.value == 0 && msg.value != _price)\n', '            revert();\n', '\n', '        wallet.transfer(msg.value);\n', '        addAccessory(_accId, _name, _price,  _tittyId);\n', '        \n', '        \n', '    }\n', '\n', '    function getAmountOfTitties() public view returns(uint) {\n', '        return Titties.length;\n', '    }\n', '\n', '    function getLatestId() public view returns (uint) {\n', '        return Titties.length - 1;\n', '    }\n', '\n', '    function getTittyByWpId(address _owner, uint256 _wpId) public view returns (bool own, uint256 tittyId) {\n', '        \n', '        for (uint256 i = 1; i<=totalSupply(); i++) {\n', '            Titty storage titty = Titties[i];\n', '            bool isOwner = _isOwner(_owner, i);\n', '            if (titty.id == _wpId && isOwner) {\n', '                return (true, i);\n', '            }\n', '        }\n', '        \n', '        return (false, 0);\n', '    }\n', '\n', '    function belongsTo(address _account, uint256 _tittyId) public view returns (bool) {\n', '        return _isOwner(_account, _tittyId);\n', '    }\n', '\n', '    function changePrice(uint256 _price, uint256 _tittyId) public {\n', '        _changeTittyPrice(_price, _tittyId);\n', '    }\n', '\n', '    function changeName(string _name, uint256 _tittyId) public {\n', '        _changeName(_name, _tittyId);\n', '    }\n', '\n', '    function makeItSellable(uint256 _tittyId) public {\n', '        _setTittyForSale(true, _tittyId);\n', '    }\n', '\n', '    function calculateFee (uint256 _price) internal pure returns(uint) {\n', '        return (_price * 10)/100;\n', '    }\n', '\n', '    function calculateBoatFee (uint256 _price) internal pure returns(uint) {\n', '        return (_price * 25)/100;\n', '    }\n', '\n', '    function() external {}\n', '\n', '    function getATitty(uint256 _tittyId)\n', '        public \n', '        view \n', '        returns (\n', '        uint256 id,\n', '        string name,\n', '        string gender,\n', '        uint256 originalPrice,\n', '        uint256 salePrice,\n', '        bool forSale\n', '        ) {\n', '\n', '            Titty storage titty = Titties[_tittyId];\n', '            id = titty.id;\n', '            name = titty.name;\n', '            gender = titty.gender;\n', '            originalPrice = titty.originalPrice;\n', '            salePrice = titty.salePrice;\n', '            forSale = titty.forSale;\n', '        }\n', '\n', '}']
