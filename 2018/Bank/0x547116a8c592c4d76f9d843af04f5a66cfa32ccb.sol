['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '}\n', '\n', 'contract TokenSale {\n', '\taddress public owner;\n', '\taddress public token = 0xCD8aAC9972dc4Ddc48d700bc0710C0f5223fBCfa;\n', '\tuint256 price = 24570000000000;\n', '\tevent TokenSold(address indexed _buyer, uint256 _tokens);\n', '\tmodifier onlyOwner() {\n', '      if (msg.sender!=owner) revert();\n', '      _;\n', '    }\n', '    \n', '    function TokenSale() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function setPrice(uint256 newPrice) public onlyOwner {\n', '        if (newPrice<=0) revert();\n', '        price = newPrice;\n', '    }\n', '    \n', '    function withdrawTokens(address tadr, uint256 tkn) public onlyOwner  {\n', '        if (tkn<=0 || ERC20(tadr).balanceOf(address(this))<tkn) revert();\n', '        ERC20(tadr).transfer(owner, tkn);\n', '    }\n', '    \n', '    function () payable public {\n', '        if (msg.value<=0) revert();\n', '        uint256 tokens = msg.value/price;\n', '        uint256 max = ERC20(token).balanceOf(address(this));\n', '        if (tokens>max) {\n', '            tokens = max;\n', '            msg.sender.transfer(msg.value-max*price);\n', '        }\n', '        ERC20(token).transfer(msg.sender, tokens);\n', '        emit TokenSold(msg.sender,tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '}\n', '\n', 'contract TokenSale {\n', '\taddress public owner;\n', '\taddress public token = 0xCD8aAC9972dc4Ddc48d700bc0710C0f5223fBCfa;\n', '\tuint256 price = 24570000000000;\n', '\tevent TokenSold(address indexed _buyer, uint256 _tokens);\n', '\tmodifier onlyOwner() {\n', '      if (msg.sender!=owner) revert();\n', '      _;\n', '    }\n', '    \n', '    function TokenSale() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function setPrice(uint256 newPrice) public onlyOwner {\n', '        if (newPrice<=0) revert();\n', '        price = newPrice;\n', '    }\n', '    \n', '    function withdrawTokens(address tadr, uint256 tkn) public onlyOwner  {\n', '        if (tkn<=0 || ERC20(tadr).balanceOf(address(this))<tkn) revert();\n', '        ERC20(tadr).transfer(owner, tkn);\n', '    }\n', '    \n', '    function () payable public {\n', '        if (msg.value<=0) revert();\n', '        uint256 tokens = msg.value/price;\n', '        uint256 max = ERC20(token).balanceOf(address(this));\n', '        if (tokens>max) {\n', '            tokens = max;\n', '            msg.sender.transfer(msg.value-max*price);\n', '        }\n', '        ERC20(token).transfer(msg.sender, tokens);\n', '        emit TokenSold(msg.sender,tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
