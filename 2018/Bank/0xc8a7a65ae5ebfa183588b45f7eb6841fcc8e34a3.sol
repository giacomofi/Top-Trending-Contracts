['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     function mint(address from, address to, uint tokens) public;\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract MusicContract {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    struct Music {\n', '      address musician;\n', '      uint musicId;\n', '      string musicLink;\n', '      bool marketType;    //false for sponsor, true for votes\n', '      uint totalAmountForUnlock;\n', '      uint totalEarning;\n', '      uint amountLeftForUnlock;\n', '      uint amountToBePaid;\n', '      bool isUnlocked;  \n', '    }    \n', '    \n', '    struct Voter {\n', '      address publicKey;\n', '      uint amountEarned;  \n', '    }\n', '    \n', '    struct Sponsor {\n', '      address publicKey;\n', '      uint amountEarned;\n', '      uint amountPaid;\n', '    }\n', '    \n', '    struct VoteMusicPayoutScheme {\n', '      uint musicianPercentage; //57\n', '      uint voterPercentage;// 35\n', '      uint systemPercentage;// 8  \n', '    }\n', '    \n', '    struct SponsorPayoutScheme {\n', '      uint sponsorPercentage;// 45\n', '      uint musicianPercentage;// 37\n', '      uint voterPercentage; // 10\n', '      uint systemPercentage; // 8\n', '    }\n', '    \n', '    // The token that would be sold using this contract \n', '    ERC20Interface public token;\n', '    //Objects for use within program\n', '    VoteMusicPayoutScheme voteMusicPayoutSchemeObj;\n', '    SponsorPayoutScheme sponsorPayoutSchemeObj;\n', '    Music music;\n', '    Sponsor sponsor;\n', '    Voter voter;\n', '    uint counter = 0;\n', '    address public wallet;\n', '    \n', '    mapping (uint=>Voter[]) musicVoterList;\n', '    mapping (uint=>Sponsor[]) musicSponsorList;\n', '   \n', '    mapping (uint=>Music) musicList;\n', '    uint localIntAsPerNeed;\n', '    address localAddressAsPerNeed;\n', '    Voter[] voters;\n', '    Sponsor[] sponsors;\n', '   \n', '    constructor(address _wallet,address _tokenAddress) public {\n', '      wallet = _wallet;\n', '      token = ERC20Interface(_tokenAddress);\n', '      setup();\n', '    }\n', '        \n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    \n', '    function setup() internal {\n', '        voteMusicPayoutSchemeObj = VoteMusicPayoutScheme({musicianPercentage:57, voterPercentage:35, systemPercentage:8});\n', '        sponsorPayoutSchemeObj = SponsorPayoutScheme({sponsorPercentage:45, musicianPercentage: 37, voterPercentage:10, systemPercentage:8});\n', '    }\n', '    \n', '    function UploadMusic(uint muId, string lnk, address muPublicKey,bool unlocktype,uint amount, uint uploadTokenAmount) public\n', '    {\n', '        require(msg.sender == wallet);\n', '        token.mint(muPublicKey,wallet,uploadTokenAmount*10**18);    //tokens deducted from advertiser&#39;s wallet\n', '        \n', '        require(musicList[muId].musicId == 0);\n', '      //Add to music struct\n', '      music = Music ({\n', '          musician : muPublicKey,\n', '          musicId : muId,\n', '          musicLink : lnk,\n', '          marketType : unlocktype,\n', '          totalEarning : 0,\n', '          totalAmountForUnlock : amount * 10 ** 18,\n', '          amountLeftForUnlock : amount * 10 ** 18,\n', '          amountToBePaid : uploadTokenAmount * 10 **18,\n', '          isUnlocked : false\n', '      });\n', '      musicList[muId] = music;\n', '    }\n', '\n', '   function DownloadMusic(uint musId, address senderId, uint tokenAmount) public returns (bool goAhead)\n', '    {\n', '        require(msg.sender == wallet);\n', '        require(musicList[musId].musicId == musId);\n', '        require(musicList[musId].isUnlocked == true);\n', '        token.mint(senderId,wallet,tokenAmount*10**18);\n', '       \n', '        musicList[musId].totalEarning = musicList[musId].totalEarning.add(tokenAmount);\n', '        musicList[musId].amountToBePaid = musicList[musId].amountToBePaid.add(tokenAmount);\n', '        goAhead = true;\n', '    }\n', '    \n', '    function DoSponsorPayout(Music musicObj) private\n', '    {\n', '        \n', '        //sponsor   \n', '        localIntAsPerNeed = musicObj.musicId;\n', '        sponsors = musicSponsorList[localIntAsPerNeed];\n', '                    \n', '        //calculating sponsor payout\n', '        localIntAsPerNeed = sponsorPayoutSchemeObj.sponsorPercentage;\n', '        uint sponsorPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        sponsorPayout = sponsorPayout.div(100);\n', '        \n', '        //calculating voter payout\n', '        voters = musicVoterList[musicObj.musicId];\n', '        localIntAsPerNeed = sponsorPayoutSchemeObj.voterPercentage;\n', '        uint voterPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        voterPayout = voterPayout.div(100);\n', '        \n', '        //calculating musician payout\n', '        localIntAsPerNeed = sponsorPayoutSchemeObj.musicianPercentage;\n', '        uint musicianPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        musicianPayout = musicianPayout.div(100);\n', '        \n', '        //calculating system payout\n', '        localIntAsPerNeed = sponsorPayoutSchemeObj.systemPercentage;\n', '        uint systemPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        systemPayout = systemPayout.div(100);\n', '        \n', '        \n', '        //doing sponsor payout            \n', '        for (counter=0;counter<sponsors.length;counter++)\n', '        {\n', '            //Find the percentage\n', '            localIntAsPerNeed = sponsors[counter].amountPaid.mul(100);\n', '            localIntAsPerNeed = localIntAsPerNeed.div(musicObj.totalAmountForUnlock);\n', '            uint amtToSend = sponsorPayout.mul(localIntAsPerNeed);\n', '            amtToSend = amtToSend.div(100);\n', '            token.mint(wallet, sponsors[counter].publicKey, amtToSend);\n', '            sponsors[counter].amountEarned = sponsors[counter].amountEarned.add(amtToSend);\n', '            musicObj.amountToBePaid = musicObj.amountToBePaid.sub(amtToSend);\n', '        }     \n', '        \n', '        \n', '        //doing voter payout\n', '        if (voters.length>0)\n', '        {\n', '            uint perVoterPayout = voterPayout.div(voters.length);\n', '               \n', '            for (counter=0;counter<voters.length;counter++)\n', '            {\n', '                token.mint(wallet, voters[counter].publicKey, perVoterPayout);\n', '                voters[counter].amountEarned = voters[counter].amountEarned.add(perVoterPayout);\n', '                musicObj.amountToBePaid = musicObj.amountToBePaid.sub(perVoterPayout);\n', '            }\n', '        }\n', '        else\n', '        {\n', '             musicObj.amountToBePaid = musicObj.amountToBePaid.sub(voterPayout);\n', '        }\n', '        \n', '        \n', '        //doing musician payout\n', '        localAddressAsPerNeed = musicObj.musician;\n', '        token.mint(wallet,localAddressAsPerNeed,musicianPayout);\n', '        musicObj.amountToBePaid = musicObj.amountToBePaid.sub(musicianPayout);\n', '                \n', '        //catering for system payout - no token transfers as the tokens are already in the owner wallet\n', '        musicObj.amountToBePaid = musicObj.amountToBePaid.sub(systemPayout);\n', '        \n', '        require(musicObj.amountToBePaid == 0);\n', '    }\n', '    function DoVoterPayout(Music musicObj) private\n', '    {\n', '        uint j = 0;\n', '        //sponsor   \n', '        \n', '        //calculating voter payout\n', '        voters = musicVoterList[musicObj.musicId];\n', '        localIntAsPerNeed = voteMusicPayoutSchemeObj.voterPercentage;\n', '        uint voterPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        voterPayout = voterPayout.div(100);\n', '        uint perVoterPayout = voterPayout.div(voters.length);\n', '        \n', '        //calculating musician payout\n', '        localIntAsPerNeed = voteMusicPayoutSchemeObj.musicianPercentage;\n', '        uint musicianPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        musicianPayout = musicianPayout.div(100);\n', '        \n', '        //calculating system payout\n', '        localIntAsPerNeed = voteMusicPayoutSchemeObj.systemPercentage;\n', '        uint systemPayout = musicObj.amountToBePaid.mul(localIntAsPerNeed);\n', '        systemPayout = systemPayout.div(100);\n', '        \n', '        //doing voter payout     \n', '        for (j=0;j<voters.length;j++)\n', '        {\n', '            token.mint(wallet,voters[j].publicKey, perVoterPayout);\n', '            voters[j].amountEarned = voters[j].amountEarned.add(perVoterPayout);\n', '            musicObj.amountToBePaid = musicObj.amountToBePaid.sub(perVoterPayout);\n', '        }\n', '        \n', '        //doing musician payout\n', '        token.mint(wallet,musicObj.musician,musicianPayout);\n', '        musicObj.amountToBePaid = musicObj.amountToBePaid.sub(musicianPayout);\n', '        //logString("musician payout done");\n', '        \n', '        //catering for system payout - not doing manual transfer as all the tokens are already in the wallet\n', '        musicObj.amountToBePaid = musicObj.amountToBePaid.sub(systemPayout);\n', '        \n', '        require(musicObj.amountToBePaid == 0);            \n', '    }\n', '    function DoMusicPayout (uint musId) public\n', '    {\n', '        require(msg.sender == wallet);\n', '        require(musicList[musId].musicId == musId);\n', '        require(musicList[musId].isUnlocked == true);\n', '        require(musicList[musId].amountToBePaid > 0);\n', '        require(token.balanceOf(wallet)>=musicList[musId].amountToBePaid);\n', '        bool unlock = musicList[musId].marketType;\n', '        if (unlock == false)\n', '        {\n', '            //unlock type is sponsor\n', '            DoSponsorPayout(musicList[musId]);\n', '            musicList[musId].amountToBePaid = 0;\n', '        }\n', '        else\n', '        {\n', '            //unlock type is voter\n', '            DoVoterPayout(musicList[musId]);\n', '            musicList[musId].amountToBePaid = 0;\n', '        }\n', '    }\n', '    function SponsorMusic(uint musId, uint sponsorAmount, address sponsorAddress) public\n', '    {\n', '        //msg.sender is the sponsor\n', '        sponsorAmount = sponsorAmount * 10 ** 18;\n', '        require(token.balanceOf(sponsorAddress) > sponsorAmount);   \n', '        require (musicList[musId].musicId == musId);\n', '        require  (musicList[musId].isUnlocked == false);\n', '        require(musicList[musId].marketType == false);\n', '        require (musicList[musId].amountLeftForUnlock>=sponsorAmount);\n', '        token.mint(sponsorAddress,wallet,sponsorAmount);\n', '        \n', '        musicList[musId].amountLeftForUnlock = musicList[musId].amountLeftForUnlock.sub(sponsorAmount);\n', '        musicList[musId].amountToBePaid = musicList[musId].amountToBePaid.add(sponsorAmount);\n', '        sponsor = Sponsor({\n', '            publicKey : msg.sender,\n', '            amountEarned : 0,\n', '            amountPaid : sponsorAmount\n', '        });\n', '                  \n', '        musicSponsorList[musId].push(sponsor);\n', '        if (musicList[musId].amountLeftForUnlock == 0)\n', '        {\n', '            musicList[musId].isUnlocked = true;\n', '        }\n', '    }\n', '    \n', '    function VoteMusic(uint musId, address voterPublicKey) public \n', '    {\n', '        require(musicList[musId].musicId == musId);\n', '        require(musicList[musId].isUnlocked == false);\n', '        //logString("music found");\n', '        voter = Voter({publicKey: voterPublicKey, amountEarned : 0});\n', '        musicVoterList[musId].push(voter);\n', '        //logString("voter added");\n', '    }\n', '    function unlockVoterMusic(uint musId) public\n', '    {\n', '        require(msg.sender == wallet);\n', '        require(musicList[musId].musicId == musId);\n', '        musicList[musId].isUnlocked = true;\n', '    }\n', '    function getTokenBalance() public constant returns (uint) {\n', '        return token.balanceOf(msg.sender);\n', '    }\n', '    \n', '    function changeWalletAddress(address newWallet) public  \n', '    {\n', '        require(msg.sender == wallet);\n', '        wallet = newWallet;\n', '    }\n', '}']