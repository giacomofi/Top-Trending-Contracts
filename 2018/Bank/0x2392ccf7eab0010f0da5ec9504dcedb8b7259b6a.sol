['pragma solidity ^0.4.25;\n', '\n', 'contract invest{\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) dateInvest;\n', '    uint constant public FEE = 3;\n', '    uint constant public ADMIN_FEE = 1;\n', '    uint constant public REFERRER_FEE = 1;\n', '    address private owner;\n', '    address private adminAddr;\n', '    bool private stopInvest;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        adminAddr = msg.sender;\n', '        stopInvest = false;\n', '    }\n', '\n', '    function () external payable {\n', '        address sender = msg.sender;\n', '        \n', '        require( !stopInvest, "invest stop" );\n', '        \n', '        if (invested[sender] != 0) {\n', '            uint256 amount = getInvestorDividend(sender);\n', '            if (amount >= address(this).balance){\n', '                amount = address(this).balance;\n', '                stopInvest = true;\n', '            }\n', '            sender.send(amount);\n', '        }\n', '\n', '        dateInvest[sender] = now;\n', '        invested[sender] += msg.value;\n', '\n', '        if (msg.value > 0){\n', '            address ref = bytesToAddress(msg.data);\n', '            adminAddr.send(msg.value * ADMIN_FEE / 100);\n', '            if (ref != sender && invested[ref] != 0){\n', '                ref.send(msg.value * REFERRER_FEE / 100);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getInvestorDividend(address addr) public view returns(uint256) {\n', '        return invested[addr] * FEE / 100 * (now - dateInvest[addr]) / 1 days;\n', '    }\n', '    \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract invest{\n', '    mapping (address => uint256) invested;\n', '    mapping (address => uint256) dateInvest;\n', '    uint constant public FEE = 3;\n', '    uint constant public ADMIN_FEE = 1;\n', '    uint constant public REFERRER_FEE = 1;\n', '    address private owner;\n', '    address private adminAddr;\n', '    bool private stopInvest;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        adminAddr = msg.sender;\n', '        stopInvest = false;\n', '    }\n', '\n', '    function () external payable {\n', '        address sender = msg.sender;\n', '        \n', '        require( !stopInvest, "invest stop" );\n', '        \n', '        if (invested[sender] != 0) {\n', '            uint256 amount = getInvestorDividend(sender);\n', '            if (amount >= address(this).balance){\n', '                amount = address(this).balance;\n', '                stopInvest = true;\n', '            }\n', '            sender.send(amount);\n', '        }\n', '\n', '        dateInvest[sender] = now;\n', '        invested[sender] += msg.value;\n', '\n', '        if (msg.value > 0){\n', '            address ref = bytesToAddress(msg.data);\n', '            adminAddr.send(msg.value * ADMIN_FEE / 100);\n', '            if (ref != sender && invested[ref] != 0){\n', '                ref.send(msg.value * REFERRER_FEE / 100);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getInvestorDividend(address addr) public view returns(uint256) {\n', '        return invested[addr] * FEE / 100 * (now - dateInvest[addr]) / 1 days;\n', '    }\n', '    \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '    \n', '}']
