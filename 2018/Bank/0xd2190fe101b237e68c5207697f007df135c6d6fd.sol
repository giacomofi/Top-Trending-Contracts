['pragma solidity ^0.4.24;\n', '\n', 'contract BasicAccessControl {\n', '    address public owner;\n', '    // address[] public moderators;\n', '    uint16 public totalModerators = 0;\n', '    mapping (address => bool) public moderators;\n', '    bool public isMaintaining = false;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerators() {\n', '        require(msg.sender == owner || moderators[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isActive {\n', '        require(!isMaintaining);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function AddModerator(address _newModerator) onlyOwner public {\n', '        if (moderators[_newModerator] == false) {\n', '            moderators[_newModerator] = true;\n', '            totalModerators += 1;\n', '        }\n', '    }\n', '    \n', '    function RemoveModerator(address _oldModerator) onlyOwner public {\n', '        if (moderators[_oldModerator] == true) {\n', '            moderators[_oldModerator] = false;\n', '            totalModerators -= 1;\n', '        }\n', '    }\n', '\n', '    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n', '        isMaintaining = _isMaintaining;\n', '    }\n', '}\n', '\n', 'contract EMONTInterface {\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function transfer(address to, uint tokens) public;\n', '}\n', '\n', 'contract CubegoCoreInterface {\n', '    function mineMaterial(address _owner, uint _mId, uint _amount) external;\n', '}\n', '\n', 'contract CubegoPresale is BasicAccessControl {\n', '    \n', '    struct SinglePack {\n', '        uint mId;\n', '        uint amount;\n', '        uint price;\n', '    }\n', '    \n', '    struct UltimatePack {\n', '        uint mId1;\n', '        uint amount1;\n', '        uint mId2;\n', '        uint amount2;\n', '        uint mId3;\n', '        uint amount3;\n', '        uint mId4;\n', '        uint amount4;\n', '        uint mId5;\n', '        uint amount5;\n', '        uint mId6;\n', '        uint amount6;\n', '        uint price;\n', '    }\n', '    \n', '    mapping(uint => SinglePack) public singlePacks;\n', '    mapping(uint => uint) public packQuantityFactor; // percentage\n', '    UltimatePack public ultimatePack;\n', '    CubegoCoreInterface public cubegoCore;\n', '    EMONTInterface public emontToken;\n', '    uint public discountFactor = 90; // percentage\n', '    uint public ethEmontRate = 1500 * 10 ** 8; // each 10 ** 18 ETH\n', '    \n', '    function setAddress(address _cubegoCoreAddress, address _emontTokenAddress) onlyModerators external {\n', '        cubegoCore = CubegoCoreInterface(_cubegoCoreAddress);\n', '        emontToken = EMONTInterface(_emontTokenAddress);\n', '    }\n', '    \n', '    function initConfig() onlyModerators external {\n', '        singlePacks[1] = SinglePack(8, 120, 0.40 * 10 ** 18);\n', '        singlePacks[2] = SinglePack(7, 125, 0.40 * 10 ** 18);\n', '        singlePacks[3] = SinglePack(6, 125, 0.40 * 10 ** 18);\n', '\n', '        singlePacks[4] = SinglePack(11, 40, 0.70 * 10 ** 18);\n', '        singlePacks[5] = SinglePack(10, 45, 0.70 * 10 ** 18);\n', '        singlePacks[6] = SinglePack(9, 45, 0.70 * 10 ** 18);\n', '        \n', '        ultimatePack.mId1 = 11;\n', '        ultimatePack.amount1 = 16;\n', '        ultimatePack.mId2 = 10;\n', '        ultimatePack.amount2 = 18;\n', '        ultimatePack.mId3 = 9;\n', '        ultimatePack.amount3 = 18;\n', '        ultimatePack.mId4 = 8;\n', '        ultimatePack.amount4 = 48;\n', '        ultimatePack.mId5 = 7;\n', '        ultimatePack.amount5 = 50;\n', '        ultimatePack.mId6 = 6;\n', '        ultimatePack.amount6 = 50;\n', '        ultimatePack.price = 1.25 * 10 ** 18;\n', '        \n', '        packQuantityFactor[1] = 100;\n', '        packQuantityFactor[3] = 300;\n', '        packQuantityFactor[6] = 570;\n', '        packQuantityFactor[10] = 900;\n', '        \n', '        discountFactor = 90;\n', '    }\n', '    \n', '    function setConfig(uint _discountFactor, uint _ethEmontRate) onlyModerators external {\n', '        discountFactor = _discountFactor;\n', '        ethEmontRate = _ethEmontRate;\n', '    }\n', '    \n', '    function setSinglePack(uint _packId, uint _mId, uint _amount, uint _price) onlyModerators external {\n', '        singlePacks[_packId] = SinglePack(_mId, _amount, _price);\n', '    }\n', '    \n', '    function setUltimatePack(uint _mId1, uint _amount1, uint _mId2, uint _amount2, uint _mId3, uint _amount3,\n', '        uint _mId4, uint _amount4, uint _mId5, uint _amount5, uint _mId6, uint _amount6, uint _price) onlyModerators external {\n', '        ultimatePack.mId1 = _mId1;\n', '        ultimatePack.amount1 = _amount1;\n', '        \n', '        ultimatePack.mId2 = _mId2;\n', '        ultimatePack.amount2 = _amount2;\n', '        \n', '        ultimatePack.mId3 = _mId3;\n', '        ultimatePack.amount3 = _amount3;\n', '        \n', '        ultimatePack.mId4 = _mId4;\n', '        ultimatePack.amount4 = _amount4;\n', '        \n', '        ultimatePack.mId5 = _mId5;\n', '        ultimatePack.amount5 = _amount5;\n', '        \n', '        ultimatePack.mId6 = _mId6;\n', '        ultimatePack.amount6 = _amount6;\n', '        \n', '        ultimatePack.price = _price;\n', '    }\n', '    \n', '    function setPackQuantityFactor(uint _quantity, uint _priceFactor) onlyModerators external {\n', '        packQuantityFactor[_quantity] = _priceFactor;\n', '    }\n', '    \n', '    function withdrawEther(address _sendTo, uint _amount) onlyModerators public {\n', '        if (_amount > address(this).balance) {\n', '            revert();\n', '        }\n', '        _sendTo.transfer(_amount);\n', '    }\n', '    \n', '    function withdrawToken(address _sendTo, uint _amount) onlyModerators external {\n', '        if (_amount > emontToken.balanceOf(address(this))) {\n', '            revert();\n', '        }\n', '        emontToken.transfer(_sendTo, _amount);\n', '    }\n', '    \n', '    // emont payment\n', '    \n', '    function buySinglePackByToken(address _buyer, uint _tokens, uint _packId, uint _amount) onlyModerators external{\n', '        uint packFactor = packQuantityFactor[_amount];\n', '        if (packFactor == 0) revert();\n', '        SinglePack memory pack = singlePacks[_packId];\n', '        if (pack.price == 0) revert();\n', '        \n', '        uint payAmount = (pack.price * packFactor * discountFactor) / 10000;\n', '        uint payTokenAmount = payAmount * ethEmontRate / 10 ** 18;\n', '        if (_tokens < payTokenAmount) revert();\n', '        \n', '        cubegoCore.mineMaterial(_buyer, pack.mId, pack.amount * _amount);\n', '        \n', '    }\n', '    \n', '    function buyUltimatePackByToken(address _buyer, uint _tokens, uint _amount) onlyModerators external {\n', '        uint packFactor = packQuantityFactor[_amount];\n', '        if (packFactor == 0) revert();\n', '        \n', '        uint payAmount = (ultimatePack.price * packFactor * discountFactor) / 10000;\n', '        uint payTokenAmount = payAmount * ethEmontRate / 10 ** 18;\n', '        if (_tokens < payTokenAmount) revert();\n', '        \n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId1, ultimatePack.amount1 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId2, ultimatePack.amount2 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId3, ultimatePack.amount3 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId4, ultimatePack.amount4 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId5, ultimatePack.amount5 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId6, ultimatePack.amount6 * _amount);\n', '    }\n', '\n', '    // public\n', '\n', '    function getSinglePack(uint _packId) constant external returns(uint _mId, uint _amount, uint _price) {\n', '        SinglePack memory pack = singlePacks[_packId];\n', '        return (pack.mId, pack.amount, pack.price);\n', '    }\n', '    \n', '    function getUltimatePack() constant external returns(uint _mId1, uint _amount1, uint _mId2, uint _amount2, uint _mId3, \n', '        uint _amount3, uint _mId4, uint _amount4, uint _mId5, uint _amount5, uint _mId6, uint _amount6, uint _price) {\n', '        return (ultimatePack.mId1, ultimatePack.amount1, ultimatePack.mId2, ultimatePack.amount2, ultimatePack.mId3, ultimatePack.amount3, \n', '            ultimatePack.mId4, ultimatePack.amount4, ultimatePack.mId5, ultimatePack.amount5,\n', '            ultimatePack.mId6, ultimatePack.amount6, ultimatePack.price);\n', '    }\n', '    \n', '    function getSinglePackPrice(uint _packId, uint _amount) constant external returns(uint ethPrice, uint emontPrice) {\n', '        ethPrice = (singlePacks[_packId].price * packQuantityFactor[_amount] * discountFactor) / 10000;\n', '        emontPrice = ethPrice * ethEmontRate / 10 ** 18;\n', '    }\n', '    \n', '    function getUltimatePackPrice(uint _amount) constant external returns(uint ethPrice, uint emontPrice) {\n', '        ethPrice = (ultimatePack.price * packQuantityFactor[_amount] * discountFactor) / 10000;\n', '        emontPrice = ethPrice * ethEmontRate / 10 ** 18;\n', '    }\n', '    \n', '    function buySinglePackFor(address _buyer, uint _packId, uint _amount) isActive payable public {\n', '        uint packFactor = packQuantityFactor[_amount];\n', '        if (packFactor == 0) revert();\n', '        SinglePack memory pack = singlePacks[_packId];\n', '        if (pack.price == 0) revert();\n', '        \n', '        uint payAmount = (pack.price * packFactor * discountFactor) / 10000;\n', '        if (payAmount > msg.value) revert();\n', '        \n', '        cubegoCore.mineMaterial(_buyer, pack.mId, pack.amount * _amount);\n', '    }\n', '    \n', '    function buyUltimatePackFor(address _buyer, uint _amount) isActive payable public {\n', '        uint packFactor = packQuantityFactor[_amount];\n', '        if (packFactor == 0) revert();\n', '        \n', '        uint payAmount = (ultimatePack.price * packFactor * discountFactor) / 10000;\n', '        if (payAmount > msg.value) revert();\n', '        \n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId1, ultimatePack.amount1 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId2, ultimatePack.amount2 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId3, ultimatePack.amount3 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId4, ultimatePack.amount4 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId5, ultimatePack.amount5 * _amount);\n', '        cubegoCore.mineMaterial(_buyer, ultimatePack.mId6, ultimatePack.amount6 * _amount);\n', '    }\n', '    \n', '    function buySinglePack(uint _packId, uint _amount) isActive payable external {\n', '        buySinglePackFor(msg.sender, _packId, _amount);\n', '    }\n', '    \n', '    function buyUltimatePack(uint _amount) isActive payable external {\n', '        buyUltimatePackFor(msg.sender, _amount);\n', '    }\n', '    \n', '}']