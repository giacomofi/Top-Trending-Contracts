['pragma solidity ^0.4.21;\n', '\n', '/*\n', '\n', '\n', '  ______ .______     ____    ____ .______   .___________.  ______      ____    __    ____  ___      .______          _______.\n', ' /      ||   _  \\    \\   \\  /   / |   _  \\  |           | /  __  \\     \\   \\  /  \\  /   / /   \\     |   _  \\        /       |\n', '|  ,----&#39;|  |_)  |    \\   \\/   /  |  |_)  | `---|  |----`|  |  |  |     \\   \\/    \\/   / /  ^  \\    |  |_)  |      |   (----`\n', '|  |     |      /      \\_    _/   |   ___/      |  |     |  |  |  |      \\            / /  /_\\  \\   |      /        \\   \\    \n', '|  `----.|  |\\  \\----.   |  |     |  |          |  |     |  `--&#39;  |       \\    /\\    / /  _____  \\  |  |\\  \\----.----)   |   \n', ' \\______|| _| `._____|   |__|     | _|          |__|      \\______/         \\__/  \\__/ /__/     \\__\\ | _| `._____|_______/    \n', '                                                                                                                             \n', '\n', 'website:    https://cryptowars.ga\n', '\n', 'discord:    https://discord.gg/8AFP9gS\n', '\n', '25% Dividends Fees/Payouts\n', '\n', 'Crypto Warriors Card Game is also included in the contract and played on the same page as the Exchange\n', '\n', '2% of Fees go into the card game insurance accounts for card holders that face a half-life cut\n', '\n', '5% of all Card gains go to Card insurance accounts\n', '\n', 'Referral Program pays out 33% of Buy/Sell Fees to user of masternode link\n', '\n', '*/\n', '\n', 'contract AcceptsExchange {\n', '    cryptowars public tokenContract;\n', '\n', '    function AcceptsExchange(address _tokenContract) public {\n', '        tokenContract = cryptowars(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\n', '}\n', '\n', 'contract cryptowars {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0 || ownerAccounts[msg.sender] > 0);\n', '        //require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', '      modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    modifier allowPlayer(){\n', '        \n', '        require(boolAllowPlayer);\n', '        _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyActive(){\n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '\n', '     modifier onlyCardActive(){\n', '        require(boolCardActive);\n', '        _;\n', '    }\n', '\n', '    \n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol \n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                (ambassadors_[_customerAddress] == true &&\n', '                \n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_) ||\n', '\n', '                (_customerAddress == dev)\n', '                \n', '            );\n', '            \n', '            // updated the accumulated quota    \n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '        \n', '            // execute\n', '            _;\n', '        } else {\n', '            // in case the ether count drops low, the ambassador phase won&#39;t reinitiate\n', '            onlyAmbassadors = false;\n', '            _;    \n', '        }\n', '        \n', '    }\n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onCardBuy(\n', '        address customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 card,\n', '        uint256 newPrice,\n', '        uint256 halfLifeTime\n', '    );\n', '\n', '    event onInsuranceChange(\n', '        address customerAddress,\n', '        uint256 card,\n', '        uint256 insuranceAmount\n', '    );\n', '\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '       // HalfLife\n', '    event Halflife(\n', '        address customerAddress,\n', '        uint card,\n', '        uint price,\n', '        uint newBlockTime,\n', '        uint insurancePay,\n', '        uint cardInsurance\n', '    );\n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "CryptoWars";\n', '    string public symbol = "JEDI";\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    \n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '    \n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 3 ether;\n', '    uint256 constant internal ambassadorQuota_ = 20 ether;\n', '    \n', '    address dev;\n', '\n', '    uint nextAvailableCard;\n', '\n', '    address add2 = 0x0;\n', '\n', '    uint public totalCardValue = 0;\n', '\n', '    uint public totalCardInsurance = 0;\n', '\n', '    bool public boolAllowPlayer = false;\n', '    \n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    //CARDS\n', '    mapping(uint => address) internal cardOwner;\n', '    mapping(uint => uint) public cardPrice;\n', '    mapping(uint => uint) public basePrice;\n', '    mapping(uint => uint) internal cardPreviousPrice;\n', '    mapping(address => uint) internal ownerAccounts;\n', '    mapping(uint => uint) internal totalCardDivs;\n', '    mapping(uint => uint) internal totalCardDivsETH;\n', '    mapping(uint => string) internal cardName;\n', '    mapping(uint => uint) internal cardInsurance;\n', '\n', '    uint public cardInsuranceAccount;\n', '\n', '    uint cardPriceIncrement = 1250;   //25% Price Increases\n', '   \n', '    uint totalDivsProduced;\n', '\n', '    //card rates\n', '    uint public ownerDivRate = 500;\n', '    uint public distDivRate = 400;\n', '    uint public devDivRate = 50;\n', '    uint public insuranceDivRate = 50;\n', '    uint public referralRate = 50;\n', '    \n', '\n', '\n', '\n', '    mapping(uint => uint) internal cardBlockNumber;\n', '\n', '    uint public halfLifeTime = 5900;            //1 day half life period\n', '    uint public halfLifeRate = 900;             //cut price by 1/10 each half life period\n', '    uint public halfLifeReductionRate = 667;    //cut previous price by 1/3\n', '\n', '    bool public allowHalfLife = true;  //for cards\n', '\n', '    bool public allowReferral = false;  //for cards\n', '\n', '    uint public insurancePayoutRate = 250; //pay 25% of the remaining insurance fund for that card on each half-life\n', '\n', '   \n', '    address inv1 = 0x387E7E1580BbE37a06d847985faD20f353bBeB1b;\n', '    address inv2 = 0xD87fA3D0cF18fD2C14Aa34BcdeaF252Bf4d56644;\n', '    address inv3 = 0xc4166D533336cf49b85b3897D7315F5bB60E420b;\n', '\n', '\n', '    uint8 public dividendFee_ = 200; // 20% dividend fee on each buy and sell dividendFee_\n', '    uint8 public cardInsuranceFeeRate_ = 20;//20; // 2% fee rate on each buy and sell for Giants Card Insurance\n', '    uint8 public investorFeeRate_ = 10;//10; // 1% fee for investors\n', '\n', '    uint public maxCards = 50;\n', '\n', '    bool public boolContractActive = false;\n', '    bool public boolCardActive = false;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '    \n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '      // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    function cryptowars()\n', '        public\n', '    {\n', '        allowHalfLife = true;\n', '        allowReferral = false;\n', '\n', '        // add administrators here\n', '        administrators[msg.sender] = true;\n', '\n', '        dev = msg.sender;\n', '\n', '        ambassadors_[dev] = true;\n', '        ambassadors_[inv1] = true;\n', '        ambassadors_[inv2] = true;\n', '        ambassadors_[inv3] = true;\n', '\n', '        ambassadors_[0x96762288ebb2560a19F8eAdAaa2012504F64278B] = true;\n', '        ambassadors_[0x5145A296e1bB9d4Cf468d6d97d7B6D15700f39EF] = true;\n', '        ambassadors_[0xE74b1ea522B9d558C8e8719c3b1C4A9050b531CA] = true;\n', '        ambassadors_[0xb62A0AC2338C227748E3Ce16d137C6282c9870cF] = true;\n', '        ambassadors_[0x836e5abac615b371efce0ab399c22a04c1db5ecf] = true;\n', '        ambassadors_[0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61] = true;\n', '        ambassadors_[0x38602d1446fe063444B04C3CA5eCDe0cbA104240] = true;\n', '        ambassadors_[0x3825c8BA07166f34cE9a2cD1e08A68b105c82cB9] = true;\n', '        ambassadors_[0xa6662191F558e4C611c8f14b50c784EDA9Ace98d] = true;\n', '        \n', '\n', '        nextAvailableCard = 13;\n', '\n', '        cardOwner[1] = dev;\n', '        cardPrice[1] = 5 ether;\n', '        basePrice[1] = cardPrice[1];\n', '        cardPreviousPrice[1] = 0;\n', '\n', '        cardOwner[2] = dev;\n', '        cardPrice[2] = 4 ether;\n', '        basePrice[2] = cardPrice[2];\n', '        cardPreviousPrice[2] = 0;\n', '\n', '        cardOwner[3] = dev;\n', '        cardPrice[3] = 3 ether;\n', '        basePrice[3] = cardPrice[3];\n', '        cardPreviousPrice[3] = 0;\n', '\n', '        cardOwner[4] = dev;\n', '        cardPrice[4] = 2 ether;\n', '        basePrice[4] = cardPrice[4];\n', '        cardPreviousPrice[4] = 0;\n', '\n', '        cardOwner[5] = dev;\n', '        cardPrice[5] = 1.5 ether;\n', '        basePrice[5] = cardPrice[5];\n', '        cardPreviousPrice[5] = 0;\n', '\n', '        cardOwner[6] = 0xb62A0AC2338C227748E3Ce16d137C6282c9870cF;\n', '        cardPrice[6] = 1 ether;\n', '        basePrice[6] = cardPrice[6];\n', '        cardPreviousPrice[6] = 0;\n', '\n', '        cardOwner[7] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\n', '        cardPrice[7] = 0.8 ether;\n', '        basePrice[7] = cardPrice[7];\n', '        cardPreviousPrice[7] = 0;\n', '\n', '        cardOwner[8] = 0x836e5abac615b371efce0ab399c22a04c1db5ecf;\n', '        cardPrice[8] = 0.6 ether;\n', '        basePrice[8] = cardPrice[8];\n', '        cardPreviousPrice[8] = 0;\n', '\n', '        cardOwner[9] = 0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61;\n', '        cardPrice[9] = 0.4 ether;\n', '        basePrice[9] = cardPrice[9];\n', '        cardPreviousPrice[9] = 0;\n', '\n', '        cardOwner[10] = dev;\n', '        cardPrice[10] = 0.2 ether;\n', '        basePrice[10] = cardPrice[10];\n', '        cardPreviousPrice[10] = 0;\n', '\n', '        cardOwner[11] = dev;\n', '        cardPrice[11] = 0.1 ether;\n', '        basePrice[11] = cardPrice[11];\n', '        cardPreviousPrice[11] = 0;\n', '\n', '        cardOwner[12] = dev;\n', '        cardPrice[12] = 0.1 ether;\n', '        basePrice[12] = cardPrice[12];\n', '        cardPreviousPrice[12] = 0;\n', '\n', '        getTotalCardValue();\n', '\n', '    }\n', '    \n', '     \n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '    \n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '    \n', '    /**\n', '     * Converts all of caller&#39;s dividends to tokens.\n', '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '        \n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '        \n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '        \n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '        \n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_),1000);\n', '       // uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        \n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        \n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * Remember, there&#39;s a 10% fee here as well.\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '        \n', '        // liquify 20% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, dividendFee_),1000);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '        \n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        \n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    function setAllowHalfLife(bool _allow)\n', '        onlyAdministrator()\n', '    {\n', '        allowHalfLife = _allow;\n', '    \n', '    }\n', '\n', '    function setAllowReferral(bool _allow)\n', '        onlyAdministrator()\n', '    {\n', '        allowReferral = _allow;\n', '    \n', '    }\n', '\n', '    function setInv1(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv1 = _newInvestorAddress;\n', '    }\n', '\n', '    function setInv2(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv2 = _newInvestorAddress;\n', '    }\n', '\n', '    function setInv3(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv3 = _newInvestorAddress;\n', '    }\n', '\n', '    /**\n', '     * Set fees/rates\n', '     */\n', '    function setFeeRates(uint8 _newDivRate, uint8 _newInvestorFee, uint8 _newCardFee)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newDivRate <= 250);\n', '        require(_newInvestorFee + _newCardFee <= 50);  //5% -- 50 out of 1000\n', '\n', '        dividendFee_ = _newDivRate;\n', '        investorFeeRate_ = _newInvestorFee;\n', '        cardInsuranceFeeRate_ = _newCardFee;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setContractActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolContractActive = _status;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setCardActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolCardActive = _status;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    \n', '    function setMaxCards(uint _card)  \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        maxCards = _card;\n', '    }\n', '\n', '    function setHalfLifeTime(uint _time)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeTime = _time;\n', '    }\n', '\n', '    function setHalfLifeRate(uint _rate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeRate = _rate;\n', '    }\n', '\n', '    function addNewCard(uint _price) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(nextAvailableCard < maxCards);\n', '        cardPrice[nextAvailableCard] = _price;\n', '        basePrice[nextAvailableCard] = cardPrice[nextAvailableCard];\n', '        cardOwner[nextAvailableCard] = dev;\n', '        totalCardDivs[nextAvailableCard] = 0;\n', '        cardPreviousPrice[nextAvailableCard] = 0;\n', '        nextAvailableCard = nextAvailableCard + 1;\n', '        getTotalCardValue();\n', '        \n', '    }\n', '\n', '\n', '    function addAmbassador(address _newAmbassador) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        ambassadors_[_newAmbassador] = true;\n', '    }\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate. \n', '     */ \n', '    function myDividends(bool _includeReferralBonus) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    function myCardDividends()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return ownerAccounts[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '\n', '    function getNextAvailableCard()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return nextAvailableCard;\n', '    }\n', '\n', '    function getTotalCardValue()\n', '    internal\n', '    view\n', '    {\n', '        uint counter = 1;\n', '        uint _totalVal = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            _totalVal = SafeMath.add(_totalVal,cardPrice[counter]);\n', '                \n', '            counter = counter + 1;\n', '        } \n', '        totalCardValue = _totalVal;\n', '            \n', '    }\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        antiEarlyWhale(_incomingEthereum)\n', '        onlyActive()\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '\n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000));\n', '        ownerAccounts[inv1] = SafeMath.add(ownerAccounts[inv1] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '        ownerAccounts[inv2] = SafeMath.add(ownerAccounts[inv2] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '        ownerAccounts[inv3] = SafeMath.add(ownerAccounts[inv3] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '\n', '\n', '        _incomingEthereum = SafeMath.sub(_incomingEthereum,SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000) + SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000)*3);\n', '\n', '      \n', '        uint256 _referralBonus = SafeMath.div(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), 3);\n', '        uint256 _dividends = SafeMath.sub(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', ' \n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '        \n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '            \n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        \n', '        // we can&#39;t give people infinite ethereum\n', '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '            \n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '        \n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        distributeInsurance();\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '\n', '\n', '    function buyCard(uint _card, address _referrer)\n', '        public\n', '        payable\n', '        onlyCardActive()\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        require(_card > 0);\n', '        require(msg.value >= cardPrice[_card]);\n', '       \n', '        cardBlockNumber[_card] = block.number;   //reset block number for this card for half life calculations\n', '\n', '\n', '         //Determine the total dividends\n', '        uint _baseDividends = msg.value - cardPreviousPrice[_card];\n', '        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\n', '\n', '        //uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\n', '        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),1000);\n', '        _ownerDividends = SafeMath.add(_ownerDividends,cardPreviousPrice[_card]);  //owner receovers price they paid initially\n', '        uint _insuranceDividends = SafeMath.div(SafeMath.mul(_baseDividends,insuranceDivRate),1000);\n', '\n', '        totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card],_ownerDividends);\n', '        \n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, _insuranceDividends);\n', '            \n', '        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),1000);\n', '\n', '        if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\n', '                \n', '            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),1000);\n', '            _distDividends = SafeMath.sub(_distDividends,_referralDividends);\n', '            ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\n', '        }\n', '            \n', '        distributeYield(_distDividends);\n', '\n', '        //distribute dividends to accounts\n', '        address _previousOwner = cardOwner[_card];\n', '        address _newOwner = msg.sender;\n', '\n', '        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\n', '        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),1000));\n', '\n', '        cardOwner[_card] = _newOwner;\n', '\n', '        //Increment the card Price\n', '        cardPreviousPrice[_card] = msg.value;\n', '        cardPrice[_card] = SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000);\n', '  \n', '        getTotalCardValue();\n', '        distributeInsurance();\n', '        checkHalfLife();\n', '\n', '        emit onCardBuy(msg.sender, msg.value, _card, SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000), halfLifeTime + block.number);\n', '     \n', '    }\n', '\n', '\n', '    function distributeInsurance() internal\n', '    {\n', '        uint counter = 1;\n', '        uint _cardDistAmount = cardInsuranceAccount;\n', '        cardInsuranceAccount = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '  \n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_cardDistAmount, cardPrice[counter]),totalCardValue);\n', '            \n', '            cardInsurance[counter] = SafeMath.add(cardInsurance[counter], _distAmountLocal);\n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '    \n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '    }\n', '\n', '\n', '    function distributeYield(uint _distDividends) internal\n', '    //tokens\n', '    {\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_distDividends, cardPrice[counter]),totalCardValue);\n', '            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]],_distAmountLocal);\n', '            totalCardDivs[counter] = SafeMath.add(totalCardDivs[counter],_distAmountLocal);\n', '\n', '            counter = counter + 1;\n', '        } \n', '        getTotalCardValue();\n', '        checkHalfLife();\n', '    }\n', '\n', '    function extCheckHalfLife() \n', '    public\n', '    {\n', '        bool _boolDev = (msg.sender == dev);\n', '        if (_boolDev || boolAllowPlayer){\n', '            checkHalfLife();\n', '        }\n', '    }\n', '\n', '\n', '    function checkHalfLife() \n', '    internal\n', '    \n', '    //tokens\n', '    {\n', '\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            //HalfLife Check\n', '            if (allowHalfLife) {\n', '\n', '                if (cardPrice[counter] > basePrice[counter]) {\n', '                    uint _life = SafeMath.sub(currentBlock, cardBlockNumber[counter]);\n', '\n', '                    if (_life > halfLifeTime) {\n', '                    \n', '                        cardBlockNumber[counter] = currentBlock;  //Reset the clock for this card\n', '                        if (SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000) < basePrice[counter]){\n', '                            \n', '                            cardPrice[counter] = basePrice[counter];\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '                            \n', '                        }else{\n', '\n', '                            cardPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000);  \n', '                            cardPreviousPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter],halfLifeReductionRate),1000);\n', '\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '\n', '                        }\n', '                        emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '                        emit Halflife(cardOwner[counter], counter, cardPrice[counter], halfLifeTime + block.number, insurancePayout, cardInsurance[counter]);\n', '\n', '                    }\n', '                    //HalfLife Check\n', '                    \n', '                }\n', '               \n', '            }\n', '            \n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '        getTotalCardValue();\n', '\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    function getCardPrice(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardPrice[_card];\n', '    }\n', '\n', '   function getCardInsurance(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardInsurance[_card];\n', '    }\n', '\n', '\n', '    function getCardOwner(uint _card)\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardOwner[_card];\n', '    }\n', '\n', '    function gettotalCardDivs(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return totalCardDivs[_card];\n', '    }\n', '\n', '    function getTotalDivsProduced()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '     \n', '        return totalDivsProduced;\n', '    }\n', '    \n', '    \n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', '\n', '\n', '  ______ .______     ____    ____ .______   .___________.  ______      ____    __    ____  ___      .______          _______.\n', ' /      ||   _  \\    \\   \\  /   / |   _  \\  |           | /  __  \\     \\   \\  /  \\  /   / /   \\     |   _  \\        /       |\n', "|  ,----'|  |_)  |    \\   \\/   /  |  |_)  | `---|  |----`|  |  |  |     \\   \\/    \\/   / /  ^  \\    |  |_)  |      |   (----`\n", '|  |     |      /      \\_    _/   |   ___/      |  |     |  |  |  |      \\            / /  /_\\  \\   |      /        \\   \\    \n', "|  `----.|  |\\  \\----.   |  |     |  |          |  |     |  `--'  |       \\    /\\    / /  _____  \\  |  |\\  \\----.----)   |   \n", ' \\______|| _| `._____|   |__|     | _|          |__|      \\______/         \\__/  \\__/ /__/     \\__\\ | _| `._____|_______/    \n', '                                                                                                                             \n', '\n', 'website:    https://cryptowars.ga\n', '\n', 'discord:    https://discord.gg/8AFP9gS\n', '\n', '25% Dividends Fees/Payouts\n', '\n', 'Crypto Warriors Card Game is also included in the contract and played on the same page as the Exchange\n', '\n', '2% of Fees go into the card game insurance accounts for card holders that face a half-life cut\n', '\n', '5% of all Card gains go to Card insurance accounts\n', '\n', 'Referral Program pays out 33% of Buy/Sell Fees to user of masternode link\n', '\n', '*/\n', '\n', 'contract AcceptsExchange {\n', '    cryptowars public tokenContract;\n', '\n', '    function AcceptsExchange(address _tokenContract) public {\n', '        tokenContract = cryptowars(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\n', '}\n', '\n', 'contract cryptowars {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0 || ownerAccounts[msg.sender] > 0);\n', '        //require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', '      modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    modifier allowPlayer(){\n', '        \n', '        require(boolAllowPlayer);\n', '        _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyActive(){\n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '\n', '     modifier onlyCardActive(){\n', '        require(boolCardActive);\n', '        _;\n', '    }\n', '\n', '    \n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol \n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                (ambassadors_[_customerAddress] == true &&\n', '                \n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_) ||\n', '\n', '                (_customerAddress == dev)\n', '                \n', '            );\n', '            \n', '            // updated the accumulated quota    \n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '        \n', '            // execute\n', '            _;\n', '        } else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            _;    \n', '        }\n', '        \n', '    }\n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onCardBuy(\n', '        address customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 card,\n', '        uint256 newPrice,\n', '        uint256 halfLifeTime\n', '    );\n', '\n', '    event onInsuranceChange(\n', '        address customerAddress,\n', '        uint256 card,\n', '        uint256 insuranceAmount\n', '    );\n', '\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '       // HalfLife\n', '    event Halflife(\n', '        address customerAddress,\n', '        uint card,\n', '        uint price,\n', '        uint newBlockTime,\n', '        uint insurancePay,\n', '        uint cardInsurance\n', '    );\n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "CryptoWars";\n', '    string public symbol = "JEDI";\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    \n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '    \n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 3 ether;\n', '    uint256 constant internal ambassadorQuota_ = 20 ether;\n', '    \n', '    address dev;\n', '\n', '    uint nextAvailableCard;\n', '\n', '    address add2 = 0x0;\n', '\n', '    uint public totalCardValue = 0;\n', '\n', '    uint public totalCardInsurance = 0;\n', '\n', '    bool public boolAllowPlayer = false;\n', '    \n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    //CARDS\n', '    mapping(uint => address) internal cardOwner;\n', '    mapping(uint => uint) public cardPrice;\n', '    mapping(uint => uint) public basePrice;\n', '    mapping(uint => uint) internal cardPreviousPrice;\n', '    mapping(address => uint) internal ownerAccounts;\n', '    mapping(uint => uint) internal totalCardDivs;\n', '    mapping(uint => uint) internal totalCardDivsETH;\n', '    mapping(uint => string) internal cardName;\n', '    mapping(uint => uint) internal cardInsurance;\n', '\n', '    uint public cardInsuranceAccount;\n', '\n', '    uint cardPriceIncrement = 1250;   //25% Price Increases\n', '   \n', '    uint totalDivsProduced;\n', '\n', '    //card rates\n', '    uint public ownerDivRate = 500;\n', '    uint public distDivRate = 400;\n', '    uint public devDivRate = 50;\n', '    uint public insuranceDivRate = 50;\n', '    uint public referralRate = 50;\n', '    \n', '\n', '\n', '\n', '    mapping(uint => uint) internal cardBlockNumber;\n', '\n', '    uint public halfLifeTime = 5900;            //1 day half life period\n', '    uint public halfLifeRate = 900;             //cut price by 1/10 each half life period\n', '    uint public halfLifeReductionRate = 667;    //cut previous price by 1/3\n', '\n', '    bool public allowHalfLife = true;  //for cards\n', '\n', '    bool public allowReferral = false;  //for cards\n', '\n', '    uint public insurancePayoutRate = 250; //pay 25% of the remaining insurance fund for that card on each half-life\n', '\n', '   \n', '    address inv1 = 0x387E7E1580BbE37a06d847985faD20f353bBeB1b;\n', '    address inv2 = 0xD87fA3D0cF18fD2C14Aa34BcdeaF252Bf4d56644;\n', '    address inv3 = 0xc4166D533336cf49b85b3897D7315F5bB60E420b;\n', '\n', '\n', '    uint8 public dividendFee_ = 200; // 20% dividend fee on each buy and sell dividendFee_\n', '    uint8 public cardInsuranceFeeRate_ = 20;//20; // 2% fee rate on each buy and sell for Giants Card Insurance\n', '    uint8 public investorFeeRate_ = 10;//10; // 1% fee for investors\n', '\n', '    uint public maxCards = 50;\n', '\n', '    bool public boolContractActive = false;\n', '    bool public boolCardActive = false;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '    \n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '      // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    function cryptowars()\n', '        public\n', '    {\n', '        allowHalfLife = true;\n', '        allowReferral = false;\n', '\n', '        // add administrators here\n', '        administrators[msg.sender] = true;\n', '\n', '        dev = msg.sender;\n', '\n', '        ambassadors_[dev] = true;\n', '        ambassadors_[inv1] = true;\n', '        ambassadors_[inv2] = true;\n', '        ambassadors_[inv3] = true;\n', '\n', '        ambassadors_[0x96762288ebb2560a19F8eAdAaa2012504F64278B] = true;\n', '        ambassadors_[0x5145A296e1bB9d4Cf468d6d97d7B6D15700f39EF] = true;\n', '        ambassadors_[0xE74b1ea522B9d558C8e8719c3b1C4A9050b531CA] = true;\n', '        ambassadors_[0xb62A0AC2338C227748E3Ce16d137C6282c9870cF] = true;\n', '        ambassadors_[0x836e5abac615b371efce0ab399c22a04c1db5ecf] = true;\n', '        ambassadors_[0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61] = true;\n', '        ambassadors_[0x38602d1446fe063444B04C3CA5eCDe0cbA104240] = true;\n', '        ambassadors_[0x3825c8BA07166f34cE9a2cD1e08A68b105c82cB9] = true;\n', '        ambassadors_[0xa6662191F558e4C611c8f14b50c784EDA9Ace98d] = true;\n', '        \n', '\n', '        nextAvailableCard = 13;\n', '\n', '        cardOwner[1] = dev;\n', '        cardPrice[1] = 5 ether;\n', '        basePrice[1] = cardPrice[1];\n', '        cardPreviousPrice[1] = 0;\n', '\n', '        cardOwner[2] = dev;\n', '        cardPrice[2] = 4 ether;\n', '        basePrice[2] = cardPrice[2];\n', '        cardPreviousPrice[2] = 0;\n', '\n', '        cardOwner[3] = dev;\n', '        cardPrice[3] = 3 ether;\n', '        basePrice[3] = cardPrice[3];\n', '        cardPreviousPrice[3] = 0;\n', '\n', '        cardOwner[4] = dev;\n', '        cardPrice[4] = 2 ether;\n', '        basePrice[4] = cardPrice[4];\n', '        cardPreviousPrice[4] = 0;\n', '\n', '        cardOwner[5] = dev;\n', '        cardPrice[5] = 1.5 ether;\n', '        basePrice[5] = cardPrice[5];\n', '        cardPreviousPrice[5] = 0;\n', '\n', '        cardOwner[6] = 0xb62A0AC2338C227748E3Ce16d137C6282c9870cF;\n', '        cardPrice[6] = 1 ether;\n', '        basePrice[6] = cardPrice[6];\n', '        cardPreviousPrice[6] = 0;\n', '\n', '        cardOwner[7] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\n', '        cardPrice[7] = 0.8 ether;\n', '        basePrice[7] = cardPrice[7];\n', '        cardPreviousPrice[7] = 0;\n', '\n', '        cardOwner[8] = 0x836e5abac615b371efce0ab399c22a04c1db5ecf;\n', '        cardPrice[8] = 0.6 ether;\n', '        basePrice[8] = cardPrice[8];\n', '        cardPreviousPrice[8] = 0;\n', '\n', '        cardOwner[9] = 0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61;\n', '        cardPrice[9] = 0.4 ether;\n', '        basePrice[9] = cardPrice[9];\n', '        cardPreviousPrice[9] = 0;\n', '\n', '        cardOwner[10] = dev;\n', '        cardPrice[10] = 0.2 ether;\n', '        basePrice[10] = cardPrice[10];\n', '        cardPreviousPrice[10] = 0;\n', '\n', '        cardOwner[11] = dev;\n', '        cardPrice[11] = 0.1 ether;\n', '        basePrice[11] = cardPrice[11];\n', '        cardPreviousPrice[11] = 0;\n', '\n', '        cardOwner[12] = dev;\n', '        cardPrice[12] = 0.1 ether;\n', '        basePrice[12] = cardPrice[12];\n', '        cardPreviousPrice[12] = 0;\n', '\n', '        getTotalCardValue();\n', '\n', '    }\n', '    \n', '     \n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '    \n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '        \n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '        \n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '        \n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '        \n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_),1000);\n', '       // uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        \n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        \n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '        \n', '        // liquify 20% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, dividendFee_),1000);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '        \n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        \n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    function setAllowHalfLife(bool _allow)\n', '        onlyAdministrator()\n', '    {\n', '        allowHalfLife = _allow;\n', '    \n', '    }\n', '\n', '    function setAllowReferral(bool _allow)\n', '        onlyAdministrator()\n', '    {\n', '        allowReferral = _allow;\n', '    \n', '    }\n', '\n', '    function setInv1(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv1 = _newInvestorAddress;\n', '    }\n', '\n', '    function setInv2(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv2 = _newInvestorAddress;\n', '    }\n', '\n', '    function setInv3(address _newInvestorAddress)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        inv3 = _newInvestorAddress;\n', '    }\n', '\n', '    /**\n', '     * Set fees/rates\n', '     */\n', '    function setFeeRates(uint8 _newDivRate, uint8 _newInvestorFee, uint8 _newCardFee)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newDivRate <= 250);\n', '        require(_newInvestorFee + _newCardFee <= 50);  //5% -- 50 out of 1000\n', '\n', '        dividendFee_ = _newDivRate;\n', '        investorFeeRate_ = _newInvestorFee;\n', '        cardInsuranceFeeRate_ = _newCardFee;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setContractActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolContractActive = _status;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setCardActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolCardActive = _status;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    \n', '    function setMaxCards(uint _card)  \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        maxCards = _card;\n', '    }\n', '\n', '    function setHalfLifeTime(uint _time)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeTime = _time;\n', '    }\n', '\n', '    function setHalfLifeRate(uint _rate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeRate = _rate;\n', '    }\n', '\n', '    function addNewCard(uint _price) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(nextAvailableCard < maxCards);\n', '        cardPrice[nextAvailableCard] = _price;\n', '        basePrice[nextAvailableCard] = cardPrice[nextAvailableCard];\n', '        cardOwner[nextAvailableCard] = dev;\n', '        totalCardDivs[nextAvailableCard] = 0;\n', '        cardPreviousPrice[nextAvailableCard] = 0;\n', '        nextAvailableCard = nextAvailableCard + 1;\n', '        getTotalCardValue();\n', '        \n', '    }\n', '\n', '\n', '    function addAmbassador(address _newAmbassador) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        ambassadors_[_newAmbassador] = true;\n', '    }\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate. \n', '     */ \n', '    function myDividends(bool _includeReferralBonus) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    function myCardDividends()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return ownerAccounts[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '\n', '    function getNextAvailableCard()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return nextAvailableCard;\n', '    }\n', '\n', '    function getTotalCardValue()\n', '    internal\n', '    view\n', '    {\n', '        uint counter = 1;\n', '        uint _totalVal = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            _totalVal = SafeMath.add(_totalVal,cardPrice[counter]);\n', '                \n', '            counter = counter + 1;\n', '        } \n', '        totalCardValue = _totalVal;\n', '            \n', '    }\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        antiEarlyWhale(_incomingEthereum)\n', '        onlyActive()\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '\n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000));\n', '        ownerAccounts[inv1] = SafeMath.add(ownerAccounts[inv1] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '        ownerAccounts[inv2] = SafeMath.add(ownerAccounts[inv2] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '        ownerAccounts[inv3] = SafeMath.add(ownerAccounts[inv3] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\n', '\n', '\n', '        _incomingEthereum = SafeMath.sub(_incomingEthereum,SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000) + SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000)*3);\n', '\n', '      \n', '        uint256 _referralBonus = SafeMath.div(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), 3);\n', '        uint256 _dividends = SafeMath.sub(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', ' \n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '        \n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '            \n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        \n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '            \n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '        \n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        distributeInsurance();\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '\n', '\n', '    function buyCard(uint _card, address _referrer)\n', '        public\n', '        payable\n', '        onlyCardActive()\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        require(_card > 0);\n', '        require(msg.value >= cardPrice[_card]);\n', '       \n', '        cardBlockNumber[_card] = block.number;   //reset block number for this card for half life calculations\n', '\n', '\n', '         //Determine the total dividends\n', '        uint _baseDividends = msg.value - cardPreviousPrice[_card];\n', '        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\n', '\n', '        //uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\n', '        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),1000);\n', '        _ownerDividends = SafeMath.add(_ownerDividends,cardPreviousPrice[_card]);  //owner receovers price they paid initially\n', '        uint _insuranceDividends = SafeMath.div(SafeMath.mul(_baseDividends,insuranceDivRate),1000);\n', '\n', '        totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card],_ownerDividends);\n', '        \n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, _insuranceDividends);\n', '            \n', '        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),1000);\n', '\n', '        if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\n', '                \n', '            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),1000);\n', '            _distDividends = SafeMath.sub(_distDividends,_referralDividends);\n', '            ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\n', '        }\n', '            \n', '        distributeYield(_distDividends);\n', '\n', '        //distribute dividends to accounts\n', '        address _previousOwner = cardOwner[_card];\n', '        address _newOwner = msg.sender;\n', '\n', '        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\n', '        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),1000));\n', '\n', '        cardOwner[_card] = _newOwner;\n', '\n', '        //Increment the card Price\n', '        cardPreviousPrice[_card] = msg.value;\n', '        cardPrice[_card] = SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000);\n', '  \n', '        getTotalCardValue();\n', '        distributeInsurance();\n', '        checkHalfLife();\n', '\n', '        emit onCardBuy(msg.sender, msg.value, _card, SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000), halfLifeTime + block.number);\n', '     \n', '    }\n', '\n', '\n', '    function distributeInsurance() internal\n', '    {\n', '        uint counter = 1;\n', '        uint _cardDistAmount = cardInsuranceAccount;\n', '        cardInsuranceAccount = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '  \n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_cardDistAmount, cardPrice[counter]),totalCardValue);\n', '            \n', '            cardInsurance[counter] = SafeMath.add(cardInsurance[counter], _distAmountLocal);\n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '    \n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '    }\n', '\n', '\n', '    function distributeYield(uint _distDividends) internal\n', '    //tokens\n', '    {\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_distDividends, cardPrice[counter]),totalCardValue);\n', '            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]],_distAmountLocal);\n', '            totalCardDivs[counter] = SafeMath.add(totalCardDivs[counter],_distAmountLocal);\n', '\n', '            counter = counter + 1;\n', '        } \n', '        getTotalCardValue();\n', '        checkHalfLife();\n', '    }\n', '\n', '    function extCheckHalfLife() \n', '    public\n', '    {\n', '        bool _boolDev = (msg.sender == dev);\n', '        if (_boolDev || boolAllowPlayer){\n', '            checkHalfLife();\n', '        }\n', '    }\n', '\n', '\n', '    function checkHalfLife() \n', '    internal\n', '    \n', '    //tokens\n', '    {\n', '\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            //HalfLife Check\n', '            if (allowHalfLife) {\n', '\n', '                if (cardPrice[counter] > basePrice[counter]) {\n', '                    uint _life = SafeMath.sub(currentBlock, cardBlockNumber[counter]);\n', '\n', '                    if (_life > halfLifeTime) {\n', '                    \n', '                        cardBlockNumber[counter] = currentBlock;  //Reset the clock for this card\n', '                        if (SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000) < basePrice[counter]){\n', '                            \n', '                            cardPrice[counter] = basePrice[counter];\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '                            \n', '                        }else{\n', '\n', '                            cardPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000);  \n', '                            cardPreviousPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter],halfLifeReductionRate),1000);\n', '\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '\n', '                        }\n', '                        emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '                        emit Halflife(cardOwner[counter], counter, cardPrice[counter], halfLifeTime + block.number, insurancePayout, cardInsurance[counter]);\n', '\n', '                    }\n', '                    //HalfLife Check\n', '                    \n', '                }\n', '               \n', '            }\n', '            \n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '        getTotalCardValue();\n', '\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    function getCardPrice(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardPrice[_card];\n', '    }\n', '\n', '   function getCardInsurance(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardInsurance[_card];\n', '    }\n', '\n', '\n', '    function getCardOwner(uint _card)\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardOwner[_card];\n', '    }\n', '\n', '    function gettotalCardDivs(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return totalCardDivs[_card];\n', '    }\n', '\n', '    function getTotalDivsProduced()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '     \n', '        return totalDivsProduced;\n', '    }\n', '    \n', '    \n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
