['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Erc20Wallet {\n', '  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '\n', '  event Deposit(address token, address user, uint amount, uint balance);\n', '  event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '  mapping (address => uint) public totalDeposited;\n', '\n', '  function() public {\n', '    revert();\n', '  }\n', '\n', '  modifier onlyToken (address token) {\n', '    require( token != 0);\n', '    _;\n', '  }\n', '\n', '  function commonDeposit(address token, uint value) internal {\n', '    tokens[token][msg.sender] += value;\n', '    totalDeposited[token] += value;\n', '    emit Deposit(\n', '      token,\n', '      msg.sender,\n', '      value,\n', '      tokens[token][msg.sender]);\n', '  }\n', '  function commonWithdraw(address token, uint value) internal {\n', '    require (tokens[token][msg.sender] >= value);\n', '    tokens[token][msg.sender] -= value;\n', '    totalDeposited[token] -= value;\n', '    require((token != 0)?\n', '      ERC20(token).transfer(msg.sender, value):\n', '      // solium-disable-next-line security/no-call-value\n', '      msg.sender.call.value(value)()\n', '    );\n', '    emit Withdraw(\n', '      token,\n', '      msg.sender,\n', '      value,\n', '      tokens[token][msg.sender]);\n', '  }\n', '\n', '  function deposit() public payable {\n', '    commonDeposit(0, msg.value);\n', '  }\n', '  function withdraw(uint amount) public {\n', '    commonWithdraw(0, amount);\n', '  }\n', '\n', '\n', '  function depositToken(address token, uint amount) public onlyToken(token){\n', '    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    require (ERC20(token).transferFrom(msg.sender, this, amount));\n', '    commonDeposit(token, amount);\n', '  }\n', '  function withdrawToken(address token, uint amount) public {\n', '    commonWithdraw(token, amount);\n', '  }\n', '\n', '  function balanceOf(address token, address user) public constant returns (uint) {\n', '    return tokens[token][user];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SplitERC20Payment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitErc20Payment is Erc20Wallet{\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint) public totalShares;\n', '  mapping (address => uint) public totalReleased;\n', '\n', '  mapping (address => mapping (address => uint)) public shares; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => mapping (address => uint)) public released; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  address[] public payees;\n', '\n', '  function withdrawToken(address, uint) public{\n', '    revert();\n', '  }\n', '  function withdraw(uint) public {\n', '    revert();\n', '  }\n', '\n', '  function computePayeeBalance (address token, address payer, uint value) internal {\n', '    if (shares[token][payer] == 0)\n', '      addPayee(token, payer, value);\n', '    else\n', '      addToPayeeBalance(token, payer, value);\n', '  }\n', '\n', '  function deposit() public payable{\n', '    super.deposit();\n', '    computePayeeBalance(0, msg.sender, msg.value);\n', '  }\n', '\n', '  function depositToken(address token, uint amount) public{\n', '     super.depositToken(token, amount);\n', '     computePayeeBalance(token, msg.sender, amount);\n', '  }\n', '\n', '  function executeClaim(address token, address payee, uint payment) internal {\n', '    require(payment != 0);\n', '    require(totalDeposited[token] >= payment);\n', '\n', '    released[token][payee] += payment;\n', '    totalReleased[token] += payment;\n', '\n', '    super.withdrawToken(token, payment);\n', '  }\n', '\n', '  function calculateMaximumPayment(address token, address payee)view internal returns(uint){\n', '    require(shares[token][payee] > 0);\n', '    uint totalReceived = totalDeposited[token] + totalReleased[token];\n', '    return (totalReceived * shares[token][payee] / totalShares[token]) - released[token][payee];\n', '  }\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim(address token) public {\n', '    executeClaim(token, msg.sender, calculateMaximumPayment(token, msg.sender));\n', '  }\n', '\n', '  /**\n', '   * @dev Claim part of your share of the balance.\n', '   */\n', '  function partialClaim(address token, uint payment) public {\n', '    uint maximumPayment = calculateMaximumPayment(token, msg.sender);\n', '\n', '    require (payment <= maximumPayment);\n', '\n', '    executeClaim(token, msg.sender, payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address token, address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[token][_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[token][_payee] = _shares;\n', '    totalShares[token] += _shares;\n', '  }\n', '  /**\n', '   * @dev Add to payee balance\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares to add to the payee.\n', '   */\n', '  function addToPayeeBalance(address token, address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[token][_payee] > 0);\n', '\n', '    shares[token][_payee] += _shares;\n', '    totalShares[token] += _shares;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract InvestmentRecordList is Ownable{\n', '    event NoRecordFound(InvestmentRecord _investmentRecord);\n', '\n', '    InvestmentRecord[] internal investmentRecords;\n', '\n', '    function getInvestmentRecord (uint index) public view returns (InvestmentRecord){\n', '        return investmentRecords[index];\n', '    }\n', '    function getInvestmentRecordListLength () public view returns (uint){\n', '        return investmentRecords.length;\n', '    }\n', '\n', '    function pushRecord (InvestmentRecord _investmentRecord) onlyOwner public{\n', '        investmentRecords.push(_investmentRecord);\n', '    }\n', '\n', '    function popRecord (InvestmentRecord _investmentRecord) onlyOwner public{\n', '        uint index;\n', '        bool foundRecord;\n', '        (index, foundRecord) = getIndex(_investmentRecord);\n', '        if (! foundRecord){\n', '            emit NoRecordFound(_investmentRecord);\n', '            revert();\n', '        }\n', '        InvestmentRecord recordToDelete = investmentRecords[investmentRecords.length-1];\n', '        investmentRecords[index] = recordToDelete;\n', '        delete recordToDelete;\n', '        investmentRecords.length--;\n', '    }\n', '\n', '    function getIndex (InvestmentRecord _investmentRecord) public view returns (uint index, bool foundRecord){\n', '        foundRecord = false;\n', '        for (index = 0; index < investmentRecords.length; index++){\n', '            if (investmentRecords[index] == _investmentRecord){\n', '                foundRecord = true;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract InvestmentRecord {\n', '    using SafeMath for uint256;\n', '\n', '    address public token;\n', '    uint public timeStamp;\n', '    uint public lockPeriod;\n', '    uint public value;\n', '\n', '    constructor (address _token, uint _timeStamp, uint _lockPeriod, uint _value) public{\n', '        token = _token;\n', '        timeStamp = _timeStamp;\n', '        lockPeriod = _lockPeriod;\n', '        value = _value;\n', '    }\n', '\n', '    function expiredLockPeriod () public view returns (bool){\n', '        return now >= timeStamp + lockPeriod;\n', '    }\n', '\n', '    function getValue () public view returns (uint){\n', '        return value;\n', '    }\n', '    \n', '    function getToken () public view returns (address){\n', '        return token;\n', '    }    \n', '}\n', '\n', '\n', 'contract ERC20Vault is SplitErc20Payment{\n', '  using SafeMath for uint256;\n', '  mapping (address => InvestmentRecordList) public pendingInvestments;\n', '\n', '  function withdrawToken(address, uint) public {\n', '    revert();\n', '  }\n', '\n', '  function getLockedValue (address token) public returns (uint){\n', '    InvestmentRecordList investmentRecordList = pendingInvestments[msg.sender];\n', '    if (investmentRecordList == address(0x0))\n', '      return 0;\n', '\n', '    uint lockedValue = 0;\n', '    for(uint8 i = 0; i < investmentRecordList.getInvestmentRecordListLength(); i++){\n', '      InvestmentRecord investmentRecord = investmentRecordList.getInvestmentRecord(i);\n', '      if (investmentRecord.getToken() == token){\n', '        if (investmentRecord.expiredLockPeriod()){\n', '            investmentRecordList.popRecord(investmentRecord);\n', '        }else{\n', '          uint valueToAdd = investmentRecord.getValue();\n', '          lockedValue += valueToAdd;\n', '        }\n', '      }\n', '    }\n', '    return lockedValue;\n', '  }\n', '  function claim(address token) public{\n', '    uint lockedValue = getLockedValue(token);\n', '    uint actualBalance = this.balanceOf(token, msg.sender);\n', '    require(actualBalance > lockedValue);\n', '\n', '    super.partialClaim(token, actualBalance - lockedValue);\n', '  }\n', '\n', '  function partialClaim(address token, uint payment) public{\n', '    uint lockedValue = getLockedValue(token);\n', '    uint actualBalance = this.balanceOf(token, msg.sender);\n', '    require(actualBalance - lockedValue >= payment);\n', '\n', '    super.partialClaim(token, payment);\n', '  }\n', '\n', '  function depositTokenToVault(address token, uint amount, uint lockPeriod) public{\n', '    if (pendingInvestments[msg.sender] == address(0x0)){\n', '      pendingInvestments[msg.sender] = new InvestmentRecordList();\n', '    }\n', '    super.depositToken(token, amount);\n', '    pendingInvestments[msg.sender].pushRecord(new InvestmentRecord(token, now, lockPeriod, amount));\n', '  }\n', '\n', '  function depositEtherToVault(uint lockPeriod) public payable{\n', '    if (pendingInvestments[msg.sender] == address(0x0)){\n', '      pendingInvestments[msg.sender] = new InvestmentRecordList();\n', '    }\n', '    deposit();\n', '    pendingInvestments[msg.sender].pushRecord(new InvestmentRecord(0, now, lockPeriod, msg.value));\n', '  }  \n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Erc20Wallet {\n', '  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '\n', '  event Deposit(address token, address user, uint amount, uint balance);\n', '  event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '  mapping (address => uint) public totalDeposited;\n', '\n', '  function() public {\n', '    revert();\n', '  }\n', '\n', '  modifier onlyToken (address token) {\n', '    require( token != 0);\n', '    _;\n', '  }\n', '\n', '  function commonDeposit(address token, uint value) internal {\n', '    tokens[token][msg.sender] += value;\n', '    totalDeposited[token] += value;\n', '    emit Deposit(\n', '      token,\n', '      msg.sender,\n', '      value,\n', '      tokens[token][msg.sender]);\n', '  }\n', '  function commonWithdraw(address token, uint value) internal {\n', '    require (tokens[token][msg.sender] >= value);\n', '    tokens[token][msg.sender] -= value;\n', '    totalDeposited[token] -= value;\n', '    require((token != 0)?\n', '      ERC20(token).transfer(msg.sender, value):\n', '      // solium-disable-next-line security/no-call-value\n', '      msg.sender.call.value(value)()\n', '    );\n', '    emit Withdraw(\n', '      token,\n', '      msg.sender,\n', '      value,\n', '      tokens[token][msg.sender]);\n', '  }\n', '\n', '  function deposit() public payable {\n', '    commonDeposit(0, msg.value);\n', '  }\n', '  function withdraw(uint amount) public {\n', '    commonWithdraw(0, amount);\n', '  }\n', '\n', '\n', '  function depositToken(address token, uint amount) public onlyToken(token){\n', '    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    require (ERC20(token).transferFrom(msg.sender, this, amount));\n', '    commonDeposit(token, amount);\n', '  }\n', '  function withdrawToken(address token, uint amount) public {\n', '    commonWithdraw(token, amount);\n', '  }\n', '\n', '  function balanceOf(address token, address user) public constant returns (uint) {\n', '    return tokens[token][user];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SplitERC20Payment\n', ' * @dev Base contract that supports multiple payees claiming funds sent to this contract\n', ' * according to the proportion they own.\n', ' */\n', 'contract SplitErc20Payment is Erc20Wallet{\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint) public totalShares;\n', '  mapping (address => uint) public totalReleased;\n', '\n', '  mapping (address => mapping (address => uint)) public shares; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => mapping (address => uint)) public released; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  address[] public payees;\n', '\n', '  function withdrawToken(address, uint) public{\n', '    revert();\n', '  }\n', '  function withdraw(uint) public {\n', '    revert();\n', '  }\n', '\n', '  function computePayeeBalance (address token, address payer, uint value) internal {\n', '    if (shares[token][payer] == 0)\n', '      addPayee(token, payer, value);\n', '    else\n', '      addToPayeeBalance(token, payer, value);\n', '  }\n', '\n', '  function deposit() public payable{\n', '    super.deposit();\n', '    computePayeeBalance(0, msg.sender, msg.value);\n', '  }\n', '\n', '  function depositToken(address token, uint amount) public{\n', '     super.depositToken(token, amount);\n', '     computePayeeBalance(token, msg.sender, amount);\n', '  }\n', '\n', '  function executeClaim(address token, address payee, uint payment) internal {\n', '    require(payment != 0);\n', '    require(totalDeposited[token] >= payment);\n', '\n', '    released[token][payee] += payment;\n', '    totalReleased[token] += payment;\n', '\n', '    super.withdrawToken(token, payment);\n', '  }\n', '\n', '  function calculateMaximumPayment(address token, address payee)view internal returns(uint){\n', '    require(shares[token][payee] > 0);\n', '    uint totalReceived = totalDeposited[token] + totalReleased[token];\n', '    return (totalReceived * shares[token][payee] / totalShares[token]) - released[token][payee];\n', '  }\n', '\n', '  /**\n', '   * @dev Claim your share of the balance.\n', '   */\n', '  function claim(address token) public {\n', '    executeClaim(token, msg.sender, calculateMaximumPayment(token, msg.sender));\n', '  }\n', '\n', '  /**\n', '   * @dev Claim part of your share of the balance.\n', '   */\n', '  function partialClaim(address token, uint payment) public {\n', '    uint maximumPayment = calculateMaximumPayment(token, msg.sender);\n', '\n', '    require (payment <= maximumPayment);\n', '\n', '    executeClaim(token, msg.sender, payment);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a new payee to the contract.\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares owned by the payee.\n', '   */\n', '  function addPayee(address token, address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[token][_payee] == 0);\n', '\n', '    payees.push(_payee);\n', '    shares[token][_payee] = _shares;\n', '    totalShares[token] += _shares;\n', '  }\n', '  /**\n', '   * @dev Add to payee balance\n', '   * @param _payee The address of the payee to add.\n', '   * @param _shares The number of shares to add to the payee.\n', '   */\n', '  function addToPayeeBalance(address token, address _payee, uint256 _shares) internal {\n', '    require(_payee != address(0));\n', '    require(_shares > 0);\n', '    require(shares[token][_payee] > 0);\n', '\n', '    shares[token][_payee] += _shares;\n', '    totalShares[token] += _shares;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract InvestmentRecordList is Ownable{\n', '    event NoRecordFound(InvestmentRecord _investmentRecord);\n', '\n', '    InvestmentRecord[] internal investmentRecords;\n', '\n', '    function getInvestmentRecord (uint index) public view returns (InvestmentRecord){\n', '        return investmentRecords[index];\n', '    }\n', '    function getInvestmentRecordListLength () public view returns (uint){\n', '        return investmentRecords.length;\n', '    }\n', '\n', '    function pushRecord (InvestmentRecord _investmentRecord) onlyOwner public{\n', '        investmentRecords.push(_investmentRecord);\n', '    }\n', '\n', '    function popRecord (InvestmentRecord _investmentRecord) onlyOwner public{\n', '        uint index;\n', '        bool foundRecord;\n', '        (index, foundRecord) = getIndex(_investmentRecord);\n', '        if (! foundRecord){\n', '            emit NoRecordFound(_investmentRecord);\n', '            revert();\n', '        }\n', '        InvestmentRecord recordToDelete = investmentRecords[investmentRecords.length-1];\n', '        investmentRecords[index] = recordToDelete;\n', '        delete recordToDelete;\n', '        investmentRecords.length--;\n', '    }\n', '\n', '    function getIndex (InvestmentRecord _investmentRecord) public view returns (uint index, bool foundRecord){\n', '        foundRecord = false;\n', '        for (index = 0; index < investmentRecords.length; index++){\n', '            if (investmentRecords[index] == _investmentRecord){\n', '                foundRecord = true;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract InvestmentRecord {\n', '    using SafeMath for uint256;\n', '\n', '    address public token;\n', '    uint public timeStamp;\n', '    uint public lockPeriod;\n', '    uint public value;\n', '\n', '    constructor (address _token, uint _timeStamp, uint _lockPeriod, uint _value) public{\n', '        token = _token;\n', '        timeStamp = _timeStamp;\n', '        lockPeriod = _lockPeriod;\n', '        value = _value;\n', '    }\n', '\n', '    function expiredLockPeriod () public view returns (bool){\n', '        return now >= timeStamp + lockPeriod;\n', '    }\n', '\n', '    function getValue () public view returns (uint){\n', '        return value;\n', '    }\n', '    \n', '    function getToken () public view returns (address){\n', '        return token;\n', '    }    \n', '}\n', '\n', '\n', 'contract ERC20Vault is SplitErc20Payment{\n', '  using SafeMath for uint256;\n', '  mapping (address => InvestmentRecordList) public pendingInvestments;\n', '\n', '  function withdrawToken(address, uint) public {\n', '    revert();\n', '  }\n', '\n', '  function getLockedValue (address token) public returns (uint){\n', '    InvestmentRecordList investmentRecordList = pendingInvestments[msg.sender];\n', '    if (investmentRecordList == address(0x0))\n', '      return 0;\n', '\n', '    uint lockedValue = 0;\n', '    for(uint8 i = 0; i < investmentRecordList.getInvestmentRecordListLength(); i++){\n', '      InvestmentRecord investmentRecord = investmentRecordList.getInvestmentRecord(i);\n', '      if (investmentRecord.getToken() == token){\n', '        if (investmentRecord.expiredLockPeriod()){\n', '            investmentRecordList.popRecord(investmentRecord);\n', '        }else{\n', '          uint valueToAdd = investmentRecord.getValue();\n', '          lockedValue += valueToAdd;\n', '        }\n', '      }\n', '    }\n', '    return lockedValue;\n', '  }\n', '  function claim(address token) public{\n', '    uint lockedValue = getLockedValue(token);\n', '    uint actualBalance = this.balanceOf(token, msg.sender);\n', '    require(actualBalance > lockedValue);\n', '\n', '    super.partialClaim(token, actualBalance - lockedValue);\n', '  }\n', '\n', '  function partialClaim(address token, uint payment) public{\n', '    uint lockedValue = getLockedValue(token);\n', '    uint actualBalance = this.balanceOf(token, msg.sender);\n', '    require(actualBalance - lockedValue >= payment);\n', '\n', '    super.partialClaim(token, payment);\n', '  }\n', '\n', '  function depositTokenToVault(address token, uint amount, uint lockPeriod) public{\n', '    if (pendingInvestments[msg.sender] == address(0x0)){\n', '      pendingInvestments[msg.sender] = new InvestmentRecordList();\n', '    }\n', '    super.depositToken(token, amount);\n', '    pendingInvestments[msg.sender].pushRecord(new InvestmentRecord(token, now, lockPeriod, amount));\n', '  }\n', '\n', '  function depositEtherToVault(uint lockPeriod) public payable{\n', '    if (pendingInvestments[msg.sender] == address(0x0)){\n', '      pendingInvestments[msg.sender] = new InvestmentRecordList();\n', '    }\n', '    deposit();\n', '    pendingInvestments[msg.sender].pushRecord(new InvestmentRecord(0, now, lockPeriod, msg.value));\n', '  }  \n', '}']
