['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract Notary is Ownable {\n', '\n', '    struct Record {\n', '        bytes notarisedData;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    mapping(bytes32 => Record) public records;\n', '    uint256 public notarisationFee;\n', '\n', '    /**\n', '    * @dev initialize Notary\n', '    * @param _owner of the notary\n', '    */\n', '    constructor (address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev make sure that the call has the notarisation cost\n', '    */\n', '    modifier callHasNotarisationCost() {\n', '        require(msg.value >= notarisationFee);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev set notarisation cost\n', '    * @param _fee to notarize a record\n', '    */\n', '    function setNotarisationFee(uint256 _fee) public onlyOwner {\n', '        notarisationFee = _fee;\n', '    }\n', '\n', '    /**\n', '    * @dev fetch a Record by it&#39;s data notarised data\n', '    * @param _notarisedData the data that got notarised\n', '    */\n', '    function record(bytes _notarisedData) public constant returns(bytes, uint256) {\n', '        Record memory r = records[keccak256(_notarisedData)];\n', '        return (r.notarisedData, r.timestamp);\n', '    }\n', '\n', '    /**\n', '    * @dev notarize a new record\n', '    * @param _record the record to notarize\n', '    */\n', '    function notarize(bytes _record)\n', '        public\n', '        payable\n', '        callHasNotarisationCost\n', '    {\n', '\n', '        // create hash of record to to have an unique and deterministic key\n', '        bytes32 recordHash = keccak256(_record);\n', '\n', '        // make sure the record hasn&#39;t been notarised\n', '        require(records[recordHash].timestamp == 0);\n', '\n', '        // transfer notarisation fee to owner\n', '        if (owner != address(0)){\n', '            owner.transfer(address(this).balance);\n', '        }\n', '\n', '        // notarize record\n', '        records[recordHash] = Record({\n', '            notarisedData: _record,\n', '            timestamp: now\n', '        });\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract NotaryMulti {\n', '\n', '    Notary public notary;\n', '\n', '    constructor(Notary _notary) public {\n', '        notary = _notary;\n', '    }\n', '\n', '    function notaryFee() public constant returns (uint256) {\n', '        return 2 * notary.notarisationFee();\n', '    }\n', '\n', '    /**\n', '    * @dev notarize two records\n', '    * @param _firstRecord is the first record that should be notarized\n', '    * @param _secondRecord is the second record that should be notarized\n', '    */\n', '    function notarizeTwo(bytes _firstRecord, bytes _secondRecord) payable public {\n', '        notary.notarize(_firstRecord);\n', '        notary.notarize(_secondRecord);\n', '    }\n', '\n', '}']