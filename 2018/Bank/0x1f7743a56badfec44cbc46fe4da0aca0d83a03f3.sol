['pragma solidity ^0.4.17;\n', '\n', 'contract Exhibition {\n', '    address private organizer;\n', '    address private winnerAddress;\n', '    bool private isWinnerSelected = false;\n', '    struct Participant {\n', '        string name;\n', '        string phone;\n', '        string email;\n', '    }\n', '    function Exhibition() public {\n', '        organizer = msg.sender;\n', '    }\n', '    mapping(address => Participant) private participants;\n', '    address[] private participantList;\n', '    function registration(string _name, string _phone, string _email) public payable {\n', '        require(msg.value > .00001 ether);\n', '        require(!isWinnerSelected);\n', '        Participant storage participant = participants[msg.sender];\n', '        participant.name = _name;\n', '        participant.phone = _phone;\n', '        participant.email = _email;\n', '        participantList.push(msg.sender);\n', '        sendAmount(msg.value, organizer);\n', '    }\n', '    function pickWinner() public {\n', '        // Check the sender address should be equal to organizer since the organizer can only pick the winner\n', '        require(msg.sender == organizer);\n', '\n', '        // Randamloy select one participant among all the participants.\n', '        uint index = random() % participantList.length;\n', '\n', '        // Assign winner participant address\n', '        winnerAddress = participantList[index];\n', '\n', '        // Change isWinnerSelected to &#39;true&#39;\n', '        isWinnerSelected = true;\n', '    }\n', '\n', '    // This function is used to send ether to winner address\n', '    function transferAmount() public payable {\n', '        // check ether value should be greater than &#39;.0001&#39;\n', '        require(msg.value > .0001 ether);\n', '        // Check the sender address should be equal to organizer address\n', '        // since the organizer can only send ether to winner\n', '        require(msg.sender == organizer);\n', '        // check isWinnerSelected should be &#39;true&#39;\n', '        require(isWinnerSelected);\n', '        // send ether to winner\n', '        sendAmount(msg.value, winnerAddress);\n', '    }\n', '\n', '    // This function is used to return isWinnerSelected\n', '    function getIsWinnerSelected() public view returns (bool) {\n', '        return isWinnerSelected;\n', '    }\n', '\n', '    // This function is used to return participantList\n', '    function getParticipants() public view returns (address[]) {\n', '        return participantList;\n', '    }\n', '\n', '    // This function is used to return winner name\n', '    function getWinner() public view returns (string) {\n', '        // check isWinnerSelected should be &#39;true&#39;\n', '        require(isWinnerSelected);\n', '        return participants[winnerAddress].name;\n', '    }\n', '\n', '    // This function is used to return organizer\n', '    function getOrganizer() public view returns (address) {\n', '        return organizer;\n', '    }\n', '\n', '    // This function is used to transfer ether to particular address\n', '    function sendAmount(uint _amount, address _account) private {\n', '        _account.transfer(_amount);\n', '    }\n', '\n', '    // This function is used to return one number randomly from participantList\n', '    function random() private view returns (uint) {\n', '        return uint(keccak256(block.difficulty, now, participantList));\n', '    }\n', '\n', '}']