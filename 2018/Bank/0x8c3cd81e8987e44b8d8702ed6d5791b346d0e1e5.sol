['pragma solidity ^0.4.18;\n', '\n', 'contract ERC721 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '\n', '    function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', 'contract CryptoMemes is ERC721 {\n', '\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n', '    event UrlUpdated(address owner, uint256 tokenId, string url);\n', '\n', '    modifier onlyOwnerOf(uint256 tokenId) {\n', '        require(memeIndexToOwner[tokenId] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOfContract() {\n', '        require(msg.sender == contractOwner);\n', '        _;\n', '    }\n', '\n', '    struct Meme {\n', '        string url;\n', '        uint256 hash;\n', '        uint256 createdAt;\n', '    }\n', '\n', '    Meme[] memes;\n', '\n', '    //the owner can adjust the meme price\n', '    address contractOwner;\n', '\n', '    //the price user must pay to create a meme\n', '    uint price;\n', '\n', '    mapping(uint256 => address) memeIndexToOwner;\n', '    mapping(address => uint256) ownershipTokenCount;\n', '    mapping(uint => address) memeApprovals;\n', '\n', '    function CryptoMemes() public {\n', '        contractOwner = msg.sender;\n', '        price = 0.005 ether;\n', '    }\n', '\n', '    function getPrice() external view returns (uint) {\n', '        return price;\n', '    }\n', '\n', '    function getContractOwner() external view returns (address) {\n', '        return contractOwner;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        ownershipTokenCount[_to]++;\n', '        ownershipTokenCount[_from]--;\n', '        memeIndexToOwner[_tokenId] = _to;\n', '        delete memeApprovals[_tokenId];\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n', '        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n', '        Created(_owner, newMemeId, _url, _hash, now);\n', '        _transfer(0, _owner, newMemeId);\n', '        return newMemeId;\n', '    }\n', '\n', '    function createMeme(string _url, uint256 _hash) payable external {\n', '        _validateUrl(_url);\n', '        require(msg.value == price);\n', '        _createMeme(_url, _hash, msg.sender);\n', '    }\n', '\n', '    //validates the url cannot be of ambiguous length\n', '    function _validateUrl(string _url) pure internal {\n', '        require(bytes(_url).length < 1024);\n', '    }\n', '\n', '    function getMeme(uint256 _tokenId) public view returns (\n', '        string url,\n', '        uint256 hash,\n', '        uint256 createdAt\n', '    ) {\n', '        Meme storage meme = memes[_tokenId];\n', '        url = meme.url;\n', '        hash = meme.hash;\n', '        createdAt = meme.createdAt;\n', '    }\n', '\n', '    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n', '        _validateUrl(_url);\n', '        memes[_tokenId].url = _url;\n', '        UrlUpdated(msg.sender, _tokenId, _url);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return memes.length;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        return memeIndexToOwner[_tokenId];\n', '    }\n', '\n', '    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n', '        memeApprovals[_tokenId] = _to;\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(memeApprovals[_tokenId] == msg.sender);\n', '        address owner = ownerOf(_tokenId);\n', '        _transfer(owner, msg.sender, _tokenId);\n', '    }\n', '\n', '    function updatePrice(uint _price) external onlyOwnerOfContract() {\n', '        price = _price;\n', '    }\n', '\n', '    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n', '        contractOwner = _newOwner;\n', '    }\n', '\n', '    function withdraw() external onlyOwnerOfContract() {\n', '        contractOwner.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC721 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '\n', '    function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', 'contract CryptoMemes is ERC721 {\n', '\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n', '    event UrlUpdated(address owner, uint256 tokenId, string url);\n', '\n', '    modifier onlyOwnerOf(uint256 tokenId) {\n', '        require(memeIndexToOwner[tokenId] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOfContract() {\n', '        require(msg.sender == contractOwner);\n', '        _;\n', '    }\n', '\n', '    struct Meme {\n', '        string url;\n', '        uint256 hash;\n', '        uint256 createdAt;\n', '    }\n', '\n', '    Meme[] memes;\n', '\n', '    //the owner can adjust the meme price\n', '    address contractOwner;\n', '\n', '    //the price user must pay to create a meme\n', '    uint price;\n', '\n', '    mapping(uint256 => address) memeIndexToOwner;\n', '    mapping(address => uint256) ownershipTokenCount;\n', '    mapping(uint => address) memeApprovals;\n', '\n', '    function CryptoMemes() public {\n', '        contractOwner = msg.sender;\n', '        price = 0.005 ether;\n', '    }\n', '\n', '    function getPrice() external view returns (uint) {\n', '        return price;\n', '    }\n', '\n', '    function getContractOwner() external view returns (address) {\n', '        return contractOwner;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        ownershipTokenCount[_to]++;\n', '        ownershipTokenCount[_from]--;\n', '        memeIndexToOwner[_tokenId] = _to;\n', '        delete memeApprovals[_tokenId];\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n', '        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n', '        Created(_owner, newMemeId, _url, _hash, now);\n', '        _transfer(0, _owner, newMemeId);\n', '        return newMemeId;\n', '    }\n', '\n', '    function createMeme(string _url, uint256 _hash) payable external {\n', '        _validateUrl(_url);\n', '        require(msg.value == price);\n', '        _createMeme(_url, _hash, msg.sender);\n', '    }\n', '\n', '    //validates the url cannot be of ambiguous length\n', '    function _validateUrl(string _url) pure internal {\n', '        require(bytes(_url).length < 1024);\n', '    }\n', '\n', '    function getMeme(uint256 _tokenId) public view returns (\n', '        string url,\n', '        uint256 hash,\n', '        uint256 createdAt\n', '    ) {\n', '        Meme storage meme = memes[_tokenId];\n', '        url = meme.url;\n', '        hash = meme.hash;\n', '        createdAt = meme.createdAt;\n', '    }\n', '\n', '    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n', '        _validateUrl(_url);\n', '        memes[_tokenId].url = _url;\n', '        UrlUpdated(msg.sender, _tokenId, _url);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return memes.length;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        return memeIndexToOwner[_tokenId];\n', '    }\n', '\n', '    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n', '        memeApprovals[_tokenId] = _to;\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(memeApprovals[_tokenId] == msg.sender);\n', '        address owner = ownerOf(_tokenId);\n', '        _transfer(owner, msg.sender, _tokenId);\n', '    }\n', '\n', '    function updatePrice(uint _price) external onlyOwnerOfContract() {\n', '        price = _price;\n', '    }\n', '\n', '    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n', '        contractOwner = _newOwner;\n', '    }\n', '\n', '    function withdraw() external onlyOwnerOfContract() {\n', '        contractOwner.transfer(address(this).balance);\n', '    }\n', '}']
