['pragma solidity ^0.4.25;\n', '\n', '/**\n', '  MTWE - Mineable Token With Exchange\n', '*/\n', '\n', 'contract MTWE {\n', '    struct Order {\n', '        address creator;\n', '        bool buy;\n', '        uint price;\n', '        uint amount;\n', '    }\n', '    \n', "    string public name = 'MTWE';\n", "    string public symbol = 'MTWE';\n", '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000000000000000000;\n', '    \n', '    uint private seed;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public successesOf;\n', '    mapping (address => uint256) public failsOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    Order[] public orders;\n', '    uint public orderCount;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event PlaceBuy(address indexed user, uint price, uint amount, uint id);\n', '    event PlaceSell(address indexed user, uint price, uint amount, uint id);\n', '    event FillOrder(uint indexed id, address indexed user, uint amount);\n', '    event CancelOrder(uint indexed id);\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor () public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    /*** Helpers */\n', '    \n', '    /* Converts uint256 to bytes32 */\n', '    function toBytes(uint256 x) internal pure returns (bytes b) {\n', '        b = new bytes(32);\n', '        assembly {\n', '            mstore(add(b, 32), x)\n', '        }\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) private pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) private pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeMul(uint a, uint b) private pure returns (uint) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        \n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeIDiv(uint a, uint b) private pure returns (uint) {\n', '        uint c = a / b;\n', '        assert(b * c == a);\n', '        return c;\n', '    }\n', '    \n', '    /* Returns a pseudo-random number */\n', '    function random(uint lessThan) internal returns (uint) {\n', '        seed += block.timestamp + uint(msg.sender);\n', '        return uint(sha256(toBytes(uint(blockhash(block.number - 1)) + seed))) % lessThan;\n', '    }\n', '    \n', '    function calcAmountEther(uint price, uint amount) internal pure returns (uint) {\n', '        return safeIDiv(safeMul(price, amount), 1000000000000000000);\n', '    }\n', '    \n', '    /*** Token */\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /* Transfer tokens from other address */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Set allowance for other address */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    \n', '    /*** Exchange */\n', '    \n', '    function placeBuy(uint price, uint amount) external payable {\n', '        require(price > 0 && amount > 0 && msg.value == calcAmountEther(price, amount));\n', '        orders.push(Order({\n', '            creator: msg.sender,\n', '            buy: true,\n', '            price: price,\n', '            amount: amount\n', '        }));\n', '        emit PlaceBuy(msg.sender, price, amount, orderCount);\n', '        orderCount++;\n', '    }\n', '    \n', '    function placeSell(uint price, uint amount) external {\n', '        require(price > 0 && amount > 0);\n', '        _transfer(msg.sender, this, amount);\n', '        orders.push(Order({\n', '            creator: msg.sender,\n', '            buy: false,\n', '            price: price,\n', '            amount: amount\n', '        }));\n', '        emit PlaceSell(msg.sender, price, amount, orderCount);\n', '        orderCount++;\n', '    }\n', '    \n', '    function fillOrder(uint id, uint amount) external payable {\n', '        require(id < orders.length);\n', '        require(amount > 0);\n', '        require(orders[id].creator != msg.sender);\n', '        require(orders[id].amount >= amount);\n', '        if (orders[id].buy) {\n', '            require(msg.value == 0);\n', '            \n', '            /* send tokens from sender to creator */\n', '            _transfer(msg.sender, orders[id].creator, amount);\n', '            \n', '            /* send Ether to sender */\n', '            msg.sender.transfer(calcAmountEther(orders[id].price, amount));\n', '        } else {\n', '            uint etherAmount = calcAmountEther(orders[id].price, amount);\n', '            require(msg.value == etherAmount);\n', '            \n', '            /* send tokens to sender */\n', '            _transfer(this, msg.sender, amount);\n', '            \n', '            /* send Ether from sender to creator */\n', '            orders[id].creator.transfer(etherAmount);\n', '        }\n', '        if (orders[id].amount == amount) {\n', '            delete orders[id];\n', '        } else {\n', '            orders[id].amount -= amount;\n', '        }\n', '        emit FillOrder(id, msg.sender, amount);\n', '    }\n', '    \n', '    function cancelOrder(uint id) external {\n', '        require(id < orders.length);\n', '        require(orders[id].creator == msg.sender);\n', '        require(orders[id].amount > 0);\n', '        if (orders[id].buy) {\n', '            /* return Ether */\n', '            msg.sender.transfer(calcAmountEther(orders[id].price, orders[id].amount));\n', '        } else {\n', '            /* return tokens */\n', '            _transfer(this, msg.sender, orders[id].amount);\n', '        }\n', '        delete orders[id];\n', '        emit CancelOrder(id);\n', '    }\n', '    \n', '    function () public payable {\n', '        if (msg.value == 0) {\n', '            uint minedHashRel = random(10000);\n', '            uint k = balanceOf[msg.sender] * 10000 / totalSupply;\n', '            if (k > 0) {\n', '                if (k > 19) {\n', '                    k = 19;\n', '                }\n', '                k = 2 ** k;\n', '                k = 5000 / k;\n', '                k = 5000 - k;\n', '                if (minedHashRel < k) {\n', '                    uint reward = minedHashRel * 10000000000000000;\n', '                    balanceOf[msg.sender] += reward;\n', '                    totalSupply += reward;\n', '                    emit Transfer(0, this, reward);\n', '                    emit Transfer(this, msg.sender, reward);\n', '                    successesOf[msg.sender]++;\n', '                } else {\n', '                    emit Transfer(this, msg.sender, 0);\n', '                    failsOf[msg.sender]++;\n', '                }\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']