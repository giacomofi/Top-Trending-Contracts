['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract EstatesToken is ERC721, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '  uint256[] private listedEstates;\n', '  uint256 public devOwed;\n', '  uint256 public poolTotal;\n', '  uint256 public lastPurchase;\n', '\n', '  // Estate Data\n', '  mapping (uint256 => Estate) public estateData;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  // Balances from % payouts.\n', '  mapping (address => uint256) private payoutBalances; \n', '\n', '  // Events\n', '  event EstatePurchased(uint256 indexed _tokenId, address indexed _owner, uint256 _purchasePrice);\n', '\n', '  // Purchasing Caps for Determining Next Pool Cut\n', '  uint256 private firstCap  = 0.5 ether;\n', '  uint256 private secondCap = 1.0 ether;\n', '  uint256 private thirdCap  = 3.0 ether;\n', '  uint256 private finalCap  = 5.0 ether;\n', '\n', '  // Struct to store Estate Data\n', '  struct Estate {\n', '      uint256 startingPrice; // Price the item started at.\n', '      uint256 price;         // Current price of the item.\n', '      uint256 lastPrice;     // lastPrice this was sold for, used for adding to pool.\n', '      uint256 payout;        // The percent of the pool rewarded.\n', '      uint256 withdrawn;     // The amount of Eth this estate has withdrawn from the pool.\n', '      address owner;         // Current owner of the item.\n', '  }\n', '\n', '  /**\n', '  * @dev createListing Adds new ERC721 Token\n', '  * @param _tokenId uint256 ID of new token\n', '  * @param _startingPrice uint256 starting price in wei\n', '  * @param _payoutPercentage uint256 payout percentage (divisible by 10)\n', '  * @param _owner address of new owner\n', '  */\n', '  function createListing(uint256 _tokenId, uint256 _startingPrice, uint256 _payoutPercentage, address _owner) onlyOwner() public {\n', '\n', '    // make sure price > 0\n', '    require(_startingPrice > 0);\n', "    // make sure token hasn't been used yet\n", '    require(estateData[_tokenId].price == 0);\n', '    \n', '    // create new token\n', '    Estate storage newEstate = estateData[_tokenId];\n', '\n', '    newEstate.owner = _owner;\n', '    newEstate.price = getNextPrice(_startingPrice);\n', '    newEstate.lastPrice = _startingPrice;\n', '    newEstate.payout = _payoutPercentage;\n', '    newEstate.startingPrice = _startingPrice;\n', '\n', '    // store estate in storage\n', '    listedEstates.push(_tokenId);\n', '    \n', '    // mint new token\n', '    _mint(_owner, _tokenId);\n', '  }\n', '\n', '  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _payouts, address[] _owners) onlyOwner() external {\n', '    for (uint256 i = 0; i < _itemIds.length; i++) {\n', '      createListing(_itemIds[i], _prices[i], _payouts[i], _owners[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Determines next price of token\n', '  * @param _price uint256 ID of current price\n', '  */\n', '  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\n', '    if (_price < firstCap) {\n', '      return _price.mul(200).div(95);\n', '    } else if (_price < secondCap) {\n', '      return _price.mul(135).div(96);\n', '    } else if (_price < thirdCap) {\n', '      return _price.mul(125).div(97);\n', '    } else if (_price < finalCap) {\n', '      return _price.mul(117).div(97);\n', '    } else {\n', '      return _price.mul(115).div(98);\n', '    }\n', '  }\n', '\n', '  function calculatePoolCut (uint256 _price) public view returns (uint256 _poolCut) {\n', '    if (_price < firstCap) {\n', '      return _price.mul(10).div(100); // 5%\n', '    } else if (_price < secondCap) {\n', '      return _price.mul(9).div(100); // 4%\n', '    } else if (_price < thirdCap) {\n', '      return _price.mul(8).div(100); // 3%\n', '    } else if (_price < finalCap) {\n', '      return _price.mul(7).div(100); // 3%\n', '    } else {\n', '      return _price.mul(5).div(100); // 2%\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Purchase estate from previous owner\n', '  * @param _tokenId uint256 of token\n', '  */\n', '  function purchaseEstate(uint256 _tokenId) public \n', '    payable\n', '    isNotContract(msg.sender)\n', '  {\n', '\n', '    // get data from storage\n', '    Estate storage estate = estateData[_tokenId];\n', '    uint256 price = estate.price;\n', '    address oldOwner = estate.owner;\n', '    address newOwner = msg.sender;\n', '    uint256 excess = msg.value.sub(price);\n', '\n', '    // revert checks\n', '    require(price > 0);\n', '    require(msg.value >= price);\n', '    require(oldOwner != msg.sender);\n', '\n', '    // Calculate pool cut for taxes.\n', '    uint256 profit = price.sub(estate.lastPrice);\n', '    uint256 poolCut = calculatePoolCut(profit);\n', '    poolTotal += poolCut;\n', '    \n', '    // 3% goes to developers\n', '    uint256 devCut = price.mul(3).div(100);\n', '    devOwed = devOwed.add(devCut);\n', '\n', '    transferEstate(oldOwner, newOwner, _tokenId);\n', '\n', '    // set new prices\n', '    estate.lastPrice = price;\n', '    estate.price = getNextPrice(price);\n', '\n', '    // raise event\n', '    EstatePurchased(_tokenId, newOwner, price);\n', '\n', "    // Transfer payment to old owner minus the developer's and pool's cut.\n", '    oldOwner.transfer(price.sub(devCut.add(poolCut)));\n', '\n', '    // Send refund to owner if needed\n', '    if (excess > 0) {\n', '      newOwner.transfer(excess);\n', '    }\n', '    \n', '    // set last purchase price to storage\n', '    lastPurchase = now;\n', '\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer Estate from Previous Owner to New Owner\n', '  * @param _from previous owner address\n', '  * @param _to new owner address\n', '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function transferEstate(address _from, address _to, uint256 _tokenId) internal {\n', '\n', '    // check token exists\n', '    require(tokenExists(_tokenId));\n', '\n', '    // make sure previous owner is correct\n', '    require(estateData[_tokenId].owner == _from);\n', '\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '\n', '    // pay any unpaid payouts to previous owner of estate\n', '    updateSinglePayout(_from, _tokenId);\n', '\n', '    // clear approvals linked to this token\n', '    clearApproval(_from, _tokenId);\n', '\n', '    // remove token from previous owner\n', '    removeToken(_from, _tokenId);\n', '\n', '    // update owner and add token to new owner\n', '    estateData[_tokenId].owner = _to;\n', '    addToken(_to, _tokenId);\n', '\n', '   //raise event\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', "  * @dev Withdraw dev's cut\n", '  */\n', '  function withdraw() onlyOwner public {\n', '    owner.transfer(devOwed);\n', '    devOwed = 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the payout for the estates the owner has\n', '  * @param _owner address of token owner\n', '  */\n', '  function updatePayout(address _owner) public {\n', '    uint256[] memory estates = ownedTokens[_owner];\n', '    uint256 owed;\n', '    for (uint256 i = 0; i < estates.length; i++) {\n', '        uint256 totalEstateOwed = poolTotal * estateData[estates[i]].payout / 10000;\n', '        uint256 estateOwed = totalEstateOwed.sub(estateData[estates[i]].withdrawn);\n', '        owed += estateOwed;\n', '        \n', '        estateData[estates[i]].withdrawn += estateOwed;\n', '    }\n', '    payoutBalances[_owner] += owed;\n', '  }\n', '\n', '  /**\n', '   * @dev Update a single estate payout for transfers.\n', '   * @param _owner Address of the owner of the estate.\n', '   * @param _itemId Unique Id of the token.\n', '  **/\n', '  function updateSinglePayout(address _owner, uint256 _itemId) internal {\n', '    uint256 totalEstateOwed = poolTotal * estateData[_itemId].payout / 10000;\n', '    uint256 estateOwed = totalEstateOwed.sub(estateData[_itemId].withdrawn);\n', '        \n', '    estateData[_itemId].withdrawn += estateOwed;\n', '    payoutBalances[_owner] += estateOwed;\n', '  }\n', '\n', '  /**\n', '  * @dev Owner can withdraw their accumulated payouts\n', '  * @param _owner address of token owner\n', '  */\n', '  function withdrawRent(address _owner) public {\n', '      updatePayout(_owner);\n', '      uint256 payout = payoutBalances[_owner];\n', '      payoutBalances[_owner] = 0;\n', '      _owner.transfer(payout);\n', '  }\n', '\n', '  function getRentOwed(address _owner) public view returns (uint256 owed) {\n', '    updatePayout(_owner);\n', '    return payoutBalances[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Return all estate data\n', '  * @param _tokenId uint256 of token\n', '  */\n', '  function getEstateData (uint256 _tokenId) external view \n', '  returns (address _owner, uint256 _startingPrice, uint256 _price, uint256 _nextPrice, uint256 _payout) \n', '  {\n', '    Estate memory estate = estateData[_tokenId];\n', '    return (estate.owner, estate.startingPrice, estate.price, getNextPrice(estate.price), estate.payout);\n', '  }\n', '\n', '  /**\n', "  * @dev Determines if token exists by checking it's price\n", '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n', '    return estateData[_tokenId].price > 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is not a contract\n', '  * @param _buyer address of person buying estate\n', '  */\n', '  modifier isNotContract(address _buyer) {\n', '    uint size;\n', '    assembly { size := extcodesize(_buyer) }\n', '    require(size == 0);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '  \n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    updateSinglePayout(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '\n', '    /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    estateData[_tokenId].owner = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '\n', '  function name() public pure returns (string _name) {\n', '    return "EtherEstates.io Estate";\n', '  }\n', '\n', '  function symbol() public pure returns (string _symbol) {\n', '    return "EE";\n', '  }\n', '\n', '}']