['pragma solidity 0.4.25;\n', '   \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract PikToken is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    string public constant name = "Pik Token";\n', '    string public constant symbol = "PIK";\n', '    uint public constant decimals = 8;\n', '    \n', '        uint256 public totalSupply          = 20000000000e8;\n', '        uint256 public tokensForSale        = 10000000000e8;\n', '        uint256 public totalDistributed;\n', '        uint256 public totalTokenSold; \n', '        uint256 public totalWeiReceived;\n', '        uint256 public constant requestMinimum = 1 ether / 100;\n', '        uint256 public tokensPerEth = 20000000e8;\n', '        uint public deadline = 9999999999999;\n', '        uint public round1   = 99999999999;\n', '        \n', '        address public teamWallet = 0xa269a3109521B03991691646575e9F3438aB3164;\n', '        address public ownerWallet = 0x0f02529A5DB2bf4f5c0871f089B5C63E20ea0749;\n', '        address public advisorWallet = 0xfB167e1aDcea5932Ac77E0E1E7ED5FbE3Fb3B5F1;\n', '        address public developmentWallet = 0xcCA255aE8E85E1bD8264Fa9d03eB5CdaA3A344bb;\n', '        address public marketingWallet = 0x1d4c855Dc093e4558341b77bEcb9234FCc2A6fdb;\n', '        \n', '        address multisig = 0xF37dFcB77574Ab8CaDC4C6AE636AF42704135Aab;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event ICOStarted();\n', '    \n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '\n', '    event TokensPerEthUpdated(uint _tokensPerEth);\n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '\n', '    bool public distributionFinished = false;\n', '    bool public icoStarted = false;\n', '    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function startICO() onlyOwner public returns (bool) {\n', '        icoStarted = true;\n', '        distributionFinished = false;\n', '        emit ICOStarted();\n', '        return true;\n', '    }\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);        \n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint _amount) internal {\n', '\n', '        require( _amount > 0 );      \n', '\n', '        require( totalDistributed < totalSupply );\n', '        \n', '        balances[_participant] = balances[_participant].add(_amount);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '        // log\n', '        emit Airdrop(_participant, _amount, balances[_participant]);\n', '        emit Transfer(address(0), _participant, _amount);\n', '    }\n', '\n', '    function transferTokenTo(address _participant, uint _amount) public onlyOwner {        \n', '        doAirdrop(_participant, _amount);\n', '    }\n', '\n', '    function transferTokenToMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n', '    }\n', '    \n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '    \n', '    function () external payable {\n', '        getTokens();\n', '     }\n', '\n', '    function getTokens() payable canDistr  public {\n', '        require(icoStarted);\n', '        uint256 tokens = 0;\n', '        uint256 bonus = 0;\n', '        uint256 countbonus = 0;\n', '        uint256 bonusCond1 = 1 ether;\n', '        uint256 bonusCond2 = 5 ether;\n', '        uint256 bonusCond3 = 10 ether;\n', '\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n', '        address investor = msg.sender;\n', '\n', '        if (msg.value >= requestMinimum && now < deadline && now < round1) {\n', '            if(msg.value >= bonusCond1 && msg.value < bonusCond2){\n', '                countbonus = tokens * 10 / 100;\n', '            }else if(msg.value >= bonusCond2 && msg.value < bonusCond3){\n', '                countbonus = tokens * 15 / 100;\n', '            }else if(msg.value >= bonusCond3){\n', '                countbonus = tokens * 20 / 100;\n', '            }\n', '        }else{\n', '            countbonus = 0;\n', '        }\n', '\n', '        bonus = tokens + countbonus;\n', '        \n', '         if (tokens > 0 && msg.value >= requestMinimum){\n', '            if( now >= deadline && now >= round1){\n', '                distr(investor, tokens);\n', '                totalWeiReceived = totalWeiReceived.add(msg.value);\n', '                totalTokenSold = totalTokenSold.add(tokens);\n', '            }else{\n', '                if(msg.value >= bonusCond1){\n', '                    distr(investor, bonus);\n', '                    totalWeiReceived = totalWeiReceived.add(msg.value);\n', '                    totalTokenSold = totalTokenSold.add(tokens);\n', '                }else{\n', '                    distr(investor, tokens);\n', '                    totalWeiReceived = totalWeiReceived.add(msg.value);\n', '                    totalTokenSold = totalTokenSold.add(tokens);\n', '                }   \n', '            }\n', '        }else{\n', '            require( msg.value >= requestMinimum );\n', '            \n', '        }\n', '\n', '        if (totalTokenSold >= tokensForSale) {\n', '            distributionFinished = true;\n', '        }\n', '        \n', '         multisig.transfer(msg.value);\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        if (frozenAccount[msg.sender]) return false;\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        if (frozenAccount[msg.sender]) return false;\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdrawAll() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '\n', '    function withdraw(uint256 _wdamount) onlyOwner public {\n', '        uint256 wantAmount = _wdamount;\n', '        owner.transfer(wantAmount);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '        \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '      emit  FrozenFunds(target, freeze);\n', '    }\n', '}']