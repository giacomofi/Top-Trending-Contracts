['pragma solidity ^0.4.23;\n', '\n', 'contract Contract {\n', '  mapping (address => uint256) public balances_bonus;\n', '  uint256 public contract_eth_value_bonus;\n', '}\n', '\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', 'contract Proxy {\n', '\n', '  Contract contr;\n', '  uint256 public eth_balance;\n', '  ERC20 public token;\n', '  mapping (address => bool) public withdrew;\n', '  address owner;\n', '\n', '  constructor(address _contract, address _token) {\n', '      owner = msg.sender;\n', '      contr = Contract(_contract);\n', '      token = ERC20(_token);\n', '      eth_balance = contr.contract_eth_value_bonus();\n', '  }\n', '\n', '  function withdraw()  {\n', '      require(withdrew[msg.sender] == false);\n', '      withdrew[msg.sender] = true;\n', '      uint256 balance = contr.balances_bonus(msg.sender);\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      uint256 tokens_to_withdraw = (balance*contract_token_balance)/eth_balance;\n', '      eth_balance -= balance;\n', '      require(token.transfer(msg.sender, tokens_to_withdraw));\n', '\n', '  }\n', '\n', '  function emergency_withdraw(address _token) {\n', '      require(msg.sender == owner);\n', '      require(ERC20(_token).transfer(owner, ERC20(_token).balanceOf(this)));\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Contract {\n', '  mapping (address => uint256) public balances_bonus;\n', '  uint256 public contract_eth_value_bonus;\n', '}\n', '\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', 'contract Proxy {\n', '\n', '  Contract contr;\n', '  uint256 public eth_balance;\n', '  ERC20 public token;\n', '  mapping (address => bool) public withdrew;\n', '  address owner;\n', '\n', '  constructor(address _contract, address _token) {\n', '      owner = msg.sender;\n', '      contr = Contract(_contract);\n', '      token = ERC20(_token);\n', '      eth_balance = contr.contract_eth_value_bonus();\n', '  }\n', '\n', '  function withdraw()  {\n', '      require(withdrew[msg.sender] == false);\n', '      withdrew[msg.sender] = true;\n', '      uint256 balance = contr.balances_bonus(msg.sender);\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      uint256 tokens_to_withdraw = (balance*contract_token_balance)/eth_balance;\n', '      eth_balance -= balance;\n', '      require(token.transfer(msg.sender, tokens_to_withdraw));\n', '\n', '  }\n', '\n', '  function emergency_withdraw(address _token) {\n', '      require(msg.sender == owner);\n', '      require(ERC20(_token).transfer(owner, ERC20(_token).balanceOf(this)));\n', '  }\n', '\n', '}']
