['pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on: OpenZeppelin\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TridentDistribution\n', ' * @dev Implementation of the TridentDistribution smart contract.\n', ' */\n', 'contract TridentDistribution is Ownable {\n', '\n', '  // Stores the Trident smart contract\n', '  ERC20 public trident;\n', '\n', '  // Struct that represents a transfer order\n', '  struct Order {\n', '    uint256 amount;         // amount of tokens to transfer\n', '    address account;        // account to transfer amount to\n', '    string metadata;        // arbitrary metadata\n', '  }\n', '\n', '  // Array of all current transfer orders\n', '  Order[] orders;\n', '\n', '  // Accounts allowed to place orders\n', '  address[] orderDelegates;\n', '\n', '  // Accounts allowed to approve orders\n', '  address[] approvalDelegates;\n', '\n', '  // Amount of ETH sent with each order executed\n', '  uint public complementaryEthPerOrder;\n', '\n', '\n', '  // Event emitted when an account has been approved as an order delegate\n', '  event ApproveOrderDelegate(\n', '      address indexed orderDelegate\n', '    );\n', '  // Event emitted when an account has been revoked from being an order delegate\n', '  event RevokeOrderDelegate(\n', '      address indexed orderDelegate\n', '    );\n', '\n', '  // Event emitted when an account has been approved as an approval delegate\n', '  event ApproveApprovalDelegate(\n', '      address indexed approvalDelegate\n', '    );\n', '  // Event emitted when an account has been revoked from being an approval delegate\n', '  event RevokeApprovalDelegate(\n', '      address indexed approvalDelegate\n', '    );\n', '\n', '  // Event emitted when an order has been placed\n', '  event OrderPlaced(\n', '    uint indexed orderIndex\n', '    );\n', '\n', '  // Event emitted when an order has been approved and executed\n', '  event OrderApproved(\n', '    uint indexed orderIndex\n', '    );\n', '\n', '  // Event emitted when an order has been revoked\n', '  event OrderRevoked(\n', '    uint indexed orderIndex\n', '    );\n', '\n', '  // Event emitted when the entire orders batch is approved and executed\n', '  event AllOrdersApproved();\n', '\n', '  // Event emitted when complementaryEthPerOrder has been set\n', '  event ComplementaryEthPerOrderSet();\n', '\n', '\n', '\n', '  constructor(ERC20 _tridentSmartContract) public {\n', '      trident = _tridentSmartContract;\n', '  }\n', '\n', '  /**\n', "   * @dev Fallback function to allow contract to receive ETH via 'send'.\n", '   */\n', '  function () public payable {\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than an owner or an order delegate.\n', '   */\n', '  modifier onlyOwnerOrOrderDelegate() {\n', '    bool allowedToPlaceOrders = false;\n', '\n', '    if(msg.sender==owner) {\n', '      allowedToPlaceOrders = true;\n', '    }\n', '    else {\n', '      for(uint i=0; i<orderDelegates.length; i++) {\n', '        if(orderDelegates[i]==msg.sender) {\n', '          allowedToPlaceOrders = true;\n', '          break;\n', '        }\n', '      }\n', '    }\n', '\n', '    require(allowedToPlaceOrders==true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than an owner or an approval delegate.\n', '   */\n', '  modifier onlyOwnerOrApprovalDelegate() {\n', '    bool allowedToApproveOrders = false;\n', '\n', '    if(msg.sender==owner) {\n', '      allowedToApproveOrders = true;\n', '    }\n', '    else {\n', '      for(uint i=0; i<approvalDelegates.length; i++) {\n', '        if(approvalDelegates[i]==msg.sender) {\n', '          allowedToApproveOrders = true;\n', '          break;\n', '        }\n', '      }\n', '    }\n', '\n', '    require(allowedToApproveOrders==true);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Return the array of order delegates.\n', '   */\n', '  function getOrderDelegates() external view returns (address[]) {\n', '    return orderDelegates;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the array of burn delegates.\n', '   */\n', '  function getApprovalDelegates() external view returns (address[]) {\n', '    return approvalDelegates;\n', '  }\n', '\n', '  /**\n', '   * @dev Give an account permission to place orders.\n', '   * @param _orderDelegate The account to be approved.\n', '   */\n', '  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n', '    bool delegateFound = false;\n', '    for(uint i=0; i<orderDelegates.length; i++) {\n', '      if(orderDelegates[i]==_orderDelegate) {\n', '        delegateFound = true;\n', '        break;\n', '      }\n', '    }\n', '\n', '    if(!delegateFound) {\n', '      orderDelegates.push(_orderDelegate);\n', '    }\n', '\n', '    emit ApproveOrderDelegate(_orderDelegate);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke permission to place orders from an order delegate.\n', '   * @param _orderDelegate The account to be revoked.\n', '   */\n', '  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n', '    uint length = orderDelegates.length;\n', '    require(length > 0);\n', '\n', '    address lastDelegate = orderDelegates[length-1];\n', '    if(_orderDelegate == lastDelegate) {\n', '      delete orderDelegates[length-1];\n', '      orderDelegates.length--;\n', '    }\n', '    else {\n', '      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n', '      for(uint i=0; i<length; i++) {\n', '        if(orderDelegates[i]==_orderDelegate) {\n', '          orderDelegates[i] = lastDelegate;\n', '          delete orderDelegates[length-1];\n', '          orderDelegates.length--;\n', '          break;\n', '        }\n', '      }\n', '    }\n', '\n', '    emit RevokeOrderDelegate(_orderDelegate);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Give an account permission to approve orders.\n', '   * @param _approvalDelegate The account to be approved.\n', '   */\n', '  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n', '    bool delegateFound = false;\n', '    for(uint i=0; i<approvalDelegates.length; i++) {\n', '      if(approvalDelegates[i]==_approvalDelegate) {\n', '        delegateFound = true;\n', '        break;\n', '      }\n', '    }\n', '\n', '    if(!delegateFound) {\n', '      approvalDelegates.push(_approvalDelegate);\n', '    }\n', '\n', '    emit ApproveApprovalDelegate(_approvalDelegate);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke permission to approve orders from an approval delegate.\n', '   * @param _approvalDelegate The account to be revoked.\n', '   */\n', '  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n', '    uint length = approvalDelegates.length;\n', '    require(length > 0);\n', '\n', '    address lastDelegate = approvalDelegates[length-1];\n', '    if(_approvalDelegate == lastDelegate) {\n', '      delete approvalDelegates[length-1];\n', '      approvalDelegates.length--;\n', '    }\n', '    else {\n', '      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n', '      for(uint i=0; i<length; i++) {\n', '        if(approvalDelegates[i]==_approvalDelegate) {\n', '          approvalDelegates[i] = lastDelegate;\n', '          delete approvalDelegates[length-1];\n', '          approvalDelegates.length--;\n', '          break;\n', '        }\n', '      }\n', '    }\n', '\n', '    emit RevokeApprovalDelegate(_approvalDelegate);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Internal function to delete an order at the given index from the orders array.\n', '   * @param _orderIndex The index of the order to be removed.\n', '   */\n', '  function _deleteOrder(uint _orderIndex) internal {\n', '    require(orders.length > _orderIndex);\n', '\n', '    uint lastIndex = orders.length-1;\n', '    if(_orderIndex != lastIndex) {\n', '      // Replace the order to be deleted with the very last item in the array\n', '      orders[_orderIndex] = orders[lastIndex];\n', '    }\n', '    delete orders[lastIndex];\n', '    orders.length--;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to execute an order at the given index.\n', '   * @param _orderIndex The index of the order to be executed.\n', '   */\n', '  function _executeOrder(uint _orderIndex) internal {\n', '    require(orders.length > _orderIndex);\n', '    require(complementaryEthPerOrder <= address(this).balance);\n', '\n', '    Order memory order = orders[_orderIndex];\n', '    _deleteOrder(_orderIndex);\n', '\n', '    trident.transfer(order.account, order.amount);\n', '\n', '    // Transfer the complementary ETH\n', '    address(order.account).transfer(complementaryEthPerOrder);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to place an order.\n', '   * @param _amount The amount of tokens to transfer.\n', '   * @param _account The account to transfer the tokens to.\n', '   * @param _metadata Arbitrary metadata.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n', '    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n', '\n', '    emit OrderPlaced(orders.length-1);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the number of orders.\n', '   */\n', '  function getOrdersCount() external view returns (uint) {\n', '    return orders.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the number of orders.\n', '   */\n', '  function getOrdersTotalAmount() external view returns (uint) {\n', '    uint total = 0;\n', '    for(uint i=0; i<orders.length; i++) {\n', '        Order memory order = orders[i];\n', '        total += order.amount;\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the order at the given index.\n', '   */\n', '  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n', '    Order memory order = orders[_orderIndex];\n', '    return (order.amount, order.account, order.metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to revoke an order at the given index.\n', '   * @param _orderIndex The index of the order to be revoked.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n', '    _deleteOrder(_orderIndex);\n', '\n', '    emit OrderRevoked(_orderIndex);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve an order at the given index.\n', '   * @param _orderIndex The index of the order to be approved.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n', '    _executeOrder(_orderIndex);\n', '\n', '    emit OrderApproved(_orderIndex);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve all orders in the orders array.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n', '    uint orderCount = orders.length;\n', '    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n', '    require(totalComplementaryEth <= address(this).balance);\n', '\n', '    for(uint i=0; i<orderCount; i++) {\n', '        Order memory order = orders[i];\n', '        trident.transfer(order.account, order.amount);\n', '\n', '        // Transfer the complementary ETH\n', '        address(order.account).transfer(complementaryEthPerOrder);\n', '    }\n', '\n', '    // Dispose of all approved orders\n', '    delete orders;\n', '\n', '\n', '    emit AllOrdersApproved();\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to set the complementary eth sent with each order executed.\n', '   * @param _complementaryEthPerOrder The index of the order to be approved.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n', '    complementaryEthPerOrder = _complementaryEthPerOrder;\n', '\n', '    emit ComplementaryEthPerOrderSet();\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function withdraws all ETH from the smart contract.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function withdrawAllEth() onlyOwner external returns (bool) {\n', '    uint ethBalance = address(this).balance;\n', '    require(ethBalance > 0);\n', '\n', '    owner.transfer(ethBalance);\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function withdraws all Trident from the smart contract.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function withdrawAllTrident() onlyOwner external returns (bool) {\n', '    uint tridentBalance = trident.balanceOf(address(this));\n', '    require(tridentBalance > 0);\n', '\n', '    return trident.transfer(owner, tridentBalance);\n', '  }\n', '\n', '}']