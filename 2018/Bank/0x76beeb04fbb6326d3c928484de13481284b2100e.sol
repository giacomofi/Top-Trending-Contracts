['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="c5a1a0b1a085a4bdacaaa8bfa0abeba6aa">[email&#160;protected]</span>> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    function name() public view returns (string name);\n', '    function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', 'contract SmartSignature is ERC721{\n', '  using SafeMath for uint256;\n', '\n', '  event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '  event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  address private owner;\n', '  \n', '  uint256 counter;\n', '  mapping (uint256 => address) private ownerOfToken;\n', '  mapping (uint256 => uint256) private priceOfToken;\n', '  mapping (uint256 => address) private approvedOfToken;\n', '  mapping (uint256 => address) private creatorOfToken;\n', '  mapping (uint256 => uint256) private parentOfToken;\n', '  mapping (uint256 => uint256) private balanceOfToken;  \n', '  mapping (uint256 => uint256) private free1OfToken; \n', '  mapping (uint256 => uint256) private free2OfToken; \n', '   \n', '  function SmartSignature () public {\n', '    owner = msg.sender;\n', '    creatorOfToken[counter] = ownerOfToken[counter] = msg.sender;\n', '    priceOfToken[counter] = 1 ether;\n', '    parentOfToken[counter] = 0;\n', '    free1OfToken[counter] = 0;\n', '    free2OfToken[counter] = 0;    \n', '    counter += 1;    \n', '  }\n', '\n', '  /* Modifiers */\n', '  modifier onlyOwner(uint256 _tokenId) {\n', '    require(ownerOfToken[_tokenId] == msg.sender);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyCreator(uint256 _tokenId) {\n', '    require(creatorOfToken[_tokenId] == msg.sender);\n', '    _;\n', '  }  \n', '\n', '  modifier onlyRoot() {\n', '    require(creatorOfToken[0] == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /* Owner */\n', '  function setCreator (address _creator, uint _tokenId) onlyCreator(_tokenId) public {\n', '    creatorOfToken[_tokenId] = _creator;\n', '  }\n', '\n', '  /* Judge Fake Token */\n', '  function judgeFakeToken (uint256 _tokenId) onlyRoot() public {\n', '    creatorOfToken[_tokenId] = msg.sender;\n', '  }\n', '\n', '  function judgeFakeTokenAndTransfer (uint256 _tokenId, address _plaintiff) onlyRoot() public {    \n', '    creatorOfToken[_tokenId] = _plaintiff;\n', '  }  \n', '\n', '  /* Withdraw */\n', '  function withdrawAllFromRoot () onlyRoot() public {\n', '    uint256 t = balanceOfToken[0];\n', '    balanceOfToken[0] = 0;\n', '    msg.sender.transfer(t);         \n', '  }\n', '  \n', '  function withdrawAllFromToken (uint256 _tokenId) onlyCreator(_tokenId) public {\n', '    uint256 t = balanceOfToken[_tokenId];\n', '    uint256 r = t / 20;\n', '    balanceOfToken[_tokenId] = 0;\n', '    balanceOfToken[parentOfToken[_tokenId]] += r;\n', '    msg.sender.transfer(t - r);      \n', '  }\n', '\n', '  function withdrawAmountFromToken (uint256 _tokenId, uint256 t) onlyCreator(_tokenId) public {\n', '    if (t > balanceOfToken[_tokenId]) t = balanceOfToken[_tokenId];\n', '    uint256 r = t / 20;\n', '    balanceOfToken[_tokenId] = 0;\n', '    balanceOfToken[parentOfToken[_tokenId]] += r;\n', '    msg.sender.transfer(t - r); \n', '  }\n', '  \n', '  function withdrawAll() public {\n', '      require(msg.sender == owner);\n', '      owner.transfer(this.balance);\n', '  }\n', '\n', '  /* Buying */\n', '  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\n', '    return _price.mul(117).div(98);\n', '  }\n', '\n', '  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\n', '    return _price.div(20); // 5%\n', '  }\n', '\n', '  function buy (uint256 _tokenId) payable public {\n', '    require(priceOf(_tokenId) > 0);\n', '    require(ownerOf(_tokenId) != address(0));\n', '    require(msg.value >= priceOf(_tokenId));\n', '    require(ownerOf(_tokenId) != msg.sender);\n', '    require(!isContract(msg.sender));\n', '    require(msg.sender != address(0));\n', '    require(now >= free1OfToken[_tokenId]);\n', '\n', '    address oldOwner = ownerOf(_tokenId);\n', '    address newOwner = msg.sender;\n', '    uint256 price = priceOf(_tokenId);\n', '    uint256 excess = msg.value.sub(price);\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '    priceOfToken[_tokenId] = nextPriceOf(_tokenId);\n', '\n', '    Bought(_tokenId, newOwner, price);\n', '    Sold(_tokenId, oldOwner, price);\n', '\n', '    // Devevloper&#39;s cut which is left in contract and accesed by\n', '    // `withdrawAll` and `withdrawAmountTo` methods.\n', '    uint256 devCut = calculateDevCut(price);\n', '\n', '    // Transfer payment to old owner minus the developer&#39;s cut.\n', '    oldOwner.transfer(price.sub(devCut));\n', '    uint256 shareHolderCut = devCut.div(20);\n', '    ownerOfToken[parentOfToken[_tokenId]].transfer(shareHolderCut);\n', '    balanceOfToken[_tokenId] += devCut.sub(shareHolderCut);\n', '\n', '    if (excess > 0) {\n', '      newOwner.transfer(excess);\n', '    }\n', '  }\n', '\n', '  /* ERC721 */\n', '\n', '  function name() public view returns (string name) {\n', '    return "smartsignature.io";\n', '  }\n', '\n', '  function symbol() public view returns (string symbol) {\n', '    return "SSI";\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return counter;\n', '  }\n', '\n', '  function balanceOf (address _owner) public view returns (uint256 _balance) {\n', '    uint256 t = 0;\n', '    for (uint256 i = 0; i < counter; i++) {\n', '      if (ownerOf(i) == _owner) {\n', '        t++;\n', '      }\n', '    }\n', '    return t;\n', '  }\n', '\n', '  function ownerOf (uint256 _tokenId) public view returns (address _owner) {\n', '    return ownerOfToken[_tokenId];\n', '  }\n', '  \n', '  function creatorOf (uint256 _tokenId) public view returns (address _creator) {\n', '    return creatorOfToken[_tokenId];\n', '  }  \n', '  \n', '  function parentOf (uint256 _tokenId) public view returns (uint256 _parent) {\n', '    return parentOfToken[_tokenId];\n', '  }    \n', '  \n', '  function free1Of (uint256 _tokenId) public view returns (uint256 _free) {\n', '    return free1OfToken[_tokenId];\n', '  }    \n', '\n', '  function free2Of (uint256 _tokenId) public view returns (uint256 _free) {\n', '    return free2OfToken[_tokenId];\n', '  }      \n', '  \n', '  function balanceFromToken (uint256 _tokenId) public view returns (uint256 _balance) {\n', '    return balanceOfToken[_tokenId];\n', '  }      \n', '  \n', '  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\n', '    uint256[] memory tokens = new uint256[](balanceOf(_owner));\n', '\n', '    uint256 tokenCounter = 0;\n', '    for (uint256 i = 0; i < counter; i++) {\n', '      if (ownerOf(i) == _owner) {\n', '        tokens[tokenCounter] = i;\n', '        tokenCounter += 1;\n', '      }\n', '    }\n', '\n', '    return tokens;\n', '  }\n', '\n', '  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n', '    return priceOf(_tokenId) > 0;\n', '  }\n', '\n', '  function approvedFor(uint256 _tokenId) public view returns (address _approved) {\n', '    return approvedOfToken[_tokenId];\n', '  }\n', '\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    require(msg.sender != _to);\n', '    require(tokenExists(_tokenId));\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '\n', '    if (_to == 0) {\n', '      if (approvedOfToken[_tokenId] != 0) {\n', '        delete approvedOfToken[_tokenId];\n', '        Approval(msg.sender, 0, _tokenId);\n', '      }\n', '    } else {\n', '      approvedOfToken[_tokenId] = _to;\n', '      Approval(msg.sender, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\n', '  function transfer(address _to, uint256 _tokenId) public {\n', '    require(msg.sender == ownerOf(_tokenId));\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '    require(approvedFor(_tokenId) == msg.sender);\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(tokenExists(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '\n', '    ownerOfToken[_tokenId] = _to;\n', '    approvedOfToken[_tokenId] = 0;\n', '\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /* Read */\n', '\n', '  function priceOf (uint256 _tokenId) public view returns (uint256 _price) {\n', '    return priceOfToken[_tokenId];\n', '  }\n', '\n', '  function nextPriceOf (uint256 _tokenId) public view returns (uint256 _nextPrice) {\n', '    return calculateNextPrice(priceOf(_tokenId));\n', '  }\n', '\n', '  function allOf (uint256 _tokenId) external view returns (address _owner, address _creator, uint256 _price, uint256 _nextPrice) {\n', '    return (ownerOfToken[_tokenId], creatorOfToken[_tokenId], priceOfToken[_tokenId], nextPriceOf(_tokenId));\n', '  }\n', '\n', '  /* Util */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint size;\n', '    assembly { size := extcodesize(addr) } // solium-disable-line\n', '    return size > 0;\n', '  }\n', '  \n', '  function changePrice(uint256 _tokenId, uint256 _price, uint256 _frozen1, uint256 _frozen2) onlyOwner(_tokenId) public {\n', '    require(now >= free2OfToken[_tokenId]);\n', '    priceOfToken[_tokenId] = _price;\n', '    free1OfToken[_tokenId] = now + _frozen1;\n', '    free2OfToken[_tokenId] = now + _frozen1 + _frozen2;\n', '  }\n', '  \n', '  function issueToken(uint256 _price, uint256 _frozen1, uint256 _frozen2, uint256 _parent) public {\n', '    require(_parent <= counter);\n', '    creatorOfToken[counter] = ownerOfToken[counter] = msg.sender;\n', '    priceOfToken[counter] = _price;\n', '    parentOfToken[counter] = _parent;\n', '    free1OfToken[counter] = now + _frozen1;\n', '    free2OfToken[counter] = now + _frozen1 + _frozen2;\n', '    counter += 1;\n', '  }  \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    function name() public view returns (string name);\n', '    function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', 'contract SmartSignature is ERC721{\n', '  using SafeMath for uint256;\n', '\n', '  event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '  event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  address private owner;\n', '  \n', '  uint256 counter;\n', '  mapping (uint256 => address) private ownerOfToken;\n', '  mapping (uint256 => uint256) private priceOfToken;\n', '  mapping (uint256 => address) private approvedOfToken;\n', '  mapping (uint256 => address) private creatorOfToken;\n', '  mapping (uint256 => uint256) private parentOfToken;\n', '  mapping (uint256 => uint256) private balanceOfToken;  \n', '  mapping (uint256 => uint256) private free1OfToken; \n', '  mapping (uint256 => uint256) private free2OfToken; \n', '   \n', '  function SmartSignature () public {\n', '    owner = msg.sender;\n', '    creatorOfToken[counter] = ownerOfToken[counter] = msg.sender;\n', '    priceOfToken[counter] = 1 ether;\n', '    parentOfToken[counter] = 0;\n', '    free1OfToken[counter] = 0;\n', '    free2OfToken[counter] = 0;    \n', '    counter += 1;    \n', '  }\n', '\n', '  /* Modifiers */\n', '  modifier onlyOwner(uint256 _tokenId) {\n', '    require(ownerOfToken[_tokenId] == msg.sender);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyCreator(uint256 _tokenId) {\n', '    require(creatorOfToken[_tokenId] == msg.sender);\n', '    _;\n', '  }  \n', '\n', '  modifier onlyRoot() {\n', '    require(creatorOfToken[0] == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /* Owner */\n', '  function setCreator (address _creator, uint _tokenId) onlyCreator(_tokenId) public {\n', '    creatorOfToken[_tokenId] = _creator;\n', '  }\n', '\n', '  /* Judge Fake Token */\n', '  function judgeFakeToken (uint256 _tokenId) onlyRoot() public {\n', '    creatorOfToken[_tokenId] = msg.sender;\n', '  }\n', '\n', '  function judgeFakeTokenAndTransfer (uint256 _tokenId, address _plaintiff) onlyRoot() public {    \n', '    creatorOfToken[_tokenId] = _plaintiff;\n', '  }  \n', '\n', '  /* Withdraw */\n', '  function withdrawAllFromRoot () onlyRoot() public {\n', '    uint256 t = balanceOfToken[0];\n', '    balanceOfToken[0] = 0;\n', '    msg.sender.transfer(t);         \n', '  }\n', '  \n', '  function withdrawAllFromToken (uint256 _tokenId) onlyCreator(_tokenId) public {\n', '    uint256 t = balanceOfToken[_tokenId];\n', '    uint256 r = t / 20;\n', '    balanceOfToken[_tokenId] = 0;\n', '    balanceOfToken[parentOfToken[_tokenId]] += r;\n', '    msg.sender.transfer(t - r);      \n', '  }\n', '\n', '  function withdrawAmountFromToken (uint256 _tokenId, uint256 t) onlyCreator(_tokenId) public {\n', '    if (t > balanceOfToken[_tokenId]) t = balanceOfToken[_tokenId];\n', '    uint256 r = t / 20;\n', '    balanceOfToken[_tokenId] = 0;\n', '    balanceOfToken[parentOfToken[_tokenId]] += r;\n', '    msg.sender.transfer(t - r); \n', '  }\n', '  \n', '  function withdrawAll() public {\n', '      require(msg.sender == owner);\n', '      owner.transfer(this.balance);\n', '  }\n', '\n', '  /* Buying */\n', '  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\n', '    return _price.mul(117).div(98);\n', '  }\n', '\n', '  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\n', '    return _price.div(20); // 5%\n', '  }\n', '\n', '  function buy (uint256 _tokenId) payable public {\n', '    require(priceOf(_tokenId) > 0);\n', '    require(ownerOf(_tokenId) != address(0));\n', '    require(msg.value >= priceOf(_tokenId));\n', '    require(ownerOf(_tokenId) != msg.sender);\n', '    require(!isContract(msg.sender));\n', '    require(msg.sender != address(0));\n', '    require(now >= free1OfToken[_tokenId]);\n', '\n', '    address oldOwner = ownerOf(_tokenId);\n', '    address newOwner = msg.sender;\n', '    uint256 price = priceOf(_tokenId);\n', '    uint256 excess = msg.value.sub(price);\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '    priceOfToken[_tokenId] = nextPriceOf(_tokenId);\n', '\n', '    Bought(_tokenId, newOwner, price);\n', '    Sold(_tokenId, oldOwner, price);\n', '\n', "    // Devevloper's cut which is left in contract and accesed by\n", '    // `withdrawAll` and `withdrawAmountTo` methods.\n', '    uint256 devCut = calculateDevCut(price);\n', '\n', "    // Transfer payment to old owner minus the developer's cut.\n", '    oldOwner.transfer(price.sub(devCut));\n', '    uint256 shareHolderCut = devCut.div(20);\n', '    ownerOfToken[parentOfToken[_tokenId]].transfer(shareHolderCut);\n', '    balanceOfToken[_tokenId] += devCut.sub(shareHolderCut);\n', '\n', '    if (excess > 0) {\n', '      newOwner.transfer(excess);\n', '    }\n', '  }\n', '\n', '  /* ERC721 */\n', '\n', '  function name() public view returns (string name) {\n', '    return "smartsignature.io";\n', '  }\n', '\n', '  function symbol() public view returns (string symbol) {\n', '    return "SSI";\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return counter;\n', '  }\n', '\n', '  function balanceOf (address _owner) public view returns (uint256 _balance) {\n', '    uint256 t = 0;\n', '    for (uint256 i = 0; i < counter; i++) {\n', '      if (ownerOf(i) == _owner) {\n', '        t++;\n', '      }\n', '    }\n', '    return t;\n', '  }\n', '\n', '  function ownerOf (uint256 _tokenId) public view returns (address _owner) {\n', '    return ownerOfToken[_tokenId];\n', '  }\n', '  \n', '  function creatorOf (uint256 _tokenId) public view returns (address _creator) {\n', '    return creatorOfToken[_tokenId];\n', '  }  \n', '  \n', '  function parentOf (uint256 _tokenId) public view returns (uint256 _parent) {\n', '    return parentOfToken[_tokenId];\n', '  }    \n', '  \n', '  function free1Of (uint256 _tokenId) public view returns (uint256 _free) {\n', '    return free1OfToken[_tokenId];\n', '  }    \n', '\n', '  function free2Of (uint256 _tokenId) public view returns (uint256 _free) {\n', '    return free2OfToken[_tokenId];\n', '  }      \n', '  \n', '  function balanceFromToken (uint256 _tokenId) public view returns (uint256 _balance) {\n', '    return balanceOfToken[_tokenId];\n', '  }      \n', '  \n', '  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\n', '    uint256[] memory tokens = new uint256[](balanceOf(_owner));\n', '\n', '    uint256 tokenCounter = 0;\n', '    for (uint256 i = 0; i < counter; i++) {\n', '      if (ownerOf(i) == _owner) {\n', '        tokens[tokenCounter] = i;\n', '        tokenCounter += 1;\n', '      }\n', '    }\n', '\n', '    return tokens;\n', '  }\n', '\n', '  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n', '    return priceOf(_tokenId) > 0;\n', '  }\n', '\n', '  function approvedFor(uint256 _tokenId) public view returns (address _approved) {\n', '    return approvedOfToken[_tokenId];\n', '  }\n', '\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    require(msg.sender != _to);\n', '    require(tokenExists(_tokenId));\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '\n', '    if (_to == 0) {\n', '      if (approvedOfToken[_tokenId] != 0) {\n', '        delete approvedOfToken[_tokenId];\n', '        Approval(msg.sender, 0, _tokenId);\n', '      }\n', '    } else {\n', '      approvedOfToken[_tokenId] = _to;\n', '      Approval(msg.sender, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\n', '  function transfer(address _to, uint256 _tokenId) public {\n', '    require(msg.sender == ownerOf(_tokenId));\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '    require(approvedFor(_tokenId) == msg.sender);\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(tokenExists(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '\n', '    ownerOfToken[_tokenId] = _to;\n', '    approvedOfToken[_tokenId] = 0;\n', '\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /* Read */\n', '\n', '  function priceOf (uint256 _tokenId) public view returns (uint256 _price) {\n', '    return priceOfToken[_tokenId];\n', '  }\n', '\n', '  function nextPriceOf (uint256 _tokenId) public view returns (uint256 _nextPrice) {\n', '    return calculateNextPrice(priceOf(_tokenId));\n', '  }\n', '\n', '  function allOf (uint256 _tokenId) external view returns (address _owner, address _creator, uint256 _price, uint256 _nextPrice) {\n', '    return (ownerOfToken[_tokenId], creatorOfToken[_tokenId], priceOfToken[_tokenId], nextPriceOf(_tokenId));\n', '  }\n', '\n', '  /* Util */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint size;\n', '    assembly { size := extcodesize(addr) } // solium-disable-line\n', '    return size > 0;\n', '  }\n', '  \n', '  function changePrice(uint256 _tokenId, uint256 _price, uint256 _frozen1, uint256 _frozen2) onlyOwner(_tokenId) public {\n', '    require(now >= free2OfToken[_tokenId]);\n', '    priceOfToken[_tokenId] = _price;\n', '    free1OfToken[_tokenId] = now + _frozen1;\n', '    free2OfToken[_tokenId] = now + _frozen1 + _frozen2;\n', '  }\n', '  \n', '  function issueToken(uint256 _price, uint256 _frozen1, uint256 _frozen2, uint256 _parent) public {\n', '    require(_parent <= counter);\n', '    creatorOfToken[counter] = ownerOfToken[counter] = msg.sender;\n', '    priceOfToken[counter] = _price;\n', '    parentOfToken[counter] = _parent;\n', '    free1OfToken[counter] = now + _frozen1;\n', '    free2OfToken[counter] = now + _frozen1 + _frozen2;\n', '    counter += 1;\n', '  }  \n', '}']
