['pragma solidity ^0.4.11;\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Loopring Refund Program\n', '/// @author Kongliang Zhong - <kongliang@loopring.org>.\n', '/// For more information, please visit https://loopring.org.\n', 'contract BatchTransferContract {\n', '    using SafeMath for uint;\n', '    using Math for uint;\n', '\n', '    address public owner;\n', '\n', '    function BatchTransferContract(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function () payable {\n', '        // do nothing.\n', '    }\n', '\n', '    function batchRefund(address[] investors, uint[] ethAmounts) public payable {\n', '        require(msg.sender == owner);\n', '        require(investors.length > 0);\n', '        require(investors.length == ethAmounts.length);\n', '\n', '        uint total = 0;\n', '        for (uint i = 0; i < investors.length; i++) {\n', '            total += ethAmounts[i];\n', '        }\n', '\n', '        require(total <= this.balance);\n', '\n', '        for (i = 0; i < investors.length; i++) {\n', '            if (ethAmounts[i] > 0) {\n', '                investors[i].transfer(ethAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function batchRefundzFixed(address[] investors, uint ethAmount) public payable {\n', '        require(msg.sender == owner);\n', '        require(investors.length > 0);\n', '        for (uint i = 0; i < investors.length; i++) {\n', '            investors[i].transfer(ethAmount);\n', '        }\n', '    }\n', '\n', '    function drain(uint ethAmount) public payable {\n', '        require(msg.sender == owner);\n', '\n', '        uint amount = ethAmount.min256(this.balance);\n', '        if (amount > 0) {\n', '          owner.transfer(amount);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Loopring Refund Program\n', '/// @author Kongliang Zhong - <kongliang@loopring.org>.\n', '/// For more information, please visit https://loopring.org.\n', 'contract BatchTransferContract {\n', '    using SafeMath for uint;\n', '    using Math for uint;\n', '\n', '    address public owner;\n', '\n', '    function BatchTransferContract(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function () payable {\n', '        // do nothing.\n', '    }\n', '\n', '    function batchRefund(address[] investors, uint[] ethAmounts) public payable {\n', '        require(msg.sender == owner);\n', '        require(investors.length > 0);\n', '        require(investors.length == ethAmounts.length);\n', '\n', '        uint total = 0;\n', '        for (uint i = 0; i < investors.length; i++) {\n', '            total += ethAmounts[i];\n', '        }\n', '\n', '        require(total <= this.balance);\n', '\n', '        for (i = 0; i < investors.length; i++) {\n', '            if (ethAmounts[i] > 0) {\n', '                investors[i].transfer(ethAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function batchRefundzFixed(address[] investors, uint ethAmount) public payable {\n', '        require(msg.sender == owner);\n', '        require(investors.length > 0);\n', '        for (uint i = 0; i < investors.length; i++) {\n', '            investors[i].transfer(ethAmount);\n', '        }\n', '    }\n', '\n', '    function drain(uint ethAmount) public payable {\n', '        require(msg.sender == owner);\n', '\n', '        uint amount = ethAmount.min256(this.balance);\n', '        if (amount > 0) {\n', '          owner.transfer(amount);\n', '        }\n', '    }\n', '}']
