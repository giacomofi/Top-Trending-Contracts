['pragma solidity 0.4.25;\n', '\n', '/*\n', '* Stin Go 第一份智能合約提供穩定的收入。 \n', '* 智能合約可確保您的資金免遭盜竊和黑客攻擊\n', '* 不要投入超過你可以輸的\n', '*/\n', '\n', 'contract StinGo {\n', '\n', '    struct UserRecord {\n', '        address referrer;\n', '        uint tokens;\n', '        uint gained_funds;\n', '        uint ref_funds;\n', '        // 這個領域可能是負面的\n', '        int funds_correction;\n', '    }\n', '\n', '    using SafeMath for uint;\n', '    using SafeMathInt for int;\n', '    using Fee for Fee.fee;\n', '    using ToAddress for bytes;\n', '\n', '    // ERC20\n', '    string constant public name = "Stin Go";\n', '    string constant public symbol = "STIN";\n', '    uint8 constant public decimals = 18;\n', '\n', '    // Fees\n', '    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%\n', '    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%\n', '    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%\n', '    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%\n', '\n', '    // 最少量的令牌將成為推薦計劃的參與者\n', '    uint constant private minimal_stake = 10e18;\n', '\n', '    // 轉換eth < - >令牌的因素，具有所需的計算精度\n', '    uint constant private precision_factor = 1e18;\n', '\n', '    // 定價政策\n', '    //  - 如果用戶購買1個令牌，價格將增加“price_offset”值\n', '    //  - 如果用戶賣出1個令牌，價格將降低“price_offset”值\n', '    // 有關詳細信息，請參閱方法“fundsToTokens”和“tokensToFunds”\n', '    uint private price = 1e29; // 100 Gwei * precision_factor\n', '    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor\n', '\n', '    // 令牌總數\n', '    uint private total_supply = 0;\n', '\n', '    // 令牌持有者之間共享的總利潤。由於此參數，它並不能準確反映資金總額\n', '    // 可以修改以在總供應量發生變化時保持真實用戶的股息\n', '    // 有關詳細信息，請參閱方法“dividendsOf”並在代碼中使用“funds_correction”\n', '    uint private shared_profit = 0;\n', '\n', '    // 用戶數據的映射\n', '    mapping(address => UserRecord) private user_data;\n', '\n', '    // ==== 修改 ==== //\n', '\n', '    modifier onlyValidTokenAmount(uint tokens) {\n', '        require(tokens > 0, "令牌數量必須大於零");\n', '        require(tokens <= user_data[msg.sender].tokens, "你沒有足夠的令牌");\n', '        _;\n', '    }\n', '\n', '    // ==== 上市 API ==== //\n', '\n', '    // ---- 寫作方法 ---- //\n', '\n', '    function () public payable {\n', '        buy(msg.data.toAddr());\n', '    }\n', '\n', '    /*\n', '    *  從收到的資金購買代幣\n', '    */\n', '    function buy(address referrer) public payable {\n', '\n', '        // 報名費\n', '        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);\n', '        require(fee_funds != 0, "收入資金太小");\n', '\n', '        // 更新用戶的推薦人\n', '        //  - 你不能成為自己的推薦人\n', '        //  - 用戶和他的推薦人將在一起生活\n', '        UserRecord storage user = user_data[msg.sender];\n', '        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {\n', '            user.referrer = referrer;\n', '        }\n', '\n', '        // 申請推薦獎金\n', '        if (user.referrer != 0x0) {\n', '            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);\n', '            require(fee_funds != 0, "收入資金太小");\n', '        }\n', '\n', '        // 計算代幣金額和變更價格\n', '        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n', '        require(tokens != 0, "收入資金太小");\n', '        price = _price;\n', '\n', '        // 薄荷代幣，增加共享利潤\n', '        mintTokens(msg.sender, tokens);\n', '        shared_profit = shared_profit.add(fee_funds);\n', '\n', '        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);\n', '    }\n', '\n', '    /*\n', '    *  出售給定數量的代幣並獲得資金\n', '    */\n', '    function sell(uint tokens) public onlyValidTokenAmount(tokens) {\n', '\n', '        // 計算資金數額和變更價格\n', '        (uint funds, uint _price) = tokensToFunds(tokens);\n', '        require(funds != 0, "沒有足夠的令牌來做這件事");\n', '        price = _price;\n', '\n', '        // 申請費\n', '        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);\n', '        require(fee_funds != 0, "沒有足夠的令牌來做這件事");\n', '\n', '        // 刻錄令牌並為用戶的股息增加資金\n', '        burnTokens(msg.sender, tokens);\n', '        UserRecord storage user = user_data[msg.sender];\n', '        user.gained_funds = user.gained_funds.add(taxed_funds);\n', '\n', '        // 增加共享利潤\n', '        shared_profit = shared_profit.add(fee_funds);\n', '\n', '        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);\n', '    }\n', '\n', '    /*\n', '    *  將給定數量的令牌從發件人轉移到另一個用戶\n', '    * ERC20\n', '    */\n', '    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {\n', '\n', '        require(to_addr != msg.sender, "你不能把代幣轉讓給自己");\n', '\n', '        // 申請費\n', '        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);\n', '        require(fee_tokens != 0, "沒有足夠的令牌來做到這一點");\n', '\n', '        // 計算資金數額和變更價格\n', '        (uint funds, uint _price) = tokensToFunds(fee_tokens);\n', '        require(funds != 0, "沒有足夠的令牌來做到這一點");\n', '        price = _price;\n', '\n', '        // 燃燒和薄荷代幣，不含費用\n', '        burnTokens(msg.sender, tokens);\n', '        mintTokens(to_addr, taxed_tokens);\n', '\n', '        // 增加共享利潤\n', '        shared_profit = shared_profit.add(funds);\n', '\n', '        emit Transfer(msg.sender, to_addr, tokens);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    *  再投資所有股息\n', '    */\n', '    function reinvest() public {\n', '\n', '        // 獲得所有股息\n', '        uint funds = dividendsOf(msg.sender);\n', '        require(funds > 0, "你沒有股息");\n', '\n', '        // 做出更正，之後的事件將為0\n', '        UserRecord storage user = user_data[msg.sender];\n', '        user.funds_correction = user.funds_correction.add(int(funds));\n', '\n', '        // 申請費\n', '        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);\n', '        require(fee_funds != 0, "紅利不足以做到這一點");\n', '\n', '        // 申請推薦獎金\n', '        if (user.referrer != 0x0) {\n', '            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);\n', '            require(fee_funds != 0, "紅利不足以做到這一點");\n', '        }\n', '\n', '        // 計算代幣金額和變更價格\n', '        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n', '        require(tokens != 0, "紅利不足以做到這一點");\n', '        price = _price;\n', '\n', '        // 薄荷代幣，增加共享利潤\n', '        mintTokens(msg.sender, tokens);\n', '        shared_profit = shared_profit.add(fee_funds);\n', '\n', '        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);\n', '    }\n', '\n', '    /*\n', '    *  撤回所有股息\n', '    */\n', '    function withdraw() public {\n', '\n', '        // 獲得所有股息\n', '        uint funds = dividendsOf(msg.sender);\n', '        require(funds > 0, "你沒有股息");\n', '\n', '        // 做出更正，之後的事件將為0\n', '        UserRecord storage user = user_data[msg.sender];\n', '        user.funds_correction = user.funds_correction.add(int(funds));\n', '\n', '        // 發送資金\n', '        msg.sender.transfer(funds);\n', '\n', '        emit Withdrawal(msg.sender, funds, now);\n', '    }\n', '\n', '    /*\n', '    *  出售所有代幣和分紅\n', '    */\n', '    function exit() public {\n', '\n', '        // 賣掉所有代幣\n', '        uint tokens = user_data[msg.sender].tokens;\n', '        if (tokens > 0) {\n', '            sell(tokens);\n', '        }\n', '\n', '        withdraw();\n', '    }\n', '\n', '    /*\n', '    * 警告！此方法在令牌持有者之間分配所有傳入資金，並且不提供任何內容\n', '    * 它將在未來由我們的生態系統中的其他合同/地址使用\n', '    * 但如果你想捐款，歡迎你\n', '    */\n', '    function donate() public payable {\n', '        shared_profit = shared_profit.add(msg.value);\n', '        emit Donation(msg.sender, msg.value, now);\n', '    }\n', '\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return total_supply;\n', '    }\n', '\n', '   \n', '    function balanceOf(address addr) public view returns (uint) {\n', '        return user_data[addr].tokens;\n', '    }\n', '\n', '   \n', '    function dividendsOf(address addr) public view returns (uint) {\n', '\n', '        UserRecord memory user = user_data[addr];\n', '\n', '       \n', '        int d = int(user.gained_funds.add(user.ref_funds));\n', '        require(d >= 0);\n', '\n', '        if (total_supply > 0) {\n', '            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));\n', '        }\n', '\n', '        if (user.funds_correction > 0) {\n', '            d = d.sub(user.funds_correction);\n', '        }\n', '        else if (user.funds_correction < 0) {\n', '            d = d.add(-user.funds_correction);\n', '        }\n', '\n', '        require(d >= 0);\n', '\n', '        return uint(d);\n', '    }\n', '\n', '   \n', '    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {\n', '        if (funds == 0) {\n', '            return 0;\n', '        }\n', '        if (apply_fee) {\n', '            (,uint _funds) = fee_purchase.split(funds);\n', '            funds = _funds;\n', '        }\n', '        (uint tokens,) = fundsToTokens(funds);\n', '        return tokens;\n', '    }\n', '\n', '    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {\n', '        // 總共有空令牌或沒有銷售代幣\n', '        if (tokens == 0 || total_supply == 0) {\n', '            return 0;\n', '        }\n', '        // 比總共開採更多的令牌，只是從計算中排除不必要的令牌\n', '        else if (tokens > total_supply) {\n', '            tokens = total_supply;\n', '        }\n', '        (uint funds,) = tokensToFunds(tokens);\n', '        if (apply_fee) {\n', '            (,uint _funds) = fee_selling.split(funds);\n', '            funds = _funds;\n', '        }\n', '        return funds;\n', '    }\n', '\n', '    /*\n', '    *  下一個令牌的購買價格\n', '    */\n', '    function buyPrice() public view returns (uint) {\n', '        return price / precision_factor;\n', '    }\n', '\n', '    /*\n', '    *  售價下一個令牌\n', '    */\n', '    function sellPrice() public view returns (uint) {\n', '        return price.sub(price_offset) / precision_factor;\n', '    }\n', '\n', '    // ==== 私人的 API ==== //\n', '\n', '    function mintTokens(address addr, uint tokens) internal {\n', '\n', '        UserRecord storage user = user_data[addr];\n', '\n', '        bool not_first_minting = total_supply > 0;\n', '\n', '        if (not_first_minting) {\n', '            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;\n', '        }\n', '\n', '        total_supply = total_supply.add(tokens);\n', '        user.tokens = user.tokens.add(tokens);\n', '\n', '        if (not_first_minting) {\n', '            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));\n', '        }\n', '    }\n', '\n', '    function burnTokens(address addr, uint tokens) internal {\n', '\n', '        UserRecord storage user = user_data[addr];\n', '\n', '        uint dividends_from_tokens = 0;\n', '        if (total_supply == tokens) {\n', '            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;\n', '        }\n', '\n', '        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;\n', '\n', '        total_supply = total_supply.sub(tokens);\n', '        user.tokens = user.tokens.sub(tokens);\n', '\n', '        if (total_supply > 0) {\n', '            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));\n', '        }\n', '        else if (dividends_from_tokens != 0) {\n', '            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));\n', '        }\n', '    }\n', '\n', '    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {\n', '        UserRecord storage referrer = user_data[referrer_addr];\n', '        if (referrer.tokens >= minimal_stake) {\n', '            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);\n', '            referrer.ref_funds = referrer.ref_funds.add(reward_funds);\n', '            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);\n', '            return taxed_funds;\n', '        }\n', '        else {\n', '            return funds;\n', '        }\n', '    }\n', '\n', '    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {\n', '        uint b = price.mul(2).sub(price_offset);\n', '        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));\n', '        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);\n', '        uint anp1 = price.add(price_offset.mul(n) / precision_factor);\n', '        return (n, anp1);\n', '    }\n', '\n', '    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {\n', '        uint sell_price = price.sub(price_offset);\n', '        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);\n', '        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);\n', '        return (sn / precision_factor, an);\n', '    }\n', '\n', '    // ==== 活動 ==== //\n', '\n', '    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);\n', '    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);\n', '    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);\n', '    event Withdrawal(address indexed addr, uint funds, uint time);\n', '    event Donation(address indexed addr, uint funds, uint time);\n', '    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);\n', '\n', '    //ERC20\n', '    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, "mul failed");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "add failed");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = add(x, 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = add(x / z, z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMathInt {\n', '\n', '    function sub(int a, int b) internal pure returns (int) {\n', '        int c = a - b;\n', '        require(c <= a, "sub failed");\n', '        return c;\n', '    }\n', '\n', '    function add(int a, int b) internal pure returns (int) {\n', '        int c = a + b;\n', '        require(c >= a, "add failed");\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Fee {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct fee {\n', '        uint num;\n', '        uint den;\n', '    }\n', '\n', '    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {\n', '        if (value == 0) {\n', '            return (0, 0);\n', '        }\n', '        tax = value.mul(f.num) / f.den;\n', '        taxed_value = value.sub(tax);\n', '    }\n', '\n', '    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {\n', '        if (value == 0) {\n', '            return 0;\n', '        }\n', '        tax = value.mul(f.num) / f.den;\n', '    }\n', '}\n', '\n', 'library ToAddress {\n', '\n', '    function toAddr(bytes source) internal pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(source, 0x14))\n', '        }\n', '        return addr;\n', '    }\n', '}']