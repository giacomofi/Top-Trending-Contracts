['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '// similar to the original shrimper , with these changes:\n', '// 0. already initialized\n', '// 1. the "free" 1000 YouTubes cost 0.001 eth (in line with the mining fee)\n', '// 2. Coming to http://CraigGrantShrimper.surge.sh\n', '// 3. bots should have a harder time, and whales can compete for the devfee\n', '\n', 'contract CraigGrantShrimper{\n', '    string public name = "CraigGrantShrimper";\n', '\tstring public symbol = "CGshrimper";\n', '    //uint256 subscribers_PER_CraigGrant_PER_SECOND=1;\n', '    uint256 public subscribers_TO_HATCH_1CraigGrant=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_CraigGrant=1000;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryCraigGrant;\n', '    mapping (address => uint256) public claimedsubscribers;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketsubscribers = 1000000000;\n', '    uint256 public YouTubemasterReq=100000;\n', '    \n', '    function CraigGrantShrimper() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    modifier onlyCEO(){\n', '\t\trequire(msg.sender == ceoAddress );\n', '\t\t_;\n', '\t}\n', '    function becomeYouTubemaster() public{\n', '        require(initialized);\n', '        require(hatcheryCraigGrant[msg.sender]>=YouTubemasterReq);\n', '        hatcheryCraigGrant[msg.sender]=SafeMath.sub(hatcheryCraigGrant[msg.sender],YouTubemasterReq);\n', '        YouTubemasterReq=SafeMath.add(YouTubemasterReq,100000);//+100k CraigGrants each time\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function hatchsubscribers(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 subscribersUsed=getMysubscribers();\n', '        uint256 newCraigGrant=SafeMath.div(subscribersUsed,subscribers_TO_HATCH_1CraigGrant);\n', '        hatcheryCraigGrant[msg.sender]=SafeMath.add(hatcheryCraigGrant[msg.sender],newCraigGrant);\n', '        claimedsubscribers[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral subscribers\n', '        claimedsubscribers[referrals[msg.sender]]=SafeMath.add(claimedsubscribers[referrals[msg.sender]],SafeMath.div(subscribersUsed,5));\n', '        \n', '        //boost market to nerf CraigGrant hoarding\n', '        marketsubscribers=SafeMath.add(marketsubscribers,SafeMath.div(subscribersUsed,10));\n', '    }\n', '    function sellsubscribers() public{\n', '        require(initialized);\n', '        uint256 hassubscribers=getMysubscribers();\n', '        uint256 eggValue=calculatesubscribersell(hassubscribers);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedsubscribers[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketsubscribers=SafeMath.add(marketsubscribers,hassubscribers);\n', '        ceoAddress.transfer(fee);\n', '    }\n', '    function buysubscribers() public payable{\n', '        require(initialized);\n', '        uint256 subscribersBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        subscribersBought=SafeMath.sub(subscribersBought,devFee(subscribersBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedsubscribers[msg.sender]=SafeMath.add(claimedsubscribers[msg.sender],subscribersBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculatesubscribersell(uint256 subscribers) public view returns(uint256){\n', '        return calculateTrade(subscribers,marketsubscribers,this.balance);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketsubscribers);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 subscribers) public payable{\n', '        require(marketsubscribers==0);\n', '        initialized=true;\n', '        marketsubscribers=subscribers;\n', '    }\n', '    function getFreeCraigGrant() public payable{\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //YouTubemaster gets this entrance fee\n', '        require(hatcheryCraigGrant[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryCraigGrant[msg.sender]=STARTING_CraigGrant;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyCraigGrant() public view returns(uint256){\n', '        return hatcheryCraigGrant[msg.sender];\n', '    }\n', '    function getYouTubemasterReq() public view returns(uint256){\n', '        return YouTubemasterReq;\n', '    }\n', '    function getMysubscribers() public view returns(uint256){\n', '        return SafeMath.add(claimedsubscribers[msg.sender],getsubscribersSinceLastHatch(msg.sender));\n', '    }\n', '    function getsubscribersSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(subscribers_TO_HATCH_1CraigGrant,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryCraigGrant[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function transferOwnership() onlyCEO public {\n', '\t\tuint256 etherBalance = this.balance;\n', '\t\tceoAddress.transfer(etherBalance);\n', '\t}\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '// similar to the original shrimper , with these changes:\n', '// 0. already initialized\n', '// 1. the "free" 1000 YouTubes cost 0.001 eth (in line with the mining fee)\n', '// 2. Coming to http://CraigGrantShrimper.surge.sh\n', '// 3. bots should have a harder time, and whales can compete for the devfee\n', '\n', 'contract CraigGrantShrimper{\n', '    string public name = "CraigGrantShrimper";\n', '\tstring public symbol = "CGshrimper";\n', '    //uint256 subscribers_PER_CraigGrant_PER_SECOND=1;\n', '    uint256 public subscribers_TO_HATCH_1CraigGrant=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_CraigGrant=1000;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryCraigGrant;\n', '    mapping (address => uint256) public claimedsubscribers;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketsubscribers = 1000000000;\n', '    uint256 public YouTubemasterReq=100000;\n', '    \n', '    function CraigGrantShrimper() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    modifier onlyCEO(){\n', '\t\trequire(msg.sender == ceoAddress );\n', '\t\t_;\n', '\t}\n', '    function becomeYouTubemaster() public{\n', '        require(initialized);\n', '        require(hatcheryCraigGrant[msg.sender]>=YouTubemasterReq);\n', '        hatcheryCraigGrant[msg.sender]=SafeMath.sub(hatcheryCraigGrant[msg.sender],YouTubemasterReq);\n', '        YouTubemasterReq=SafeMath.add(YouTubemasterReq,100000);//+100k CraigGrants each time\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function hatchsubscribers(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 subscribersUsed=getMysubscribers();\n', '        uint256 newCraigGrant=SafeMath.div(subscribersUsed,subscribers_TO_HATCH_1CraigGrant);\n', '        hatcheryCraigGrant[msg.sender]=SafeMath.add(hatcheryCraigGrant[msg.sender],newCraigGrant);\n', '        claimedsubscribers[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral subscribers\n', '        claimedsubscribers[referrals[msg.sender]]=SafeMath.add(claimedsubscribers[referrals[msg.sender]],SafeMath.div(subscribersUsed,5));\n', '        \n', '        //boost market to nerf CraigGrant hoarding\n', '        marketsubscribers=SafeMath.add(marketsubscribers,SafeMath.div(subscribersUsed,10));\n', '    }\n', '    function sellsubscribers() public{\n', '        require(initialized);\n', '        uint256 hassubscribers=getMysubscribers();\n', '        uint256 eggValue=calculatesubscribersell(hassubscribers);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedsubscribers[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketsubscribers=SafeMath.add(marketsubscribers,hassubscribers);\n', '        ceoAddress.transfer(fee);\n', '    }\n', '    function buysubscribers() public payable{\n', '        require(initialized);\n', '        uint256 subscribersBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        subscribersBought=SafeMath.sub(subscribersBought,devFee(subscribersBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedsubscribers[msg.sender]=SafeMath.add(claimedsubscribers[msg.sender],subscribersBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculatesubscribersell(uint256 subscribers) public view returns(uint256){\n', '        return calculateTrade(subscribers,marketsubscribers,this.balance);\n', '    }\n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketsubscribers);\n', '    }\n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 subscribers) public payable{\n', '        require(marketsubscribers==0);\n', '        initialized=true;\n', '        marketsubscribers=subscribers;\n', '    }\n', '    function getFreeCraigGrant() public payable{\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //YouTubemaster gets this entrance fee\n', '        require(hatcheryCraigGrant[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryCraigGrant[msg.sender]=STARTING_CraigGrant;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyCraigGrant() public view returns(uint256){\n', '        return hatcheryCraigGrant[msg.sender];\n', '    }\n', '    function getYouTubemasterReq() public view returns(uint256){\n', '        return YouTubemasterReq;\n', '    }\n', '    function getMysubscribers() public view returns(uint256){\n', '        return SafeMath.add(claimedsubscribers[msg.sender],getsubscribersSinceLastHatch(msg.sender));\n', '    }\n', '    function getsubscribersSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(subscribers_TO_HATCH_1CraigGrant,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryCraigGrant[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '    function transferOwnership() onlyCEO public {\n', '\t\tuint256 etherBalance = this.balance;\n', '\t\tceoAddress.transfer(etherBalance);\n', '\t}\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
