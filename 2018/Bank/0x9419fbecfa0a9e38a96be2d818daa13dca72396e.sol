['pragma solidity ^0.4.9;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '\n', 'contract Token {\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '}\n', '\n', '\n', 'contract Excalibur is SafeMath {\n', '\n', '  address public admin;\n', '  bool public tradeState;\n', '  string public message;\n', '\n', '  mapping (address => mapping (address => uint)) public tokens; // mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => mapping (bytes32 => bool)) public orders; // mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '  mapping (address => mapping (bytes32 => uint)) public orderFills; // mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n', '\n', '\n', '  event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, bytes32 hash);\n', '  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, bytes32 hash, string pair);\n', '  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, bytes32 hash, string pair);\n', '  event Deposit(address token, address user, uint amount, uint balance);\n', '  event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '\n', '  function Excalibur() {\n', '      admin = msg.sender;\n', '      tradeState = true;\n', '  }\n', '\n', '  modifier onlyAdmin {\n', '        if (msg.sender != admin) throw;\n', '        _;\n', '  }\n', '\n', '  modifier tradeIsOpen {\n', '        if (!tradeState) throw;\n', '        _;\n', '  }\n', '\n', '  function checkAdmin() onlyAdmin constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address newAdmin) onlyAdmin {\n', '    admin = newAdmin;\n', '  }\n', '\n', '  function systemMessage(string msg) onlyAdmin {\n', '    message = msg;\n', '  }\n', '\n', '  function changeTradeState(bool state_) onlyAdmin {\n', '    tradeState = state_;\n', '  }\n', '\n', '  function deposit() payable tradeIsOpen {\n', '    // 0x0000000000000000000000000000000000000000\n', '    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\n', '    Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function withdraw(uint amount) {\n', '    if (tokens[0][msg.sender] < amount) throw;\n', '    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\n', '    if (!msg.sender.call.value(amount)()) throw;\n', '    Withdraw(0x0000000000000000000000000000000000000000, msg.sender, amount, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function depositToken(address token, uint amount) tradeIsOpen {\n', '    // remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    if (token==0) throw;\n', '    if (!Token(token).transferFrom(msg.sender, this, amount)) throw;\n', '    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n', '    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function withdrawToken(address token, uint amount) {\n', '    if (token==0) throw;\n', '    if (tokens[token][msg.sender] < amount) throw;\n', '    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n', '    if (!Token(token).transfer(msg.sender, amount)) throw;\n', '    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function balanceOf(address token, address user) constant returns (uint) {\n', '    return tokens[token][user];\n', '  }\n', '\n', '  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) {\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    orders[msg.sender][hash] = true;\n', '    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, hash);\n', '  }\n', '\n', '  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, string pair) {\n', '    // amount is in amountGet terms\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    if (!( (orders[user][hash] || ecrecover(sha3("\\x19Ethereum Signed Message:\\n32", hash),v,r,s) == user) && block.number <= expires && safeAdd(orderFills[user][hash], amount) <= amountGet)) throw;\n', '    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '    orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\n', '    Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender, hash, pair);\n', '  }\n', '\n', '  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\n', '    tokens[tokenGet][msg.sender] = safeSub(tokens[tokenGet][msg.sender], amount);\n', '    tokens[tokenGet][user] = safeAdd(tokens[tokenGet][user], amount);\n', '    tokens[tokenGive][user] = safeSub(tokens[tokenGive][user], safeMul(amountGive, amount) / amountGet);\n', '    tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\n', '  }\n', '\n', '  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s, string pair) {\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    if (!(orders[msg.sender][hash] || ecrecover(sha3("\\x19Ethereum Signed Message:\\n32", hash),v,r,s) == msg.sender)) throw;\n', '    orderFills[msg.sender][hash] = amountGet;\n', '    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s, hash, pair);\n', '  }\n', '}']
['pragma solidity ^0.4.9;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '\n', 'contract Token {\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '}\n', '\n', '\n', 'contract Excalibur is SafeMath {\n', '\n', '  address public admin;\n', '  bool public tradeState;\n', '  string public message;\n', '\n', '  mapping (address => mapping (address => uint)) public tokens; // mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => mapping (bytes32 => bool)) public orders; // mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '  mapping (address => mapping (bytes32 => uint)) public orderFills; // mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n', '\n', '\n', '  event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, bytes32 hash);\n', '  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, bytes32 hash, string pair);\n', '  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, bytes32 hash, string pair);\n', '  event Deposit(address token, address user, uint amount, uint balance);\n', '  event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '\n', '  function Excalibur() {\n', '      admin = msg.sender;\n', '      tradeState = true;\n', '  }\n', '\n', '  modifier onlyAdmin {\n', '        if (msg.sender != admin) throw;\n', '        _;\n', '  }\n', '\n', '  modifier tradeIsOpen {\n', '        if (!tradeState) throw;\n', '        _;\n', '  }\n', '\n', '  function checkAdmin() onlyAdmin constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address newAdmin) onlyAdmin {\n', '    admin = newAdmin;\n', '  }\n', '\n', '  function systemMessage(string msg) onlyAdmin {\n', '    message = msg;\n', '  }\n', '\n', '  function changeTradeState(bool state_) onlyAdmin {\n', '    tradeState = state_;\n', '  }\n', '\n', '  function deposit() payable tradeIsOpen {\n', '    // 0x0000000000000000000000000000000000000000\n', '    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\n', '    Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function withdraw(uint amount) {\n', '    if (tokens[0][msg.sender] < amount) throw;\n', '    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\n', '    if (!msg.sender.call.value(amount)()) throw;\n', '    Withdraw(0x0000000000000000000000000000000000000000, msg.sender, amount, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function depositToken(address token, uint amount) tradeIsOpen {\n', '    // remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    if (token==0) throw;\n', '    if (!Token(token).transferFrom(msg.sender, this, amount)) throw;\n', '    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n', '    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function withdrawToken(address token, uint amount) {\n', '    if (token==0) throw;\n', '    if (tokens[token][msg.sender] < amount) throw;\n', '    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n', '    if (!Token(token).transfer(msg.sender, amount)) throw;\n', '    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function balanceOf(address token, address user) constant returns (uint) {\n', '    return tokens[token][user];\n', '  }\n', '\n', '  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) {\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    orders[msg.sender][hash] = true;\n', '    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, hash);\n', '  }\n', '\n', '  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, string pair) {\n', '    // amount is in amountGet terms\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    if (!( (orders[user][hash] || ecrecover(sha3("\\x19Ethereum Signed Message:\\n32", hash),v,r,s) == user) && block.number <= expires && safeAdd(orderFills[user][hash], amount) <= amountGet)) throw;\n', '    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '    orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\n', '    Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender, hash, pair);\n', '  }\n', '\n', '  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\n', '    tokens[tokenGet][msg.sender] = safeSub(tokens[tokenGet][msg.sender], amount);\n', '    tokens[tokenGet][user] = safeAdd(tokens[tokenGet][user], amount);\n', '    tokens[tokenGive][user] = safeSub(tokens[tokenGive][user], safeMul(amountGive, amount) / amountGet);\n', '    tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\n', '  }\n', '\n', '  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s, string pair) {\n', '    bytes32 hash = sha3(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    if (!(orders[msg.sender][hash] || ecrecover(sha3("\\x19Ethereum Signed Message:\\n32", hash),v,r,s) == msg.sender)) throw;\n', '    orderFills[msg.sender][hash] = amountGet;\n', '    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s, hash, pair);\n', '  }\n', '}']
