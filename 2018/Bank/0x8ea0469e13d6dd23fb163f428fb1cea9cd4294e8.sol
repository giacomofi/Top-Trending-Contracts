['pragma solidity 0.4.23;\n', '///////////////////////////////////////\n', '//Written by <span class="__cf_email__" data-cfemail="66004807081209080f0948070d030a26010b070f0a4805090b">[email&#160;protected]</span>//\n', '///////////////////////////////////////\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Bancor Converter interface\n', '*/\n', 'contract IBancorConverter{\n', '\n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256);\n', '\tfunction quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '\n', '}\n', '/*\n', '    Bancor Quick Converter interface\n', '*/\n', 'contract IBancorQuickConverter {\n', '    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n', '    function convertForPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public payable returns (uint256);\n', '}\n', '\n', '/*\n', '    Bancor Gas tools interface\n', '*/\n', 'contract IBancorGasPriceLimit {\n', '    function gasPrice() public view returns (uint256) {}\n', '    function validateGasPrice(uint256) public view;\n', '}\n', '\n', '/*\n', '    EIP228 Token Converter interface\n', '*/\n', 'contract ITokenConverter {\n', '    function convertibleTokenCount() public view returns (uint16);\n', '    function convertibleToken(uint16 _tokenIndex) public view returns (address);\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\n', '    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '    // deprecated, backward compatibility\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '}\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken is IOwned, IERC20Token {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract MEGA is admined,IERC20Token { //Standar definition of an ERC20Token\n', '    using SafeMath for uint256; //SafeMath is used for uint256 operations\n', '\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '///\t\t\t\t\t\t\t\t\tToken Related\t\t\t\t\t\t\t\t\t///\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    uint256 public totalSupply;\n', '    \n', '    /**\n', '    * @notice Get the balance of an _owner address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 bal) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @notice transfer _value tokens to address _to\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        \n', '        if(_to == address(this)){\n', '        \tburnToken(msg.sender, _value);\n', '        \tsell(msg.sender,_value);\n', '        \treturn true;\n', '        } else {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t        balances[_to] = balances[_to].add(_value);\n', '    \t    emit Transfer(msg.sender, _to, _value);\n', '        \treturn true;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\n', '    * @param _from The address where tokens comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Assign allowance _value to _spender address to use the msg.sender balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    * @return success with boolean value true\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    \trequire((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    * @return remaining with the allowance value\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Mint token to an specified address.\n', '    * @param _target The address of the receiver of the tokens.\n', '    * @param _mintedAmount amount to mint.\n', '    */\n', '    function mintToken(address _target, uint256 _mintedAmount) private {\n', '        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\n', '        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\n', '        emit Transfer(0, this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _target The address of the holder of the tokens.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(address _target, uint256 _burnedAmount) private {\n', '        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n', '        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n', '        emit Burned(_target, _burnedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(address indexed _target, uint256 _value);\n', '\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '///\t\t\t\t\t\t\t\tInvestment related\t\t\t\t\t\t\t\t\t///\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '\n', '\t//Internal Variables\n', '\tIBancorConverter BancorConverter = IBancorConverter(0xc6725aE749677f21E4d8f85F41cFB6DE49b9Db29);\n', '\tIBancorQuickConverter Bancor = IBancorQuickConverter(0xcF1CC6eD5B653DeF7417E3fA93992c3FFe49139B);\n', '\tIBancorGasPriceLimit BancorGas = IBancorGasPriceLimit(0x607a5C47978e2Eb6d59C6C6f51bc0bF411f4b85a);\n', '\n', '\tIERC20Token ETHToken = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '\n', '\tIERC20Token BNTToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '\n', '\tIERC20Token EOSRelay = IERC20Token(0x507b06c23d7Cb313194dBF6A6D80297137fb5E01);\n', '\tIERC20Token EOSToken = IERC20Token(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0);\n', '\n', '\tIERC20Token ELFRelay = IERC20Token(0x0F2318565f1996CB1eD2F88e172135791BC1FcBf);\n', '\tIERC20Token ELFToken = IERC20Token(0xbf2179859fc6D5BEE9Bf9158632Dc51678a4100e);\n', '\n', '\tIERC20Token OMGRelay = IERC20Token(0x99eBD396Ce7AA095412a4Cd1A0C959D6Fd67B340);\n', '\tIERC20Token OMGToken = IERC20Token(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n', '\n', '\tIERC20Token POARelay = IERC20Token(0x564c07255AFe5050D82c8816F78dA13f2B17ac6D);\n', '\tIERC20Token POAToken = IERC20Token(0x6758B7d441a9739b98552B373703d8d3d14f9e62);\n', '\n', '\tIERC20Token DRGNRelay = IERC20Token(0xa7774F9386E1653645E1A08fb7Aae525B4DeDb24);\n', '\tIERC20Token DRGNToken = IERC20Token(0x419c4dB4B9e25d6Db2AD9691ccb832C8D9fDA05E);\n', '\n', '\tIERC20Token SRNRelay = IERC20Token(0xd2Deb679ed81238CaeF8E0c32257092cEcc8888b);\n', '\tIERC20Token SRNToken = IERC20Token(0x68d57c9a1C35f63E2c83eE8e49A64e9d70528D25);\n', '\n', '\tIERC20Token WAXRelay = IERC20Token(0x67563E7A0F13642068F6F999e48c690107A4571F);\n', '\tIERC20Token WAXToken = IERC20Token(0x39Bb259F66E1C59d5ABEF88375979b4D20D98022);\n', '\n', '\tIERC20Token POWRRelay = IERC20Token(0x168D7Bbf38E17941173a352f1352DF91a7771dF3);\n', '\tIERC20Token POWRToken = IERC20Token(0x595832F8FC6BF59c85C527fEC3740A1b7a361269);\n', '\n', '\tbool buyFlag = false; //False = set rate - True = auto rate\n', '\t//Path to exchanges\n', '\tmapping(uint8 => IERC20Token[]) paths;\n', '\tmapping(uint8 => IERC20Token[]) reversePaths;\n', '\n', '\n', '\t//public variables\n', '\taddress public feeWallet;\n', '\tuint256 public rate = 6850;\n', '\t//token related\n', '\tstring public name = "MEGAINVEST v4";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "MEG4";\n', '    string public version = &#39;2&#39;;\n', '\n', '\tconstructor(address _feeWallet) public {\n', '\t\tfeeWallet = _feeWallet;\n', '\t\tpaths[0] = [ETHToken,BNTToken,BNTToken,EOSRelay,EOSRelay,EOSRelay,EOSToken];\n', '    \tpaths[1] = [ETHToken,BNTToken,BNTToken,ELFRelay,ELFRelay,ELFRelay,ELFToken];\n', '    \tpaths[2] = [ETHToken,BNTToken,BNTToken,OMGRelay,OMGRelay,OMGRelay,OMGToken];\n', '    \tpaths[3] = [ETHToken,BNTToken,BNTToken,POARelay,POARelay,POARelay,POAToken];\n', '    \tpaths[4] = [ETHToken,BNTToken,BNTToken,DRGNRelay,DRGNRelay,DRGNRelay,DRGNToken];\n', '    \tpaths[5] = [ETHToken,BNTToken,BNTToken,SRNRelay,SRNRelay,SRNRelay,SRNToken];\n', '    \tpaths[6] = [ETHToken,BNTToken,BNTToken,WAXRelay,WAXRelay,WAXRelay,WAXToken];\n', '    \tpaths[7] = [ETHToken,BNTToken,BNTToken,POWRRelay,POWRRelay,POWRRelay,POWRToken];\n', '\n', '    \treversePaths[0] = [EOSToken,EOSRelay,EOSRelay,EOSRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[1] = [ELFToken,ELFRelay,ELFRelay,ELFRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[2] = [OMGToken,OMGRelay,OMGRelay,OMGRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[3] = [POAToken,POARelay,POARelay,POARelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[4] = [DRGNToken,DRGNRelay,DRGNRelay,DRGNRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[5] = [SRNToken,SRNRelay,SRNRelay,SRNRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[6] = [WAXToken,WAXRelay,WAXRelay,WAXRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[7] = [POWRToken,POWRRelay,POWRRelay,POWRRelay,BNTToken,BNTToken,ETHToken];\n', '\t}\n', '\n', '\tfunction updateBancorContracts(\n', '\t\tIBancorConverter _BancorConverter,\n', '\t\tIBancorQuickConverter _Bancor,\n', '\t\tIBancorGasPriceLimit _BancorGas) public onlyAdmin{\n', '\n', '\t\tBancorConverter = _BancorConverter;\n', '\t\tBancor = _Bancor;\n', '\t\tBancorGas = _BancorGas;\n', '\t}\n', '\n', '\tfunction updatePath(IERC20Token[] _path, IERC20Token[] _reversePath, uint8 _index) public onlyAdmin{\n', '\t\tpaths[_index] = _path;\n', '\t\treversePaths[_index] = _reversePath;\n', '\t}\n', '\n', '\tfunction changeBuyFlag(bool _flag) public onlyAdmin {\n', '\t\tbuyFlag = _flag;\n', '\t}\n', '\t\n', '\tfunction updateRate(uint256 _rate) public onlyAdmin {\n', '\t    rate = _rate;\n', '\t}\n', '\n', '\tfunction valueOnContract() public view returns (uint256){\n', '\n', '\t\tISmartToken smartToken;\n', '        IERC20Token toToken;\n', '        ITokenConverter converter;\n', '        IERC20Token[] memory _path;\n', '        uint256 pathLength;\n', '        uint256 sumUp;\n', '        uint256 _amount;\n', '        IERC20Token _fromToken;\n', '\n', '        for(uint8 j=0;j<8;j++){\n', '        \t_path = reversePaths[j];\n', '        \t// iterate over the conversion path\n', '\t        pathLength = _path.length;\n', '\t        _fromToken = _path[0];\n', '\t        _amount = _fromToken.balanceOf(address(this));\n', '\n', '\t        for (uint256 i = 1; i < pathLength; i += 2) {\n', '\t            smartToken = ISmartToken(_path[i]);\n', '\t            toToken = _path[i + 1];\n', '\t            converter = ITokenConverter(smartToken.owner());\n', '\n', '\t            // make the conversion - if it&#39;s the last one, also provide the minimum return value\n', '\t            _amount = converter.getReturn(_fromToken, toToken, _amount);\n', '\t            _fromToken = toToken;\n', '\t        }\n', '\t        \n', '\t        sumUp += _amount;\n', '        }\n', '\n', '        return sumUp;\n', '\n', '\t}\n', '\n', '\tfunction buy() public payable {\n', '\t    BancorGas.validateGasPrice(tx.gasprice);\n', '\n', '\t\tif(buyFlag == false){\n', '\t\t\ttokenBuy = msg.value.mul(rate);\n', '\t\t} else {\n', '\n', '\t\t\tuint256 valueStored = valueOnContract();\n', '\t\t\tuint256 tokenBuy;\n', '\n', '\t\t\tif(totalSupply > valueStored){\n', '\n', '\t\t\t\tuint256 tempRate = totalSupply.div(valueStored); // Must be > 0 Tok/Eth\n', '\t\t\t\ttokenBuy = msg.value.mul(tempRate); // Eth * Tok / Eth = Tok\n', '\n', '\t\t\t} else {\n', '\t\t\t\t\n', '\t\t\t\tuint256 tempPrice = valueStored.div(totalSupply); // Must be > 0 Eth/Tok\n', '\t\t\t\ttokenBuy = msg.value.div(tempPrice); // Eth / Eth / Tok = Tok\n', '\n', '\t\t\t}\n', '\t\t}\n', '\t\t\n', '\n', '\t\tuint256 ethFee = msg.value.mul(5)/1000; //5/1000 => 0.5%\n', '\t\tuint256 ethToInvest = msg.value.sub(ethFee);\n', '\n', '\t\tfeeWallet.transfer(ethFee);\n', '\t\tinvest(ethToInvest);\n', '\n', '\t\tmintToken(msg.sender,tokenBuy);\n', '\n', '\t}\n', '\n', '\tfunction invest(uint256 _amount) private {\n', '\t\tuint256 standarValue = _amount.div(8);\n', '\n', '\t\tfor(uint8 i=0; i<8; i++){ \n', '\t\t\tBancor.convertForPrioritized.value(standarValue)(paths[i],standarValue,1,address(this),0,0,0,0x0,0x0);\n', '\t\t}\n', '\n', '\t}\n', '\n', '\tfunction sell(address _target, uint256 _amount) private {\n', '\t\tuint256 tempBalance;\n', '\t\tuint256 tempFee;\n', '\t\tuint256 dividedSupply = totalSupply.div(1e5); //ethereum is not decimals friendly\n', '\n', '\t\tif(dividedSupply == 0 || _amount < dividedSupply) revert();\n', '\t\t\n', '\t\tuint256 factor = _amount.div(dividedSupply);\n', '\n', '\t\tif( factor == 0) revert();\n', '\t\n', '\t\ttempBalance = EOSToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tEOSToken.transfer(feeWallet,tempFee);\n', '\t\tEOSToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = ELFToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tELFToken.transfer(feeWallet,tempFee);\n', '\t\tELFToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = OMGToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tOMGToken.transfer(feeWallet,tempFee);\n', '\t\tOMGToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = POAToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tPOAToken.transfer(feeWallet,tempFee);\n', '\t\tPOAToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = DRGNToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tDRGNToken.transfer(feeWallet,tempFee);\n', '\t\tDRGNToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = SRNToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tSRNToken.transfer(feeWallet,tempFee);\n', '\t\tSRNToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = WAXToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tWAXToken.transfer(feeWallet,tempFee);\n', '\t\tWAXToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = POWRToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tPOWRToken.transfer(feeWallet,tempFee);\n', '\t\tPOWRToken.transfer(_target,tempBalance);\n', '\t}\n', '\t\n', '\tfunction emergency() onlyAdmin public{\n', '\t\tuint256 tempBalance;\n', '\t    msg.sender.transfer(address(this).balance);\n', '\t    \n', '\t    tempBalance = EOSToken.balanceOf(this);\n', '\t\tEOSToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = ELFToken.balanceOf(this);\n', '\t\tELFToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = OMGToken.balanceOf(this);\n', '\t\tOMGToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = POAToken.balanceOf(this);\n', '\t\tPOAToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = DRGNToken.balanceOf(this);\n', '\t\tDRGNToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = SRNToken.balanceOf(this);\n', '\t\tSRNToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = WAXToken.balanceOf(this);\n', '\t\tWAXToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = POWRToken.balanceOf(this);\n', '\t\tPOWRToken.transfer(admin,tempBalance);\n', '\t}\n', '\t\n', '    function claimTokens(IERC20Token _address, address _to) onlyAdmin public  {\n', '        require(_to != address(0));\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(_to,remainder); //Transfer tokens to creator\n', '    }\n', '\n', '\tfunction () public payable{\n', '\t\tbuy();\n', '\t}\n', '\n', '}']
['pragma solidity 0.4.23;\n', '///////////////////////////////////////\n', '//Written by f.antonio.akel@gmail.com//\n', '///////////////////////////////////////\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Bancor Converter interface\n', '*/\n', 'contract IBancorConverter{\n', '\n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256);\n', '\tfunction quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '\n', '}\n', '/*\n', '    Bancor Quick Converter interface\n', '*/\n', 'contract IBancorQuickConverter {\n', '    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n', '    function convertForPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public payable returns (uint256);\n', '}\n', '\n', '/*\n', '    Bancor Gas tools interface\n', '*/\n', 'contract IBancorGasPriceLimit {\n', '    function gasPrice() public view returns (uint256) {}\n', '    function validateGasPrice(uint256) public view;\n', '}\n', '\n', '/*\n', '    EIP228 Token Converter interface\n', '*/\n', 'contract ITokenConverter {\n', '    function convertibleTokenCount() public view returns (uint16);\n', '    function convertibleToken(uint16 _tokenIndex) public view returns (address);\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\n', '    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '    // deprecated, backward compatibility\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '}\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken is IOwned, IERC20Token {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract MEGA is admined,IERC20Token { //Standar definition of an ERC20Token\n', '    using SafeMath for uint256; //SafeMath is used for uint256 operations\n', '\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '///\t\t\t\t\t\t\t\t\tToken Related\t\t\t\t\t\t\t\t\t///\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    uint256 public totalSupply;\n', '    \n', '    /**\n', '    * @notice Get the balance of an _owner address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 bal) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @notice transfer _value tokens to address _to\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        \n', '        if(_to == address(this)){\n', '        \tburnToken(msg.sender, _value);\n', '        \tsell(msg.sender,_value);\n', '        \treturn true;\n', '        } else {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t        balances[_to] = balances[_to].add(_value);\n', '    \t    emit Transfer(msg.sender, _to, _value);\n', '        \treturn true;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\n', '    * @param _from The address where tokens comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Assign allowance _value to _spender address to use the msg.sender balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    * @return success with boolean value true\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    \trequire((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    * @return remaining with the allowance value\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Mint token to an specified address.\n', '    * @param _target The address of the receiver of the tokens.\n', '    * @param _mintedAmount amount to mint.\n', '    */\n', '    function mintToken(address _target, uint256 _mintedAmount) private {\n', '        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\n', '        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\n', '        emit Transfer(0, this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _target The address of the holder of the tokens.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(address _target, uint256 _burnedAmount) private {\n', '        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n', '        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n', '        emit Burned(_target, _burnedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(address indexed _target, uint256 _value);\n', '\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '///\t\t\t\t\t\t\t\tInvestment related\t\t\t\t\t\t\t\t\t///\n', '///////////////////////////////////////////////////////////////////////////////////////\n', '\n', '\t//Internal Variables\n', '\tIBancorConverter BancorConverter = IBancorConverter(0xc6725aE749677f21E4d8f85F41cFB6DE49b9Db29);\n', '\tIBancorQuickConverter Bancor = IBancorQuickConverter(0xcF1CC6eD5B653DeF7417E3fA93992c3FFe49139B);\n', '\tIBancorGasPriceLimit BancorGas = IBancorGasPriceLimit(0x607a5C47978e2Eb6d59C6C6f51bc0bF411f4b85a);\n', '\n', '\tIERC20Token ETHToken = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '\n', '\tIERC20Token BNTToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '\n', '\tIERC20Token EOSRelay = IERC20Token(0x507b06c23d7Cb313194dBF6A6D80297137fb5E01);\n', '\tIERC20Token EOSToken = IERC20Token(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0);\n', '\n', '\tIERC20Token ELFRelay = IERC20Token(0x0F2318565f1996CB1eD2F88e172135791BC1FcBf);\n', '\tIERC20Token ELFToken = IERC20Token(0xbf2179859fc6D5BEE9Bf9158632Dc51678a4100e);\n', '\n', '\tIERC20Token OMGRelay = IERC20Token(0x99eBD396Ce7AA095412a4Cd1A0C959D6Fd67B340);\n', '\tIERC20Token OMGToken = IERC20Token(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n', '\n', '\tIERC20Token POARelay = IERC20Token(0x564c07255AFe5050D82c8816F78dA13f2B17ac6D);\n', '\tIERC20Token POAToken = IERC20Token(0x6758B7d441a9739b98552B373703d8d3d14f9e62);\n', '\n', '\tIERC20Token DRGNRelay = IERC20Token(0xa7774F9386E1653645E1A08fb7Aae525B4DeDb24);\n', '\tIERC20Token DRGNToken = IERC20Token(0x419c4dB4B9e25d6Db2AD9691ccb832C8D9fDA05E);\n', '\n', '\tIERC20Token SRNRelay = IERC20Token(0xd2Deb679ed81238CaeF8E0c32257092cEcc8888b);\n', '\tIERC20Token SRNToken = IERC20Token(0x68d57c9a1C35f63E2c83eE8e49A64e9d70528D25);\n', '\n', '\tIERC20Token WAXRelay = IERC20Token(0x67563E7A0F13642068F6F999e48c690107A4571F);\n', '\tIERC20Token WAXToken = IERC20Token(0x39Bb259F66E1C59d5ABEF88375979b4D20D98022);\n', '\n', '\tIERC20Token POWRRelay = IERC20Token(0x168D7Bbf38E17941173a352f1352DF91a7771dF3);\n', '\tIERC20Token POWRToken = IERC20Token(0x595832F8FC6BF59c85C527fEC3740A1b7a361269);\n', '\n', '\tbool buyFlag = false; //False = set rate - True = auto rate\n', '\t//Path to exchanges\n', '\tmapping(uint8 => IERC20Token[]) paths;\n', '\tmapping(uint8 => IERC20Token[]) reversePaths;\n', '\n', '\n', '\t//public variables\n', '\taddress public feeWallet;\n', '\tuint256 public rate = 6850;\n', '\t//token related\n', '\tstring public name = "MEGAINVEST v4";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "MEG4";\n', "    string public version = '2';\n", '\n', '\tconstructor(address _feeWallet) public {\n', '\t\tfeeWallet = _feeWallet;\n', '\t\tpaths[0] = [ETHToken,BNTToken,BNTToken,EOSRelay,EOSRelay,EOSRelay,EOSToken];\n', '    \tpaths[1] = [ETHToken,BNTToken,BNTToken,ELFRelay,ELFRelay,ELFRelay,ELFToken];\n', '    \tpaths[2] = [ETHToken,BNTToken,BNTToken,OMGRelay,OMGRelay,OMGRelay,OMGToken];\n', '    \tpaths[3] = [ETHToken,BNTToken,BNTToken,POARelay,POARelay,POARelay,POAToken];\n', '    \tpaths[4] = [ETHToken,BNTToken,BNTToken,DRGNRelay,DRGNRelay,DRGNRelay,DRGNToken];\n', '    \tpaths[5] = [ETHToken,BNTToken,BNTToken,SRNRelay,SRNRelay,SRNRelay,SRNToken];\n', '    \tpaths[6] = [ETHToken,BNTToken,BNTToken,WAXRelay,WAXRelay,WAXRelay,WAXToken];\n', '    \tpaths[7] = [ETHToken,BNTToken,BNTToken,POWRRelay,POWRRelay,POWRRelay,POWRToken];\n', '\n', '    \treversePaths[0] = [EOSToken,EOSRelay,EOSRelay,EOSRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[1] = [ELFToken,ELFRelay,ELFRelay,ELFRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[2] = [OMGToken,OMGRelay,OMGRelay,OMGRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[3] = [POAToken,POARelay,POARelay,POARelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[4] = [DRGNToken,DRGNRelay,DRGNRelay,DRGNRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[5] = [SRNToken,SRNRelay,SRNRelay,SRNRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[6] = [WAXToken,WAXRelay,WAXRelay,WAXRelay,BNTToken,BNTToken,ETHToken];\n', '    \treversePaths[7] = [POWRToken,POWRRelay,POWRRelay,POWRRelay,BNTToken,BNTToken,ETHToken];\n', '\t}\n', '\n', '\tfunction updateBancorContracts(\n', '\t\tIBancorConverter _BancorConverter,\n', '\t\tIBancorQuickConverter _Bancor,\n', '\t\tIBancorGasPriceLimit _BancorGas) public onlyAdmin{\n', '\n', '\t\tBancorConverter = _BancorConverter;\n', '\t\tBancor = _Bancor;\n', '\t\tBancorGas = _BancorGas;\n', '\t}\n', '\n', '\tfunction updatePath(IERC20Token[] _path, IERC20Token[] _reversePath, uint8 _index) public onlyAdmin{\n', '\t\tpaths[_index] = _path;\n', '\t\treversePaths[_index] = _reversePath;\n', '\t}\n', '\n', '\tfunction changeBuyFlag(bool _flag) public onlyAdmin {\n', '\t\tbuyFlag = _flag;\n', '\t}\n', '\t\n', '\tfunction updateRate(uint256 _rate) public onlyAdmin {\n', '\t    rate = _rate;\n', '\t}\n', '\n', '\tfunction valueOnContract() public view returns (uint256){\n', '\n', '\t\tISmartToken smartToken;\n', '        IERC20Token toToken;\n', '        ITokenConverter converter;\n', '        IERC20Token[] memory _path;\n', '        uint256 pathLength;\n', '        uint256 sumUp;\n', '        uint256 _amount;\n', '        IERC20Token _fromToken;\n', '\n', '        for(uint8 j=0;j<8;j++){\n', '        \t_path = reversePaths[j];\n', '        \t// iterate over the conversion path\n', '\t        pathLength = _path.length;\n', '\t        _fromToken = _path[0];\n', '\t        _amount = _fromToken.balanceOf(address(this));\n', '\n', '\t        for (uint256 i = 1; i < pathLength; i += 2) {\n', '\t            smartToken = ISmartToken(_path[i]);\n', '\t            toToken = _path[i + 1];\n', '\t            converter = ITokenConverter(smartToken.owner());\n', '\n', "\t            // make the conversion - if it's the last one, also provide the minimum return value\n", '\t            _amount = converter.getReturn(_fromToken, toToken, _amount);\n', '\t            _fromToken = toToken;\n', '\t        }\n', '\t        \n', '\t        sumUp += _amount;\n', '        }\n', '\n', '        return sumUp;\n', '\n', '\t}\n', '\n', '\tfunction buy() public payable {\n', '\t    BancorGas.validateGasPrice(tx.gasprice);\n', '\n', '\t\tif(buyFlag == false){\n', '\t\t\ttokenBuy = msg.value.mul(rate);\n', '\t\t} else {\n', '\n', '\t\t\tuint256 valueStored = valueOnContract();\n', '\t\t\tuint256 tokenBuy;\n', '\n', '\t\t\tif(totalSupply > valueStored){\n', '\n', '\t\t\t\tuint256 tempRate = totalSupply.div(valueStored); // Must be > 0 Tok/Eth\n', '\t\t\t\ttokenBuy = msg.value.mul(tempRate); // Eth * Tok / Eth = Tok\n', '\n', '\t\t\t} else {\n', '\t\t\t\t\n', '\t\t\t\tuint256 tempPrice = valueStored.div(totalSupply); // Must be > 0 Eth/Tok\n', '\t\t\t\ttokenBuy = msg.value.div(tempPrice); // Eth / Eth / Tok = Tok\n', '\n', '\t\t\t}\n', '\t\t}\n', '\t\t\n', '\n', '\t\tuint256 ethFee = msg.value.mul(5)/1000; //5/1000 => 0.5%\n', '\t\tuint256 ethToInvest = msg.value.sub(ethFee);\n', '\n', '\t\tfeeWallet.transfer(ethFee);\n', '\t\tinvest(ethToInvest);\n', '\n', '\t\tmintToken(msg.sender,tokenBuy);\n', '\n', '\t}\n', '\n', '\tfunction invest(uint256 _amount) private {\n', '\t\tuint256 standarValue = _amount.div(8);\n', '\n', '\t\tfor(uint8 i=0; i<8; i++){ \n', '\t\t\tBancor.convertForPrioritized.value(standarValue)(paths[i],standarValue,1,address(this),0,0,0,0x0,0x0);\n', '\t\t}\n', '\n', '\t}\n', '\n', '\tfunction sell(address _target, uint256 _amount) private {\n', '\t\tuint256 tempBalance;\n', '\t\tuint256 tempFee;\n', '\t\tuint256 dividedSupply = totalSupply.div(1e5); //ethereum is not decimals friendly\n', '\n', '\t\tif(dividedSupply == 0 || _amount < dividedSupply) revert();\n', '\t\t\n', '\t\tuint256 factor = _amount.div(dividedSupply);\n', '\n', '\t\tif( factor == 0) revert();\n', '\t\n', '\t\ttempBalance = EOSToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tEOSToken.transfer(feeWallet,tempFee);\n', '\t\tEOSToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = ELFToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tELFToken.transfer(feeWallet,tempFee);\n', '\t\tELFToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = OMGToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tOMGToken.transfer(feeWallet,tempFee);\n', '\t\tOMGToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = POAToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tPOAToken.transfer(feeWallet,tempFee);\n', '\t\tPOAToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = DRGNToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tDRGNToken.transfer(feeWallet,tempFee);\n', '\t\tDRGNToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = SRNToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tSRNToken.transfer(feeWallet,tempFee);\n', '\t\tSRNToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = WAXToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tWAXToken.transfer(feeWallet,tempFee);\n', '\t\tWAXToken.transfer(_target,tempBalance);\n', '\n', '\t\ttempBalance = POWRToken.balanceOf(this);\n', '\t\ttempFee = tempBalance.mul(5);\n', '\t\ttempFee = tempFee.div(1000); //0.5%\n', '\t\ttempBalance = tempBalance.sub(tempFee);\n', '\t\tPOWRToken.transfer(feeWallet,tempFee);\n', '\t\tPOWRToken.transfer(_target,tempBalance);\n', '\t}\n', '\t\n', '\tfunction emergency() onlyAdmin public{\n', '\t\tuint256 tempBalance;\n', '\t    msg.sender.transfer(address(this).balance);\n', '\t    \n', '\t    tempBalance = EOSToken.balanceOf(this);\n', '\t\tEOSToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = ELFToken.balanceOf(this);\n', '\t\tELFToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = OMGToken.balanceOf(this);\n', '\t\tOMGToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = POAToken.balanceOf(this);\n', '\t\tPOAToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = DRGNToken.balanceOf(this);\n', '\t\tDRGNToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = SRNToken.balanceOf(this);\n', '\t\tSRNToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = WAXToken.balanceOf(this);\n', '\t\tWAXToken.transfer(admin,tempBalance);\n', '\n', '\t\ttempBalance = POWRToken.balanceOf(this);\n', '\t\tPOWRToken.transfer(admin,tempBalance);\n', '\t}\n', '\t\n', '    function claimTokens(IERC20Token _address, address _to) onlyAdmin public  {\n', '        require(_to != address(0));\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(_to,remainder); //Transfer tokens to creator\n', '    }\n', '\n', '\tfunction () public payable{\n', '\t\tbuy();\n', '\t}\n', '\n', '}']
