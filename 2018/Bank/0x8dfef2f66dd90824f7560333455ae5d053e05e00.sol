['/*  \n', '\n', '$$$$$$$\\                                 $$\\$$\\   $$\\                       $$$$$$\\                                \n', '$$  __$$\\                                $$ $$$\\  $$ |                     $$  __$$\\                               \n', '$$ |  $$ |$$$$$$\\ $$$$$$\\ $$$$$$$\\  $$$$$$$ $$$$\\ $$ |$$$$$$\\ $$\\  $$\\  $$\\$$ /  \\__|$$$$$$$\\$$$$$$\\ $$$$$$\\$$$$\\  \n', '$$$$$$$\\ $$  __$$\\\\____$$\\$$  __$$\\$$  __$$ $$ $$\\$$ $$  __$$\\$$ | $$ | $$ \\$$$$$$\\ $$  _____\\____$$\\$$  _$$  _$$\\ \n', '$$  __$$\\$$ |  \\__$$$$$$$ $$ |  $$ $$ /  $$ $$ \\$$$$ $$$$$$$$ $$ | $$ | $$ |\\____$$\\$$ /     $$$$$$$ $$ / $$ / $$ |\n', '$$ |  $$ $$ |    $$  __$$ $$ |  $$ $$ |  $$ $$ |\\$$$ $$   ____$$ | $$ | $$ $$\\   $$ $$ |    $$  __$$ $$ | $$ | $$ |\n', '$$$$$$$  $$ |    \\$$$$$$$ $$ |  $$ \\$$$$$$$ $$ | \\$$ \\$$$$$$$\\\\$$$$$\\$$$$  \\$$$$$$  \\$$$$$$$\\$$$$$$$ $$ | $$ | $$ |\n', '\\_______/\\__|     \\_______\\__|  \\__|\\_______\\__|  \\__|\\_______|\\_____\\____/ \\______/ \\_______\\_______\\__| \\__| \\__|\n', '\n', '           __________                                 \n', '         .&#39;----------`.                              \n', '         | .--------. |                             \n', '         | |$$$$$$$$| |       __________              \n', '         | |$$$$$$$$| |      /__________\\             \n', '.--------| `--------&#39; |------|    --=-- |-------------.\n', '|        `----,-.-----&#39;      |o ======  |             | \n', '|       ______|_|_______     |__________|             | \n', '|      /  %%%%%%%%%%%%  \\                             | \n', '|     /  %%%%%%%%%%%%%%  \\                            | \n', '|     ^^^^^^^^^^^^^^^^^^^^                            | \n', '+-----------------------------------------------------+\n', '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n', '\n', 'You&#39;re always on the ground floor to somewhere...\n', '\n', '* No divs. No refs. Only scams\n', '* Scam price only goes up \n', '* No guarantee there will be any ETH left when you sell\n', '* 30-minute time out between buying and selling \n', '* Contract has a built-in equal opportunity ETH drain\n', '* 5% stupid tax \n', '* The whole contract can be exit scammed in 48 hours\n', '\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '    contract BrandNewScam {\n', '\n', '    using ScamMath for uint256;\n', '    \n', '    address public scammerInChief;\n', '    uint256 public greaterFools;\n', '    uint256 public availableBalance;\n', '    uint256 public countdownToExitScam;\n', '    uint256 public scamSupply;\n', '    uint256 public scamPrice = 69696969696969;\n', '    uint256 public stupidTaxRate = 5;\n', '    uint256 public timeOut = 30 minutes;\n', '    mapping (address => uint256) public userTime;\n', '    mapping (address => uint256) public userScams;\n', '    mapping (address => uint256) public userBalance;\n', '    \n', '    constructor() public payable{\n', '        scammerInChief = msg.sender;\n', '        buyScams();\n', '        countdownToExitScam = now + 48 hours;\n', '    }\n', '    \n', '    modifier relax { \n', '        require (msg.sender == tx.origin); \n', '        _; \n', '    }\n', '\n', '    modifier wait { \n', '        require (now >= userTime[msg.sender] + timeOut);\n', '        _; \n', '    }\n', '    \n', '    function () public payable relax {\n', '        buyScams();\n', '    }\n', '\n', '    function buyScams() public payable relax {\n', '        uint256 stupidTax = msg.value.mul(stupidTaxRate).div(100);\n', '        uint256 ethRemaining = msg.value.sub(stupidTax);\n', '        require(ethRemaining >= scamPrice);\n', '        uint256 scamsPurchased = ethRemaining.div(scamPrice);\n', '        userTime[msg.sender] = now;\n', '        userScams[msg.sender] += scamsPurchased;\n', '        scamSupply += scamsPurchased;\n', '        availableBalance += ethRemaining;\n', '        uint256 newScamPrice = availableBalance.div(scamSupply).mul(2);\n', '        if (newScamPrice > scamPrice) {\n', '            scamPrice = newScamPrice;\n', '        }\n', '        scammerInChief.transfer(stupidTax);\n', '        greaterFools++;\n', '    }\n', '    \n', '    function sellScams(uint256 _scams) public relax wait {\n', '        require (userScams[msg.sender] > 0 && userScams[msg.sender] >= _scams);\n', '        uint256 scamProfit = _scams.mul(scamPrice);\n', '        require (scamProfit <= availableBalance);\n', '        scamSupply = scamSupply.sub(_scams);\n', '        availableBalance = availableBalance.sub(scamProfit);\n', '        userScams[msg.sender] = userScams[msg.sender].sub(_scams);\n', '        userBalance[msg.sender] += scamProfit;\n', '        userTime[msg.sender] = now;\n', '    }\n', '        \n', '    function withdrawScamEarnings() public relax {\n', '        require (userBalance[msg.sender] > 0);\n', '        uint256 balance = userBalance[msg.sender];\n', '        userBalance[msg.sender] = 0;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    function fastEscape() public relax {\n', '        uint256 scamProfit = userScams[msg.sender].mul(scamPrice);\n', '        if (scamProfit <= availableBalance) {\n', '            sellScams(userScams[msg.sender]);\n', '            withdrawScamEarnings();\n', '        } else {\n', '            uint256 maxScams = availableBalance.div(scamPrice);\n', '            assert (userScams[msg.sender] >= maxScams);\n', '            sellScams(maxScams);\n', '            withdrawScamEarnings();\n', '        }\n', '    }\n', '\n', '    function drainMe() public relax {\n', '        require (availableBalance > 420);\n', '        uint256 notRandomNumber = uint256(blockhash(block.number - 1)) % 2;\n', '        if (notRandomNumber == 0) {\n', '            msg.sender.transfer(420);\n', '            availableBalance.sub(420);\n', '        } else {\n', '            msg.sender.transfer(69);\n', '            availableBalance.sub(69);\n', '        }\n', '    }\n', '\n', '    function exitScam() public relax {\n', '        require (msg.sender == scammerInChief);\n', '        require (now >= countdownToExitScam);\n', '        selfdestruct(scammerInChief);\n', '    }\n', '    \n', '    function checkBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '}\n', '\n', 'library ScamMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['/*  \n', '\n', '$$$$$$$\\                                 $$\\$$\\   $$\\                       $$$$$$\\                                \n', '$$  __$$\\                                $$ $$$\\  $$ |                     $$  __$$\\                               \n', '$$ |  $$ |$$$$$$\\ $$$$$$\\ $$$$$$$\\  $$$$$$$ $$$$\\ $$ |$$$$$$\\ $$\\  $$\\  $$\\$$ /  \\__|$$$$$$$\\$$$$$$\\ $$$$$$\\$$$$\\  \n', '$$$$$$$\\ $$  __$$\\\\____$$\\$$  __$$\\$$  __$$ $$ $$\\$$ $$  __$$\\$$ | $$ | $$ \\$$$$$$\\ $$  _____\\____$$\\$$  _$$  _$$\\ \n', '$$  __$$\\$$ |  \\__$$$$$$$ $$ |  $$ $$ /  $$ $$ \\$$$$ $$$$$$$$ $$ | $$ | $$ |\\____$$\\$$ /     $$$$$$$ $$ / $$ / $$ |\n', '$$ |  $$ $$ |    $$  __$$ $$ |  $$ $$ |  $$ $$ |\\$$$ $$   ____$$ | $$ | $$ $$\\   $$ $$ |    $$  __$$ $$ | $$ | $$ |\n', '$$$$$$$  $$ |    \\$$$$$$$ $$ |  $$ \\$$$$$$$ $$ | \\$$ \\$$$$$$$\\\\$$$$$\\$$$$  \\$$$$$$  \\$$$$$$$\\$$$$$$$ $$ | $$ | $$ |\n', '\\_______/\\__|     \\_______\\__|  \\__|\\_______\\__|  \\__|\\_______|\\_____\\____/ \\______/ \\_______\\_______\\__| \\__| \\__|\n', '\n', '           __________                                 \n', "         .'----------`.                              \n", '         | .--------. |                             \n', '         | |$$$$$$$$| |       __________              \n', '         | |$$$$$$$$| |      /__________\\             \n', ".--------| `--------' |------|    --=-- |-------------.\n", "|        `----,-.-----'      |o ======  |             | \n", '|       ______|_|_______     |__________|             | \n', '|      /  %%%%%%%%%%%%  \\                             | \n', '|     /  %%%%%%%%%%%%%%  \\                            | \n', '|     ^^^^^^^^^^^^^^^^^^^^                            | \n', '+-----------------------------------------------------+\n', '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \n', '\n', "You're always on the ground floor to somewhere...\n", '\n', '* No divs. No refs. Only scams\n', '* Scam price only goes up \n', '* No guarantee there will be any ETH left when you sell\n', '* 30-minute time out between buying and selling \n', '* Contract has a built-in equal opportunity ETH drain\n', '* 5% stupid tax \n', '* The whole contract can be exit scammed in 48 hours\n', '\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '    contract BrandNewScam {\n', '\n', '    using ScamMath for uint256;\n', '    \n', '    address public scammerInChief;\n', '    uint256 public greaterFools;\n', '    uint256 public availableBalance;\n', '    uint256 public countdownToExitScam;\n', '    uint256 public scamSupply;\n', '    uint256 public scamPrice = 69696969696969;\n', '    uint256 public stupidTaxRate = 5;\n', '    uint256 public timeOut = 30 minutes;\n', '    mapping (address => uint256) public userTime;\n', '    mapping (address => uint256) public userScams;\n', '    mapping (address => uint256) public userBalance;\n', '    \n', '    constructor() public payable{\n', '        scammerInChief = msg.sender;\n', '        buyScams();\n', '        countdownToExitScam = now + 48 hours;\n', '    }\n', '    \n', '    modifier relax { \n', '        require (msg.sender == tx.origin); \n', '        _; \n', '    }\n', '\n', '    modifier wait { \n', '        require (now >= userTime[msg.sender] + timeOut);\n', '        _; \n', '    }\n', '    \n', '    function () public payable relax {\n', '        buyScams();\n', '    }\n', '\n', '    function buyScams() public payable relax {\n', '        uint256 stupidTax = msg.value.mul(stupidTaxRate).div(100);\n', '        uint256 ethRemaining = msg.value.sub(stupidTax);\n', '        require(ethRemaining >= scamPrice);\n', '        uint256 scamsPurchased = ethRemaining.div(scamPrice);\n', '        userTime[msg.sender] = now;\n', '        userScams[msg.sender] += scamsPurchased;\n', '        scamSupply += scamsPurchased;\n', '        availableBalance += ethRemaining;\n', '        uint256 newScamPrice = availableBalance.div(scamSupply).mul(2);\n', '        if (newScamPrice > scamPrice) {\n', '            scamPrice = newScamPrice;\n', '        }\n', '        scammerInChief.transfer(stupidTax);\n', '        greaterFools++;\n', '    }\n', '    \n', '    function sellScams(uint256 _scams) public relax wait {\n', '        require (userScams[msg.sender] > 0 && userScams[msg.sender] >= _scams);\n', '        uint256 scamProfit = _scams.mul(scamPrice);\n', '        require (scamProfit <= availableBalance);\n', '        scamSupply = scamSupply.sub(_scams);\n', '        availableBalance = availableBalance.sub(scamProfit);\n', '        userScams[msg.sender] = userScams[msg.sender].sub(_scams);\n', '        userBalance[msg.sender] += scamProfit;\n', '        userTime[msg.sender] = now;\n', '    }\n', '        \n', '    function withdrawScamEarnings() public relax {\n', '        require (userBalance[msg.sender] > 0);\n', '        uint256 balance = userBalance[msg.sender];\n', '        userBalance[msg.sender] = 0;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    function fastEscape() public relax {\n', '        uint256 scamProfit = userScams[msg.sender].mul(scamPrice);\n', '        if (scamProfit <= availableBalance) {\n', '            sellScams(userScams[msg.sender]);\n', '            withdrawScamEarnings();\n', '        } else {\n', '            uint256 maxScams = availableBalance.div(scamPrice);\n', '            assert (userScams[msg.sender] >= maxScams);\n', '            sellScams(maxScams);\n', '            withdrawScamEarnings();\n', '        }\n', '    }\n', '\n', '    function drainMe() public relax {\n', '        require (availableBalance > 420);\n', '        uint256 notRandomNumber = uint256(blockhash(block.number - 1)) % 2;\n', '        if (notRandomNumber == 0) {\n', '            msg.sender.transfer(420);\n', '            availableBalance.sub(420);\n', '        } else {\n', '            msg.sender.transfer(69);\n', '            availableBalance.sub(69);\n', '        }\n', '    }\n', '\n', '    function exitScam() public relax {\n', '        require (msg.sender == scammerInChief);\n', '        require (now >= countdownToExitScam);\n', '        selfdestruct(scammerInChief);\n', '    }\n', '    \n', '    function checkBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '}\n', '\n', 'library ScamMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
