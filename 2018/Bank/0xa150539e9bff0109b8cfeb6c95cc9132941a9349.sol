['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    assert(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    assert(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract PasswordEscrow {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public owner;\n', '  uint256 public commissionFee;\n', '  uint256 public totalFee;\n', '\n', '  uint256 private randSeed = 50;\n', '\n', '  //data\n', '  struct Transfer {\n', '    address from;\n', '    uint256 amount;\n', '  }\n', '\n', '  mapping(bytes32 => Transfer) private password;\n', '  mapping(address => uint256) private randToAddress;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  event LogChangeCommissionFee(uint256 fee);\n', '  event LogChangeOwner(address indexed exOwner, address indexed newOwner);\n', '  event LogDeposit(address indexed from, uint256 amount);\n', '  event LogGetTransfer(address indexed from, address indexed recipient, uint256 amount);\n', '\n', '\n', '  constructor(uint256 _fee) public {\n', '    commissionFee = _fee;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeCommissionFee(uint256 _fee) public onlyOwner {\n', '    commissionFee = _fee;\n', '    emit LogChangeCommissionFee(_fee);\n', '  }\n', '\n', '  function changeOwner(address _newOwner) public onlyOwner {\n', '    emit LogChangeOwner(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  //escrow\n', '  function deposit(bytes32 _password) public payable {\n', '    require(msg.value > commissionFee);\n', '\n', '    uint256 rand = _rand();\n', '    bytes32 pass = sha3(_password, rand);\n', '    randToAddress[msg.sender] = rand;\n', '    password[pass].from = msg.sender;\n', '    password[pass].amount = password[pass].amount.add(msg.value);\n', '\n', '    _updateSeed();\n', '\n', '    emit LogDeposit(msg.sender, msg.value);\n', '  }\n', '\n', '  function _rand() private view returns(uint256) {\n', '    uint256 rand = uint256(sha3(now, block.number, randSeed));\n', '    return rand %= (10 ** 6);\n', '  }\n', '\n', '  function _updateSeed() private {\n', '    randSeed = _rand();\n', '  }\n', '\n', '  function viewRand() public view returns(uint256) {\n', '    return randToAddress[msg.sender];\n', '  }\n', '\n', '  function getTransfer(bytes32 _password, uint256 _number) public {\n', '    require(password[sha3(_password, _number)].amount > 0);\n', '\n', '    bytes32 pass = sha3(_password, _number);\n', '    address from = password[pass].from;\n', '    uint256 amount = password[pass].amount;\n', '    amount = amount.sub(commissionFee);\n', '    totalFee = totalFee.add(commissionFee);\n', '\n', '    _updateSeed();\n', '\n', '    password[pass].amount = 0;\n', '\n', '    msg.sender.transfer(amount);\n', '\n', '    emit LogGetTransfer(from, msg.sender, amount);\n', '  }\n', '\n', '  function withdrawFee() public payable onlyOwner {\n', '    require( totalFee > 0);\n', '\n', '    uint256 fee = totalFee;\n', '    totalFee = 0;\n', '\n', '    owner.transfer(fee);\n', '  }\n', '\n', '  function withdraw() public payable onlyOwner {\n', '    owner.transfer(this.balance);\n', '  }\n', '\n', '\n', '}']
['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    assert(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    assert(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract PasswordEscrow {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public owner;\n', '  uint256 public commissionFee;\n', '  uint256 public totalFee;\n', '\n', '  uint256 private randSeed = 50;\n', '\n', '  //data\n', '  struct Transfer {\n', '    address from;\n', '    uint256 amount;\n', '  }\n', '\n', '  mapping(bytes32 => Transfer) private password;\n', '  mapping(address => uint256) private randToAddress;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  event LogChangeCommissionFee(uint256 fee);\n', '  event LogChangeOwner(address indexed exOwner, address indexed newOwner);\n', '  event LogDeposit(address indexed from, uint256 amount);\n', '  event LogGetTransfer(address indexed from, address indexed recipient, uint256 amount);\n', '\n', '\n', '  constructor(uint256 _fee) public {\n', '    commissionFee = _fee;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeCommissionFee(uint256 _fee) public onlyOwner {\n', '    commissionFee = _fee;\n', '    emit LogChangeCommissionFee(_fee);\n', '  }\n', '\n', '  function changeOwner(address _newOwner) public onlyOwner {\n', '    emit LogChangeOwner(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  //escrow\n', '  function deposit(bytes32 _password) public payable {\n', '    require(msg.value > commissionFee);\n', '\n', '    uint256 rand = _rand();\n', '    bytes32 pass = sha3(_password, rand);\n', '    randToAddress[msg.sender] = rand;\n', '    password[pass].from = msg.sender;\n', '    password[pass].amount = password[pass].amount.add(msg.value);\n', '\n', '    _updateSeed();\n', '\n', '    emit LogDeposit(msg.sender, msg.value);\n', '  }\n', '\n', '  function _rand() private view returns(uint256) {\n', '    uint256 rand = uint256(sha3(now, block.number, randSeed));\n', '    return rand %= (10 ** 6);\n', '  }\n', '\n', '  function _updateSeed() private {\n', '    randSeed = _rand();\n', '  }\n', '\n', '  function viewRand() public view returns(uint256) {\n', '    return randToAddress[msg.sender];\n', '  }\n', '\n', '  function getTransfer(bytes32 _password, uint256 _number) public {\n', '    require(password[sha3(_password, _number)].amount > 0);\n', '\n', '    bytes32 pass = sha3(_password, _number);\n', '    address from = password[pass].from;\n', '    uint256 amount = password[pass].amount;\n', '    amount = amount.sub(commissionFee);\n', '    totalFee = totalFee.add(commissionFee);\n', '\n', '    _updateSeed();\n', '\n', '    password[pass].amount = 0;\n', '\n', '    msg.sender.transfer(amount);\n', '\n', '    emit LogGetTransfer(from, msg.sender, amount);\n', '  }\n', '\n', '  function withdrawFee() public payable onlyOwner {\n', '    require( totalFee > 0);\n', '\n', '    uint256 fee = totalFee;\n', '    totalFee = 0;\n', '\n', '    owner.transfer(fee);\n', '  }\n', '\n', '  function withdraw() public payable onlyOwner {\n', '    owner.transfer(this.balance);\n', '  }\n', '\n', '\n', '}']
