['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/AccountLevels.sol\n', '\n', 'contract AccountLevels {\n', '  //given a user, returns an account level\n', '  //0 = regular user (pays take fee and make fee)\n', '  //1 = market maker silver (pays take fee, no make fee, gets rebate)\n', '  //2 = market maker gold (pays take fee, no make fee, gets entire counterparty&#39;s take fee as rebate)\n', '  function accountLevel(address user) public constant returns(uint);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/SwissCryptoExchange.sol\n', '\n', '/**\n', ' * @title SwissCryptoExchange\n', ' */\n', 'contract SwissCryptoExchange {\n', '  using SafeMath for uint256;\n', '\n', '  // Storage definition.\n', '  address public admin; //the admin address\n', '  address public feeAccount; //the account that will receive fees\n', '  address public accountLevelsAddr; //the address of the AccountLevels contract\n', '  uint256 public feeMake; //percentage times (1 ether)\n', '  uint256 public feeTake; //percentage times (1 ether)\n', '  uint256 public feeRebate; //percentage times (1 ether)\n', '  mapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => bool) public whitelistedTokens; //mapping of whitelisted token addresses (token=0 means Ether)\n', '  mapping (address => bool) public whitelistedUsers; // mapping of whitelisted users that can perform trading\n', '  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '  mapping (address => mapping (bytes32 => uint256)) public orderFills; //mapping of user accounts to mapping of order hashes to uint256s (amount of order that has been filled)\n', '\n', '  // Events definition.\n', '  event Order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user);\n', '  event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n', '  event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address get, address give);\n', '  event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Create a new instance of the SwissCryptoExchange contract.\n', '   * @param _admin             address Admin address\n', '   * @param _feeAccount        address Fee Account address\n', '   * @param _accountLevelsAddr address AccountLevels contract address\n', '   * @param _feeMake           uint256 FeeMake amount\n', '   * @param _feeTake           uint256 FeeTake amount\n', '   * @param _feeRebate         uint256 FeeRebate amount\n', '   */\n', '  function SwissCryptoExchange(\n', '    address _admin,\n', '    address _feeAccount,\n', '    address _accountLevelsAddr,\n', '    uint256 _feeMake,\n', '    uint256 _feeTake,\n', '    uint256 _feeRebate\n', '  )\n', '    public\n', '  {\n', '    // Ensure the admin address is valid.\n', '    require(_admin != 0x0);\n', '\n', '    // Store the values.\n', '    admin = _admin;\n', '    feeAccount = _feeAccount;\n', '    accountLevelsAddr = _accountLevelsAddr;\n', '    feeMake = _feeMake;\n', '    feeTake = _feeTake;\n', '    feeRebate = _feeRebate;\n', '\n', '    // Validate "ethereum address".\n', '    whitelistedTokens[0x0] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Ensure the function caller is the contract admin.\n', '   */\n', '  modifier onlyAdmin() { \n', '    require(msg.sender == admin);\n', '    _; \n', '  }\n', '\n', '  /**\n', '   * @dev The fallback function is not used for receiving money. If someone sends\n', '   *      wei directly to the contract address the transaction will fail.\n', '   */\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Change the admin address.\n', '   * @param _admin address The new admin address\n', '   */\n', '  function changeAdmin(address _admin) public onlyAdmin {\n', '    // The provided address should be valid and different from the current one.\n', '    require(_admin != 0x0 && admin != _admin);\n', '\n', '    // Store the new value.\n', '    admin = _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the AccountLevels contract address. This address could be set to 0x0\n', '   *      if the functionality is not needed.\n', '   * @param _accountLevelsAddr address The new AccountLevels contract address\n', '   */\n', '  function changeAccountLevelsAddr(address _accountLevelsAddr) public onlyAdmin {\n', '    // Store the new value.\n', '    accountLevelsAddr = _accountLevelsAddr;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeAccount address.\n', '   * @param _feeAccount address\n', '   */\n', '  function changeFeeAccount(address _feeAccount) public onlyAdmin {\n', '    // The provided address should be valid.\n', '    require(_feeAccount != 0x0);\n', '\n', '    // Store the new value.\n', '    feeAccount = _feeAccount;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeMake amount.\n', '   * @param _feeMake uint256 New fee make.\n', '   */\n', '  function changeFeeMake(uint256 _feeMake) public onlyAdmin {\n', '    // Store the new value.\n', '    feeMake = _feeMake;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeTake amount.\n', '   * @param _feeTake uint256 New fee take.\n', '   */\n', '  function changeFeeTake(uint256 _feeTake) public onlyAdmin {\n', '    // The new feeTake should be greater than or equal to the feeRebate.\n', '    require(_feeTake >= feeRebate);\n', '\n', '    // Store the new value.\n', '    feeTake = _feeTake;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeRebate amount.\n', '   * @param _feeRebate uint256 New fee rebate.\n', '   */\n', '  function changeFeeRebate(uint256 _feeRebate) public onlyAdmin {\n', '    // The new feeRebate should be less than or equal to the feeTake.\n', '    require(_feeRebate <= feeTake);\n', '\n', '    // Store the new value.\n', '    feeRebate = _feeRebate;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a ERC20 token contract address to the whitelisted ones.\n', '   * @param token address Address of the contract to be added to the whitelist.\n', '   */\n', '  function addWhitelistedTokenAddr(address token) public onlyAdmin {\n', '    // Token address should not be 0x0 (ether) and it should not be already whitelisted.\n', '    require(token != 0x0 && !whitelistedTokens[token]);\n', '\n', '    // Change the flag for this contract address to true.\n', '    whitelistedTokens[token] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove a ERC20 token contract address from the whitelisted ones.\n', '   * @param token address Address of the contract to be removed from the whitelist.\n', '   */\n', '  function removeWhitelistedTokenAddr(address token) public onlyAdmin {\n', '    // Token address should not be 0x0 (ether) and it should be whitelisted.\n', '    require(token != 0x0 && whitelistedTokens[token]);\n', '\n', '    // Change the flag for this contract address to false.\n', '    whitelistedTokens[token] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an user address to the whitelisted ones.\n', '   * @param user address Address to be added to the whitelist.\n', '   */\n', '  function addWhitelistedUserAddr(address user) public onlyAdmin {\n', '    // Address provided should be valid and not already whitelisted.\n', '    require(user != 0x0 && !whitelistedUsers[user]);\n', '\n', '    // Change the flag for this address to false.\n', '    whitelistedUsers[user] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an user address from the whitelisted ones.\n', '   * @param user address Address to be removed from the whitelist.\n', '   */\n', '  function removeWhitelistedUserAddr(address user) public onlyAdmin {\n', '    // Address provided should be valid and whitelisted.\n', '    require(user != 0x0 && whitelistedUsers[user]);\n', '\n', '    // Change the flag for this address to false.\n', '    whitelistedUsers[user] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit wei into the exchange contract.\n', '   */\n', '  function deposit() public payable {\n', '    // Only whitelisted users can make deposits.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Add the deposited wei amount to the user balance.\n', '    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].add(msg.value);\n', '\n', '    // Trigger the event.\n', '    Deposit(0x0, msg.sender, msg.value, tokens[0x0][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw wei from the exchange contract back to the user. \n', '   * @param amount uint256 Wei amount to be withdrawn.\n', '   */\n', '  function withdraw(uint256 amount) public {\n', '    // Requester should have enough balance.\n', '    require(tokens[0x0][msg.sender] >= amount);\n', '  \n', '    // Substract the withdrawn wei amount from the user balance.\n', '    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].sub(amount);\n', '\n', '    // Transfer the wei to the requester.\n', '    msg.sender.transfer(amount);\n', '\n', '    // Trigger the event.\n', '    Withdraw(0x0, msg.sender, amount, tokens[0x0][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Perform a new token deposit to the exchange contract.\n', '   * @dev Remember to call ERC20(address).approve(this, amount) or this contract will not\n', '   *      be able to do the transfer on your behalf.\n', '   * @param token  address Address of the deposited token contract\n', '   * @param amount uint256 Amount to be deposited\n', '   */\n', '  function depositToken(address token, uint256 amount)\n', '    public\n', '  {\n', '    // Should not deposit wei using this function and\n', '    // token contract address should be whitelisted.\n', '    require(token != 0x0 && whitelistedTokens[token]);\n', '      \n', '    // Only whitelisted users can make deposits.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Add the deposited token amount to the user balance.\n', '    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n', '    \n', '    // Transfer tokens from caller to this contract account.\n', '    require(ERC20(token).transferFrom(msg.sender, address(this), amount));\n', '  \n', '    // Trigger the event.    \n', '    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw the given token amount from the requester balance.\n', '   * @param token  address Address of the withdrawn token contract\n', '   * @param amount uint256 Amount of tokens to be withdrawn\n', '   */\n', '  function withdrawToken(address token, uint256 amount) public {\n', '    // Should not withdraw wei using this function.\n', '    require(token != 0x0);\n', '\n', '    // Requester should have enough balance.\n', '    require(tokens[token][msg.sender] >= amount);\n', '\n', '    // Substract the withdrawn token amount from the user balance.\n', '    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n', '    \n', '    // Transfer the tokens to the investor.\n', '    require(ERC20(token).transfer(msg.sender, amount));\n', '\n', '    // Trigger the event.\n', '    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Check the balance of the given user in the given token.\n', '   * @param token address Address of the token contract\n', '   * @param user  address Address of the user whom balance will be queried\n', '   */\n', '  function balanceOf(address token, address user)\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return tokens[token][user];\n', '  }\n', '\n', '  /**\n', '   * @dev Place a new order to the this contract. \n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   */\n', '  function order(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce\n', '  )\n', '    public\n', '  {\n', '    // Order placer address should be whitelisted.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Order tokens addresses should be whitelisted. \n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Calculate the order hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Store the order.\n', '    orders[msg.sender][hash] = true;\n', '\n', '    // Trigger the event.\n', '    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Cancel an existing order.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   */\n', '  function cancelOrder(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    public\n', '  {\n', '    // Calculate the order hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Ensure the message validity.\n', '    require(validateOrderHash(hash, msg.sender, v, r, s));\n', '    \n', '    // Fill the order to the requested amount.\n', '    orderFills[msg.sender][hash] = amountGet;\n', '\n', '    // Trigger the event.\n', '    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n', '  }\n', '\n', '  /**\n', '   * @dev Perform a trade.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @param amount     uint256 Traded amount - in amountGet terms\n', '   */\n', '  function trade(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint256 amount \n', '  )\n', '    public\n', '  {\n', '    // Only whitelisted users can perform trades.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Only whitelisted tokens can be traded.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Expire block number should be greater than current block.\n', '    require(block.number <= expires);\n', '\n', '    // Calculate the trade hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Validate the hash.\n', '    require(validateOrderHash(hash, user, v, r, s));\n', '\n', '    // Ensure that after the trade the ordered amount will not be excedeed.\n', '    require(SafeMath.add(orderFills[user][hash], amount) <= amountGet); \n', '    \n', '    // Add the traded amount to the order fill.\n', '    orderFills[user][hash] = orderFills[user][hash].add(amount);\n', '\n', '    // Trade balances.\n', '    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '    \n', '    // Trigger the event.\n', '    Trade(tokenGet, amount, tokenGive, SafeMath.mul(amountGive, amount).div(amountGet), user, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Check if the trade with provided parameters will pass or not.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @param amount     uint256\n', '   * @param sender     address\n', '   * @return bool\n', '   */\n', '  function testTrade(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint256 amount,\n', '    address sender\n', '  )\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    // Traders should be whitelisted.\n', '    require(whitelistedUsers[user] && whitelistedUsers[sender]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Sender should have at least the amount he wants to trade and \n', '    require(tokens[tokenGet][sender] >= amount);\n', '\n', '    // order should have available volume to fill.\n', '    return availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate the available volume for a given trade.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @return uint256\n', '   */\n', '  function availableVolume(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    // User should be whitelisted.\n', '    require(whitelistedUsers[user]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Calculate the hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '\n', '    // If the order is not valid or the trade is expired early exit with 0.\n', '    if (!(validateOrderHash(hash, user, v, r, s) && block.number <= expires)) {\n', '      return 0;\n', '    }\n', '\n', '    // Condition is used for ensuring the the value returned is\n', '    //   - the maximum available balance of the user in tokenGet terms if the user can&#39;t fullfil all the order\n', '    //     - SafeMath.sub(amountGet, orderFills[user][hash])\n', '    //     - amountGet - amountAvailableForFill\n', '    //   - the available balance of the the user in tokenGet terms if the user has enough to fullfil all the order \n', '    //     - SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive) \n', '    //     - balanceGiveAvailable * amountGet / amountGive\n', '    //     - amountGet / amountGive represents the exchange rate \n', '    if (SafeMath.sub(amountGet, orderFills[user][hash]) < SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive)) {\n', '      return SafeMath.sub(amountGet, orderFills[user][hash]);\n', '    }\n', '\n', '    return SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the amount filled for the given order.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @return uint256\n', '   */\n', '  function amountFilled(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    // User should be whitelisted.\n', '    require(whitelistedUsers[user]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Return the amount filled for the given order.\n', '    return orderFills[user][keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce)];\n', '  }\n', '\n', '    /**\n', '   * @dev Trade balances of given tokens amounts between two users.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param user       address\n', '   * @param amount     uint256\n', '   */\n', '  function tradeBalances(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    address user,\n', '    uint256 amount\n', '  )\n', '    private\n', '  {\n', '    // Calculate the constant taxes.\n', '    uint256 feeMakeXfer = amount.mul(feeMake).div(1 ether);\n', '    uint256 feeTakeXfer = amount.mul(feeTake).div(1 ether);\n', '    uint256 feeRebateXfer = 0;\n', '    \n', '    // Calculate the tax according to account level.\n', '    if (accountLevelsAddr != 0x0) {\n', '      uint256 accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);\n', '      if (accountLevel == 1) {\n', '        feeRebateXfer = amount.mul(feeRebate).div(1 ether);\n', '      } else if (accountLevel == 2) {\n', '        feeRebateXfer = feeTakeXfer;\n', '      }\n', '    }\n', '\n', '    // Update the balances for both maker and taker and add the fee to the feeAccount.\n', '    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(feeTakeXfer));\n', '    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.add(feeRebateXfer).sub(feeMakeXfer));\n', '    tokens[tokenGet][feeAccount] = tokens[tokenGet][feeAccount].add(feeMakeXfer.add(feeTakeXfer).sub(feeRebateXfer));\n', '    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount).div(amountGet));\n', '    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount).div(amountGet));\n', '  }\n', '\n', '  /**\n', '   * @dev Validate an order hash.\n', '   * @param hash bytes32\n', '   * @param user address\n', '   * @param v    uint8\n', '   * @param r    bytes32\n', '   * @param s    bytes32\n', '   * @return bool\n', '   */\n', '  function validateOrderHash(\n', '    bytes32 hash,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return (\n', '      orders[user][hash] ||\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", hash), v, r, s) == user\n', '    );\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/AccountLevels.sol\n', '\n', 'contract AccountLevels {\n', '  //given a user, returns an account level\n', '  //0 = regular user (pays take fee and make fee)\n', '  //1 = market maker silver (pays take fee, no make fee, gets rebate)\n', "  //2 = market maker gold (pays take fee, no make fee, gets entire counterparty's take fee as rebate)\n", '  function accountLevel(address user) public constant returns(uint);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/SwissCryptoExchange.sol\n', '\n', '/**\n', ' * @title SwissCryptoExchange\n', ' */\n', 'contract SwissCryptoExchange {\n', '  using SafeMath for uint256;\n', '\n', '  // Storage definition.\n', '  address public admin; //the admin address\n', '  address public feeAccount; //the account that will receive fees\n', '  address public accountLevelsAddr; //the address of the AccountLevels contract\n', '  uint256 public feeMake; //percentage times (1 ether)\n', '  uint256 public feeTake; //percentage times (1 ether)\n', '  uint256 public feeRebate; //percentage times (1 ether)\n', '  mapping (address => mapping (address => uint256)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => bool) public whitelistedTokens; //mapping of whitelisted token addresses (token=0 means Ether)\n', '  mapping (address => bool) public whitelistedUsers; // mapping of whitelisted users that can perform trading\n', '  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '  mapping (address => mapping (bytes32 => uint256)) public orderFills; //mapping of user accounts to mapping of order hashes to uint256s (amount of order that has been filled)\n', '\n', '  // Events definition.\n', '  event Order(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user);\n', '  event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n', '  event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address get, address give);\n', '  event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '  event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Create a new instance of the SwissCryptoExchange contract.\n', '   * @param _admin             address Admin address\n', '   * @param _feeAccount        address Fee Account address\n', '   * @param _accountLevelsAddr address AccountLevels contract address\n', '   * @param _feeMake           uint256 FeeMake amount\n', '   * @param _feeTake           uint256 FeeTake amount\n', '   * @param _feeRebate         uint256 FeeRebate amount\n', '   */\n', '  function SwissCryptoExchange(\n', '    address _admin,\n', '    address _feeAccount,\n', '    address _accountLevelsAddr,\n', '    uint256 _feeMake,\n', '    uint256 _feeTake,\n', '    uint256 _feeRebate\n', '  )\n', '    public\n', '  {\n', '    // Ensure the admin address is valid.\n', '    require(_admin != 0x0);\n', '\n', '    // Store the values.\n', '    admin = _admin;\n', '    feeAccount = _feeAccount;\n', '    accountLevelsAddr = _accountLevelsAddr;\n', '    feeMake = _feeMake;\n', '    feeTake = _feeTake;\n', '    feeRebate = _feeRebate;\n', '\n', '    // Validate "ethereum address".\n', '    whitelistedTokens[0x0] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Ensure the function caller is the contract admin.\n', '   */\n', '  modifier onlyAdmin() { \n', '    require(msg.sender == admin);\n', '    _; \n', '  }\n', '\n', '  /**\n', '   * @dev The fallback function is not used for receiving money. If someone sends\n', '   *      wei directly to the contract address the transaction will fail.\n', '   */\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Change the admin address.\n', '   * @param _admin address The new admin address\n', '   */\n', '  function changeAdmin(address _admin) public onlyAdmin {\n', '    // The provided address should be valid and different from the current one.\n', '    require(_admin != 0x0 && admin != _admin);\n', '\n', '    // Store the new value.\n', '    admin = _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the AccountLevels contract address. This address could be set to 0x0\n', '   *      if the functionality is not needed.\n', '   * @param _accountLevelsAddr address The new AccountLevels contract address\n', '   */\n', '  function changeAccountLevelsAddr(address _accountLevelsAddr) public onlyAdmin {\n', '    // Store the new value.\n', '    accountLevelsAddr = _accountLevelsAddr;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeAccount address.\n', '   * @param _feeAccount address\n', '   */\n', '  function changeFeeAccount(address _feeAccount) public onlyAdmin {\n', '    // The provided address should be valid.\n', '    require(_feeAccount != 0x0);\n', '\n', '    // Store the new value.\n', '    feeAccount = _feeAccount;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeMake amount.\n', '   * @param _feeMake uint256 New fee make.\n', '   */\n', '  function changeFeeMake(uint256 _feeMake) public onlyAdmin {\n', '    // Store the new value.\n', '    feeMake = _feeMake;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeTake amount.\n', '   * @param _feeTake uint256 New fee take.\n', '   */\n', '  function changeFeeTake(uint256 _feeTake) public onlyAdmin {\n', '    // The new feeTake should be greater than or equal to the feeRebate.\n', '    require(_feeTake >= feeRebate);\n', '\n', '    // Store the new value.\n', '    feeTake = _feeTake;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the feeRebate amount.\n', '   * @param _feeRebate uint256 New fee rebate.\n', '   */\n', '  function changeFeeRebate(uint256 _feeRebate) public onlyAdmin {\n', '    // The new feeRebate should be less than or equal to the feeTake.\n', '    require(_feeRebate <= feeTake);\n', '\n', '    // Store the new value.\n', '    feeRebate = _feeRebate;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a ERC20 token contract address to the whitelisted ones.\n', '   * @param token address Address of the contract to be added to the whitelist.\n', '   */\n', '  function addWhitelistedTokenAddr(address token) public onlyAdmin {\n', '    // Token address should not be 0x0 (ether) and it should not be already whitelisted.\n', '    require(token != 0x0 && !whitelistedTokens[token]);\n', '\n', '    // Change the flag for this contract address to true.\n', '    whitelistedTokens[token] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove a ERC20 token contract address from the whitelisted ones.\n', '   * @param token address Address of the contract to be removed from the whitelist.\n', '   */\n', '  function removeWhitelistedTokenAddr(address token) public onlyAdmin {\n', '    // Token address should not be 0x0 (ether) and it should be whitelisted.\n', '    require(token != 0x0 && whitelistedTokens[token]);\n', '\n', '    // Change the flag for this contract address to false.\n', '    whitelistedTokens[token] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an user address to the whitelisted ones.\n', '   * @param user address Address to be added to the whitelist.\n', '   */\n', '  function addWhitelistedUserAddr(address user) public onlyAdmin {\n', '    // Address provided should be valid and not already whitelisted.\n', '    require(user != 0x0 && !whitelistedUsers[user]);\n', '\n', '    // Change the flag for this address to false.\n', '    whitelistedUsers[user] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an user address from the whitelisted ones.\n', '   * @param user address Address to be removed from the whitelist.\n', '   */\n', '  function removeWhitelistedUserAddr(address user) public onlyAdmin {\n', '    // Address provided should be valid and whitelisted.\n', '    require(user != 0x0 && whitelistedUsers[user]);\n', '\n', '    // Change the flag for this address to false.\n', '    whitelistedUsers[user] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit wei into the exchange contract.\n', '   */\n', '  function deposit() public payable {\n', '    // Only whitelisted users can make deposits.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Add the deposited wei amount to the user balance.\n', '    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].add(msg.value);\n', '\n', '    // Trigger the event.\n', '    Deposit(0x0, msg.sender, msg.value, tokens[0x0][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw wei from the exchange contract back to the user. \n', '   * @param amount uint256 Wei amount to be withdrawn.\n', '   */\n', '  function withdraw(uint256 amount) public {\n', '    // Requester should have enough balance.\n', '    require(tokens[0x0][msg.sender] >= amount);\n', '  \n', '    // Substract the withdrawn wei amount from the user balance.\n', '    tokens[0x0][msg.sender] = tokens[0x0][msg.sender].sub(amount);\n', '\n', '    // Transfer the wei to the requester.\n', '    msg.sender.transfer(amount);\n', '\n', '    // Trigger the event.\n', '    Withdraw(0x0, msg.sender, amount, tokens[0x0][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Perform a new token deposit to the exchange contract.\n', '   * @dev Remember to call ERC20(address).approve(this, amount) or this contract will not\n', '   *      be able to do the transfer on your behalf.\n', '   * @param token  address Address of the deposited token contract\n', '   * @param amount uint256 Amount to be deposited\n', '   */\n', '  function depositToken(address token, uint256 amount)\n', '    public\n', '  {\n', '    // Should not deposit wei using this function and\n', '    // token contract address should be whitelisted.\n', '    require(token != 0x0 && whitelistedTokens[token]);\n', '      \n', '    // Only whitelisted users can make deposits.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Add the deposited token amount to the user balance.\n', '    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n', '    \n', '    // Transfer tokens from caller to this contract account.\n', '    require(ERC20(token).transferFrom(msg.sender, address(this), amount));\n', '  \n', '    // Trigger the event.    \n', '    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw the given token amount from the requester balance.\n', '   * @param token  address Address of the withdrawn token contract\n', '   * @param amount uint256 Amount of tokens to be withdrawn\n', '   */\n', '  function withdrawToken(address token, uint256 amount) public {\n', '    // Should not withdraw wei using this function.\n', '    require(token != 0x0);\n', '\n', '    // Requester should have enough balance.\n', '    require(tokens[token][msg.sender] >= amount);\n', '\n', '    // Substract the withdrawn token amount from the user balance.\n', '    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n', '    \n', '    // Transfer the tokens to the investor.\n', '    require(ERC20(token).transfer(msg.sender, amount));\n', '\n', '    // Trigger the event.\n', '    Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  /**\n', '   * @dev Check the balance of the given user in the given token.\n', '   * @param token address Address of the token contract\n', '   * @param user  address Address of the user whom balance will be queried\n', '   */\n', '  function balanceOf(address token, address user)\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return tokens[token][user];\n', '  }\n', '\n', '  /**\n', '   * @dev Place a new order to the this contract. \n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   */\n', '  function order(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce\n', '  )\n', '    public\n', '  {\n', '    // Order placer address should be whitelisted.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Order tokens addresses should be whitelisted. \n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Calculate the order hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Store the order.\n', '    orders[msg.sender][hash] = true;\n', '\n', '    // Trigger the event.\n', '    Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Cancel an existing order.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   */\n', '  function cancelOrder(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    public\n', '  {\n', '    // Calculate the order hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Ensure the message validity.\n', '    require(validateOrderHash(hash, msg.sender, v, r, s));\n', '    \n', '    // Fill the order to the requested amount.\n', '    orderFills[msg.sender][hash] = amountGet;\n', '\n', '    // Trigger the event.\n', '    Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n', '  }\n', '\n', '  /**\n', '   * @dev Perform a trade.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @param amount     uint256 Traded amount - in amountGet terms\n', '   */\n', '  function trade(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint256 amount \n', '  )\n', '    public\n', '  {\n', '    // Only whitelisted users can perform trades.\n', '    require(whitelistedUsers[msg.sender]);\n', '\n', '    // Only whitelisted tokens can be traded.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Expire block number should be greater than current block.\n', '    require(block.number <= expires);\n', '\n', '    // Calculate the trade hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '    // Validate the hash.\n', '    require(validateOrderHash(hash, user, v, r, s));\n', '\n', '    // Ensure that after the trade the ordered amount will not be excedeed.\n', '    require(SafeMath.add(orderFills[user][hash], amount) <= amountGet); \n', '    \n', '    // Add the traded amount to the order fill.\n', '    orderFills[user][hash] = orderFills[user][hash].add(amount);\n', '\n', '    // Trade balances.\n', '    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '    \n', '    // Trigger the event.\n', '    Trade(tokenGet, amount, tokenGive, SafeMath.mul(amountGive, amount).div(amountGet), user, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Check if the trade with provided parameters will pass or not.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @param amount     uint256\n', '   * @param sender     address\n', '   * @return bool\n', '   */\n', '  function testTrade(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint256 amount,\n', '    address sender\n', '  )\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    // Traders should be whitelisted.\n', '    require(whitelistedUsers[user] && whitelistedUsers[sender]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Sender should have at least the amount he wants to trade and \n', '    require(tokens[tokenGet][sender] >= amount);\n', '\n', '    // order should have available volume to fill.\n', '    return availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate the available volume for a given trade.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @param v          uint8\n', '   * @param r          bytes32\n', '   * @param s          bytes32\n', '   * @return uint256\n', '   */\n', '  function availableVolume(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    // User should be whitelisted.\n', '    require(whitelistedUsers[user]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Calculate the hash.\n', '    bytes32 hash = keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '\n', '    // If the order is not valid or the trade is expired early exit with 0.\n', '    if (!(validateOrderHash(hash, user, v, r, s) && block.number <= expires)) {\n', '      return 0;\n', '    }\n', '\n', '    // Condition is used for ensuring the the value returned is\n', "    //   - the maximum available balance of the user in tokenGet terms if the user can't fullfil all the order\n", '    //     - SafeMath.sub(amountGet, orderFills[user][hash])\n', '    //     - amountGet - amountAvailableForFill\n', '    //   - the available balance of the the user in tokenGet terms if the user has enough to fullfil all the order \n', '    //     - SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive) \n', '    //     - balanceGiveAvailable * amountGet / amountGive\n', '    //     - amountGet / amountGive represents the exchange rate \n', '    if (SafeMath.sub(amountGet, orderFills[user][hash]) < SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive)) {\n', '      return SafeMath.sub(amountGet, orderFills[user][hash]);\n', '    }\n', '\n', '    return SafeMath.mul(tokens[tokenGive][user], amountGet).div(amountGive);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the amount filled for the given order.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param expires    uint256\n', '   * @param nonce      uint256\n', '   * @param user       address\n', '   * @return uint256\n', '   */\n', '  function amountFilled(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    uint256 expires,\n', '    uint256 nonce,\n', '    address user\n', '  )\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    // User should be whitelisted.\n', '    require(whitelistedUsers[user]);\n', '\n', '    // Tokens should be whitelisted.\n', '    require(whitelistedTokens[tokenGet] && whitelistedTokens[tokenGive]);\n', '\n', '    // Return the amount filled for the given order.\n', '    return orderFills[user][keccak256(address(this), tokenGet, amountGet, tokenGive, amountGive, expires, nonce)];\n', '  }\n', '\n', '    /**\n', '   * @dev Trade balances of given tokens amounts between two users.\n', '   * @param tokenGet   address\n', '   * @param amountGet  uint256\n', '   * @param tokenGive  address\n', '   * @param amountGive uint256\n', '   * @param user       address\n', '   * @param amount     uint256\n', '   */\n', '  function tradeBalances(\n', '    address tokenGet,\n', '    uint256 amountGet,\n', '    address tokenGive,\n', '    uint256 amountGive,\n', '    address user,\n', '    uint256 amount\n', '  )\n', '    private\n', '  {\n', '    // Calculate the constant taxes.\n', '    uint256 feeMakeXfer = amount.mul(feeMake).div(1 ether);\n', '    uint256 feeTakeXfer = amount.mul(feeTake).div(1 ether);\n', '    uint256 feeRebateXfer = 0;\n', '    \n', '    // Calculate the tax according to account level.\n', '    if (accountLevelsAddr != 0x0) {\n', '      uint256 accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);\n', '      if (accountLevel == 1) {\n', '        feeRebateXfer = amount.mul(feeRebate).div(1 ether);\n', '      } else if (accountLevel == 2) {\n', '        feeRebateXfer = feeTakeXfer;\n', '      }\n', '    }\n', '\n', '    // Update the balances for both maker and taker and add the fee to the feeAccount.\n', '    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(feeTakeXfer));\n', '    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.add(feeRebateXfer).sub(feeMakeXfer));\n', '    tokens[tokenGet][feeAccount] = tokens[tokenGet][feeAccount].add(feeMakeXfer.add(feeTakeXfer).sub(feeRebateXfer));\n', '    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount).div(amountGet));\n', '    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount).div(amountGet));\n', '  }\n', '\n', '  /**\n', '   * @dev Validate an order hash.\n', '   * @param hash bytes32\n', '   * @param user address\n', '   * @param v    uint8\n', '   * @param r    bytes32\n', '   * @param s    bytes32\n', '   * @return bool\n', '   */\n', '  function validateOrderHash(\n', '    bytes32 hash,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  )\n', '    private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return (\n', '      orders[user][hash] ||\n', '      ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", hash), v, r, s) == user\n', '    );\n', '  }\n', '}']
