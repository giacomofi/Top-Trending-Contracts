['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract Erc20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev (from OpenZeppelin)\n', ' */\n', 'library LibSafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Safe a * b / c\n', '     */\n', '    function mulDiv(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\n', '        uint256 d = mul(a, b);\n', '        return div(d, c);\n', '    }\n', '}\n', '\n', '\n', 'contract OwnedToken {\n', '    using LibSafeMath for uint256;\n', '    \n', '    /**\n', '     * ERC20 info\n', '     */\n', '    string public name = &#39;Altty&#39;;\n', '    string public symbol = &#39;LTT&#39;;\n', '    uint8 public decimals = 18;\n', '    /**\n', '     * Allowence list\n', '     */\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    /**\n', '     * Count of token at each account\n', '     */\n', '    mapping(address => uint256) private shares;\n', '    /**\n', '     * Total amount\n', '     */\n', '    uint256 private shareCount_;\n', '    /**\n', '     * Owner (main admin)\n', '     */\n', '    address public owner = msg.sender;\n', '    /**\n', '     * List of admins\n', '     */\n', '    mapping(address => bool) public isAdmin;\n', '    /**\n', '     * List of address on hold\n', '     */\n', '    mapping(address => bool) public holded;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed owner, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Throws if not admin\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(isAdmin[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner\n', '     * @param newOwner The address to transfer ownership to\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0)); // if omittet addres, default is 0\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    /**\n', '     * Empower/fire admin\n', '     */\n', '    function empowerAdmin(address _user) onlyOwner public {\n', '        isAdmin[_user] = true;\n', '    }\n', '    function fireAdmin(address _user) onlyOwner public {\n', '        isAdmin[_user] = false;\n', '    }\n', '    /**\n', '     * Hold account\n', '     */\n', '    function hold(address _user) onlyOwner public {\n', '        holded[_user] = true;\n', '    }\n', '    /**\n', '     * Unhold account\n', '     */\n', '    function unhold(address _user) onlyOwner public {\n', '        holded[_user] = false;\n', '    }\n', '    \n', '    /**\n', '     * Edit token info\n', '     */\n', '    function setName(string _name)  onlyOwner public {\n', '        name = _name;\n', '    }\n', '    function setSymbol(string _symbol)  onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return shareCount_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query the the balance of\n', '     * @return An uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return shares[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal transfer tokens from one address to another\n', '     * @dev if adress is zero - mint or destroy tokens\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(!holded[_from]);\n', '        if(_from == address(0)) {\n', '            emit Mint(_to, _value);\n', '            shareCount_ =shareCount_.add(_value);\n', '        } else {\n', '            require(_value <= shares[_from]);\n', '            shares[_from] = shares[_from].sub(_value);\n', '        }\n', '        if(_to == address(0)) {\n', '            emit Burn(msg.sender, _value);\n', '            shareCount_ =shareCount_.sub(_value);\n', '        } else {\n', '            shares[_to] =shares[_to].add(_value);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return shareTransfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return shareTransfer(_from, _to, _value);\n', '    }\n', ' \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw ethereum for a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function withdraw(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= address(this).balance);\n', '        _to.transfer(_value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw token (assets of our contract) for a specified address\n', '     * @param token The address of token for transfer\n', '     * @param _to The address to transfer to\n', '     * @param amount The amount to be transferred\n', '     */\n', '    function withdrawToken(address token, address _to, uint256 amount) onlyOwner public returns (bool) {\n', '        require(token != address(0));\n', '        require(Erc20Basic(token).balanceOf(address(this)) >= amount);\n', '        bool transferOk = Erc20Basic(token).transfer(_to, amount);\n', '        require(transferOk);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TenderToken is OwnedToken {\n', '    // dividends\n', '    uint256 public price = 1 ether;\n', '    uint256 public sellComission = 2900; // 2.9%\n', '    uint256 public buyComission = 2900; // 2.9%\n', '    \n', '    // dividers\n', '    uint256 public priceUnits = 3 ether / 1000000; \n', '    uint256 public sellComissionUnits = 100000;\n', '    uint256 public buyComissionUnits = 100000;\n', '    \n', '    /**\n', '     * Orders structs\n', '     */\n', '    struct SellOrder {\n', '        address user; \n', '        uint256 shareNumber;\n', '    }\n', '    struct BuyOrder {\n', '        address user; \n', '        uint256 amountWei;\n', '    }\n', '    \n', '    /**\n', '     * Current orders list and total amounts in order\n', '     */\n', '    SellOrder[] internal sellOrder;\n', '    BuyOrder[] internal buyOrder;\n', '    uint256 public sellOrderTotal;\n', '    uint256 public buyOrderTotal;\n', '    \n', '\n', '    /**\n', '     * Magic buy-order create\n', '     * NB!!! big gas cost (non standart), see docs\n', '     */\n', '    function() public payable {\n', '        if(!isAdmin[msg.sender]) {\n', '            buyOrder.push(BuyOrder(msg.sender, msg.value));\n', '            buyOrderTotal += msg.value;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Magic sell-order create\n', '     */\n', '    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        if(_to == address(this)) {\n', '            sellOrder.push(SellOrder(msg.sender, _value));\n', '            sellOrderTotal += _value;\n', '        }\n', '        return super.shareTransfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Configurate current price/comissions\n', '     */\n', '    function setPrice(uint256 _price) onlyAdmin public {\n', '        price = _price;\n', '    }\n', '    function setSellComission(uint _sellComission) onlyOwner public {\n', '        sellComission = _sellComission;\n', '    }\n', '    function setBuyComission(uint _buyComission) onlyOwner public {\n', '        buyComission = _buyComission;\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculate default price for selected number of shares\n', '     * @param shareNumber number of shares\n', '     * @return amount\n', '     */\n', '    function shareToWei(uint256 shareNumber) public view returns (uint256) {\n', '        uint256 amountWei = shareNumber.mulDiv(price, priceUnits);\n', '        uint256 comissionWei = amountWei.mulDiv(sellComission, sellComissionUnits);\n', '        return amountWei.sub(comissionWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate count of shares what can buy with selected amount for default price\n', '     * @param amountWei amount for buy share\n', '     * @return number of shares\n', '     */\n', '    function weiToShare(uint256 amountWei) public view returns (uint256) {\n', '        uint256 shareNumber = amountWei.mulDiv(priceUnits, price);\n', '        uint256 comissionShare = shareNumber.mulDiv(buyComission, buyComissionUnits);\n', '        return shareNumber.sub(comissionShare);\n', '    }\n', '    \n', '    /**\n', '     * Confirm all buys\n', '     */\n', '    function confirmAllBuys() external onlyAdmin {\n', '        while(buyOrder.length > 0) {\n', '            _confirmOneBuy();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Confirm all sells\n', '     */\n', '    function confirmAllSells() external onlyAdmin {\n', '        while(sellOrder.length > 0) {\n', '            _confirmOneSell();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Confirm one sell/buy (for problems fix)\n', '     */\n', '    function confirmOneBuy() external onlyAdmin {\n', '        if(buyOrder.length > 0) {\n', '            _confirmOneBuy();\n', '        }\n', '    }\n', '    function confirmOneSell() external onlyAdmin {\n', '        _confirmOneSell();\n', '    }\n', '    \n', '    /**\n', '     * Cancel one sell (for problem fix)\n', '     */\n', '    function cancelOneSell() internal {\n', '        uint256 i = sellOrder.length-1;\n', '        shareTransfer(address(this), sellOrder[i].user, sellOrder[i].shareNumber);\n', '        sellOrderTotal -= sellOrder[i].shareNumber;\n', '        delete sellOrder[sellOrder.length-1];\n', '        sellOrder.length--;\n', '    }\n', '    \n', '    /**\n', '     * Internal buy/sell\n', '     */\n', '    function _confirmOneBuy() internal {\n', '        uint256 i = buyOrder.length-1;\n', '        uint256 amountWei = buyOrder[i].amountWei;\n', '        uint256 shareNumber = weiToShare(amountWei);\n', '        address user = buyOrder[i].user;\n', '        shareTransfer(address(0), user, shareNumber);\n', '        buyOrderTotal -= amountWei;\n', '        delete buyOrder[buyOrder.length-1];\n', '        buyOrder.length--;\n', '    }\n', '    function _confirmOneSell() internal {\n', '        uint256 i = sellOrder.length-1;\n', '        uint256 shareNumber = sellOrder[i].shareNumber;\n', '        uint256 amountWei = shareToWei(shareNumber);\n', '        address user = sellOrder[i].user;\n', '        shareTransfer(address(this), address(0), shareNumber);\n', '        sellOrderTotal -= shareNumber;\n', '        user.transfer(amountWei);\n', '        delete sellOrder[sellOrder.length-1];\n', '        sellOrder.length--;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract Erc20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev (from OpenZeppelin)\n', ' */\n', 'library LibSafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Safe a * b / c\n', '     */\n', '    function mulDiv(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\n', '        uint256 d = mul(a, b);\n', '        return div(d, c);\n', '    }\n', '}\n', '\n', '\n', 'contract OwnedToken {\n', '    using LibSafeMath for uint256;\n', '    \n', '    /**\n', '     * ERC20 info\n', '     */\n', "    string public name = 'Altty';\n", "    string public symbol = 'LTT';\n", '    uint8 public decimals = 18;\n', '    /**\n', '     * Allowence list\n', '     */\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    /**\n', '     * Count of token at each account\n', '     */\n', '    mapping(address => uint256) private shares;\n', '    /**\n', '     * Total amount\n', '     */\n', '    uint256 private shareCount_;\n', '    /**\n', '     * Owner (main admin)\n', '     */\n', '    address public owner = msg.sender;\n', '    /**\n', '     * List of admins\n', '     */\n', '    mapping(address => bool) public isAdmin;\n', '    /**\n', '     * List of address on hold\n', '     */\n', '    mapping(address => bool) public holded;\n', '\n', '    /**\n', '     * Events\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed owner, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Throws if not admin\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(isAdmin[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner\n', '     * @param newOwner The address to transfer ownership to\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0)); // if omittet addres, default is 0\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    /**\n', '     * Empower/fire admin\n', '     */\n', '    function empowerAdmin(address _user) onlyOwner public {\n', '        isAdmin[_user] = true;\n', '    }\n', '    function fireAdmin(address _user) onlyOwner public {\n', '        isAdmin[_user] = false;\n', '    }\n', '    /**\n', '     * Hold account\n', '     */\n', '    function hold(address _user) onlyOwner public {\n', '        holded[_user] = true;\n', '    }\n', '    /**\n', '     * Unhold account\n', '     */\n', '    function unhold(address _user) onlyOwner public {\n', '        holded[_user] = false;\n', '    }\n', '    \n', '    /**\n', '     * Edit token info\n', '     */\n', '    function setName(string _name)  onlyOwner public {\n', '        name = _name;\n', '    }\n', '    function setSymbol(string _symbol)  onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return shareCount_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query the the balance of\n', '     * @return An uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return shares[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal transfer tokens from one address to another\n', '     * @dev if adress is zero - mint or destroy tokens\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(!holded[_from]);\n', '        if(_from == address(0)) {\n', '            emit Mint(_to, _value);\n', '            shareCount_ =shareCount_.add(_value);\n', '        } else {\n', '            require(_value <= shares[_from]);\n', '            shares[_from] = shares[_from].sub(_value);\n', '        }\n', '        if(_to == address(0)) {\n', '            emit Burn(msg.sender, _value);\n', '            shareCount_ =shareCount_.sub(_value);\n', '        } else {\n', '            shares[_to] =shares[_to].add(_value);\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return shareTransfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return shareTransfer(_from, _to, _value);\n', '    }\n', ' \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw ethereum for a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function withdraw(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= address(this).balance);\n', '        _to.transfer(_value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw token (assets of our contract) for a specified address\n', '     * @param token The address of token for transfer\n', '     * @param _to The address to transfer to\n', '     * @param amount The amount to be transferred\n', '     */\n', '    function withdrawToken(address token, address _to, uint256 amount) onlyOwner public returns (bool) {\n', '        require(token != address(0));\n', '        require(Erc20Basic(token).balanceOf(address(this)) >= amount);\n', '        bool transferOk = Erc20Basic(token).transfer(_to, amount);\n', '        require(transferOk);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TenderToken is OwnedToken {\n', '    // dividends\n', '    uint256 public price = 1 ether;\n', '    uint256 public sellComission = 2900; // 2.9%\n', '    uint256 public buyComission = 2900; // 2.9%\n', '    \n', '    // dividers\n', '    uint256 public priceUnits = 3 ether / 1000000; \n', '    uint256 public sellComissionUnits = 100000;\n', '    uint256 public buyComissionUnits = 100000;\n', '    \n', '    /**\n', '     * Orders structs\n', '     */\n', '    struct SellOrder {\n', '        address user; \n', '        uint256 shareNumber;\n', '    }\n', '    struct BuyOrder {\n', '        address user; \n', '        uint256 amountWei;\n', '    }\n', '    \n', '    /**\n', '     * Current orders list and total amounts in order\n', '     */\n', '    SellOrder[] internal sellOrder;\n', '    BuyOrder[] internal buyOrder;\n', '    uint256 public sellOrderTotal;\n', '    uint256 public buyOrderTotal;\n', '    \n', '\n', '    /**\n', '     * Magic buy-order create\n', '     * NB!!! big gas cost (non standart), see docs\n', '     */\n', '    function() public payable {\n', '        if(!isAdmin[msg.sender]) {\n', '            buyOrder.push(BuyOrder(msg.sender, msg.value));\n', '            buyOrderTotal += msg.value;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Magic sell-order create\n', '     */\n', '    function shareTransfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        if(_to == address(this)) {\n', '            sellOrder.push(SellOrder(msg.sender, _value));\n', '            sellOrderTotal += _value;\n', '        }\n', '        return super.shareTransfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Configurate current price/comissions\n', '     */\n', '    function setPrice(uint256 _price) onlyAdmin public {\n', '        price = _price;\n', '    }\n', '    function setSellComission(uint _sellComission) onlyOwner public {\n', '        sellComission = _sellComission;\n', '    }\n', '    function setBuyComission(uint _buyComission) onlyOwner public {\n', '        buyComission = _buyComission;\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculate default price for selected number of shares\n', '     * @param shareNumber number of shares\n', '     * @return amount\n', '     */\n', '    function shareToWei(uint256 shareNumber) public view returns (uint256) {\n', '        uint256 amountWei = shareNumber.mulDiv(price, priceUnits);\n', '        uint256 comissionWei = amountWei.mulDiv(sellComission, sellComissionUnits);\n', '        return amountWei.sub(comissionWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate count of shares what can buy with selected amount for default price\n', '     * @param amountWei amount for buy share\n', '     * @return number of shares\n', '     */\n', '    function weiToShare(uint256 amountWei) public view returns (uint256) {\n', '        uint256 shareNumber = amountWei.mulDiv(priceUnits, price);\n', '        uint256 comissionShare = shareNumber.mulDiv(buyComission, buyComissionUnits);\n', '        return shareNumber.sub(comissionShare);\n', '    }\n', '    \n', '    /**\n', '     * Confirm all buys\n', '     */\n', '    function confirmAllBuys() external onlyAdmin {\n', '        while(buyOrder.length > 0) {\n', '            _confirmOneBuy();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Confirm all sells\n', '     */\n', '    function confirmAllSells() external onlyAdmin {\n', '        while(sellOrder.length > 0) {\n', '            _confirmOneSell();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Confirm one sell/buy (for problems fix)\n', '     */\n', '    function confirmOneBuy() external onlyAdmin {\n', '        if(buyOrder.length > 0) {\n', '            _confirmOneBuy();\n', '        }\n', '    }\n', '    function confirmOneSell() external onlyAdmin {\n', '        _confirmOneSell();\n', '    }\n', '    \n', '    /**\n', '     * Cancel one sell (for problem fix)\n', '     */\n', '    function cancelOneSell() internal {\n', '        uint256 i = sellOrder.length-1;\n', '        shareTransfer(address(this), sellOrder[i].user, sellOrder[i].shareNumber);\n', '        sellOrderTotal -= sellOrder[i].shareNumber;\n', '        delete sellOrder[sellOrder.length-1];\n', '        sellOrder.length--;\n', '    }\n', '    \n', '    /**\n', '     * Internal buy/sell\n', '     */\n', '    function _confirmOneBuy() internal {\n', '        uint256 i = buyOrder.length-1;\n', '        uint256 amountWei = buyOrder[i].amountWei;\n', '        uint256 shareNumber = weiToShare(amountWei);\n', '        address user = buyOrder[i].user;\n', '        shareTransfer(address(0), user, shareNumber);\n', '        buyOrderTotal -= amountWei;\n', '        delete buyOrder[buyOrder.length-1];\n', '        buyOrder.length--;\n', '    }\n', '    function _confirmOneSell() internal {\n', '        uint256 i = sellOrder.length-1;\n', '        uint256 shareNumber = sellOrder[i].shareNumber;\n', '        uint256 amountWei = shareToWei(shareNumber);\n', '        address user = sellOrder[i].user;\n', '        shareTransfer(address(this), address(0), shareNumber);\n', '        sellOrderTotal -= shareNumber;\n', '        user.transfer(amountWei);\n', '        delete sellOrder[sellOrder.length-1];\n', '        sellOrder.length--;\n', '    }\n', '}']
