['pragma solidity 0.4.25;\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    /*\n', '    *  Adds two numbers, throws on overflow.\n', '    */\n', '    function safeAdd(uint256 x, uint256 y) pure  internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) revert();\n', '        return x + y;\n', '    }\n', '    /*\n', '     *  Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y)  revert();\n', '        return x - y;\n', '    }\n', '}\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function totalSupply()public constant returns (uint256 _supply);\n', '  function name() public constant returns (string _name);\n', '  function symbol()public constant returns (string _symbol);\n', '}\n', 'contract WCG is SafeMath{\n', '    address owner;\n', '    //The token holds to the message\n', '   struct userToken{\n', '        address buyer;\n', '        uint currentPrice;\n', '        uint _token;\n', '        uint totalToKenPrice;\n', '        uint charge;\n', '        uint totalBuyPrice;\n', '    }\n', '    userToken[] _userTokenInfo;\n', '    mapping(address => userToken[]) private userTokenInfos; \n', '    mapping(address => uint256) private balances;\n', '    //Bonus pools\n', '    mapping(address => uint256) private bonusPools;\n', '    //capital pool \n', '    mapping(address => uint256) private capitalPool;\n', '    string public name = "wcg";\n', '    string public symbol = "WCG";\n', '    uint256 public totalSupply = 0;\n', '    \n', '    uint constant initPrice = 0.01 ether;\n', '    uint private presellUpToTime;\n', '    uint  private presellToKenAmount;\n', '    event transfer(address addr,address contractAddr,uint token,uint totalSupply);\n', '  modifier onlyOwner(){\n', '       require(msg.sender == owner);\n', '        _;\n', '  }\n', '  modifier upToTime(){\n', '      require(now < presellUpToTime);\n', '      _;\n', '  }\n', '  function getUserTokenInfosLength()public view returns(uint length){\n', '      length = _userTokenInfo.length;\n', '  }\n', '  \n', '  function getUserTokenInfos(address contractAddr,uint index)public view returns(address buyer,uint currentPrice,uint _token,uint totalToKenPrice,uint charge,uint totalBuyPrice){\n', '     userToken storage _userToKen = userTokenInfos[contractAddr][index];\n', '     buyer = _userToKen.buyer;\n', '     currentPrice = _userToKen.currentPrice;\n', '     _token = _userToKen._token;\n', '     totalToKenPrice = _userToKen.totalToKenPrice;\n', '     charge = _userToKen.charge;\n', '     totalBuyPrice = _userToKen.totalBuyPrice;\n', '  }\n', '  constructor(uint _presellToKen,uint _presellUpToTime)public{\n', '      presellUpToTime = now + (_presellUpToTime * 1 days);\n', '      owner = msg.sender;\n', '      presellToKenAmount = EthTurnWCG(_presellToKen);\n', '  }\n', '  //Buy WCG\n', '  function buyToKen(uint _token)public payable upToTime{\n', '      uint totalToKenPrice = buyPrice(_token);\n', '      uint charge = computingCharge(totalToKenPrice);\n', '      if( msg.value < totalToKenPrice+charge)revert();\n', '      bonusPools[this] = safeAdd(bonusPools[this],charge);\n', '      capitalPool[this] = safeAdd(capitalPool[this],totalToKenPrice);\n', '      address(this).transfer(msg.value);\n', '      balances[this] = safeAdd(balances[this],msg.value);\n', '      _userTokenInfo.push(userToken(msg.sender,currentPrice(),_token,totalToKenPrice,charge,totalToKenPrice+charge));\n', '      totalSupply =  safeAdd(totalSupply,_token);\n', '      balances[msg.sender] = safeAdd(balances[msg.sender],_token);\n', '      userTokenInfos[this] = _userTokenInfo;\n', '      emit transfer(msg.sender,address(this),_token,totalSupply);\n', '  }\n', '  \n', '  function()public payable{}\n', '  function EthTurnWCG(uint eth)public pure returns(uint){\n', '      return eth * 1e18 / initPrice;\n', '  }\n', '  function currentPrice()public pure returns(uint){\n', '      return initPrice;\n', '  }\n', '  function buyPrice(uint _token)public pure returns(uint){\n', '      return  _token * currentPrice();\n', '  }\n', '  function computingCharge(uint price)public pure returns(uint){\n', '      return price / 10;\n', '  }\n', '  function getPresellToKenAmount()public view returns(uint){\n', '      return presellToKenAmount;\n', '  }\n', '  function getPresellUpToTime()public constant returns(uint){\n', '      return presellUpToTime;\n', '  }\n', '  function capitalPoolOf(address who) public constant returns (uint){\n', '      return capitalPool[who];\n', '  }\n', '  function bonusPoolsOf(address who) public constant returns (uint){\n', '      return bonusPools[who];\n', '  }\n', '  function balanceOf(address who) public constant returns (uint){\n', '      return balances[who];\n', '  }\n', '  function totalSupply()public constant returns (uint256 _supply){\n', '      return totalSupply;\n', '  }\n', '\n', '  function destroy()public onlyOwner {\n', '      selfdestruct(owner);\n', '  }\n', '\n', '}']