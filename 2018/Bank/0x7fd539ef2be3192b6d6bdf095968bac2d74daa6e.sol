['pragma solidity ^0.4.18;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/*\n', '    Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() public {\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '    Bancor Gas Price Limit interface\n', '*/\n', 'contract IBancorGasPriceLimit {\n', '    function gasPrice() public view returns (uint256) {}\n', '}\n', '\n', '\n', '/*\n', '    The BancorGasPriceLimit contract serves as an extra front-running attack mitigation mechanism.\n', '    It sets a maximum gas price on all bancor conversions, which prevents users from "cutting in line"\n', '    in order to front-run other transactions.\n', '    The gas price limit is universal to all converters and it can be updated by the owner to be in line\n', '    with the network&#39;s current gas price.\n', '*/\n', 'contract BancorGasPriceLimit is IBancorGasPriceLimit, Owned, Utils {\n', '    uint256 public gasPrice = 0 wei;    // maximum gas price for bancor transactions\n', '\n', '    /**\n', '        @dev constructor\n', '\n', '        @param _gasPrice    gas price limit\n', '    */\n', '    function BancorGasPriceLimit(uint256 _gasPrice)\n', '        public\n', '        greaterThanZero(_gasPrice)\n', '    {\n', '        gasPrice = _gasPrice;\n', '    }\n', '\n', '    /*\n', '        @dev gas price getter\n', '\n', '        @return the current gas price\n', '    */\n', '    function gasPrice() public view returns (uint256) {\n', '        validateGasPrice(tx.gasprice);\n', '        return gasPrice;\n', '    }\n', '\n', '    /*\n', '        @dev allows the owner to update the gas price limit\n', '\n', '        @param _gasPrice    new gas price limit\n', '    */\n', '    function setGasPrice(uint256 _gasPrice)\n', '        public\n', '        ownerOnly\n', '        greaterThanZero(_gasPrice)\n', '    {\n', '        gasPrice = _gasPrice;\n', '    }\n', '\n', '    /*\n', '        @dev validate that the given gas price is equal to the current network gas price\n', '\n', '        @param _gasPrice    tested gas price\n', '    */\n', '    function validateGasPrice(uint256 _gasPrice)\n', '        public\n', '        view\n', '        greaterThanZero(_gasPrice)\n', '    {\n', '        require(_gasPrice == gasPrice);\n', '    }\n', '}']