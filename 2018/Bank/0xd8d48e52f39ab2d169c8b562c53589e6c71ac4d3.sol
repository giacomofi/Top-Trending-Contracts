['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * ERC-20 Token Standard\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract Token {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * Interface for trading discounts and rebates for specific accounts\n', ' */\n', 'contract FeeModifiersInterface {\n', '    function accountFeeModifiers(address _user) public view returns (uint256 feeDiscount, uint256 feeRebate);\n', '    function tradingFeeModifiers(address _maker, address _taker) public view returns (uint256 feeMakeDiscount, uint256 feeTakeDiscount, uint256 feeRebate);\n', '}\n', '\n', '\n', '/**\n', ' * Interface for trade tracker to handle trade event\n', ' */\n', 'contract TradeTrackerInterface {\n', '    function tradeEventHandler(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, address _user, bytes32 _orderHash, uint256 _gasLimit) public;\n', '}\n', '\n', '\n', 'contract ETHERCExchange is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // the trade tracker address\n', '    address public tradeTracker;\n', '    // the contract which stores fee discounts/rebates\n', '    address public feeModifiers;\n', '    // the account that will receive fees\n', '    address public feeAccount;\n', '    // maker fee percentage times (1 ether)\n', '    uint256 public feeMake;\n', '    // taker fee percentage times (1 ether) \n', '    uint256 public feeTake;\n', '\n', '    // mapping of token addresses to mapping of account balances\n', '    mapping (address => mapping (address => uint256)) public tokens;\n', '    // mapping of order hash to status cancelled\n', '    mapping (bytes32 => bool) public cancelledOrders;\n', '    // mapping order hashes to uints (amount of order that has been filled)\n', '    mapping (bytes32 => uint256) public orderFills;\n', '\n', '    //Logging events\n', '    event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '    event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '    event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address maker, uint8 v, bytes32 r, bytes32 s, bytes32 orderHash, uint256 amountFilled);\n', '    event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address maker, address taker, bytes32 orderHash);\n', '\n', '    function ETHERCExchange() public {\n', '        feeAccount = owner;\n', '    }\n', '\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Fee Discounts, Rebates\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function getAccountFeeModifiers(address _user) public view returns(uint256 feeDiscount, uint256 feeRebate) {\n', '        if (feeModifiers != address(0)) {\n', '            (feeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).accountFeeModifiers(_user);\n', '        }\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Funds\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function deposit() public payable {\n', '        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n', '        Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n', '    }\n', '\n', '    function depositToken(address _token, uint256 _amount) public {\n', '        require(_token != address(0));\n', '\n', '        if (!Token(_token).transferFrom(msg.sender, this, _amount)) revert();\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\n', '        Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public {\n', '        require(tokens[address(0)][msg.sender] >= _amount);\n', '\n', '        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(_amount);\n', '        msg.sender.transfer(_amount);\n', '        Withdraw(address(0), msg.sender, _amount, tokens[address(0)][msg.sender]);\n', '    }\n', '\n', '    function withdrawToken(address _token, uint256 _amount) public {\n', '        require(_token != address(0));\n', '        require(tokens[_token][msg.sender] >= _amount);\n', '\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\n', '        if (!Token(_token).transfer(msg.sender, _amount)) revert();\n', '        Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function balanceOf(address _token, address _user) public view returns (uint256) {\n', '        return tokens[_token][_user];\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Trading & Order\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function trade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade) public {\n', '        uint256 executionGasLimit = msg.gas;\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != _maker ||\n', '            cancelledOrders[orderHash] ||\n', '            block.number > _expires ||\n', '            orderFills[orderHash].add(_amountTrade) > _amountGet\n', '        ) revert();\n', '\n', '        tradeBalances(_tokenGet, _amountGet, _tokenGive, _amountGive, _maker, _amountTrade);\n', '        orderFills[orderHash] = orderFills[orderHash].add(_amountTrade);\n', '        uint256 amountTradeGive = _amountGive.mul(_amountTrade) / _amountGet;\n', '        if(tradeTracker != address(0)){\n', '            TradeTrackerInterface(tradeTracker).tradeEventHandler(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash, executionGasLimit);\n', '        }\n', '        Trade(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash);\n', '    }\n', '\n', '    function tradeBalances(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, uint256 _amountTrade) private {\n', '        uint256 feeMakeValue = _amountTrade.mul(feeMake) / (1 ether);\n', '        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\n', '        uint256 feeRebateValue = 0;\n', '\n', '        if (feeModifiers != address(0)) {\n', '            uint256 feeMakeDiscount; uint256 feeTakeDiscount; uint256 feeRebate;\n', '            (feeMakeDiscount, feeTakeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).tradingFeeModifiers(_maker, msg.sender);\n', '            if (feeMakeValue > 0 && feeMakeDiscount > 0 && feeMakeDiscount <= 100 ) feeMakeValue = feeMakeValue.mul(100 - feeMakeDiscount) / 100;\n', '            if (feeTakeValue > 0 && feeTakeDiscount > 0 && feeTakeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeTakeDiscount) / 100;\n', '            if (feeTakeValue > 0 && feeRebate > 0 && feeRebate <= 100) feeRebateValue = feeTakeValue.mul(feeRebate) / 100;\n', '        }\n', '\n', '        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountTrade.add(feeTakeValue));\n', '        tokens[_tokenGet][_maker] = tokens[_tokenGet][_maker].add(_amountTrade.sub(feeMakeValue).add(feeRebateValue));\n', '        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive.mul(_amountTrade) / _amountGet);\n', '        tokens[_tokenGive][_maker] = tokens[_tokenGive][_maker].sub(_amountGive.mul(_amountTrade) / _amountGet);\n', '        tokens[_tokenGet][feeAccount] = tokens[_tokenGet][feeAccount].add(feeMakeValue.add(feeTakeValue).sub(feeRebateValue));\n', '    }\n', '\n', '    function validateTrade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade, address _taker) public view returns (uint8) {\n', '        uint256 feeTakeValue = calculateTakerFee(_taker, _amountTrade);\n', '\n', '        if (_amountTrade.add(feeTakeValue) > tokens[_tokenGet][_taker]) return 1;\n', '        if (availableVolume(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker, _v, _r, _s) < _amountTrade) return 2;\n', '        return 0;\n', '    }\n', '\n', '    function calculateTakerFee(address _taker, uint256 _amountTrade) public view returns (uint256) {\n', '        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\n', '\n', '        uint256 feeDiscount; uint256 feeRebate;\n', '        (feeDiscount, feeRebate) = getAccountFeeModifiers(_taker);\n', '        if (feeTakeValue > 0 && feeDiscount > 0 && feeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeDiscount) / 100;\n', '\n', '        return feeTakeValue;\n', '    }\n', '\n', '    function getOrderHash(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (bytes32) {\n', '        return keccak256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '    }\n', '\n', '    function availableVolume(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s) public view returns (uint256) {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != _maker ||\n', '            cancelledOrders[orderHash] ||\n', '            block.number > _expires ||\n', '            _amountGet <= orderFills[orderHash]\n', '        ) return 0;\n', '\n', '        uint256[2] memory available;\n', '        available[0] = _amountGet.sub(orderFills[orderHash]);\n', '        available[1] = tokens[_tokenGive][_maker].mul(_amountGet) / _amountGive;\n', '        if (available[0] < available[1]) return available[0];\n', '        return available[1];\n', '    }\n', '\n', '    function amountFilled(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (uint256) {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '        return orderFills[orderHash];\n', '    }\n', '\n', '    function cancelOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender);\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != msg.sender) revert();\n', '\n', '        cancelledOrders[orderHash] = true;\n', '        Cancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender, _v, _r, _s, orderHash, orderFills[orderHash]);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Setting\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function changeFeeAccount(address _feeAccount) public onlyOwner {\n', '        require(_feeAccount != address(0));\n', '        feeAccount = _feeAccount;\n', '    }\n', '\n', '    function changeFeeMake(uint256 _feeMake) public onlyOwner {\n', '        require(_feeMake != feeMake);\n', '        feeMake = _feeMake;\n', '    }\n', '\n', '    function changeFeeTake(uint256 _feeTake) public onlyOwner {\n', '        require(_feeTake != feeTake);\n', '        feeTake = _feeTake;\n', '    }\n', '\n', '    function changeFeeModifiers(address _feeModifiers) public onlyOwner {\n', '        require(feeModifiers != _feeModifiers);\n', '        feeModifiers = _feeModifiers;\n', '    }\n', '\n', '    function changeTradeTracker(address _tradeTracker) public onlyOwner {\n', '        require(tradeTracker != _tradeTracker);\n', '        tradeTracker = _tradeTracker;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * ERC-20 Token Standard\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract Token {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * Interface for trading discounts and rebates for specific accounts\n', ' */\n', 'contract FeeModifiersInterface {\n', '    function accountFeeModifiers(address _user) public view returns (uint256 feeDiscount, uint256 feeRebate);\n', '    function tradingFeeModifiers(address _maker, address _taker) public view returns (uint256 feeMakeDiscount, uint256 feeTakeDiscount, uint256 feeRebate);\n', '}\n', '\n', '\n', '/**\n', ' * Interface for trade tracker to handle trade event\n', ' */\n', 'contract TradeTrackerInterface {\n', '    function tradeEventHandler(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, address _user, bytes32 _orderHash, uint256 _gasLimit) public;\n', '}\n', '\n', '\n', 'contract ETHERCExchange is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // the trade tracker address\n', '    address public tradeTracker;\n', '    // the contract which stores fee discounts/rebates\n', '    address public feeModifiers;\n', '    // the account that will receive fees\n', '    address public feeAccount;\n', '    // maker fee percentage times (1 ether)\n', '    uint256 public feeMake;\n', '    // taker fee percentage times (1 ether) \n', '    uint256 public feeTake;\n', '\n', '    // mapping of token addresses to mapping of account balances\n', '    mapping (address => mapping (address => uint256)) public tokens;\n', '    // mapping of order hash to status cancelled\n', '    mapping (bytes32 => bool) public cancelledOrders;\n', '    // mapping order hashes to uints (amount of order that has been filled)\n', '    mapping (bytes32 => uint256) public orderFills;\n', '\n', '    //Logging events\n', '    event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '    event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '    event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address maker, uint8 v, bytes32 r, bytes32 s, bytes32 orderHash, uint256 amountFilled);\n', '    event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address maker, address taker, bytes32 orderHash);\n', '\n', '    function ETHERCExchange() public {\n', '        feeAccount = owner;\n', '    }\n', '\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Fee Discounts, Rebates\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function getAccountFeeModifiers(address _user) public view returns(uint256 feeDiscount, uint256 feeRebate) {\n', '        if (feeModifiers != address(0)) {\n', '            (feeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).accountFeeModifiers(_user);\n', '        }\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Funds\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function deposit() public payable {\n', '        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n', '        Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n', '    }\n', '\n', '    function depositToken(address _token, uint256 _amount) public {\n', '        require(_token != address(0));\n', '\n', '        if (!Token(_token).transferFrom(msg.sender, this, _amount)) revert();\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\n', '        Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public {\n', '        require(tokens[address(0)][msg.sender] >= _amount);\n', '\n', '        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(_amount);\n', '        msg.sender.transfer(_amount);\n', '        Withdraw(address(0), msg.sender, _amount, tokens[address(0)][msg.sender]);\n', '    }\n', '\n', '    function withdrawToken(address _token, uint256 _amount) public {\n', '        require(_token != address(0));\n', '        require(tokens[_token][msg.sender] >= _amount);\n', '\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\n', '        if (!Token(_token).transfer(msg.sender, _amount)) revert();\n', '        Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function balanceOf(address _token, address _user) public view returns (uint256) {\n', '        return tokens[_token][_user];\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Trading & Order\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function trade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade) public {\n', '        uint256 executionGasLimit = msg.gas;\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != _maker ||\n', '            cancelledOrders[orderHash] ||\n', '            block.number > _expires ||\n', '            orderFills[orderHash].add(_amountTrade) > _amountGet\n', '        ) revert();\n', '\n', '        tradeBalances(_tokenGet, _amountGet, _tokenGive, _amountGive, _maker, _amountTrade);\n', '        orderFills[orderHash] = orderFills[orderHash].add(_amountTrade);\n', '        uint256 amountTradeGive = _amountGive.mul(_amountTrade) / _amountGet;\n', '        if(tradeTracker != address(0)){\n', '            TradeTrackerInterface(tradeTracker).tradeEventHandler(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash, executionGasLimit);\n', '        }\n', '        Trade(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash);\n', '    }\n', '\n', '    function tradeBalances(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, uint256 _amountTrade) private {\n', '        uint256 feeMakeValue = _amountTrade.mul(feeMake) / (1 ether);\n', '        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\n', '        uint256 feeRebateValue = 0;\n', '\n', '        if (feeModifiers != address(0)) {\n', '            uint256 feeMakeDiscount; uint256 feeTakeDiscount; uint256 feeRebate;\n', '            (feeMakeDiscount, feeTakeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).tradingFeeModifiers(_maker, msg.sender);\n', '            if (feeMakeValue > 0 && feeMakeDiscount > 0 && feeMakeDiscount <= 100 ) feeMakeValue = feeMakeValue.mul(100 - feeMakeDiscount) / 100;\n', '            if (feeTakeValue > 0 && feeTakeDiscount > 0 && feeTakeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeTakeDiscount) / 100;\n', '            if (feeTakeValue > 0 && feeRebate > 0 && feeRebate <= 100) feeRebateValue = feeTakeValue.mul(feeRebate) / 100;\n', '        }\n', '\n', '        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountTrade.add(feeTakeValue));\n', '        tokens[_tokenGet][_maker] = tokens[_tokenGet][_maker].add(_amountTrade.sub(feeMakeValue).add(feeRebateValue));\n', '        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive.mul(_amountTrade) / _amountGet);\n', '        tokens[_tokenGive][_maker] = tokens[_tokenGive][_maker].sub(_amountGive.mul(_amountTrade) / _amountGet);\n', '        tokens[_tokenGet][feeAccount] = tokens[_tokenGet][feeAccount].add(feeMakeValue.add(feeTakeValue).sub(feeRebateValue));\n', '    }\n', '\n', '    function validateTrade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade, address _taker) public view returns (uint8) {\n', '        uint256 feeTakeValue = calculateTakerFee(_taker, _amountTrade);\n', '\n', '        if (_amountTrade.add(feeTakeValue) > tokens[_tokenGet][_taker]) return 1;\n', '        if (availableVolume(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker, _v, _r, _s) < _amountTrade) return 2;\n', '        return 0;\n', '    }\n', '\n', '    function calculateTakerFee(address _taker, uint256 _amountTrade) public view returns (uint256) {\n', '        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\n', '\n', '        uint256 feeDiscount; uint256 feeRebate;\n', '        (feeDiscount, feeRebate) = getAccountFeeModifiers(_taker);\n', '        if (feeTakeValue > 0 && feeDiscount > 0 && feeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeDiscount) / 100;\n', '\n', '        return feeTakeValue;\n', '    }\n', '\n', '    function getOrderHash(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (bytes32) {\n', '        return keccak256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '    }\n', '\n', '    function availableVolume(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s) public view returns (uint256) {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != _maker ||\n', '            cancelledOrders[orderHash] ||\n', '            block.number > _expires ||\n', '            _amountGet <= orderFills[orderHash]\n', '        ) return 0;\n', '\n', '        uint256[2] memory available;\n', '        available[0] = _amountGet.sub(orderFills[orderHash]);\n', '        available[1] = tokens[_tokenGive][_maker].mul(_amountGet) / _amountGive;\n', '        if (available[0] < available[1]) return available[0];\n', '        return available[1];\n', '    }\n', '\n', '    function amountFilled(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (uint256) {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\n', '        return orderFills[orderHash];\n', '    }\n', '\n', '    function cancelOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public {\n', '        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender);\n', '        if (ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", orderHash), _v, _r, _s) != msg.sender) revert();\n', '\n', '        cancelledOrders[orderHash] = true;\n', '        Cancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender, _v, _r, _s, orderHash, orderFills[orderHash]);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '    // Setting\n', '    ////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function changeFeeAccount(address _feeAccount) public onlyOwner {\n', '        require(_feeAccount != address(0));\n', '        feeAccount = _feeAccount;\n', '    }\n', '\n', '    function changeFeeMake(uint256 _feeMake) public onlyOwner {\n', '        require(_feeMake != feeMake);\n', '        feeMake = _feeMake;\n', '    }\n', '\n', '    function changeFeeTake(uint256 _feeTake) public onlyOwner {\n', '        require(_feeTake != feeTake);\n', '        feeTake = _feeTake;\n', '    }\n', '\n', '    function changeFeeModifiers(address _feeModifiers) public onlyOwner {\n', '        require(feeModifiers != _feeModifiers);\n', '        feeModifiers = _feeModifiers;\n', '    }\n', '\n', '    function changeTradeTracker(address _tradeTracker) public onlyOwner {\n', '        require(tradeTracker != _tradeTracker);\n', '        tradeTracker = _tradeTracker;\n', '    }\n', '}']
