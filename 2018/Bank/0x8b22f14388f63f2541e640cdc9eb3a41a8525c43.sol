['pragma solidity ^0.4.24;\n', '\n', '// import { ERC20 as Token } from "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";\n', '// import { ExchangeHandler } from "./ExchangeHandler.sol";\n', '\n', '// pragma solidity ^0.4.24;\n', '\n', 'contract Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/// @title Interface for all exchange handler contracts\n', 'interface ExchangeHandler {\n', '\n', '    /// @dev Get the available amount left to fill for an order\n', '    /// @param orderAddresses Array of address values needed for this DEX order\n', '    /// @param orderValues Array of uint values needed for this DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Available amount left to fill for this order\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '\n', '    /// @dev Perform a buy order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performBuy(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external payable returns (uint256);\n', '\n', '    /// @dev Perform a sell order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performSell(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '}\n', '\n', '\n', 'interface BancorConverter {\n', '    function quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '}\n', '\n', 'contract BancorHandler is ExchangeHandler {\n', '\n', '    // Public functions\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external returns (uint256) {\n', '        // Return amountToGive\n', '        return orderValues[0];\n', '    }\n', '\n', '    function performBuy(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external payable returns (uint256 amountObtained) {\n', '        address destinationToken;\n', '        (amountObtained, destinationToken) = trade(orderAddresses, orderValues);\n', '        transferTokenToSender(destinationToken, amountObtained);\n', '    }\n', '\n', '    function performSell(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external returns (uint256 amountObtained) {\n', '        approveExchange(orderAddresses[0], orderAddresses[1], orderValues[0]);\n', '        (amountObtained, ) = trade(orderAddresses, orderValues);\n', '        transferEtherToSender(amountObtained);\n', '    }\n', '\n', '    function trade(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '    ) internal returns (uint256 amountObtained, address destinationToken) {\n', '        // Find the length of the conversion path\n', '        uint256 len;\n', '        for(len = 1; len < orderAddresses.length; len++) {\n', '            if(orderAddresses[len] == 0) {\n', '                require(len > 1, "First element in conversion path was 0");\n', '                destinationToken = orderAddresses[len - 1];\n', '                break;\n', '            } else if(len == orderAddresses.length - 1) {\n', '                destinationToken = orderAddresses[len];\n', '                len++;\n', '            }\n', '        }\n', '        len--;\n', '        // Create an array of that length\n', '        address[] memory conversionPath = new address[](len);\n', '\n', '        // Move the contents from orderAddresses to conversionPath\n', '        for(uint256 i = 0; i < len; i++) {\n', '            conversionPath[i] = orderAddresses[i + 1];\n', '        }\n', '\n', '        amountObtained = BancorConverter(orderAddresses[0])\n', '                            .quickConvert.value(msg.value)(conversionPath, orderValues[0], orderValues[1]);\n', '    }\n', '\n', '    function transferTokenToSender(address token, uint256 amount) internal {\n', '        Token(token).transfer(msg.sender, amount);\n', '    }\n', '\n', '    function transferEtherToSender(uint256 amount) internal {\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function approveExchange(address exchange, address token, uint256 amount) internal {\n', '        Token(token).approve(exchange, amount);\n', '    }\n', '\n', '    function() public payable {\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// import { ERC20 as Token } from "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";\n', '// import { ExchangeHandler } from "./ExchangeHandler.sol";\n', '\n', '// pragma solidity ^0.4.24;\n', '\n', 'contract Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/// @title Interface for all exchange handler contracts\n', 'interface ExchangeHandler {\n', '\n', '    /// @dev Get the available amount left to fill for an order\n', '    /// @param orderAddresses Array of address values needed for this DEX order\n', '    /// @param orderValues Array of uint values needed for this DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Available amount left to fill for this order\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '\n', '    /// @dev Perform a buy order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performBuy(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external payable returns (uint256);\n', '\n', '    /// @dev Perform a sell order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performSell(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '}\n', '\n', '\n', 'interface BancorConverter {\n', '    function quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '}\n', '\n', 'contract BancorHandler is ExchangeHandler {\n', '\n', '    // Public functions\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external returns (uint256) {\n', '        // Return amountToGive\n', '        return orderValues[0];\n', '    }\n', '\n', '    function performBuy(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external payable returns (uint256 amountObtained) {\n', '        address destinationToken;\n', '        (amountObtained, destinationToken) = trade(orderAddresses, orderValues);\n', '        transferTokenToSender(destinationToken, amountObtained);\n', '    }\n', '\n', '    function performSell(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues, // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external returns (uint256 amountObtained) {\n', '        approveExchange(orderAddresses[0], orderAddresses[1], orderValues[0]);\n', '        (amountObtained, ) = trade(orderAddresses, orderValues);\n', '        transferEtherToSender(amountObtained);\n', '    }\n', '\n', '    function trade(\n', '        address[8] orderAddresses, // [converterAddress, conversionPath ... ]\n', '        uint256[6] orderValues // [amountToGive, minReturn, EMPTY, EMPTY, EMPTY, EMPTY]\n', '    ) internal returns (uint256 amountObtained, address destinationToken) {\n', '        // Find the length of the conversion path\n', '        uint256 len;\n', '        for(len = 1; len < orderAddresses.length; len++) {\n', '            if(orderAddresses[len] == 0) {\n', '                require(len > 1, "First element in conversion path was 0");\n', '                destinationToken = orderAddresses[len - 1];\n', '                break;\n', '            } else if(len == orderAddresses.length - 1) {\n', '                destinationToken = orderAddresses[len];\n', '                len++;\n', '            }\n', '        }\n', '        len--;\n', '        // Create an array of that length\n', '        address[] memory conversionPath = new address[](len);\n', '\n', '        // Move the contents from orderAddresses to conversionPath\n', '        for(uint256 i = 0; i < len; i++) {\n', '            conversionPath[i] = orderAddresses[i + 1];\n', '        }\n', '\n', '        amountObtained = BancorConverter(orderAddresses[0])\n', '                            .quickConvert.value(msg.value)(conversionPath, orderValues[0], orderValues[1]);\n', '    }\n', '\n', '    function transferTokenToSender(address token, uint256 amount) internal {\n', '        Token(token).transfer(msg.sender, amount);\n', '    }\n', '\n', '    function transferEtherToSender(uint256 amount) internal {\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function approveExchange(address exchange, address token, uint256 amount) internal {\n', '        Token(token).approve(exchange, amount);\n', '    }\n', '\n', '    function() public payable {\n', '    }\n', '}']
