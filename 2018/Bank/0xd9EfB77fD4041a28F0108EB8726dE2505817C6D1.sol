['pragma solidity ^0.4.11;\n', '/**\n', '    ERC20 Interface\n', '    @author DongOk Peter Ryu - <<span class="__cf_email__" data-cfemail="5b343f32351b223c3c3f293a2833753234">[email&#160;protected]</span>>\n', '*/\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint supply);\n', '    function balanceOf( address who ) public constant returns (uint value);\n', '    function allowance( address owner, address spender ) public constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) public returns (bool ok);\n', '    function approve( address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '/**\n', '    YGGDRASH SmartContract\n', '    @author Peter Ryu - <<span class="__cf_email__" data-cfemail="93fcf7fafdd3eaf4f4f7e1f2e0fbbdfafc">[email&#160;protected]</span>>\n', '*/\n', 'contract YggdrashCrowd {\n', '    using SafeMath for uint;\n', '    ERC20 public yeedToken;\n', '    Stages stage;\n', '    address public wallet;\n', '    address public owner;\n', '    address public tokenOwner;\n', '    uint public totalAmount;    // Contruibute Token amount\n', '    uint public priceFactor; // ratio\n', '    uint public startBlock;\n', '    uint public totalReceived;\n', '    uint public endTime;\n', '\n', '    uint public maxValue; // max ETH\n', '    uint public minValue;\n', '\n', '    uint public maxGasPrice; // Max gasPrice\n', '\n', '    // collect log\n', '    event FundTransfer (address sender, uint amount);\n', '\n', '    struct ContributeAddress {\n', '        bool exists; // set to true\n', '        address account; // sending account\n', '        uint amount; // sending amount\n', '        uint balance; // token value\n', '        bytes data; // sending data\n', '    }\n', '\n', '    mapping(address => ContributeAddress) public _contributeInfo;\n', '    mapping(bytes => ContributeAddress) _contruibuteData;\n', '\n', '    /*\n', '        Check is owner address\n', '    */\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        Check Valid Payload\n', '    */\n', '    modifier isValidPayload() {\n', '        // check Max\n', '        if(maxValue != 0){\n', '            require(msg.value < maxValue + 1);\n', '        }\n', '        // Check Min\n', '        if(minValue != 0){\n', '            require(msg.value > minValue - 1);\n', '        }\n', '        require(wallet != msg.sender);\n', '        // check data value\n', '        require(msg.data.length != 0);\n', '        _;\n', '\n', '    }\n', '\n', '    /*\n', '        Check exists Contribute list\n', '    */\n', '    modifier isExists() {\n', '        require(_contruibuteData[msg.data].exists == false);\n', '        require(_contributeInfo[msg.sender].amount == 0);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Modifiers Stage\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '\n', '    /*\n', '     *  Enums Stage Status\n', '     */\n', '    enum Stages {\n', '    Deployed,\n', '    SetUp,\n', '    Started,\n', '    Ended\n', '    }\n', '\n', '\n', '    /// init\n', '    /// @param _token token address\n', '    /// @param _tokenOwner token owner wallet address\n', '    /// @param _wallet Send ETH wallet\n', '    /// @param _amount token total value\n', '    /// @param _priceFactor token and ETH ratio\n', '    /// @param _maxValue maximum ETH balance\n', '    /// @param _minValue minimum ETH balance\n', '\n', '    function YggdrashCrowd(address _token, address _tokenOwner, address _wallet, uint _amount, uint _priceFactor, uint _maxValue, uint _minValue)\n', '    public\n', '    {\n', '        require (_tokenOwner != 0 && _wallet != 0 && _amount != 0 && _priceFactor != 0);\n', '        tokenOwner = _tokenOwner;\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        totalAmount = _amount;\n', '        priceFactor = _priceFactor;\n', '        maxValue = _maxValue;\n', '        minValue = _minValue;\n', '        stage = Stages.Deployed;\n', '\n', '        if(_token != 0){ // setup token\n', '            yeedToken = ERC20(_token);\n', '            stage = Stages.SetUp;\n', '        }\n', '        // Max Gas Price is unlimited\n', '        maxGasPrice = 0;\n', '    }\n', '\n', '    // setupToken\n', '    function setupToken(address _token)\n', '    public\n', '    isOwner\n', '    {\n', '        require(_token != 0);\n', '        yeedToken = ERC20(_token);\n', '        stage = Stages.SetUp;\n', '    }\n', '\n', '    /// @dev Start Contruibute\n', '    function startContruibute()\n', '    public\n', '    isOwner\n', '    atStage(Stages.SetUp)\n', '    {\n', '        stage = Stages.Started;\n', '        startBlock = block.number;\n', '    }\n', '\n', '\n', '    /**\n', '        Contributer send to ETH\n', '        Payload Check\n', '        Exist Check\n', '        GasPrice Check\n', '        Stage Check\n', '    */\n', '    function()\n', '    public\n', '    isValidPayload\n', '    isExists\n', '    atStage(Stages.Started)\n', '    payable\n', '    {\n', '        uint amount = msg.value;\n', '        uint maxAmount = totalAmount.div(priceFactor);\n', '        // refund\n', '        if (amount > maxAmount){\n', '            uint refund = amount.sub(maxAmount);\n', '            assert(msg.sender.send(refund));\n', '            amount = maxAmount;\n', '        }\n', '        //  NO MORE GAS WAR!!!\n', '        if(maxGasPrice != 0){\n', '            assert(tx.gasprice < maxGasPrice + 1);\n', '        }\n', '        totalReceived = totalReceived.add(amount);\n', '        // calculate token\n', '        uint token = amount.mul(priceFactor);\n', '        totalAmount = totalAmount.sub(token);\n', '\n', '        // give token to sender\n', '        yeedToken.transferFrom(tokenOwner, msg.sender, token);\n', '        FundTransfer(msg.sender, token);\n', '\n', '        // Set Contribute Account\n', '        ContributeAddress crowdData = _contributeInfo[msg.sender];\n', '        crowdData.exists = true;\n', '        crowdData.account = msg.sender;\n', '        crowdData.data = msg.data;\n', '        crowdData.amount = amount;\n', '        crowdData.balance = token;\n', '        // add contruibuteData\n', '        _contruibuteData[msg.data] = crowdData;\n', '        _contributeInfo[msg.sender] = crowdData;\n', '        // send to wallet\n', '        wallet.transfer(amount);\n', '\n', '        // token sold out\n', '        if (amount == maxAmount)\n', '            finalizeContruibute();\n', '    }\n', '\n', '    /// @dev Changes auction totalAmount and start price factor before auction is started.\n', '    /// @param _totalAmount Updated auction totalAmount.\n', '    /// @param _priceFactor Updated start price factor.\n', '    /// @param _maxValue Maximum balance of ETH\n', '    /// @param _minValue Minimum balance of ETH\n', '    function changeSettings(uint _totalAmount, uint _priceFactor, uint _maxValue, uint _minValue, uint _maxGasPrice)\n', '    public\n', '    isOwner\n', '    {\n', '        require(_totalAmount != 0 && _priceFactor != 0);\n', '        totalAmount = _totalAmount;\n', '        priceFactor = _priceFactor;\n', '        maxValue = _maxValue;\n', '        minValue = _minValue;\n', '        maxGasPrice = _maxGasPrice;\n', '    }\n', '    /**\n', '        Set Max Gas Price by Admin\n', '    */\n', '    function setMaxGasPrice(uint _maxGasPrice)\n', '    public\n', '    isOwner\n', '    {\n', '        maxGasPrice = _maxGasPrice;\n', '    }\n', '\n', '\n', '    // token balance\n', '    // @param src sender wallet address\n', '    function balanceOf(address src) public constant returns (uint256)\n', '    {\n', '        return _contributeInfo[src].balance;\n', '    }\n', '\n', '    // amount ETH value\n', '    // @param src sender wallet address\n', '    function amountOf(address src) public constant returns(uint256)\n', '    {\n', '        return _contributeInfo[src].amount;\n', '    }\n', '\n', '    // contruibute data\n', '    // @param src Yggdrash uuid\n', '    function contruibuteData(bytes src) public constant returns(address)\n', '    {\n', '        return _contruibuteData[src].account;\n', '    }\n', '\n', '    // Check contruibute is open\n', '    function isContruibuteOpen() public constant returns (bool)\n', '    {\n', '        return stage == Stages.Started;\n', '    }\n', '\n', '    // Smartcontract halt\n', '    function halt()\n', '    public\n', '    isOwner\n', '    {\n', '        finalizeContruibute();\n', '    }\n', '\n', '    // END of this Contruibute\n', '    function finalizeContruibute()\n', '    private\n', '    {\n', '        stage = Stages.Ended;\n', '        // remain token send to owner\n', '        totalAmount = 0;\n', '        endTime = now;\n', '    }\n', '}']