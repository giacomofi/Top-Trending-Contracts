['pragma solidity ^0.4.25;\n', '\n', '//\n', '// https://github.com/TheWeakestHodler/TheWeakestHodler\n', '//\n', '// HODL UNTIL YOU ARE HOMELESS\n', '//\n', 'contract TheWeakestHodler {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public percentsRemaining = 90;\n', '    mapping(address => uint256) public shares;\n', '    uint256 public totalShares;\n', '    \n', '    function () public payable {\n', '        if (msg.value > 0) {\n', '            if (totalShares == 0) {\n', '                uint256 amount = msg.value;\n', '            } else {\n', '                amount = msg.value.mul(totalShares).div(address(this).balance.sub(msg.value));\n', '            }\n', '            shares[msg.sender] = shares[msg.sender].add(amount);\n', '            totalShares = totalShares.add(amount);\n', '        } else {\n', '            amount = balanceOf(msg.sender);\n', '            totalShares = totalShares.sub(shares[msg.sender]);\n', '            shares[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _account) public view returns(uint256) {\n', '        if (totalShares == 0) {\n', '            return 0;\n', '        }\n', '        return address(this).balance.mul(shares[_account]).mul(percentsRemaining).div(totalShares).div(100);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '//\n', '// https://github.com/TheWeakestHodler/TheWeakestHodler\n', '//\n', '// HODL UNTIL YOU ARE HOMELESS\n', '//\n', 'contract TheWeakestHodler {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public percentsRemaining = 90;\n', '    mapping(address => uint256) public shares;\n', '    uint256 public totalShares;\n', '    \n', '    function () public payable {\n', '        if (msg.value > 0) {\n', '            if (totalShares == 0) {\n', '                uint256 amount = msg.value;\n', '            } else {\n', '                amount = msg.value.mul(totalShares).div(address(this).balance.sub(msg.value));\n', '            }\n', '            shares[msg.sender] = shares[msg.sender].add(amount);\n', '            totalShares = totalShares.add(amount);\n', '        } else {\n', '            amount = balanceOf(msg.sender);\n', '            totalShares = totalShares.sub(shares[msg.sender]);\n', '            shares[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _account) public view returns(uint256) {\n', '        if (totalShares == 0) {\n', '            return 0;\n', '        }\n', '        return address(this).balance.mul(shares[_account]).mul(percentsRemaining).div(totalShares).div(100);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']
