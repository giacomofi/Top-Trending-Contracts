['pragma solidity ^0.4.21;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwner(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Lockable is Ownable {\n', '    bool public contractLocked = false;\n', '\n', '    modifier notLocked() {\n', '        require(!contractLocked);\n', '        _;\n', '    }\n', '\n', '    function lockContract() public onlyOwner {\n', '        contractLocked = true;\n', '    }\n', '\n', '    function unlockContract() public onlyOwner {\n', '        contractLocked = false;\n', '    }\n', '}\n', '\n', 'contract FeeCalculator is Ownable, SafeMath {\n', '\n', '    uint public feeNumerator = 0;\n', '\n', '    uint public feeDenominator = 0;\n', '\n', '    uint public minFee = 0;\n', '\n', '    uint public maxFee = 0;\n', '\n', '    function setFee(uint _feeNumerator, uint _feeDenominator, uint _minFee, uint _maxFee) public onlyOwner {\n', '        feeNumerator = _feeNumerator;\n', '        feeDenominator = _feeDenominator;\n', '        minFee = _minFee;\n', '        maxFee = _maxFee;\n', '    }\n', '\n', '    function calculateFee(uint value) public view returns (uint requiredFee) {\n', '        if (feeNumerator == 0 || feeDenominator == 0) return 0;\n', '\n', '        uint fee = safeDiv(safeMul(value, feeNumerator), feeDenominator);\n', '\n', '        if (fee < minFee) return minFee;\n', '\n', '        if (fee > maxFee) return maxFee;\n', '\n', '        return fee;\n', '    }\n', '\n', '    function subtractFee(uint value) internal returns (uint newValue);\n', '}\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Mintable is Ownable {\n', '    mapping(address => bool) public minters;\n', '\n', '    modifier onlyMinter {\n', '        require(minters[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function Mintable() public {\n', '        adjustMinter(msg.sender, true);\n', '    }\n', '\n', '    function adjustMinter(address minter, bool canMint) public onlyOwner {\n', '        minters[minter] = canMint;\n', '    }\n', '\n', '    function mint(address to, uint256 value) public;\n', '\n', '}\n', '\n', 'contract Token is EIP20Interface, Ownable, SafeMath, Mintable, Lockable, FeeCalculator {\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    mapping(address => bool) frozenAddresses;\n', '\n', '    string public name;\n', '\n', '    uint8 public decimals;\n', '\n', '    string public symbol;\n', '\n', '    bool public isBurnable;\n', '\n', '    bool public canAnyoneBurn;\n', '\n', '    modifier notFrozen(address target) {\n', '        require(!frozenAddresses[target]);\n', '        _;\n', '    }\n', '\n', '    event AddressFroze(address target, bool isFrozen);\n', '\n', '    function Token(string _name, uint8 _decimals, string _symbol) public {\n', '        name = _name;\n', '        decimals = _decimals;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) notLocked notFrozen(msg.sender) public returns (bool success) {\n', '        return transfer(msg.sender, to, value);\n', '    }\n', '\n', '    function transfer(address from, address to, uint256 value) internal returns (bool success) {\n', '        balances[from] = safeSub(balances[from], value);\n', '        value = subtractFee(value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) notLocked notFrozen(from) public returns (bool success) {\n', '        uint256 allowance = allowed[from][msg.sender];\n', '        balances[from] = safeSub(balances[from], value);\n', '        allowed[from][msg.sender] = safeSub(allowance, value);\n', '        value = subtractFee(value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '\n', '    function approve(address spender, uint256 value) notLocked public returns (bool success) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    function freezeAddress(address target, bool freeze) onlyOwner public {\n', '        if (freeze) {\n', '            frozenAddresses[target] = true;\n', '        } else {\n', '            delete frozenAddresses[target];\n', '        }\n', '        emit AddressFroze(target, freeze);\n', '    }\n', '\n', '    function isAddressFrozen(address target) public view returns (bool frozen){\n', '        return frozenAddresses[target];\n', '    }\n', '\n', '    function mint(address to, uint256 value) public onlyMinter {\n', '        totalSupply = safeAdd(totalSupply, value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '        emit Transfer(0x0, to, value);\n', '    }\n', '\n', '    function subtractFee(uint value) internal returns (uint newValue) {\n', '        uint feeToTake = calculateFee(value);\n', '\n', '        if (feeToTake == 0) return value;\n', '\n', '        balances[this] = safeAdd(balances[this], feeToTake);\n', '\n', '        return value - feeToTake;\n', '    }\n', '\n', '    function withdrawFees(address to) onlyOwner public returns (bool success) {\n', '        return transfer(this, to, balances[this]);\n', '    }\n', '\n', '    function setBurnPolicy(bool _isBurnable, bool _canAnyoneBurn) public {\n', '        isBurnable = _isBurnable;\n', '        canAnyoneBurn = _canAnyoneBurn;\n', '    }\n', '\n', '    function burn(uint256 value) public returns (bool success) {\n', '        require(isBurnable);\n', '\n', '        if (!canAnyoneBurn && msg.sender != owner) {\n', '            return false;\n', '        }\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        totalSupply = totalSupply - value;\n', '        return true;\n', '    }\n', '}']