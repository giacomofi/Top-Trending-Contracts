['pragma solidity ^0.4.21;\n', '\n', 'interface token {\n', '  function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract KeplerTokenExtraSale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    uint256 public TokensPerETH;\n', '    token public tokenReward;\n', '    event FundTransfer(address backer, uint256 amount, bool isContribution);\n', '\n', '    function KeplerTokenExtraSale(\n', '        uint256 etherPrice,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        TokensPerETH = etherPrice * 130 / 125;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    function () payable public {\n', '    \trequire(msg.value != 0);\n', '        uint256 amount = msg.value;\n', '        tokenReward.transfer(msg.sender, amount * TokensPerETH);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function changeEtherPrice(uint256 newEtherPrice) onlyOwner public {\n', '        TokensPerETH = newEtherPrice * 130 / 125;\n', '    }\n', '\n', '    function withdraw(uint256 value) onlyOwner public {\n', '        uint256 amount = value * 10**16;\n', '        owner.transfer(amount);\n', '        emit FundTransfer(owner, amount, false);\n', '    }\n', '\n', '    function withdrawTokens(address otherTokenAddress, uint256 amount) onlyOwner public {\n', '        token otherToken = token(otherTokenAddress);\n', '        otherToken.transfer(owner, amount);\n', '    }\n', '\n', '    function destroy() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface token {\n', '  function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract KeplerTokenExtraSale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    uint256 public TokensPerETH;\n', '    token public tokenReward;\n', '    event FundTransfer(address backer, uint256 amount, bool isContribution);\n', '\n', '    function KeplerTokenExtraSale(\n', '        uint256 etherPrice,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        TokensPerETH = etherPrice * 130 / 125;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    function () payable public {\n', '    \trequire(msg.value != 0);\n', '        uint256 amount = msg.value;\n', '        tokenReward.transfer(msg.sender, amount * TokensPerETH);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function changeEtherPrice(uint256 newEtherPrice) onlyOwner public {\n', '        TokensPerETH = newEtherPrice * 130 / 125;\n', '    }\n', '\n', '    function withdraw(uint256 value) onlyOwner public {\n', '        uint256 amount = value * 10**16;\n', '        owner.transfer(amount);\n', '        emit FundTransfer(owner, amount, false);\n', '    }\n', '\n', '    function withdrawTokens(address otherTokenAddress, uint256 amount) onlyOwner public {\n', '        token otherToken = token(otherTokenAddress);\n', '        otherToken.transfer(owner, amount);\n', '    }\n', '\n', '    function destroy() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}']
