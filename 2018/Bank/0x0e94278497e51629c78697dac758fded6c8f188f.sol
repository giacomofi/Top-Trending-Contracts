['pragma solidity ^0.4.25;\n', '\n', 'interface token {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract Dividends {\n', '    address private maintoken = 0x2054a15c6822a722378d13c4e4ea85365e46e50b;\n', '    address private owner = msg.sender;\n', '    address private user;\n', '    uint256 private usertoken;\n', '    uint256 private userether;\n', '    uint256 public dividends1token = 3531272953274;\n', '    uint256 public dividendstart = 1538352000;\n', '    mapping (address => uint256) public users;\n', '    mapping (address => uint256) public admins;\n', '    token public tokenReward;\n', '    \n', '    function Dividends() public {\n', '        tokenReward = token(maintoken);\n', '        admins[msg.sender] = 1;\n', '    }\n', '\n', '    function() external payable {\n', '        \n', '        if (admins[msg.sender] != 1) {\n', '            \n', '            user = msg.sender;\n', '            \n', '            usertoken = tokenReward.balanceOf(user);\n', '            \n', '            if ( (now > dividendstart ) && (usertoken != 0) && (users[user] != 1) ) {\n', '                \n', '                userether = usertoken * dividends1token + msg.value;\n', '                user.transfer(userether);\n', '                \n', '                users[user] = 1;\n', '            } else {\n', '                user.transfer(msg.value);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function admin(address _admin, uint8 _value) public {\n', '        require(msg.sender == owner);\n', '        \n', '        admins[_admin] = _value;\n', '    }\n', '    \n', '    function out() public {\n', '        require(msg.sender == owner);\n', '        \n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'interface token {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract Dividends {\n', '    address private maintoken = 0x2054a15c6822a722378d13c4e4ea85365e46e50b;\n', '    address private owner = msg.sender;\n', '    address private user;\n', '    uint256 private usertoken;\n', '    uint256 private userether;\n', '    uint256 public dividends1token = 3531272953274;\n', '    uint256 public dividendstart = 1538352000;\n', '    mapping (address => uint256) public users;\n', '    mapping (address => uint256) public admins;\n', '    token public tokenReward;\n', '    \n', '    function Dividends() public {\n', '        tokenReward = token(maintoken);\n', '        admins[msg.sender] = 1;\n', '    }\n', '\n', '    function() external payable {\n', '        \n', '        if (admins[msg.sender] != 1) {\n', '            \n', '            user = msg.sender;\n', '            \n', '            usertoken = tokenReward.balanceOf(user);\n', '            \n', '            if ( (now > dividendstart ) && (usertoken != 0) && (users[user] != 1) ) {\n', '                \n', '                userether = usertoken * dividends1token + msg.value;\n', '                user.transfer(userether);\n', '                \n', '                users[user] = 1;\n', '            } else {\n', '                user.transfer(msg.value);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function admin(address _admin, uint8 _value) public {\n', '        require(msg.sender == owner);\n', '        \n', '        admins[_admin] = _value;\n', '    }\n', '    \n', '    function out() public {\n', '        require(msg.sender == owner);\n', '        \n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '}']
