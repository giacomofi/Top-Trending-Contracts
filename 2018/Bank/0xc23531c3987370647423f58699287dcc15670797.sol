['pragma solidity ^0.4.20; // solhint-disable-line\n', '\n', '\n', '/*\n', '  modified pyramid contract by Cryptopinions (https://ethverify.net)\n', '*/\n', 'contract DailyDivsSavings{\n', '  using SafeMath for uint;\n', '  address public ceo;\n', '  address public ceo2;\n', '  mapping(address => address) public referrer;//who has referred who\n', '  mapping(address => uint256) public referralsHeld;//amount of eth from referrals held\n', '  mapping(address => uint256) public refBuys;//how many people you have referred\n', '  mapping(address => uint256) public tokenBalanceLedger_;\n', '  mapping(address => int256) public payoutsTo_;\n', '  uint256 public tokenSupply_ = 0;\n', '  uint256 public profitPerShare_;\n', '  uint256 constant internal magnitude = 2**64;\n', '  uint256 constant internal tokenPriceInitial_ = 0.0000000001 ether;\n', '  uint8 constant internal dividendFee_ = 50;\n', '\n', '  event onTokenPurchase(\n', '      address indexed customerAddress,\n', '      uint256 incomingEthereum,\n', '      uint256 tokensMinted,\n', '      address indexed referredBy\n', '  );\n', '   event onTokenSell(\n', '       address indexed customerAddress,\n', '       uint256 tokensBurned,\n', '       uint256 ethereumEarned\n', '   );\n', '\n', '   event onReinvestment(\n', '       address indexed customerAddress,\n', '       uint256 ethereumReinvested,\n', '       uint256 tokensMinted\n', '   );\n', '\n', '   event onWithdraw(\n', '       address indexed customerAddress,\n', '       uint256 ethereumWithdrawn\n', '   );\n', '\n', '   function DailyDivsSavings() public{\n', '     ceo=msg.sender;\n', '     ceo2=0x93c5371707D2e015aEB94DeCBC7892eC1fa8dd80;\n', '   }\n', '\n', '  function ethereumToTokens_(uint _ethereum) public view returns(uint){\n', '    //require(_ethereum>tokenPriceInitial_);\n', '    return _ethereum.div(tokenPriceInitial_);\n', '  }\n', '  function tokensToEthereum_(uint _tokens) public view returns(uint){\n', '    return tokenPriceInitial_.mul(_tokens);\n', '  }\n', '  function myHalfDividends() public view returns(uint){\n', '    return (dividendsOf(msg.sender)*98)/200;//no safemath because for external use only\n', '  }\n', '  function myDividends()\n', '    public\n', '    view\n', '    returns(uint256)\n', '  {\n', '      return dividendsOf(msg.sender) ;\n', '  }\n', '  function dividendsOf(address _customerAddress)\n', '      view\n', '      public\n', '      returns(uint)\n', '  {\n', '      return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '  }\n', '  function balance() public view returns(uint256){\n', '    return address(this).balance;\n', '  }\n', '  function mySavings() public view returns(uint){\n', '    return tokensToEthereum_(tokenBalanceLedger_[msg.sender]);\n', '  }\n', '  function depositNoRef() public payable{\n', '    deposit(0);\n', '  }\n', '  function deposit(address ref) public payable{\n', '    require(ref!=msg.sender);\n', '    if(referrer[msg.sender]==0 && ref!=0){\n', '      referrer[msg.sender]=ref;\n', '      refBuys[ref]+=1;\n', '    }\n', '\n', '    purchaseTokens(msg.value);\n', '  }\n', '  function purchaseTokens(uint _incomingEthereum) private\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _dividends = _undividedDividends;\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require(_amountOfTokens.add(tokenSupply_) > tokenSupply_);\n', '\n', '\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if(tokenSupply_ > 0){\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', '        //remove divs from before buy\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, 0);\n', '\n', '        //return _amountOfTokens;\n', '    }\n', '    function sell(uint _amountOfEth) public {\n', '      reinvest();\n', '      sell_(ethereumToTokens_(_amountOfEth));\n', '      withdraw();\n', '    }\n', '    function withdraw()\n', '    private\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        //_dividends += referralBalance_[_customerAddress];\n', '        //referralBalance_[_customerAddress] = 0;\n', '\n', '        //payout\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    function sell_(uint256 _amountOfTokens)\n', '        private\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        require(tokenBalanceLedger_[_customerAddress]>0);\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        //uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = _ethereum;//SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // no divs on sell\n', '        //if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            //profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        //}\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '    function reinvest()\n', '    public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(); // retrieve ref. bonus later in the code\n', '        require(_dividends>1);\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        //_dividends += referralBalance_[_customerAddress];\n', '        //referralBalance_[_customerAddress] = 0;\n', '\n', '        uint halfDivs=_dividends.div(2);\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        if(ethereumToTokens_(halfDivs.add(referralsHeld[msg.sender]))>0){\n', '          purchaseTokens(halfDivs.add(referralsHeld[msg.sender]));//uint256 _tokens =\n', '          referralsHeld[msg.sender]=0;\n', '        }\n', '\n', '        //give half to the referrer\n', '\n', '        address refaddr=referrer[_customerAddress];\n', '        if(refaddr==0){\n', '          uint quarterDivs=halfDivs.div(2);\n', '          referralsHeld[ceo]=referralsHeld[ceo].add(quarterDivs);\n', '          referralsHeld[ceo2]=referralsHeld[ceo2].add(quarterDivs);\n', '        }\n', '        else{\n', '          referralsHeld[refaddr]=referralsHeld[refaddr].add(halfDivs);\n', '        }\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, halfDivs);\n', '    }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.20; // solhint-disable-line\n', '\n', '\n', '/*\n', '  modified pyramid contract by Cryptopinions (https://ethverify.net)\n', '*/\n', 'contract DailyDivsSavings{\n', '  using SafeMath for uint;\n', '  address public ceo;\n', '  address public ceo2;\n', '  mapping(address => address) public referrer;//who has referred who\n', '  mapping(address => uint256) public referralsHeld;//amount of eth from referrals held\n', '  mapping(address => uint256) public refBuys;//how many people you have referred\n', '  mapping(address => uint256) public tokenBalanceLedger_;\n', '  mapping(address => int256) public payoutsTo_;\n', '  uint256 public tokenSupply_ = 0;\n', '  uint256 public profitPerShare_;\n', '  uint256 constant internal magnitude = 2**64;\n', '  uint256 constant internal tokenPriceInitial_ = 0.0000000001 ether;\n', '  uint8 constant internal dividendFee_ = 50;\n', '\n', '  event onTokenPurchase(\n', '      address indexed customerAddress,\n', '      uint256 incomingEthereum,\n', '      uint256 tokensMinted,\n', '      address indexed referredBy\n', '  );\n', '   event onTokenSell(\n', '       address indexed customerAddress,\n', '       uint256 tokensBurned,\n', '       uint256 ethereumEarned\n', '   );\n', '\n', '   event onReinvestment(\n', '       address indexed customerAddress,\n', '       uint256 ethereumReinvested,\n', '       uint256 tokensMinted\n', '   );\n', '\n', '   event onWithdraw(\n', '       address indexed customerAddress,\n', '       uint256 ethereumWithdrawn\n', '   );\n', '\n', '   function DailyDivsSavings() public{\n', '     ceo=msg.sender;\n', '     ceo2=0x93c5371707D2e015aEB94DeCBC7892eC1fa8dd80;\n', '   }\n', '\n', '  function ethereumToTokens_(uint _ethereum) public view returns(uint){\n', '    //require(_ethereum>tokenPriceInitial_);\n', '    return _ethereum.div(tokenPriceInitial_);\n', '  }\n', '  function tokensToEthereum_(uint _tokens) public view returns(uint){\n', '    return tokenPriceInitial_.mul(_tokens);\n', '  }\n', '  function myHalfDividends() public view returns(uint){\n', '    return (dividendsOf(msg.sender)*98)/200;//no safemath because for external use only\n', '  }\n', '  function myDividends()\n', '    public\n', '    view\n', '    returns(uint256)\n', '  {\n', '      return dividendsOf(msg.sender) ;\n', '  }\n', '  function dividendsOf(address _customerAddress)\n', '      view\n', '      public\n', '      returns(uint)\n', '  {\n', '      return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '  }\n', '  function balance() public view returns(uint256){\n', '    return address(this).balance;\n', '  }\n', '  function mySavings() public view returns(uint){\n', '    return tokensToEthereum_(tokenBalanceLedger_[msg.sender]);\n', '  }\n', '  function depositNoRef() public payable{\n', '    deposit(0);\n', '  }\n', '  function deposit(address ref) public payable{\n', '    require(ref!=msg.sender);\n', '    if(referrer[msg.sender]==0 && ref!=0){\n', '      referrer[msg.sender]=ref;\n', '      refBuys[ref]+=1;\n', '    }\n', '\n', '    purchaseTokens(msg.value);\n', '  }\n', '  function purchaseTokens(uint _incomingEthereum) private\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _dividends = _undividedDividends;\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require(_amountOfTokens.add(tokenSupply_) > tokenSupply_);\n', '\n', '\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', '        //remove divs from before buy\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, 0);\n', '\n', '        //return _amountOfTokens;\n', '    }\n', '    function sell(uint _amountOfEth) public {\n', '      reinvest();\n', '      sell_(ethereumToTokens_(_amountOfEth));\n', '      withdraw();\n', '    }\n', '    function withdraw()\n', '    private\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        //_dividends += referralBalance_[_customerAddress];\n', '        //referralBalance_[_customerAddress] = 0;\n', '\n', '        //payout\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    function sell_(uint256 _amountOfTokens)\n', '        private\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        require(tokenBalanceLedger_[_customerAddress]>0);\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        //uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = _ethereum;//SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // no divs on sell\n', '        //if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            //profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        //}\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '    function reinvest()\n', '    public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(); // retrieve ref. bonus later in the code\n', '        require(_dividends>1);\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        //_dividends += referralBalance_[_customerAddress];\n', '        //referralBalance_[_customerAddress] = 0;\n', '\n', '        uint halfDivs=_dividends.div(2);\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        if(ethereumToTokens_(halfDivs.add(referralsHeld[msg.sender]))>0){\n', '          purchaseTokens(halfDivs.add(referralsHeld[msg.sender]));//uint256 _tokens =\n', '          referralsHeld[msg.sender]=0;\n', '        }\n', '\n', '        //give half to the referrer\n', '\n', '        address refaddr=referrer[_customerAddress];\n', '        if(refaddr==0){\n', '          uint quarterDivs=halfDivs.div(2);\n', '          referralsHeld[ceo]=referralsHeld[ceo].add(quarterDivs);\n', '          referralsHeld[ceo2]=referralsHeld[ceo2].add(quarterDivs);\n', '        }\n', '        else{\n', '          referralsHeld[refaddr]=referralsHeld[refaddr].add(halfDivs);\n', '        }\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, halfDivs);\n', '    }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
