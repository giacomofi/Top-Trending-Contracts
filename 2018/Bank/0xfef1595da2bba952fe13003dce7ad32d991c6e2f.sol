['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '}\n', '\n', 'contract CryptoCupToken is ERC721 {\n', '\n', '    // evsoftware.co.uk\n', '    // cryptocup.online\n', '\n', '    /*****------ EVENTS -----*****/\n', '    event TeamSold(uint256 indexed team, address indexed from, uint256 oldPrice, address indexed to, uint256 newPrice, uint256 tradingTime, uint256 balance, uint256 lastSixteenPrize, uint256 quarterFinalPrize, uint256 semiFinalPrize, uint256 winnerPrize);\n', '    event PrizePaid(string tournamentStage, uint256 indexed team, address indexed to, uint256 prize, uint256 time);\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    /*****------- CONSTANTS -------******/\n', '    uint256 private startingPrice = 0.001 ether;\n', '\tuint256 private doublePriceUntil = 0.1 ether;\n', '\tuint256 private lastSixteenWinnerPayments = 0;\n', '\tuint256 private quarterFinalWinnerPayments = 0;\n', '\tuint256 private semiFinalWinnerPayments = 0;\n', '\tbool private tournamentComplete = false;\n', '    \n', '    /*****------- STORAGE -------******/\n', '    mapping (uint256 => address) public teamOwners;\n', '    mapping (address => uint256) private ownerTeamCount;\n', '    mapping (uint256 => address) public teamToApproved;\n', '    mapping (uint256 => uint256) private teamPrices;\n', '    address public contractModifierAddress;\n', '    address public developerAddress;\n', '    \n', '    /*****------- DATATYPES -------******/\n', '    struct Team {\n', '        string name;\n', '        string code;\n', '        uint256 cost;\n', '        uint256 price;\n', '        address owner;\n', '        uint256 numPayouts;\n', '        mapping (uint256 => Payout) payouts;\n', '    }\n', '\n', '    struct Payout {\n', '        string stage;\n', '        uint256 amount;\n', '        address to;\n', '        uint256 when;\n', '    }\n', '\n', '    Team[] private teams;\n', '    \n', '    struct PayoutPrizes {\n', '        uint256 LastSixteenWinner;\n', '        bool LastSixteenTotalFixed;\n', '        uint256 QuarterFinalWinner;\n', '        bool QuarterFinalTotalFixed;\n', '        uint256 SemiFinalWinner;\n', '        bool SemiFinalTotalFixed;\n', '        uint256 TournamentWinner;\n', '    }\n', '    \n', '    PayoutPrizes private prizes;\n', '\n', '    /*****------- MODIFIERS -------******/\n', '    modifier onlyContractModifier() {\n', '        require(msg.sender == contractModifierAddress);\n', '        _;\n', '    }\n', '    \n', '    /*****------- CONSTRUCTOR -------******/\n', '    constructor() public {\n', '        contractModifierAddress = msg.sender;\n', '        developerAddress = msg.sender;\n', '\n', '        // Initialse Prize Totals\n', '        prizes.LastSixteenTotalFixed = false;\n', '        prizes.QuarterFinalTotalFixed = false;\n', '        prizes.SemiFinalTotalFixed = false;\n', '    }\n', '    \n', '    /*****------- PUBLIC FUNCTIONS -------******/\n', '    function name() public pure returns (string) {\n', '        return "CryptoCup";\n', '    }\n', '  \n', '    function symbol() public pure returns (string) {\n', '        return "CryptoCupToken";\n', '    }\n', '    \n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        owner = teamOwners[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '    \n', '    function takeOwnership(uint256 _tokenId) public {\n', '        address to = msg.sender;\n', '        address from = teamOwners[_tokenId];\n', '    \n', '        require(_addressNotNull(to));\n', '        require(_approved(to, _tokenId));\n', '    \n', '        _transfer(from, to, _tokenId);\n', '    }\n', '    \n', '    function approve(address _to, uint256 _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        teamToApproved[_tokenId] = _to;\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownerTeamCount[_owner];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 total) {\n', '        return teams.length;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '\tfunction destroy() public onlyContractModifier {\n', '\t\tselfdestruct(contractModifierAddress);\n', '    }\n', '\n', '    function setDeveloper(address _newDeveloperAddress) public onlyContractModifier {\n', '        require(_newDeveloperAddress != address(0));\n', '        developerAddress = _newDeveloperAddress;\n', '    }\n', '    \n', '    function createTeams() public onlyContractModifier {\n', '        _createTeam("Russia", "RUS", startingPrice, developerAddress);\n', '        _createTeam("Saudi Arabia", "KSA", startingPrice, developerAddress);\n', '        _createTeam("Egypt", "EGY", startingPrice, developerAddress);\n', '        _createTeam("Uruguay", "URU", startingPrice, developerAddress);\n', '        _createTeam("Portugal", "POR", startingPrice, developerAddress);\n', '        _createTeam("Spain", "SPA", startingPrice, developerAddress);\n', '        _createTeam("Morocco", "MOR", startingPrice, developerAddress);\n', '        _createTeam("Iran", "IRN", startingPrice, developerAddress);\n', '        _createTeam("France", "FRA", startingPrice, developerAddress);\n', '        _createTeam("Australia", "AUS", startingPrice, developerAddress);\n', '        _createTeam("Peru", "PER", startingPrice, developerAddress);\n', '        _createTeam("Denmark", "DEN", startingPrice, developerAddress);\n', '        _createTeam("Argentina", "ARG", startingPrice, developerAddress);\n', '        _createTeam("Iceland", "ICE", startingPrice, developerAddress);\n', '        _createTeam("Croatia", "CRO", startingPrice, developerAddress);\n', '        _createTeam("Nigeria", "NGA", startingPrice, developerAddress);\n', '        _createTeam("Brazil", "BRZ", startingPrice, developerAddress);\n', '        _createTeam("Switzerland", "SWI", startingPrice, developerAddress);\n', '        _createTeam("Costa Rica", "CRC", startingPrice, developerAddress);\n', '        _createTeam("Serbia", "SER", startingPrice, developerAddress);\n', '        _createTeam("Germany", "GER", startingPrice, developerAddress);\n', '        _createTeam("Mexico", "MEX", startingPrice, developerAddress);\n', '        _createTeam("Sweden", "SWE", startingPrice, developerAddress);\n', '        _createTeam("South Korea", "KOR", startingPrice, developerAddress);\n', '        _createTeam("Belgium", "BEL", startingPrice, developerAddress);\n', '        _createTeam("Panama", "PAN", startingPrice, developerAddress);\n', '        _createTeam("Tunisia", "TUN", startingPrice, developerAddress);\n', '        _createTeam("England", "ENG", startingPrice, developerAddress);\n', '        _createTeam("Poland", "POL", startingPrice, developerAddress);\n', '        _createTeam("Senegal", "SEN", startingPrice, developerAddress);\n', '        _createTeam("Colombia", "COL", startingPrice, developerAddress);\n', '        _createTeam("Japan", "JPN", startingPrice, developerAddress);\n', '    }\n', '    \n', '    function createTeam(string name, string code) public onlyContractModifier {\n', '        _createTeam(name, code, startingPrice, developerAddress);\n', '    }\n', '    \n', '    function lockInLastSixteenPrize() public onlyContractModifier {\n', '        prizes.LastSixteenTotalFixed = true;\n', '    }\n', '    \n', '    function payLastSixteenWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.LastSixteenTotalFixed != false);\n', '        require(lastSixteenWinnerPayments < 8);\n', '        require(tournamentComplete != true);\n', '        \n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 0);\n', '        \n', '        team.owner.transfer(prizes.LastSixteenWinner);\n', '        emit PrizePaid("Last Sixteen", _tokenId, team.owner, prizes.LastSixteenWinner, uint256(now));\n', '\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Last Sixteen",\n', '            amount: prizes.LastSixteenWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        lastSixteenWinnerPayments++;\n', '    }\n', '    \n', '    function lockInQuarterFinalPrize() public onlyContractModifier {\n', '        require(prizes.LastSixteenTotalFixed != false);\n', '        prizes.QuarterFinalTotalFixed = true;\n', '    }\n', '    \n', '    function payQuarterFinalWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.QuarterFinalTotalFixed != false);\n', '        require(quarterFinalWinnerPayments < 4);\n', '        require(tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 1);\n', '        Payout storage payout = team.payouts[0];\n', '        require(_compareStrings(payout.stage, "Last Sixteen"));\n', '\n', '        team.owner.transfer(prizes.QuarterFinalWinner);\n', '        emit PrizePaid("Quarter Final", _tokenId, team.owner, prizes.QuarterFinalWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Quarter Final",\n', '            amount: prizes.QuarterFinalWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        quarterFinalWinnerPayments++;\n', '    }\n', '    \n', '    function lockInSemiFinalPrize() public onlyContractModifier {\n', '        require(prizes.QuarterFinalTotalFixed != false);\n', '        prizes.SemiFinalTotalFixed = true;\n', '    }\n', '        \n', '    function paySemiFinalWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.SemiFinalTotalFixed != false);\n', '        require(semiFinalWinnerPayments < 2);\n', '        require(tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 2);\n', '        Payout storage payout = team.payouts[1];\n', '        require(_compareStrings(payout.stage, "Quarter Final"));\n', '        \n', '        team.owner.transfer(prizes.SemiFinalWinner);\n', '        emit PrizePaid("Semi Final", _tokenId, team.owner, prizes.SemiFinalWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Semi Final",\n', '            amount: prizes.SemiFinalWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        semiFinalWinnerPayments++;\n', '    }\n', '    \n', '    function payTournamentWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require (tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 3);\n', '        Payout storage payout = team.payouts[2];\n', '        require(_compareStrings(payout.stage, "Semi Final"));\n', '\n', '        team.owner.transfer(prizes.TournamentWinner);\n', '        emit PrizePaid("Final", _tokenId, team.owner, prizes.TournamentWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Final",\n', '            amount: prizes.TournamentWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        tournamentComplete = true;\n', '    }\n', '\n', '    function payExcess() public onlyContractModifier {\n', '        /* ONLY IF TOURNAMENT FINISHED AND THERE&#39;S EXCESS - THERE SHOULDN&#39;T BE */\n', '        /* ONLY IF TRADES OCCUR AFTER TOURNAMENT FINISHED */\n', '        require (tournamentComplete != false);\n', '        developerAddress.transfer(address(this).balance);\n', '    }\n', '\n', '    function getTeam(uint256 _tokenId) public view returns (uint256 id, string name, string code, uint256 cost, uint256 price, address owner, uint256 numPayouts) {\n', '        Team storage team = teams[_tokenId];\n', '        id = _tokenId;\n', '        name = team.name;\n', '        code = team.code;\n', '        cost = team.cost;\n', '        price = team.price;\n', '        owner = team.owner;\n', '        numPayouts = team.numPayouts;\n', '    }\n', '        \n', '    function getTeamPayouts(uint256 _tokenId, uint256 _payoutId) public view returns (uint256 id, string stage, uint256 amount, address to, uint256 when) {\n', '        Team storage team = teams[_tokenId];\n', '        Payout storage payout = team.payouts[_payoutId];\n', '        id = _payoutId;\n', '        stage = payout.stage;\n', '        amount = payout.amount;\n', '        to = payout.to;\n', '        when = payout.when;\n', '    }\n', '\n', '    // Allows someone to send ether and obtain the token\n', '    function buyTeam(uint256 _tokenId) public payable {\n', '        address from = teamOwners[_tokenId];\n', '        address to = msg.sender;\n', '        uint256 price = teamPrices[_tokenId];\n', '        \n', '\t    require(_addressNotNull(to));\n', '        require(from != to);\n', '        require(msg.value >= price);\n', '        \n', '        Team storage team = teams[_tokenId];\n', '\t    \n', '        uint256 purchaseExcess = SafeMath.sub(msg.value, price);\n', '        uint256 profit = SafeMath.sub(price, team.cost);\n', '        \n', '\t    // get 15% - 5 goes to dev and 10 stays in prize fund that is split during knockout stages\n', '\t    uint256 onePercent = SafeMath.div(profit, 100);\n', '\t    uint256 developerAllocation = SafeMath.mul(onePercent, 5);\n', '\t    uint256 saleProceeds = SafeMath.add(SafeMath.mul(onePercent, 85), team.cost);\n', '\t    uint256 fundProceeds = SafeMath.mul(onePercent, 10);\n', '\t    \n', '\t    _transfer(from, to, _tokenId);\n', '\t    \n', '\t    // Pay previous owner if owner is not contract\n', '        if (from != address(this)) {\n', '\t        from.transfer(saleProceeds);\n', '        }\n', '\n', '        // Pay developer\n', '        if (developerAddress != address(this)) {\n', '\t        developerAddress.transfer(developerAllocation);\n', '        }\n', '        \n', '        uint256 slice = 0;\n', '        \n', '        // Increase prize fund totals\n', '        if (!prizes.LastSixteenTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 4);\n', '            prizes.LastSixteenWinner += SafeMath.div(slice, 8);    \n', '            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \n', '            prizes.TournamentWinner += slice;    \n', '        } else if (!prizes.QuarterFinalTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 3);\n', '            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \n', '            prizes.TournamentWinner += slice;   \n', '        } else if (!prizes.SemiFinalTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 2);\n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);\n', '            prizes.TournamentWinner += slice;   \n', '        } else {\n', '            prizes.TournamentWinner += fundProceeds;   \n', '        }\n', '\t    \n', '\t\t// Set new price for team\n', '\t    uint256 newPrice = 0;\n', '        if (price < doublePriceUntil) {\n', '            newPrice = SafeMath.div(SafeMath.mul(price, 200), 100);\n', '        } else {\n', '            newPrice = SafeMath.div(SafeMath.mul(price, 115), 100);\n', '        }\n', '\t\t\n', '\t    teamPrices[_tokenId] = newPrice;\n', '\t    team.cost = price;\n', '\t    team.price = newPrice;\n', '\t    \n', '\t    emit TeamSold(_tokenId, from, price, to, newPrice, uint256(now), address(this).balance, prizes.LastSixteenWinner, prizes.QuarterFinalWinner, prizes.SemiFinalWinner, prizes.TournamentWinner);\n', '\t    \n', '\t    msg.sender.transfer(purchaseExcess);\n', '\t}\n', '\t\n', '    function getPrizeFund() public view returns (bool lastSixteenTotalFixed, uint256 lastSixteenWinner, bool quarterFinalTotalFixed, uint256 quarterFinalWinner, bool semiFinalTotalFixed, uint256 semiFinalWinner, uint256 tournamentWinner, uint256 total) {\n', '        lastSixteenTotalFixed = prizes.LastSixteenTotalFixed;\n', '        lastSixteenWinner = prizes.LastSixteenWinner;   \n', '        quarterFinalTotalFixed = prizes.QuarterFinalTotalFixed;\n', '        quarterFinalWinner = prizes.QuarterFinalWinner;\n', '        semiFinalTotalFixed = prizes.SemiFinalTotalFixed;\n', '        semiFinalWinner = prizes.SemiFinalWinner;\n', '        tournamentWinner = prizes.TournamentWinner;\n', '        total = address(this).balance;\n', '    }\n', '\n', '    /********----------- PRIVATE FUNCTIONS ------------********/\n', '    function _addressNotNull(address _to) private pure returns (bool) {\n', '        return _to != address(0);\n', '    }   \n', '    \n', '    function _createTeam(string _name, string _code, uint256 _price, address _owner) private {\n', '        Team memory team = Team({\n', '            name: _name,\n', '            code: _code,\n', '            cost: 0 ether,\n', '            price: _price,\n', '            owner: _owner,\n', '            numPayouts: 0\n', '        });\n', '\n', '        uint256 newTeamId = teams.push(team) - 1;\n', '        teamPrices[newTeamId] = _price;\n', '        \n', '        _transfer(address(0), _owner, newTeamId);\n', '    }\n', '    \n', '    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '        return teamToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '        ownerTeamCount[_to]++;\n', '        teamOwners[_tokenId] = _to;\n', '        \n', '        Team storage team = teams[_tokenId];\n', '        team.owner = _to;\n', '        \n', '        if (_from != address(0)) {\n', '          ownerTeamCount[_from]--;\n', '          delete teamToApproved[_tokenId];\n', '        }\n', '        \n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    function _owns(address _claimant, uint256 _tokenId) private view returns (bool) {\n', '        return _claimant == teamOwners[_tokenId];\n', '    }    \n', '    \n', '    function _compareStrings (string a, string b) private pure returns (bool){\n', '        return keccak256(a) == keccak256(b);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '}\n', '\n', 'contract CryptoCupToken is ERC721 {\n', '\n', '    // evsoftware.co.uk\n', '    // cryptocup.online\n', '\n', '    /*****------ EVENTS -----*****/\n', '    event TeamSold(uint256 indexed team, address indexed from, uint256 oldPrice, address indexed to, uint256 newPrice, uint256 tradingTime, uint256 balance, uint256 lastSixteenPrize, uint256 quarterFinalPrize, uint256 semiFinalPrize, uint256 winnerPrize);\n', '    event PrizePaid(string tournamentStage, uint256 indexed team, address indexed to, uint256 prize, uint256 time);\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    /*****------- CONSTANTS -------******/\n', '    uint256 private startingPrice = 0.001 ether;\n', '\tuint256 private doublePriceUntil = 0.1 ether;\n', '\tuint256 private lastSixteenWinnerPayments = 0;\n', '\tuint256 private quarterFinalWinnerPayments = 0;\n', '\tuint256 private semiFinalWinnerPayments = 0;\n', '\tbool private tournamentComplete = false;\n', '    \n', '    /*****------- STORAGE -------******/\n', '    mapping (uint256 => address) public teamOwners;\n', '    mapping (address => uint256) private ownerTeamCount;\n', '    mapping (uint256 => address) public teamToApproved;\n', '    mapping (uint256 => uint256) private teamPrices;\n', '    address public contractModifierAddress;\n', '    address public developerAddress;\n', '    \n', '    /*****------- DATATYPES -------******/\n', '    struct Team {\n', '        string name;\n', '        string code;\n', '        uint256 cost;\n', '        uint256 price;\n', '        address owner;\n', '        uint256 numPayouts;\n', '        mapping (uint256 => Payout) payouts;\n', '    }\n', '\n', '    struct Payout {\n', '        string stage;\n', '        uint256 amount;\n', '        address to;\n', '        uint256 when;\n', '    }\n', '\n', '    Team[] private teams;\n', '    \n', '    struct PayoutPrizes {\n', '        uint256 LastSixteenWinner;\n', '        bool LastSixteenTotalFixed;\n', '        uint256 QuarterFinalWinner;\n', '        bool QuarterFinalTotalFixed;\n', '        uint256 SemiFinalWinner;\n', '        bool SemiFinalTotalFixed;\n', '        uint256 TournamentWinner;\n', '    }\n', '    \n', '    PayoutPrizes private prizes;\n', '\n', '    /*****------- MODIFIERS -------******/\n', '    modifier onlyContractModifier() {\n', '        require(msg.sender == contractModifierAddress);\n', '        _;\n', '    }\n', '    \n', '    /*****------- CONSTRUCTOR -------******/\n', '    constructor() public {\n', '        contractModifierAddress = msg.sender;\n', '        developerAddress = msg.sender;\n', '\n', '        // Initialse Prize Totals\n', '        prizes.LastSixteenTotalFixed = false;\n', '        prizes.QuarterFinalTotalFixed = false;\n', '        prizes.SemiFinalTotalFixed = false;\n', '    }\n', '    \n', '    /*****------- PUBLIC FUNCTIONS -------******/\n', '    function name() public pure returns (string) {\n', '        return "CryptoCup";\n', '    }\n', '  \n', '    function symbol() public pure returns (string) {\n', '        return "CryptoCupToken";\n', '    }\n', '    \n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        owner = teamOwners[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '    \n', '    function takeOwnership(uint256 _tokenId) public {\n', '        address to = msg.sender;\n', '        address from = teamOwners[_tokenId];\n', '    \n', '        require(_addressNotNull(to));\n', '        require(_approved(to, _tokenId));\n', '    \n', '        _transfer(from, to, _tokenId);\n', '    }\n', '    \n', '    function approve(address _to, uint256 _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        teamToApproved[_tokenId] = _to;\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownerTeamCount[_owner];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 total) {\n', '        return teams.length;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '\tfunction destroy() public onlyContractModifier {\n', '\t\tselfdestruct(contractModifierAddress);\n', '    }\n', '\n', '    function setDeveloper(address _newDeveloperAddress) public onlyContractModifier {\n', '        require(_newDeveloperAddress != address(0));\n', '        developerAddress = _newDeveloperAddress;\n', '    }\n', '    \n', '    function createTeams() public onlyContractModifier {\n', '        _createTeam("Russia", "RUS", startingPrice, developerAddress);\n', '        _createTeam("Saudi Arabia", "KSA", startingPrice, developerAddress);\n', '        _createTeam("Egypt", "EGY", startingPrice, developerAddress);\n', '        _createTeam("Uruguay", "URU", startingPrice, developerAddress);\n', '        _createTeam("Portugal", "POR", startingPrice, developerAddress);\n', '        _createTeam("Spain", "SPA", startingPrice, developerAddress);\n', '        _createTeam("Morocco", "MOR", startingPrice, developerAddress);\n', '        _createTeam("Iran", "IRN", startingPrice, developerAddress);\n', '        _createTeam("France", "FRA", startingPrice, developerAddress);\n', '        _createTeam("Australia", "AUS", startingPrice, developerAddress);\n', '        _createTeam("Peru", "PER", startingPrice, developerAddress);\n', '        _createTeam("Denmark", "DEN", startingPrice, developerAddress);\n', '        _createTeam("Argentina", "ARG", startingPrice, developerAddress);\n', '        _createTeam("Iceland", "ICE", startingPrice, developerAddress);\n', '        _createTeam("Croatia", "CRO", startingPrice, developerAddress);\n', '        _createTeam("Nigeria", "NGA", startingPrice, developerAddress);\n', '        _createTeam("Brazil", "BRZ", startingPrice, developerAddress);\n', '        _createTeam("Switzerland", "SWI", startingPrice, developerAddress);\n', '        _createTeam("Costa Rica", "CRC", startingPrice, developerAddress);\n', '        _createTeam("Serbia", "SER", startingPrice, developerAddress);\n', '        _createTeam("Germany", "GER", startingPrice, developerAddress);\n', '        _createTeam("Mexico", "MEX", startingPrice, developerAddress);\n', '        _createTeam("Sweden", "SWE", startingPrice, developerAddress);\n', '        _createTeam("South Korea", "KOR", startingPrice, developerAddress);\n', '        _createTeam("Belgium", "BEL", startingPrice, developerAddress);\n', '        _createTeam("Panama", "PAN", startingPrice, developerAddress);\n', '        _createTeam("Tunisia", "TUN", startingPrice, developerAddress);\n', '        _createTeam("England", "ENG", startingPrice, developerAddress);\n', '        _createTeam("Poland", "POL", startingPrice, developerAddress);\n', '        _createTeam("Senegal", "SEN", startingPrice, developerAddress);\n', '        _createTeam("Colombia", "COL", startingPrice, developerAddress);\n', '        _createTeam("Japan", "JPN", startingPrice, developerAddress);\n', '    }\n', '    \n', '    function createTeam(string name, string code) public onlyContractModifier {\n', '        _createTeam(name, code, startingPrice, developerAddress);\n', '    }\n', '    \n', '    function lockInLastSixteenPrize() public onlyContractModifier {\n', '        prizes.LastSixteenTotalFixed = true;\n', '    }\n', '    \n', '    function payLastSixteenWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.LastSixteenTotalFixed != false);\n', '        require(lastSixteenWinnerPayments < 8);\n', '        require(tournamentComplete != true);\n', '        \n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 0);\n', '        \n', '        team.owner.transfer(prizes.LastSixteenWinner);\n', '        emit PrizePaid("Last Sixteen", _tokenId, team.owner, prizes.LastSixteenWinner, uint256(now));\n', '\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Last Sixteen",\n', '            amount: prizes.LastSixteenWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        lastSixteenWinnerPayments++;\n', '    }\n', '    \n', '    function lockInQuarterFinalPrize() public onlyContractModifier {\n', '        require(prizes.LastSixteenTotalFixed != false);\n', '        prizes.QuarterFinalTotalFixed = true;\n', '    }\n', '    \n', '    function payQuarterFinalWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.QuarterFinalTotalFixed != false);\n', '        require(quarterFinalWinnerPayments < 4);\n', '        require(tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 1);\n', '        Payout storage payout = team.payouts[0];\n', '        require(_compareStrings(payout.stage, "Last Sixteen"));\n', '\n', '        team.owner.transfer(prizes.QuarterFinalWinner);\n', '        emit PrizePaid("Quarter Final", _tokenId, team.owner, prizes.QuarterFinalWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Quarter Final",\n', '            amount: prizes.QuarterFinalWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        quarterFinalWinnerPayments++;\n', '    }\n', '    \n', '    function lockInSemiFinalPrize() public onlyContractModifier {\n', '        require(prizes.QuarterFinalTotalFixed != false);\n', '        prizes.SemiFinalTotalFixed = true;\n', '    }\n', '        \n', '    function paySemiFinalWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require(prizes.SemiFinalTotalFixed != false);\n', '        require(semiFinalWinnerPayments < 2);\n', '        require(tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 2);\n', '        Payout storage payout = team.payouts[1];\n', '        require(_compareStrings(payout.stage, "Quarter Final"));\n', '        \n', '        team.owner.transfer(prizes.SemiFinalWinner);\n', '        emit PrizePaid("Semi Final", _tokenId, team.owner, prizes.SemiFinalWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Semi Final",\n', '            amount: prizes.SemiFinalWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        semiFinalWinnerPayments++;\n', '    }\n', '    \n', '    function payTournamentWinner(uint256 _tokenId) public onlyContractModifier {\n', '        require (tournamentComplete != true);\n', '        Team storage team = teams[_tokenId];\n', '        require(team.numPayouts == 3);\n', '        Payout storage payout = team.payouts[2];\n', '        require(_compareStrings(payout.stage, "Semi Final"));\n', '\n', '        team.owner.transfer(prizes.TournamentWinner);\n', '        emit PrizePaid("Final", _tokenId, team.owner, prizes.TournamentWinner, uint256(now));\n', '        team.payouts[team.numPayouts++] = Payout({\n', '            stage: "Final",\n', '            amount: prizes.TournamentWinner,\n', '            to: team.owner,\n', '            when: uint256(now)\n', '        });\n', '        \n', '        tournamentComplete = true;\n', '    }\n', '\n', '    function payExcess() public onlyContractModifier {\n', "        /* ONLY IF TOURNAMENT FINISHED AND THERE'S EXCESS - THERE SHOULDN'T BE */\n", '        /* ONLY IF TRADES OCCUR AFTER TOURNAMENT FINISHED */\n', '        require (tournamentComplete != false);\n', '        developerAddress.transfer(address(this).balance);\n', '    }\n', '\n', '    function getTeam(uint256 _tokenId) public view returns (uint256 id, string name, string code, uint256 cost, uint256 price, address owner, uint256 numPayouts) {\n', '        Team storage team = teams[_tokenId];\n', '        id = _tokenId;\n', '        name = team.name;\n', '        code = team.code;\n', '        cost = team.cost;\n', '        price = team.price;\n', '        owner = team.owner;\n', '        numPayouts = team.numPayouts;\n', '    }\n', '        \n', '    function getTeamPayouts(uint256 _tokenId, uint256 _payoutId) public view returns (uint256 id, string stage, uint256 amount, address to, uint256 when) {\n', '        Team storage team = teams[_tokenId];\n', '        Payout storage payout = team.payouts[_payoutId];\n', '        id = _payoutId;\n', '        stage = payout.stage;\n', '        amount = payout.amount;\n', '        to = payout.to;\n', '        when = payout.when;\n', '    }\n', '\n', '    // Allows someone to send ether and obtain the token\n', '    function buyTeam(uint256 _tokenId) public payable {\n', '        address from = teamOwners[_tokenId];\n', '        address to = msg.sender;\n', '        uint256 price = teamPrices[_tokenId];\n', '        \n', '\t    require(_addressNotNull(to));\n', '        require(from != to);\n', '        require(msg.value >= price);\n', '        \n', '        Team storage team = teams[_tokenId];\n', '\t    \n', '        uint256 purchaseExcess = SafeMath.sub(msg.value, price);\n', '        uint256 profit = SafeMath.sub(price, team.cost);\n', '        \n', '\t    // get 15% - 5 goes to dev and 10 stays in prize fund that is split during knockout stages\n', '\t    uint256 onePercent = SafeMath.div(profit, 100);\n', '\t    uint256 developerAllocation = SafeMath.mul(onePercent, 5);\n', '\t    uint256 saleProceeds = SafeMath.add(SafeMath.mul(onePercent, 85), team.cost);\n', '\t    uint256 fundProceeds = SafeMath.mul(onePercent, 10);\n', '\t    \n', '\t    _transfer(from, to, _tokenId);\n', '\t    \n', '\t    // Pay previous owner if owner is not contract\n', '        if (from != address(this)) {\n', '\t        from.transfer(saleProceeds);\n', '        }\n', '\n', '        // Pay developer\n', '        if (developerAddress != address(this)) {\n', '\t        developerAddress.transfer(developerAllocation);\n', '        }\n', '        \n', '        uint256 slice = 0;\n', '        \n', '        // Increase prize fund totals\n', '        if (!prizes.LastSixteenTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 4);\n', '            prizes.LastSixteenWinner += SafeMath.div(slice, 8);    \n', '            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \n', '            prizes.TournamentWinner += slice;    \n', '        } else if (!prizes.QuarterFinalTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 3);\n', '            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \n', '            prizes.TournamentWinner += slice;   \n', '        } else if (!prizes.SemiFinalTotalFixed) {\n', '            slice = SafeMath.div(fundProceeds, 2);\n', '            prizes.SemiFinalWinner += SafeMath.div(slice, 2);\n', '            prizes.TournamentWinner += slice;   \n', '        } else {\n', '            prizes.TournamentWinner += fundProceeds;   \n', '        }\n', '\t    \n', '\t\t// Set new price for team\n', '\t    uint256 newPrice = 0;\n', '        if (price < doublePriceUntil) {\n', '            newPrice = SafeMath.div(SafeMath.mul(price, 200), 100);\n', '        } else {\n', '            newPrice = SafeMath.div(SafeMath.mul(price, 115), 100);\n', '        }\n', '\t\t\n', '\t    teamPrices[_tokenId] = newPrice;\n', '\t    team.cost = price;\n', '\t    team.price = newPrice;\n', '\t    \n', '\t    emit TeamSold(_tokenId, from, price, to, newPrice, uint256(now), address(this).balance, prizes.LastSixteenWinner, prizes.QuarterFinalWinner, prizes.SemiFinalWinner, prizes.TournamentWinner);\n', '\t    \n', '\t    msg.sender.transfer(purchaseExcess);\n', '\t}\n', '\t\n', '    function getPrizeFund() public view returns (bool lastSixteenTotalFixed, uint256 lastSixteenWinner, bool quarterFinalTotalFixed, uint256 quarterFinalWinner, bool semiFinalTotalFixed, uint256 semiFinalWinner, uint256 tournamentWinner, uint256 total) {\n', '        lastSixteenTotalFixed = prizes.LastSixteenTotalFixed;\n', '        lastSixteenWinner = prizes.LastSixteenWinner;   \n', '        quarterFinalTotalFixed = prizes.QuarterFinalTotalFixed;\n', '        quarterFinalWinner = prizes.QuarterFinalWinner;\n', '        semiFinalTotalFixed = prizes.SemiFinalTotalFixed;\n', '        semiFinalWinner = prizes.SemiFinalWinner;\n', '        tournamentWinner = prizes.TournamentWinner;\n', '        total = address(this).balance;\n', '    }\n', '\n', '    /********----------- PRIVATE FUNCTIONS ------------********/\n', '    function _addressNotNull(address _to) private pure returns (bool) {\n', '        return _to != address(0);\n', '    }   \n', '    \n', '    function _createTeam(string _name, string _code, uint256 _price, address _owner) private {\n', '        Team memory team = Team({\n', '            name: _name,\n', '            code: _code,\n', '            cost: 0 ether,\n', '            price: _price,\n', '            owner: _owner,\n', '            numPayouts: 0\n', '        });\n', '\n', '        uint256 newTeamId = teams.push(team) - 1;\n', '        teamPrices[newTeamId] = _price;\n', '        \n', '        _transfer(address(0), _owner, newTeamId);\n', '    }\n', '    \n', '    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '        return teamToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '        ownerTeamCount[_to]++;\n', '        teamOwners[_tokenId] = _to;\n', '        \n', '        Team storage team = teams[_tokenId];\n', '        team.owner = _to;\n', '        \n', '        if (_from != address(0)) {\n', '          ownerTeamCount[_from]--;\n', '          delete teamToApproved[_tokenId];\n', '        }\n', '        \n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    function _owns(address _claimant, uint256 _tokenId) private view returns (bool) {\n', '        return _claimant == teamOwners[_tokenId];\n', '    }    \n', '    \n', '    function _compareStrings (string a, string b) private pure returns (bool){\n', '        return keccak256(a) == keccak256(b);\n', '    }\n', '}']
