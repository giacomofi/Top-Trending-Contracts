['pragma solidity ^0.4.18;\n', '\n', 'contract Hypes {\n', '  event NewOne(address owner, uint256 cost, uint256 new_price);\n', '\n', '  struct Hype {\n', '    address owner;\n', '    uint256 cost;\n', '  }\n', '\n', '  mapping (uint256 => Hype) public hypes;\n', '  mapping (address => string) public msgs;\n', '\n', '  address public ceoAddress;\n', '  uint256 public seatPrice = 2500000000000000;\n', '\n', '  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\n', '\n', '  function Hypes() public {\n', '    ceoAddress = msg.sender;\n', '    hypes[1] = Hype(msg.sender, 0);\n', '    hypes[2] = Hype(msg.sender, 0);\n', '    hypes[3] = Hype(msg.sender, 0);\n', '    hypes[4] = Hype(msg.sender, 0);\n', '    hypes[5] = Hype(msg.sender, 0);\n', '    hypes[6] = Hype(msg.sender, 0);\n', '    hypes[7] = Hype(msg.sender, 0);\n', '    hypes[8] = Hype(msg.sender, 0);\n', '    hypes[9] = Hype(msg.sender, 0);\n', '    msgs[msg.sender] = "Claim this spot!";\n', '  }\n', '\n', '  function getHype(uint256 _slot) public view returns (\n', '    uint256 slot,\n', '    address owner,\n', '    uint256 cost,\n', '    string message\n', '  ) {\n', '    slot = _slot;\n', '    owner = hypes[_slot].owner;\n', '    cost = hypes[_slot].cost;\n', '    message = msgs[hypes[_slot].owner];\n', '  }\n', '\n', '  function purchase() public payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= seatPrice);\n', '    uint256 excess = SafeMath.sub(msg.value, seatPrice);\n', '    hypes[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 2)));\n', '    hypes[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 4)));\n', '    hypes[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 6)));\n', '    hypes[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 8)));\n', '    hypes[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 10)));\n', '    hypes[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 12)));\n', '    hypes[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 14)));\n', '    hypes[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 16)));\n', '    hypes[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 18)));\n', '    hypes[9] = hypes[8]; hypes[8] = hypes[7]; hypes[7] = hypes[6];\n', '    hypes[6] = hypes[5]; hypes[5] = hypes[4]; hypes[4] = hypes[3];\n', '    hypes[3] = hypes[2]; hypes[2] = hypes[1];\n', '    hypes[1] = Hype(msg.sender, seatPrice);\n', '    ceoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 10)));\n', '    NewOne(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 120));\n', '    seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 120);\n', '    msg.sender.transfer(excess);\n', '  }\n', '\n', '  function setMessage(string message) public payable {\n', '    msgs[msg.sender] = message;\n', '  }\n', '\n', '  function payout() public onlyCEO {\n', '    ceoAddress.transfer(this.balance);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Hypes {\n', '  event NewOne(address owner, uint256 cost, uint256 new_price);\n', '\n', '  struct Hype {\n', '    address owner;\n', '    uint256 cost;\n', '  }\n', '\n', '  mapping (uint256 => Hype) public hypes;\n', '  mapping (address => string) public msgs;\n', '\n', '  address public ceoAddress;\n', '  uint256 public seatPrice = 2500000000000000;\n', '\n', '  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\n', '\n', '  function Hypes() public {\n', '    ceoAddress = msg.sender;\n', '    hypes[1] = Hype(msg.sender, 0);\n', '    hypes[2] = Hype(msg.sender, 0);\n', '    hypes[3] = Hype(msg.sender, 0);\n', '    hypes[4] = Hype(msg.sender, 0);\n', '    hypes[5] = Hype(msg.sender, 0);\n', '    hypes[6] = Hype(msg.sender, 0);\n', '    hypes[7] = Hype(msg.sender, 0);\n', '    hypes[8] = Hype(msg.sender, 0);\n', '    hypes[9] = Hype(msg.sender, 0);\n', '    msgs[msg.sender] = "Claim this spot!";\n', '  }\n', '\n', '  function getHype(uint256 _slot) public view returns (\n', '    uint256 slot,\n', '    address owner,\n', '    uint256 cost,\n', '    string message\n', '  ) {\n', '    slot = _slot;\n', '    owner = hypes[_slot].owner;\n', '    cost = hypes[_slot].cost;\n', '    message = msgs[hypes[_slot].owner];\n', '  }\n', '\n', '  function purchase() public payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= seatPrice);\n', '    uint256 excess = SafeMath.sub(msg.value, seatPrice);\n', '    hypes[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 2)));\n', '    hypes[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 4)));\n', '    hypes[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 6)));\n', '    hypes[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 8)));\n', '    hypes[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 10)));\n', '    hypes[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 12)));\n', '    hypes[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 14)));\n', '    hypes[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 16)));\n', '    hypes[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 18)));\n', '    hypes[9] = hypes[8]; hypes[8] = hypes[7]; hypes[7] = hypes[6];\n', '    hypes[6] = hypes[5]; hypes[5] = hypes[4]; hypes[4] = hypes[3];\n', '    hypes[3] = hypes[2]; hypes[2] = hypes[1];\n', '    hypes[1] = Hype(msg.sender, seatPrice);\n', '    ceoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 10)));\n', '    NewOne(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 120));\n', '    seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 120);\n', '    msg.sender.transfer(excess);\n', '  }\n', '\n', '  function setMessage(string message) public payable {\n', '    msgs[msg.sender] = message;\n', '  }\n', '\n', '  function payout() public onlyCEO {\n', '    ceoAddress.transfer(this.balance);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
