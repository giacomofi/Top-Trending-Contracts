['pragma solidity ^0.4.24;\n', '\n', 'contract SWAP{\n', ' \n', ' string public name="SWAP";\n', ' string public symbol="SWAP";\n', ' \n', ' uint256 public totalSupply; \n', ' uint256 public price = 50;\n', ' uint256 public decimals = 18; \n', '\n', ' address Owner;\n', ' \n', ' mapping (address => uint256) balances; \n', ' \n', ' function SWAP() public { \n', ' Owner = msg.sender;\n', ' name="SWAP";\n', ' symbol="SWAP";\n', ' totalSupply = 100000000000*10**18;\n', ' balances[Owner] = totalSupply;\n', ' }\n', '\n', ' modifier onlyOwner(){\n', ' require(msg.sender == Owner);\n', ' _;\n', ' }\n', '\n', ' modifier validAddress(address _to){\n', ' require(_to != address(0x00));\n', ' _;\n', ' }\n', ' \n', ' event Burn(address indexed from, uint256 value);\n', ' event Transfer(address indexed from, address indexed to, uint256 value);\n', ' event Withdraw(address to, uint amount);\n', ' \n', '\n', ' function setName(string _name) onlyOwner public returns (string){\n', ' name = _name;\n', ' return name;\n', ' }\n', '\n', ' function setPrice(uint256 _price) onlyOwner public returns (uint256){\n', ' price = _price;\n', ' return price;\n', ' }\n', '\n', ' function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\n', ' decimals = _decimals;\n', ' return decimals;\n', ' }\n', ' \n', ' function balanceOf(address _owner) view public returns(uint256){\n', ' return balances[_owner];\n', ' }\n', ' function getOwner() view public returns(address){\n', ' return Owner;\n', ' }\n', ' \n', ' function _transfer(address _from, address _to, uint _value) internal {\n', ' require(_to != 0x0);\n', ' require(balances[_from] >= _value);\n', ' require(balances[_to] + _value >= balances[_to]);\n', ' \n', ' uint previousBalances = balances[_from] + balances[_to];\n', ' \n', ' balances[_from] -= _value;\n', ' balances[_to] += _value;\n', ' emit Transfer(_from, _to, _value);\n', ' \n', ' assert(balances[_from] + balances[_to] == previousBalances);\n', ' }\n', '\n', ' function transfer(address _to, uint256 _value) public {\n', ' _transfer(msg.sender, _to, _value);\n', ' }\n', ' \n', ' function () public payable {\n', ' uint256 token = (msg.value*price)/10**decimals;\n', ' if(msg.sender == Owner){\n', ' totalSupply += token;\n', ' balances[Owner] += token;\n', ' }\n', ' else{\n', ' require(balances[Owner]>=token);\n', ' _transfer(Owner, msg.sender, token);\n', ' }\n', ' }\n', ' function create(uint256 _value) public onlyOwner returns (bool success) {\n', ' totalSupply += _value;\n', ' balances[Owner] += _value;\n', ' return true;\n', ' }\n', ' \n', ' function burn(uint256 _value) onlyOwner public returns (bool success) {\n', ' require(balances[msg.sender] >= _value); \n', ' balances[msg.sender] -= _value; \n', ' totalSupply -= _value; \n', ' emit Burn(msg.sender, _value);\n', ' return true;\n', ' }\n', '\n', ' function withdrawAll() external onlyOwner{\n', ' msg.sender.transfer(address(this).balance);\n', ' emit Withdraw(msg.sender,address(this).balance);\n', ' }\n', '\n', ' function withdrawAmount(uint amount) external onlyOwner{\n', ' msg.sender.transfer(amount);\n', ' emit Withdraw(msg.sender,amount);\n', ' }\n', '\n', ' function sendEtherToAddress(address to, uint amount) external onlyOwner validAddress(to){\n', ' to.transfer(amount);\n', ' uint profit = amount/100;\n', ' msg.sender.transfer(profit);\n', ' }\n', '}']