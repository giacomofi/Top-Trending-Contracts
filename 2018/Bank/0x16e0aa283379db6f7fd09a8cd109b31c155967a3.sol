['pragma solidity ^0.4.25;\n', '\n', '/*\n', '\n', '    Lambo Lotto Win | Dapps game for real crypto human\n', '    site: https://llotto.win/\n', '    telegram: https://t.me/Lambollotto/\n', '    discord: https://discord.gg/VWV5jeW/\n', '    \n', '    Rules of the game:\n', '    - Jackpot from 0.1 Ether;    \n', '    - Jackpot is currently 1.5% of the turnover for the jackpot period;    \n', '    - 2.5% of the bet goes to the next jackpot;   \n', '    - jackpot win number 888 (may vary during games);      \n', '    - in case of a jackpot from 0 to 15, the player wins a small jackpot which is equal to 0.5 of the turnover during the jackpot period;\n', '    - when the jackpot is between 500 and 515, the player wins the small jackpot which is equal to 0.3 of the turnover during the jackpot period;\n', '    - the minimum win is 15% of the bet amount, the maximum win is 150% (may be changed by the administration during the game but does not affect the existing bets);\n', '    - administration commission of 2.5% + 2.5% for the development and maintenance of the project;\n', '    - the administration also reserves the right to dispose of the entire bank including jackpots in the event of termination of interest in the game from the users ( \n', 'what happened in Las Vegas stays in Las Vegas:) );\n', '    - there is an opportunity to add marketing wallets if you are interested in advertising our project;\n', '\n', '*/\n', '\n', 'contract lambolotto {\n', '    \n', '    using SafeMath\n', '    for uint;\n', '\n', '    modifier onlyAdministrator(){    \n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyActive(){    \n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '    \n', '\tmodifier onlyHumans() { \n', '\t    require (msg.sender == tx.origin, "only approved contracts allowed"); \n', '\t    _; \n', '\t  }     \n', '\n', '    constructor () public {\n', '    \n', '        administrators[msg.sender] = true;          \n', '    }\n', '    \n', '    uint templeContractPercent = 0;\n', '    \n', '    address private adminGet;\n', '\taddress private promoGet;\n', '    \n', '    uint public forAdminGift = 25;\n', '    \n', '    uint public jackPot_percent_now = 15;\n', '    uint public jackPot_percent_next = 25;\n', '    \n', '    uint public jackPotWin = 888;\n', '    uint public jackPotWinMinAmount = 0.1 ether;\n', '    uint public maxBetsVolume = 10 ether;\n', '    \n', '    uint public jackPot_little_first = 5;\n', '    uint public jackPot_little_first_min = 0;    \n', '    uint public jackPot_little_first_max = 15;\n', '    \n', '    uint public jackPot_little_second = 3;\n', '    uint public jackPot_little_second_min = 500;    \n', '    uint public jackPot_little_second_max = 515;\n', '    \n', '    uint public addPercent = 15;\n', '    \n', '    uint public rand_pmin = 0;\n', '    uint public rand_pmax = 1350; \n', '    \n', '    uint public rand_jmin = 0;\n', '    uint public rand_jmax = 1000;\n', '\n', '    uint public currentReceiverIndex;\n', '    uint public totalInvested;\n', '\n', '    uint public betsNum;\n', '    uint public jackPot_now;\n', '    uint public jackPot_next;\n', '    uint public jackPot_lf;\n', '    uint public jackPot_ls;    \n', '    \n', '    uint public jackPotNum = 0;\n', '    uint public jackPotLFNum = 0;\n', '    uint public jackPotLSNum = 0;\n', '    \n', '    struct Deposit {\n', '    \n', '        address depositor;\n', '        uint deposit;\n', '        uint winAmount;\n', '        uint depositJackPotValue;\n', '        uint payout;\n', '    }\n', '    \n', '    Deposit[] public queue;\n', '    \n', '    uint nonce;\n', '    \n', '    bool public boolContractActive = true;    \n', '    mapping(address => bool) public administrators;   \n', '    \n', '    address mkt = 0x0;\n', '    uint mktRate = 0;\n', '\n', '    event bets(\n', '        address indexed customerAddress,\n', '        uint timestamp,\n', '        uint amount,\n', '        uint winAmount,\n', '        uint jackPotValue,\n', '        uint payout\n', '    );\n', '\n', '    event jackPot(\n', '        uint indexed numIndex,\n', '        address customerAddress,\n', '        uint timestamp,\n', '        uint jackAmount\n', '    );\n', '\n', '    event jackPotLittleFirst(\n', '        uint indexed numIndex,\n', '        address customerAddress,\n', '        uint timestamp,\n', '        uint jackAmount\n', '    );\n', '\n', '    event jackPotLitteleSecond(\n', '        uint indexed numIndex,\n', '        address customerAddress,\n', '        uint timestamp,\n', '        uint jackAmount\n', '    );\n', '    \n', '    function ()\n', '        onlyActive()\n', '        onlyHumans()\n', '        public payable{\n', '\n', '        if(msg.value > 0){\n', '        \n', '            require(gasleft() >= 250000); \n', '            require(msg.value >= 0.001 ether && msg.value <= maxBetsVolume);\n', '            \n', '            uint winningNumber = rand(rand_pmin, rand_pmax);\n', '\n', '            totalInvested += msg.value;\n', '            jackPot_now += msg.value.mul(jackPot_percent_now).div(1000);\n', '            jackPot_next += msg.value.mul(jackPot_percent_next).div(1000);\n', '            \n', '            jackPot_lf += msg.value.mul(jackPot_little_first).div(1000);\n', '            jackPot_ls += msg.value.mul(jackPot_little_second).div(1000);\n', '            \n', '            betsNum++;\n', '            \n', '            uint depositJPV = 0;\n', '            \n', '            if( msg.value >= jackPotWinMinAmount)\n', '            {                \n', '                depositJPV = rand(rand_jmin, rand_jmax);\n', '            \n', '                if (depositJPV == jackPotWin){     \n', '\n', '                        msg.sender.transfer(jackPot_now);                        \n', '                        jackPotNum++;\n', '                        \n', '                        emit jackPot(jackPotNum,  msg.sender, now, jackPot_now );\n', '\n', '                        jackPot_now = jackPot_next;  \n', '                        jackPot_next = 0;\n', '                }\n', '                \n', '                if ( depositJPV > jackPot_little_first_min && depositJPV <= jackPot_little_first_max){     \n', '\n', '                        msg.sender.transfer(jackPot_lf);   \n', '                        jackPotLFNum++;\n', '                                        \n', '                        emit jackPotLittleFirst(jackPotLFNum,  msg.sender, now, jackPot_lf );\n', '                        \n', '                        jackPot_lf = 0; \n', '                }\n', '                \n', '                if ( depositJPV >= jackPot_little_second_min && depositJPV <= jackPot_little_second_max){     \n', '\n', '                        msg.sender.transfer(jackPot_ls);                        \n', '                        jackPotLSNum++;                        \n', '                        emit jackPotLitteleSecond(jackPotLSNum,  msg.sender, now, jackPot_ls );\n', '                        \n', '                        jackPot_ls = 0;\n', '                }\n', '                \n', '                uint totalPayout = msg.value.mul(winningNumber.div(10).add(addPercent)).div(100);\n', '                            \n', '                emit bets(msg.sender, now, msg.value, winningNumber, depositJPV, totalPayout);\n', '                \n', '            }\n', '            \n', '            queue.push( Deposit(msg.sender, msg.value, winningNumber, depositJPV, 0) );\n', '            \n', '            uint adminGetValue = msg.value.mul(forAdminGift).div(1000); \n', '            adminGet.transfer(adminGetValue);\n', '            \n', '\t\t\tuint promoGetValue = msg.value.mul(forAdminGift).div(1000);\n', '            promoGet.transfer(promoGetValue);\n', '            \n', '            if (mkt != 0x0 && mktRate != 0){\n', '                \n', '                uint mktGetValue = msg.value.mul(mktRate).div(1000);\n', '                mkt.transfer(mktGetValue);                \n', '            }\n', '            \n', '            pay();\n', '        }\n', '    }\n', '\n', '    function pay() internal {\n', '\n', '        uint money = address(this).balance.sub(jackPot_now.add(jackPot_next).add(jackPot_lf).add(jackPot_ls));\n', '        \n', '        for (uint i = 0; i < queue.length; i++){   \n', '        \n', '            uint idx = currentReceiverIndex.add(i); \n', '                \n', '                if(idx <= queue.length.sub(1)){\n', '                \n', '                    Deposit storage dep = queue[idx]; \n', '                    uint totalPayout = dep.deposit.mul(dep.winAmount.div(10).add(addPercent)).div(100);\n', '\n', '                    if(totalPayout > dep.payout) { uint leftPayout = totalPayout.sub(dep.payout); }\n', '\n', '                    if(money >= leftPayout){ \n', '                    \n', '                        if (leftPayout > 0){                        \n', '                            dep.depositor.transfer(leftPayout); \n', '                            dep.payout += leftPayout;                                                   \n', '                            money -= leftPayout; \n', '                        }\n', '\n', '                    }else{\n', '                        dep.depositor.transfer(money); \n', '                        dep.payout += money;   \n', '                        break; \n', '                    }\n', '\n', '                    if(gasleft() <= 55000){ break; }   \n', '                    \n', '                }else{ break; }                \n', '        }\n', '        currentReceiverIndex += i; \n', '    }\n', '    \n', '    function rand(uint minValue, uint maxValue) internal returns (uint){\n', '    \n', '        nonce++;        \n', '        uint nonce_ = block.difficulty.div(block.number).mul(now).mod(nonce);        \n', '        uint mixUint = SafeMath.sub(SafeMath.mod(uint(keccak256(abi.encodePacked(nonce_))), SafeMath.add(minValue,maxValue)), minValue);\n', '        nonce += mixUint; \n', '        return mixUint;        \n', '    }\n', ' \n', '    function donate()\n', '        public payable{        \n', '    } \n', '\n', '    function setJackPotNowValue()\n', '        onlyAdministrator()\n', '        public payable{\n', '      \n', '        require(msg.value > jackPot_now);      \n', '        jackPot_now = msg.value;     \n', '    } \n', '    \n', '    function setJackPotNextValue()\n', '        onlyAdministrator()\n', '        public payable{\n', '      \n', '        require(msg.value > jackPot_next);      \n', '        jackPot_next = msg.value;     \n', '    } \n', '    \n', '    function setJackPotLFValue()\n', '        onlyAdministrator()\n', '        public payable{\n', '      \n', '        require(msg.value > jackPot_lf);      \n', '        jackPot_lf = msg.value;     \n', '    }  \n', '    \n', '    function setJackPotLSValue()\n', '        onlyAdministrator()\n', '        public payable{\n', '      \n', '        require(msg.value > jackPot_ls);      \n', '        jackPot_ls =  msg.value;     \n', '    }     \n', '\n', '    function setjackPotLillteF(uint _newJPLF)\n', '        onlyAdministrator()\n', '        public{\n', '      \n', '        jackPot_little_first = _newJPLF;     \n', '    }       \n', '    \n', '    function setjackPotLillteS(uint _newJPLS)\n', '        onlyAdministrator()\n', '        public{\n', '      \n', '        jackPot_little_second =  _newJPLS;     \n', '    }    \n', '    \n', '    function setMarket(address _newMkt)\n', '        onlyAdministrator()\n', '        public{\n', '      \n', '        mkt =  _newMkt;     \n', '    }\n', '    \n', '    function setMarketingRates(uint _newMktRate)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        mktRate =  _newMktRate;\n', '    }  \n', '\n', '    function setAdminGet(address _newAdminGet)\n', '        onlyAdministrator()\n', '        public{\n', '      \n', '        adminGet =  _newAdminGet;     \n', '    }     \n', '    \n', '    function setPromoGet(address _newPromoGet)\n', '        onlyAdministrator()\n', '        public{\n', '      \n', '        promoGet =  _newPromoGet;     \n', '    }   \n', '\n', '    function setForAdminGift(uint _newAdminGift)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        forAdminGift =  _newAdminGift;\n', '    }      \n', '    \n', '   function setJeckPotPercentNow(uint _newJeckPotPercentNow)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        jackPot_percent_now =  _newJeckPotPercentNow;\n', '    }  \n', ' \n', '   function setJeckPotPercentNext(uint _newJeckPotPercentNext)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        jackPot_percent_next =  _newJeckPotPercentNext;\n', '    }   \n', ' \n', '   function setJeckPotWin(uint _newJeckPotWin)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        jackPotWin =  _newJeckPotWin;\n', '    } \n', '    \n', '   function setAddPercent(uint _newAddPercent)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        addPercent =  _newAddPercent;\n', '    } \n', '\n', '   function setRandPMax(uint _newRandPMax)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        rand_pmax =  _newRandPMax;\n', '    }\n', '\n', '   function setRandJMax(uint _newRandJMax)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        rand_jmax =  _newRandJMax;\n', '    }\n', '    \n', '   function setNonce(uint _newNonce)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        nonce =  _newNonce;\n', '    }    \n', ' \n', '   function setNewMaxVolume(uint _newMaxVol)\n', '        onlyAdministrator()\n', '        public{\n', '       \n', '        maxBetsVolume =  _newMaxVol;\n', '    }    \n', '    \n', '    function setContractActive(bool _status)\n', '        onlyAdministrator()\n', '        public{\n', '        \n', '        boolContractActive = _status;\n', '        \n', '    } \n', '    \n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public{\n', '        \n', '        administrators[_identifier] = _status;\n', '    } \n', '    \n', '    function getAllDepoIfGameStop() \n', '        onlyAdministrator()\n', '        public{        \n', '        \n', '        jackPot_now = 0;\n', '        jackPot_next = 0;\n', '        jackPot_lf = 0;\n', '        jackPot_ls = 0;\n', '        \n', '        uint money = address(this).balance;\n', '        adminGet.transfer(money);\n', '    }\n', '\n', '\n', '}    \n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']