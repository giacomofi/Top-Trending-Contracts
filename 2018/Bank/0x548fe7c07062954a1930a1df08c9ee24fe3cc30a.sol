['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public contractOwner;\n', '\n', '  event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    contractOwner = msg.sender;\n', '  }\n', '\n', '  modifier onlyContractOwner() {\n', '    require(msg.sender == contractOwner);\n', '    _;\n', '  }\n', '\n', '  function transferContractOwnership(address _newOwner) public onlyContractOwner {\n', '    require(_newOwner != address(0));\n', '    ContractOwnershipTransferred(contractOwner, _newOwner);\n', '    contractOwner = _newOwner;\n', '  }\n', '  \n', '  function payoutFromContract() public onlyContractOwner {\n', '      contractOwner.transfer(this.balance);\n', '  }  \n', '\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="3f5b5a4b5a7f5e47565052455a51115c50">[email&#160;protected]</span>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract CryptoDrinks is ERC721, Ownable {\n', '\n', '  event DrinkCreated(uint256 tokenId, string name, address owner);\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  string public constant NAME = "CryptoDrinks";\n', '  string public constant SYMBOL = "DrinksToken";\n', '\n', '  uint256 private startingPrice = 0.02 ether;\n', '  \n', '  uint256 private startTime = now;\n', '\n', '  mapping (uint256 => address) public drinkIdToOwner;\n', '\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  mapping (uint256 => address) public drinkIdToApproved;\n', '\n', '  mapping (uint256 => uint256) private drinkIdToPrice;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Drink {\n', '    string name;\n', '  }\n', '\n', '  Drink[] private drinks;\n', '\n', '  function approve(address _to, uint256 _tokenId) public { //ERC721\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '    drinkIdToApproved[_tokenId] = _to;\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function createOneDrink(string _name) public onlyContractOwner {\n', '    _createDrink(_name, address(this), startingPrice);\n', '  }\n', '\n', '  function createManyDrinks() public onlyContractOwner {\n', '     uint256 totalDrinks = totalSupply();\n', '\t \n', '     require (totalDrinks < 1);\n', '\t \n', ' \t _createDrink("Barmen", address(this), 1 ether);\n', ' \t _createDrink("Vodka", address(this), startingPrice);\n', '\t _createDrink("Wine", address(this), startingPrice);\n', '\t _createDrink("Cognac", address(this), startingPrice);\n', '\t _createDrink("Martini", address(this), startingPrice);\n', '\t _createDrink("Beer", address(this), startingPrice);\n', '\t _createDrink("Tequila", address(this), startingPrice);\n', '\t _createDrink("Whiskey", address(this), startingPrice);\n', '\t _createDrink("Baileys", address(this), startingPrice);\n', '\t _createDrink("Champagne", address(this), startingPrice);\n', '  }\n', '  \n', '  function getDrink(uint256 _tokenId) public view returns (string drinkName, uint256 sellingPrice, address owner) {\n', '    Drink storage drink = drinks[_tokenId];\n', '    drinkName = drink.name;\n', '    sellingPrice = drinkIdToPrice[_tokenId];\n', '    owner = drinkIdToOwner[_tokenId];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function name() public pure returns (string) { //ERC721\n', '    return NAME;\n', '  }\n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\n', '    owner = drinkIdToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '  \n', '\trequire (now - startTime >= 10800 || _tokenId==0); //3 hours\n', '\t\n', '    address oldOwner = drinkIdToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = drinkIdToPrice[_tokenId];\n', '\n', '    require(oldOwner != newOwner);\n', '    require(_addressNotNull(newOwner));\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 10)); //90% to previous owner\n', '    uint256 barmen_payment = uint256(SafeMath.div(sellingPrice, 10)); //10% to barmen\n', '\n', '\taddress barmen = ownerOf(0);\n', '\t\n', '    // Next price will in 2 times more if it less then 1 ether.\n', '\tif (sellingPrice >= 1 ether)\n', '\t\tdrinkIdToPrice[_tokenId] = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 3), 2));\n', '\telse \t\n', '\t\tdrinkIdToPrice[_tokenId] = uint256(SafeMath.mul(sellingPrice, 2));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //\n', '    }\n', '\n', '    // Pay 10% to barmen, if drink sold\n', '\t// token 0 not drink, its barmen\n', '    if (_tokenId > 0) {\n', '      barmen.transfer(barmen_payment); //\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, drinkIdToPrice[_tokenId], oldOwner, newOwner, drinks[_tokenId].name);\n', '\t\n', '    if (msg.value > sellingPrice) { //if excess pay\n', '\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\t\tmsg.sender.transfer(purchaseExcess);\n', '\t}\n', '  }\n', '\n', '  function secondsAfterStart() public view returns (uint256) { //ERC721\n', '    return uint256(now - startTime);\n', '  }\n', '  \n', '  function symbol() public pure returns (string) { //ERC721\n', '    return SYMBOL;\n', '  }\n', '\n', '\n', '  function takeOwnership(uint256 _tokenId) public { //ERC721\n', '    address newOwner = msg.sender;\n', '    address oldOwner = drinkIdToOwner[_tokenId];\n', '\n', '    require(_addressNotNull(newOwner));\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) { //for web site view\n', '    return drinkIdToPrice[_tokenId];\n', '  }\n', '  \n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) { //for web site view\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalDrinks = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 drinkId;\n', '      for (drinkId = 0; drinkId <= totalDrinks; drinkId++) {\n', '        if (drinkIdToOwner[drinkId] == _owner) {\n', '          result[resultIndex] = drinkId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 total) { //ERC721\n', '    return drinks.length;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '\t_transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '\n', '  /* PRIVATE FUNCTIONS */\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return drinkIdToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  function _createDrink(string _name, address _owner, uint256 _price) private {\n', '    Drink memory _drink = Drink({\n', '      name: _name\n', '    });\n', '    uint256 newDrinkId = drinks.push(_drink) - 1;\n', '\n', '    require(newDrinkId == uint256(uint32(newDrinkId))); //check maximum limit of tokens\n', '\n', '    DrinkCreated(newDrinkId, _name, _owner);\n', '\n', '    drinkIdToPrice[newDrinkId] = _price;\n', '\n', '    _transfer(address(0), _owner, newDrinkId);\n', '  }\n', '\n', '  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\n', '    return _checkedAddr == drinkIdToOwner[_tokenId];\n', '  }\n', '\n', 'function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    ownershipTokenCount[_to]++;\n', '    drinkIdToOwner[_tokenId] = _to;\n', '\n', '    // When creating new drinks _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete drinkIdToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public contractOwner;\n', '\n', '  event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    contractOwner = msg.sender;\n', '  }\n', '\n', '  modifier onlyContractOwner() {\n', '    require(msg.sender == contractOwner);\n', '    _;\n', '  }\n', '\n', '  function transferContractOwnership(address _newOwner) public onlyContractOwner {\n', '    require(_newOwner != address(0));\n', '    ContractOwnershipTransferred(contractOwner, _newOwner);\n', '    contractOwner = _newOwner;\n', '  }\n', '  \n', '  function payoutFromContract() public onlyContractOwner {\n', '      contractOwner.transfer(this.balance);\n', '  }  \n', '\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract CryptoDrinks is ERC721, Ownable {\n', '\n', '  event DrinkCreated(uint256 tokenId, string name, address owner);\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  string public constant NAME = "CryptoDrinks";\n', '  string public constant SYMBOL = "DrinksToken";\n', '\n', '  uint256 private startingPrice = 0.02 ether;\n', '  \n', '  uint256 private startTime = now;\n', '\n', '  mapping (uint256 => address) public drinkIdToOwner;\n', '\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  mapping (uint256 => address) public drinkIdToApproved;\n', '\n', '  mapping (uint256 => uint256) private drinkIdToPrice;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Drink {\n', '    string name;\n', '  }\n', '\n', '  Drink[] private drinks;\n', '\n', '  function approve(address _to, uint256 _tokenId) public { //ERC721\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '    drinkIdToApproved[_tokenId] = _to;\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function createOneDrink(string _name) public onlyContractOwner {\n', '    _createDrink(_name, address(this), startingPrice);\n', '  }\n', '\n', '  function createManyDrinks() public onlyContractOwner {\n', '     uint256 totalDrinks = totalSupply();\n', '\t \n', '     require (totalDrinks < 1);\n', '\t \n', ' \t _createDrink("Barmen", address(this), 1 ether);\n', ' \t _createDrink("Vodka", address(this), startingPrice);\n', '\t _createDrink("Wine", address(this), startingPrice);\n', '\t _createDrink("Cognac", address(this), startingPrice);\n', '\t _createDrink("Martini", address(this), startingPrice);\n', '\t _createDrink("Beer", address(this), startingPrice);\n', '\t _createDrink("Tequila", address(this), startingPrice);\n', '\t _createDrink("Whiskey", address(this), startingPrice);\n', '\t _createDrink("Baileys", address(this), startingPrice);\n', '\t _createDrink("Champagne", address(this), startingPrice);\n', '  }\n', '  \n', '  function getDrink(uint256 _tokenId) public view returns (string drinkName, uint256 sellingPrice, address owner) {\n', '    Drink storage drink = drinks[_tokenId];\n', '    drinkName = drink.name;\n', '    sellingPrice = drinkIdToPrice[_tokenId];\n', '    owner = drinkIdToOwner[_tokenId];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function name() public pure returns (string) { //ERC721\n', '    return NAME;\n', '  }\n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\n', '    owner = drinkIdToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '  \n', '\trequire (now - startTime >= 10800 || _tokenId==0); //3 hours\n', '\t\n', '    address oldOwner = drinkIdToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = drinkIdToPrice[_tokenId];\n', '\n', '    require(oldOwner != newOwner);\n', '    require(_addressNotNull(newOwner));\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 10)); //90% to previous owner\n', '    uint256 barmen_payment = uint256(SafeMath.div(sellingPrice, 10)); //10% to barmen\n', '\n', '\taddress barmen = ownerOf(0);\n', '\t\n', '    // Next price will in 2 times more if it less then 1 ether.\n', '\tif (sellingPrice >= 1 ether)\n', '\t\tdrinkIdToPrice[_tokenId] = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 3), 2));\n', '\telse \t\n', '\t\tdrinkIdToPrice[_tokenId] = uint256(SafeMath.mul(sellingPrice, 2));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //\n', '    }\n', '\n', '    // Pay 10% to barmen, if drink sold\n', '\t// token 0 not drink, its barmen\n', '    if (_tokenId > 0) {\n', '      barmen.transfer(barmen_payment); //\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, drinkIdToPrice[_tokenId], oldOwner, newOwner, drinks[_tokenId].name);\n', '\t\n', '    if (msg.value > sellingPrice) { //if excess pay\n', '\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\t\tmsg.sender.transfer(purchaseExcess);\n', '\t}\n', '  }\n', '\n', '  function secondsAfterStart() public view returns (uint256) { //ERC721\n', '    return uint256(now - startTime);\n', '  }\n', '  \n', '  function symbol() public pure returns (string) { //ERC721\n', '    return SYMBOL;\n', '  }\n', '\n', '\n', '  function takeOwnership(uint256 _tokenId) public { //ERC721\n', '    address newOwner = msg.sender;\n', '    address oldOwner = drinkIdToOwner[_tokenId];\n', '\n', '    require(_addressNotNull(newOwner));\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) { //for web site view\n', '    return drinkIdToPrice[_tokenId];\n', '  }\n', '  \n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) { //for web site view\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalDrinks = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 drinkId;\n', '      for (drinkId = 0; drinkId <= totalDrinks; drinkId++) {\n', '        if (drinkIdToOwner[drinkId] == _owner) {\n', '          result[resultIndex] = drinkId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 total) { //ERC721\n', '    return drinks.length;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '\t_transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '\n', '  /* PRIVATE FUNCTIONS */\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return drinkIdToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  function _createDrink(string _name, address _owner, uint256 _price) private {\n', '    Drink memory _drink = Drink({\n', '      name: _name\n', '    });\n', '    uint256 newDrinkId = drinks.push(_drink) - 1;\n', '\n', '    require(newDrinkId == uint256(uint32(newDrinkId))); //check maximum limit of tokens\n', '\n', '    DrinkCreated(newDrinkId, _name, _owner);\n', '\n', '    drinkIdToPrice[newDrinkId] = _price;\n', '\n', '    _transfer(address(0), _owner, newDrinkId);\n', '  }\n', '\n', '  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\n', '    return _checkedAddr == drinkIdToOwner[_tokenId];\n', '  }\n', '\n', 'function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    ownershipTokenCount[_to]++;\n', '    drinkIdToOwner[_tokenId] = _to;\n', '\n', "    // When creating new drinks _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete drinkIdToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}']
