['pragma solidity ^0.4.18;\n', '\n', 'contract Nines {\n', '  event NewOne(address owner, uint256 cost, uint256 new_price);\n', '\n', '  struct Nine {\n', '    address owner;\n', '    uint256 cost;\n', '  }    \n', '\n', '  mapping (uint256 => Nine) public nines;\n', '  mapping (address => string) public msgs;\n', '\n', '  address public ceoAddress;\n', '  uint256 public seatPrice = 1000000000000000;\n', '\n', '  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\n', '\n', '  function Nines() public {\n', '    ceoAddress = msg.sender;\n', '    nines[1] = Nine(msg.sender, 0);\n', '    nines[2] = Nine(msg.sender, 0);\n', '    nines[3] = Nine(msg.sender, 0);\n', '    nines[4] = Nine(msg.sender, 0);\n', '    nines[5] = Nine(msg.sender, 0);\n', '    nines[6] = Nine(msg.sender, 0);\n', '    nines[7] = Nine(msg.sender, 0);\n', '    nines[8] = Nine(msg.sender, 0);\n', '    nines[9] = Nine(msg.sender, 0);\n', '    msgs[msg.sender] = "Claim this spot!";\n', '  }\n', '\n', '  function getNine(uint256 _slot) public view returns (\n', '    uint256 slot,\n', '    address owner,\n', '    uint256 cost,\n', '    string message\n', '  ) {\n', '    slot = _slot;\n', '    owner = nines[_slot].owner;\n', '    cost = nines[_slot].cost;\n', '    message = msgs[nines[_slot].owner];\n', '  }\n', '\n', '  function purchase() public payable {\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= seatPrice);\n', '    uint256 excess = SafeMath.sub(msg.value, seatPrice);\n', '    nines[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 9)));\n', '    nines[9] = nines[8]; nines[8] = nines[7]; nines[7] = nines[6];\n', '    nines[6] = nines[5]; nines[5] = nines[4]; nines[4] = nines[3];\n', '    nines[3] = nines[2]; nines[2] = nines[1];\n', '    nines[1] = Nine(msg.sender, seatPrice);\n', '    ceoAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), 19)));\n', '    NewOne(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 109));\n', '    seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 109);\n', '    msg.sender.transfer(excess);\n', '  }\n', '  \n', '  function setMessage(string message) public payable {\n', '    msgs[msg.sender] = message;\n', '  }\n', '\n', '  function payout() public onlyCEO {\n', '    ceoAddress.transfer(this.balance);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']