['pragma solidity ^0.4.24;\n', '\n', 'contract vault3 {\n', '    address public account1;\n', '    address public account2;\n', '    address public account3;\n', '\n', '    // There&#39;s only one God account1\n', '    // with the only extra privilege to change account2 or account3\n', '    modifier onlyGod() {\n', '        require(msg.sender == account1, "You are not God");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwners () {\n', '        require((msg.sender == account1) || (msg.sender == account2) || (msg.sender == account2), "You are not 1 of the owners");\n', '        _;\n', '    }\n', '\n', '    // accounts must be distict\n', '    constructor (address _acct1, address _acct2, address _acct3) public {\n', '        // addresses must be unique\n', '        require((_acct1 != _acct2) && (_acct1 != _acct3) && (_acct2 != _acct3), "Accounts must be distinct");\n', '        account1 = _acct1;\n', '        account2 = _acct2;\n', '        account3 = _acct3;\n', '    }\n', '\n', '    // whatever sent msg.value is the deposit \n', '    function deposit() public payable {\n', '\n', '    }\n', '\n', '    // withdraw first then change the account\n', '    function changeAcct2(address _newAcct) onlyGod public {\n', '        require((_newAcct != account1) && (_newAcct != account3), "Accounts must be distinct");\n', '        withdraw();\n', '        account2 = _newAcct;\n', '    }\n', '\n', '    function changeAcct3(address _newAcct) onlyGod public {\n', '        require((_newAcct != account1) && (_newAcct != account2), "Accounts must be distinct");\n', '        withdraw();\n', '        account3 = _newAcct;\n', '    }\n', '\n', '    function withdraw() public onlyOwners {\n', '        uint256 contractBalance = address(this).balance;\n', '        uint256 share = contractBalance / 3;\n', '\n', '        account1.transfer(share);\n', '        account2.transfer(share);\n', '        account3.transfer(share);\n', '    }\n', '\n', '    // any of the owners can kill the contract\n', '    // liquidation of the company | disputes\n', '    function withdrawAndKill() onlyOwners public {\n', '        withdraw();\n', '        selfdestruct(0);\n', '    }\n', '}']