['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '//==============================================================================\n', '//  . _ _|_ _  _ |` _  _ _  _  .\n', '//  || | | (/_| ~|~(_|(_(/__\\  .\n', '//==============================================================================\n', '\n', 'interface Lucky8DInterface {\n', '    function redistribution() external payable;\n', '}\n', '\n', 'contract RiceFarmer{\n', '\n', '    uint256 public SEEDS_TO_HATCH_1RICE=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_RICE=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryRice;\n', '    mapping (address => uint256) public claimedSeeds;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketSeeds;\n', '\n', '\n', '    Lucky8DInterface constant private Divies = Lucky8DInterface(0xe7BBBC53d2D1B9e1099BeF0E3E2F2C74cd1D2B98);\n', '\n', '\n', '    function RiceFarmer() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '\n', '\n', '    function hatchSeeds(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 eggsUsed=getMySeeds();\n', '        uint256 newRice=SafeMath.div(eggsUsed,SEEDS_TO_HATCH_1RICE);\n', '        hatcheryRice[msg.sender]=SafeMath.add(hatcheryRice[msg.sender],newRice);\n', '        claimedSeeds[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '\n', '        //send referral eggs\n', '        claimedSeeds[referrals[msg.sender]]=SafeMath.add(claimedSeeds[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '\n', '        //boost market to nerf rice hoarding\n', '        marketSeeds=SafeMath.add(marketSeeds,SafeMath.div(eggsUsed,10));\n', '    }\n', '    function sellSeeds() public{\n', '        require(initialized);\n', '        uint256 hasSeeds=getMySeeds();\n', '        uint256 eggValue=calculateSeedSell(hasSeeds);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedSeeds[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketSeeds=SafeMath.add(marketSeeds,hasSeeds);\n', '\n', '        Divies.redistribution.value(fee)();\n', '\n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '    }\n', '    function buySeeds() public payable{\n', '        require(initialized);\n', '        uint256 eggsBought=calculateSeedBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '\n', '        Divies.redistribution.value(devFee(msg.value))();\n', '\n', '        claimedSeeds[msg.sender]=SafeMath.add(claimedSeeds[msg.sender],eggsBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateSeedSell(uint256 eggs) public view returns(uint256){\n', '        return calculateTrade(eggs,marketSeeds,this.balance);\n', '    }\n', '    function calculateSeedBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketSeeds);\n', '    }\n', '    function calculateSeedBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateSeedBuy(eth,this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,5),100);\n', '    }\n', '\n', '    function seedMarket(uint256 eggs) public payable{\n', '        require(marketSeeds==0);\n', '        initialized=true;\n', '        marketSeeds=eggs;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyRice() public view returns(uint256){\n', '        return hatcheryRice[msg.sender];\n', '    }\n', '    function getMySeeds() public view returns(uint256){\n', '        return SafeMath.add(claimedSeeds[msg.sender],getSeedsSinceLastHatch(msg.sender));\n', '    }\n', '    function getSeedsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(SEEDS_TO_HATCH_1RICE,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryRice[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '//==============================================================================\n', '//  . _ _|_ _  _ |` _  _ _  _  .\n', '//  || | | (/_| ~|~(_|(_(/__\\  .\n', '//==============================================================================\n', '\n', 'interface Lucky8DInterface {\n', '    function redistribution() external payable;\n', '}\n', '\n', 'contract RiceFarmer{\n', '\n', '    uint256 public SEEDS_TO_HATCH_1RICE=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_RICE=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryRice;\n', '    mapping (address => uint256) public claimedSeeds;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketSeeds;\n', '\n', '\n', '    Lucky8DInterface constant private Divies = Lucky8DInterface(0xe7BBBC53d2D1B9e1099BeF0E3E2F2C74cd1D2B98);\n', '\n', '\n', '    function RiceFarmer() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '\n', '\n', '    function hatchSeeds(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 eggsUsed=getMySeeds();\n', '        uint256 newRice=SafeMath.div(eggsUsed,SEEDS_TO_HATCH_1RICE);\n', '        hatcheryRice[msg.sender]=SafeMath.add(hatcheryRice[msg.sender],newRice);\n', '        claimedSeeds[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '\n', '        //send referral eggs\n', '        claimedSeeds[referrals[msg.sender]]=SafeMath.add(claimedSeeds[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '\n', '        //boost market to nerf rice hoarding\n', '        marketSeeds=SafeMath.add(marketSeeds,SafeMath.div(eggsUsed,10));\n', '    }\n', '    function sellSeeds() public{\n', '        require(initialized);\n', '        uint256 hasSeeds=getMySeeds();\n', '        uint256 eggValue=calculateSeedSell(hasSeeds);\n', '        uint256 fee=devFee(eggValue);\n', '        claimedSeeds[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketSeeds=SafeMath.add(marketSeeds,hasSeeds);\n', '\n', '        Divies.redistribution.value(fee)();\n', '\n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '    }\n', '    function buySeeds() public payable{\n', '        require(initialized);\n', '        uint256 eggsBought=calculateSeedBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n', '\n', '        Divies.redistribution.value(devFee(msg.value))();\n', '\n', '        claimedSeeds[msg.sender]=SafeMath.add(claimedSeeds[msg.sender],eggsBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateSeedSell(uint256 eggs) public view returns(uint256){\n', '        return calculateTrade(eggs,marketSeeds,this.balance);\n', '    }\n', '    function calculateSeedBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketSeeds);\n', '    }\n', '    function calculateSeedBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateSeedBuy(eth,this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,5),100);\n', '    }\n', '\n', '    function seedMarket(uint256 eggs) public payable{\n', '        require(marketSeeds==0);\n', '        initialized=true;\n', '        marketSeeds=eggs;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyRice() public view returns(uint256){\n', '        return hatcheryRice[msg.sender];\n', '    }\n', '    function getMySeeds() public view returns(uint256){\n', '        return SafeMath.add(claimedSeeds[msg.sender],getSeedsSinceLastHatch(msg.sender));\n', '    }\n', '    function getSeedsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(SEEDS_TO_HATCH_1RICE,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryRice[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
