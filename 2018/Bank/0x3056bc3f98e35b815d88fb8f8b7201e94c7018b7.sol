['// CryptoTorch-Token Source code\n', '// copyright 2018 CryptoTorch <https://cryptotorch.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', ' *\n', ' * Owner rights:\n', ' *   - change the name of the contract\n', ' *   - change the name of the token\n', ' *   - change the Proof of Stake difficulty\n', ' *   - transfer ownership\n', ' *\n', ' * Owner CANNOT:\n', ' *   - withdrawal funds\n', ' *   - disable withdrawals\n', ' *   - kill the contract\n', ' *   - change the price of tokens\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface (Good parts only)\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title CryptoTorchToken\n', ' *\n', ' * Token + Dividends System for the Cryptolympic-Torch\n', ' *\n', ' * Token: KMS - Kilometers (Distance of Torch Run)\n', ' */\n', 'contract CryptoTorchToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //\n', '    // Events\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    event onWithdraw(\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '    event onMint(\n', '        address indexed to,\n', '        uint256 pricePaid,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    event onBurn(\n', '        address indexed from,\n', '        uint256 tokensBurned,\n', '        uint256 amountEarned\n', '    );\n', '\n', '    //\n', '    // Token Configurations\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    string internal name_ = "Cryptolympic Torch-Run Kilometers";\n', '    string internal symbol_ = "KMS";\n', '    uint256 constant internal dividendFee_ = 5;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    uint256 public stakingRequirement = 50e18;\n', '\n', '    //\n', '    // Token Internals\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    address internal tokenController_;\n', '    address internal donationsReceiver_;\n', '    mapping (address => uint256) internal tokenBalanceLedger_; // scaled by 1e18\n', '    mapping (address => uint256) internal referralBalance_;\n', '    mapping (address => uint256) internal profitsReceived_;\n', '    mapping (address => int256) internal payoutsTo_;\n', '\n', '    //\n', '    // Modifiers\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    // No buying tokens directly through this contract, only through the\n', '    // CryptoTorch Controller Contract via the CryptoTorch Dapp\n', '    //\n', '    modifier onlyTokenController() {\n', '        require(tokenController_ != address(0) && msg.sender == tokenController_);\n', '        _;\n', '    }\n', '\n', '    // Token Holders Only\n', '    modifier onlyTokenHolders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // Dividend Holders Only\n', '    modifier onlyProfitHolders() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Public Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * Contract Constructor\n', '     */\n', '    function CryptoTorchToken() public {}\n', '\n', '    /**\n', '     * Sets the Token Controller Contract (CryptoTorch)\n', '     */\n', '    function setTokenController(address _controller) public onlyOwner {\n', '        tokenController_ = _controller;\n', '    }\n', '\n', '    /**\n', '     * Sets the Contract Donations Receiver address\n', '     */\n', '    function setDonationsReceiver(address _receiver) public onlyOwner {\n', '        donationsReceiver_ = _receiver;\n', '    }\n', '\n', '    /**\n', '     * Do not make payments directly to this contract (unless it is a donation! :)\n', '     *  - payments made directly to the contract do not receive tokens.  Tokens\n', '     *    are only available through the CryptoTorch Controller Contract, which\n', '     *    is managed by the Dapp at https://cryptotorch.io\n', '     */\n', '    function() payable public {\n', '        if (msg.value > 0 && donationsReceiver_ != 0x0) {\n', '            donationsReceiver_.transfer(msg.value); // donations?  Thank you!  :)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sell(uint256 _amountOfTokens) public onlyTokenHolders {\n', '        sell_(msg.sender, _amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sellFor(address _for, uint256 _amountOfTokens) public onlyTokenController {\n', '        sell_(_for, _amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function withdraw() public onlyProfitHolders {\n', '        withdraw_(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function withdrawFor(address _for) public onlyTokenController {\n', '        withdraw_(_for);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function mint(address _to, uint256 _amountPaid, address _referredBy) public onlyTokenController payable returns(uint256) {\n', '        require(_amountPaid == msg.value);\n', '        return mintTokens_(_to, _amountPaid, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * There&#39;s a small fee here that is redistributed to all token holders\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyTokenHolders returns(bool) {\n', '        return transferFor_(msg.sender, _to, _value);\n', '    }\n', '\n', '    //\n', '    // Owner Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) public onlyOwner {\n', '        name_ = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) public onlyOwner {\n', '        symbol_ = _symbol;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens) public onlyOwner {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    //\n', '    // Helper Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * View the total balance of the contract\n', '     */\n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Name\n', '     */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Symbol\n', '     */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Decimals\n', '     */\n', '    function decimals() public pure returns (uint256) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens() public view returns(uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return balanceOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeBonus` is to to true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeBonus) public view returns(uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return _includeBonus ? dividendsOf(_playerAddress) + referralBalance_[_playerAddress] : dividendsOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retreive the Total Profits previously paid out to the Caller\n', '     */\n', '    function myProfitsReceived() public view returns (uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return profitsOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _playerAddress) public view returns(uint256) {\n', '        return tokenBalanceLedger_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _playerAddress) public view returns(uint256) {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_playerAddress]) - payoutsTo_[_playerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the paid-profits balance of any single address.\n', '     */\n', '    function profitsOf(address _playerAddress) public view returns(uint256) {\n', '        return profitsReceived_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the referral dividends balance of any single address.\n', '     */\n', '    function referralBalanceOf(address _playerAddress) public view returns(uint256) {\n', '        return referralBalance_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function sellPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ether = tokensToEther_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '            uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\n', '            return _taxedEther;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function buyPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ether = tokensToEther_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '            uint256 _taxedEther = SafeMath.add(_ether, _dividends);\n', '            return _taxedEther;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _etherToSpend) public view returns(uint256) {\n', '        uint256 _dividends = _etherToSpend.div(dividendFee_);\n', '        uint256 _taxedEther = _etherToSpend.sub(_dividends);\n', '        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEtherReceived(uint256 _tokensToSell) public view returns(uint256) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ether = tokensToEther_(_tokensToSell);\n', '        uint256 _dividends = _ether.div(dividendFee_);\n', '        uint256 _taxedEther = _ether.sub(_dividends);\n', '        return _taxedEther;\n', '    }\n', '\n', '    //\n', '    // Internal Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sell_(address _recipient, uint256 _amountOfTokens) internal {\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_recipient]);\n', '\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ether = tokensToEther_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '        uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_recipient] = SafeMath.sub(tokenBalanceLedger_[_recipient], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEther * magnitude));\n', '        payoutsTo_[_recipient] -= _updatedPayouts;\n', '\n', '        // update the amount of dividends per token\n', '        if (tokenSupply_ > 0) {\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onBurn(_recipient, _tokens, _taxedEther);\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw_(address _recipient) internal {\n', '        require(_recipient != address(0));\n', '\n', '        // setup data\n', '        uint256 _dividends = getDividendsOf_(_recipient, false);\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_recipient] += (int256)(_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_recipient];\n', '        referralBalance_[_recipient] = 0;\n', '\n', '        // fire event\n', '        onWithdraw(_recipient, _dividends);\n', '\n', '        // transfer funds\n', '        profitsReceived_[_recipient] = profitsReceived_[_recipient].add(_dividends);\n', '        _recipient.transfer(_dividends);\n', '\n', '        // Keep contract clean\n', '        if (tokenSupply_ == 0 && this.balance > 0) {\n', '            owner.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Assign tokens to player\n', '     */\n', '    function mintTokens_(address _to, uint256 _amountPaid, address _referredBy) internal returns(uint256) {\n', '        require(_to != address(this) && _to != tokenController_);\n', '\n', '        uint256 _undividedDividends = SafeMath.div(_amountPaid, dividendFee_);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 10);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEther = SafeMath.sub(_amountPaid, _undividedDividends);\n', '        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if (_referredBy != address(0) && _referredBy != _to && tokenBalanceLedger_[_referredBy] >= stakingRequirement) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        if (tokenSupply_ > 0) {\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them\n', '        int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_to] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onMint(_to, _amountPaid, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * There&#39;s a small fee here that is redistributed to all token holders\n', '     */\n', '    function transferFor_(address _from, address _to, uint256 _amountOfTokens) internal returns(bool) {\n', '        require(_to != address(0));\n', '        require(tokenBalanceLedger_[_from] >= _amountOfTokens && tokenBalanceLedger_[_to] + _amountOfTokens >= tokenBalanceLedger_[_to]);\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_from]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (getDividendsOf_(_from, true) > 0) {\n', '            withdraw_(_from);\n', '        }\n', '\n', '        // liquify 10% of the tokens that are transferred\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEther_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);\n', '        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_from] -= (int256)(profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_to] += (int256)(profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        Transfer(_from, _to, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends of the owner.\n', '     */\n', '    function getDividendsOf_(address _recipient, bool _includeBonus) internal view returns(uint256) {\n', '        return _includeBonus ? dividendsOf(_recipient) + referralBalance_[_recipient] : dividendsOf(_recipient);\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ether;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function etherToTokens_(uint256 _ether) internal view returns(uint256) {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '        (\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (sqrt\n', '        (\n', '            (_tokenPriceInitial**2)\n', '            +\n', '            (2*(tokenPriceIncremental_ * 1e18)*(_ether * 1e18))\n', '            +\n', '            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '            +\n', '            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '        )\n', '            ), _tokenPriceInitial\n', '        )\n', '        )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_);\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEther_(uint256 _tokens) internal view returns(uint256) {\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (\n', '            (\n', '            (\n', '            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '            )-tokenPriceIncremental_\n', '            )*(tokens_ - 1e18)\n', '            ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '        )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    /**\n', '     * Squirts gas! ;)\n', '     */\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}']
['// CryptoTorch-Token Source code\n', '// copyright 2018 CryptoTorch <https://cryptotorch.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', ' *\n', ' * Owner rights:\n', ' *   - change the name of the contract\n', ' *   - change the name of the token\n', ' *   - change the Proof of Stake difficulty\n', ' *   - transfer ownership\n', ' *\n', ' * Owner CANNOT:\n', ' *   - withdrawal funds\n', ' *   - disable withdrawals\n', ' *   - kill the contract\n', ' *   - change the price of tokens\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface (Good parts only)\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title CryptoTorchToken\n', ' *\n', ' * Token + Dividends System for the Cryptolympic-Torch\n', ' *\n', ' * Token: KMS - Kilometers (Distance of Torch Run)\n', ' */\n', 'contract CryptoTorchToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //\n', '    // Events\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    event onWithdraw(\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '    event onMint(\n', '        address indexed to,\n', '        uint256 pricePaid,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    event onBurn(\n', '        address indexed from,\n', '        uint256 tokensBurned,\n', '        uint256 amountEarned\n', '    );\n', '\n', '    //\n', '    // Token Configurations\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    string internal name_ = "Cryptolympic Torch-Run Kilometers";\n', '    string internal symbol_ = "KMS";\n', '    uint256 constant internal dividendFee_ = 5;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    uint256 public stakingRequirement = 50e18;\n', '\n', '    //\n', '    // Token Internals\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    address internal tokenController_;\n', '    address internal donationsReceiver_;\n', '    mapping (address => uint256) internal tokenBalanceLedger_; // scaled by 1e18\n', '    mapping (address => uint256) internal referralBalance_;\n', '    mapping (address => uint256) internal profitsReceived_;\n', '    mapping (address => int256) internal payoutsTo_;\n', '\n', '    //\n', '    // Modifiers\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    // No buying tokens directly through this contract, only through the\n', '    // CryptoTorch Controller Contract via the CryptoTorch Dapp\n', '    //\n', '    modifier onlyTokenController() {\n', '        require(tokenController_ != address(0) && msg.sender == tokenController_);\n', '        _;\n', '    }\n', '\n', '    // Token Holders Only\n', '    modifier onlyTokenHolders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // Dividend Holders Only\n', '    modifier onlyProfitHolders() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Public Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * Contract Constructor\n', '     */\n', '    function CryptoTorchToken() public {}\n', '\n', '    /**\n', '     * Sets the Token Controller Contract (CryptoTorch)\n', '     */\n', '    function setTokenController(address _controller) public onlyOwner {\n', '        tokenController_ = _controller;\n', '    }\n', '\n', '    /**\n', '     * Sets the Contract Donations Receiver address\n', '     */\n', '    function setDonationsReceiver(address _receiver) public onlyOwner {\n', '        donationsReceiver_ = _receiver;\n', '    }\n', '\n', '    /**\n', '     * Do not make payments directly to this contract (unless it is a donation! :)\n', '     *  - payments made directly to the contract do not receive tokens.  Tokens\n', '     *    are only available through the CryptoTorch Controller Contract, which\n', '     *    is managed by the Dapp at https://cryptotorch.io\n', '     */\n', '    function() payable public {\n', '        if (msg.value > 0 && donationsReceiver_ != 0x0) {\n', '            donationsReceiver_.transfer(msg.value); // donations?  Thank you!  :)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sell(uint256 _amountOfTokens) public onlyTokenHolders {\n', '        sell_(msg.sender, _amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sellFor(address _for, uint256 _amountOfTokens) public onlyTokenController {\n', '        sell_(_for, _amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function withdraw() public onlyProfitHolders {\n', '        withdraw_(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function withdrawFor(address _for) public onlyTokenController {\n', '        withdraw_(_for);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function mint(address _to, uint256 _amountPaid, address _referredBy) public onlyTokenController payable returns(uint256) {\n', '        require(_amountPaid == msg.value);\n', '        return mintTokens_(_to, _amountPaid, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * There's a small fee here that is redistributed to all token holders\n", '     */\n', '    function transfer(address _to, uint256 _value) public onlyTokenHolders returns(bool) {\n', '        return transferFor_(msg.sender, _to, _value);\n', '    }\n', '\n', '    //\n', '    // Owner Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) public onlyOwner {\n', '        name_ = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) public onlyOwner {\n', '        symbol_ = _symbol;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens) public onlyOwner {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    //\n', '    // Helper Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '    /**\n', '     * View the total balance of the contract\n', '     */\n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Name\n', '     */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Symbol\n', '     */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '     * ERC20 Token Decimals\n', '     */\n', '    function decimals() public pure returns (uint256) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens() public view returns(uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return balanceOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeBonus` is to to true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeBonus) public view returns(uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return _includeBonus ? dividendsOf(_playerAddress) + referralBalance_[_playerAddress] : dividendsOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retreive the Total Profits previously paid out to the Caller\n', '     */\n', '    function myProfitsReceived() public view returns (uint256) {\n', '        address _playerAddress = msg.sender;\n', '        return profitsOf(_playerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _playerAddress) public view returns(uint256) {\n', '        return tokenBalanceLedger_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _playerAddress) public view returns(uint256) {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_playerAddress]) - payoutsTo_[_playerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the paid-profits balance of any single address.\n', '     */\n', '    function profitsOf(address _playerAddress) public view returns(uint256) {\n', '        return profitsReceived_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the referral dividends balance of any single address.\n', '     */\n', '    function referralBalanceOf(address _playerAddress) public view returns(uint256) {\n', '        return referralBalance_[_playerAddress];\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function sellPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ether = tokensToEther_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '            uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\n', '            return _taxedEther;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function buyPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if (tokenSupply_ == 0) {\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ether = tokensToEther_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '            uint256 _taxedEther = SafeMath.add(_ether, _dividends);\n', '            return _taxedEther;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _etherToSpend) public view returns(uint256) {\n', '        uint256 _dividends = _etherToSpend.div(dividendFee_);\n', '        uint256 _taxedEther = _etherToSpend.sub(_dividends);\n', '        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEtherReceived(uint256 _tokensToSell) public view returns(uint256) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ether = tokensToEther_(_tokensToSell);\n', '        uint256 _dividends = _ether.div(dividendFee_);\n', '        uint256 _taxedEther = _ether.sub(_dividends);\n', '        return _taxedEther;\n', '    }\n', '\n', '    //\n', '    // Internal Functions\n', '    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '    //\n', '\n', '    /**\n', '     * Liquifies tokens to ether.\n', '     */\n', '    function sell_(address _recipient, uint256 _amountOfTokens) internal {\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_recipient]);\n', '\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ether = tokensToEther_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ether, dividendFee_);\n', '        uint256 _taxedEther = SafeMath.sub(_ether, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_recipient] = SafeMath.sub(tokenBalanceLedger_[_recipient], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEther * magnitude));\n', '        payoutsTo_[_recipient] -= _updatedPayouts;\n', '\n', '        // update the amount of dividends per token\n', '        if (tokenSupply_ > 0) {\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onBurn(_recipient, _tokens, _taxedEther);\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw_(address _recipient) internal {\n', '        require(_recipient != address(0));\n', '\n', '        // setup data\n', '        uint256 _dividends = getDividendsOf_(_recipient, false);\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_recipient] += (int256)(_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_recipient];\n', '        referralBalance_[_recipient] = 0;\n', '\n', '        // fire event\n', '        onWithdraw(_recipient, _dividends);\n', '\n', '        // transfer funds\n', '        profitsReceived_[_recipient] = profitsReceived_[_recipient].add(_dividends);\n', '        _recipient.transfer(_dividends);\n', '\n', '        // Keep contract clean\n', '        if (tokenSupply_ == 0 && this.balance > 0) {\n', '            owner.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Assign tokens to player\n', '     */\n', '    function mintTokens_(address _to, uint256 _amountPaid, address _referredBy) internal returns(uint256) {\n', '        require(_to != address(this) && _to != tokenController_);\n', '\n', '        uint256 _undividedDividends = SafeMath.div(_amountPaid, dividendFee_);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 10);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEther = SafeMath.sub(_amountPaid, _undividedDividends);\n', '        uint256 _amountOfTokens = etherToTokens_(_taxedEther);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if (_referredBy != address(0) && _referredBy != _to && tokenBalanceLedger_[_referredBy] >= stakingRequirement) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        if (tokenSupply_ > 0) {\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them\n", '        int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_to] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onMint(_to, _amountPaid, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * There's a small fee here that is redistributed to all token holders\n", '     */\n', '    function transferFor_(address _from, address _to, uint256 _amountOfTokens) internal returns(bool) {\n', '        require(_to != address(0));\n', '        require(tokenBalanceLedger_[_from] >= _amountOfTokens && tokenBalanceLedger_[_to] + _amountOfTokens >= tokenBalanceLedger_[_to]);\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_from]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (getDividendsOf_(_from, true) > 0) {\n', '            withdraw_(_from);\n', '        }\n', '\n', '        // liquify 10% of the tokens that are transferred\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEther_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);\n', '        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_from] -= (int256)(profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_to] += (int256)(profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        Transfer(_from, _to, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends of the owner.\n', '     */\n', '    function getDividendsOf_(address _recipient, bool _includeBonus) internal view returns(uint256) {\n', '        return _includeBonus ? dividendsOf(_recipient) + referralBalance_[_recipient] : dividendsOf(_recipient);\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ether;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function etherToTokens_(uint256 _ether) internal view returns(uint256) {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '        (\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (sqrt\n', '        (\n', '            (_tokenPriceInitial**2)\n', '            +\n', '            (2*(tokenPriceIncremental_ * 1e18)*(_ether * 1e18))\n', '            +\n', '            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '            +\n', '            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '        )\n', '            ), _tokenPriceInitial\n', '        )\n', '        )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_);\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEther_(uint256 _tokens) internal view returns(uint256) {\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '        // underflow attempts BTFO\n', '        SafeMath.sub(\n', '            (\n', '            (\n', '            (\n', '            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '            )-tokenPriceIncremental_\n', '            )*(tokens_ - 1e18)\n', '            ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '        )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    /**\n', '     * Squirts gas! ;)\n', '     */\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}']
