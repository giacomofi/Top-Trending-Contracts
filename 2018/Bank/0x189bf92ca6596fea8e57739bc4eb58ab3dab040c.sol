['pragma solidity ^0.4.17;\n', '\n', 'contract Brothel {\n', '    address public manager;\n', '    address public coOwner;\n', '    mapping(address => bool) public hasAids;\n', '    Ho[8] public hoes;\n', '    \n', '    struct Ho {\n', '        address pimp;\n', '        uint buyPrice;\n', '        uint rentPrice;\n', '        uint aidsChance;\n', '    }\n', '    \n', '    function Brothel(address coown) public {\n', '        manager = msg.sender;\n', '        coOwner = coown;\n', '        \n', '        uint basePrice = 0.002 ether;\n', '        uint size = hoes.length;\n', '        uint baseAidsChance = 7;\n', '        \n', '        for (uint i = 0; i<size; i++) {\n', '            Ho hoe = hoes[i];\n', '            hoe.pimp = manager;\n', '            hoe.buyPrice = basePrice*(i+1);\n', '            hoe.rentPrice = hoe.buyPrice/10;\n', '            hoe.aidsChance = baseAidsChance + (i*4);\n', '        }\n', '    }\n', '    \n', '    function withdraw() public restricted {\n', '        uint leBron = address(this).balance*23/100;\n', '        coOwner.transfer(leBron);\n', '        manager.transfer(address(this).balance);\n', '    }\n', '    \n', '    function buyHo(uint index) public payable{\n', '        Ho hoe = hoes[index];\n', '        address currentPimp = hoe.pimp;\n', '        uint currentPrice = hoe.buyPrice;\n', '        require(msg.value >= currentPrice);\n', '        \n', '        currentPimp.transfer(msg.value*93/100);\n', '        hoe.pimp = msg.sender;\n', '        hoe.buyPrice = msg.value*160/100;\n', '    }\n', '    \n', '    function rentHo(uint index) public payable {\n', '        Ho hoe = hoes[index];\n', '        address currentPimp = hoe.pimp;\n', '        uint currentRent = hoe.rentPrice;\n', '        require(msg.value >= currentRent);\n', '        \n', '        currentPimp.transfer(msg.value*93/100);\n', '        if (block.timestamp%hoe.aidsChance == 0) {\n', '            hasAids[msg.sender] = true;\n', '        }\n', '    }\n', '    \n', '    function setRentPrice(uint index, uint newPrice) public {\n', '        require(msg.sender == hoes[index].pimp);\n', '        hoes[index].rentPrice = newPrice;\n', '    }\n', '\n', '    function sendMoney() public payable restricted {\n', '    }\n', '    \n', '    function balance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    modifier restricted() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract Brothel {\n', '    address public manager;\n', '    address public coOwner;\n', '    mapping(address => bool) public hasAids;\n', '    Ho[8] public hoes;\n', '    \n', '    struct Ho {\n', '        address pimp;\n', '        uint buyPrice;\n', '        uint rentPrice;\n', '        uint aidsChance;\n', '    }\n', '    \n', '    function Brothel(address coown) public {\n', '        manager = msg.sender;\n', '        coOwner = coown;\n', '        \n', '        uint basePrice = 0.002 ether;\n', '        uint size = hoes.length;\n', '        uint baseAidsChance = 7;\n', '        \n', '        for (uint i = 0; i<size; i++) {\n', '            Ho hoe = hoes[i];\n', '            hoe.pimp = manager;\n', '            hoe.buyPrice = basePrice*(i+1);\n', '            hoe.rentPrice = hoe.buyPrice/10;\n', '            hoe.aidsChance = baseAidsChance + (i*4);\n', '        }\n', '    }\n', '    \n', '    function withdraw() public restricted {\n', '        uint leBron = address(this).balance*23/100;\n', '        coOwner.transfer(leBron);\n', '        manager.transfer(address(this).balance);\n', '    }\n', '    \n', '    function buyHo(uint index) public payable{\n', '        Ho hoe = hoes[index];\n', '        address currentPimp = hoe.pimp;\n', '        uint currentPrice = hoe.buyPrice;\n', '        require(msg.value >= currentPrice);\n', '        \n', '        currentPimp.transfer(msg.value*93/100);\n', '        hoe.pimp = msg.sender;\n', '        hoe.buyPrice = msg.value*160/100;\n', '    }\n', '    \n', '    function rentHo(uint index) public payable {\n', '        Ho hoe = hoes[index];\n', '        address currentPimp = hoe.pimp;\n', '        uint currentRent = hoe.rentPrice;\n', '        require(msg.value >= currentRent);\n', '        \n', '        currentPimp.transfer(msg.value*93/100);\n', '        if (block.timestamp%hoe.aidsChance == 0) {\n', '            hasAids[msg.sender] = true;\n', '        }\n', '    }\n', '    \n', '    function setRentPrice(uint index, uint newPrice) public {\n', '        require(msg.sender == hoes[index].pimp);\n', '        hoes[index].rentPrice = newPrice;\n', '    }\n', '\n', '    function sendMoney() public payable restricted {\n', '    }\n', '    \n', '    function balance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    modifier restricted() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '}']
