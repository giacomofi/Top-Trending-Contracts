['pragma solidity ^0.4.24;\n', '\n', 'interface HourglassInterface {\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function withdraw() external;\n', '}\n', '\n', 'contract StrongHandsManager {\n', '    \n', '    event CreateStrongHand(address indexed owner, address indexed strongHand);\n', '    \n', '    mapping (address => address) public strongHands;\n', '    \n', '    function getStrong(address _referrer)\n', '        public\n', '        payable\n', '    {\n', '        require(strongHands[msg.sender] == address(0), "you already became a Stronghand");\n', '        \n', '        strongHands[msg.sender] = (new StrongHand).value(msg.value)(msg.sender, _referrer);\n', '        \n', '        emit CreateStrongHand(msg.sender, strongHands[msg.sender]);\n', '    }\n', '}\n', '\n', 'contract StrongHand {\n', '\n', '    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '    \n', '    address public owner;\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    constructor(address _owner, address _referrer)\n', '        public\n', '        payable\n', '    {\n', '        owner = _owner;\n', '        buy(_referrer);\n', '    }\n', '    \n', '    function() public payable {}\n', '   \n', '    function buy(address _referrer)\n', '        public\n', '        payable\n', '        onlyOwner\n', '    {\n', '        p3dContract.buy.value(msg.value)(_referrer);\n', '    }\n', '\n', '    function withdraw()\n', '        external\n', '        onlyOwner\n', '    {\n', '        p3dContract.withdraw();\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface HourglassInterface {\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function withdraw() external;\n', '}\n', '\n', 'contract StrongHandsManager {\n', '    \n', '    event CreateStrongHand(address indexed owner, address indexed strongHand);\n', '    \n', '    mapping (address => address) public strongHands;\n', '    \n', '    function getStrong(address _referrer)\n', '        public\n', '        payable\n', '    {\n', '        require(strongHands[msg.sender] == address(0), "you already became a Stronghand");\n', '        \n', '        strongHands[msg.sender] = (new StrongHand).value(msg.value)(msg.sender, _referrer);\n', '        \n', '        emit CreateStrongHand(msg.sender, strongHands[msg.sender]);\n', '    }\n', '}\n', '\n', 'contract StrongHand {\n', '\n', '    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '    \n', '    address public owner;\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    constructor(address _owner, address _referrer)\n', '        public\n', '        payable\n', '    {\n', '        owner = _owner;\n', '        buy(_referrer);\n', '    }\n', '    \n', '    function() public payable {}\n', '   \n', '    function buy(address _referrer)\n', '        public\n', '        payable\n', '        onlyOwner\n', '    {\n', '        p3dContract.buy.value(msg.value)(_referrer);\n', '    }\n', '\n', '    function withdraw()\n', '        external\n', '        onlyOwner\n', '    {\n', '        p3dContract.withdraw();\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
