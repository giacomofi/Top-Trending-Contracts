['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract P3D {\n', '    function withdraw() public;\n', '    function buy(address) public payable returns(uint256);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        ownerCandidate = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == ownerCandidate);  \n', '        owner = ownerCandidate;\n', '    }\n', '    \n', '}\n', '\n', 'contract BoomerangLiquidity is Owned {\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    P3D internal constant p3dContract = P3D(address(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe));\n', '    address internal constant sk2xContract = address(0xAfd87E1E1eCe09D18f4834F64F63502718d1b3d4);\n', '    \n', '    function() payable public {\n', '        invest();\n', '    }\n', '    \n', '    function invest() public {\n', '        uint256 amountToSend = address(this).balance;\n', '        if(amountToSend > 1){\n', '            uint256 half = amountToSend / 2;\n', '            sk2xContract.transfer(half);\n', '            p3dContract.buy.value(half)(msg.sender);\n', '        }\n', '    }\n', '\n', '    function withdraw(address withdrawAddress) public {\n', '        P3D(withdrawAddress).withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function withdraw() public {\n', '        p3dContract.withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function withdrawAndSend() public {\n', '        p3dContract.withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function donate() payable public {\n', '        sk2xContract.transfer(msg.value);\n', '    }\n', '    \n', '    function donate(address withdrawAddress) payable public {\n', '        p3dContract.buy.value(msg.value)(msg.sender);\n', '        withdraw(withdrawAddress);\n', '    }\n', '    \n', '    function donateP3D() payable public {\n', '        p3dContract.buy.value(msg.value)(msg.sender);\n', '        withdraw();\n', '    }\n', '    \n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract P3D {\n', '    function withdraw() public;\n', '    function buy(address) public payable returns(uint256);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        ownerCandidate = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == ownerCandidate);  \n', '        owner = ownerCandidate;\n', '    }\n', '    \n', '}\n', '\n', 'contract BoomerangLiquidity is Owned {\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    P3D internal constant p3dContract = P3D(address(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe));\n', '    address internal constant sk2xContract = address(0xAfd87E1E1eCe09D18f4834F64F63502718d1b3d4);\n', '    \n', '    function() payable public {\n', '        invest();\n', '    }\n', '    \n', '    function invest() public {\n', '        uint256 amountToSend = address(this).balance;\n', '        if(amountToSend > 1){\n', '            uint256 half = amountToSend / 2;\n', '            sk2xContract.transfer(half);\n', '            p3dContract.buy.value(half)(msg.sender);\n', '        }\n', '    }\n', '\n', '    function withdraw(address withdrawAddress) public {\n', '        P3D(withdrawAddress).withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function withdraw() public {\n', '        p3dContract.withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function withdrawAndSend() public {\n', '        p3dContract.withdraw();\n', '        invest();\n', '    }\n', '    \n', '    function donate() payable public {\n', '        sk2xContract.transfer(msg.value);\n', '    }\n', '    \n', '    function donate(address withdrawAddress) payable public {\n', '        p3dContract.buy.value(msg.value)(msg.sender);\n', '        withdraw(withdrawAddress);\n', '    }\n', '    \n', '    function donateP3D() payable public {\n', '        p3dContract.buy.value(msg.value)(msg.sender);\n', '        withdraw();\n', '    }\n', '    \n', '}']
