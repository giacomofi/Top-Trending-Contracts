['contract Accrual_account\n', '{\n', '    address admin = msg.sender;\n', '   \n', '    uint targetAmount = 1 ether;\n', '    \n', '    mapping(address => uint) public investors;\n', '   \n', '    event FundsMove(uint amount,bytes32 typeAct,address adr);\n', '    \n', '    function changeAdmin(address _new)\n', '    {\n', '        if(_new==0x0)throw;\n', '        if(msg.sender!=admin)throw;\n', '        admin=_new;\n', '    }\n', '    \n', '    function FundTransfer(uint _am, bytes32 _operation, address _to, address _feeToAdr) \n', '    payable\n', '    {\n', '       if(msg.sender != address(this)) throw;\n', '       if(_operation=="In")\n', '       {\n', '           FundsMove(msg.value,"In",_to);\n', '           investors[_to] += _am;\n', '       }\n', '       else\n', '       {\n', '           uint amTotransfer = 0;\n', '           if(_to==_feeToAdr)\n', '           {\n', '               amTotransfer=_am;\n', '           }\n', '           else\n', '           {\n', '               amTotransfer=_am/100*99;\n', '               investors[_feeToAdr]+=_am-amTotransfer;\n', '           }\n', '           if(_to.call.value(_am)()==false)throw;\n', '           investors[_to] -= _am;\n', '           FundsMove(_am, "Out", _to);\n', '       }\n', '    }\n', '    \n', '    function()\n', '    payable\n', '    {\n', '       In(msg.sender);\n', '    }\n', '    \n', '    function Out(uint amount) \n', '    payable\n', '    {\n', '        if(investors[msg.sender]<targetAmount)throw;\n', '        if(investors[msg.sender]<amount)throw;\n', '        this.FundTransfer(amount,"",msg.sender,admin);\n', '    }\n', '    \n', '    function In(address to)\n', '    payable\n', '    {\n', '        if(to==0x0)to = admin;\n', '        if(msg.sender!=tx.origin)throw;\n', '        this.FundTransfer(msg.value, "In", to,admin);\n', '    }\n', '    \n', '    \n', '}']