['pragma solidity ^0.4.16;\n', '\n', 'contract Athleticoin {\n', '\n', '    string public name = "Athleticoin";      //  token name\n', '    string public symbol = "ATHA";           //  token symbol\n', '    //string public version = "newversion1.0";\n', '    uint256 public decimals = 18;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = false;\n', '\n', '    uint256 public sellPrice = 1530000000000;\n', '    uint256 public buyPrice = 1530000000000;\n', '    //000000000000000000\n', '    uint256 constant valueFounder = 500000000000000000000000000;\n', '\n', '    address owner = 0xA9F6e166D73D4b2CAeB89ca84101De2c763F8E86;\n', '    address redeem_address = 0xA1b36225858809dd41c3BE9f601638F3e673Ef48;\n', '    address owner2 = 0xC58ceD5BA5B1daa81BA2eD7062F5bBC9cE76dA8d;\n', '    address owner3 = 0x06c7d7981D360D953213C6C99B01957441068C82;\n', '    address redeemer = 0x91D0F9B1E17a05377C7707c6213FcEB7537eeDEB;\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isRedeemer {\n', '        assert(redeemer == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        totalSupply = 2000000000000000000000000000;\n', '        balanceOf[owner] = valueFounder;\n', '        emit Transfer(0x0, owner, valueFounder);\n', '\n', '        balanceOf[owner2] = valueFounder;\n', '        emit Transfer(0x0, owner2, valueFounder);\n', '\n', '        balanceOf[owner3] = valueFounder;\n', '        emit Transfer(0x0, owner3, valueFounder);\n', '    }\n', '\n', '    function giveBlockReward() public {\n', '        balanceOf[block.coinbase] += 15000;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) isOwner public {\n', '      balanceOf[target] += mintedAmount;\n', '      totalSupply += mintedAmount;\n', '      emit Transfer(0, this, mintedAmount);\n', '      emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) isOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function changeRedeemer(address _redeemer) isOwner public {\n', '        redeemer = _redeemer;    \n', '    }\n', '    \n', '    function redeem(address target, uint256 token_amount) public payable returns (uint256 amount){\n', '        token_amount = token_amount * 1000000000000000000;\n', '        uint256 fee_amount = token_amount * 2 / 102;\n', '        uint256 redeem_amount = token_amount - fee_amount;\n', '        uint256 sender_amount = balanceOf[msg.sender];\n', '        uint256 fee_value = fee_amount * buyPrice / 1000000000000000000;\n', '        if (sender_amount >= redeem_amount){\n', '            require(msg.value >= fee_value);\n', '            balanceOf[target] += redeem_amount;                  // adds the amount to buyer&#39;s balance\n', '            balanceOf[msg.sender] -= redeem_amount;\n', '            emit Transfer(msg.sender, target, redeem_amount);               // execute an event reflecting the change\n', '            redeem_address.transfer(msg.value);\n', '        } else {\n', '            uint256 lack_amount = token_amount - sender_amount;\n', '            uint256 eth_value = lack_amount * buyPrice / 1000000000000000000;\n', '            lack_amount = redeem_amount - sender_amount;\n', '            require(msg.value >= eth_value);\n', '            require(balanceOf[owner] >= lack_amount);    // checks if it has enough to sell\n', '\n', '            balanceOf[target] += redeem_amount;                  // adds the amount to buyer&#39;s balance\n', '            balanceOf[owner] -= lack_amount;                        // subtracts amount from seller&#39;s balance\n', '            balanceOf[msg.sender] = 0;\n', '\n', '            eth_value = msg.value - fee_value;\n', '            owner.transfer(eth_value);\n', '            redeem_address.transfer(fee_value);\n', '            emit Transfer(msg.sender, target, sender_amount);               // execute an event reflecting the change\n', '            emit Transfer(owner, target, lack_amount);               // execute an event reflecting the change\n', '        }\n', '        return token_amount;                                    // ends function and returns\n', '    }\n', '\n', '    function redeem_deposit(uint256 token_amount) public payable returns(uint256 amount){\n', '        token_amount = token_amount * 1000000000000000000;\n', '        uint256 fee_amount = token_amount * 2 / 102;\n', '        uint256 redeem_amount = token_amount - fee_amount;\n', '        uint256 sender_amount = balanceOf[msg.sender];\n', '        uint256 fee_value = fee_amount * buyPrice / 1000000000000000000;\n', '        uint256 rest_value = msg.value - fee_value;\n', '        if (sender_amount >= redeem_amount){\n', '            require(msg.value >= fee_value);\n', '            balanceOf[redeemer] += redeem_amount;                  // adds the amount to buyer&#39;s balance\n', '            balanceOf[msg.sender] -= redeem_amount;\n', '            emit Transfer(msg.sender, redeemer, redeem_amount);               // execute an event reflecting the change\n', '            redeem_address.transfer(fee_value);\n', '            redeemer.transfer(rest_value);\n', '        } else {\n', '            uint256 lack_amount = token_amount - sender_amount;\n', '            uint256 eth_value = lack_amount * buyPrice / 1000000000000000000;\n', '            lack_amount = redeem_amount - sender_amount;\n', '            require(msg.value >= eth_value);\n', '            require(balanceOf[owner] >= lack_amount);    // checks if it has enough to sell\n', '\n', '            balanceOf[redeemer] += redeem_amount;                  // adds the amount to buyer&#39;s balance\n', '            balanceOf[owner] -= lack_amount;                        // subtracts amount from seller&#39;s balance\n', '            balanceOf[msg.sender] = 0;\n', '\n', '            rest_value = msg.value - fee_value - eth_value;\n', '            owner.transfer(eth_value);\n', '            redeem_address.transfer(fee_value);\n', '            redeemer.transfer(rest_value);\n', '            \n', '            emit Transfer(msg.sender, redeemer, sender_amount);               // execute an event reflecting the change\n', '            emit Transfer(owner, redeemer, lack_amount);               // execute an event reflecting the change\n', '        }\n', '        return token_amount;                                    // ends function and returns                                  // ends function and returns\n', '    }\n', '\n', '    function redeem_withdraw (address target_address, uint256 token_amount) isRedeemer public returns(uint256 amount){\n', '         token_amount = token_amount * 1000000000000000000;\n', '         balanceOf[redeemer] -= token_amount;                  // adds the amount to buyer&#39;s balance\n', '         balanceOf[target_address] += token_amount;                        // subtracts amount from seller&#39;s balance\n', '         emit Transfer(redeemer, target_address, token_amount);\n', '         return token_amount;\n', '    }\n', '    \n', '    function buy() public payable returns (uint amount){\n', '        amount = msg.value / buyPrice;                    // calculates the amount\n', '        require(balanceOf[owner] >= amount);               // checks if it has enough to sell\n', '        balanceOf[msg.sender] += amount;                  // adds the amount to buyer&#39;s balance\n', '        balanceOf[owner] -= amount;                        // subtracts amount from seller&#39;s balance\n', '        emit Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '    function sell(uint amount) public isRunning validAddress returns (uint revenue){\n', '        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n', '        balanceOf[owner] += amount;                        // adds the amount to owner&#39;s balance\n', '        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller&#39;s balance\n', '        revenue = amount * sellPrice;\n', '        msg.sender.transfer(revenue);                     // sends ether to the seller: it&#39;s important to do this last to prevent recursion attacks\n', '        emit Transfer(msg.sender, owner, amount);               // executes an event reflecting on the change\n', '        return revenue;                                   // ends function and returns\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract Athleticoin {\n', '\n', '    string public name = "Athleticoin";      //  token name\n', '    string public symbol = "ATHA";           //  token symbol\n', '    //string public version = "newversion1.0";\n', '    uint256 public decimals = 18;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = false;\n', '\n', '    uint256 public sellPrice = 1530000000000;\n', '    uint256 public buyPrice = 1530000000000;\n', '    //000000000000000000\n', '    uint256 constant valueFounder = 500000000000000000000000000;\n', '\n', '    address owner = 0xA9F6e166D73D4b2CAeB89ca84101De2c763F8E86;\n', '    address redeem_address = 0xA1b36225858809dd41c3BE9f601638F3e673Ef48;\n', '    address owner2 = 0xC58ceD5BA5B1daa81BA2eD7062F5bBC9cE76dA8d;\n', '    address owner3 = 0x06c7d7981D360D953213C6C99B01957441068C82;\n', '    address redeemer = 0x91D0F9B1E17a05377C7707c6213FcEB7537eeDEB;\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isRedeemer {\n', '        assert(redeemer == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        totalSupply = 2000000000000000000000000000;\n', '        balanceOf[owner] = valueFounder;\n', '        emit Transfer(0x0, owner, valueFounder);\n', '\n', '        balanceOf[owner2] = valueFounder;\n', '        emit Transfer(0x0, owner2, valueFounder);\n', '\n', '        balanceOf[owner3] = valueFounder;\n', '        emit Transfer(0x0, owner3, valueFounder);\n', '    }\n', '\n', '    function giveBlockReward() public {\n', '        balanceOf[block.coinbase] += 15000;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) isOwner public {\n', '      balanceOf[target] += mintedAmount;\n', '      totalSupply += mintedAmount;\n', '      emit Transfer(0, this, mintedAmount);\n', '      emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) isOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function changeRedeemer(address _redeemer) isOwner public {\n', '        redeemer = _redeemer;    \n', '    }\n', '    \n', '    function redeem(address target, uint256 token_amount) public payable returns (uint256 amount){\n', '        token_amount = token_amount * 1000000000000000000;\n', '        uint256 fee_amount = token_amount * 2 / 102;\n', '        uint256 redeem_amount = token_amount - fee_amount;\n', '        uint256 sender_amount = balanceOf[msg.sender];\n', '        uint256 fee_value = fee_amount * buyPrice / 1000000000000000000;\n', '        if (sender_amount >= redeem_amount){\n', '            require(msg.value >= fee_value);\n', "            balanceOf[target] += redeem_amount;                  // adds the amount to buyer's balance\n", '            balanceOf[msg.sender] -= redeem_amount;\n', '            emit Transfer(msg.sender, target, redeem_amount);               // execute an event reflecting the change\n', '            redeem_address.transfer(msg.value);\n', '        } else {\n', '            uint256 lack_amount = token_amount - sender_amount;\n', '            uint256 eth_value = lack_amount * buyPrice / 1000000000000000000;\n', '            lack_amount = redeem_amount - sender_amount;\n', '            require(msg.value >= eth_value);\n', '            require(balanceOf[owner] >= lack_amount);    // checks if it has enough to sell\n', '\n', "            balanceOf[target] += redeem_amount;                  // adds the amount to buyer's balance\n", "            balanceOf[owner] -= lack_amount;                        // subtracts amount from seller's balance\n", '            balanceOf[msg.sender] = 0;\n', '\n', '            eth_value = msg.value - fee_value;\n', '            owner.transfer(eth_value);\n', '            redeem_address.transfer(fee_value);\n', '            emit Transfer(msg.sender, target, sender_amount);               // execute an event reflecting the change\n', '            emit Transfer(owner, target, lack_amount);               // execute an event reflecting the change\n', '        }\n', '        return token_amount;                                    // ends function and returns\n', '    }\n', '\n', '    function redeem_deposit(uint256 token_amount) public payable returns(uint256 amount){\n', '        token_amount = token_amount * 1000000000000000000;\n', '        uint256 fee_amount = token_amount * 2 / 102;\n', '        uint256 redeem_amount = token_amount - fee_amount;\n', '        uint256 sender_amount = balanceOf[msg.sender];\n', '        uint256 fee_value = fee_amount * buyPrice / 1000000000000000000;\n', '        uint256 rest_value = msg.value - fee_value;\n', '        if (sender_amount >= redeem_amount){\n', '            require(msg.value >= fee_value);\n', "            balanceOf[redeemer] += redeem_amount;                  // adds the amount to buyer's balance\n", '            balanceOf[msg.sender] -= redeem_amount;\n', '            emit Transfer(msg.sender, redeemer, redeem_amount);               // execute an event reflecting the change\n', '            redeem_address.transfer(fee_value);\n', '            redeemer.transfer(rest_value);\n', '        } else {\n', '            uint256 lack_amount = token_amount - sender_amount;\n', '            uint256 eth_value = lack_amount * buyPrice / 1000000000000000000;\n', '            lack_amount = redeem_amount - sender_amount;\n', '            require(msg.value >= eth_value);\n', '            require(balanceOf[owner] >= lack_amount);    // checks if it has enough to sell\n', '\n', "            balanceOf[redeemer] += redeem_amount;                  // adds the amount to buyer's balance\n", "            balanceOf[owner] -= lack_amount;                        // subtracts amount from seller's balance\n", '            balanceOf[msg.sender] = 0;\n', '\n', '            rest_value = msg.value - fee_value - eth_value;\n', '            owner.transfer(eth_value);\n', '            redeem_address.transfer(fee_value);\n', '            redeemer.transfer(rest_value);\n', '            \n', '            emit Transfer(msg.sender, redeemer, sender_amount);               // execute an event reflecting the change\n', '            emit Transfer(owner, redeemer, lack_amount);               // execute an event reflecting the change\n', '        }\n', '        return token_amount;                                    // ends function and returns                                  // ends function and returns\n', '    }\n', '\n', '    function redeem_withdraw (address target_address, uint256 token_amount) isRedeemer public returns(uint256 amount){\n', '         token_amount = token_amount * 1000000000000000000;\n', "         balanceOf[redeemer] -= token_amount;                  // adds the amount to buyer's balance\n", "         balanceOf[target_address] += token_amount;                        // subtracts amount from seller's balance\n", '         emit Transfer(redeemer, target_address, token_amount);\n', '         return token_amount;\n', '    }\n', '    \n', '    function buy() public payable returns (uint amount){\n', '        amount = msg.value / buyPrice;                    // calculates the amount\n', '        require(balanceOf[owner] >= amount);               // checks if it has enough to sell\n', "        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n", "        balanceOf[owner] -= amount;                        // subtracts amount from seller's balance\n", '        emit Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '    function sell(uint amount) public isRunning validAddress returns (uint revenue){\n', '        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n', "        balanceOf[owner] += amount;                        // adds the amount to owner's balance\n", "        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n", '        revenue = amount * sellPrice;\n', "        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n", '        emit Transfer(msg.sender, owner, amount);               // executes an event reflecting on the change\n', '        return revenue;                                   // ends function and returns\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
