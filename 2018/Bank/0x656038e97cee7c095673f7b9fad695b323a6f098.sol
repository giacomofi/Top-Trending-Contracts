['pragma solidity ^0.4.24;\n', '\n', '/**\n', '__          ___               _          __    ___       ____  _ _            _\n', '\\ \\        / / |             | |        / _|  / _ \\     |  _ \\(_) |          (_)\n', ' \\ \\  /\\  / /| |__   ___  ___| |   ___ | |_  | | | |_  _| |_) |_| |_ ___ ___  _ _ __\n', "  \\ \\/  \\/ / | '_ \\ / _ \\/ _ \\ |  / _ \\|  _| | | | \\ \\/ /  _ <| | __/ __/ _ \\| | '_ \\\n", '   \\  /\\  /  | | | |  __/  __/ | | (_) | |   | |_| |>  <| |_) | | || (_| (_) | | | | |\n', '    \\/  \\/   |_| |_|\\___|\\___|_|  \\___/|_|    \\___//_/\\_\\____/|_|\\__\\___\\___/|_|_| |_|\n', '\n', '                                  `.-::::::::::::-.`\n', '                           .:::+:-.`            `.-:+:::.\n', '                      `::::.   `-                  -`   .:::-`\n', '                   .:::`        :         J        :        `:::.\n', '                `:/-            `-        A       -`            -/:`\n', '              ./:`               :        C      `:               `:/.\n', '            .+:                   :       K      :                  `:+.\n', '          `/-`..`                 -`      P     `-                 `..`-/`\n', '         :/`    ..`                :      O     :                `..    `/:\n', '       `+.        ..`              -`     T    `-              `..        .+`\n', '      .+`           ..`             :          :             `..           `+.\n', '     -+               ..`           -.        ..           `..               +-\n', '    .+                 `..`          :        :          `..                  +.\n', '   `o                    `..`        ..      ..        `..`                    o`\n', '   o`                      `..`     `./------/.`     `..`                      `o\n', '  -+``                       `..``-::.````````.::-``..`                       ``+-\n', '  s```....````                 `+:.  ..------..  .:+`                 ````....```o\n', ' .+       ````...````         .+. `--``      ``--` .+.         ````...````       +.\n', ' +.              ````....`````+` .:`            `:. `o`````....````              ./\n', ' o                       ````s` `/                /` `s````                       o\n', ' s                           s  /`                .:  s                           s\n', ' s                           s  /`       0xB      `/  s                           s\n', ' s                        ```s` `/                /` `s```                        o\n', ' +.               ````....```.+  .:`            `:.  +.```....````               .+\n', ' ./        ```....````        -/` `--`        `--` `/.        ````....```        +.\n', '  s````....```                 .+:` `.--------.` `:+.                 ```....````s\n', '  :/```                       ..`.::-.``    ``.-::.`..                       ```/:\n', '   o`                       ..`     `-/-::::-/-`     `..                       `o\n', '   `o                     ..`        ..      ..        `..                     o`\n', '    -/                  ..`          :        :          `..                  /-\n', '     -/               ..`           ..        ..           `..               /-\n', '      -+`           ..`             :          :             `-.           `+-\n', '       .+.        .-`              -`          ..              `-.        .+.\n', '         /:     .-`                :            :                `-.    `:/\n', '          ./- .-`                 -`            `-                 `-. -/.\n', '            -+-                   :              :                   :+-\n', '              -/-`               -`              `-               `-/-\n', '                .:/.             :                :             ./:.\n', '                   -:/-         :                  :         -/:-\n', '                      .:::-`   `-                  -`   `-:::.\n', '                          `-:::+-.`              `.:+:::-`\n', '                                `.-::::::::::::::-.`\n', '\n', '---Design---\n', 'Jörmungandr\n', '\n', '---Contract and Frontend---\n', 'Mr Fahrenheit\n', 'Jörmungandr\n', '\n', '---0xBitcoin Specialist---\n', 'Mr Fahrenheit\n', '\n', '---Contract Auditor---\n', '8 ฿ł₮ ₮Ɽł₱\n', '\n', '---Contract Advisors---\n', 'Etherguy\n', 'Norsefire\n', '\n', '**/\n', '\n', 'contract ERC20Interface\n', '{\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract WheelOf0xBitcoin {\n', '    using SafeMath for uint;\n', '\n', '    //  Modifiers\n', '\n', '    modifier nonContract() {                // contracts pls go\n', '        require(tx.origin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier gameActive() {\n', '        require(gamePaused == false);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin(){\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    // Events\n', '\n', '    event onDeposit(\n', '        address indexed customerAddress,\n', '        uint256 tokensIn,\n', '        uint256 contractBal,\n', '        uint256 devFee,\n', '        uint timestamp\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 tokensOut,\n', '        uint256 contractBal,\n', '        uint timestamp\n', '    );\n', '\n', '    event spinResult(\n', '        address indexed customerAddress,\n', '        uint256 wheelNumber,\n', '        uint256 outcome,\n', '        uint256 tokensSpent,\n', '        uint256 tokensReturned,\n', '        uint256 userBalance,\n', '        uint timestamp\n', '    );\n', '\n', '    uint256 _seed;\n', '    address admin;\n', '    bool public gamePaused = false;\n', '    uint256 minBet = 100000000;\n', '    uint256 maxBet = 500000000000;\n', '    uint256 devFeeBalance = 0;\n', '\n', '    uint8[10] brackets = [1,3,6,12,24,40,56,68,76,80];\n', '\n', '    struct playerSpin {\n', '        uint256 betAmount;\n', '        uint48 blockNum;\n', '    }\n', '\n', '    mapping(address => playerSpin) public playerSpins;\n', '    mapping(address => uint256) internal personalFactorLedger_;\n', '    mapping(address => uint256) internal balanceLedger_;\n', '\n', '    uint256 internal globalFactor = 10e21;\n', '    uint256 constant internal constantFactor = 10e21 * 10e21;\n', '    address public tokenAddress = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31;\n', '\n', '    constructor()\n', '        public\n', '    {\n', '        admin = msg.sender;\n', '    }\n', '\n', '\n', '    function getBalance()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ERC20Interface(tokenAddress).balanceOf(this);\n', '    }\n', '\n', '\n', '    //deposit needs approval from token contract\n', '    function deposit(address _customerAddress, uint256 amount)\n', '        public\n', '        gameActive\n', '    {\n', '        require(tx.origin == _customerAddress);\n', '        require(amount >= (minBet * 2));\n', '        require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, this, amount), "token transfer failed");\n', '        // Add 4% fee of the buy to devFeeBalance\n', '        uint256 devFee = amount / 33;\n', '        devFeeBalance = devFeeBalance.add(devFee);\n', '        // Adjust ledgers while taking the dev fee into account\n', '        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(amount).sub(devFee);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onDeposit(_customerAddress, amount, getBalance(), devFee, now);\n', '    }\n', '\n', '\n', '    function receiveApproval(address receiveFrom, uint256 amount, address tknaddr, bytes data)\n', '      public\n', '    {\n', '        if (uint(data[0]) == 0) {\n', '          deposit(receiveFrom, amount);\n', '        } else {\n', '          depositAndSpin(receiveFrom, amount);\n', '        }\n', '    }\n', '\n', '\n', '    //withdraw from contract\n', '    function withdraw(uint256 amount)\n', '      public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        require(amount <= tokenBalanceOf(_customerAddress));\n', '        require(amount > 0);\n', '        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))\n', '            revert();\n', '        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).sub(amount);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '        emit onWithdraw(_customerAddress, amount, getBalance(), now);\n', '    }\n', '\n', '\n', '    function withdrawAll()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', "        // Set the sell amount to the user's full balance, don't sell if empty\n", '        uint256 amount = tokenBalanceOf(_customerAddress);\n', '        require(amount > 0);\n', '        // Transfer balance and update user ledgers\n', '        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))\n', '            revert();\n', '        balanceLedger_[_customerAddress] = 0;\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '        emit onWithdraw(_customerAddress, amount, getBalance(), now);\n', '    }\n', '\n', '\n', '    function tokenBalanceOf(address _customerAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Balance ledger * personal factor * globalFactor / constantFactor\n', '        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\n', '    }\n', '\n', '\n', '    function spinTokens(uint256 betAmount)\n', '        public\n', '        nonContract\n', '        gameActive\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        // User must have enough eth\n', '        require(tokenBalanceOf(_customerAddress) >= betAmount);\n', '        // User must bet at least the minimum\n', '        require(betAmount >= minBet);\n', '        // If the user bets more than maximum...they just bet the maximum\n', '        if (betAmount > maxBet){\n', '            betAmount = maxBet;\n', '        }\n', '        // User cannot bet more than 10% of available pool\n', '        if (betAmount > betPool(_customerAddress)/10) {\n', '            betAmount = betPool(_customerAddress)/10;\n', '        }\n', '        // Execute the bet and return the outcome\n', '        startSpin(betAmount, _customerAddress);\n', '    }\n', '\n', '\n', '    function spinAll()\n', '        public\n', '        nonContract\n', '        gameActive\n', '    {\n', '        address _customerAddress = msg.sender;\n', "        // set the bet amount to the user's full balance\n", '        uint256 betAmount = tokenBalanceOf(_customerAddress);\n', '        // User cannot bet more than 10% of available pool\n', '        if (betAmount > betPool(_customerAddress)/10) {\n', '            betAmount = betPool(_customerAddress)/10;\n', '        }\n', '        // User must bet more than the minimum\n', '        require(betAmount >= minBet);\n', '        // If the user bets more than maximum...they just bet the maximum\n', '        if (betAmount >= maxBet){\n', '            betAmount = maxBet;\n', '        }\n', '        // Execute the bet and return the outcome\n', '        startSpin(betAmount, _customerAddress);\n', '    }\n', '\n', '\n', '    //deposit needs approval from token contract\n', '    function depositAndSpin(address _customerAddress, uint256 betAmount)\n', '        public\n', '        gameActive\n', '    {\n', '        require(tx.origin == _customerAddress);\n', '        require(betAmount >= (minBet * 2));\n', '        require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, this, betAmount), "token transfer failed");\n', '        // Add 4% fee of the buy to devFeeBalance\n', '        uint256 devFee = betAmount / 33;\n', '        devFeeBalance = devFeeBalance.add(devFee);\n', '        // Adjust ledgers while taking the dev fee into account\n', '        balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(betAmount).sub(devFee);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onDeposit(_customerAddress, betAmount, getBalance(), devFee, now);\n', '\n', '        betAmount = betAmount.sub(devFee);\n', '        // If the user bets more than maximum...they just bet the maximum\n', '        if (betAmount >= maxBet){\n', '            betAmount = maxBet;\n', '        }\n', '        // User cannot bet more than 10% of available pool\n', '        if (betAmount > betPool(_customerAddress)/10) {\n', '            betAmount = betPool(_customerAddress)/10;\n', '        }\n', '        // Execute the bet while taking the dev fee into account, and return the outcome\n', '        startSpin(betAmount, _customerAddress);\n', '    }\n', '\n', '\n', '    function betPool(address _customerAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Balance of contract, minus eth balance of user and accrued dev fees\n', '        return getBalance().sub(tokenBalanceOf(_customerAddress)).sub(devFeeBalance);\n', '    }\n', '\n', '    /*\n', '        panicButton and refundUser are here incase of an emergency, or launch of a new contract\n', '        The game will be frozen, and all token holders will be refunded\n', '    */\n', '\n', '    function panicButton(bool newStatus)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        gamePaused = newStatus;\n', '    }\n', '\n', '\n', '    function refundUser(address _customerAddress)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        uint256 withdrawAmount = tokenBalanceOf(_customerAddress);\n', '        if(!ERC20Interface(tokenAddress).transfer(_customerAddress, withdrawAmount))\n', '            revert();\n', '        balanceLedger_[_customerAddress] = 0;\n', '\t      personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '        emit onWithdraw(_customerAddress, withdrawAmount, getBalance(), now);\n', '    }\n', '\n', '\n', '    function updateMinBet(uint256 newMin)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(newMin > 0);\n', '        minBet = newMin;\n', '    }\n', '\n', '\n', '    function updateMaxBet(uint256 newMax)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(newMax > 0);\n', '        maxBet = newMax;\n', '    }\n', '\n', '\n', '    function getDevBalance()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return devFeeBalance;\n', '    }\n', '\n', '\n', '    function withdrawDevFees()\n', '        public\n', '    {\n', '        address fahrenheit = 0x7e7e2bf7EdC52322ee1D251432c248693eCd9E0f;\n', '        address jormun = 0xf14BE3662FE4c9215c27698166759Db6967De94f;\n', '        uint256 initDevBal = devFeeBalance;\n', '        if(!ERC20Interface(tokenAddress).transfer(fahrenheit, devFeeBalance/2))\n', '          revert();\n', '        if(!ERC20Interface(tokenAddress).transfer(jormun, devFeeBalance/2))\n', '          revert();\n', '        devFeeBalance = devFeeBalance.sub(initDevBal/2);\n', '        devFeeBalance = devFeeBalance.sub(initDevBal/2);\n', '    }\n', '\n', '\n', '    function finishSpin(address _customerAddress)\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return _finishSpin(_customerAddress);\n', '    }\n', '\n', '\n', '    // Internal Functions\n', '\n', '\n', '    function startSpin(uint256 betAmount, address _customerAddress)\n', '        internal\n', '    {\n', '        playerSpin memory spin = playerSpins[_customerAddress];\n', '        require(block.number != spin.blockNum);\n', '\n', '        if (spin.blockNum != 0) {\n', '            _finishSpin(_customerAddress);\n', '        }\n', '        lose(_customerAddress, betAmount);\n', '        playerSpins[_customerAddress] = playerSpin(uint256(betAmount), uint48(block.number));\n', '    }\n', '\n', '\n', '    function _finishSpin(address _customerAddress)\n', '        internal\n', '        returns (uint256 resultNum)\n', '    {\n', '        playerSpin memory spin = playerSpins[_customerAddress];\n', '        require(block.number != spin.blockNum);\n', '\n', '        uint result;\n', '        if (block.number - spin.blockNum > 255) {\n', '            resultNum = 80;\n', '            result = 9; // timed out :(\n', '            return resultNum;\n', '        } else {\n', '            resultNum = random(80, spin.blockNum, _customerAddress);\n', '            result = determinePrize(resultNum);\n', '        }\n', '\n', '        uint256 betAmount = spin.betAmount;\n', '        uint256 returnedAmount;\n', '\n', '        if (result < 5)                                             // < 5 = WIN\n', '        {\n', '            uint256 wonAmount;\n', '            if (result == 0){                                       // Grand Jackpot\n', '                wonAmount = betAmount.mul(9) / 10;                  // +90% of original bet\n', '            } else if (result == 1){                                // Jackpot\n', '                wonAmount = betAmount.mul(8) / 10;                  // +80% of original bet\n', '            } else if (result == 2){                                // Grand Prize\n', '                wonAmount = betAmount.mul(7) / 10;                  // +70% of original bet\n', '            } else if (result == 3){                                // Major Prize\n', '                wonAmount = betAmount.mul(6) / 10;                  // +60% of original bet\n', '            } else if (result == 4){                                // Minor Prize\n', '                wonAmount = betAmount.mul(3) / 10;                  // +30% of original bet\n', '            }\n', '            returnedAmount = betAmount.add(wonAmount);\n', '        } else if (result == 5){                                    // 5 = Refund\n', '            returnedAmount = betAmount;\n', '        } else {                                                    // > 5 = LOSE\n', '            uint256 lostAmount;\n', '            if (result == 6){                                \t    // Minor Loss\n', '                lostAmount = betAmount / 10;                        // -10% of original bet\n', '            } else if (result == 7){                                // Major Loss\n', '                lostAmount = betAmount / 4;                         // -25% of original bet\n', '            } else if (result == 8){                                // Grand Loss\n', '                lostAmount = betAmount / 2;                     \t// -50% of original bet\n', '            } else if (result == 9){                                // Total Loss\n', '                lostAmount = betAmount;                             // -100% of original bet\n', '            }\n', '            returnedAmount = betAmount.sub(lostAmount);\n', '        }\n', '        if (returnedAmount > 0) {\n', '            win(_customerAddress, returnedAmount);                  // Give user their tokens\n', '        }\n', '        uint256 newBal = tokenBalanceOf(_customerAddress);\n', '        emit spinResult(_customerAddress, resultNum, result, betAmount, returnedAmount, newBal, now);\n', '\n', '        playerSpins[_customerAddress] = playerSpin(uint256(0), uint48(0));\n', '\n', '        return resultNum;\n', '    }\n', '\n', '\n', '    function maxRandom(uint blockn, address entropy)\n', '        internal\n', '        returns (uint256 randomNumber)\n', '    {\n', '        return uint256(keccak256(\n', '            abi.encodePacked(\n', '              blockhash(blockn),\n', '              entropy)\n', '        ));\n', '    }\n', '\n', '\n', '    function random(uint256 upper, uint256 blockn, address entropy)\n', '        internal\n', '        returns (uint256 randomNumber)\n', '    {\n', '        return maxRandom(blockn, entropy) % upper + 1;\n', '    }\n', '\n', '\n', '    function determinePrize(uint256 result)\n', '        internal\n', '        returns (uint256 resultNum)\n', '    {\n', '        // Loop until the result bracket is determined\n', '        for (uint8 i=0;i<=9;i++){\n', '            if (result <= brackets[i]){\n', '                return i;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function lose(address _customerAddress, uint256 lostAmount)\n', '        internal\n', '    {\n', '        uint256 customerBal = tokenBalanceOf(_customerAddress);\n', '        // Increase amount of eth everyone else owns\n', '        uint256 globalIncrease = globalFactor.mul(lostAmount) / betPool(_customerAddress);\n', '        globalFactor = globalFactor.add(globalIncrease);\n', '        // Update user ledgers\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', "        // User can't lose more than they have\n", '        if (lostAmount > customerBal){\n', '            lostAmount = customerBal;\n', '        }\n', '        balanceLedger_[_customerAddress] = customerBal.sub(lostAmount);\n', '    }\n', '\n', '\n', '    function win(address _customerAddress, uint256 wonAmount)\n', '        internal\n', '    {\n', '        uint256 customerBal = tokenBalanceOf(_customerAddress);\n', '        // Decrease amount of eth everyone else owns\n', '        uint256 globalDecrease = globalFactor.mul(wonAmount) / betPool(_customerAddress);\n', '        globalFactor = globalFactor.sub(globalDecrease);\n', '        // Update user ledgers\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '        balanceLedger_[_customerAddress] = customerBal.add(wonAmount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']