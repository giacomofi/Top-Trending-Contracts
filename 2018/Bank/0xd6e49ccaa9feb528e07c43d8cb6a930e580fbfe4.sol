['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ExchangeHandler.sol\n', '\n', '/// @title Interface for all exchange handler contracts\n', 'interface ExchangeHandler {\n', '\n', '    /// @dev Get the available amount left to fill for an order\n', '    /// @param orderAddresses Array of address values needed for this DEX order\n', '    /// @param orderValues Array of uint values needed for this DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Available amount left to fill for this order\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '\n', '    /// @dev Perform a buy order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performBuy(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external payable returns (uint256);\n', '\n', '    /// @dev Perform a sell order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performSell(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/EtherDelta.sol\n', '\n', 'interface EtherDelta {\n', '\n', '    function deposit() public payable;\n', '\n', '    function withdraw(uint amount) public;\n', '\n', '    function depositToken(address token, uint amount) public;\n', '\n', '    function withdrawToken(address token, uint amount) public;\n', '\n', '    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public;\n', '\n', '    function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\n', '}\n', '\n', 'contract EtherDeltaHandler is ExchangeHandler {\n', '    // State variables\n', '    EtherDelta public exchange;\n', '\n', '    // Constructor\n', '    constructor(address _exchange) public {\n', '        exchange = EtherDelta(_exchange);\n', '    }\n', '\n', '    // Public functions\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256) {\n', '\n', '        if(block.number > orderValues[2]) {\n', '            // Order has expired\n', '            return 0;\n', '        }\n', '\n', '        uint256 availableVolume = exchange.availableVolume(\n', '            orderAddresses[2],\n', '            orderValues[1],\n', '            orderAddresses[1],\n', '            orderValues[0],\n', '            orderValues[2],\n', '            orderValues[3],\n', '            orderAddresses[0],\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        // Adds the exchange fee onto the available amount\n', '        return getPartialAmount(availableVolume, SafeMath.sub(1 ether, exchangeFee), 1 ether);\n', '    }\n', '\n', '    function performBuy(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external payable returns (uint256) {\n', '        require(msg.value == amountToFill, "EtherDeltaHandler - amountToFill != msg.value");\n', '\n', '        deposit(amountToFill);\n', '\n', '        uint256 amountToTrade;\n', '        uint256 fee;\n', '\n', '        (amountToTrade, fee) = substractFee(exchangeFee, amountToFill);\n', '\n', '        trade(\n', '            orderAddresses,\n', '            orderValues,\n', '            amountToTrade,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        uint256 tokenAmountObtained = getPartialAmount(orderValues[0], orderValues[1], amountToTrade);\n', '\n', '        withdrawToken(orderAddresses[1], tokenAmountObtained);\n', '        transferTokenToSender(orderAddresses[1], tokenAmountObtained);\n', '\n', '        return tokenAmountObtained;\n', '    }\n', '\n', '    function performSell(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256) {\n', '        depositToken(orderAddresses[2], amountToFill);\n', '\n', '        uint256 amountToTrade;\n', '        uint256 fee;\n', '\n', '        (amountToTrade, fee) = substractFee(exchangeFee, amountToFill);\n', '\n', '        trade(\n', '            orderAddresses,\n', '            orderValues,\n', '            amountToTrade,\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '\n', '        uint256 etherAmountObtained = getPartialAmount(orderValues[0], orderValues[1], amountToTrade);\n', '\n', '        withdraw(etherAmountObtained);\n', '        transferEtherToSender(etherAmountObtained);\n', '\n', '        return etherAmountObtained;\n', '    }\n', '\n', '    // Internal functions\n', '    function trade(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 amountToTrade,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) internal {\n', '        exchange.trade(\n', '            orderAddresses[2],\n', '            orderValues[1],\n', '            orderAddresses[1],\n', '            orderValues[0],\n', '            orderValues[2],\n', '            orderValues[3],\n', '            orderAddresses[0],\n', '            v,\n', '            r,\n', '            s,\n', '            amountToTrade\n', '        );\n', '    }\n', '\n', '    function substractFee(uint256 feePercentage, uint256 amount) internal pure returns (uint256, uint256) {\n', '        uint256 fee = getPartialAmount(amount, 1 ether, feePercentage);\n', '        return (SafeMath.sub(amount, fee), fee);\n', '    }\n', '\n', '    function deposit(uint256 amount) internal {\n', '        exchange.deposit.value(amount)();\n', '    }\n', '\n', '    function depositToken(address token, uint256 amount) internal {\n', '        require(Token(token).approve(address(exchange), amount), "EtherDeltaHandler - unable to deposit token, approve failed");\n', '        exchange.depositToken(token, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) internal {\n', '        exchange.withdraw(amount);\n', '    }\n', '\n', '    function withdrawToken(address token, uint256 amount) internal {\n', '        exchange.withdrawToken(token, amount);\n', '    }\n', '\n', '    function transferTokenToSender(address token, uint256 amount) internal {\n', '        require(Token(token).transfer(msg.sender, amount), "EtherDeltaHandler - failed to transfer token to sender");\n', '    }\n', '\n', '    function transferEtherToSender(uint256 amount) internal {\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function getPartialAmount(uint256 numerator, uint256 denominator, uint256 target) internal pure returns (uint256) {\n', '        return SafeMath.div(SafeMath.mul(numerator, target), denominator);\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.sender == address(exchange), "EtherDeltaHandler - Only exchange allowed to send ether");\n', '    }\n', '}']