['pragma solidity ^0.4.13;\n', '\n', 'contract EtherShare {\n', '    \n', '    uint public count;\n', '    address[] public link; // if there are other EtherShare contracts\n', '\n', '    struct oneShare {\n', '        address sender;\n', '        string nickname;\n', '        uint timestamp;\n', '        bool AllowUpdated;\n', '        string content;\n', '    }\n', '    mapping(uint => oneShare[]) public allShare;\n', '\n', '    event EVENT(uint ShareID, uint ReplyID);\n', '\n', '    function EtherShare() public {\n', '        NewShare("Peilin Zheng", false, "Hello, EtherShare!");  // zhengpeilin.com\n', '    }\n', '\n', '    function NewShare(string nickname, bool AllowUpdated, string content) public {\n', '        allShare[count].push(oneShare(msg.sender, nickname, now, AllowUpdated, content)); // add a new share\n', '        EVENT(count,0);\n', '        count++;\n', '    }\n', '\n', '    function ReplyShare(uint ShareID, string nickname, bool AllowUpdated, string content) public {\n', '        require(ShareID<count); // reply to a existed share\n', '        allShare[ShareID].push(oneShare(msg.sender, nickname, now, AllowUpdated, content));\n', '        EVENT(ShareID,allShare[ShareID].length-1);\n', '    }\n', '\n', '    function Update(uint ShareID, uint ReplyID, string content) public {\n', '        require(msg.sender==allShare[ShareID][ReplyID].sender && allShare[ShareID][ReplyID].AllowUpdated);  // only sender can update the share or reply which is AllowUpdated\n', '        allShare[ShareID][ReplyID].content = content;\n', '        allShare[ShareID][ReplyID].timestamp = now;\n', '        EVENT(ShareID,ReplyID);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract EtherShare {\n', '    \n', '    uint public count;\n', '    address[] public link; // if there are other EtherShare contracts\n', '\n', '    struct oneShare {\n', '        address sender;\n', '        string nickname;\n', '        uint timestamp;\n', '        bool AllowUpdated;\n', '        string content;\n', '    }\n', '    mapping(uint => oneShare[]) public allShare;\n', '\n', '    event EVENT(uint ShareID, uint ReplyID);\n', '\n', '    function EtherShare() public {\n', '        NewShare("Peilin Zheng", false, "Hello, EtherShare!");  // zhengpeilin.com\n', '    }\n', '\n', '    function NewShare(string nickname, bool AllowUpdated, string content) public {\n', '        allShare[count].push(oneShare(msg.sender, nickname, now, AllowUpdated, content)); // add a new share\n', '        EVENT(count,0);\n', '        count++;\n', '    }\n', '\n', '    function ReplyShare(uint ShareID, string nickname, bool AllowUpdated, string content) public {\n', '        require(ShareID<count); // reply to a existed share\n', '        allShare[ShareID].push(oneShare(msg.sender, nickname, now, AllowUpdated, content));\n', '        EVENT(ShareID,allShare[ShareID].length-1);\n', '    }\n', '\n', '    function Update(uint ShareID, uint ReplyID, string content) public {\n', '        require(msg.sender==allShare[ShareID][ReplyID].sender && allShare[ShareID][ReplyID].AllowUpdated);  // only sender can update the share or reply which is AllowUpdated\n', '        allShare[ShareID][ReplyID].content = content;\n', '        allShare[ShareID][ReplyID].timestamp = now;\n', '        EVENT(ShareID,ReplyID);\n', '    }\n', '}']
