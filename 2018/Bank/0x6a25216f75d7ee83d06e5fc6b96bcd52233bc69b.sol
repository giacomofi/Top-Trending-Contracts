['contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '   function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract XaurumInterface {\n', '    function doMelt(uint256 _xaurAmount, uint256 _goldAmount) public returns (bool);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', 'contract MeltingContract is Owned{\n', '    address XaurumAddress;\n', '    uint public XaurumAmountMelted;\n', '    uint public GoldAmountMelted;\n', '    \n', '    event MeltDone(uint xaurAmount, uint goldAmount);\n', '    \n', '    function MeltingContract() public {\n', '        XaurumAddress = 0x4DF812F6064def1e5e029f1ca858777CC98D2D81;\n', '    }\n', '    \n', '    function doMelt(uint256 _xaurAmount, uint256 _goldAmount) public onlyOwner returns (bool) {\n', '        uint actualBalance = XaurumInterface(XaurumAddress).balanceOf(address(this));\n', '        require(actualBalance > XaurumAmountMelted);\n', '        require(actualBalance - XaurumAmountMelted >= _xaurAmount);\n', '        XaurumInterface(XaurumAddress).doMelt(_xaurAmount, _goldAmount);\n', '        XaurumAmountMelted += _xaurAmount;\n', '        GoldAmountMelted += _goldAmount;\n', '        MeltDone(_xaurAmount, _goldAmount);\n', '    }\n', '}']
['contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '   function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract XaurumInterface {\n', '    function doMelt(uint256 _xaurAmount, uint256 _goldAmount) public returns (bool);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '}\n', '\n', 'contract MeltingContract is Owned{\n', '    address XaurumAddress;\n', '    uint public XaurumAmountMelted;\n', '    uint public GoldAmountMelted;\n', '    \n', '    event MeltDone(uint xaurAmount, uint goldAmount);\n', '    \n', '    function MeltingContract() public {\n', '        XaurumAddress = 0x4DF812F6064def1e5e029f1ca858777CC98D2D81;\n', '    }\n', '    \n', '    function doMelt(uint256 _xaurAmount, uint256 _goldAmount) public onlyOwner returns (bool) {\n', '        uint actualBalance = XaurumInterface(XaurumAddress).balanceOf(address(this));\n', '        require(actualBalance > XaurumAmountMelted);\n', '        require(actualBalance - XaurumAmountMelted >= _xaurAmount);\n', '        XaurumInterface(XaurumAddress).doMelt(_xaurAmount, _goldAmount);\n', '        XaurumAmountMelted += _xaurAmount;\n', '        GoldAmountMelted += _goldAmount;\n', '        MeltDone(_xaurAmount, _goldAmount);\n', '    }\n', '}']
