['pragma solidity ^0.4.23;\n', '\n', 'contract EtherSmart {\n', '\n', '    mapping (address => uint256) public invested;\n', '    mapping (address => uint256) public atBlock;\n', '    address techSupport = 0x88507e53d2D5348AbD5155E47EF694ACf4b140D0;\n', '    uint techSupportPercent = 2;\n', '    address advertising = 0x8464E6613F87Fa5F744Ebfc0db4B9C7Cc1f97a07;\n', '    uint advertisingPercent = 7;\n', '    address defaultReferrer = 0xDa35961E80f19D0e389db2674E562277CA4d31f2;\n', '    uint refPercent = 2;\n', '    uint refBack = 2;\n', '\n', '    // calculation of the percentage of profit depending on the balance sheet\n', '    // returns the percentage times 10\n', '    function calculateProfitPercent(uint bal) private pure returns (uint) {\n', '        if (bal >= 1e22) { // balance >= 10000 ETH\n', '            return 50;\n', '        }\n', '        if (bal >= 7e21) { // balance >= 7000 ETH\n', '            return 47;\n', '        }\n', '        if (bal >= 5e21) { // balance >= 5000 ETH\n', '            return 45;\n', '        }\n', '        if (bal >= 3e21) { // balance >= 3000 ETH\n', '            return 42;\n', '        }\n', '        if (bal >= 1e21) { // balance >= 1000 ETH\n', '            return 40;\n', '        }\n', '        if (bal >= 5e20) { // balance >= 500 ETH\n', '            return 35;\n', '        }\n', '        if (bal >= 2e20) { // balance >= 200 ETH\n', '            return 30;\n', '        }\n', '        if (bal >= 1e20) { // balance >= 100 ETH\n', '            return 27;\n', '        } else {\n', '            return 25;\n', '        }\n', '    }\n', '\n', '    // transfer default percents of invested\n', '    function transferDefaultPercentsOfInvested(uint value) private {\n', '        techSupport.transfer(value * techSupportPercent / 100);\n', '        advertising.transfer(value * advertisingPercent / 100);\n', '    }\n', '\n', '    // convert bytes to eth address \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    // transfer default refback and referrer percents of invested\n', '    function transferRefPercents(uint value, address sender) private {\n', '        if (msg.data.length != 0) {\n', '            address referrer = bytesToAddress(msg.data);\n', '            if(referrer != sender) {\n', '                sender.transfer(value * refBack / 100);\n', '                referrer.transfer(value * refPercent / 100);\n', '            } else {\n', '                defaultReferrer.transfer(value * refPercent / 100);\n', '            }\n', '        } else {\n', '            defaultReferrer.transfer(value * refPercent / 100);\n', '        }\n', '    }\n', '\n', '    // calculate profit amount as such:\n', '    // amount = (amount invested) * ((percent * 10)/ 1000) * (blocks since last transaction) / 6100\n', '    // percent is multiplied by 10 to calculate fractional percentages and then divided by 1000 instead of 100\n', '    // 6100 is an average block count per day produced by Ethereum blockchain\n', '    function () external payable {\n', '        if (invested[msg.sender] != 0) {\n', '            \n', '            uint thisBalance = address(this).balance;\n', '            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 6100;\n', '\n', '            address sender = msg.sender;\n', '            sender.transfer(amount);\n', '        }\n', '        if (msg.value > 0) {\n', '            transferDefaultPercentsOfInvested(msg.value);\n', '            transferRefPercents(msg.value, msg.sender);\n', '        }\n', '        atBlock[msg.sender] = block.number;\n', '        invested[msg.sender] += (msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract EtherSmart {\n', '\n', '    mapping (address => uint256) public invested;\n', '    mapping (address => uint256) public atBlock;\n', '    address techSupport = 0x88507e53d2D5348AbD5155E47EF694ACf4b140D0;\n', '    uint techSupportPercent = 2;\n', '    address advertising = 0x8464E6613F87Fa5F744Ebfc0db4B9C7Cc1f97a07;\n', '    uint advertisingPercent = 7;\n', '    address defaultReferrer = 0xDa35961E80f19D0e389db2674E562277CA4d31f2;\n', '    uint refPercent = 2;\n', '    uint refBack = 2;\n', '\n', '    // calculation of the percentage of profit depending on the balance sheet\n', '    // returns the percentage times 10\n', '    function calculateProfitPercent(uint bal) private pure returns (uint) {\n', '        if (bal >= 1e22) { // balance >= 10000 ETH\n', '            return 50;\n', '        }\n', '        if (bal >= 7e21) { // balance >= 7000 ETH\n', '            return 47;\n', '        }\n', '        if (bal >= 5e21) { // balance >= 5000 ETH\n', '            return 45;\n', '        }\n', '        if (bal >= 3e21) { // balance >= 3000 ETH\n', '            return 42;\n', '        }\n', '        if (bal >= 1e21) { // balance >= 1000 ETH\n', '            return 40;\n', '        }\n', '        if (bal >= 5e20) { // balance >= 500 ETH\n', '            return 35;\n', '        }\n', '        if (bal >= 2e20) { // balance >= 200 ETH\n', '            return 30;\n', '        }\n', '        if (bal >= 1e20) { // balance >= 100 ETH\n', '            return 27;\n', '        } else {\n', '            return 25;\n', '        }\n', '    }\n', '\n', '    // transfer default percents of invested\n', '    function transferDefaultPercentsOfInvested(uint value) private {\n', '        techSupport.transfer(value * techSupportPercent / 100);\n', '        advertising.transfer(value * advertisingPercent / 100);\n', '    }\n', '\n', '    // convert bytes to eth address \n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    // transfer default refback and referrer percents of invested\n', '    function transferRefPercents(uint value, address sender) private {\n', '        if (msg.data.length != 0) {\n', '            address referrer = bytesToAddress(msg.data);\n', '            if(referrer != sender) {\n', '                sender.transfer(value * refBack / 100);\n', '                referrer.transfer(value * refPercent / 100);\n', '            } else {\n', '                defaultReferrer.transfer(value * refPercent / 100);\n', '            }\n', '        } else {\n', '            defaultReferrer.transfer(value * refPercent / 100);\n', '        }\n', '    }\n', '\n', '    // calculate profit amount as such:\n', '    // amount = (amount invested) * ((percent * 10)/ 1000) * (blocks since last transaction) / 6100\n', '    // percent is multiplied by 10 to calculate fractional percentages and then divided by 1000 instead of 100\n', '    // 6100 is an average block count per day produced by Ethereum blockchain\n', '    function () external payable {\n', '        if (invested[msg.sender] != 0) {\n', '            \n', '            uint thisBalance = address(this).balance;\n', '            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 6100;\n', '\n', '            address sender = msg.sender;\n', '            sender.transfer(amount);\n', '        }\n', '        if (msg.value > 0) {\n', '            transferDefaultPercentsOfInvested(msg.value);\n', '            transferRefPercents(msg.value, msg.sender);\n', '        }\n', '        atBlock[msg.sender] = block.number;\n', '        invested[msg.sender] += (msg.value);\n', '    }\n', '}']
