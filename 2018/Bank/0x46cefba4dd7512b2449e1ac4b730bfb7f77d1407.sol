['pragma solidity ^0.4.21;\n', '\n', '/// @author MinakoKojima (https://github.com/lychees)\n', 'contract DecentralizedExchangeHotPotato {\n', '  address private owner;\n', '  mapping (address => bool) private admins;\n', '  \n', '  struct Order {\n', '    address creator;    \n', '    address owner;\n', '    address issuer;    \n', '    uint256 tokenId;    \n', '    uint256 price;\n', '    uint256 startTime;\n', '    uint256 endTime;\n', '  }  \n', '  Order[] private orderBook;\n', '  uint256 private orderBookSize;\n', '\n', '  function DecentralizedExchangeHotPotato() public {\n', '    owner = msg.sender;\n', '    admins[owner] = true;    \n', '  }\n', '\n', '  /* Modifiers */\n', '  modifier onlyOwner() {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier onlyAdmins() {\n', '    require(admins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /* Owner */\n', '  function setOwner (address _owner) onlyOwner() public {\n', '    owner = _owner;\n', '  }\n', '\n', '  function addAdmin (address _admin) onlyOwner() public {\n', '    admins[_admin] = true;\n', '  }\n', '\n', '  function removeAdmin (address _admin) onlyOwner() public {\n', '    delete admins[_admin];\n', '  }\n', '\n', '  /* Withdraw */\n', '  function withdrawAll () onlyAdmins() public {\n', '   msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '  function withdrawAmount (uint256 _amount) onlyAdmins() public {\n', '    msg.sender.transfer(_amount);\n', '  }\n', '\n', '  /* ERC721 */\n', '  function name() public pure returns (string _name) {\n', '    return "dapdap.io | HotPotatoExchange";\n', '  }\n', '\n', '  /* Read */\n', '  function isAdmin(address _admin) public view returns (bool _isAdmin) {\n', '    return admins[_admin];\n', '  }\n', '  function totalOrder() public view returns (uint256 _totalOrder) {\n', '    return orderBookSize;\n', '  }  \n', '  function allOf (uint256 _id) public view returns (address _creator, address _owner, address _issuer, uint256 _tokenId, uint256 _price, uint256 _startTime, uint256 _endTime) {\n', '    return (orderBook[_id].creator, orderBook[_id].owner, orderBook[_id].issuer, orderBook[_id].tokenId, orderBook[_id].price, orderBook[_id].startTime, orderBook[_id].endTime);\n', '  }  \n', '  \n', '  /* Util */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint size;\n', '    assembly { size := extcodesize(addr) } // solium-disable-line\n', '    return size > 0;\n', '  }\n', '\n', '  function getNextPrice (uint256 _price) public pure returns (uint256 _nextPrice) {\n', '    return _price * 123 / 100;\n', '  }  \n', '\n', '  /* Buy */\n', '  function put(address _issuer, uint256 _tokenId, uint256 _price,\n', '               uint256 _startTime, uint256 _endTime) public {\n', '    require(_startTime <= _endTime);                 \n', '    Issuer issuer = Issuer(_issuer);\n', '    require(issuer.ownerOf(_tokenId) == msg.sender);\n', '    issuer.transferFrom(msg.sender, address(this), _tokenId);\n', '    if (orderBookSize == orderBook.length) {\n', '      orderBook.push(Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime));\n', '    } else {    \n', '      orderBook[orderBookSize] = Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime);\n', '    }\n', '    orderBookSize += 1;\n', '  }\n', '  function buy(uint256 _id) public payable{\n', '    require(msg.value >= orderBook[_id].price);\n', '    require(msg.sender != orderBook[_id].owner);\n', '    require(!isContract(msg.sender));\n', '    require(orderBook[_id].startTime <= now && now <= orderBook[_id].endTime);\n', '    orderBook[_id].owner.transfer(orderBook[_id].price*24/25); // 96%\n', '    orderBook[_id].creator.transfer(orderBook[_id].price/50);  // 2%    \n', '    if (msg.value > orderBook[_id].price) {\n', '        msg.sender.transfer(msg.value - orderBook[_id].price);\n', '    }\n', '    orderBook[_id].owner = msg.sender;\n', '    orderBook[_id].price = getNextPrice(orderBook[_id].price);\n', '  }\n', '  function revoke(uint256 _id) public {\n', '    require(msg.sender == orderBook[_id].owner);\n', '    require(orderBook[_id].endTime <= now);\n', '    \n', '    Issuer issuer = Issuer(orderBook[_id].issuer);\n', '    issuer.transfer(msg.sender, orderBook[_id].tokenId);    \n', '    orderBook[_id] = orderBook[orderBookSize-1];\n', '    orderBookSize -= 1;\n', '  }\n', '}\n', '\n', 'interface Issuer {\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) external;  \n', '  function transfer(address _to, uint256 _tokenId) external;\n', '  function ownerOf (uint256 _tokenId) external view returns (address _owner);\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/// @author MinakoKojima (https://github.com/lychees)\n', 'contract DecentralizedExchangeHotPotato {\n', '  address private owner;\n', '  mapping (address => bool) private admins;\n', '  \n', '  struct Order {\n', '    address creator;    \n', '    address owner;\n', '    address issuer;    \n', '    uint256 tokenId;    \n', '    uint256 price;\n', '    uint256 startTime;\n', '    uint256 endTime;\n', '  }  \n', '  Order[] private orderBook;\n', '  uint256 private orderBookSize;\n', '\n', '  function DecentralizedExchangeHotPotato() public {\n', '    owner = msg.sender;\n', '    admins[owner] = true;    \n', '  }\n', '\n', '  /* Modifiers */\n', '  modifier onlyOwner() {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier onlyAdmins() {\n', '    require(admins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /* Owner */\n', '  function setOwner (address _owner) onlyOwner() public {\n', '    owner = _owner;\n', '  }\n', '\n', '  function addAdmin (address _admin) onlyOwner() public {\n', '    admins[_admin] = true;\n', '  }\n', '\n', '  function removeAdmin (address _admin) onlyOwner() public {\n', '    delete admins[_admin];\n', '  }\n', '\n', '  /* Withdraw */\n', '  function withdrawAll () onlyAdmins() public {\n', '   msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '  function withdrawAmount (uint256 _amount) onlyAdmins() public {\n', '    msg.sender.transfer(_amount);\n', '  }\n', '\n', '  /* ERC721 */\n', '  function name() public pure returns (string _name) {\n', '    return "dapdap.io | HotPotatoExchange";\n', '  }\n', '\n', '  /* Read */\n', '  function isAdmin(address _admin) public view returns (bool _isAdmin) {\n', '    return admins[_admin];\n', '  }\n', '  function totalOrder() public view returns (uint256 _totalOrder) {\n', '    return orderBookSize;\n', '  }  \n', '  function allOf (uint256 _id) public view returns (address _creator, address _owner, address _issuer, uint256 _tokenId, uint256 _price, uint256 _startTime, uint256 _endTime) {\n', '    return (orderBook[_id].creator, orderBook[_id].owner, orderBook[_id].issuer, orderBook[_id].tokenId, orderBook[_id].price, orderBook[_id].startTime, orderBook[_id].endTime);\n', '  }  \n', '  \n', '  /* Util */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint size;\n', '    assembly { size := extcodesize(addr) } // solium-disable-line\n', '    return size > 0;\n', '  }\n', '\n', '  function getNextPrice (uint256 _price) public pure returns (uint256 _nextPrice) {\n', '    return _price * 123 / 100;\n', '  }  \n', '\n', '  /* Buy */\n', '  function put(address _issuer, uint256 _tokenId, uint256 _price,\n', '               uint256 _startTime, uint256 _endTime) public {\n', '    require(_startTime <= _endTime);                 \n', '    Issuer issuer = Issuer(_issuer);\n', '    require(issuer.ownerOf(_tokenId) == msg.sender);\n', '    issuer.transferFrom(msg.sender, address(this), _tokenId);\n', '    if (orderBookSize == orderBook.length) {\n', '      orderBook.push(Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime));\n', '    } else {    \n', '      orderBook[orderBookSize] = Order(msg.sender, msg.sender,  _issuer, _tokenId, _price, _startTime, _endTime);\n', '    }\n', '    orderBookSize += 1;\n', '  }\n', '  function buy(uint256 _id) public payable{\n', '    require(msg.value >= orderBook[_id].price);\n', '    require(msg.sender != orderBook[_id].owner);\n', '    require(!isContract(msg.sender));\n', '    require(orderBook[_id].startTime <= now && now <= orderBook[_id].endTime);\n', '    orderBook[_id].owner.transfer(orderBook[_id].price*24/25); // 96%\n', '    orderBook[_id].creator.transfer(orderBook[_id].price/50);  // 2%    \n', '    if (msg.value > orderBook[_id].price) {\n', '        msg.sender.transfer(msg.value - orderBook[_id].price);\n', '    }\n', '    orderBook[_id].owner = msg.sender;\n', '    orderBook[_id].price = getNextPrice(orderBook[_id].price);\n', '  }\n', '  function revoke(uint256 _id) public {\n', '    require(msg.sender == orderBook[_id].owner);\n', '    require(orderBook[_id].endTime <= now);\n', '    \n', '    Issuer issuer = Issuer(orderBook[_id].issuer);\n', '    issuer.transfer(msg.sender, orderBook[_id].tokenId);    \n', '    orderBook[_id] = orderBook[orderBookSize-1];\n', '    orderBookSize -= 1;\n', '  }\n', '}\n', '\n', 'interface Issuer {\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) external;  \n', '  function transfer(address _to, uint256 _tokenId) external;\n', '  function ownerOf (uint256 _tokenId) external view returns (address _owner);\n', '}']
