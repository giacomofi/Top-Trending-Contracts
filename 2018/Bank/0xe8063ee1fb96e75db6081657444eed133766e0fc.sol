['pragma solidity ^0.4.25;\n', '\n', 'contract RunAway {\n', '    using SafeMath for uint256;\n', '    using SafeMathInt for int256;\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev prevents contracts from interacting with me\n', '     */\n', '    modifier onlyHuman() {\n', '        address _addr = msg.sender;\n', '        uint256 _codeLength;\n', '\n', '        assembly {_codeLength := extcodesize(_addr)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> start the game(activate)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[keccak256(abi.encodePacked(_customerAddress))]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyComm1(){\n', '        address _customerAddress = msg.sender;\n', '        require(keccak256(abi.encodePacked(_customerAddress)) == comm1_);\n', '        _;\n', '    }\n', '\n', '    modifier onlyComm2{\n', '        address _customerAddress = msg.sender;\n', '        require(keccak256(abi.encodePacked(_customerAddress)) == comm2_);\n', '        _;\n', '    }\n', '\n', '    modifier checkRoundStatus()\n', '    {\n', '      if(now >= rounds_[currentRoundID_].endTime)\n', '      {\n', '        endCurrentRound();\n', '        startNextRound();\n', '      }\n', '      _;\n', '    }\n', '\n', '    function startNextRound()\n', '      private\n', '      {\n', '        currentRoundID_ ++;\n', '        rounds_[currentRoundID_].roundID = currentRoundID_;\n', '        rounds_[currentRoundID_].startTime = now;\n', '        rounds_[currentRoundID_].endTime = now + roundDuration_;\n', '        rounds_[currentRoundID_].ended = false;\n', '      }\n', '\n', '      function endCurrentRound()\n', '        private\n', '      {\n', '        Round storage round = rounds_[currentRoundID_];\n', '        round.ended = true;\n', '        if(round.netBuySum>0 && round.dividends>0)\n', '        {\n', '          round.profitPerShare = round.dividends.mul(magnitude).div(round.netBuySum);\n', '        }\n', '      }\n', '\n', '        modifier isActivated() {\n', '            require(activated_ == true, "its not ready yet.  check ?eta in discord");\n', '            _;\n', '        }\n', '\n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '\n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol\n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                ambassadors_[_customerAddress] == true &&\n', '\n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n', '\n', '            );\n', '\n', '            // updated the accumulated quota\n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '\n', '            // execute\n', '            _;\n', '        } else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            _;\n', '        }\n', '\n', '    }\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    event onAcquireDividends(\n', '        address indexed customerAddress,\n', '        uint256 dividendsAcquired\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '    event onWithDrawComm(\n', '      uint8 indexed comm,\n', '      uint256 ethereumWithdrawn\n', '    );\n', '\n', '    event onTransferExpiredDividends(\n', '      address indexed customerAddress,\n', '      uint256 roundID,\n', '      uint256 amount\n', '    );\n', '    /*=====================================\n', '    =            Structs                  =\n', '    =====================================*/\n', '    struct Round {\n', '        uint256 roundID;   // Starting from 1, increasing by 1\n', '        uint256 netBuySum;   // Sum of all userNetBuy which are > 0\n', '        uint256 endTime;\n', '        bool ended;\n', '        uint256 startTime;\n', '        uint256 profitPerShare;\n', '        uint256 dividends;\n', '        mapping(address=>int256) userNetBuy;\n', '        mapping(address => uint256) payoutsTo;\n', '        uint256 totalPayouts;\n', '    }\n', '\n', '    // Rounds recorder\n', '    mapping(uint256=>Round) public rounds_;\n', '\n', '    // Fees storage accounts\n', '    uint256 public comm1Balance_;\n', '    uint256 public comm2Balance_;\n', '    bytes32 comm1_=0xc0495b4fc42a03a01bdcd5e2f7b89dfd2e077e19f273ff82d33e9ec642fc7a08;\n', '    bytes32 comm2_=0xa1bb9d7f7e4c2b049c73772f2cab50235f20a685f798970054b74fbc6d411c1e;\n', '\n', '    // Current round ID\n', '    uint256 public currentRoundID_;\n', '    uint256 public roundDuration_ = 1 days;\n', '    // Is game started?\n', '    bool public activated_=false;\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Run Away";\n', '    string public symbol = "RUN";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    uint8 constant internal communityFee_ = 50;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '\n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 20 ether;\n', '    uint256 constant internal ambassadorQuota_ = 120 ether;\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    // Income, including dividends in each round and sale income.\n', '    mapping(address => uint256) public income_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(bytes32 => bool) public administrators;\n', '\n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --\n', '    */\n', '    constructor()\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[0x2a94d36a11c723ddffd4bf9352609aed9b400b2be1e9b272421fa7b4e7a40560] = true;\n', '\n', '        // add the ambassadors here.\n', '        ambassadors_[0x16F2971f677DDCe04FC44bb1A5289f0B96053b2C] = true;\n', '        ambassadors_[0x579F9608b1fa6aA387BD2a3844469CA8fb10628c] = true;\n', '        ambassadors_[0x62E691c598D968633EEAB5588b1AF95725E33316] = true;\n', '        ambassadors_[0x9e3F432dc2CD4EfFB0F0EB060b07DC2dFc574d0D] = true;\n', '        ambassadors_[0x63735870e79A653aA445d7b7B59DC9c1a7149F39] = true;\n', '        ambassadors_[0x562DEd82A67f4d2ED3782181f938f2E4232aE02C] = true;\n', '        ambassadors_[0x22ec2994d77E3Ca929eAc83dEF3958CC547ff028] = true;\n', '        ambassadors_[0xF2e602645AC91727D75E66231d06F572E133E59F] = true;\n', '        ambassadors_[0x1AA16F9A2428ceBa2eDeb5D544b3a3D767c1566e] = true;\n', '        ambassadors_[0x273b270F0eA966a462feAC89C9d4f4D6Dcd1CbdF] = true;\n', '        ambassadors_[0x7ABe6948E5288a30026EdE239446a0B84d502184] = true;\n', '        ambassadors_[0xB6Aa76e55564D9dB18cAF61369ff4618F5287f43] = true;\n', '        ambassadors_[0x3c6c909dB011Af05Dadd706D88a6Cd03D87a4f86] = true;\n', '        ambassadors_[0x914132fe8075aF2d932cadAa7d603DDfDf70D353] = true;\n', '        ambassadors_[0x8Be6Aa12746e84e448a18B20013F3AdB9e24e1c6] = true;\n', '        ambassadors_[0x3595bA9Ab527101B5cc78195Ca043653d96fEEB6] = true;\n', '        ambassadors_[0x17dBe44d9c91d2c71E33E3fd239BD1574A7f46DF] = true;\n', '        ambassadors_[0x47Ce514A4392304D9Ccaa7A807776AcB391198D0] = true;\n', '        ambassadors_[0x96b41F6DE1d579ea5CB87bA04834368727B993e4] = true;\n', '        ambassadors_[0x0953800A059a9d30BD6E47Ae2D34f3665F8E2b53] = true;\n', '        ambassadors_[0x497C85EeF12A17D3fEd3aef894ec3273046FdC1D] = true;\n', '        ambassadors_[0x116febf80104677019ac4C9E693c63c19B26Cf86] = true;\n', '        ambassadors_[0xFb214AA761CcC1Ccc9D2134a33f4aC77c514d59c] = true;\n', '        ambassadors_[0x567e3616dE1b217d6004cbE9a84095Ce90E94Bfd] = true;\n', '        ambassadors_[0x3f054BF8C392F4F28a9B29f911503c6BC58ED4Da] = true;\n', '        ambassadors_[0x71F658079CaEEDf2270F37c6235D0Ac6B25c9849] = true;\n', '        ambassadors_[0x0581d2d23A300327678E4497d84d58FF64B9CfDe] = true;\n', '        ambassadors_[0xFFAE7193dFA6eBff817C47cd2e5Ce4497c082613] = true;\n', '\n', '        ambassadors_[0x18B0f4F11Cb1F2170a6AC594b2Cb0107e2B44821] = true;//zl\n', '        ambassadors_[0x081c65ff7328ac4cC173D3dA7fD02371760B0cF4] = true;//yp\n', '        ambassadors_[0xfa698b3242A3a48AadbC64F50dc96e1DE630F39A] = true;//lxy\n', '        ambassadors_[0xAA5BA7930A1B2c14CDad11bECA86bf43779C05c5] = true;//m\n', '        ambassadors_[0xa7bF8FF736532f6725c5433190E0852DD1592213] = true;//zsj\n', '\n', '\n', '    }\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy()\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        isActivated()\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 incomeTmp = income_[_customerAddress];\n', '        //clear income of this user\n', '        income_[_customerAddress] = 0;\n', '        uint256 _tokens = purchaseTokens(incomeTmp);\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, incomeTmp, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell(), acquireDividends() and withdraw().\n', '     */\n', '    function exit()\n', '        isActivated()\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        acquireDividends();\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', "     * Withdraws all of the caller's dividends in previous round.\n", '     */\n', '    function acquireDividends()\n', '        isActivated()\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        Round storage round = rounds_[currentRoundID_.sub(1)];\n', '        uint256 _dividends = myDividends(round.roundID); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        round.payoutsTo[_customerAddress] = round.payoutsTo[_customerAddress].add(_dividends);\n', '        round.totalPayouts = round.totalPayouts.add(_dividends);\n', '\n', '        // Add dividends to income.\n', '        income_[_customerAddress] = income_[_customerAddress].add(_dividends);\n', '\n', '        // fire event\n', '        emit onAcquireDividends(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', "     * Withdraws all of the caller's income.\n", '     */\n', '    function withdraw()\n', '        isActivated()\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        uint256 myIncome = income_[_customerAddress];\n', '        //clear value\n', '        income_[_customerAddress]=0;\n', '        _customerAddress.transfer(myIncome);\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, myIncome);\n', '    }\n', '\n', '    /**\n', '     * Tax dividends to community.\n', '    */\n', '    function taxDividends(uint256 _dividends)\n', '      internal\n', '      returns (uint256)\n', '    {\n', '      // Taxed dividends\n', '      uint256 _comm = _dividends.div(communityFee_);\n', '      uint256 _taxedDividends = _dividends.sub(_comm);\n', '      // Community fees\n', '      uint256 _comm_1 = _comm.mul(3).div(10);\n', '      comm1Balance_ = comm1Balance_.add(_comm_1);\n', '      comm2Balance_ = comm2Balance_.add(_comm.sub(_comm_1));\n', '      return _taxedDividends;\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        isActivated()\n', '        onlyHuman()\n', '        onlyBagholders()\n', '        checkRoundStatus()\n', '        public\n', '    {\n', '        require(_amountOfTokens > 0, "Selling 0 token!");\n', '\n', '        Round storage round = rounds_[currentRoundID_];\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // Record income\n', '        income_[_customerAddress] = income_[_customerAddress].add(_taxedEthereum);\n', '\n', '        // Taxed dividends\n', '        uint256 _taxedDividends = taxDividends(_dividends);\n', '        round.dividends = round.dividends.add(_taxedDividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = tokenSupply_.sub(_tokens);\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_tokens);\n', '\n', '        // Calculate net buy of current round\n', '        int256 _userNetBuyBeforeSale = round.userNetBuy[_customerAddress];\n', '        round.userNetBuy[_customerAddress] = _userNetBuyBeforeSale.sub(_tokens.toInt256Safe());\n', '        if( _userNetBuyBeforeSale > 0)\n', '        {\n', '          if(_userNetBuyBeforeSale.toUint256Safe() > _tokens)\n', '          {\n', '            round.netBuySum = round.netBuySum.sub(_tokens);\n', '          }\n', '          else\n', '          {\n', '            round.netBuySum = round.netBuySum.sub(_userNetBuyBeforeSale.toUint256Safe());\n', '          }\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        isActivated()\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // liquify 10% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = _amountOfTokens.div(dividendFee_);\n', '        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '\n', '        // Taxed dividends\n', '        uint256 _taxedDividends = taxDividends(_dividends);\n', '        rounds_[currentRoundID_].dividends = rounds_[currentRoundID_].dividends.add(_taxedDividends);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = tokenSupply_.sub(_tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = tokenBalanceLedger_[_toAddress].add(_taxedTokens);\n', '\n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '\n', '    }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(bytes32 _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '      Start this game.\n', '    */\n', '    function activate()\n', '      onlyAdministrator()\n', '      public\n', '    {\n', '      // can only be ran once\n', '      require(activated_ == false, "Already activated");\n', '\n', '      currentRoundID_ = 1;\n', '      rounds_[currentRoundID_].roundID = currentRoundID_;\n', '      rounds_[currentRoundID_].startTime = now;\n', '      rounds_[currentRoundID_].endTime = now + roundDuration_;\n', '\n', '      activated_ = true;\n', '    }\n', '\n', '    /**\n', '      Set round ruration, taking effect in the next round.\n', '    */\n', '    // function setRoundDuration(uint _duration)\n', '    //   onlyAdministrator()\n', '    //   public\n', '    // {\n', '    //   roundDuration_ = _duration;\n', '    // }\n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(uint256 _roundID)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return dividendsOf(msg.sender, _roundID);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress, uint256 _roundID)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '      if(_roundID<1) return 0;\n', '      if (_roundID > currentRoundID_) return 0;\n', '      Round storage round = rounds_[_roundID];\n', '      // Sold >= bought\n', '      if(round.userNetBuy[_customerAddress] <= 0)\n', '      {\n', '        return 0;\n', '      }\n', '\n', '      // Nobody sold.\n', '      if(round.dividends <= 0)\n', '      {\n', '        return 0;\n', '      }\n', '      return round.profitPerShare.mul(round.userNetBuy[_customerAddress].toUint256Safe()).div(magnitude).sub(round.payoutsTo[_customerAddress]);\n', '    }\n', '\n', '    /**\n', '     * Estimate user dividends in current round.\n', '    */\n', '    function estimateDividends(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '      Round storage round = rounds_[currentRoundID_];\n', '      // Sold >= bought\n', '      if(round.userNetBuy[_customerAddress] <= 0)\n', '      {\n', '        return 0;\n', '      }\n', '\n', '      // Nobody sold.\n', '      if(round.dividends <= 0)\n', '      {\n', '        return 0;\n', '      }\n', '\n', '      return round.dividends.mul(magnitude).div(round.netBuySum).mul(round.userNetBuy[_customerAddress].toUint256Safe()).div(magnitude);\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            return _ethereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _amountOfTokens = ethereumToTokens_(_ethereumToSpend);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    function roundNetBuySum(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '        if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '        return rounds_[_roundID].netBuySum;\n', '    }\n', '\n', '    function roundEndTime(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].endTime;\n', '    }\n', '    function roundEnded(uint256 _roundID)\n', '      public view returns(bool)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return true;\n', '      return rounds_[_roundID].ended;\n', '    }\n', '\n', '    function roundStartTime(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].startTime;\n', '    }\n', '\n', '    function roundProfitPerShare(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].profitPerShare;\n', '    }\n', '    function roundDividends(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].dividends;\n', '    }\n', '\n', '    function roundUserNetBuy(uint256 _roundID, address addr)\n', '      public view returns(int256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].userNetBuy[addr];\n', '    }\n', '\n', '    function roundPayoutsTo(uint256 _roundID, address addr)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].payoutsTo[addr];\n', '    }\n', '    function roundTotalPayouts(uint256 _roundID)\n', '      public view returns(uint256)\n', '    {\n', '      if(_roundID <1 || _roundID > currentRoundID_) return 0;\n', '      return rounds_[_roundID].totalPayouts;\n', '    }\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _incomingEthereum)\n', '        isActivated()\n', '        antiEarlyWhale(_incomingEthereum)\n', '        onlyHuman()\n', '        checkRoundStatus()\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        require(_incomingEthereum > 0, "0 eth buying.");\n', '        Round storage round = rounds_[currentRoundID_];\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum);\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (tokenSupply_.add(_amountOfTokens) > tokenSupply_));\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            // add tokens to the pool\n', '            tokenSupply_ = tokenSupply_.add(_amountOfTokens);\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        int256 _userNetBuy = round.userNetBuy[_customerAddress];\n', '        int256 _userNetBuyAfterPurchase = _userNetBuy.add(_amountOfTokens.toInt256Safe());\n', '        round.userNetBuy[_customerAddress] = _userNetBuyAfterPurchase;\n', '        if(_userNetBuy >= 0)\n', '        {\n', '          round.netBuySum = round.netBuySum.add(_amountOfTokens);\n', '        }\n', '        else\n', '        {\n', '          if( _userNetBuyAfterPurchase > 0)\n', '          {\n', '            round.netBuySum = round.netBuySum.add(_userNetBuyAfterPurchase.toUint256Safe());\n', '          }\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].add(_amountOfTokens);\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    /*==========================================\n', '    =           COMMUNITY FUNCTIONS            =\n', '    ==========================================*/\n', '    function withdrawComm1()\n', '      isActivated()\n', '      onlyComm1()\n', '      onlyHuman()\n', '      checkRoundStatus()\n', '      public\n', '    {\n', '      uint256 bal = comm1Balance_;\n', '      comm1Balance_ = 0;\n', '      msg.sender.transfer(bal);\n', '      emit onWithDrawComm(1, bal);\n', '    }\n', '\n', '    function withdrawComm2()\n', '      isActivated()\n', '      onlyComm2()\n', '      onlyHuman()\n', '      checkRoundStatus()\n', '      public\n', '    {\n', '      uint256 bal = comm2Balance_;\n', '      comm2Balance_ = 0;\n', '      msg.sender.transfer(bal);\n', '      emit onWithDrawComm(2, bal);\n', '    }\n', '\n', '    function transferExpiredDividends(uint256 _roundID)\n', '      isActivated()\n', '      onlyHuman()\n', '      checkRoundStatus()\n', '      public\n', '    {\n', '      require(_roundID > 0 && _roundID < currentRoundID_.sub(1), "Invalid round number");\n', '      Round storage round = rounds_[_roundID];\n', '      uint256 _unpaid = round.dividends.sub(round.totalPayouts);\n', '      require(_unpaid>0, "No expired dividends.");\n', '      uint256 comm1 = _unpaid.mul(3).div(10);\n', '      comm1Balance_ = comm1Balance_.add(comm1);\n', '      comm2Balance_ = comm2Balance_.add(_unpaid.sub(comm1));\n', '      round.totalPayouts = round.totalPayouts.add(_unpaid);\n', '      emit onTransferExpiredDividends(msg.sender, _roundID, _unpaid);\n', '    }\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// From https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMath.sol\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toInt256Safe(uint256 a) internal pure returns (int256) {\n', '    int256 b = int256(a);\n', '    assert(b >= 0);\n', '    return b;\n', '  }\n', '}\n', '\n', '// From: https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\n', '/**\n', ' * @title SafeMathInt\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev SafeMath adapted for int256\n', ' */\n', 'library SafeMathInt {\n', '  function mul(int256 a, int256 b) internal pure returns (int256) {\n', '    // Prevent overflow when multiplying INT256_MIN with -1\n', '    // https://github.com/RequestNetwork/requestNetwork/issues/43\n', '    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\n', '\n', '    int256 c = a * b;\n', '    assert((b == 0) || (c / b == a));\n', '    return c;\n', '  }\n', '\n', '  function div(int256 a, int256 b) internal pure returns (int256) {\n', '    // Prevent overflow when dividing INT256_MIN by -1\n', '    // https://github.com/RequestNetwork/requestNetwork/issues/43\n', '    assert(!(a == - 2**255 && b == -1));\n', '\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    int256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(int256 a, int256 b) internal pure returns (int256) {\n', '    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\n', '\n', '    return a - b;\n', '  }\n', '\n', '  function add(int256 a, int256 b) internal pure returns (int256) {\n', '    int256 c = a + b;\n', '    assert((b >= 0 && c >= a) || (b < 0 && c < a));\n', '    return c;\n', '  }\n', '\n', '  function toUint256Safe(int256 a) internal pure returns (uint256) {\n', '    assert(a>=0);\n', '    return uint256(a);\n', '  }\n', '}']