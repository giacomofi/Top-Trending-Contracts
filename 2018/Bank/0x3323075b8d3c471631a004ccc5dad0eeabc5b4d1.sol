['// Contract dividend.\n', '\n', 'contract Dividend{\n', '    uint256 constant div = 1000; // 10 % \n', '    uint256 public price = (0.01 ether);\n', '    uint256 public baseprice = price;\n', '    uint256 public previousprice = 0;\n', '    address public dev;\n', '    address public divholder;\n', '    address public current_start_divholder = divholder;\n', '    \n', '    \n', '    uint256 increase = 2000; // 20% \n', '    uint256 min = 1500; //15% (min increase in price, scales weird way)\n', '    uint256 minprofit = 1000;\n', '    \n', '    uint256 public divpaid = 0;\n', '    \n', '    \n', '    function Dividend(){\n', '        dev = msg.sender;\n', '    }\n', '    \n', '    event t(uint256 t);\n', '    function NewPrice() public  returns (uint256){\n', '\n', '        uint ret = price * (increase + 10000) / 10000;\n', '        \n', '        return ret;\n', '    }\n', '    \n', '    function Withdraw(){\n', '        \n', '        _withdraw(true);\n', '    }\n', '    \n', '    function _withdraw(bool devpay) internal {\n', '\n', '        if (divholder != current_start_divholder){\n', '            // pay divholder.\n', '            uint256 bal = address(this).balance;\n', '            uint256 pay = (bal * div) / 10000;\n', '            divholder.transfer(pay);\n', '            divpaid = divpaid + pay;\n', '        }\n', ' \n', '        // subbal in balance.\n', '        if (devpay){\n', '            dev.transfer(address(this).balance);\n', '        }\n', '    }\n', '    \n', '    function Buy() payable{\n', '        var val = msg.value; \n', '        require(val >= price);\n', '        //excess\n', '        if (val > price){\n', '            msg.sender.transfer(val-price);\n', '        }\n', '        \n', '        _withdraw(false);\n', '        \n', '        if ((current_start_divholder != divholder) && divpaid < ((previousprice * (10000 + minprofit))/10000)){\n', '            uint256 nmake =  ((previousprice * (10000 + minprofit))/10000) - divpaid;\n', '            t(nmake / (1 finney));\n', '            divholder.transfer(nmake);\n', '            \n', '        }\n', '        \n', '        //dev.transfer(address(this).balance);\n', '        \n', '        // previous is paid in Withdraw\n', '        // if NOT enough made in above lines we give the previous owner the eth \n', '        // he has right on.\n', '        // rest transferred to dev.\n', '        dev.transfer(address(this).balance);\n', '        \n', '        divpaid = 0;\n', '        previousprice = price;\n', '        price = NewPrice();\n', '        divholder = msg.sender;\n', '    }\n', '    \n', '    \n', '    // send donations pl0x\n', '    function() payable {\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '}']