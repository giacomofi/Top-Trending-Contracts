['pragma solidity ^0.4.23;\n', '\n', 'interface P3D {\n', '  function() payable external;\n', '  function buy(address _playerAddress) payable external returns(uint256);\n', '  function sell(uint256 _amountOfTokens) external;\n', '  function reinvest() external;\n', '  function withdraw() external;\n', '  function exit() external;\n', '  function dividendsOf(address _playerAddress) external view returns(uint256);\n', '  function balanceOf(address _playerAddress) external view returns(uint256);\n', '  function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '  function stakingRequirement() external view returns(uint256);\n', '  function myDividends(bool _includeReferralBonus) external view returns(uint256);\n', '}\n', '\n', 'contract Crop {\n', '  address public owner;\n', '  bool public disabled;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function() public payable {}\n', '  \n', '  /**\n', '   * @dev Turn reinvest on / off\n', '   * @param _disabled bool to determine state of reinvest.\n', '   */\n', '  function disable(bool _disabled) external onlyOwner() {\n', '    // toggle disabled\n', '    disabled = _disabled;\n', '  }\n', '\n', '  /**\n', '   * @dev Enables anyone with a masternode to earn referral fees on P3D reinvestments.\n', '   */\n', '  function reinvest() external {\n', '    // reinvest must be enabled\n', '    require(disabled == false);\n', '    \n', '    // setup p3d\n', '    P3D p3d = P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '\n', '    // withdraw dividends\n', '    p3d.withdraw();\n', '\n', '    // reinvest with a referral fee for sender\n', '    p3d.buy.value(address(this).balance)(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Buy P3D tokens\n', '   * @param _playerAddress referral address.\n', '   */\n', '  function buy(address _playerAddress) external payable onlyOwner() {\n', '    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).buy.value(msg.value)(_playerAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Sell P3D tokens and send balance to owner\n', '   * @param _amountOfTokens amount of tokens to sell.\n', '   */\n', '  function sell(uint256 _amountOfTokens) external onlyOwner() {\n', '    // sell tokens\n', '    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).sell(_amountOfTokens);\n', '\n', '    // transfer to owner\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw P3D dividends and send balance to owner\n', '   */\n', '  function withdraw() external onlyOwner() {\n', '    // withdraw dividends\n', '    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).withdraw();\n', '\n', '    // transfer to owner\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Sell P3D tokens, withdraw dividends, and send balance to owner\n', '   */\n', '  function exit() external onlyOwner() {\n', '    // sell all tokens and withdraw\n', '    P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).exit();\n', '\n', '    // transfer to owner\n', '    owner.transfer(address(this).balance);\n', '  }\n', '  \n', '  /**\n', '   * @dev Transfer P3D tokens\n', '   * @param _toAddress address to send tokens to.\n', '   * @param _amountOfTokens amount of tokens to send.\n', '   */\n', '  function transfer(address _toAddress, uint256 _amountOfTokens) external onlyOwner() returns (bool) {\n', '    return P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).transfer(_toAddress, _amountOfTokens);\n', '  }\n', '\n', '  /**\n', '   * @dev Get dividends for this contract\n', '   * @param _includeReferralBonus for including referrals in dividends.\n', '   */\n', '  function dividends(bool _includeReferralBonus) external view returns (uint256) {\n', '    return P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).myDividends(_includeReferralBonus);\n', '  }\n', '}']