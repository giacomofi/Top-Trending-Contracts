['pragma solidity ^0.4.24;\n', '\n', 'interface karaOmTokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract KaraOmToken {\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply;\n', '    uint256 public totalDistributed = 0;    \n', '    uint256 public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 Ether\n', '    uint256 public tokensPerEth = 17000000e8;\n', '   bool public distributionFinished = false;\n', '    address owner = msg.sender;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '   \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '\n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '\n', '    event TokensPerEthUpdated(uint _tokensPerEth);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    function KaraOmToken () public {\n', '        totalSupply = 690000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        name = "KaraOm Token";                                   // Set the name for display purposes\n', '        symbol = "KOM";                               // Set the symbol for display purposes\n', '        owner = msg.sender;    \n', '        distr(owner, totalDistributed);\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '     function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '\n', '     function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);        \n', '        balanceOf[_to] = balanceOf[_to].add(_amount);\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint _amount) internal {\n', '\n', '        require( _amount > 0 );      \n', '\n', '        require( totalDistributed < totalSupply );\n', '        \n', '        balanceOf[_participant] = balanceOf[_participant].add(_amount);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '        // log\n', '        emit Airdrop(_participant, _amount, balanceOf[_participant]);\n', '        emit Transfer(address(0), _participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n', '        doAirdrop(_participant, _amount);\n', '    }\n', '\n', '    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n', '    }\n', '\n', '    function () external payable {\n', '        getTokens();\n', '     }\n', '    \n', '    function getTokens() payable canDistr  public {\n', '        uint256 tokens = 0;\n', '\n', '        // minimum contribution\n', '        require( msg.value >= MIN_CONTRIBUTION );\n', '\n', '        require( msg.value > 0 );\n', '\n', '        // get baseline number of tokens\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n', '        address investor = msg.sender;\n', '        \n', '        if (tokens > 0) {\n', '            distr(investor, tokens);\n', '        }\n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '\n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '            if (_value != 0 && allowance[msg.sender][_spender] != 0) { return false; }\n', '            allowance[msg.sender][_spender] = _value;\n', '            emit Approval(msg.sender, _spender, _value);\n', '            return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        karaOmTokenRecipient spender = karaOmTokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    function withdraw() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', ' \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value); \n', '        balanceOf[msg.sender] -= _value;           \n', '        totalSupply -= _value;                    \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);               \n', '        require(_value <= allowance[_from][msg.sender]);  \n', '        balanceOf[_from] -= _value;                        \n', '        allowance[_from][msg.sender] -= _value;      \n', '        totalSupply -= _value;                            \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '     function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']