['pragma solidity ^0.4.23;\n', '\n', 'contract Hot {\n', '    event CreateEvent(uint id, uint bid, string name, string link);\n', '    \n', '    event SupportEvent(uint id, uint bid);\n', '    \n', '    struct Record {\n', '        uint index;\n', '        uint bid;\n', '        string name;\n', '        string link;\n', '    }\n', '\n', '    address public owner;\n', '    \n', '    Record[] public records;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function updateRecordName(uint _id, string _name) external onlyOwner {\n', '        require(_utfStringLength(_name) <= 20);\n', '        require(_id < records.length);\n', '        records[_id].name = _name;\n', '    }\n', '\n', '    function createRecord (string _name, string _link) external payable {\n', '        require(msg.value >= 0.001 ether);\n', '        require(_utfStringLength(_name) <= 20);\n', '        require(_utfStringLength(_link) <= 50);\n', '        records.push(Record(records.length,msg.value, _name, _link));\n', '        emit CreateEvent(records.length-1, msg.value, _name, _link);\n', '    }\n', '\n', '    function supportRecord(uint _index) external payable {\n', '        require(msg.value >= 0.001 ether);\n', '        require(_index < records.length);\n', '        records[_index].bid += msg.value;\n', '        emit SupportEvent (_index, records[_index].bid);\n', '    }\n', '    \n', '    function getRecordCount() external view returns (uint) {\n', '        return records.length;\n', '    }\n', '\n', '    function _utfStringLength(string str) private pure returns (uint) {\n', '        uint i = 0;\n', '        uint l = 0;\n', '        bytes memory string_rep = bytes(str);\n', '\n', '        while (i<string_rep.length) {\n', '            if (string_rep[i]>>7==0)\n', '                i += 1;\n', '            else if (string_rep[i]>>5==0x6)\n', '                i += 2;\n', '            else if (string_rep[i]>>4==0xE)\n', '                i += 3;\n', '            else if (string_rep[i]>>3==0x1E)\n', '                i += 4;\n', '            else\n', '                //For safety\n', '                i += 1;\n', '\n', '            l++;\n', '        }\n', '\n', '        return l;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Hot {\n', '    event CreateEvent(uint id, uint bid, string name, string link);\n', '    \n', '    event SupportEvent(uint id, uint bid);\n', '    \n', '    struct Record {\n', '        uint index;\n', '        uint bid;\n', '        string name;\n', '        string link;\n', '    }\n', '\n', '    address public owner;\n', '    \n', '    Record[] public records;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function updateRecordName(uint _id, string _name) external onlyOwner {\n', '        require(_utfStringLength(_name) <= 20);\n', '        require(_id < records.length);\n', '        records[_id].name = _name;\n', '    }\n', '\n', '    function createRecord (string _name, string _link) external payable {\n', '        require(msg.value >= 0.001 ether);\n', '        require(_utfStringLength(_name) <= 20);\n', '        require(_utfStringLength(_link) <= 50);\n', '        records.push(Record(records.length,msg.value, _name, _link));\n', '        emit CreateEvent(records.length-1, msg.value, _name, _link);\n', '    }\n', '\n', '    function supportRecord(uint _index) external payable {\n', '        require(msg.value >= 0.001 ether);\n', '        require(_index < records.length);\n', '        records[_index].bid += msg.value;\n', '        emit SupportEvent (_index, records[_index].bid);\n', '    }\n', '    \n', '    function getRecordCount() external view returns (uint) {\n', '        return records.length;\n', '    }\n', '\n', '    function _utfStringLength(string str) private pure returns (uint) {\n', '        uint i = 0;\n', '        uint l = 0;\n', '        bytes memory string_rep = bytes(str);\n', '\n', '        while (i<string_rep.length) {\n', '            if (string_rep[i]>>7==0)\n', '                i += 1;\n', '            else if (string_rep[i]>>5==0x6)\n', '                i += 2;\n', '            else if (string_rep[i]>>4==0xE)\n', '                i += 3;\n', '            else if (string_rep[i]>>3==0x1E)\n', '                i += 4;\n', '            else\n', '                //For safety\n', '                i += 1;\n', '\n', '            l++;\n', '        }\n', '\n', '        return l;\n', '    }\n', '}']
