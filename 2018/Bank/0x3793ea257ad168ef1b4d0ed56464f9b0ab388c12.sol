['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title CryptoEmojis\n', ' * @author CryptoEmojis\n', ' */\n', 'contract CryptoEmojis {\n', '    // Using SafeMath\n', '    using SafeMath for uint256;    \n', '\n', '    // The developer&#39;s address\n', '    address dev;\n', '\n', '    // Contract information\n', '    string constant private tokenName = "CryptoEmojis";\n', '    string constant private tokenSymbol = "EMO";\n', '\n', '    // Our beloved emojis\n', '    struct Emoji {\n', '        string codepoints;\n', '        string name;\n', '        uint256 price;\n', '        address owner;\n', '        bool exists;\n', '    }\n', '\n', '    Emoji[] emojis;\n', '    \n', '    // For storing the username and balance of every user\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => bytes16) private usernames;\n', '\n', '    // Needed events for represententing of every possible action\n', '    event Transfer(address indexed _from, address indexed _to, uint256 indexed _id, uint256 _price);\n', '    event PriceChange(uint256 indexed _id, uint256 _price);\n', '    event UsernameChange(address indexed _owner, bytes16 _username);\n', '\n', '\n', '    function CryptoEmojis() public {\n', '        dev = msg.sender;\n', '    }\n', '    \n', '    \n', '    modifier onlyDev() {\n', '        require(msg.sender == dev);\n', '        _;\n', '    }\n', '\n', '   function name() public pure returns(string) {\n', '       return tokenName;\n', '   }\n', '\n', '   function symbol() public pure returns(string) {\n', '       return tokenSymbol;\n', '   }\n', '\n', '    /** @dev Get the total supply */\n', '    function totalSupply() public view returns(uint256) {\n', '        return emojis.length;\n', '    }\n', '\n', '    /** @dev Get the balance of a user */\n', '   function balanceOf(address _owner) public view returns(uint256 balance) {\n', '       return balances[_owner];\n', '   }\n', '\n', '    /** @dev Get the username of a user */\n', '    function usernameOf(address _owner) public view returns (bytes16) {\n', '       return usernames[_owner];\n', '    }\n', '    \n', '    /** @dev Set the username of sender user  */\n', '    function setUsername(bytes16 _username) public {\n', '        usernames[msg.sender] = _username;\n', '        emit UsernameChange(msg.sender, _username);\n', '    }\n', '\n', '    /** @dev Get the owner of an emoji */\n', '    function ownerOf(uint256 _id) public constant returns (address) {\n', '       return emojis[_id].owner;\n', '    }\n', '    \n', '    /** @dev Get the codepoints of an emoji */\n', '    function codepointsOf(uint256 _id) public view returns (string) {\n', '       return emojis[_id].codepoints;\n', '    }\n', '\n', '    /** @dev Get the name of an emoji */\n', '    function nameOf(uint256 _id) public view returns (string) {\n', '       return emojis[_id].name;\n', '    }\n', '\n', '    /** @dev Get the price of an emoji */\n', '    function priceOf(uint256 _id) public view returns (uint256 price) {\n', '       return emojis[_id].price;\n', '    }\n', '\n', '    /** @dev Ceate a new emoji for the first time */\n', '    function create(string _codepoints, string _name, uint256 _price) public onlyDev() {\n', '        Emoji memory _emoji = Emoji({\n', '            codepoints: _codepoints,\n', '            name: _name,\n', '            price: _price,\n', '            owner: dev,\n', '            exists: true\n', '        });\n', '        emojis.push(_emoji);\n', '        balances[dev]++;\n', '    }\n', '\n', '    /** @dev Edit emoji information to maintain confirming for Unicode standard, we can&#39;t change the price or the owner */\n', '    function edit(uint256 _id, string _codepoints, string _name) public onlyDev() {\n', '        require(emojis[_id].exists);\n', '        emojis[_id].codepoints = _codepoints;\n', '        emojis[_id].name = _name;\n', '    }\n', '\n', '    /** @dev Buy an emoji */\n', '    function buy(uint256 _id) payable public {\n', '        require(emojis[_id].exists && emojis[_id].owner != msg.sender && msg.value >= emojis[_id].price);\n', '        address oldOwner = emojis[_id].owner;\n', '        uint256 oldPrice = emojis[_id].price;\n', '        emojis[_id].owner = msg.sender;\n', '        emojis[_id].price = oldPrice.div(100).mul(115);\n', '        balances[oldOwner]--;\n', '        balances[msg.sender]++;\n', '        oldOwner.transfer(oldPrice.div(100).mul(96));\n', '        if (msg.value > oldPrice) msg.sender.transfer(msg.value.sub(oldPrice));\n', '        emit Transfer(oldOwner, msg.sender, _id, oldPrice);\n', '        emit PriceChange(_id, emojis[_id].price);\n', '    }\n', '\n', '    /** @dev Changing the price by the owner of the emoji */\n', '    function setPrice(uint256 _id, uint256 _price) public {\n', '        require(emojis[_id].exists && emojis[_id].owner == msg.sender);\n', '        emojis[_id].price =_price;\n', '        emit PriceChange(_id, _price);\n', '    }\n', '\n', '    /** @dev Withdraw all balance. This doesn&#39;t transfer users&#39; money since the contract pay them instantly and doesn&#39;t hold anyone&#39;s money */\n', '    function withdraw() public onlyDev() {\n', '        dev.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title CryptoEmojis\n', ' * @author CryptoEmojis\n', ' */\n', 'contract CryptoEmojis {\n', '    // Using SafeMath\n', '    using SafeMath for uint256;    \n', '\n', "    // The developer's address\n", '    address dev;\n', '\n', '    // Contract information\n', '    string constant private tokenName = "CryptoEmojis";\n', '    string constant private tokenSymbol = "EMO";\n', '\n', '    // Our beloved emojis\n', '    struct Emoji {\n', '        string codepoints;\n', '        string name;\n', '        uint256 price;\n', '        address owner;\n', '        bool exists;\n', '    }\n', '\n', '    Emoji[] emojis;\n', '    \n', '    // For storing the username and balance of every user\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => bytes16) private usernames;\n', '\n', '    // Needed events for represententing of every possible action\n', '    event Transfer(address indexed _from, address indexed _to, uint256 indexed _id, uint256 _price);\n', '    event PriceChange(uint256 indexed _id, uint256 _price);\n', '    event UsernameChange(address indexed _owner, bytes16 _username);\n', '\n', '\n', '    function CryptoEmojis() public {\n', '        dev = msg.sender;\n', '    }\n', '    \n', '    \n', '    modifier onlyDev() {\n', '        require(msg.sender == dev);\n', '        _;\n', '    }\n', '\n', '   function name() public pure returns(string) {\n', '       return tokenName;\n', '   }\n', '\n', '   function symbol() public pure returns(string) {\n', '       return tokenSymbol;\n', '   }\n', '\n', '    /** @dev Get the total supply */\n', '    function totalSupply() public view returns(uint256) {\n', '        return emojis.length;\n', '    }\n', '\n', '    /** @dev Get the balance of a user */\n', '   function balanceOf(address _owner) public view returns(uint256 balance) {\n', '       return balances[_owner];\n', '   }\n', '\n', '    /** @dev Get the username of a user */\n', '    function usernameOf(address _owner) public view returns (bytes16) {\n', '       return usernames[_owner];\n', '    }\n', '    \n', '    /** @dev Set the username of sender user  */\n', '    function setUsername(bytes16 _username) public {\n', '        usernames[msg.sender] = _username;\n', '        emit UsernameChange(msg.sender, _username);\n', '    }\n', '\n', '    /** @dev Get the owner of an emoji */\n', '    function ownerOf(uint256 _id) public constant returns (address) {\n', '       return emojis[_id].owner;\n', '    }\n', '    \n', '    /** @dev Get the codepoints of an emoji */\n', '    function codepointsOf(uint256 _id) public view returns (string) {\n', '       return emojis[_id].codepoints;\n', '    }\n', '\n', '    /** @dev Get the name of an emoji */\n', '    function nameOf(uint256 _id) public view returns (string) {\n', '       return emojis[_id].name;\n', '    }\n', '\n', '    /** @dev Get the price of an emoji */\n', '    function priceOf(uint256 _id) public view returns (uint256 price) {\n', '       return emojis[_id].price;\n', '    }\n', '\n', '    /** @dev Ceate a new emoji for the first time */\n', '    function create(string _codepoints, string _name, uint256 _price) public onlyDev() {\n', '        Emoji memory _emoji = Emoji({\n', '            codepoints: _codepoints,\n', '            name: _name,\n', '            price: _price,\n', '            owner: dev,\n', '            exists: true\n', '        });\n', '        emojis.push(_emoji);\n', '        balances[dev]++;\n', '    }\n', '\n', "    /** @dev Edit emoji information to maintain confirming for Unicode standard, we can't change the price or the owner */\n", '    function edit(uint256 _id, string _codepoints, string _name) public onlyDev() {\n', '        require(emojis[_id].exists);\n', '        emojis[_id].codepoints = _codepoints;\n', '        emojis[_id].name = _name;\n', '    }\n', '\n', '    /** @dev Buy an emoji */\n', '    function buy(uint256 _id) payable public {\n', '        require(emojis[_id].exists && emojis[_id].owner != msg.sender && msg.value >= emojis[_id].price);\n', '        address oldOwner = emojis[_id].owner;\n', '        uint256 oldPrice = emojis[_id].price;\n', '        emojis[_id].owner = msg.sender;\n', '        emojis[_id].price = oldPrice.div(100).mul(115);\n', '        balances[oldOwner]--;\n', '        balances[msg.sender]++;\n', '        oldOwner.transfer(oldPrice.div(100).mul(96));\n', '        if (msg.value > oldPrice) msg.sender.transfer(msg.value.sub(oldPrice));\n', '        emit Transfer(oldOwner, msg.sender, _id, oldPrice);\n', '        emit PriceChange(_id, emojis[_id].price);\n', '    }\n', '\n', '    /** @dev Changing the price by the owner of the emoji */\n', '    function setPrice(uint256 _id, uint256 _price) public {\n', '        require(emojis[_id].exists && emojis[_id].owner == msg.sender);\n', '        emojis[_id].price =_price;\n', '        emit PriceChange(_id, _price);\n', '    }\n', '\n', "    /** @dev Withdraw all balance. This doesn't transfer users' money since the contract pay them instantly and doesn't hold anyone's money */\n", '    function withdraw() public onlyDev() {\n', '        dev.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '}']
