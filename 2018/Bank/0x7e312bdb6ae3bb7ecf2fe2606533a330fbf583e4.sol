['pragma solidity ^0.4.21;\n', '\n', 'contract TokenInterface {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Kitty {\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function getKitty(uint256 _id) external view returns (\n', '        bool isGestating,\n', '        bool isReady,\n', '        uint256 cooldownIndex,\n', '        uint256 nextActionAt,\n', '        uint256 siringWithId,\n', '        uint256 birthTime,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 generation,\n', '        uint256 genes\n', '    );\n', '}\n', '\n', 'contract Ownable {\n', '    address owner;\n', '    Kitty kitty;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function () external payable {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function getTokens(address _contract, uint256 _amount) external {\n', '        TokenInterface(_contract).transfer(owner, _amount);\n', '    }\n', '\n', '    function setKitty(address _contract) external onlyOwner {\n', '        kitty = Kitty(_contract);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    string public constant name = "Crypto Shrooms"; // ERC-721\n', '    string public constant symbol = "SHRM"; // ERC-721\n', '    uint256[] public tokenIdToDna;\n', '    mapping (address => uint256) public balanceOf; // ERC-721\n', '    mapping (uint256 => address) public tokenIdToApproved;\n', '    mapping (uint256 => address) tokenIdToOwner;\n', '\n', '    event Transfer(address from, address to, uint256 tokenId); // ERC-721\n', '    event Approval(address owner, address approved, uint256 tokenId); // ERC-721\n', '\n', '    constructor() public {\n', '        tokenIdToDna.push(0);\n', '    }\n', '\n', '    // ERC-721\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenIdToDna.length - 1;\n', '    }\n', '\n', '    // ERC-721\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner) {\n', '        owner = tokenIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    // ERC-721\n', '    function approve(address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToOwner[_tokenId] == msg.sender);\n', '        tokenIdToApproved[_tokenId] = _to;\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function transfer(address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToOwner[_tokenId] == msg.sender);\n', '        require(_to != address(0));\n', '        balanceOf[msg.sender]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToApproved[_tokenId] == msg.sender);\n', '        require(_from != address(0));\n', '        require(tokenIdToOwner[_tokenId] == _from);\n', '        require(_to != address(0));\n', '        balanceOf[_from]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds) {\n', '        uint256 tokenCount = balanceOf[_owner];\n', '        if (tokenCount == 0) {\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 total = tokenIdToDna.length - 1;\n', '            uint256 resultIndex = 0;\n', '            for (uint i = 1; i <= total; i++) {\n', '                if (tokenIdToOwner[i] == _owner) {\n', '                    result[resultIndex] = i;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '\n', '    function _create(uint256 _dna, address _owner) internal {\n', '        uint256 tokenId = tokenIdToDna.push(_dna) - 1;\n', '        tokenIdToOwner[tokenId] = _owner;\n', '        balanceOf[_owner]++;\n', '        emit Transfer(address(this), _owner, tokenId);\n', '    }\n', '\n', '    function _move(uint256 _tokenId, address _from, address _to) internal {\n', '        balanceOf[_from]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '}\n', '\n', 'contract Shroom is Ownable, Token {\n', '    mapping (uint256 => bool) public kittyIdToDead;\n', '    mapping (uint256 => uint256) shroomIdToPrice;\n', '    uint256 salt;\n', '\n', '    event SaleCreated(uint256 shroomId, uint256 price);\n', '    event SaleSuccessful(uint256 shroomId);\n', '    event SaleCancelled(uint256 shroomId);\n', '\n', '    constructor() public {\n', '        salt = now;\n', '    }\n', '\n', '    function getNewShroom(uint256 _kittyId) external {\n', '        require(msg.sender != address(0));\n', '        require(!kittyIdToDead[_kittyId]);\n', '        require(kitty.ownerOf(_kittyId) == msg.sender);\n', '        uint256 dna;\n', '        (,,,,,,,,,dna) = kitty.getKitty(_kittyId);\n', '        require(dna != 0);\n', '        salt++;\n', '        dna = uint256(keccak256(dna + salt + now));\n', '        kittyIdToDead[_kittyId] = true;\n', '        _create(dna, msg.sender);\n', '    }\n', '\n', '    function createSale(uint256 _shroomId, uint256 _price) external {\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        require(currentOwner == msg.sender);\n', '        shroomIdToPrice[_shroomId] = _price;\n', '        emit SaleCreated(_shroomId, _price);\n', '    }\n', '\n', '    function buy(uint256 _shroomId) external payable {\n', '        address newOwner = msg.sender;\n', '        require(newOwner != address(0));\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        uint256 price = shroomIdToPrice[_shroomId];\n', '        require(price > 0);\n', '        require(msg.value >= price);\n', '        delete shroomIdToPrice[_shroomId];\n', '        currentOwner.transfer(price);\n', '        emit SaleSuccessful(_shroomId);\n', '        _move(_shroomId, currentOwner, newOwner);\n', '    }\n', '\n', '    function cancelSale(uint256 _shroomId) external {\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        require(currentOwner == msg.sender);\n', '        require(shroomIdToPrice[_shroomId] > 0);\n', '        delete shroomIdToPrice[_shroomId];\n', '        emit SaleCancelled(_shroomId);\n', '    }\n', '\n', '    function getPrice(uint256 _shroomId) external view returns (uint256) {\n', '        uint256 price = shroomIdToPrice[_shroomId];\n', '        require(price > 0);\n', '        return price;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract TokenInterface {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Kitty {\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function getKitty(uint256 _id) external view returns (\n', '        bool isGestating,\n', '        bool isReady,\n', '        uint256 cooldownIndex,\n', '        uint256 nextActionAt,\n', '        uint256 siringWithId,\n', '        uint256 birthTime,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 generation,\n', '        uint256 genes\n', '    );\n', '}\n', '\n', 'contract Ownable {\n', '    address owner;\n', '    Kitty kitty;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function () external payable {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function getTokens(address _contract, uint256 _amount) external {\n', '        TokenInterface(_contract).transfer(owner, _amount);\n', '    }\n', '\n', '    function setKitty(address _contract) external onlyOwner {\n', '        kitty = Kitty(_contract);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    string public constant name = "Crypto Shrooms"; // ERC-721\n', '    string public constant symbol = "SHRM"; // ERC-721\n', '    uint256[] public tokenIdToDna;\n', '    mapping (address => uint256) public balanceOf; // ERC-721\n', '    mapping (uint256 => address) public tokenIdToApproved;\n', '    mapping (uint256 => address) tokenIdToOwner;\n', '\n', '    event Transfer(address from, address to, uint256 tokenId); // ERC-721\n', '    event Approval(address owner, address approved, uint256 tokenId); // ERC-721\n', '\n', '    constructor() public {\n', '        tokenIdToDna.push(0);\n', '    }\n', '\n', '    // ERC-721\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenIdToDna.length - 1;\n', '    }\n', '\n', '    // ERC-721\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner) {\n', '        owner = tokenIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    // ERC-721\n', '    function approve(address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToOwner[_tokenId] == msg.sender);\n', '        tokenIdToApproved[_tokenId] = _to;\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function transfer(address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToOwner[_tokenId] == msg.sender);\n', '        require(_to != address(0));\n', '        balanceOf[msg.sender]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external {\n', '        require(msg.sender != address(0));\n', '        require(tokenIdToApproved[_tokenId] == msg.sender);\n', '        require(_from != address(0));\n', '        require(tokenIdToOwner[_tokenId] == _from);\n', '        require(_to != address(0));\n', '        balanceOf[_from]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    // ERC-721\n', '    function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds) {\n', '        uint256 tokenCount = balanceOf[_owner];\n', '        if (tokenCount == 0) {\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 total = tokenIdToDna.length - 1;\n', '            uint256 resultIndex = 0;\n', '            for (uint i = 1; i <= total; i++) {\n', '                if (tokenIdToOwner[i] == _owner) {\n', '                    result[resultIndex] = i;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '\n', '    function _create(uint256 _dna, address _owner) internal {\n', '        uint256 tokenId = tokenIdToDna.push(_dna) - 1;\n', '        tokenIdToOwner[tokenId] = _owner;\n', '        balanceOf[_owner]++;\n', '        emit Transfer(address(this), _owner, tokenId);\n', '    }\n', '\n', '    function _move(uint256 _tokenId, address _from, address _to) internal {\n', '        balanceOf[_from]--;\n', '        tokenIdToOwner[_tokenId] = _to;\n', '        balanceOf[_to]++;\n', '        delete tokenIdToApproved[_tokenId];\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '}\n', '\n', 'contract Shroom is Ownable, Token {\n', '    mapping (uint256 => bool) public kittyIdToDead;\n', '    mapping (uint256 => uint256) shroomIdToPrice;\n', '    uint256 salt;\n', '\n', '    event SaleCreated(uint256 shroomId, uint256 price);\n', '    event SaleSuccessful(uint256 shroomId);\n', '    event SaleCancelled(uint256 shroomId);\n', '\n', '    constructor() public {\n', '        salt = now;\n', '    }\n', '\n', '    function getNewShroom(uint256 _kittyId) external {\n', '        require(msg.sender != address(0));\n', '        require(!kittyIdToDead[_kittyId]);\n', '        require(kitty.ownerOf(_kittyId) == msg.sender);\n', '        uint256 dna;\n', '        (,,,,,,,,,dna) = kitty.getKitty(_kittyId);\n', '        require(dna != 0);\n', '        salt++;\n', '        dna = uint256(keccak256(dna + salt + now));\n', '        kittyIdToDead[_kittyId] = true;\n', '        _create(dna, msg.sender);\n', '    }\n', '\n', '    function createSale(uint256 _shroomId, uint256 _price) external {\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        require(currentOwner == msg.sender);\n', '        shroomIdToPrice[_shroomId] = _price;\n', '        emit SaleCreated(_shroomId, _price);\n', '    }\n', '\n', '    function buy(uint256 _shroomId) external payable {\n', '        address newOwner = msg.sender;\n', '        require(newOwner != address(0));\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        uint256 price = shroomIdToPrice[_shroomId];\n', '        require(price > 0);\n', '        require(msg.value >= price);\n', '        delete shroomIdToPrice[_shroomId];\n', '        currentOwner.transfer(price);\n', '        emit SaleSuccessful(_shroomId);\n', '        _move(_shroomId, currentOwner, newOwner);\n', '    }\n', '\n', '    function cancelSale(uint256 _shroomId) external {\n', '        address currentOwner = tokenIdToOwner[_shroomId];\n', '        require(currentOwner != address(0));\n', '        require(currentOwner == msg.sender);\n', '        require(shroomIdToPrice[_shroomId] > 0);\n', '        delete shroomIdToPrice[_shroomId];\n', '        emit SaleCancelled(_shroomId);\n', '    }\n', '\n', '    function getPrice(uint256 _shroomId) external view returns (uint256) {\n', '        uint256 price = shroomIdToPrice[_shroomId];\n', '        require(price > 0);\n', '        return price;\n', '    }\n', '}']
