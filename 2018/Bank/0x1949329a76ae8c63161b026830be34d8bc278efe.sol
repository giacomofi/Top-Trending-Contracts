['pragma solidity ^0.4.20;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface AquaPriceOracle {\n', '  function getAudCentWeiPrice() external constant returns (uint);\n', '  function getAquaTokenAudCentsPrice() external constant returns (uint);\n', '  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\n', '}\n', '\n', '///@title Aqua Price Oracle Smart contract. It is used to set Aqua token price for during crowdsale and also for token redemptions\n', 'contract SimpleAquaPriceOracle is Owned, AquaPriceOracle  {\n', '  uint internal audCentWeiPrice;\n', '  uint internal aquaTokenAudCentsPrice;\n', ' \n', '  ///Event is triggered when price is updated\n', '  ///@param _audCentWeiPrice Price of A$0.01 in Wei\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\n', ' \n', '  ///Function returns price of A$0.01 in Wei\n', '  ///@return Price of A$0.01 in Wei\n', '  function getAudCentWeiPrice() external constant returns (uint) {\n', '      return audCentWeiPrice;\n', '  }\n', '  \n', '  ///Function returns price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  ///@return Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function getAquaTokenAudCentsPrice() external constant returns (uint) {\n', '      return aquaTokenAudCentsPrice;\n', '  }\n', ' \n', '  ///Constructor initializes Aqua Price Oracle smart contract\n', '  ///@param _audCentWeiPrice Price of A$0.01 in Wei\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function SimpleAquaPriceOracle(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice) public {\n', '      updatePrice(_audCentWeiPrice, _aquaTokenAudCentsPrice);\n', '  }\n', '  \n', '  ///Function updates prices\n', '  ///@param _audCentWeiPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function updatePrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice) onlyOwner public {\n', '    audCentWeiPrice = _audCentWeiPrice;\n', '    aquaTokenAudCentsPrice = _aquaTokenAudCentsPrice;\n', '    NewPrice(audCentWeiPrice, aquaTokenAudCentsPrice);\n', '  }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface AquaPriceOracle {\n', '  function getAudCentWeiPrice() external constant returns (uint);\n', '  function getAquaTokenAudCentsPrice() external constant returns (uint);\n', '  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\n', '}\n', '\n', '///@title Aqua Price Oracle Smart contract. It is used to set Aqua token price for during crowdsale and also for token redemptions\n', 'contract SimpleAquaPriceOracle is Owned, AquaPriceOracle  {\n', '  uint internal audCentWeiPrice;\n', '  uint internal aquaTokenAudCentsPrice;\n', ' \n', '  ///Event is triggered when price is updated\n', '  ///@param _audCentWeiPrice Price of A$0.01 in Wei\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\n', ' \n', '  ///Function returns price of A$0.01 in Wei\n', '  ///@return Price of A$0.01 in Wei\n', '  function getAudCentWeiPrice() external constant returns (uint) {\n', '      return audCentWeiPrice;\n', '  }\n', '  \n', '  ///Function returns price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  ///@return Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function getAquaTokenAudCentsPrice() external constant returns (uint) {\n', '      return aquaTokenAudCentsPrice;\n', '  }\n', ' \n', '  ///Constructor initializes Aqua Price Oracle smart contract\n', '  ///@param _audCentWeiPrice Price of A$0.01 in Wei\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function SimpleAquaPriceOracle(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice) public {\n', '      updatePrice(_audCentWeiPrice, _aquaTokenAudCentsPrice);\n', '  }\n', '  \n', '  ///Function updates prices\n', '  ///@param _audCentWeiPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  ///@param _aquaTokenAudCentsPrice Price of 1 Aqua Token expressed in (Australian dollar) cents\n', '  function updatePrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice) onlyOwner public {\n', '    audCentWeiPrice = _audCentWeiPrice;\n', '    aquaTokenAudCentsPrice = _aquaTokenAudCentsPrice;\n', '    NewPrice(audCentWeiPrice, aquaTokenAudCentsPrice);\n', '  }\n', '}']
