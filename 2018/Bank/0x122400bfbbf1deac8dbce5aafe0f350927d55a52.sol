['contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Owned \n', '{\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner \n', '    {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOrTokenTraderWithSameOwner \n', '    {\n', '        require (msg.sender == owner && TokenTrader(msg.sender).owner() == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner \n', '    {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract x888 is StandardToken, Owned\n', '{\n', '    using SafeMath for uint256;\n', '    string public name = "Meta Exchange x888";\n', '    string public symbol = "X888";\n', '    uint8 public constant decimals = 6;\n', '    \n', '    uint256 version = 10020010009;\n', '    \n', '    uint256 public totalSupply = 5125387888 * (uint256(10) ** decimals);\n', '\n', '    uint256 public exchFee = uint256(1 * (uint256(10) ** (decimals - 2)));\n', '\n', '    uint256 public startTimestamp;\n', '    \n', '    uint256 public avgRate = uint256(uint256(10)**(18-decimals)).div(888);\n', '\n', '    address public stuff = 0x0CcCb9bAAdD61F9e0ab25bD782765013817821bD;\n', '    address public teama = 0x20f349917d2521c41f8ec9c0a1f7e0c36af0b46f;\n', '    address public baseowner;\n', '\n', '    mapping(address => bool) _verify;\n', '    mapping(uint256 => address) _mks;\n', '    uint256 public makersCount;\n', '\n', '    event LogTransfer(address sender, address to, uint amount);\n', '    event Clearing(address to, uint256 amount);\n', '\n', '    event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress,\n', '        address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units,\n', '        bool buysTokens, bool sellsTokens);\n', '    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\n', '\n', '    function x888() \n', '    {\n', '        makersCount = 0;\n', '        startTimestamp = now;\n', '        baseowner = msg.sender;\n', '        balances[baseowner] = totalSupply;\n', '        Transfer(0x0, baseowner, totalSupply);\n', '    }\n', '\n', '    function bva(address partner, uint256 value, address adviser)payable public \n', '    {\n', '      uint256 tokenAmount = calcTotal(value);\n', '      if(msg.value != 0)\n', '      {\n', '        tokenAmount = calcCount(msg.value);\n', '      }else\n', '      {\n', '        require(msg.sender == stuff);\n', '      }\n', '      if(msg.value != 0)\n', '      {\n', '        Clearing(stuff, msg.value.mul(40).div(100));\n', '        stuff.transfer(msg.value.mul(40).div(100));\n', '        Clearing(teama, msg.value.mul(40).div(100));\n', '        teama.transfer(msg.value.mul(40).div(100));\n', '        if(partner != adviser && balances[adviser]!=0)\n', '        {\n', '          Clearing(adviser, msg.value.mul(20).div(100));\n', '          adviser.transfer(msg.value.mul(20).div(100));\n', '        }else\n', '        {\n', '          Clearing(stuff, msg.value.mul(10).div(100));\n', '          stuff.transfer(msg.value.mul(10).div(100));\n', '          Clearing(teama, msg.value.mul(10).div(100));\n', '          teama.transfer(msg.value.mul(10).div(100));\n', '        } \n', '      }\n', '      balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '      balances[partner] = balances[partner].add(tokenAmount);\n', '      Transfer(baseowner, partner, tokenAmount);\n', '    }\n', '    \n', '    function() payable public\n', '    {\n', '      if(msg.value != 0)\n', '      {\n', '        uint256 tokenAmount = msg.value.div(avgRate);\n', '        Clearing(stuff, msg.value.mul(50).div(100));\n', '        stuff.transfer(msg.value.mul(50).div(100));\n', '        Clearing(teama, msg.value.mul(50).div(100));\n', '        teama.transfer(msg.value.mul(50).div(100));\n', '        if(msg.sender!=stuff)\n', '        {\n', '          balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '          balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '          Transfer(baseowner, msg.sender, tokenAmount);\n', '        }\n', '      }\n', '    }\n', '\n', '    function calcTotal(uint256 count) constant returns(uint256) \n', '    {\n', '        return count.mul(getDeflator()).div(100);\n', '    }\n', '\n', '    function calcCount(uint256 weiAmount) constant returns(uint256) \n', '    {\n', '        return weiAmount.div(avgRate).mul(getDeflator()).div(100);\n', '    }\n', '\n', '    function getDeflator() constant returns (uint256)\n', '    {\n', '        if (now <= startTimestamp + 28 days)//38% \n', '        {\n', '            return 138;\n', '        }else if (now <= startTimestamp + 56 days)//23% \n', '        {\n', '            return 123;\n', '        }else if (now <= startTimestamp + 84 days)//15% \n', '        {\n', '            return 115;\n', '        }else if (now <= startTimestamp + 112 days)//9%\n', '        {\n', '            return 109;\n', '        }else if (now <= startTimestamp + 140 days)//5%\n', '        {\n', '            return 105;\n', '        }else\n', '        {\n', '            return 100;\n', '        }\n', '    }\n', '\n', '    function verify(address tradeContract) constant returns (\n', '        bool    valid,\n', '        address owner,\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) \n', '    {\n', '        valid = _verify[tradeContract];\n', '        if (valid) \n', '        {\n', '            TokenTrader t = TokenTrader(tradeContract);\n', '            owner         = t.owner();\n', '            asset         = t.asset();\n', '            buyPrice      = t.buyPrice();\n', '            sellPrice     = t.sellPrice();\n', '            units         = t.units();\n', '            buysTokens    = t.buysTokens();\n', '            sellsTokens   = t.sellsTokens();\n', '        }\n', '    }\n', '\n', '    function getTrader(uint256 id) public constant returns (\n', '        bool    valid,\n', '        address trade,\n', '        address owner,\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) \n', '    {\n', '      if(id < makersCount)\n', '      {\n', '        trade = _mks[id];\n', '        valid = _verify[trade];\n', '        if (valid) \n', '        {\n', '            TokenTrader t = TokenTrader(trade);\n', '            owner         = t.owner();\n', '            asset         = t.asset();\n', '            buyPrice      = t.buyPrice();\n', '            sellPrice     = t.sellPrice();\n', '            units         = t.units();\n', '            buysTokens    = t.buysTokens();\n', '            sellsTokens   = t.sellsTokens();\n', '        }\n', '      }\n', '    }\n', '    \n', '    function createTradeContract(\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) public returns (address trader) \n', '    {\n', '        require (balances[msg.sender] > 1000 * (uint256(10) ** decimals));\n', '        require (asset != 0x0);\n', '        require(buyPrice > 0 && sellPrice > 0);\n', '        require(buyPrice < sellPrice);\n', '        require(units > 0);\n', '\n', '        trader = new TokenTrader(\n', '            asset,\n', '            exchFee,\n', '            address(this),\n', '            buyPrice,\n', '            sellPrice,\n', '            units,\n', '            buysTokens,\n', '            sellsTokens);\n', '        _verify[trader] = true;\n', '        _mks[makersCount] = trader;\n', '        makersCount = makersCount.add(1);\n', '        balances[baseowner] += 1000 * (uint256(10) ** decimals);\n', '        balances[msg.sender] -= 1000 * (uint256(10) ** decimals);\n', '        TokenTrader(trader).transferOwnership(msg.sender);\n', '        TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens);\n', '    }\n', '\n', '    function cleanup() \n', '    {\n', '      revert();\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) \n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool) \n', '    {\n', '        if(_verify[msg.sender] && _from==msg.sender)\n', '        {\n', '           TokenTrader t = TokenTrader(_from);\n', '           if(balances[address(t.owner)]>_value)\n', '           {\n', '               balances[address(t.owner)] += _value;\n', '               balances[_to] -= _value;\n', '               return true;\n', '           }\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining)\n', '    {\n', '        return super.allowance(_owner, _spender);\n', '    }\n', '\n', '}\n', '\n', 'contract ERCTW \n', '{\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', 'contract TokenTrader is Owned \n', '{\n', '    address public exchange;    // address of exchange\n', '    address public asset;       // address of token\n', '    uint256 public buyPrice;    // contract buys lots of token at this price\n', '    uint256 public sellPrice;   // contract sells lots at this price\n', '    uint256 public units;       // lot size (token-wei)\n', '    uint256 public exchFee;     // fee size (0,01 x8888)\n', '\n', '    bool public buysTokens;     // is contract buying\n', '    bool public sellsTokens;    // is contract selling\n', '\n', '    event ActivatedEvent(bool buys, bool sells);\n', '    event MakerDepositedEther(uint256 amount);\n', '    event MakerWithdrewAsset(uint256 tokens);\n', '    event MakerTransferredAsset(address toTokenTrader, uint256 tokens);\n', '    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\n', '    event MakerWithdrewEther(uint256 ethers);\n', '    event MakerTransferredEther(address toTokenTrader, uint256 ethers);\n', '    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\n', '        uint256 ethersReturned, uint256 tokensBought);\n', '    event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell,\n', '        uint256 tokensSold, uint256 etherValueOfTokensSold);\n', '\n', '    // Constructor - only to be called by the TokenTraderFactory contract\n', '    function TokenTrader (\n', '        address _asset,\n', '        uint256 _exchFee,\n', '        address _exchange,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        uint256 _units,\n', '        bool    _buysTokens,\n', '        bool    _sellsTokens\n', '    ) \n', '    {\n', '        asset       = _asset;\n', '        exchFee     = _exchFee;\n', '        exchange    = _exchange;\n', '        buyPrice    = _buyPrice;\n', '        sellPrice   = _sellPrice;\n', '        units       = _units;\n', '        buysTokens  = _buysTokens;\n', '        sellsTokens = _sellsTokens;\n', '        ActivatedEvent(buysTokens, sellsTokens);\n', '    }\n', '\n', '    function activate (\n', '        address _asset,\n', '        uint256 _exchFee,\n', '        address _exchange,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        uint256 _units,\n', '        bool    _buysTokens,\n', '        bool    _sellsTokens\n', '    ) onlyOwner \n', '    {\n', '        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\n', '        asset       = _asset;\n', '        exchFee     = _exchFee;\n', '        exchange    = _exchange;\n', '        buyPrice    = _buyPrice;\n', '        sellPrice   = _sellPrice;\n', '        units       = _units;\n', '        buysTokens  = _buysTokens;\n', '        sellsTokens = _sellsTokens;\n', '        ActivatedEvent(buysTokens, sellsTokens);\n', '    }\n', '\n', '    function makerDepositEther() payable onlyOwnerOrTokenTraderWithSameOwner \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerDepositedEther(msg.value);\n', '    }\n', '\n', '    function makerWithdrawAsset(uint256 tokens) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerWithdrewAsset(tokens);\n', '        return ERCTW(asset).transfer(owner, tokens);\n', '    }\n', '\n', '    function makerTransferAsset(\n', '        TokenTrader toTokenTrader,\n', '        uint256 tokens\n', '    ) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \n', '        MakerTransferredAsset(toTokenTrader, tokens);\n', '        return ERCTW(asset).transfer(toTokenTrader, tokens);\n', '    }\n', '\n', '    function makerWithdrawERC20Token(\n', '        address tokenAddress,\n', '        uint256 tokens\n', '    ) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerWithdrewERC20Token(tokenAddress, tokens);\n', '        return ERCTW(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function makerWithdrawEther(uint256 ethers) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (this.balance >= ethers) \n', '        {\n', '            MakerWithdrewEther(ethers);\n', '            return owner.send(ethers);\n', '        }\n', '    }\n', '\n', '    function makerTransferEther(\n', '        TokenTrader toTokenTrader,\n', '        uint256 ethers\n', '    ) onlyOwner returns (bool) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \n', '        if (this.balance >= ethers) \n', '        {\n', '            MakerTransferredEther(toTokenTrader, ethers);\n', '            toTokenTrader.makerDepositEther.value(ethers)();\n', '        }\n', '    }\n', '\n', '    function takerBuyAsset() payable \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (sellsTokens || msg.sender == owner) \n', '        {\n', '            uint order    = msg.value / sellPrice;\n', '            uint can_sell = ERCTW(asset).balanceOf(address(this)) / units;\n', '            uint256 change = 0;\n', '            if (msg.value > (can_sell * sellPrice)) \n', '            {\n', '                change  = msg.value - (can_sell * sellPrice);\n', '                order = can_sell;\n', '            }\n', '            if (change > 0) \n', '            {\n', '                require(msg.sender.send(change));\n', '            }\n', '            if (order > 0) \n', '            {\n', '                require (ERCTW(asset).transfer(msg.sender, order * units));\n', '            }\n', '            TakerBoughtAsset(msg.sender, msg.value, change, order * units);\n', '        }\n', '        else require (msg.sender.send(msg.value));\n', '    }\n', '\n', '    function takerSellAsset(uint256 amountOfTokensToSell) public  \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (buysTokens || msg.sender == owner) \n', '        {\n', '            uint256 can_buy = this.balance / buyPrice;\n', '            uint256 order = amountOfTokensToSell / units;\n', '            if (order > can_buy) order = can_buy;\n', '            if (order > 0) \n', '            {\n', '                require(ERCTW(asset).transferFrom(msg.sender, address(this), order * units));\n', '                require(msg.sender.send(order * buyPrice));\n', '            }\n', '            TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);\n', '        }\n', '    }\n', '    function () payable \n', '    {\n', '        takerBuyAsset();\n', '    }\n', '}']
['contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Owned \n', '{\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner \n', '    {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOrTokenTraderWithSameOwner \n', '    {\n', '        require (msg.sender == owner && TokenTrader(msg.sender).owner() == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner \n', '    {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract x888 is StandardToken, Owned\n', '{\n', '    using SafeMath for uint256;\n', '    string public name = "Meta Exchange x888";\n', '    string public symbol = "X888";\n', '    uint8 public constant decimals = 6;\n', '    \n', '    uint256 version = 10020010009;\n', '    \n', '    uint256 public totalSupply = 5125387888 * (uint256(10) ** decimals);\n', '\n', '    uint256 public exchFee = uint256(1 * (uint256(10) ** (decimals - 2)));\n', '\n', '    uint256 public startTimestamp;\n', '    \n', '    uint256 public avgRate = uint256(uint256(10)**(18-decimals)).div(888);\n', '\n', '    address public stuff = 0x0CcCb9bAAdD61F9e0ab25bD782765013817821bD;\n', '    address public teama = 0x20f349917d2521c41f8ec9c0a1f7e0c36af0b46f;\n', '    address public baseowner;\n', '\n', '    mapping(address => bool) _verify;\n', '    mapping(uint256 => address) _mks;\n', '    uint256 public makersCount;\n', '\n', '    event LogTransfer(address sender, address to, uint amount);\n', '    event Clearing(address to, uint256 amount);\n', '\n', '    event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress,\n', '        address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units,\n', '        bool buysTokens, bool sellsTokens);\n', '    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\n', '\n', '    function x888() \n', '    {\n', '        makersCount = 0;\n', '        startTimestamp = now;\n', '        baseowner = msg.sender;\n', '        balances[baseowner] = totalSupply;\n', '        Transfer(0x0, baseowner, totalSupply);\n', '    }\n', '\n', '    function bva(address partner, uint256 value, address adviser)payable public \n', '    {\n', '      uint256 tokenAmount = calcTotal(value);\n', '      if(msg.value != 0)\n', '      {\n', '        tokenAmount = calcCount(msg.value);\n', '      }else\n', '      {\n', '        require(msg.sender == stuff);\n', '      }\n', '      if(msg.value != 0)\n', '      {\n', '        Clearing(stuff, msg.value.mul(40).div(100));\n', '        stuff.transfer(msg.value.mul(40).div(100));\n', '        Clearing(teama, msg.value.mul(40).div(100));\n', '        teama.transfer(msg.value.mul(40).div(100));\n', '        if(partner != adviser && balances[adviser]!=0)\n', '        {\n', '          Clearing(adviser, msg.value.mul(20).div(100));\n', '          adviser.transfer(msg.value.mul(20).div(100));\n', '        }else\n', '        {\n', '          Clearing(stuff, msg.value.mul(10).div(100));\n', '          stuff.transfer(msg.value.mul(10).div(100));\n', '          Clearing(teama, msg.value.mul(10).div(100));\n', '          teama.transfer(msg.value.mul(10).div(100));\n', '        } \n', '      }\n', '      balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '      balances[partner] = balances[partner].add(tokenAmount);\n', '      Transfer(baseowner, partner, tokenAmount);\n', '    }\n', '    \n', '    function() payable public\n', '    {\n', '      if(msg.value != 0)\n', '      {\n', '        uint256 tokenAmount = msg.value.div(avgRate);\n', '        Clearing(stuff, msg.value.mul(50).div(100));\n', '        stuff.transfer(msg.value.mul(50).div(100));\n', '        Clearing(teama, msg.value.mul(50).div(100));\n', '        teama.transfer(msg.value.mul(50).div(100));\n', '        if(msg.sender!=stuff)\n', '        {\n', '          balances[baseowner] = balances[baseowner].sub(tokenAmount);\n', '          balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '          Transfer(baseowner, msg.sender, tokenAmount);\n', '        }\n', '      }\n', '    }\n', '\n', '    function calcTotal(uint256 count) constant returns(uint256) \n', '    {\n', '        return count.mul(getDeflator()).div(100);\n', '    }\n', '\n', '    function calcCount(uint256 weiAmount) constant returns(uint256) \n', '    {\n', '        return weiAmount.div(avgRate).mul(getDeflator()).div(100);\n', '    }\n', '\n', '    function getDeflator() constant returns (uint256)\n', '    {\n', '        if (now <= startTimestamp + 28 days)//38% \n', '        {\n', '            return 138;\n', '        }else if (now <= startTimestamp + 56 days)//23% \n', '        {\n', '            return 123;\n', '        }else if (now <= startTimestamp + 84 days)//15% \n', '        {\n', '            return 115;\n', '        }else if (now <= startTimestamp + 112 days)//9%\n', '        {\n', '            return 109;\n', '        }else if (now <= startTimestamp + 140 days)//5%\n', '        {\n', '            return 105;\n', '        }else\n', '        {\n', '            return 100;\n', '        }\n', '    }\n', '\n', '    function verify(address tradeContract) constant returns (\n', '        bool    valid,\n', '        address owner,\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) \n', '    {\n', '        valid = _verify[tradeContract];\n', '        if (valid) \n', '        {\n', '            TokenTrader t = TokenTrader(tradeContract);\n', '            owner         = t.owner();\n', '            asset         = t.asset();\n', '            buyPrice      = t.buyPrice();\n', '            sellPrice     = t.sellPrice();\n', '            units         = t.units();\n', '            buysTokens    = t.buysTokens();\n', '            sellsTokens   = t.sellsTokens();\n', '        }\n', '    }\n', '\n', '    function getTrader(uint256 id) public constant returns (\n', '        bool    valid,\n', '        address trade,\n', '        address owner,\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) \n', '    {\n', '      if(id < makersCount)\n', '      {\n', '        trade = _mks[id];\n', '        valid = _verify[trade];\n', '        if (valid) \n', '        {\n', '            TokenTrader t = TokenTrader(trade);\n', '            owner         = t.owner();\n', '            asset         = t.asset();\n', '            buyPrice      = t.buyPrice();\n', '            sellPrice     = t.sellPrice();\n', '            units         = t.units();\n', '            buysTokens    = t.buysTokens();\n', '            sellsTokens   = t.sellsTokens();\n', '        }\n', '      }\n', '    }\n', '    \n', '    function createTradeContract(\n', '        address asset,\n', '        uint256 buyPrice,\n', '        uint256 sellPrice,\n', '        uint256 units,\n', '        bool    buysTokens,\n', '        bool    sellsTokens\n', '    ) public returns (address trader) \n', '    {\n', '        require (balances[msg.sender] > 1000 * (uint256(10) ** decimals));\n', '        require (asset != 0x0);\n', '        require(buyPrice > 0 && sellPrice > 0);\n', '        require(buyPrice < sellPrice);\n', '        require(units > 0);\n', '\n', '        trader = new TokenTrader(\n', '            asset,\n', '            exchFee,\n', '            address(this),\n', '            buyPrice,\n', '            sellPrice,\n', '            units,\n', '            buysTokens,\n', '            sellsTokens);\n', '        _verify[trader] = true;\n', '        _mks[makersCount] = trader;\n', '        makersCount = makersCount.add(1);\n', '        balances[baseowner] += 1000 * (uint256(10) ** decimals);\n', '        balances[msg.sender] -= 1000 * (uint256(10) ** decimals);\n', '        TokenTrader(trader).transferOwnership(msg.sender);\n', '        TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens);\n', '    }\n', '\n', '    function cleanup() \n', '    {\n', '      revert();\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) \n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool) \n', '    {\n', '        if(_verify[msg.sender] && _from==msg.sender)\n', '        {\n', '           TokenTrader t = TokenTrader(_from);\n', '           if(balances[address(t.owner)]>_value)\n', '           {\n', '               balances[address(t.owner)] += _value;\n', '               balances[_to] -= _value;\n', '               return true;\n', '           }\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining)\n', '    {\n', '        return super.allowance(_owner, _spender);\n', '    }\n', '\n', '}\n', '\n', 'contract ERCTW \n', '{\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', 'contract TokenTrader is Owned \n', '{\n', '    address public exchange;    // address of exchange\n', '    address public asset;       // address of token\n', '    uint256 public buyPrice;    // contract buys lots of token at this price\n', '    uint256 public sellPrice;   // contract sells lots at this price\n', '    uint256 public units;       // lot size (token-wei)\n', '    uint256 public exchFee;     // fee size (0,01 x8888)\n', '\n', '    bool public buysTokens;     // is contract buying\n', '    bool public sellsTokens;    // is contract selling\n', '\n', '    event ActivatedEvent(bool buys, bool sells);\n', '    event MakerDepositedEther(uint256 amount);\n', '    event MakerWithdrewAsset(uint256 tokens);\n', '    event MakerTransferredAsset(address toTokenTrader, uint256 tokens);\n', '    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\n', '    event MakerWithdrewEther(uint256 ethers);\n', '    event MakerTransferredEther(address toTokenTrader, uint256 ethers);\n', '    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\n', '        uint256 ethersReturned, uint256 tokensBought);\n', '    event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell,\n', '        uint256 tokensSold, uint256 etherValueOfTokensSold);\n', '\n', '    // Constructor - only to be called by the TokenTraderFactory contract\n', '    function TokenTrader (\n', '        address _asset,\n', '        uint256 _exchFee,\n', '        address _exchange,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        uint256 _units,\n', '        bool    _buysTokens,\n', '        bool    _sellsTokens\n', '    ) \n', '    {\n', '        asset       = _asset;\n', '        exchFee     = _exchFee;\n', '        exchange    = _exchange;\n', '        buyPrice    = _buyPrice;\n', '        sellPrice   = _sellPrice;\n', '        units       = _units;\n', '        buysTokens  = _buysTokens;\n', '        sellsTokens = _sellsTokens;\n', '        ActivatedEvent(buysTokens, sellsTokens);\n', '    }\n', '\n', '    function activate (\n', '        address _asset,\n', '        uint256 _exchFee,\n', '        address _exchange,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        uint256 _units,\n', '        bool    _buysTokens,\n', '        bool    _sellsTokens\n', '    ) onlyOwner \n', '    {\n', '        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\n', '        asset       = _asset;\n', '        exchFee     = _exchFee;\n', '        exchange    = _exchange;\n', '        buyPrice    = _buyPrice;\n', '        sellPrice   = _sellPrice;\n', '        units       = _units;\n', '        buysTokens  = _buysTokens;\n', '        sellsTokens = _sellsTokens;\n', '        ActivatedEvent(buysTokens, sellsTokens);\n', '    }\n', '\n', '    function makerDepositEther() payable onlyOwnerOrTokenTraderWithSameOwner \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerDepositedEther(msg.value);\n', '    }\n', '\n', '    function makerWithdrawAsset(uint256 tokens) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerWithdrewAsset(tokens);\n', '        return ERCTW(asset).transfer(owner, tokens);\n', '    }\n', '\n', '    function makerTransferAsset(\n', '        TokenTrader toTokenTrader,\n', '        uint256 tokens\n', '    ) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \n', '        MakerTransferredAsset(toTokenTrader, tokens);\n', '        return ERCTW(asset).transfer(toTokenTrader, tokens);\n', '    }\n', '\n', '    function makerWithdrawERC20Token(\n', '        address tokenAddress,\n', '        uint256 tokens\n', '    ) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        MakerWithdrewERC20Token(tokenAddress, tokens);\n', '        return ERCTW(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function makerWithdrawEther(uint256 ethers) onlyOwner returns (bool ok) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (this.balance >= ethers) \n', '        {\n', '            MakerWithdrewEther(ethers);\n', '            return owner.send(ethers);\n', '        }\n', '    }\n', '\n', '    function makerTransferEther(\n', '        TokenTrader toTokenTrader,\n', '        uint256 ethers\n', '    ) onlyOwner returns (bool) \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \n', '        if (this.balance >= ethers) \n', '        {\n', '            MakerTransferredEther(toTokenTrader, ethers);\n', '            toTokenTrader.makerDepositEther.value(ethers)();\n', '        }\n', '    }\n', '\n', '    function takerBuyAsset() payable \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (sellsTokens || msg.sender == owner) \n', '        {\n', '            uint order    = msg.value / sellPrice;\n', '            uint can_sell = ERCTW(asset).balanceOf(address(this)) / units;\n', '            uint256 change = 0;\n', '            if (msg.value > (can_sell * sellPrice)) \n', '            {\n', '                change  = msg.value - (can_sell * sellPrice);\n', '                order = can_sell;\n', '            }\n', '            if (change > 0) \n', '            {\n', '                require(msg.sender.send(change));\n', '            }\n', '            if (order > 0) \n', '            {\n', '                require (ERCTW(asset).transfer(msg.sender, order * units));\n', '            }\n', '            TakerBoughtAsset(msg.sender, msg.value, change, order * units);\n', '        }\n', '        else require (msg.sender.send(msg.value));\n', '    }\n', '\n', '    function takerSellAsset(uint256 amountOfTokensToSell) public  \n', '    {\n', '        require(ERCTW(exchange).transferFrom(this, exchange, exchFee));\n', '        if (buysTokens || msg.sender == owner) \n', '        {\n', '            uint256 can_buy = this.balance / buyPrice;\n', '            uint256 order = amountOfTokensToSell / units;\n', '            if (order > can_buy) order = can_buy;\n', '            if (order > 0) \n', '            {\n', '                require(ERCTW(asset).transferFrom(msg.sender, address(this), order * units));\n', '                require(msg.sender.send(order * buyPrice));\n', '            }\n', '            TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);\n', '        }\n', '    }\n', '    function () payable \n', '    {\n', '        takerBuyAsset();\n', '    }\n', '}']
