['pragma solidity ^0.4.24;\n', '\n', '// written by madgustave from Team Chibi Fighters\n', '// find us at https://chibigame.io\n', '// info@chibifighters.io\n', '// version 1.0.0\n', '\n', 'contract ExternalTokensSupport {\n', '    function calculateAmount(address, uint256, address, bytes, uint256) public pure returns(uint256, uint256, uint256) {}\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'interface ERC20Interface {\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '    function transfer(address to, uint tokens) external;\n', '    function balanceOf(address _owner) external view returns (uint256 _balance);\n', '}\n', '\n', 'interface ERC20InterfaceClassic {\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'contract Crystals is Owned {\n', '\t// price of one crystal in wei\n', '\tuint256 public crystalPrice;\n', '    ExternalTokensSupport public etsContract;    \n', '\n', '\tevent crystalsBought(\n', '\t\taddress indexed buyer,\n', '\t\tuint256 amount,\n', '        uint256 indexed paymentMethod \n', '\t);\n', '\n', '\tconstructor(uint256 startPrice, address etsAddress) public {\n', '\t\tcrystalPrice = startPrice;\n', '        etsContract = ExternalTokensSupport(etsAddress);\n', '\t}\n', '\n', '\tfunction () public payable {\n', '\t\trequire(msg.value >= crystalPrice);\n', '\n', '\t\t// crystal is indivisible\n', '\t\trequire(msg.value % crystalPrice == 0);\n', '\n', '\t\temit crystalsBought(msg.sender, msg.value / crystalPrice, 0);\n', '\t}\n', '\n', '    function buyWithERC20(address _sender, uint256 _value, ERC20Interface _tokenContract, bytes _extraData) internal {\n', '        require(etsContract != address(0));\n', '\n', '        (uint256 crystalsAmount, uint256 neededTokensAmount, uint256 paymentMethod) = etsContract.calculateAmount(_sender, _value, _tokenContract, _extraData, crystalPrice);\n', '\n', '        require(_tokenContract.transferFrom(_sender, address(this), neededTokensAmount));\n', '\n', '        emit crystalsBought(_sender, crystalsAmount, paymentMethod);\n', '    }\n', '\n', '    function receiveApproval(address _sender, uint256 _value, ERC20Interface _tokenContract, bytes _extraData) public {\n', '        buyWithERC20(_sender, _value, _tokenContract, _extraData);\n', '    }\n', '\n', '\tfunction changePrice(uint256 newPrice) public onlyOwner {\n', '\t\tcrystalPrice = newPrice;\n', '\t}\n', '\n', '    function changeEtsAddress(address etsAddress) public onlyOwner {\n', '        etsContract = ExternalTokensSupport(etsAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Send Ether to owner\n', '    * @param _address Receiving address\n', '    * @param _amountWei Amount in WEI to send\n', '    **/\n', '    function weiToOwner(address _address, uint _amountWei) public onlyOwner returns (bool) {\n', '        require(_amountWei <= address(this).balance);\n', '        _address.transfer(_amountWei);\n', '        return true;\n', '    }\n', '\n', '    function ERC20ToOwner(address _to, uint256 _amount, ERC20Interface _tokenContract) public onlyOwner {\n', '        _tokenContract.transfer(_to, _amount);\n', '    }\n', '\n', '    function ERC20ClassicToOwner(address _to, uint256 _amount, ERC20InterfaceClassic _tokenContract) public onlyOwner {\n', '        _tokenContract.transfer(_to, _amount);\n', '    }\n', '    \n', '    function queryERC20(ERC20Interface _tokenContract) public view onlyOwner returns (uint) {\n', '        return _tokenContract.balanceOf(this);\n', '    }\n', '}']