['pragma solidity ^0.4.0;\n', '\n', 'contract StandardToken  {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '}\n', '\n', 'contract usingTokenContract {\n', '\n', '     StandardToken token;\n', '     mapping(bytes32 => bool) public administrators;\n', '     uint256 public stakingRequirement = 5e18;\n', '     uint256 public messagingRequirement = 5e18;\n', '     \n', '     modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[keccak256(_customerAddress)]);\n', '        _;\n', '    }\n', '     \n', '\n', '     function usingTokenContract() {\n', '         token = StandardToken(0x07d9e49ea402194bf48a8276dafb16e4ed633317);\n', '         administrators[0x7f5be223ca67e25627c96e839775b3401c1ba4d617afc27a77a866e071ed401d] = true; \n', '     }\n', '     \n', '     function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    function setMessagingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        messagingRequirement = _amountOfTokens;\n', '    }\n', '     \n', '  \n', '    function userTokenBalance(address _userAddress) constant returns(uint256 balance) {\n', '         return token.balanceOf(_userAddress);\n', '     }\n', '     \n', '    \n', '    function validateUser(address _userAddress) public constant returns(bool) {\n', '        if(userTokenBalance(_userAddress)>=stakingRequirement) {\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function validateUserForMessaging(address _userAddress) public constant returns(bool) {\n', '        if(userTokenBalance(_userAddress)>=messagingRequirement) {\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '}']