['pragma solidity ^0.4.20;\n', '\n', 'contract Eps {  \n', '    uint timeout; //  PROMO CODES END August 11th 2018\n', '    mapping (address => address) inviter;\n', '    \n', '    function bytesToAddr (bytes b) constant returns (address)  {\n', '        uint result = 0;\n', '        for (uint i = b.length-1; i+1 > 0; i--) {\n', '            uint c = uint(b[i]);\n', '            uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\n', '            result += to_inc;\n', '        }\n', '        return address(result);\n', '    }\n', '    \n', '    function addrecruit(address _recaddress, address _invaddress) private {\n', '        if (inviter[_recaddress] != 0x0) {\n', '                revert();\n', '            }\n', '        inviter[_recaddress] = _invaddress;\n', '    }\n', '\n', '    function () external payable { // Fallback Function\n', '        timeout = 1533954742;\n', '        address recaddress = msg.sender;\n', '        invaddress = bytesToAddr(msg.data);\n', '        if (invaddress == 0x0 || invaddress == recaddress) {\n', '            address invaddress = 0x93D43eeFcFbE8F9e479E172ee5d92DdDd2600E3b;\n', '        }\n', '        addrecruit(recaddress, invaddress);\n', '        uint i=0;\n', '        uint amount = msg.value;\n', '        if (amount < 0.2 ether && now > timeout) {\n', '            msg.sender.transfer(msg.value);\n', '            revert();\n', '        }\n', '        while (i < 7) {\n', '            uint share = amount/2;\n', '            if (recaddress == 0x0) {\n', '                inviter[recaddress].transfer(share);\n', '                recaddress = 0x93D43eeFcFbE8F9e479E172ee5d92DdDd2600E3b;\n', '            }\n', '            inviter[recaddress].transfer(share);\n', '            recaddress = inviter[recaddress];\n', '            amount -= share;\n', '            i++;\n', '        }\n', '        inviter[recaddress].transfer(share);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract Eps {  \n', '    uint timeout; //  PROMO CODES END August 11th 2018\n', '    mapping (address => address) inviter;\n', '    \n', '    function bytesToAddr (bytes b) constant returns (address)  {\n', '        uint result = 0;\n', '        for (uint i = b.length-1; i+1 > 0; i--) {\n', '            uint c = uint(b[i]);\n', '            uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\n', '            result += to_inc;\n', '        }\n', '        return address(result);\n', '    }\n', '    \n', '    function addrecruit(address _recaddress, address _invaddress) private {\n', '        if (inviter[_recaddress] != 0x0) {\n', '                revert();\n', '            }\n', '        inviter[_recaddress] = _invaddress;\n', '    }\n', '\n', '    function () external payable { // Fallback Function\n', '        timeout = 1533954742;\n', '        address recaddress = msg.sender;\n', '        invaddress = bytesToAddr(msg.data);\n', '        if (invaddress == 0x0 || invaddress == recaddress) {\n', '            address invaddress = 0x93D43eeFcFbE8F9e479E172ee5d92DdDd2600E3b;\n', '        }\n', '        addrecruit(recaddress, invaddress);\n', '        uint i=0;\n', '        uint amount = msg.value;\n', '        if (amount < 0.2 ether && now > timeout) {\n', '            msg.sender.transfer(msg.value);\n', '            revert();\n', '        }\n', '        while (i < 7) {\n', '            uint share = amount/2;\n', '            if (recaddress == 0x0) {\n', '                inviter[recaddress].transfer(share);\n', '                recaddress = 0x93D43eeFcFbE8F9e479E172ee5d92DdDd2600E3b;\n', '            }\n', '            inviter[recaddress].transfer(share);\n', '            recaddress = inviter[recaddress];\n', '            amount -= share;\n', '            i++;\n', '        }\n', '        inviter[recaddress].transfer(share);\n', '    }\n', '}']
