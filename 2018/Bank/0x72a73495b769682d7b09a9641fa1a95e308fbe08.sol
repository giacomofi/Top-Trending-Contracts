['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/P4RTYRelay.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Copyright Mako Labs LLC 2018 All Rights Reseerved\n', '*/\n', '\n', 'interface P4RTYRelay {\n', '    /**\n', '    * @dev Will relay to internal implementation\n', '    * @param beneficiary Token purchaser\n', '    * @param tokenAmount Number of tokens to be minted\n', '    */\n', '    function relay(address beneficiary, uint256 tokenAmount) external;\n', '}\n', '\n', '// File: contracts/ReinvestProxy.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Copyright Mako Labs LLC 2018 All Rights Reseerved\n', '*/\n', 'interface ReinvestProxy {\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller,\n', '    function reinvestFor(address customer) external payable;\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      emit WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      emit WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/P4.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Stable + DIVIS: Whale and Minow Friendly\n', ' * Fees balanced for capital preservation for long term HODLERS\n', ' * Active depositors rewarded with P4RTY tokens; sellers forgiveness, just 5%\n', ' * 50% of ETH value in earned P4RTY token rewards\n', ' * P4RTYRelay is notified on all dividend producing transactions\n', ' *\n', ' *\n', ' * P4\n', ' * The worry free way to earn ETH & P4RTY reward tokens\n', ' *\n', ' * -> What?\n', ' * The first true Virtual Deposit Contract:\n', ' * [✓] Pegged to ETH, P4 protects your ETH balance; .001 ETH per P4 token\n', ' * [✓] The only VDC that is part of the P4RTY Entertainment Network\n', ' * [✓] Earn ERC20 P4RTY tokens on all ETH deposit activities; send them to family and friends\n', ' * [✓] Referrals permanently saved in contract; reliable income for supporters, at any scale\n', ' * [✓] 15% dividends for token purchase, shared among all token holders.\n', ' * [✓] 5% dividends for token selling, shared among all token holders.\n', ' * [✓] 1% dividends for token transfer, shared among all token holders.\n', ' * [✓] 4.5% of deposit on referrals.\n', ' * [✓] 3% of deposit for maintenance fee on deposits for development, operations, and promotion\n', ' * [✓] 100 tokens to activate referral links; .1 ETH\n', '*/\n', '\n', 'contract P4 is Whitelist {\n', '\n', '\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '    /// @dev Only people with tokens\n', '    modifier onlyTokenHolders {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only people with profits\n', '    modifier onlyDivis {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint timestamp,\n', '        uint256 price\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned,\n', '        uint timestamp,\n', '        uint256 price\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onReinvestmentProxy(\n', '        address indexed customerAddress,\n', '        address indexed destinationAddress,\n', '        uint256 ethereumReinvested\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    /// @dev 15% dividends for token purchase\n', '    uint256  internal entryFee_ = 15;\n', '\n', '    /// @dev 1% dividends for token transfer\n', '    uint256  internal transferFee_ = 1;\n', '\n', '    /// @dev 5% dividends for token selling\n', '    uint256  internal exitFee_ = 5;\n', '\n', '    /// @dev 30% of entryFee_  is given to referrer\n', '    uint256  internal referralFee_ = 30;\n', '\n', '    /// @dev 20% of entryFee/exit fee is given to maintainer\n', '    uint256  internal maintenanceFee = 20;\n', '    address  internal maintenanceAddress;\n', '\n', '    uint256 constant internal tokenRatio_ = 1000;\n', '    uint256 constant internal magnitude = 2 ** 64;\n', '\n', '    /// @dev proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '\n', '\n', '    /*=================================\n', '     =            DATASETS            =\n', '     ================================*/\n', '\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    //on chain referral tracking\n', '    mapping(address => address) public referrals;\n', '    uint256 internal tokenSupply_;\n', '    uint256 internal profitPerShare_;\n', '\n', '    P4RTYRelay public relay;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '\n', '    constructor(address relayAddress)  public {\n', '\n', '        relay = P4RTYRelay(relayAddress);\n', '\n', '        //assume caller as default\n', '        updateMaintenanceAddress(msg.sender);\n', '    }\n', '\n', '    function updateMaintenanceAddress(address maintenance) onlyOwner public {\n', '        maintenanceAddress = maintenance;\n', '    }\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buyFor(address _customerAddress, address _referredBy) onlyWhitelisted public payable returns (uint256) {\n', '        setReferral(_referredBy);\n', '        return purchaseTokens(_customerAddress, msg.value);\n', '    }\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint256) {\n', '        setReferral(_referredBy);\n', '        return purchaseTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    function setReferral(address _referredBy) internal {\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=_referredBy;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function to handle ethereum that was send straight to the contract\n', '     *  Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function() payable public {\n', '        purchaseTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    /// @dev Converts all of caller&#39;s dividends to tokens.\n', '    function reinvest() onlyDivis public {\n', '        address _customerAddress = msg.sender;\n', '\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_customerAddress, _dividends);\n', '\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    function reinvestByProxy(address _customerAddress) onlyWhitelisted public {\n', '        // fetch dividends\n', '        uint256 _dividends = dividendsOf(_customerAddress); // retrieve ref. bonus later in the code\n', '\n', '\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        ReinvestProxy reinvestProxy =  ReinvestProxy(msg.sender);\n', '        reinvestProxy.reinvestFor.value(_dividends)(_customerAddress);\n', '\n', '        emit  onReinvestmentProxy(_customerAddress, msg.sender, _dividends);\n', '\n', '\n', '    }\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() external {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() onlyDivis public {\n', '\n', '        address _customerAddress = msg.sender;\n', '        // setup data\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint256 _amountOfTokens) onlyTokenHolders public {\n', '        address _customerAddress = msg.sender;\n', '\n', '\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends,maintenanceFee),100);\n', '        //maintenance and referral come out of the exitfee\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _maintenance);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _undividedDividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '\n', '        //Apply maintenance fee as a referral\n', '        referralBalance_[maintenanceAddress] = SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', '     *  Remember, there&#39;s a 15% fee here as well.\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns (bool){\n', '\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (myDividends(true) > 0) {\n', '            withdraw();\n', '        }\n', '\n', '        // liquify a percentage of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint256) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /// @dev Retrieve the dividend balance of any single address.\n', '    function dividendsOf(address _customerAddress) public view returns (uint256) {\n', '        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function sellPrice() public view returns (uint256) {\n', '        uint256 _ethereum = tokensToEthereum_(1e18);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        return _taxedEthereum;\n', '\n', '    }\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function buyPrice() public view returns (uint256) {\n', '        uint256 _ethereum = tokensToEthereum_(1e18);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '\n', '        return _taxedEthereum;\n', '\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    /// @dev Internal function to actually purchase the tokens.\n', '    function purchaseTokens(address _customerAddress, uint256 _incomingEthereum) internal returns (uint256) {\n', '        // data setup\n', '        address _referredBy = referrals[_customerAddress];\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n', '        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends,maintenanceFee),100);\n', '        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);\n', '        //maintenance and referral come out of the buyin\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_referralBonus,_maintenance));\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '        uint256 _tokenAllocation = SafeMath.div(_incomingEthereum,2);\n', '\n', '\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n', '\n', '        //Apply maintenance fee as a referral\n', '        referralBalance_[maintenanceAddress] = SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);\n', '\n', '        // is the user referred by a masternode?\n', '        if (\n', '        // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if (tokenSupply_ > 0) {\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        // really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        //Notifying the relay is simple and should represent the total economic activity which is the _incomingEthereum\n', '        //Every player is a customer and mints their own tokens when the buy or reinvest, relay P4RTY 50/50\n', '        relay.relay(maintenanceAddress,_tokenAllocation);\n', '        relay.relay(_customerAddress,_tokenAllocation);\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate Token price based on an amount of incoming ethereum\n', '     *  It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal pure returns (uint256) {\n', '        return SafeMath.mul(_ethereum, tokenRatio_);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', '     *  It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal pure returns (uint256) {\n', '        return SafeMath.div(_tokens, tokenRatio_);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/P4RTYRelay.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Copyright Mako Labs LLC 2018 All Rights Reseerved\n', '*/\n', '\n', 'interface P4RTYRelay {\n', '    /**\n', '    * @dev Will relay to internal implementation\n', '    * @param beneficiary Token purchaser\n', '    * @param tokenAmount Number of tokens to be minted\n', '    */\n', '    function relay(address beneficiary, uint256 tokenAmount) external;\n', '}\n', '\n', '// File: contracts/ReinvestProxy.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Copyright Mako Labs LLC 2018 All Rights Reseerved\n', '*/\n', 'interface ReinvestProxy {\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller,\n', '    function reinvestFor(address customer) external payable;\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      emit WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      emit WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/P4.sol\n', '\n', '/*\n', ' * Visit: https://p4rty.io\n', ' * Discord: https://discord.gg/7y3DHYF\n', ' * Stable + DIVIS: Whale and Minow Friendly\n', ' * Fees balanced for capital preservation for long term HODLERS\n', ' * Active depositors rewarded with P4RTY tokens; sellers forgiveness, just 5%\n', ' * 50% of ETH value in earned P4RTY token rewards\n', ' * P4RTYRelay is notified on all dividend producing transactions\n', ' *\n', ' *\n', ' * P4\n', ' * The worry free way to earn ETH & P4RTY reward tokens\n', ' *\n', ' * -> What?\n', ' * The first true Virtual Deposit Contract:\n', ' * [✓] Pegged to ETH, P4 protects your ETH balance; .001 ETH per P4 token\n', ' * [✓] The only VDC that is part of the P4RTY Entertainment Network\n', ' * [✓] Earn ERC20 P4RTY tokens on all ETH deposit activities; send them to family and friends\n', ' * [✓] Referrals permanently saved in contract; reliable income for supporters, at any scale\n', ' * [✓] 15% dividends for token purchase, shared among all token holders.\n', ' * [✓] 5% dividends for token selling, shared among all token holders.\n', ' * [✓] 1% dividends for token transfer, shared among all token holders.\n', ' * [✓] 4.5% of deposit on referrals.\n', ' * [✓] 3% of deposit for maintenance fee on deposits for development, operations, and promotion\n', ' * [✓] 100 tokens to activate referral links; .1 ETH\n', '*/\n', '\n', 'contract P4 is Whitelist {\n', '\n', '\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '    /// @dev Only people with tokens\n', '    modifier onlyTokenHolders {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only people with profits\n', '    modifier onlyDivis {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint timestamp,\n', '        uint256 price\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned,\n', '        uint timestamp,\n', '        uint256 price\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onReinvestmentProxy(\n', '        address indexed customerAddress,\n', '        address indexed destinationAddress,\n', '        uint256 ethereumReinvested\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    /// @dev 15% dividends for token purchase\n', '    uint256  internal entryFee_ = 15;\n', '\n', '    /// @dev 1% dividends for token transfer\n', '    uint256  internal transferFee_ = 1;\n', '\n', '    /// @dev 5% dividends for token selling\n', '    uint256  internal exitFee_ = 5;\n', '\n', '    /// @dev 30% of entryFee_  is given to referrer\n', '    uint256  internal referralFee_ = 30;\n', '\n', '    /// @dev 20% of entryFee/exit fee is given to maintainer\n', '    uint256  internal maintenanceFee = 20;\n', '    address  internal maintenanceAddress;\n', '\n', '    uint256 constant internal tokenRatio_ = 1000;\n', '    uint256 constant internal magnitude = 2 ** 64;\n', '\n', '    /// @dev proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '\n', '\n', '    /*=================================\n', '     =            DATASETS            =\n', '     ================================*/\n', '\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    //on chain referral tracking\n', '    mapping(address => address) public referrals;\n', '    uint256 internal tokenSupply_;\n', '    uint256 internal profitPerShare_;\n', '\n', '    P4RTYRelay public relay;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '\n', '    constructor(address relayAddress)  public {\n', '\n', '        relay = P4RTYRelay(relayAddress);\n', '\n', '        //assume caller as default\n', '        updateMaintenanceAddress(msg.sender);\n', '    }\n', '\n', '    function updateMaintenanceAddress(address maintenance) onlyOwner public {\n', '        maintenanceAddress = maintenance;\n', '    }\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buyFor(address _customerAddress, address _referredBy) onlyWhitelisted public payable returns (uint256) {\n', '        setReferral(_referredBy);\n', '        return purchaseTokens(_customerAddress, msg.value);\n', '    }\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint256) {\n', '        setReferral(_referredBy);\n', '        return purchaseTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    function setReferral(address _referredBy) internal {\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=_referredBy;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function to handle ethereum that was send straight to the contract\n', '     *  Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function() payable public {\n', '        purchaseTokens(msg.sender, msg.value);\n', '    }\n', '\n', "    /// @dev Converts all of caller's dividends to tokens.\n", '    function reinvest() onlyDivis public {\n', '        address _customerAddress = msg.sender;\n', '\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_customerAddress, _dividends);\n', '\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    function reinvestByProxy(address _customerAddress) onlyWhitelisted public {\n', '        // fetch dividends\n', '        uint256 _dividends = dividendsOf(_customerAddress); // retrieve ref. bonus later in the code\n', '\n', '\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        ReinvestProxy reinvestProxy =  ReinvestProxy(msg.sender);\n', '        reinvestProxy.reinvestFor.value(_dividends)(_customerAddress);\n', '\n', '        emit  onReinvestmentProxy(_customerAddress, msg.sender, _dividends);\n', '\n', '\n', '    }\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() external {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if (_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() onlyDivis public {\n', '\n', '        address _customerAddress = msg.sender;\n', '        // setup data\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint256 _amountOfTokens) onlyTokenHolders public {\n', '        address _customerAddress = msg.sender;\n', '\n', '\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends,maintenanceFee),100);\n', '        //maintenance and referral come out of the exitfee\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _maintenance);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _undividedDividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '\n', '        //Apply maintenance fee as a referral\n', '        referralBalance_[maintenanceAddress] = SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', "     *  Remember, there's a 15% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns (bool){\n', '\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if (myDividends(true) > 0) {\n', '            withdraw();\n', '        }\n', '\n', '        // liquify a percentage of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '\n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint256) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /// @dev Retrieve the dividend balance of any single address.\n', '    function dividendsOf(address _customerAddress) public view returns (uint256) {\n', '        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function sellPrice() public view returns (uint256) {\n', '        uint256 _ethereum = tokensToEthereum_(1e18);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        return _taxedEthereum;\n', '\n', '    }\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function buyPrice() public view returns (uint256) {\n', '        uint256 _ethereum = tokensToEthereum_(1e18);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '\n', '        return _taxedEthereum;\n', '\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    /// @dev Internal function to actually purchase the tokens.\n', '    function purchaseTokens(address _customerAddress, uint256 _incomingEthereum) internal returns (uint256) {\n', '        // data setup\n', '        address _referredBy = referrals[_customerAddress];\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n', '        uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends,maintenanceFee),100);\n', '        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);\n', '        //maintenance and referral come out of the buyin\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_referralBonus,_maintenance));\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '        uint256 _tokenAllocation = SafeMath.div(_incomingEthereum,2);\n', '\n', '\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n', '\n', '        //Apply maintenance fee as a referral\n', '        referralBalance_[maintenanceAddress] = SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);\n', '\n', '        // is the user referred by a masternode?\n', '        if (\n', '        // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ) {\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', "        // we can't give people infinite ethereum\n", '        if (tokenSupply_ > 0) {\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        // really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        //Notifying the relay is simple and should represent the total economic activity which is the _incomingEthereum\n', '        //Every player is a customer and mints their own tokens when the buy or reinvest, relay P4RTY 50/50\n', '        relay.relay(maintenanceAddress,_tokenAllocation);\n', '        relay.relay(_customerAddress,_tokenAllocation);\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate Token price based on an amount of incoming ethereum\n', "     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal pure returns (uint256) {\n', '        return SafeMath.mul(_ethereum, tokenRatio_);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', "     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal pure returns (uint256) {\n', '        return SafeMath.div(_tokens, tokenRatio_);\n', '    }\n', '\n', '}']
