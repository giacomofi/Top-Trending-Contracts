['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AsetToken is ERC20 {\n', '\n', '}\n', '\n', 'contract AsetSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    AsetToken public token;\n', '\n', '    uint256 public price;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public totalRice = 0;\n', '    uint256 public totalTokenRice = 0;\n', '\n', '    function AsetSale() public {\n', '        // default price: 1 ETH = 1300 ASET\n', '        // ~$0.60\n', '        price = 1300;\n', '        // default: wallet = owner\n', '        wallet = msg.sender;\n', '    }\n', '\n', '    function setToken(AsetToken _token) public onlyOwner {\n', '        token = _token;\n', '    }\n', '\n', '    function tokensToSale() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    function setPrice(uint256 _price) public onlyOwner {\n', '        price = _price;\n', '    }\n', '\n', '    function setWallet(address _wallet) public onlyOwner {\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function withdrawTokens() public onlyOwner {\n', '        require(address(token) != address(0));\n', '        require(tokensToSale() > 0);\n', '        token.transfer(wallet, tokensToSale());\n', '    }\n', '\n', '\n', '    function() public payable {\n', '        require(msg.value > 0);\n', '        require(address(token) != address(0));\n', '        require(tokensToSale() > 0);\n', '\n', '        uint256 tokensWei = msg.value.mul(price);\n', '        tokensWei = withBonus(tokensWei);\n', '        token.transfer(msg.sender, tokensWei);\n', '        wallet.transfer(msg.value);\n', '        totalRice = totalRice.add(msg.value);\n', '        totalTokenRice = totalTokenRice.add(tokensWei);\n', '    }\n', '\n', '    function sendToken(address _to, uint256 tokensWei)public onlyOwner{\n', '        require(address(token) != address(0));\n', '        require(tokensToSale() > 0);\n', '\n', '        uint256 amountWei = tokensWei.div(price);\n', '        token.transfer(_to, tokensWei);\n', '        totalRice = totalRice.add(amountWei);\n', '        totalTokenRice = totalTokenRice.add(tokensWei);\n', '    }\n', '\n', '    function withBonus(uint256 _amount) internal pure returns(uint256) {\n', '        if(_amount <= 500 ether) return _amount;\n', '        else if(_amount <= 1000 ether) return _amount.mul(105).div(100);\n', '        else if(_amount <= 2000 ether) return _amount.mul(107).div(100);\n', '        else if(_amount <= 5000 ether) return _amount.mul(110).div(100);\n', '        else if(_amount <= 10000 ether) return _amount.mul(115).div(100);\n', '        else return _amount.mul(120).div(100);\n', '    }\n', '}']