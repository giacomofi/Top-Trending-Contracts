['pragma solidity ^0.4.18;\n', '\n', '// SATURN strategic exchange program\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract SaturnPresale is ContractReceiver {\n', '  using SafeMath for uint256;\n', '\n', '  bool    public active = false;\n', '  address public tokenAddress;\n', '  uint256 public hardCap;\n', '  uint256 public sold;\n', '\n', '  struct Order {\n', '    address owner;\n', '    uint256 amount;\n', '    uint256 lockup;\n', '    bool    claimed;\n', '  }\n', '\n', '  mapping(uint256 => Order) private orders;\n', '  uint256 private latestOrderId = 0;\n', '  address private owner;\n', '  address private treasury;\n', '\n', '  event Activated(uint256 time);\n', '  event Finished(uint256 time);\n', '  event Purchase(address indexed purchaser, uint256 id, uint256 amount, uint256 purchasedAt, uint256 redeemAt);\n', '  event Claim(address indexed purchaser, uint256 id, uint256 amount);\n', '\n', '  function SaturnPresale(address token, address ethRecepient, uint256 presaleHardCap) public {\n', '    tokenAddress  = token;\n', '    owner         = msg.sender;\n', '    treasury      = ethRecepient;\n', '    hardCap       = presaleHardCap;\n', '  }\n', '\n', '  function tokenFallback(address /* _from */, uint _value, bytes /* _data */) public {\n', '    // Accept only SATURN ERC223 token\n', '    if (msg.sender != tokenAddress) { revert(); }\n', '    // If the Presale is active do not accept incoming transactions\n', '    if (active) { revert(); }\n', '    // Only accept one transaction of the right amount\n', '    if (_value != hardCap) { revert(); }\n', '\n', '    active = true;\n', '    Activated(now);\n', '  }\n', '\n', '  function amountOf(uint256 orderId) constant public returns (uint256 amount) {\n', '    return orders[orderId].amount;\n', '  }\n', '\n', '  function lockupOf(uint256 orderId) constant public returns (uint256 timestamp) {\n', '    return orders[orderId].lockup;\n', '  }\n', '\n', '  function ownerOf(uint256 orderId) constant public returns (address orderOwner) {\n', '    return orders[orderId].owner;\n', '  }\n', '\n', '  function isClaimed(uint256 orderId) constant public returns (bool claimed) {\n', '    return orders[orderId].claimed;\n', '  }\n', '\n', '  function () external payable {\n', '    revert();\n', '  }\n', '\n', '  function shortBuy() public payable {\n', '    // 10% bonus\n', '    uint256 lockup = now + 12 weeks;\n', '    uint256 priceDiv = 1818181818;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function mediumBuy() public payable {\n', '    // 25% bonus\n', '    uint256 lockup = now + 24 weeks;\n', '    uint256 priceDiv = 1600000000;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function longBuy() public payable {\n', '    // 50% bonus\n', '    uint256 lockup = now + 52 weeks;\n', '    uint256 priceDiv = 1333333333;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function processPurchase(uint256 priceDiv, uint256 lockup) private {\n', '    if (!active) { revert(); }\n', '    if (msg.value == 0) { revert(); }\n', '    ++latestOrderId;\n', '\n', '    uint256 purchasedAmount = msg.value.div(priceDiv);\n', '    if (purchasedAmount == 0) { revert(); } // not enough ETH sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much ETH sent\n', '\n', '    orders[latestOrderId] = Order(msg.sender, purchasedAmount, lockup, false);\n', '    sold += purchasedAmount;\n', '\n', '    treasury.transfer(msg.value);\n', '    Purchase(msg.sender, latestOrderId, purchasedAmount, now, lockup);\n', '  }\n', '\n', '  function redeem(uint256 orderId) public {\n', '    if (orderId > latestOrderId) { revert(); }\n', '    Order storage order = orders[orderId];\n', '\n', '    // only owner can withdraw\n', '    if (msg.sender != order.owner) { revert(); }\n', '    if (now < order.lockup) { revert(); }\n', '    if (order.claimed) { revert(); }\n', '    order.claimed = true;\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(order.owner, order.amount);\n', '\n', '    Claim(order.owner, orderId, order.amount);\n', '  }\n', '\n', '  function endPresale() public {\n', '    // only the creator of the smart contract\n', '    // can end the crowdsale prematurely\n', '    if (msg.sender != owner) { revert(); }\n', '    // can only stop an active crowdsale\n', '    if (!active) { revert(); }\n', '    _end();\n', '  }\n', '\n', '  function _end() private {\n', '    // if there are any tokens remaining - return them to the owner\n', '    if (sold < hardCap) {\n', '      ERC223 token = ERC223(tokenAddress);\n', '      token.transfer(treasury, hardCap.sub(sold));\n', '    }\n', '    active = false;\n', '    Finished(now);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// SATURN strategic exchange program\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract SaturnPresale is ContractReceiver {\n', '  using SafeMath for uint256;\n', '\n', '  bool    public active = false;\n', '  address public tokenAddress;\n', '  uint256 public hardCap;\n', '  uint256 public sold;\n', '\n', '  struct Order {\n', '    address owner;\n', '    uint256 amount;\n', '    uint256 lockup;\n', '    bool    claimed;\n', '  }\n', '\n', '  mapping(uint256 => Order) private orders;\n', '  uint256 private latestOrderId = 0;\n', '  address private owner;\n', '  address private treasury;\n', '\n', '  event Activated(uint256 time);\n', '  event Finished(uint256 time);\n', '  event Purchase(address indexed purchaser, uint256 id, uint256 amount, uint256 purchasedAt, uint256 redeemAt);\n', '  event Claim(address indexed purchaser, uint256 id, uint256 amount);\n', '\n', '  function SaturnPresale(address token, address ethRecepient, uint256 presaleHardCap) public {\n', '    tokenAddress  = token;\n', '    owner         = msg.sender;\n', '    treasury      = ethRecepient;\n', '    hardCap       = presaleHardCap;\n', '  }\n', '\n', '  function tokenFallback(address /* _from */, uint _value, bytes /* _data */) public {\n', '    // Accept only SATURN ERC223 token\n', '    if (msg.sender != tokenAddress) { revert(); }\n', '    // If the Presale is active do not accept incoming transactions\n', '    if (active) { revert(); }\n', '    // Only accept one transaction of the right amount\n', '    if (_value != hardCap) { revert(); }\n', '\n', '    active = true;\n', '    Activated(now);\n', '  }\n', '\n', '  function amountOf(uint256 orderId) constant public returns (uint256 amount) {\n', '    return orders[orderId].amount;\n', '  }\n', '\n', '  function lockupOf(uint256 orderId) constant public returns (uint256 timestamp) {\n', '    return orders[orderId].lockup;\n', '  }\n', '\n', '  function ownerOf(uint256 orderId) constant public returns (address orderOwner) {\n', '    return orders[orderId].owner;\n', '  }\n', '\n', '  function isClaimed(uint256 orderId) constant public returns (bool claimed) {\n', '    return orders[orderId].claimed;\n', '  }\n', '\n', '  function () external payable {\n', '    revert();\n', '  }\n', '\n', '  function shortBuy() public payable {\n', '    // 10% bonus\n', '    uint256 lockup = now + 12 weeks;\n', '    uint256 priceDiv = 1818181818;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function mediumBuy() public payable {\n', '    // 25% bonus\n', '    uint256 lockup = now + 24 weeks;\n', '    uint256 priceDiv = 1600000000;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function longBuy() public payable {\n', '    // 50% bonus\n', '    uint256 lockup = now + 52 weeks;\n', '    uint256 priceDiv = 1333333333;\n', '    processPurchase(priceDiv, lockup);\n', '  }\n', '\n', '  function processPurchase(uint256 priceDiv, uint256 lockup) private {\n', '    if (!active) { revert(); }\n', '    if (msg.value == 0) { revert(); }\n', '    ++latestOrderId;\n', '\n', '    uint256 purchasedAmount = msg.value.div(priceDiv);\n', '    if (purchasedAmount == 0) { revert(); } // not enough ETH sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much ETH sent\n', '\n', '    orders[latestOrderId] = Order(msg.sender, purchasedAmount, lockup, false);\n', '    sold += purchasedAmount;\n', '\n', '    treasury.transfer(msg.value);\n', '    Purchase(msg.sender, latestOrderId, purchasedAmount, now, lockup);\n', '  }\n', '\n', '  function redeem(uint256 orderId) public {\n', '    if (orderId > latestOrderId) { revert(); }\n', '    Order storage order = orders[orderId];\n', '\n', '    // only owner can withdraw\n', '    if (msg.sender != order.owner) { revert(); }\n', '    if (now < order.lockup) { revert(); }\n', '    if (order.claimed) { revert(); }\n', '    order.claimed = true;\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(order.owner, order.amount);\n', '\n', '    Claim(order.owner, orderId, order.amount);\n', '  }\n', '\n', '  function endPresale() public {\n', '    // only the creator of the smart contract\n', '    // can end the crowdsale prematurely\n', '    if (msg.sender != owner) { revert(); }\n', '    // can only stop an active crowdsale\n', '    if (!active) { revert(); }\n', '    _end();\n', '  }\n', '\n', '  function _end() private {\n', '    // if there are any tokens remaining - return them to the owner\n', '    if (sold < hardCap) {\n', '      ERC223 token = ERC223(tokenAddress);\n', '      token.transfer(treasury, hardCap.sub(sold));\n', '    }\n', '    active = false;\n', '    Finished(now);\n', '  }\n', '}']
