['pragma solidity ^0.4.24;\n', '\n', 'interface HourglassInterface {\n', '    function buy(address _referredBy) payable external returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function withdraw() external;\n', '}\n', '\n', 'contract TakeoutController {\n', '    address owner;\n', '    address takeoutWallet;\n', '    HourglassInterface private Hourglass;\n', '    \n', '    constructor() public {\n', '        Hourglass = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '        takeoutWallet = 0xf783A81F046448c38f3c863885D9e99D10209779;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(owner == msg.sender, "Access Denied!");\n', '        _;\n', '    }\n', '    \n', '    function buyTokens() external payable{\n', '        Hourglass.buy.value(msg.value)(takeoutWallet);\n', '    }\n', '    \n', '    function () external payable {\n', '    }\n', '    \n', '    function transferTokens() external onlyOwner {\n', '        uint256 _amountOfTokens = getBalance();\n', '        Hourglass.transfer(takeoutWallet, _amountOfTokens);\n', '    }\n', '    \n', '    function getBalance() public view returns (uint256 amountOfTokens) {\n', '        amountOfTokens = Hourglass.balanceOf(address(this));\n', '    }\n', '    \n', '    function withdrawDividends() external onlyOwner {\n', '        Hourglass.withdraw();\n', '    }\n', '    \n', '    function sellTokens() external onlyOwner {\n', '        uint256 _amountOfTokens = getBalance();\n', '        Hourglass.sell(_amountOfTokens);\n', '    }\n', '    \n', '    function extractFund(uint256 _amount) external onlyOwner {\n', '        if (_amount == 0) {\n', '            takeoutWallet.transfer(address(this).balance);\n', '        } else {\n', '            require(_amount <= address(this).balance);\n', '            takeoutWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function changeTakeoutWallet(address _newTakeoutWallet) external onlyOwner {\n', '        takeoutWallet = _newTakeoutWallet;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface HourglassInterface {\n', '    function buy(address _referredBy) payable external returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function withdraw() external;\n', '}\n', '\n', 'contract TakeoutController {\n', '    address owner;\n', '    address takeoutWallet;\n', '    HourglassInterface private Hourglass;\n', '    \n', '    constructor() public {\n', '        Hourglass = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n', '        takeoutWallet = 0xf783A81F046448c38f3c863885D9e99D10209779;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(owner == msg.sender, "Access Denied!");\n', '        _;\n', '    }\n', '    \n', '    function buyTokens() external payable{\n', '        Hourglass.buy.value(msg.value)(takeoutWallet);\n', '    }\n', '    \n', '    function () external payable {\n', '    }\n', '    \n', '    function transferTokens() external onlyOwner {\n', '        uint256 _amountOfTokens = getBalance();\n', '        Hourglass.transfer(takeoutWallet, _amountOfTokens);\n', '    }\n', '    \n', '    function getBalance() public view returns (uint256 amountOfTokens) {\n', '        amountOfTokens = Hourglass.balanceOf(address(this));\n', '    }\n', '    \n', '    function withdrawDividends() external onlyOwner {\n', '        Hourglass.withdraw();\n', '    }\n', '    \n', '    function sellTokens() external onlyOwner {\n', '        uint256 _amountOfTokens = getBalance();\n', '        Hourglass.sell(_amountOfTokens);\n', '    }\n', '    \n', '    function extractFund(uint256 _amount) external onlyOwner {\n', '        if (_amount == 0) {\n', '            takeoutWallet.transfer(address(this).balance);\n', '        } else {\n', '            require(_amount <= address(this).balance);\n', '            takeoutWallet.transfer(_amount);\n', '        }\n', '    }\n', '    \n', '    function changeTakeoutWallet(address _newTakeoutWallet) external onlyOwner {\n', '        takeoutWallet = _newTakeoutWallet;\n', '    }\n', '}']
