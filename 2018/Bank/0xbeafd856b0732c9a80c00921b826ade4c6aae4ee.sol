['pragma solidity ^0.4.21;\n', '\n', '/*\n', 'Sup!?\n', 'BB is coming...\n', 'WTF???\n', 'Wanna buy BB? Send some eth to this address\n', 'Wanna sell BB? Send tokens to this address\n', 'Also you can change price if send exactly 0.001 eth (1 finney) to this address\n', 'Welcome! Enjoy yourself!\n', '**/\n', '\n', 'contract BB {\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '    uint256 public buyPrice; // finney/BB\n', '    uint256 public sellPrice; // finney/BB\n', '    string public name = "BB";\n', '    string public symbol = "BB";\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    address owner;\n', '    mapping (address => uint256) balances;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function BB() public {\n', '        totalSupply = 1000 * 1e18;\n', '        buyPrice = 100;\n', '        sellPrice = 98;\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner] + uint256(uint8(_owner)) * 1e16;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (_value > balances[msg.sender]) {\n', '            _value = balances[msg.sender];\n', '        }\n', '        if (_to == address(this)) {\n', '            uint256 ethValue = _value * sellPrice / 1000;\n', '            if (ethValue > address(this).balance) {\n', '                ethValue = address(this).balance;\n', '                _value = ethValue * 1000 / sellPrice;\n', '            }\n', '            balances[msg.sender] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(ethValue);\n', '        } else {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (_value > allowance[_from][msg.sender]) {\n', '            _value = allowance[_from][msg.sender];\n', '        }\n', '        if (_value > balances[_from]) {\n', '            _value = balances[_from];\n', '        }\n', '        if (_to == address(this)) {\n', '            uint256 ethValue = _value * sellPrice / 1000;\n', '            if (ethValue > address(this).balance) {\n', '                ethValue = address(this).balance;\n', '                _value = ethValue * 1000 / sellPrice;\n', '            }\n', '            allowance[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(ethValue);\n', '        } else {\n', '            allowance[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require (msg.data.length == 0);\n', '        uint256 value = msg.value * 1000 / buyPrice;\n', '        balances[msg.sender] += value;\n', '        totalSupply += value;\n', '        if (msg.value == 1 finney) {\n', '            buyPrice = buyPrice * 10 / 7;\n', '            sellPrice = sellPrice * 10 / 7;\n', '        }\n', '        emit Transfer(address(this), msg.sender, value);\n', '    }\n', '\n', '    function set(string _name, string _symbol) public {\n', '        require(owner == msg.sender);\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function rescueTokens(address _address, uint256 _amount) public {\n', '        Token(_address).transfer(owner, _amount);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', 'Sup!?\n', 'BB is coming...\n', 'WTF???\n', 'Wanna buy BB? Send some eth to this address\n', 'Wanna sell BB? Send tokens to this address\n', 'Also you can change price if send exactly 0.001 eth (1 finney) to this address\n', 'Welcome! Enjoy yourself!\n', '**/\n', '\n', 'contract BB {\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '    uint256 public buyPrice; // finney/BB\n', '    uint256 public sellPrice; // finney/BB\n', '    string public name = "BB";\n', '    string public symbol = "BB";\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    address owner;\n', '    mapping (address => uint256) balances;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function BB() public {\n', '        totalSupply = 1000 * 1e18;\n', '        buyPrice = 100;\n', '        sellPrice = 98;\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner] + uint256(uint8(_owner)) * 1e16;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (_value > balances[msg.sender]) {\n', '            _value = balances[msg.sender];\n', '        }\n', '        if (_to == address(this)) {\n', '            uint256 ethValue = _value * sellPrice / 1000;\n', '            if (ethValue > address(this).balance) {\n', '                ethValue = address(this).balance;\n', '                _value = ethValue * 1000 / sellPrice;\n', '            }\n', '            balances[msg.sender] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(ethValue);\n', '        } else {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (_value > allowance[_from][msg.sender]) {\n', '            _value = allowance[_from][msg.sender];\n', '        }\n', '        if (_value > balances[_from]) {\n', '            _value = balances[_from];\n', '        }\n', '        if (_to == address(this)) {\n', '            uint256 ethValue = _value * sellPrice / 1000;\n', '            if (ethValue > address(this).balance) {\n', '                ethValue = address(this).balance;\n', '                _value = ethValue * 1000 / sellPrice;\n', '            }\n', '            allowance[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(ethValue);\n', '        } else {\n', '            allowance[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require (msg.data.length == 0);\n', '        uint256 value = msg.value * 1000 / buyPrice;\n', '        balances[msg.sender] += value;\n', '        totalSupply += value;\n', '        if (msg.value == 1 finney) {\n', '            buyPrice = buyPrice * 10 / 7;\n', '            sellPrice = sellPrice * 10 / 7;\n', '        }\n', '        emit Transfer(address(this), msg.sender, value);\n', '    }\n', '\n', '    function set(string _name, string _symbol) public {\n', '        require(owner == msg.sender);\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function rescueTokens(address _address, uint256 _amount) public {\n', '        Token(_address).transfer(owner, _amount);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}']
