['pragma solidity ^0.4.16;\n', '\n', 'contract IPGToken {\n', '    string public name = "IPGToken";      //  token name\n', '    string public symbol = "IPG";           //  token symbol\n', '    string public version = "1.0";\n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    mapping (uint256 => address) public games;\n', '    uint256 public gameCount = 0;\n', '\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = true;\n', '\n', '    uint256 public sellPrice = 2107170701898561;\n', '    uint256 public buyPrice = 2107170701898561;\n', '    //00000000\n', '    uint256 constant valueFounder = 10000000000000;\n', '    address owner = 0x0b1Bd7B954517f1C1429709D4856B19f1E8aa176;\n', '    address dev = 0x815dE3E00Be485DBCA2A2ADf40f945a8E0343b29;\n', '\n', '\n', '    modifier isDev {\n', '        assert(dev == msg.sender);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        totalSupply = valueFounder;\n', '        balanceOf[owner] = valueFounder;\n', '        gameCount = 0;\n', '        emit Transfer(0x0, owner, valueFounder);\n', '    }\n', '\n', '    function changeOwner(address _newaddress) isOwner public {\n', '        owner = _newaddress;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) isOwner public {\n', '      balanceOf[target] += mintedAmount;\n', '      totalSupply += mintedAmount;\n', '      emit Transfer(0, this, mintedAmount);\n', '      emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) isOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function buy() public payable returns (uint amount){\n', '        amount = msg.value / buyPrice;                    // calculates the amount\n', '        require(balanceOf[owner] >= amount);               // checks if it has enough to sell\n', '        balanceOf[msg.sender] += amount;                  // adds the amount to buyer&#39;s balance\n', '        balanceOf[owner] -= amount;                        // subtracts amount from seller&#39;s balance\n', '        emit Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '\n', '    function sell(uint amount) public isRunning validAddress returns (uint revenue){\n', '        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n', '        balanceOf[owner] += amount;                        // adds the amount to owner&#39;s balance\n', '        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller&#39;s balance\n', '        revenue = amount * sellPrice;\n', '        msg.sender.transfer(revenue);                     // sends ether to the seller: it&#39;s important to do this last to prevent recursion attacks\n', '        emit Transfer(msg.sender, owner, amount);               // executes an event reflecting on the change\n', '        return revenue;                                   // ends function and returns\n', '    }\n', '\n', '\n', '    function GetBuyPrice() public view returns (uint) {\n', '      return buyPrice;\n', '    }\n', '\n', '    function GetSellPrice() public view returns (uint) {\n', '      return sellPrice;\n', '    }\n', '\n', '    function addGame(address _game) isDev public {\n', '        games[gameCount] = _game;\n', '        gameCount++;\n', '    }\n', '\n', '    function changeGame(address _game, uint256 _index) isDev public {\n', '       games[_index] = _game;\n', '    }\n', '\n', '    function transferInGame (address _from, address _to, uint256 _value) public returns (bool success) {\n', '        bool is_allowed = false;\n', '        for (uint256 i = 0; i < gameCount; i++){\n', '            if (games[i] == msg.sender){\n', '                is_allowed = true;\n', '            }\n', '        }\n', '        require(is_allowed == true);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']