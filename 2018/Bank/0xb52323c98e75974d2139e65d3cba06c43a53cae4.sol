['pragma solidity ^0.4.24;\n', '\n', 'contract MultiEthSender {\n', '    \n', '    event Send(uint256 _amount, address indexed _receiver);\n', '    \n', '    constructor() payable public {\n', '        \n', '    }\n', '    \n', '    function multiSendEth(uint256 amount, address[] list) public payable returns (bool) {\n', '        uint balanceBeforeTransfer = address(this).balance;\n', '        \n', '        for(uint i=0;i<list.length;i++){\n', '            list[i].transfer(amount);\n', '            emit Send(amount, list[i]);\n', '        }\n', '        assert(address(this).balance == balanceBeforeTransfer - amount*list.length);\n', '        return true;\n', '    }\n', '    \n', '    function getBalance() constant public returns(uint){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function() public payable{\n', '        \n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract MultiEthSender {\n', '    \n', '    event Send(uint256 _amount, address indexed _receiver);\n', '    \n', '    constructor() payable public {\n', '        \n', '    }\n', '    \n', '    function multiSendEth(uint256 amount, address[] list) public payable returns (bool) {\n', '        uint balanceBeforeTransfer = address(this).balance;\n', '        \n', '        for(uint i=0;i<list.length;i++){\n', '            list[i].transfer(amount);\n', '            emit Send(amount, list[i]);\n', '        }\n', '        assert(address(this).balance == balanceBeforeTransfer - amount*list.length);\n', '        return true;\n', '    }\n', '    \n', '    function getBalance() constant public returns(uint){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function() public payable{\n', '        \n', '    }\n', '    \n', '}']
