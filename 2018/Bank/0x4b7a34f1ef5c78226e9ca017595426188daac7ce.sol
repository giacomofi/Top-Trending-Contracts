['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ds-auth/auth.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/AssetPriceOracle.sol\n', '\n', 'contract AssetPriceOracle is DSAuth {\n', '    // Maximum value expressible with uint128 is 340282366920938463463374607431768211456.\n', '    // Using 18 decimals for price records (standard Ether precision), \n', '    // the possible values are between 0 and 340282366920938463463.374607431768211456.\n', '\n', '    struct AssetPriceRecord {\n', '        uint128 price;\n', '        bool isRecord;\n', '    }\n', '\n', '    mapping(uint128 => mapping(uint128 => AssetPriceRecord)) public assetPriceRecords;\n', '\n', '    event AssetPriceRecorded(\n', '        uint128 indexed assetId,\n', '        uint128 indexed blockNumber,\n', '        uint128 indexed price\n', '    );\n', '\n', '    constructor() public {\n', '    }\n', '    \n', '    function recordAssetPrice(uint128 assetId, uint128 blockNumber, uint128 price) public auth {\n', '        assetPriceRecords[assetId][blockNumber].price = price;\n', '        assetPriceRecords[assetId][blockNumber].isRecord = true;\n', '        emit AssetPriceRecorded(assetId, blockNumber, price);\n', '    }\n', '\n', '    function getAssetPrice(uint128 assetId, uint128 blockNumber) public view returns (uint128 price) {\n', '        AssetPriceRecord storage priceRecord = assetPriceRecords[assetId][blockNumber];\n', '        require(priceRecord.isRecord);\n', '        return priceRecord.price;\n', '    }\n', '\n', '    function () public {\n', '        // dont receive ether via fallback method (by not having &#39;payable&#39; modifier on this function).\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ds-auth/auth.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/AssetPriceOracle.sol\n', '\n', 'contract AssetPriceOracle is DSAuth {\n', '    // Maximum value expressible with uint128 is 340282366920938463463374607431768211456.\n', '    // Using 18 decimals for price records (standard Ether precision), \n', '    // the possible values are between 0 and 340282366920938463463.374607431768211456.\n', '\n', '    struct AssetPriceRecord {\n', '        uint128 price;\n', '        bool isRecord;\n', '    }\n', '\n', '    mapping(uint128 => mapping(uint128 => AssetPriceRecord)) public assetPriceRecords;\n', '\n', '    event AssetPriceRecorded(\n', '        uint128 indexed assetId,\n', '        uint128 indexed blockNumber,\n', '        uint128 indexed price\n', '    );\n', '\n', '    constructor() public {\n', '    }\n', '    \n', '    function recordAssetPrice(uint128 assetId, uint128 blockNumber, uint128 price) public auth {\n', '        assetPriceRecords[assetId][blockNumber].price = price;\n', '        assetPriceRecords[assetId][blockNumber].isRecord = true;\n', '        emit AssetPriceRecorded(assetId, blockNumber, price);\n', '    }\n', '\n', '    function getAssetPrice(uint128 assetId, uint128 blockNumber) public view returns (uint128 price) {\n', '        AssetPriceRecord storage priceRecord = assetPriceRecords[assetId][blockNumber];\n', '        require(priceRecord.isRecord);\n', '        return priceRecord.price;\n', '    }\n', '\n', '    function () public {\n', "        // dont receive ether via fallback method (by not having 'payable' modifier on this function).\n", '    }\n', '}']
