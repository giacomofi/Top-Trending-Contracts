['pragma solidity ^0.4.11;\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract PirateNinjaCoin {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    \n', '    address profit;\n', '    uint256 public buyPrice;\n', '    uint256 public sellPrice;\n', '    uint256 flame;\n', '    uint256 maxBuyPrice;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function PirateNinjaCoin(\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        uint256 initPrice,\n', '        uint256 finalPrice\n', '        ) {\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        \n', '        buyPrice = initPrice;\n', '        profit = msg.sender;\n', '        maxBuyPrice = finalPrice;\n', '        \n', '        flame = 60000;                                      //set the initial flame to 50%\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        profit.transfer(((_value * (110000 - flame) / 100000) ) * sellPrice);\n', '        setSellPrice();\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        profit.transfer((_value * (110000 - flame) / 100000) * sellPrice); \n', '        setSellPrice();\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /* start of pirateNinjaCoin specific function */\n', '    event NewSellPrice(uint256 value);\n', '    event NewBuyPrice(uint256 value);\n', '    \n', '    function setSellPrice(){\n', '        if(totalSupply > 0){\n', '            sellPrice = this.balance / totalSupply;\n', '            if(buyPrice == maxBuyPrice && sellPrice > buyPrice) sellPrice = buyPrice;\n', '            if(sellPrice > buyPrice) sellPrice = buyPrice * 99984 / 100000;\n', '            NewSellPrice(sellPrice);\n', '        }\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == profit);\n', '        _;\n', '    }\n', '    \n', '    function adjustFlame(uint256 _flame) onlyOwner{\n', '        flame = _flame;\n', '    }\n', '\n', '    function buy() payable {\n', '        uint256 fee = (msg.value * 42 / 100000);\n', '        if(msg.value < (buyPrice + fee)) throw; //check if enough ether was send\n', '        uint256 amount = (msg.value - fee) / buyPrice;\n', '        \n', '        if (totalSupply + amount < totalSupply) throw; //check for overflows\n', '        if (balanceOf[msg.sender] + amount < balanceOf[msg.sender]) throw; //check for overflows\n', '        balanceOf[msg.sender] += amount;\n', '        \n', '        profit.transfer(fee);\n', '        msg.sender.transfer(msg.value - fee - (amount * buyPrice)); //send back ethers left\n', '        \n', '        totalSupply += amount; \n', '        \n', '        if(buyPrice < maxBuyPrice){\n', '            buyPrice = buyPrice * 100015 / 100000;\n', '            if(buyPrice > maxBuyPrice) buyPrice = maxBuyPrice;\n', '            NewBuyPrice(buyPrice);\n', '        }\n', '        \n', '        setSellPrice();\n', '    }\n', '\n', '    function sell(uint256 _amount) {\n', '        if (balanceOf[msg.sender] < _amount) throw;    \n', '       \n', '        uint256 ethAmount = sellPrice * _amount;\n', '        uint256 fee = (ethAmount * 42 / 100000);\n', '        profit.transfer(fee);\n', '        msg.sender.transfer(ethAmount - fee);\n', '        balanceOf[msg.sender] -= _amount;\n', '        totalSupply -= _amount; \n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract PirateNinjaCoin {\n', '    /* Public variables of the token */\n', "    string public standard = 'Token 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    \n', '    address profit;\n', '    uint256 public buyPrice;\n', '    uint256 public sellPrice;\n', '    uint256 flame;\n', '    uint256 maxBuyPrice;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function PirateNinjaCoin(\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        uint256 initPrice,\n', '        uint256 finalPrice\n', '        ) {\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        \n', '        buyPrice = initPrice;\n', '        profit = msg.sender;\n', '        maxBuyPrice = finalPrice;\n', '        \n', '        flame = 60000;                                      //set the initial flame to 50%\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        profit.transfer(((_value * (110000 - flame) / 100000) ) * sellPrice);\n', '        setSellPrice();\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        profit.transfer((_value * (110000 - flame) / 100000) * sellPrice); \n', '        setSellPrice();\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /* start of pirateNinjaCoin specific function */\n', '    event NewSellPrice(uint256 value);\n', '    event NewBuyPrice(uint256 value);\n', '    \n', '    function setSellPrice(){\n', '        if(totalSupply > 0){\n', '            sellPrice = this.balance / totalSupply;\n', '            if(buyPrice == maxBuyPrice && sellPrice > buyPrice) sellPrice = buyPrice;\n', '            if(sellPrice > buyPrice) sellPrice = buyPrice * 99984 / 100000;\n', '            NewSellPrice(sellPrice);\n', '        }\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == profit);\n', '        _;\n', '    }\n', '    \n', '    function adjustFlame(uint256 _flame) onlyOwner{\n', '        flame = _flame;\n', '    }\n', '\n', '    function buy() payable {\n', '        uint256 fee = (msg.value * 42 / 100000);\n', '        if(msg.value < (buyPrice + fee)) throw; //check if enough ether was send\n', '        uint256 amount = (msg.value - fee) / buyPrice;\n', '        \n', '        if (totalSupply + amount < totalSupply) throw; //check for overflows\n', '        if (balanceOf[msg.sender] + amount < balanceOf[msg.sender]) throw; //check for overflows\n', '        balanceOf[msg.sender] += amount;\n', '        \n', '        profit.transfer(fee);\n', '        msg.sender.transfer(msg.value - fee - (amount * buyPrice)); //send back ethers left\n', '        \n', '        totalSupply += amount; \n', '        \n', '        if(buyPrice < maxBuyPrice){\n', '            buyPrice = buyPrice * 100015 / 100000;\n', '            if(buyPrice > maxBuyPrice) buyPrice = maxBuyPrice;\n', '            NewBuyPrice(buyPrice);\n', '        }\n', '        \n', '        setSellPrice();\n', '    }\n', '\n', '    function sell(uint256 _amount) {\n', '        if (balanceOf[msg.sender] < _amount) throw;    \n', '       \n', '        uint256 ethAmount = sellPrice * _amount;\n', '        uint256 fee = (ethAmount * 42 / 100000);\n', '        profit.transfer(fee);\n', '        msg.sender.transfer(ethAmount - fee);\n', '        balanceOf[msg.sender] -= _amount;\n', '        totalSupply -= _amount; \n', '    }\n', '\n', '}']
