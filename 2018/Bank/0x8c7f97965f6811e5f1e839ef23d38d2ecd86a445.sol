['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', 'contract CrabFarm {\n', '    uint256 public EGGS_TO_HATCH_1CRAB = 43200; // every 12 hours\n', '    \n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    \n', '    bool public initialized = false;\n', '    \n', '    address public ceoAddress;\n', '    \n', '    mapping (address => uint256) public hatchery;\n', '    mapping (address => uint256) public claimedEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    \n', '    uint256 public marketEggs;\n', '    \n', '    event Buy(address _from, uint256 _eggs);\n', '    event Sell(address _from, uint256 _eggs);\n', '    event Hatch(address _from, uint256 _eggs, uint256 _crabs);\n', '    \n', '    constructor() public {\n', '        ceoAddress=msg.sender;\n', '    }\n', '    \n', '    function hatchEggs(address ref) public {\n', '        require(initialized);\n', '        \n', '        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\n', '            referrals[msg.sender] = ref;\n', '        }\n', '        \n', '        uint256 eggsUsed = getMyEggs();\n', '        \n', '        uint256 newCrabs = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1CRAB);\n', '        hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newCrabs);\n', '        claimedEggs[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        \n', '        //send referral eggs\n', '        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '        \n', '        //boost market to nerf crab hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n', '        \n', '        emit Hatch(msg.sender, eggsUsed, newCrabs);\n', '    }\n', '    \n', '    function sellEggs() public {\n', '        require(initialized);\n', '        \n', '        uint256 hasEggs = getMyEggs();\n', '        uint256 eggValue = calculateEggSell(hasEggs);\n', '        \n', '        uint256 fee = calculateDevFee(eggValue);\n', '        \n', '        claimedEggs[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        marketEggs = SafeMath.add(marketEggs,hasEggs);\n', '        \n', '        ceoAddress.transfer(fee);\n', '        \n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '        \n', '        emit Sell(msg.sender, hasEggs);\n', '    }\n', '    \n', '    function buyEggs() public payable {\n', '        require(initialized);\n', '        \n', '        uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));\n', '        \n', '        ceoAddress.transfer(calculateDevFee(msg.value));\n', '        \n', '        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\n', '        \n', '        emit Buy(msg.sender, eggsBought);\n', '    }\n', '    \n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    \n', '    function calculateEggSell(uint256 eggs) public view returns(uint256){\n', '        return calculateTrade(eggs,marketEggs, address(this).balance);\n', '    }\n', '    \n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketEggs);\n', '    }\n', '    \n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth, address(this).balance);\n', '    }\n', '    \n', '    function calculateDevFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    \n', '    function seedMarket(uint256 eggs) public payable {\n', '        require(msg.sender == ceoAddress);\n', '        require(marketEggs == 0);\n', '        initialized = true;\n', '        marketEggs = eggs;\n', '    }\n', '    \n', '    function claimFreeCrab() public{\n', '        require(initialized);\n', '        require(hatchery[msg.sender] == 0);\n', '        lastHatch[msg.sender] = now;\n', '        hatchery[msg.sender] = 300;\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function getMyCrabs() public view returns(uint256){\n', '        return hatchery[msg.sender];\n', '    }\n', '    \n', '    function getMyEggs() public view returns(uint256){\n', '        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    \n', '    function getEggsSinceLastHatch(address _address) public view returns(uint256){\n', '        uint256 secondsPassed = min(EGGS_TO_HATCH_1CRAB, SafeMath.sub(now, lastHatch[_address]));\n', '        return SafeMath.mul(secondsPassed, hatchery[_address]);\n', '    }\n', '    \n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', 'contract CrabFarm {\n', '    uint256 public EGGS_TO_HATCH_1CRAB = 43200; // every 12 hours\n', '    \n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    \n', '    bool public initialized = false;\n', '    \n', '    address public ceoAddress;\n', '    \n', '    mapping (address => uint256) public hatchery;\n', '    mapping (address => uint256) public claimedEggs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    \n', '    uint256 public marketEggs;\n', '    \n', '    event Buy(address _from, uint256 _eggs);\n', '    event Sell(address _from, uint256 _eggs);\n', '    event Hatch(address _from, uint256 _eggs, uint256 _crabs);\n', '    \n', '    constructor() public {\n', '        ceoAddress=msg.sender;\n', '    }\n', '    \n', '    function hatchEggs(address ref) public {\n', '        require(initialized);\n', '        \n', '        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\n', '            referrals[msg.sender] = ref;\n', '        }\n', '        \n', '        uint256 eggsUsed = getMyEggs();\n', '        \n', '        uint256 newCrabs = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1CRAB);\n', '        hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newCrabs);\n', '        claimedEggs[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        \n', '        //send referral eggs\n', '        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n', '        \n', '        //boost market to nerf crab hoarding\n', '        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n', '        \n', '        emit Hatch(msg.sender, eggsUsed, newCrabs);\n', '    }\n', '    \n', '    function sellEggs() public {\n', '        require(initialized);\n', '        \n', '        uint256 hasEggs = getMyEggs();\n', '        uint256 eggValue = calculateEggSell(hasEggs);\n', '        \n', '        uint256 fee = calculateDevFee(eggValue);\n', '        \n', '        claimedEggs[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        marketEggs = SafeMath.add(marketEggs,hasEggs);\n', '        \n', '        ceoAddress.transfer(fee);\n', '        \n', '        msg.sender.transfer(SafeMath.sub(eggValue,fee));\n', '        \n', '        emit Sell(msg.sender, hasEggs);\n', '    }\n', '    \n', '    function buyEggs() public payable {\n', '        require(initialized);\n', '        \n', '        uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));\n', '        \n', '        ceoAddress.transfer(calculateDevFee(msg.value));\n', '        \n', '        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\n', '        \n', '        emit Buy(msg.sender, eggsBought);\n', '    }\n', '    \n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    \n', '    function calculateEggSell(uint256 eggs) public view returns(uint256){\n', '        return calculateTrade(eggs,marketEggs, address(this).balance);\n', '    }\n', '    \n', '    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketEggs);\n', '    }\n', '    \n', '    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateEggBuy(eth, address(this).balance);\n', '    }\n', '    \n', '    function calculateDevFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    \n', '    function seedMarket(uint256 eggs) public payable {\n', '        require(msg.sender == ceoAddress);\n', '        require(marketEggs == 0);\n', '        initialized = true;\n', '        marketEggs = eggs;\n', '    }\n', '    \n', '    function claimFreeCrab() public{\n', '        require(initialized);\n', '        require(hatchery[msg.sender] == 0);\n', '        lastHatch[msg.sender] = now;\n', '        hatchery[msg.sender] = 300;\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function getMyCrabs() public view returns(uint256){\n', '        return hatchery[msg.sender];\n', '    }\n', '    \n', '    function getMyEggs() public view returns(uint256){\n', '        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\n', '    }\n', '    \n', '    function getEggsSinceLastHatch(address _address) public view returns(uint256){\n', '        uint256 secondsPassed = min(EGGS_TO_HATCH_1CRAB, SafeMath.sub(now, lastHatch[_address]));\n', '        return SafeMath.mul(secondsPassed, hatchery[_address]);\n', '    }\n', '    \n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
