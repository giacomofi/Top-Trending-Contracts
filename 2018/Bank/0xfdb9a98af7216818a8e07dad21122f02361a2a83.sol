['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// 账本记录合约\n', '// ----------------------------------------------------------------------------\n', 'contract IMCLedgerRecord is Owned{\n', '\n', '    // 账本记录添加日志\n', '    event LedgerRecordAdd(uint _date, bytes32 _hash, uint _depth, string _fileFormat, uint _stripLen, bytes32 _balanceHash, uint _balanceDepth);\n', '\n', '    // Token解锁统计记录\n', '    struct RecordInfo {\n', '        uint date;  // 记录日期（解锁ID）\n', '        bytes32 hash;  // 文件hash\n', '        uint depth; // 深度\n', '        string fileFormat; // 上链存证的文件格式\n', '        uint stripLen; // 上链存证的文件分区\n', '        bytes32 balanceHash;  // 余额文件hash\n', '        uint balanceDepth;  // 余额深度\n', '    }\n', '    \n', '    // 账本记录\n', '    mapping(uint => RecordInfo) public ledgerRecord;\n', '    \n', '    constructor() public{\n', '\n', '    }\n', '    \n', '     \n', '    /**\n', '     * 账本记录添加\n', '     * @param _date uint 记录日期（解锁ID）\n', '     * @param _hash bytes32 文件hash\n', '     * @param _depth uint 深度\n', '     * @param _fileFormat string 上链存证的文件格式\n', '     * @param _stripLen uint 上链存证的文件分区\n', '     * @param _balanceHash bytes32 余额文件hash\n', '     * @param _balanceDepth uint 余额深度\n', '     * @return success 添加成功\n', '     */\n', '    function ledgerRecordAdd(uint _date, bytes32 _hash, uint _depth, string _fileFormat, uint _stripLen, bytes32 _balanceHash, uint _balanceDepth) public onlyOwner returns (bool) {\n', '        \n', '        // 防止重复记录\n', '        require(!(ledgerRecord[_date].date > 0));\n', '\n', '        // 记录解锁信息\n', '        ledgerRecord[_date] = RecordInfo(_date, _hash, _depth, _fileFormat, _stripLen, _balanceHash, _balanceDepth);\n', '\n', '        // 解锁日志记录\n', '        emit LedgerRecordAdd(_date, _hash, _depth, _fileFormat, _stripLen, _balanceHash, _balanceDepth);\n', '        \n', '        return true;\n', '        \n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// 账本记录合约\n', '// ----------------------------------------------------------------------------\n', 'contract IMCLedgerRecord is Owned{\n', '\n', '    // 账本记录添加日志\n', '    event LedgerRecordAdd(uint _date, bytes32 _hash, uint _depth, string _fileFormat, uint _stripLen, bytes32 _balanceHash, uint _balanceDepth);\n', '\n', '    // Token解锁统计记录\n', '    struct RecordInfo {\n', '        uint date;  // 记录日期（解锁ID）\n', '        bytes32 hash;  // 文件hash\n', '        uint depth; // 深度\n', '        string fileFormat; // 上链存证的文件格式\n', '        uint stripLen; // 上链存证的文件分区\n', '        bytes32 balanceHash;  // 余额文件hash\n', '        uint balanceDepth;  // 余额深度\n', '    }\n', '    \n', '    // 账本记录\n', '    mapping(uint => RecordInfo) public ledgerRecord;\n', '    \n', '    constructor() public{\n', '\n', '    }\n', '    \n', '     \n', '    /**\n', '     * 账本记录添加\n', '     * @param _date uint 记录日期（解锁ID）\n', '     * @param _hash bytes32 文件hash\n', '     * @param _depth uint 深度\n', '     * @param _fileFormat string 上链存证的文件格式\n', '     * @param _stripLen uint 上链存证的文件分区\n', '     * @param _balanceHash bytes32 余额文件hash\n', '     * @param _balanceDepth uint 余额深度\n', '     * @return success 添加成功\n', '     */\n', '    function ledgerRecordAdd(uint _date, bytes32 _hash, uint _depth, string _fileFormat, uint _stripLen, bytes32 _balanceHash, uint _balanceDepth) public onlyOwner returns (bool) {\n', '        \n', '        // 防止重复记录\n', '        require(!(ledgerRecord[_date].date > 0));\n', '\n', '        // 记录解锁信息\n', '        ledgerRecord[_date] = RecordInfo(_date, _hash, _depth, _fileFormat, _stripLen, _balanceHash, _balanceDepth);\n', '\n', '        // 解锁日志记录\n', '        emit LedgerRecordAdd(_date, _hash, _depth, _fileFormat, _stripLen, _balanceHash, _balanceDepth);\n', '        \n', '        return true;\n', '        \n', '    }\n', '\n', '}']
