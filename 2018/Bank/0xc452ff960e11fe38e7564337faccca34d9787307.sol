['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract GIT {\n', '    \n', '    using SafeMath for uint256;\n', '    address public owner;\n', '    address public tokenAddress;\n', '    address public tokenSender;\n', '    uint256 public tokenApproves;\n', '\n', '\n', '    mapping (address => bool) public blacklist;\n', '    \n', '    uint256 public totalAirdrop = 4000e18;\n', '    uint256 public unitUserBalanceLimit = uint256(1e18).div(100);\n', '    uint256 public totalDistributed = 0;\n', '    uint256 public totalRemaining = totalAirdrop.sub(totalDistributed);\n', '    uint256 public value = 1e18;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event DistrStarted();\n', '    \n', '    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\n', '    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\n', '    \n', '    bool public distributionFinished = false;\n', '    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier canNotDistr() {\n', '        require(distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    function GIT () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function changeTokenAddress(address newTokenAddress) onlyOwner public {\n', '        if (newTokenAddress != address(0)) {\n', '            tokenAddress = newTokenAddress;\n', '        }\n', '    }\n', '    \n', '    function changeTokenSender(address newTokenSender) onlyOwner public {\n', '        if (newTokenSender != address(0)) {\n', '            tokenSender = newTokenSender;\n', '        }\n', '    }\n', '    \n', '    function changeValue(uint256 newValue) onlyOwner public {\n', '        value = newValue;\n', '    }\n', '    \n', '    function changeTotalAirdrop(uint256 newtotalAirdrop) onlyOwner public {\n', '        totalAirdrop = newtotalAirdrop;\n', '    }\n', '    \n', '    function changeUnitUserBalanceLimit(uint256 newUnitUserBalanceLimit) onlyOwner public {\n', '        unitUserBalanceLimit = newUnitUserBalanceLimit;\n', '    }\n', '    \n', '    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\n', '        totalRemaining = newTotalRemaining;\n', '    }\n', '    \n', '    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\n', '        totalDistributed = newTotalDistributed;\n', '    }\n', '    \n', '    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\n', '        tokenApproves = newTokenApproves;\n', '    }\n', '    \n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        DistrFinished();\n', '        return true;\n', '    }\n', '    \n', '    function startDistribution() onlyOwner canNotDistr public returns (bool) {\n', '        distributionFinished = false;\n', '        DistrStarted();\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        \n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        \n', '        require(callTokenTransferFrom(_to, _amount));\n', '        \n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '        \n', '        Distr(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function airdrop(address[] addresses) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(value <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(value <= totalRemaining);\n', '            distr(addresses[i], value);\n', '        }\n', '\t\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '\t\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= totalAirdrop) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function () external payable {\n', '            getTokens();\n', '     }\n', '    \n', '    function getTokens() payable canDistr onlyWhitelist public {\n', '        \n', '        if (value > totalRemaining) {\n', '            value = totalRemaining;\n', '        }\n', '        \n', '        require(value <= totalRemaining);\n', '        \n', '        require(msg.sender.balance.add(msg.value) >= unitUserBalanceLimit);\n', '        \n', '        address investor = msg.sender;\n', '        uint256 toGive = value;\n', '        \n', '        distr(investor, toGive);\n', '        \n', '        if (toGive > 0) {\n', '            blacklist[investor] = true;\n', '        }\n', '\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(_tokenAddress);\n', '        uint bal = t.balanceOf(_who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    \n', '    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) payable public returns (bool){\n', '        require(tokenAddress == _tokenAddress);\n', '        require(tokenSender == _sender);\n', '        require(totalAirdrop <= _tokenValue);\n', '        \n', '        tokenApproves = _tokenValue;\n', '        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\n', '        return true;\n', '    }\n', '    \n', '    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\n', '        \n', '        require(tokenSender != address(0));\n', '        require(tokenAddress.call(bytes4(bytes32(keccak256("transferFrom(address,address,uint256)"))), tokenSender, _to, _value));\n', '        \n', '        LOG_callTokenTransferFrom(tokenSender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract GIT {\n', '    \n', '    using SafeMath for uint256;\n', '    address public owner;\n', '    address public tokenAddress;\n', '    address public tokenSender;\n', '    uint256 public tokenApproves;\n', '\n', '\n', '    mapping (address => bool) public blacklist;\n', '    \n', '    uint256 public totalAirdrop = 4000e18;\n', '    uint256 public unitUserBalanceLimit = uint256(1e18).div(100);\n', '    uint256 public totalDistributed = 0;\n', '    uint256 public totalRemaining = totalAirdrop.sub(totalDistributed);\n', '    uint256 public value = 1e18;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event DistrStarted();\n', '    \n', '    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\n', '    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\n', '    \n', '    bool public distributionFinished = false;\n', '    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier canNotDistr() {\n', '        require(distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    function GIT () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function changeTokenAddress(address newTokenAddress) onlyOwner public {\n', '        if (newTokenAddress != address(0)) {\n', '            tokenAddress = newTokenAddress;\n', '        }\n', '    }\n', '    \n', '    function changeTokenSender(address newTokenSender) onlyOwner public {\n', '        if (newTokenSender != address(0)) {\n', '            tokenSender = newTokenSender;\n', '        }\n', '    }\n', '    \n', '    function changeValue(uint256 newValue) onlyOwner public {\n', '        value = newValue;\n', '    }\n', '    \n', '    function changeTotalAirdrop(uint256 newtotalAirdrop) onlyOwner public {\n', '        totalAirdrop = newtotalAirdrop;\n', '    }\n', '    \n', '    function changeUnitUserBalanceLimit(uint256 newUnitUserBalanceLimit) onlyOwner public {\n', '        unitUserBalanceLimit = newUnitUserBalanceLimit;\n', '    }\n', '    \n', '    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\n', '        totalRemaining = newTotalRemaining;\n', '    }\n', '    \n', '    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\n', '        totalDistributed = newTotalDistributed;\n', '    }\n', '    \n', '    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\n', '        tokenApproves = newTokenApproves;\n', '    }\n', '    \n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        DistrFinished();\n', '        return true;\n', '    }\n', '    \n', '    function startDistribution() onlyOwner canNotDistr public returns (bool) {\n', '        distributionFinished = false;\n', '        DistrStarted();\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        \n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        \n', '        require(callTokenTransferFrom(_to, _amount));\n', '        \n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '        \n', '        Distr(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function airdrop(address[] addresses) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(value <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(value <= totalRemaining);\n', '            distr(addresses[i], value);\n', '        }\n', '\t\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '\t\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= totalAirdrop) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function () external payable {\n', '            getTokens();\n', '     }\n', '    \n', '    function getTokens() payable canDistr onlyWhitelist public {\n', '        \n', '        if (value > totalRemaining) {\n', '            value = totalRemaining;\n', '        }\n', '        \n', '        require(value <= totalRemaining);\n', '        \n', '        require(msg.sender.balance.add(msg.value) >= unitUserBalanceLimit);\n', '        \n', '        address investor = msg.sender;\n', '        uint256 toGive = value;\n', '        \n', '        distr(investor, toGive);\n', '        \n', '        if (toGive > 0) {\n', '            blacklist[investor] = true;\n', '        }\n', '\n', '        if (totalDistributed >= totalAirdrop) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(_tokenAddress);\n', '        uint bal = t.balanceOf(_who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    \n', '    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) payable public returns (bool){\n', '        require(tokenAddress == _tokenAddress);\n', '        require(tokenSender == _sender);\n', '        require(totalAirdrop <= _tokenValue);\n', '        \n', '        tokenApproves = _tokenValue;\n', '        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\n', '        return true;\n', '    }\n', '    \n', '    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\n', '        \n', '        require(tokenSender != address(0));\n', '        require(tokenAddress.call(bytes4(bytes32(keccak256("transferFrom(address,address,uint256)"))), tokenSender, _to, _value));\n', '        \n', '        LOG_callTokenTransferFrom(tokenSender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']
