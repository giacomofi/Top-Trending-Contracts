['pragma solidity ^0.4.24;\n', '// Game by spielley\n', '// If you want a cut of the 1% dev share on P3D divs\n', '// buy shares at => 0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1\n', '// P3D masternode rewards for the UI builder\n', '// Raffle3D v 1.02\n', '// spielley is not liable for any known or unknown bugs contained by contract\n', '// This is not a TEAM JUST product!\n', '\n', '// Concept:\n', '// buy a raffle ticket\n', '// => lifetime possible to win a round payout and a chance to win the jackpot\n', '// \n', '// Have fun, these games are purely intended for fun.\n', '// \n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', 'interface SPASMInterface  {\n', '    function() payable external;\n', '    function disburse() external  payable;\n', '}\n', 'interface HourglassInterface  {\n', '    function() payable external;\n', '    function buy(address _playerAddress) payable external returns(uint256);\n', '    function sell(uint256 _amountOfTokens) external;\n', '    function reinvest() external;\n', '    function withdraw() external;\n', '    function exit() external;\n', '    function dividendsOf(address _playerAddress) external view returns(uint256);\n', '    function balanceOf(address _playerAddress) external view returns(uint256);\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\n', '    function stakingRequirement() external view returns(uint256);\n', '}\n', 'contract P3DRaffle is  Owned {\n', '    using SafeMath for uint;\n', '    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); \n', '   function harvestabledivs()\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return ( P3Dcontract_.dividendsOf(address(this)))  ;\n', '    }\n', '    function raffleinfo(uint256 rafflenumber)\n', '        view\n', '        public\n', '        returns(uint256 drawblock,    uint256 ticketssold,\n', '    uint256 result,\n', '    uint256 resultjackpot,\n', '    bool validation,\n', '    bool wasabletovalidate,\n', '    address rafflevanity )\n', '    {\n', '        return (Raffles[rafflenumber].drawblock,    Raffles[rafflenumber].ticketssold,\n', '    Raffles[rafflenumber].result,\n', '    Raffles[rafflenumber].resultjackpot,\n', '    Raffles[rafflenumber].validation,\n', '    Raffles[rafflenumber].wasabletovalidate,\n', '    Raffles[rafflenumber].rafflevanity\n', '            )  ;\n', '    }\n', '    function FetchVanity(address player) view public returns(string)\n', '    {\n', '        return Vanity[player];\n', '    }\n', '    function nextlotnumber() view public returns(uint256)\n', '    {\n', '        return (nextlotnr);\n', '    }\n', '    function nextrafflenumber() view public returns(uint256)\n', '    {\n', '        return (nextrafflenr);\n', '    }\n', '    function pots() pure public returns(uint256 rafflepot, uint256 jackpot)\n', '    {\n', '        return (rafflepot, jackpot);\n', '    }\n', '    struct Raffle {\n', '    uint256 drawblock;\n', '    uint256 ticketssold;\n', '    uint256 result;\n', '    uint256 resultjackpot;\n', '    bool validation;\n', '    bool wasabletovalidate;\n', '    address rafflevanity;\n', '}\n', '\n', '    uint256 public nextlotnr;\n', '    uint256 public nextrafflenr;\n', '    mapping(uint256 => address) public ticketsales;\n', '    mapping(uint256 => Raffle) public Raffles;\n', '    mapping(address => string) public Vanity;\n', '    uint256 public rafflepot;\n', '    uint256 public jackpot;\n', '    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\n', '    \n', '    constructor() public{\n', '    Raffles[0].validation = true;\n', '    nextrafflenr++;    \n', '}\n', '    \n', '    function buytickets(uint256 amount ,address masternode) public payable{\n', '    require(msg.value >= 10 finney * amount);\n', '    require(amount > 0);\n', '    uint256 counter;\n', '    address sender  = msg.sender;\n', '    for(uint i=0; i< amount; i++)\n', '        {\n', '            counter = i + nextlotnr;\n', '            ticketsales[counter] = sender;\n', '        }\n', '    nextlotnr += i;\n', '    P3Dcontract_.buy.value(msg.value)(masternode);\n', '}\n', 'function fetchdivstopot () public{\n', '    uint256 divs = harvestabledivs();\n', '    \n', '    uint256 base = divs.div(100);\n', '    SPASM_.disburse.value(base)();// to dev fee sharing contract SPASM\n', '    rafflepot = rafflepot.add(base.mul(90));// allocation to raffle\n', '    jackpot = jackpot.add(base.mul(9)); // allocation to jackpot\n', '    P3Dcontract_.withdraw();\n', '    SPASM_.disburse.value(base)();// to dev fee sharing contract SPASM\n', '}\n', 'function changevanity(string van) public payable{\n', '    require(msg.value >= 100  finney);\n', '    Vanity[msg.sender] = van;\n', '    rafflepot = rafflepot.add(msg.value);\n', '}\n', 'function startraffle () public{\n', '    require(Raffles[nextrafflenr - 1].validation == true);\n', '    require(rafflepot >= 103 finney);\n', '    Raffles[nextrafflenr].drawblock = block.number;\n', '    \n', '    Raffles[nextrafflenr].ticketssold = nextlotnr-1;\n', '    nextrafflenr++;\n', '}\n', 'function validateraffle () public{\n', '    uint256 rafnr = nextrafflenr - 1;\n', '    bool val = Raffles[rafnr].validation;\n', '    uint256 drawblock = Raffles[rafnr].drawblock;\n', '    require(val != true);\n', '    require(drawblock < block.number);\n', '    \n', '    //check if blockhash can be determined\n', '        if(block.number - 256 > drawblock) {\n', '            // can not be determined\n', '            Raffles[rafnr].validation = true;\n', '            Raffles[rafnr].wasabletovalidate = false;\n', '        }\n', '        if(block.number - 256 <= drawblock) {\n', '            // can be determined\n', '            uint256 winningticket = uint256(blockhash(drawblock)) % Raffles[rafnr].ticketssold;\n', '            uint256 jackpotdraw = uint256(blockhash(drawblock)) % 1000;\n', '            address winner = ticketsales[winningticket];\n', '            Raffles[rafnr].validation = true;\n', '            Raffles[rafnr].wasabletovalidate = true;\n', '            Raffles[rafnr].result = winningticket;\n', '            Raffles[rafnr].resultjackpot = jackpotdraw;\n', '            Raffles[rafnr].rafflevanity = winner;\n', '            if(jackpotdraw == 777){\n', '                winner.transfer(jackpot);\n', '                jackpot = 0;\n', '            }\n', '            winner.transfer(100 finney);\n', '            msg.sender.transfer(3 finney);\n', '            rafflepot = rafflepot.sub(103 finney);\n', '        }\n', '    \n', '}\n', '\n', '}']