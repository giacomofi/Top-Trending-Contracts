['pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TelcoinSaleCapEscrow {\n', '    using SafeMath for uint256;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event WalletChanged(address indexed previousWallet, address indexed newWallet);\n', '    event ValuePlaced(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '    event Approved(address indexed participant, uint256 amount);\n', '    event Rejected(address indexed participant);\n', '    event Closed();\n', '\n', '    /// The owner of the contract.\n', '    address public owner;\n', '\n', '    /// The wallet that will receive funds on approval after the token\n', "    /// sale's  registerAltPurchase() has been called.\n", '    address public wallet;\n', '\n', '    /// Whether the escrow has closed.\n', '    bool public closed = false;\n', '\n', '    /// The amount of wei deposited by each participant. This value\n', '    /// can change with new deposits, approvals and rejections.\n', '    mapping(address => uint256) public deposited;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier escrowOpen() {\n', '        require(!closed);\n', '        _;\n', '    }\n', '\n', '    function TelcoinSaleCapEscrow(address _wallet) public payable {\n', '        require(msg.value > 0);\n', '        require(_wallet != address(0));\n', '\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function () public payable {\n', '        placeValue(msg.sender);\n', '    }\n', '\n', '    /// By the time approve() is called by the owner, a matching call for\n', '    /// registerAltPurchase(_participant, "ETH", tx.id, _weiAmount) shall\n', '    /// have been called in the main token sale.\n', '    function approve(address _participant, uint256 _weiAmount) onlyOwner public {\n', '        uint256 depositedAmount = deposited[_participant];\n', '        require(depositedAmount > 0);\n', '        require(_weiAmount <= depositedAmount);\n', '\n', '        deposited[_participant] = depositedAmount.sub(_weiAmount);\n', '        Approved(_participant, _weiAmount);\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    function approveMany(address[] _participants, uint256[] _weiAmounts) onlyOwner public {\n', '        require(_participants.length == _weiAmounts.length);\n', '\n', '        for (uint256 i = 0; i < _participants.length; i++) {\n', '            approve(_participants[i], _weiAmounts[i]);\n', '        }\n', '    }\n', '\n', '    function changeWallet(address _wallet) onlyOwner public payable {\n', '        require(_wallet != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        WalletChanged(wallet, _wallet);\n', '        wallet = _wallet;\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function close() onlyOwner public {\n', '        require(!closed);\n', '\n', '        closed = true;\n', '        Closed();\n', '    }\n', '\n', '    function placeValue(address _beneficiary) escrowOpen public payable {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount > 0);\n', '\n', '        uint256 newDeposited = deposited[_beneficiary].add(weiAmount);\n', '        deposited[_beneficiary] = newDeposited;\n', '\n', '        ValuePlaced(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount\n', '        );\n', '    }\n', '\n', '    function reject(address _participant) onlyOwner public {\n', '        uint256 weiAmount = deposited[_participant];\n', '        require(weiAmount > 0);\n', '\n', '        deposited[_participant] = 0;\n', '        Rejected(_participant);\n', '        require(_participant.call.value(weiAmount)());\n', '    }\n', '\n', '    function rejectMany(address[] _participants) onlyOwner public {\n', '        for (uint256 i = 0; i < _participants.length; i++) {\n', '            reject(_participants[i]);\n', '        }\n', '    }\n', '\n', '    function transferOwnership(address _to) onlyOwner public {\n', '        require(_to != address(0));\n', '        OwnershipTransferred(owner, _to);\n', '        owner = _to;\n', '    }\n', '}']