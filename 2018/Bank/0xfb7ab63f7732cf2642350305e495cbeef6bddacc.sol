['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions". This adds two-phase\n', ' * ownership control to OpenZeppelin&#39;s Ownable class. In this model, the original owner \n', ' * designates a new owner but does not actually transfer ownership. The new owner then accepts \n', ' * ownership and completes the transfer.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public pendingOwner;\n', '\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    pendingOwner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    pendingOwner = _newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '\n', '\n', '}\n', '\n', '/**\n', '* @title CarbonDollarStorage\n', '* @notice Contains necessary storage contracts for CarbonDollar (FeeSheet and StablecoinWhitelist).\n', '*/\n', 'contract CarbonDollarStorage is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /** \n', '        Mappings\n', '    */\n', '    /* fees for withdrawing to stablecoin, in tenths of a percent) */\n', '    mapping (address => uint256) public fees;\n', '    /** @dev Units for fees are always in a tenth of a percent */\n', '    uint256 public defaultFee;\n', '    /* is the token address referring to a stablecoin/whitelisted token? */\n', '    mapping (address => bool) public whitelist;\n', '\n', '\n', '    /** \n', '        Events\n', '    */\n', '    event DefaultFeeChanged(uint256 oldFee, uint256 newFee);\n', '    event FeeChanged(address indexed stablecoin, uint256 oldFee, uint256 newFee);\n', '    event FeeRemoved(address indexed stablecoin, uint256 oldFee);\n', '    event StablecoinAdded(address indexed stablecoin);\n', '    event StablecoinRemoved(address indexed stablecoin);\n', '\n', '    /** @notice Sets the default fee for burning CarbonDollar into a whitelisted stablecoin.\n', '        @param _fee The default fee.\n', '    */\n', '    function setDefaultFee(uint256 _fee) public onlyOwner {\n', '        uint256 oldFee = defaultFee;\n', '        defaultFee = _fee;\n', '        if (oldFee != defaultFee)\n', '            emit DefaultFeeChanged(oldFee, _fee);\n', '    }\n', '    \n', '    /** @notice Set a fee for burning CarbonDollar into a stablecoin.\n', '        @param _stablecoin Address of a whitelisted stablecoin.\n', '        @param _fee the fee.\n', '    */\n', '    function setFee(address _stablecoin, uint256 _fee) public onlyOwner {\n', '        uint256 oldFee = fees[_stablecoin];\n', '        fees[_stablecoin] = _fee;\n', '        if (oldFee != _fee)\n', '            emit FeeChanged(_stablecoin, oldFee, _fee);\n', '    }\n', '\n', '    /** @notice Remove the fee for burning CarbonDollar into a particular kind of stablecoin.\n', '        @param _stablecoin Address of stablecoin.\n', '    */\n', '    function removeFee(address _stablecoin) public onlyOwner {\n', '        uint256 oldFee = fees[_stablecoin];\n', '        fees[_stablecoin] = 0;\n', '        if (oldFee != 0)\n', '            emit FeeRemoved(_stablecoin, oldFee);\n', '    }\n', '\n', '    /** @notice Add a token to the whitelist.\n', '        @param _stablecoin Address of the new stablecoin.\n', '    */\n', '    function addStablecoin(address _stablecoin) public onlyOwner {\n', '        whitelist[_stablecoin] = true;\n', '        emit StablecoinAdded(_stablecoin);\n', '    }\n', '\n', '    /** @notice Removes a token from the whitelist.\n', '        @param _stablecoin Address of the ex-stablecoin.\n', '    */\n', '    function removeStablecoin(address _stablecoin) public onlyOwner {\n', '        whitelist[_stablecoin] = false;\n', '        emit StablecoinRemoved(_stablecoin);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Compute the fee that will be charged on a "burn" operation.\n', '     * @param _amount The amount that will be traded.\n', '     * @param _stablecoin The stablecoin whose fee will be used.\n', '     */\n', '    function computeStablecoinFee(uint256 _amount, address _stablecoin) public view returns (uint256) {\n', '        uint256 fee = fees[_stablecoin];\n', '        return computeFee(_amount, fee);\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the fee that will be charged on a "burn" operation.\n', '     * @param _amount The amount that will be traded.\n', '     * @param _fee The fee that will be charged, in tenths of a percent.\n', '     */\n', '    function computeFee(uint256 _amount, uint256 _fee) public pure returns (uint256) {\n', '        return _amount.mul(_fee).div(1000);\n', '    }\n', '}']