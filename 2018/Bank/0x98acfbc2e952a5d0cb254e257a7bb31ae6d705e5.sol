['/* Orgon.Sale */\n', 'pragma solidity ^0.4.21; //v8 \n', 'library SafeMath {\n', ' \n', '  /**\n', '   * Add two uint256 values, throw in case of overflow.\n', '   * @param x first value to add\n', '   * @param y second value to add\n', '   * @return x + y\n', '   */\n', '  function add (uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = x + y;\n', '    require(z >= x);\n', '    return z;\n', '  }\n', '\n', '  /**\n', '   * Subtract one uint256 value from another, throw in case of underflow.\n', '   * @param x value to subtract from\n', '   * @param y value to subtract\n', '   * @return x - y\n', '   */\n', '  function sub (uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require (x >= y);\n', '    z = x - y;\n', '    return z;\n', '  }\n', '\n', '/**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '   \n', '    if (a == 0) return 0;\n', '    c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '   /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    c = a / b;\n', '    return c;\n', '  }\n', '}    \n', '    \n', 'contract OrgonToken {\n', '\n', '  /**\n', '   * Get total number of tokens in circulation.\n', '   *\n', '   * @return total number of tokens in circulation\n', '   */\n', '  function totalSupply () public view returns (uint256 supply);\n', '\n', '  /**\n', '   * Get number of tokens currently belonging to given owner.\n', '   *\n', '   * @param _owner address to get number of tokens currently belonging to the\n', '   *        owner of\n', '   * @return number of tokens currently belonging to the owner of given address\n', '   */\n', '  function balanceOf (address _owner) public view returns (uint256 balance);\n', '  \n', '  function theOwner () public view returns (address);\n', '\n', '  /**\n', '   * Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '\n', ' /**\n', '   * Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transfer (address _to, uint256 _value)\n', '  public returns (bool success);\n', '  \n', '  /**\n', '   * Transfer given number of tokens from given owner to given recipient.\n', '   *\n', '   * @param _from address to transfer tokens from the owner of\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer from given owner to given\n', '   *        recipient\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transferFrom (address _from, address _to, uint256 _value)\n', '  public returns (bool success);\n', '\n', '  /**\n', '   * Allow given spender to transfer given number of tokens from message sender.\n', '   *\n', '   * @param _spender address to allow the owner of to transfer tokens from\n', '   *        message sender\n', '   * @param _value number of tokens to allow to transfer\n', '   * @return true if token transfer was successfully approved, false otherwise\n', '   */\n', '  function approve (address _spender, uint256 _value)\n', '  public returns (bool success);\n', '\n', '  /**\n', '   * Tell how many tokens given spender is currently allowed to transfer from\n', '   * given owner.\n', '   *\n', '   * @param _owner address to get number of tokens allowed to be transferred\n', '   *        from the owner of\n', '   * @param _spender address to get number of tokens allowed to be transferred\n', '   *        by the owner of\n', '   * @return number of tokens given spender is currently allowed to transfer\n', '   *         from given owner\n', '   */\n', '  function allowance (address _owner, address _spender)\n', '  public view returns (uint256 remaining);\n', '\n', '/* Owner of the smart contract */\n', '//address public owner;\n', '\n', '  /**\n', '   * Logged when tokens were transferred from one owner to another.\n', '   *\n', '   * @param _from address of the owner, tokens were transferred from\n', '   * @param _to address of the owner, tokens were transferred to\n', '   * @param _value number of tokens transferred\n', '   */\n', '  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * Logged when owner approved his tokens to be transferred by some spender.\n', '   *\n', '   * @param _owner owner who approved his tokens to be transferred\n', '   * @param _spender spender who were allowed to transfer the tokens belonging\n', '   *        to the owner\n', '   * @param _value number of tokens belonging to the owner, approved to be\n', '   *        transferred by the spender\n', '   */\n', '  event Approval (\n', '    address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract OrgonSale {\n', 'using SafeMath for uint256;\n', '    /* Start OrgonMarket */\n', '    function OrgonSale (OrgonToken _orgonToken) public {\n', '        orgonToken = _orgonToken;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /* Recive ETH */\n', '    function () public payable {\n', '        require (msg.data.length == 0);\n', '        buyTokens ();\n', '    }\n', '    \n', '    function buyTokens () public payable returns (bool success){\n', '        require (msg.value > 0);\n', '        \n', '        uint256 currentMarket;\n', '        currentMarket = orgonToken.balanceOf (this);   \n', '        if (currentMarket == 0) revert (); \n', '        \n', '        uint256 toBuy;\n', '        if (msg.value < ethBound1) {\n', '            toBuy = msg.value.mul(price);\n', '            require (orgonToken.transfer (msg.sender, toBuy));\n', '            \n', '        }\n', '        else if (msg.value < ethBound2) {\n', '            toBuy = msg.value.mul(price1);\n', '            require (orgonToken.transfer (msg.sender, toBuy));\n', '        }    \n', '        else if (msg.value < ethBound3) {\n', '            toBuy = msg.value.mul(price2);\n', '            require (orgonToken.transfer (msg.sender, toBuy));\n', '        }    \n', '        else {\n', '            toBuy = msg.value.mul(price3);\n', '            require (orgonToken.transfer (msg.sender, toBuy));\n', '        }  \n', '        return true;\n', '    }  \n', '    \n', '    function countTokens (uint256 _value) public view returns (uint256 tokens, uint256 _currentMarket){\n', '        require (_value > 0);\n', '        \n', '        uint256 currentMarket;\n', '        currentMarket = orgonToken.balanceOf (this);   \n', '        if (currentMarket == 0) revert (); \n', '        \n', '        uint256 toBuy;\n', '        if (_value < ethBound1) {\n', '            toBuy = _value.mul(price);\n', '            return (toBuy,currentMarket);\n', '        }\n', '        else if (_value < ethBound2) {\n', '            toBuy = _value.mul(price1);\n', '            return (toBuy,currentMarket);\n', '        }    \n', '        else if (_value < ethBound3) {\n', '            toBuy = _value.mul(price2);\n', '           return (toBuy,currentMarket);\n', '        }    \n', '        else {\n', '            toBuy = _value.mul(price3);\n', '            return (toBuy,currentMarket);\n', '        }  \n', '        return (0,currentMarket);\n', '    }  \n', '    \n', '    \n', '    function sendTokens (address _to, uint256 _amount) public returns (bool success){\n', '        \n', '        require (msg.sender == owner);\n', '        require (_to != address(this));\n', '        require (_amount > 0);\n', '        require (orgonToken.transfer (_to, _amount));\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function sendETH (address _to, uint256 _amount) public returns (bool success){\n', '        \n', '        require (msg.sender == owner);\n', '        require (_to != address(this));\n', '        require (_amount > 0);\n', '        _to.transfer (_amount);\n', '        return true;\n', '        \n', '    }\n', '     \n', '    function setPrice(uint256 _newPrice) public {\n', '        require (msg.sender == owner);\n', '        require (_newPrice > 0);\n', '        price = _newPrice;\n', '    }\n', '    function setPrice1(uint256 _newPrice, uint256 _bound1) public {\n', '        require (msg.sender == owner);\n', '        require (_newPrice > 0 && _newPrice > price);\n', '        price1 = _newPrice;\n', '        bound1 = _bound1;\n', '        ethBound1 = bound1.div(price);\n', '    }\n', '     function setPrice2(uint256 _newPrice, uint256 _bound2) public {\n', '        require (msg.sender == owner);\n', '        require (_newPrice > 0 && _newPrice > price1 && _bound2 > bound1);\n', '        price2 = _newPrice;\n', '        bound2 = _bound2;\n', '        ethBound2 = bound2.div(price1);\n', '    }\n', '     function setPrice3(uint256 _newPrice, uint256 _bound3) public {\n', '        require (msg.sender == owner);\n', '        require (_newPrice > 0 && _newPrice > price2 && _bound3 > bound2);\n', '        price3 = _newPrice;\n', '        bound3 = _bound3;\n', '        ethBound3 = bound3.div(price2);\n', '    }\n', '    \n', '    /** Set new owner for the smart contract.\n', ' * May only be called by smart contract owner.\n', ' * @param _newOwner address of new owner of the smart contract */\n', ' \n', '/* *********************************************** */\n', 'function setOwner (address _newOwner) public {\n', ' \n', '    require (msg.sender == owner);\n', '    require (_newOwner != address(this));\n', '    require (_newOwner != address(0x0));\n', '    \n', '    owner = _newOwner;\n', '    \n', '}\n', ' \n', ' \n', '/* *********************************************** */    \n', '    function getPrice() view public returns (uint256 _price){ return price; }\n', '    function getPrice1() view public returns (uint256 _price1){ return price1; }\n', '    function getPrice2() view public returns (uint256 _price2){ return price2; }\n', '    function getPrice3() view public returns (uint256 _price3){ return price3; }\n', '    \n', '    function getBound1() view public returns (uint256 _bound1){ return bound1; }\n', '    function getBound2() view public returns (uint256 _bound2){ return bound2; }\n', '    function getBound3() view public returns (uint256 _bound3){ return bound3; }\n', '    \n', '    function getEthBound1() view public returns (uint256 _bound1){ return ethBound1; }\n', '    function getEthBound2() view public returns (uint256 _bound2){ return ethBound2; }\n', '    function getEthBound3() view public returns (uint256 _bound3){ return ethBound3; }\n', '    \n', '    function theOwner() view public returns (address _owner){ return owner; }\n', '    \n', '    /** Total number of tokens in circulation */\n', '    uint256 private price;\n', '    uint256 private price1;\n', '    uint256 private price2;\n', '    uint256 private price3;\n', '    \n', '    uint256 private bound1;\n', '    uint256 private bound2;\n', '    uint256 private bound3;\n', '    \n', '    uint256 private ethBound1;\n', '    uint256 private ethBound2;\n', '    uint256 private ethBound3;\n', '    \n', '    /** Owner of the smart contract */\n', '    address private  owner;\n', '    \n', '    /**\n', '    * Orgon Token smart contract.\n', '    */\n', '    OrgonToken internal orgonToken;\n', '}']