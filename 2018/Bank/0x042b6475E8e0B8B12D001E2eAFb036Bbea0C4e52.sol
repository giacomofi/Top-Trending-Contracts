['pragma solidity ^0.4.0;\n', 'contract Chance {\n', '    address owner;\n', '    uint public pot;\n', '    uint SEKU_PRICE;\n', '    uint private _random;\n', '    address[] public participants;\n', '    mapping (address => uint) public sekus;\n', '    mapping (uint => address) public invitation;\n', '    uint public reflink;\n', '    \n', '    event Payout(address target, uint amount, uint nrOfParticipants, uint sekus);\n', '\t\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '    \n', '    constructor () public {\n', '        owner = msg.sender;\n', '        pot= address(this).balance;\n', '        SEKU_PRICE=0.001 ether;\n', '    }\n', '\t function setSEKU(uint price) public onlyBy(owner){\n', '        SEKU_PRICE = price* 1 ether;\n', '    }\n', '    function withdrawal()payable public onlyBy(owner){\n', '        terminate();\n', '    }\n', '\t\n', '    function getref() constant returns (uint) { \n', '        return uint32(keccak256(abi.encodePacked(msg.sender)));\n', '    }\n', '    \n', '     function buySEKU(uint amount,uint ref) payable public {\n', '        require(msg.value == amount*SEKU_PRICE && amount>0 && amount<201 );\n', '        bool _ref=false;\n', '        if(ref != 0 && invitation[ref] != msg.sender && sekus[invitation[ref]]>amount){\n', '            _ref=true;\n', '        }\n', '        for (uint i=0; i<amount; i++) {\n', '            participants.push(msg.sender);\n', '            if( _ref==true && (i%4==0)){\n', '                participants.push(invitation[ref]);\n', '        }\n', '    }\n', '        sekus[msg.sender]+=amount;\n', '        reflink=uint32(keccak256(abi.encodePacked(msg.sender)));\n', '        invitation[reflink]= msg.sender;\n', '        pot+=msg.value;\n', '    }\n', '   \n', '    function terminate() private {\n', '        uint totalPayout = pot;\n', '        _random= random();\n', '        uint ownerFee = totalPayout / 10;\n', '        uint payoutToFirstWinner = (totalPayout) / 2;\n', '        uint payoutToSecondWinner = (totalPayout) / 4;\n', '        uint payoutToThirdWinner = (totalPayout)  / 20;\n', '        \n', '        owner.transfer(ownerFee);\n', '        \n', '        uint firstWinnerIndex =  uint(blockhash(block.number-1-_random))  % participants.length;\n', '        address firstWinner = participants[firstWinnerIndex];\n', '        firstWinner.transfer(payoutToFirstWinner);\n', '        emit Payout(firstWinner, payoutToFirstWinner, participants.length,sekus[firstWinner]);\n', '        uint secondWinnerIndex =  uint(blockhash(block.number-2-_random)) % participants.length;\n', '        address secondWinner = participants[secondWinnerIndex];\n', '        while (secondWinner==firstWinner || secondWinner==owner){\n', '            _random+=1;\n', '            secondWinnerIndex =  uint(blockhash(block.number-2-_random)) % participants.length;\n', '            secondWinner = participants[secondWinnerIndex];\n', '        }\n', '        \n', '        secondWinner.transfer(payoutToSecondWinner);\n', '        emit Payout(secondWinner, payoutToSecondWinner, participants.length,sekus[secondWinner]);\n', '        uint thirdWinnerIndex =  uint(blockhash(block.number-3-_random)) % participants.length;\n', '        address thirdWinner = participants[thirdWinnerIndex];\n', '        while (thirdWinner==firstWinner || thirdWinner==secondWinner || secondWinner==owner){\n', '            _random+=1;\n', '            thirdWinnerIndex =  uint(blockhash(block.number-3-_random)) % participants.length;\n', '            thirdWinner = participants[thirdWinnerIndex];\n', '        }\n', '        \n', '        thirdWinner.transfer(payoutToThirdWinner);\n', '        emit Payout(thirdWinner, payoutToThirdWinner, participants.length,sekus[thirdWinner]);\n', '        pot-=(ownerFee+payoutToThirdWinner+payoutToSecondWinner+payoutToFirstWinner);\n', '        delete participants;\n', '    }\n', '      function random() private view returns (uint8) {\n', '        return uint8(uint256(keccak256(abi.encodePacked(now, block.difficulty)))%251);\n', '    }\n', '}']