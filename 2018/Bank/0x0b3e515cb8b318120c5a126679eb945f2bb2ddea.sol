['pragma solidity ^0.4.21;\n', '\n', '/*\n', '******************** HALO 3D *********************\n', '* ===============================================*\n', 'MMMMMMMMMMMMMMMMMMMMMWWXKKXNWMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMWWXko;&#39;&#39;,lkKNWWMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMNOc&#39;.       .:d0XWWMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMNOc&#39;.          .,lkKNWWMMMMMMMMMM\n', 'MMMMMMMWWNKKXWWMMMWNKkl&#39;            .:d0XWWMMMMMMM\n', 'MMMMWWXOo;..&#39;cx0NNWX0d:.               .,lkKWWMMMM\n', 'MMWWKo,.       .;lc,.           .          &#39;l0NWMM\n', 'MMWOc;,&#39;.                   .,lkOdc&#39;.    ..,,:xNWM\n', 'MWNd. .&#39;;;,.              .lOXNWWWNXOo;,,,&#39;.  :XWM\n', 'MWNo.    .ckxl,.          .&#39;cxKNWMMMWWXd.     :KWM\n', 'MWNo.     :KNNXOo;.           &#39;oKNWMMWNo.     :KWM\n', 'MWNd.     :KWWWW0l;;;&#39;.    ..,,,:kWMMWNo.     :KWM\n', 'MWNo.     ;0WWWWO&#39;  .,;;;;;;&#39;.  .dNWMWXo.     :KWM\n', 'MWNo.     .lkXNNO&#39;     &#39;dx;     .dXNX0d,      :KWM\n', 'MWNo.       .&#39;:dd.     .ox;     .lxl;.        :KWM\n', 'MWNo.           .      .ox;      ..           :KWM\n', 'MWNd.                  .ox;                   :KWM\n', 'MWNd.     ,dl;.        .ox;        .&#39;cdc.     :KWM\n', 'MMNx.     ;0NN0d;.     .ox;      &#39;oOXNXo.    .oXWM\n', 'MMWNOo;.  :KWMWNO&#39;     .ox;     .oXWMWNo. .,lkXWMM\n', 'MMMMWWN0xlxNWMMWO&#39;     .ox;     .dNWMMWOox0NWWMMMM\n', 'MMMMMMMMWWWMMMMWO&#39;     .ox;     .dNWMMMWWWMMMMMMMM\n', 'MMMMMMMMMMMMMMMWKc.    .ox,     ,OWMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMWXOo;. .ox; .,lkXWWMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMWWN0xx0Kkx0NWWMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMWWWWWMMMMMMMMMMMMMMMMMMMMMM\n', '* ===============================================*\n', '******************** HALO 3D *********************\n', '*\n', '* The World&#39;s FIRST Charity/Gaming Pyramid! All the features of a classic pyramid plus more.\n', '* Brought to you by a collaboration of crypto gaming experts and YouTubers.\n', '*\n', '* What is new?\n', '* [x] REVOLUTIONARY 0% TRANSFER FEES, Now you can send Halo3D tokens to all your family, no charge\n', '* [X] 20% DIVIDENDS AND MASTERNODES! We know you all love your divies :D\n', '* [x] GENEROUS 2% FEE ON EACH BUY AND SELL GO TO CHARITY https://giveth.io/\n', '*     https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '* [x] DAPP INTEROPERABILITY, games and other dAPPs can incorporate Halo3D tokens!\n', '*\n', '* Official website is https://h3d.pw/  :)\n', '* Official discord is https://discord.gg/w6HamAS 0_0\n', '*/\n', '\n', '\n', '/**\n', ' * Definition of contract accepting Halo3D tokens\n', ' * Games, casinos, anything can reuse this contract to support Halo3D tokens\n', ' */\n', 'contract AcceptsHalo3D {\n', '    Halo3D public tokenContract;\n', '\n', '    function AcceptsHalo3D(address _tokenContract) public {\n', '        tokenContract = Halo3D(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '}\n', '\n', '\n', 'contract Halo3D {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '\n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol\n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                ambassadors_[_customerAddress] == true &&\n', '\n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n', '\n', '            );\n', '\n', '            // updated the accumulated quota\n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '\n', '            // execute\n', '            _;\n', '        } else {\n', '            // in case the ether count drops low, the ambassador phase won&#39;t reinitiate\n', '            onlyAmbassadors = false;\n', '            _;\n', '        }\n', '\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Halo3D";\n', '    string public symbol = "H3D";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n', '    uint8 constant internal charityFee_ = 2; // 2% charity fee on each buy and sell\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '\n', '    // Address to send the charity  ! :)\n', '    //  https://giveth.io/\n', '    // https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '    address constant public giveEthCharityAddress = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;\n', '    uint256 public totalEthCharityRecieved; // total ETH charity recieved from this contract\n', '    uint256 public totalEthCharityCollected; // total ETH charity collected in this contract\n', '\n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '\n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 0.4 ether;\n', '    uint256 constant internal ambassadorQuota_ = 10 ether;\n', '\n', '\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '\n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '    // Special Halo3D Platform control from scam game contracts on Halo3D platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Halo3D tokens\n', '\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --\n', '    */\n', '    function Halo3D()\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[0xf4cFeD6A0f869548F73f05a364B329b86B6Bb157] = true;\n', '\n', '        // add the ambassadors here.\n', '        ambassadors_[0xf4cFeD6A0f869548F73f05a364B329b86B6Bb157] = true;\n', '        //ambassador B\n', '        ambassadors_[0xe436cbd3892c6dc3d6c8a3580153e6e0fa613cfc] = true;\n', '        //ambassador W\n', '        ambassadors_[0x922cFfa33A078B4Cc6077923e43447d8467F8B55] = true;\n', '        //ambassador B1\n', '        ambassadors_[0x8Dd512843c24c382210a9CcC9C98B8b5eEED97e8] = true;\n', '        //ambassador J\n', '        ambassadors_[0x4ffe17a2a72bc7422cb176bc71c04ee6d87ce329] = true;\n', '        //ambassador CG\n', '        ambassadors_[0x3747EaFE2Bc9cB5221879758ca24a0d15B47A9B6] = true;\n', '        //ambassador BL\n', '        ambassadors_[0xB38094D492af4FfffF760707F36869713bFb2250] = true;\n', '        //ambassador BU\n', '        ambassadors_[0xBa21d01125D6932ce8ABf3625977899Fd2C7fa30] = true;\n', '        //ambassador SW\n', '        ambassadors_[0x2e6236591bfa37c683ce60d6cfde40396a114ff1] = true;\n', '        //ambassador Tr\n', '        ambassadors_[0xa683C1b815997a7Fa38f6178c84675FC4c79AC2B] = true;\n', '        //ambassador NM\n', '        ambassadors_[0x84ECB387395a1be65E133c75Ff9e5FCC6F756DB3] = true;\n', '        //ambassador Kh\n', '        ambassadors_[0x05f2c11996d73288AbE8a31d8b593a693FF2E5D8] = true;\n', '        //ambassador KA\n', '        ambassadors_[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD] = true;\n', '        //ambassador FL\n', '        ambassadors_[0xA790fa6422A15a3637885f6811e5428de3513169] = true;\n', '        //ambassador Al\n', '        ambassadors_[0x008ca4F1bA79D1A265617c6206d7884ee8108a78] = true;\n', '        //ambassador KC\n', '        ambassadors_[0x7c377B7bCe53a5CEF88458b2cBBe11C3babe16DA] = true;\n', '        //ambassador Ph\n', '        ambassadors_[0x183feBd8828a9ac6c70C0e27FbF441b93004fC05] = true;\n', '        //ambassador CW\n', '        ambassadors_[0x29A9c76aD091c015C12081A1B201c3ea56884579] = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseInternal(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseInternal(msg.value, 0x0);\n', '    }\n', '\n', '    /**\n', '     * Sends charity money to the  https://giveth.io/\n', '     * Their charity address is here https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '     */\n', '    function payCharity() payable public {\n', '      uint256 ethToPay = SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n', '      require(ethToPay > 1);\n', '      totalEthCharityRecieved = SafeMath.add(totalEthCharityRecieved, ethToPay);\n', '      if(!giveEthCharityAddress.call.value(ethToPay).gas(400000)()) {\n', '         totalEthCharityRecieved = SafeMath.sub(totalEthCharityRecieved, ethToPay);\n', '      }\n', '    }\n', '\n', '    /**\n', '     * Converts all of caller&#39;s dividends to tokens.\n', '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '\n', '        // Take out dividends and then _charityPayout\n', '        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '\n', '        // Add ethereum to send to charity\n', '        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * REMEMBER THIS IS 0% TRANSFER FEE\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Halo3D platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsHalo3D receiver = AcceptsHalo3D(_to);\n', '        require(receiver.tokenFallback(msg.sender, _value, _data));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * Additional check that the game address we are sending tokens to is a contract\n', '     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     */\n', '     function isContract(address _addr) private constant returns (bool is_contract) {\n', '       // retrieve the size of the code on target address, this needs assembly\n', '       uint length;\n', '       assembly { length := extcodesize(_addr) }\n', '       return length > 0;\n', '     }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Add or remove game contract, which can accept Halo3D tokens\n', '     */\n', '    function setCanAcceptTokens(address _address, bool _value)\n', '      onlyAdministrator()\n', '      public\n', '    {\n', '      canAcceptTokens_[_address] = _value;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _charityPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, charityFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _charityPayout);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to show ether waiting to be send to charity in contract\n', '     */\n', '    function etherToSendCharity()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    // Make sure we will send back excess if user sends more then 5 ether before 100 ETH in contract\n', '    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n', '      notContract()// no contracts allowed\n', '      internal\n', '      returns(uint256) {\n', '\n', '      uint256 purchaseEthereum = _incomingEthereum;\n', '      uint256 excess;\n', '      if(purchaseEthereum > 5 ether) { // check if the transaction is over 5 ether\n', '          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 100 ether) { // if so check the contract is less then 100 ether\n', '              purchaseEthereum = 5 ether;\n', '              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n', '          }\n', '      }\n', '\n', '      purchaseTokens(purchaseEthereum, _referredBy);\n', '\n', '      if (excess > 0) {\n', '        msg.sender.transfer(excess);\n', '      }\n', '    }\n', '\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        antiEarlyWhale(_incomingEthereum)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, charityFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _charityPayout);\n', '\n', '        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', '        // we can&#39;t give people infinite ethereum\n', '        if(tokenSupply_ > 0){\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '\n', '        // Tells the contract that the buyer doesn&#39;t deserve dividends for the tokens before they owned them;\n', '        //really i know you think you do but you don&#39;t\n', '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', '     * It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', '******************** HALO 3D *********************\n', '* ===============================================*\n', 'MMMMMMMMMMMMMMMMMMMMMWWXKKXNWMMMMMMMMMMMMMMMMMMMMM\n', "MMMMMMMMMMMMMMMMMMWWXko;'',lkKNWWMMMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMNOc'.       .:d0XWWMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMNOc'.          .,lkKNWWMMMMMMMMMM\n", "MMMMMMMWWNKKXWWMMMWNKkl'            .:d0XWWMMMMMMM\n", "MMMMWWXOo;..'cx0NNWX0d:.               .,lkKWWMMMM\n", "MMWWKo,.       .;lc,.           .          'l0NWMM\n", "MMWOc;,'.                   .,lkOdc'.    ..,,:xNWM\n", "MWNd. .';;,.              .lOXNWWWNXOo;,,,'.  :XWM\n", "MWNo.    .ckxl,.          .'cxKNWMMMWWXd.     :KWM\n", "MWNo.     :KNNXOo;.           'oKNWMMWNo.     :KWM\n", "MWNd.     :KWWWW0l;;;'.    ..,,,:kWMMWNo.     :KWM\n", "MWNo.     ;0WWWWO'  .,;;;;;;'.  .dNWMWXo.     :KWM\n", "MWNo.     .lkXNNO'     'dx;     .dXNX0d,      :KWM\n", "MWNo.       .':dd.     .ox;     .lxl;.        :KWM\n", 'MWNo.           .      .ox;      ..           :KWM\n', 'MWNd.                  .ox;                   :KWM\n', "MWNd.     ,dl;.        .ox;        .'cdc.     :KWM\n", "MMNx.     ;0NN0d;.     .ox;      'oOXNXo.    .oXWM\n", "MMWNOo;.  :KWMWNO'     .ox;     .oXWMWNo. .,lkXWMM\n", "MMMMWWN0xlxNWMMWO'     .ox;     .dNWMMWOox0NWWMMMM\n", "MMMMMMMMWWWMMMMWO'     .ox;     .dNWMMMWWWMMMMMMMM\n", 'MMMMMMMMMMMMMMMWKc.    .ox,     ,OWMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMWXOo;. .ox; .,lkXWWMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMWWN0xx0Kkx0NWWMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMWWWWWMMMMMMMMMMMMMMMMMMMMMM\n', '* ===============================================*\n', '******************** HALO 3D *********************\n', '*\n', "* The World's FIRST Charity/Gaming Pyramid! All the features of a classic pyramid plus more.\n", '* Brought to you by a collaboration of crypto gaming experts and YouTubers.\n', '*\n', '* What is new?\n', '* [x] REVOLUTIONARY 0% TRANSFER FEES, Now you can send Halo3D tokens to all your family, no charge\n', '* [X] 20% DIVIDENDS AND MASTERNODES! We know you all love your divies :D\n', '* [x] GENEROUS 2% FEE ON EACH BUY AND SELL GO TO CHARITY https://giveth.io/\n', '*     https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '* [x] DAPP INTEROPERABILITY, games and other dAPPs can incorporate Halo3D tokens!\n', '*\n', '* Official website is https://h3d.pw/  :)\n', '* Official discord is https://discord.gg/w6HamAS 0_0\n', '*/\n', '\n', '\n', '/**\n', ' * Definition of contract accepting Halo3D tokens\n', ' * Games, casinos, anything can reuse this contract to support Halo3D tokens\n', ' */\n', 'contract AcceptsHalo3D {\n', '    Halo3D public tokenContract;\n', '\n', '    function AcceptsHalo3D(address _tokenContract) public {\n', '        tokenContract = Halo3D(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '}\n', '\n', '\n', 'contract Halo3D {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '\n', '    modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '\n', '\n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '\n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol\n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                ambassadors_[_customerAddress] == true &&\n', '\n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n', '\n', '            );\n', '\n', '            // updated the accumulated quota\n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '\n', '            // execute\n', '            _;\n', '        } else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            _;\n', '        }\n', '\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Halo3D";\n', '    string public symbol = "H3D";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n', '    uint8 constant internal charityFee_ = 2; // 2% charity fee on each buy and sell\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '\n', '    // Address to send the charity  ! :)\n', '    //  https://giveth.io/\n', '    // https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '    address constant public giveEthCharityAddress = 0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc;\n', '    uint256 public totalEthCharityRecieved; // total ETH charity recieved from this contract\n', '    uint256 public totalEthCharityCollected; // total ETH charity collected in this contract\n', '\n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '\n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 0.4 ether;\n', '    uint256 constant internal ambassadorQuota_ = 10 ether;\n', '\n', '\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '\n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '    // Special Halo3D Platform control from scam game contracts on Halo3D platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Halo3D tokens\n', '\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --\n', '    */\n', '    function Halo3D()\n', '        public\n', '    {\n', '        // add administrators here\n', '        administrators[0xf4cFeD6A0f869548F73f05a364B329b86B6Bb157] = true;\n', '\n', '        // add the ambassadors here.\n', '        ambassadors_[0xf4cFeD6A0f869548F73f05a364B329b86B6Bb157] = true;\n', '        //ambassador B\n', '        ambassadors_[0xe436cbd3892c6dc3d6c8a3580153e6e0fa613cfc] = true;\n', '        //ambassador W\n', '        ambassadors_[0x922cFfa33A078B4Cc6077923e43447d8467F8B55] = true;\n', '        //ambassador B1\n', '        ambassadors_[0x8Dd512843c24c382210a9CcC9C98B8b5eEED97e8] = true;\n', '        //ambassador J\n', '        ambassadors_[0x4ffe17a2a72bc7422cb176bc71c04ee6d87ce329] = true;\n', '        //ambassador CG\n', '        ambassadors_[0x3747EaFE2Bc9cB5221879758ca24a0d15B47A9B6] = true;\n', '        //ambassador BL\n', '        ambassadors_[0xB38094D492af4FfffF760707F36869713bFb2250] = true;\n', '        //ambassador BU\n', '        ambassadors_[0xBa21d01125D6932ce8ABf3625977899Fd2C7fa30] = true;\n', '        //ambassador SW\n', '        ambassadors_[0x2e6236591bfa37c683ce60d6cfde40396a114ff1] = true;\n', '        //ambassador Tr\n', '        ambassadors_[0xa683C1b815997a7Fa38f6178c84675FC4c79AC2B] = true;\n', '        //ambassador NM\n', '        ambassadors_[0x84ECB387395a1be65E133c75Ff9e5FCC6F756DB3] = true;\n', '        //ambassador Kh\n', '        ambassadors_[0x05f2c11996d73288AbE8a31d8b593a693FF2E5D8] = true;\n', '        //ambassador KA\n', '        ambassadors_[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD] = true;\n', '        //ambassador FL\n', '        ambassadors_[0xA790fa6422A15a3637885f6811e5428de3513169] = true;\n', '        //ambassador Al\n', '        ambassadors_[0x008ca4F1bA79D1A265617c6206d7884ee8108a78] = true;\n', '        //ambassador KC\n', '        ambassadors_[0x7c377B7bCe53a5CEF88458b2cBBe11C3babe16DA] = true;\n', '        //ambassador Ph\n', '        ambassadors_[0x183feBd8828a9ac6c70C0e27FbF441b93004fC05] = true;\n', '        //ambassador CW\n', '        ambassadors_[0x29A9c76aD091c015C12081A1B201c3ea56884579] = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseInternal(msg.value, _referredBy);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseInternal(msg.value, 0x0);\n', '    }\n', '\n', '    /**\n', '     * Sends charity money to the  https://giveth.io/\n', '     * Their charity address is here https://etherscan.io/address/0x5ADF43DD006c6C36506e2b2DFA352E60002d22Dc\n', '     */\n', '    function payCharity() payable public {\n', '      uint256 ethToPay = SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n', '      require(ethToPay > 1);\n', '      totalEthCharityRecieved = SafeMath.add(totalEthCharityRecieved, ethToPay);\n', '      if(!giveEthCharityAddress.call.value(ethToPay).gas(400000)()) {\n', '         totalEthCharityRecieved = SafeMath.sub(totalEthCharityRecieved, ethToPay);\n', '      }\n', '    }\n', '\n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '\n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '\n', '        // Take out dividends and then _charityPayout\n', '        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '\n', '        // Add ethereum to send to charity\n', '        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;\n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', '     * REMEMBER THIS IS 0% TRANSFER FEE\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n', '\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Transfer token to a specified address and forward the data to recipient\n', '    * ERC-677 standard\n', '    * https://github.com/ethereum/EIPs/issues/677\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n', '      require(_to != address(0));\n', '      require(canAcceptTokens_[_to] == true); // security check that contract approved by Halo3D platform\n', '      require(transfer(_to, _value)); // do a normal token transfer to the contract\n', '\n', '      if (isContract(_to)) {\n', '        AcceptsHalo3D receiver = AcceptsHalo3D(_to);\n', '        require(receiver.tokenFallback(msg.sender, _value, _data));\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * Additional check that the game address we are sending tokens to is a contract\n', '     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '     */\n', '     function isContract(address _addr) private constant returns (bool is_contract) {\n', '       // retrieve the size of the code on target address, this needs assembly\n', '       uint length;\n', '       assembly { length := extcodesize(_addr) }\n', '       return length > 0;\n', '     }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Add or remove game contract, which can accept Halo3D tokens\n', '     */\n', '    function setCanAcceptTokens(address _address, bool _value)\n', '      onlyAdministrator()\n', '      public\n', '    {\n', '      canAcceptTokens_[_address] = _value;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _charityPayout);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, charityFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _charityPayout);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to show ether waiting to be send to charity in contract\n', '     */\n', '    function etherToSendCharity()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n', '    }\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    // Make sure we will send back excess if user sends more then 5 ether before 100 ETH in contract\n', '    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n', '      notContract()// no contracts allowed\n', '      internal\n', '      returns(uint256) {\n', '\n', '      uint256 purchaseEthereum = _incomingEthereum;\n', '      uint256 excess;\n', '      if(purchaseEthereum > 5 ether) { // check if the transaction is over 5 ether\n', '          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 100 ether) { // if so check the contract is less then 100 ether\n', '              purchaseEthereum = 5 ether;\n', '              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n', '          }\n', '      }\n', '\n', '      purchaseTokens(purchaseEthereum, _referredBy);\n', '\n', '      if (excess > 0) {\n', '        msg.sender.transfer(excess);\n', '      }\n', '    }\n', '\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        antiEarlyWhale(_incomingEthereum)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n', '        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n', '        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, charityFee_), 100);\n', '        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _charityPayout);\n', '\n', '        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n', '\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '\n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '\n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '\n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase\n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived =\n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
