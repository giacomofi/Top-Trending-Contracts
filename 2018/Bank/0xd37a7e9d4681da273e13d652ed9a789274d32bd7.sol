['pragma solidity ^0.4.25;\n', '\n', 'interface IERC20Token {                                     \n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '}\n', '\n', 'contract LUPXSale {\n', '    IERC20Token public tokenContract ;  // the token being sold\n', '    address owner ;\n', '    uint256 public tokensSold ;\n', '    uint256 public LUPXPrice ;\n', '    \n', '    event sold(address buyer, uint256 amount) ;\n', '    event priceAdjusted(uint256 oldPrice, uint256 newPrice) ;\n', '    event endOfSale(uint256 timeStamp) ; \n', '\n', '    constructor(IERC20Token _tokenContract, uint256 LUPXperETH) public {\n', '        owner = msg.sender ;\n', '        tokenContract = _tokenContract ;\n', '        LUPXPrice = LUPXperETH ; \n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner) ; \n', '        _;\n', '    }\n', '\n', '    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0 ;\n', '        } else {\n', '            uint256 c = a * b ;\n', '            assert(c / a == b) ;\n', '            return c ;\n', '        }\n', '    }\n', '\n', '    function () public payable {\n', '        uint256 soldAmount = 0 ; \n', '        \n', '        if (msg.value <= 0.5 ether) {\n', '            soldAmount = safeMultiply(msg.value, LUPXPrice) ;\n', '        }\n', '        else {\n', '           soldAmount = safeMultiply(msg.value*2, LUPXPrice) ; \n', '        }\n', '\n', '        require(tokenContract.balanceOf(this) >= soldAmount) ;\n', '        tokenContract.transfer(msg.sender, soldAmount) ;\n', '        \n', '        tokensSold += soldAmount/10**18 ; \n', '        emit sold(msg.sender, soldAmount/10**18) ; \n', '        \n', '        require(LUPXPrice >= 500) ; \n', '        LUPXPrice -= 500 ; \n', '    }\n', '    \n', '    function withdrawETH() public  onlyOwner {  //withdraw ether from contract\n', '        msg.sender.transfer(address(this).balance) ;  \n', '    }\n', '\n', '    function endLUPXSale() public onlyOwner {             //only the owner can stop the sale\n', '        require(tokenContract.transfer(owner, tokenContract.balanceOf(this))) ;\n', '        msg.sender.transfer(address(this).balance) ;\n', '        emit endOfSale(now) ; \n', '    }\n', '}']