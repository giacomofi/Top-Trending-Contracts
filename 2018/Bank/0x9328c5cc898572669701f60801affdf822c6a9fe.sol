['pragma solidity 0.4.18;\n', '\n', 'contract ETHx2 {\n', '    event NewParticipant(address owner, uint256 cost, uint256 new_price);\n', '\n', '    struct Cost {\n', '        address owner;\n', '        uint256 cost;\n', '    }\n', '\n', '    mapping(uint256 => Cost) public participant;\n', '    mapping(address => string) public msgs;\n', '\n', '    address public adminAddress;\n', '    uint256 public seatPrice = 5000000000000000;\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == adminAddress);\n', '        _;\n', '    }\n', '\n', '    function ETHx2() public {\n', '        adminAddress = msg.sender;\n', '        participant[1] = Cost(msg.sender, 0);\n', '        participant[2] = Cost(msg.sender, 0);\n', '        participant[3] = Cost(msg.sender, 0);\n', '        participant[4] = Cost(msg.sender, 0);\n', '        participant[5] = Cost(msg.sender, 0);\n', '        participant[6] = Cost(msg.sender, 0);\n', '        participant[7] = Cost(msg.sender, 0);\n', '        participant[8] = Cost(msg.sender, 0);\n', '        participant[9] = Cost(msg.sender, 0);\n', '        participant[10] = Cost(msg.sender, 0);\n', '        msgs[msg.sender] = "Claim this spot!";\n', '    }\n', '\n', '    function getETHx2(uint256 _slot) public view returns(\n', '        uint256 slot,\n', '        address owner,\n', '        uint256 cost,\n', '        string message\n', '    ) {\n', '        slot = _slot;\n', '        owner = participant[_slot].owner;\n', '        cost = participant[_slot].cost;\n', '        message = msgs[participant[_slot].owner];\n', '    }\n', '\n', '    function purchase() public payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value >= seatPrice);\n', '        uint256 excess = SafeMath.sub(msg.value, seatPrice);\n', '        participant[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[10].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[10] = participant[9];\n', '        participant[9] = participant[8];\n', '        participant[8] = participant[7];\n', '        participant[7] = participant[6];\n', '        participant[6] = participant[5];\n', '        participant[5] = participant[4];\n', '        participant[4] = participant[3];\n', '        participant[3] = participant[2];\n', '        participant[2] = participant[1];\n', '        participant[1] = Cost(msg.sender, seatPrice);\n', '        adminAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        NewParticipant(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 115));\n', '        seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 115);\n', '        msg.sender.transfer(excess);\n', '    }\n', '\n', '    function setMessage(string message) public payable {\n', '        msgs[msg.sender] = message;\n', '    }\n', '\n', '    function payout() public onlyAdmin {\n', '        adminAddress.transfer(this.balance);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity 0.4.18;\n', '\n', 'contract ETHx2 {\n', '    event NewParticipant(address owner, uint256 cost, uint256 new_price);\n', '\n', '    struct Cost {\n', '        address owner;\n', '        uint256 cost;\n', '    }\n', '\n', '    mapping(uint256 => Cost) public participant;\n', '    mapping(address => string) public msgs;\n', '\n', '    address public adminAddress;\n', '    uint256 public seatPrice = 5000000000000000;\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == adminAddress);\n', '        _;\n', '    }\n', '\n', '    function ETHx2() public {\n', '        adminAddress = msg.sender;\n', '        participant[1] = Cost(msg.sender, 0);\n', '        participant[2] = Cost(msg.sender, 0);\n', '        participant[3] = Cost(msg.sender, 0);\n', '        participant[4] = Cost(msg.sender, 0);\n', '        participant[5] = Cost(msg.sender, 0);\n', '        participant[6] = Cost(msg.sender, 0);\n', '        participant[7] = Cost(msg.sender, 0);\n', '        participant[8] = Cost(msg.sender, 0);\n', '        participant[9] = Cost(msg.sender, 0);\n', '        participant[10] = Cost(msg.sender, 0);\n', '        msgs[msg.sender] = "Claim this spot!";\n', '    }\n', '\n', '    function getETHx2(uint256 _slot) public view returns(\n', '        uint256 slot,\n', '        address owner,\n', '        uint256 cost,\n', '        string message\n', '    ) {\n', '        slot = _slot;\n', '        owner = participant[_slot].owner;\n', '        cost = participant[_slot].cost;\n', '        message = msgs[participant[_slot].owner];\n', '    }\n', '\n', '    function purchase() public payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value >= seatPrice);\n', '        uint256 excess = SafeMath.sub(msg.value, seatPrice);\n', '        participant[1].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[2].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[3].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[4].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[5].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[6].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[7].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[8].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[9].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[10].owner.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        participant[10] = participant[9];\n', '        participant[9] = participant[8];\n', '        participant[8] = participant[7];\n', '        participant[7] = participant[6];\n', '        participant[6] = participant[5];\n', '        participant[5] = participant[4];\n', '        participant[4] = participant[3];\n', '        participant[3] = participant[2];\n', '        participant[2] = participant[1];\n', '        participant[1] = Cost(msg.sender, seatPrice);\n', '        adminAddress.transfer(uint256(SafeMath.mul(SafeMath.div(seatPrice, 100), SafeMath.div(100, SafeMath.div(200, 17)))));\n', '        NewParticipant(msg.sender, seatPrice, SafeMath.mul(SafeMath.div(seatPrice, 100), 115));\n', '        seatPrice = SafeMath.mul(SafeMath.div(seatPrice, 100), 115);\n', '        msg.sender.transfer(excess);\n', '    }\n', '\n', '    function setMessage(string message) public payable {\n', '        msgs[msg.sender] = message;\n', '    }\n', '\n', '    function payout() public onlyAdmin {\n', '        adminAddress.transfer(this.balance);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
