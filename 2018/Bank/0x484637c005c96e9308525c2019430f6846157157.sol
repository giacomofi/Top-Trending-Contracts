['pragma solidity ^0.4.24;\n', '\n', 'contract Subscribers {\n', '\n', '    address public owner;\n', '\n', '    uint256 public monthlyPrice = 0.01 ether;\n', '    uint256 public annualPrice = 0.1 ether;\n', '\n', '    struct Subscriber {\n', '        uint256 expires;\n', '        address addy;\n', '    }\n', '\n', '    mapping (bytes32 => Subscriber) public subs;\n', '\n', '    event Subscribed(bytes32 emailHash, uint8 mode, address subber);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _owner) onlyOwner external {\n', '        withdraw();\n', '        owner = _owner;\n', '    }\n', '\n', '    function setMonthlyPrice(uint256 _price) onlyOwner external {\n', '        monthlyPrice = _price;\n', '    }\n', '\n', '    function setAnnualPrice(uint256 _price) onlyOwner external {\n', '        annualPrice = _price;\n', '    }\n', '\n', '    function subscribeMe(uint8 _monthOrYear, bytes32 _email) external payable {\n', '        subscribe(msg.sender, _monthOrYear, _email);\n', '    }\n', '\n', '    function subscribe(address _subscriber, uint8 _monthOrYear, bytes32 _email) public payable {\n', '        \n', '        // Extend sub if already subbed\n', '        uint256 from = subs[_email].expires;\n', '        if (from == 0) {\n', '            from = now;\n', '        }\n', '\n', '        uint256 requiredPrice = (_monthOrYear == 1) ? monthlyPrice : annualPrice;\n', '        require(msg.value >= requiredPrice);\n', '        \n', '        uint256 requiredDuration = (_monthOrYear == 1) ? 2629746 : 31556952;\n', '        subs[_email] = Subscriber(from + requiredDuration, _subscriber);\n', '\n', '        emit Subscribed(_email, _monthOrYear, _subscriber);\n', '    }\n', '\n', '    function withdraw() onlyOwner public {\n', '        address(owner).transfer(address(this).balance);\n', '    }\n', '\n', '    function freeSub(address _subscriber, uint8 _monthOrYear, bytes32 _email) onlyOwner external {\n', '        uint256 requiredDuration = (_monthOrYear == 1) ? 2629746 : 31556952;\n', '        subs[_email] = Subscriber(now + requiredDuration, _subscriber);\n', '\n', '        emit Subscribed(_email, _monthOrYear, _subscriber);\n', '    }\n', '\n', '    function checkExpires(bytes32 _email) public view returns (uint256) {\n', '        return subs[_email].expires;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Subscribers {\n', '\n', '    address public owner;\n', '\n', '    uint256 public monthlyPrice = 0.01 ether;\n', '    uint256 public annualPrice = 0.1 ether;\n', '\n', '    struct Subscriber {\n', '        uint256 expires;\n', '        address addy;\n', '    }\n', '\n', '    mapping (bytes32 => Subscriber) public subs;\n', '\n', '    event Subscribed(bytes32 emailHash, uint8 mode, address subber);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _owner) onlyOwner external {\n', '        withdraw();\n', '        owner = _owner;\n', '    }\n', '\n', '    function setMonthlyPrice(uint256 _price) onlyOwner external {\n', '        monthlyPrice = _price;\n', '    }\n', '\n', '    function setAnnualPrice(uint256 _price) onlyOwner external {\n', '        annualPrice = _price;\n', '    }\n', '\n', '    function subscribeMe(uint8 _monthOrYear, bytes32 _email) external payable {\n', '        subscribe(msg.sender, _monthOrYear, _email);\n', '    }\n', '\n', '    function subscribe(address _subscriber, uint8 _monthOrYear, bytes32 _email) public payable {\n', '        \n', '        // Extend sub if already subbed\n', '        uint256 from = subs[_email].expires;\n', '        if (from == 0) {\n', '            from = now;\n', '        }\n', '\n', '        uint256 requiredPrice = (_monthOrYear == 1) ? monthlyPrice : annualPrice;\n', '        require(msg.value >= requiredPrice);\n', '        \n', '        uint256 requiredDuration = (_monthOrYear == 1) ? 2629746 : 31556952;\n', '        subs[_email] = Subscriber(from + requiredDuration, _subscriber);\n', '\n', '        emit Subscribed(_email, _monthOrYear, _subscriber);\n', '    }\n', '\n', '    function withdraw() onlyOwner public {\n', '        address(owner).transfer(address(this).balance);\n', '    }\n', '\n', '    function freeSub(address _subscriber, uint8 _monthOrYear, bytes32 _email) onlyOwner external {\n', '        uint256 requiredDuration = (_monthOrYear == 1) ? 2629746 : 31556952;\n', '        subs[_email] = Subscriber(now + requiredDuration, _subscriber);\n', '\n', '        emit Subscribed(_email, _monthOrYear, _subscriber);\n', '    }\n', '\n', '    function checkExpires(bytes32 _email) public view returns (uint256) {\n', '        return subs[_email].expires;\n', '    }\n', '\n', '}']
