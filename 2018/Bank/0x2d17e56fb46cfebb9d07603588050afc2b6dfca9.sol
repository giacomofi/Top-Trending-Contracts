['pragma solidity ^0.4.25;\n', '\n', '/*\n', '\n', '\n', ' ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄        ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ \n', '▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌      ▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌\n', '▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌     ▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀ \n', '▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌     ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌       ▐░▌     ▐░▌     \n', '▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     \n', '▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     \n', '▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌     ▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀█░█▀▀      ▐░▌     \n', '▐░▌     ▐░▌  ▐░▌          ▐░▌       ▐░▌     ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌     ▐░▌       ▐░▌     \n', '▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌      ▐░▌      ▐░▌     \n', '▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌      ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░▌     \n', ' ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀        ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀       ▀      \n', '                                                                                                             \n', '\n', 'website:    https://redalert.ga\n', '\n', 'discord:    https://discord.gg/8AFP9gS\n', '\n', '20% Dividends Fees/Payouts for Exchange\n', '\n', '2.5% Buy Fee for Bomb Shelter Insurance\n', '\n', '2.5% Buy Fee for Bomb Shelter Card Yield Dividends\n', '\n', '\n', '\n', 'Bomb Shelter Card Game:\n', '\n', 'While you hold a Bomb Shelter Card you will receive dividend Yield Payouts from the Exchange \n', 'and from other Card Transactions.\n', '\n', 'When someone buys your Bomb Shelter Card:\n', '   - The card price automatically increases by 25%\n', '   - The previous owner receives the amount the prior card price plus 45% of the price gain\n', '   - Other card holders receive 40% of the gain split in relation to their yield amounts\n', '   - 5% of the gain goes to the exchange token holders as dividends\n', '   - 5% of the gain goes to bomb shelter insurance\n', '\n', 'Every 8 Hours there is a Red Alert Scramble lasting 1 Hour\n', '\n', 'During the alert the Bomb Shelter Card Half Life Time is 25 Minutes\n', '\n', 'During Each 7 Hour All Clear Period the Half Life Time is 5 Hours\n', '\n', 'If you hold a Bomb Shelter Card when it experiences a Half-life Cut:\n', '\n', '   - Your Bomb Shelter Price will reduce by 3%\n', '   - You will receive 5% of the Shelter Insurance Fund on every Half-Life Cut\n', '\n', '\n', 'Referral Program pays out 33% of Exchange Buy-in Fees to user of masternode link\n', '\n', '*/\n', '\n', 'contract AcceptsExchange {\n', '    redalert public tokenContract;\n', '\n', '    function AcceptsExchange(address _tokenContract) public {\n', '        tokenContract = redalert(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC677 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n', '    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\n', '}\n', '\n', 'contract redalert {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends(true) > 0 || ownerAccounts[msg.sender] > 0);\n', '        //require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', '      modifier notContract() {\n', '      require (msg.sender == tx.origin);\n', '      _;\n', '    }\n', '\n', '    modifier allowPlayer(){\n', '        \n', '        require(boolAllowPlayer);\n', '        _;\n', '    }\n', '\n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[_customerAddress]);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyActive(){\n', '        require(boolContractActive);\n', '        _;\n', '    }\n', '\n', '     modifier onlyCardActive(){\n', '        require(boolCardActive);\n', '        _;\n', '    }\n', '\n', '    \n', '    // ensures that the first tokens in the contract will be equally distributed\n', '    // meaning, no divine dump will be ever possible\n', '    // result: healthy longevity.\n', '    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // are we still in the vulnerable phase?\n', '        // if so, enact anti early whale protocol \n', '        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n', '            require(\n', '                // is the customer in the ambassador list?\n', '                (ambassadors_[_customerAddress] == true &&\n', '                \n', '                // does the customer purchase exceed the max ambassador quota?\n', '                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_) ||\n', '\n', '                (_customerAddress == dev)\n', '                \n', '            );\n', '            \n', '            // updated the accumulated quota    \n', '            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n', '        \n', '            // execute\n', '            _;\n', '        } else {\n', "            // in case the ether count drops low, the ambassador phase won't reinitiate\n", '            onlyAmbassadors = false;\n', '            _;    \n', '        }\n', '        \n', '    }\n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event onCardBuy(\n', '        address customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 card,\n', '        uint256 newPrice,\n', '        uint256 halfLifeTime\n', '    );\n', '\n', '    event onInsuranceChange(\n', '        address customerAddress,\n', '        uint256 card,\n', '        uint256 insuranceAmount\n', '    );\n', '\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '       // HalfLife\n', '    event Halflife(\n', '        address customerAddress,\n', '        uint card,\n', '        uint price,\n', '        uint newBlockTime,\n', '        uint insurancePay,\n', '        uint cardInsurance\n', '    );\n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "RedAlert";\n', '    string public symbol = "REDS";\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    \n', '    // proof of stake (defaults at 100 tokens)\n', '    uint256 public stakingRequirement = 100e18;\n', '    \n', '    // ambassador program\n', '    mapping(address => bool) internal ambassadors_;\n', '    uint256 constant internal ambassadorMaxPurchase_ = 3 ether;\n', '    uint256 constant internal ambassadorQuota_ = 100 ether;\n', '    \n', '    address dev;\n', '\n', '    uint public nextAvailableCard;\n', '\n', '    address add2 = 0x0;\n', '\n', '    uint public totalCardValue = 0;\n', '\n', '    uint public totalCardInsurance = 0;\n', '\n', '    bool public boolAllowPlayer = false;\n', '\n', '    //TIME\n', '    struct DateTime {\n', '        uint16 year;\n', '        uint8 month;\n', '        uint8 day;\n', '        uint8 hour;\n', '        uint8 minute;\n', '        uint8 second;\n', '        uint8 weekday;\n', '    }\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant YEAR_IN_SECONDS = 31536000;\n', '    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint constant HOUR_IN_SECONDS = 3600;\n', '    uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '\n', '    //CARDS\n', '    mapping(uint => address) internal cardOwner;\n', '    mapping(uint => uint) public cardPrice;\n', '    mapping(uint => uint) public basePrice;\n', '    mapping(uint => uint) internal cardPreviousPrice;\n', '    mapping(address => uint) internal ownerAccounts;\n', '    mapping(uint => uint) internal totalCardDivs;\n', '    mapping(uint => uint) internal totalCardDivsETH;\n', '    mapping(uint => string) internal cardName;\n', '    mapping(uint => uint) internal cardInsurance;\n', '\n', '    uint public cardInsuranceAccount;\n', '\n', '    uint cardPriceIncrement = 1250;   //25% Price Increases\n', '   \n', '    uint totalDivsProduced;\n', '\n', '    //card rates\n', '    uint public ownerDivRate = 450;     //Split to previous card owner  45%\n', '    uint public distDivRate = 400;      //Split to other card owners  40%\n', '    uint public devDivRate = 50;        //Dev 5%\n', '    uint public insuranceDivRate = 50;  //Split to Shelter Insurance Accounts 5%\n', '    uint public yieldDivRate = 50;      //Split back to Exchange Token Holders 5%\n', '    uint public referralRate = 50;      //Split to Referrals if allowed 5%\n', '    \n', '    mapping(uint => uint) internal cardBlockNumber;\n', '\n', '    uint public halfLifeTime = 5900;            //1 day half life period\n', '    uint public halfLifeRate = 970;             //cut price by 3% each half life period\n', '    uint public halfLifeReductionRate = 970;    //cut previous price by 3%\n', '\n', '\n', '    uint public halfLifeClear = 1230;     //Half-Life Clear Period(5 Hours)\n', '    uint public halfLifeAlert = 100;     //Half-Life Alert Period(25 Mins)\n', '\n', '    bool public allowHalfLife = true;  //for cards\n', '\n', '    bool public allowReferral = false;  //for cards\n', '\n', '    uint public insurancePayoutRate = 50; //pay 5% of the remaining insurance fund for that card on each half-life\n', '\n', '    uint8 public dividendFee_ = 150;            \n', '\n', '    uint8 public dividendFeeBuyClear_ = 150;\n', '    uint8 public dividendFeeSellClear_ = 200;\n', '\n', '    uint8 public dividendFeeBuyAlert_ = 150;\n', '    uint8 public dividendFeeSellAlert_ = 200;\n', '\n', '    uint8 public cardInsuranceFeeRate_ = 25;    // 2.5% fee rate on each buy and sell for Shelter Card Insurance\n', '    uint8 public yieldDividendFeeRate_ = 25;    // 2.5% fee rate on each buy and sell for Shelter Card Yield Dividends\n', '\n', '    //uint8 public investorFeeRate_ = 10;//10;  // 1% fee for investors\n', '\n', '    uint public maxCards = 50;\n', '\n', '    bool public boolContractActive = false;\n', '    bool public boolCardActive = false;\n', '\n', '    // administrator list (see above on what they can do)\n', '    mapping(address => bool) public administrators;\n', '    \n', '    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    bool public onlyAmbassadors = true;\n', '\n', '      // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\n', '    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\n', '\n', '    uint public alertTime1 = 0;\n', '    uint public alertTime2 = 8;\n', '    uint public alertTime3 = 16;\n', '\n', '    uint public lastHour = 0;\n', '\n', '    bool public boolAlertStatus = false;\n', '\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    function redalert()\n', '    public\n', '    {\n', '        allowHalfLife = true;\n', '        allowReferral = false;\n', '\n', '        // add administrators here\n', '        administrators[msg.sender] = true;\n', '\n', '        dev = msg.sender;\n', '\n', '        ambassadors_[dev] = true;\n', '        ambassadors_[0x96762288ebb2560a19F8eAdAaa2012504F64278B] = true;\n', '        ambassadors_[0x5145A296e1bB9d4Cf468d6d97d7B6D15700f39EF] = true;\n', '        ambassadors_[0xE74b1ea522B9d558C8e8719c3b1C4A9050b531CA] = true;\n', '        ambassadors_[0xb62A0AC2338C227748E3Ce16d137C6282c9870cF] = true;\n', '        ambassadors_[0x836e5abac615b371efce0ab399c22a04c1db5ecf] = true;\n', '        ambassadors_[0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61] = true;\n', '        ambassadors_[0x38602d1446fe063444B04C3CA5eCDe0cbA104240] = true;\n', '        ambassadors_[0x3825c8BA07166f34cE9a2cD1e08A68b105c82cB9] = true;\n', '        ambassadors_[0xa6662191F558e4C611c8f14b50c784EDA9Ace98d] = true;\n', '        ambassadors_[0xC697BE0b5b82284391A878B226e2f9AfC6B94710] = true;\n', '        ambassadors_[0x03Ba7aC9fa34E2550dE27B33Cb7eBc8d2618A263] = true;\n', '        ambassadors_[0x79562dcCFAad8871E2eC1C37172Cb1ce969b04Fd] = true;\n', '        \n', '        ambassadors_[0x41fe3738b503cbafd01c1fd8dd66b7fe6ec11b01] = true;\n', '        ambassadors_[0x96762288ebb2560a19f8eadaaa2012504f64278b] = true;\n', '        ambassadors_[0xc29a6dd21801e58566df9f003b7011e30724543e] = true;\n', '        ambassadors_[0xc63ea85cc823c440319013d4b30e19b66466642d] = true;\n', '        ambassadors_[0xc6f827796a2e1937fd7f97c4e0a4906c476794f6] = true;\n', '        ambassadors_[0xe74b1ea522b9d558c8e8719c3b1c4a9050b531ca] = true;\n', '        ambassadors_[0x6b90d498062140c607d03fd642377eeaa325703e] = true;\n', '        ambassadors_[0x5f1088110edcba27fc206cdcc326b413b5867361] = true;\n', '        ambassadors_[0xc92fd0e554b12eb10f584819eec2394a9a6f3d1d] = true;\n', '        ambassadors_[0xb62a0ac2338c227748e3ce16d137c6282c9870cf] = true;\n', '        ambassadors_[0x3f6c42409da6faf117095131168949ab81d5947d] = true;\n', '        ambassadors_[0xd54c47b3165508fb5418dbdec59a0d2448eeb3d7] = true;\n', '        ambassadors_[0x285d366834afaa8628226e65913e0dd1aa26b1f8] = true;\n', '        ambassadors_[0x285d366834afaa8628226e65913e0dd1aa26b1f8] = true;\n', '        ambassadors_[0x5f5996f9e1960655d6fc00b945fef90672370d9f] = true;\n', '        ambassadors_[0x3825c8ba07166f34ce9a2cd1e08a68b105c82cb9] = true;\n', '        ambassadors_[0x7f3e05b4f258e1c15a0ef49894cffa1d89ceb9d3] = true;\n', '        ambassadors_[0x3191acf877495e5f4e619ec722f6f38839182660] = true;\n', '        ambassadors_[0x14f981ec7b0f59df6e1c56502e272298f221d763] = true;\n', '        ambassadors_[0xae817ec70d8b621bb58a047e63c31445f79e20dc] = true;\n', '        ambassadors_[0xc43af3becac9c810384b69cf061f2d7ec73105c4] = true;\n', '        ambassadors_[0x0743469569ed5cc44a51216a1bf5ad7e7f90f40e] = true;\n', '        ambassadors_[0xff6a4d0ed374ba955048664d6ef5448c6cd1d56a] = true;\n', '        ambassadors_[0x62358a483311b3de29ae987b990e19de6259fa9c] = true;\n', '        ambassadors_[0xa0fea1bcfa32713afdb73b9908f6cb055022e95f] = true;\n', '        ambassadors_[0xb2af816608e1a4d0fb12b81028f32bac76256eba] = true;\n', '        ambassadors_[0x977193d601b364f38ab1a832dbaef69ca7833992] = true;\n', '        ambassadors_[0xed3547f0ed028361685b39cd139aa841df6629ab] = true;\n', '        ambassadors_[0xe40ff298079493cba637d92089e3d1db403974cb] = true;\n', '        ambassadors_[0xae3dc7fa07f9dd030fa56c027e90998ed9fe9d61] = true;\n', '        ambassadors_[0x2dd35e7a6f5fcc28d146c04be641f969f6d1e403] = true;\n', '        ambassadors_[0x2afe21ec5114339922d38546a3be7a0b871d3a0d] = true;\n', '        ambassadors_[0x6696fee394bb224d0154ea6b58737dca827e1960] = true;\n', '        ambassadors_[0xccdf159b1340a35c3567b669c836a88070051314] = true;\n', '        ambassadors_[0x1c3416a34c86f9ddcd05c7828bf5693308d19e0b] = true;\n', '        ambassadors_[0x846dedb19b105edafac2c9410fa2b5e73b596a14] = true;\n', '        ambassadors_[0x3e9294f9b01bc0bcb91413112c75c3225c65d0b3] = true;\n', '        ambassadors_[0x3a5ce61c74343dde474bad4210cccf1dac7b1934] = true;\n', '        ambassadors_[0x38e123f89a7576b2942010ad1f468cc0ea8f9f4b] = true;\n', '        ambassadors_[0xdcd8bad894035b5c554ad450ca84ae6be0b73122] = true;\n', '        ambassadors_[0xcfab320d4379a84fe3736eccf56b09916e35097b] = true;\n', '        ambassadors_[0x12f53c1d7caea0b41010a0e53d89c801ed579b5a] = true;\n', '        ambassadors_[0x5145a296e1bb9d4cf468d6d97d7b6d15700f39ef] = true;\n', '        ambassadors_[0xac707a1b4396a309f4ad01e3da4be607bbf14089] = true;\n', '        ambassadors_[0x38602d1446fe063444b04c3ca5ecde0cba104240] = true;\n', '        ambassadors_[0xc951d3463ebba4e9ec8ddfe1f42bc5895c46ec8f] = true;\n', '        ambassadors_[0x69e566a65d00ad5987359db9b3ced7e1cfe9ac69] = true;\n', '        ambassadors_[0x533b14f6d04ed3c63a68d5e80b7b1f6204fb4213] = true;\n', '        ambassadors_[0x5fa0b03bee5b4e6643a1762df718c0a4a7c1842f] = true;\n', '        ambassadors_[0xb74d5f0a81ce99ac1857133e489bc2b4954935ff] = true;\n', '        ambassadors_[0xc371117e0adfafe2a3b7b6ba71b7c0352ca7789d] = true;\n', '        ambassadors_[0xcade49e583bc226f19894458f8e2051289f1ac85] = true;\n', '        ambassadors_[0xe3fc95aba6655619db88b523ab487d5273db484f] = true;\n', '        ambassadors_[0x22e4d1433377a2a18452e74fd4ba9eea01824f7d] = true;\n', '        ambassadors_[0x32ae5eff81881a9a70fcacada5bb1925cabca508] = true;\n', '        ambassadors_[0xb864d177c291368b52a63a95eeff36e3731303c1] = true;\n', '        ambassadors_[0x46091f77b224576e224796de5c50e8120ad7d764] = true;\n', '        ambassadors_[0xc6407dd687a179aa11781b8a1e416bd0515923c2] = true;\n', '        ambassadors_[0x2502ce06dcb61ddf5136171768dfc08d41db0a75] = true;\n', '        ambassadors_[0x6b80ca9c66cdcecc39893993df117082cc32bb16] = true;\n', '        ambassadors_[0xa511ddba25ffd74f19a400fa581a15b5044855ce] = true;\n', '        ambassadors_[0xce81d90ae52d34588a95db59b89948c8fec487ce] = true;\n', '        ambassadors_[0x6d60dbf559bbf0969002f19979cad909c2644dad] = true;\n', '        ambassadors_[0x45101255a2bcad3175e6fda4020a9b77e6353a9a] = true;\n', '        ambassadors_[0xe9078d7539e5eac3b47801a6ecea8a9ec8f59375] = true;\n', '        ambassadors_[0x41a21b264f9ebf6cf571d4543a5b3ab1c6bed98c] = true;\n', '        ambassadors_[0x471e8d970c30e61403186b6f245364ae790d14c3] = true;\n', '        ambassadors_[0x6eb7f74ff7f57f7ba45ca71712bccef0588d8f0d] = true;\n', '        ambassadors_[0xe6d6bc079d76dc70fcec5de84721c7b0074d164b] = true;\n', '        ambassadors_[0x3ec5972c2177a08fd5e5f606f19ab262d28ceffe] = true;\n', '        ambassadors_[0x108b87a18877104e07bd870af70dfc2487447262] = true;\n', '        ambassadors_[0x3129354440e4639d2b809ca03d4ccc6277ac8167] = true;\n', '        ambassadors_[0x21572b6a855ee8b1392ed1003ecf3474fa83de3e] = true;\n', '        ambassadors_[0x75ab98f33a7a60c4953cb907747b498e0ee8edf7] = true;\n', '        ambassadors_[0x0fe6967f9a5bb235fc74a63e3f3fc5853c55c083] = true;\n', '        ambassadors_[0x49545640b9f3266d13cce842b298d450c0f8d776] = true;\n', '        ambassadors_[0x9327128ead2495f60d41d3933825ffd8080d4d42] = true;\n', '        ambassadors_[0x82b4e53a7d6bf6c72cc57f8d70dae90a34f0870f] = true;\n', '        ambassadors_[0xb74d5f0a81ce99ac1857133e489bc2b4954935ff] = true;\n', '        ambassadors_[0x3749d556c167dd73d536a6faaf0bb4ace8f7dab9] = true;\n', '        ambassadors_[0x3039f6857071692b540d9e1e759a0add93af3fed] = true;\n', '        ambassadors_[0xb74d5f0a81ce99ac1857133e489bc2b4954935ff] = true;\n', '     \n', '        \n', '        nextAvailableCard = 13;\n', '\n', '        cardOwner[1] = dev;\n', '        cardPrice[1] = 5 ether;\n', '        basePrice[1] = cardPrice[1];\n', '        cardPreviousPrice[1] = 0;\n', '\n', '        cardOwner[2] = dev;\n', '        cardPrice[2] = 4 ether;\n', '        basePrice[2] = cardPrice[2];\n', '        cardPreviousPrice[2] = 0;\n', '\n', '        cardOwner[3] = dev;\n', '        cardPrice[3] = 3 ether;\n', '        basePrice[3] = cardPrice[3];\n', '        cardPreviousPrice[3] = 0;\n', '\n', '        cardOwner[4] = dev;\n', '        cardPrice[4] = 2 ether;\n', '        basePrice[4] = cardPrice[4];\n', '        cardPreviousPrice[4] = 0;\n', '\n', '        cardOwner[5] = dev;\n', '        cardPrice[5] = 1.5 ether;\n', '        basePrice[5] = cardPrice[5];\n', '        cardPreviousPrice[5] = 0;\n', '\n', '        cardOwner[6] = dev;\n', '        cardPrice[6] = 1 ether;\n', '        basePrice[6] = cardPrice[6];\n', '        cardPreviousPrice[6] = 0;\n', '\n', '        cardOwner[7] = dev;\n', '        cardPrice[7] = 0.9 ether;\n', '        basePrice[7] = cardPrice[7];\n', '        cardPreviousPrice[7] = 0;\n', '\n', '        cardOwner[8] = dev;\n', '        cardPrice[8] = 0.7 ether;\n', '        basePrice[8] = cardPrice[8];\n', '        cardPreviousPrice[8] = 0;\n', '\n', '        cardOwner[9] = 0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61;\n', '        cardPrice[9] = 0.5 ether;\n', '        basePrice[9] = cardPrice[9];\n', '        cardPreviousPrice[9] = 0;\n', '\n', '        cardOwner[10] = dev;\n', '        cardPrice[10] = 0.4 ether;\n', '        basePrice[10] = cardPrice[10];\n', '        cardPreviousPrice[10] = 0;\n', '\n', '        cardOwner[11] = dev;\n', '        cardPrice[11] = 0.2 ether;\n', '        basePrice[11] = cardPrice[11];\n', '        cardPreviousPrice[11] = 0;\n', '\n', '        cardOwner[12] = dev;\n', '        cardPrice[12] = 0.1 ether;\n', '        basePrice[12] = cardPrice[12];\n', '        cardPreviousPrice[12] = 0;\n', '\n', '        getTotalCardValue();\n', '\n', '    }\n', '    \n', '     \n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '    }\n', '    \n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     * Unfortunately we cannot use a referral address this way.\n', '     */\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n', '        \n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // retrieve ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n', '        \n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '        checkHalfLife();\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        // lambo delivery service\n', '        withdraw();\n', '        checkHalfLife();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyStronghands()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n', '        \n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '        \n', '        // add ref. bonus\n', '        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\n', '        referralBalance_[_customerAddress] = 0;\n', '        ownerAccounts[_customerAddress] = 0;\n', '        \n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '        \n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '        checkHalfLife();\n', '    }\n', '    \n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens)\n', '    \n', '        onlyBagholders()\n', '        public\n', '    {\n', '        // setup data\n', '        uint8 localDivFee = 200;\n', '        lastHour = getHour(block.timestamp);\n', '        if (getHour(block.timestamp) == alertTime1 || getHour(block.timestamp) == alertTime2 || getHour(block.timestamp) == alertTime3){\n', '            boolAlertStatus = true;\n', '            localDivFee = dividendFeeBuyAlert_;\n', '        }else{\n', '            boolAlertStatus = false;\n', '            localDivFee = dividendFeeBuyClear_;\n', '        }\n', '\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, localDivFee),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        \n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n', '        \n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlyBagholders()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        uint8 localDivFee = 200;\n', '        lastHour = getHour(block.timestamp);\n', '        if (getHour(block.timestamp) == alertTime1 || getHour(block.timestamp) == alertTime2 || getHour(block.timestamp) == alertTime3){\n', '            boolAlertStatus = true;\n', '            localDivFee = dividendFeeBuyAlert_;\n', '        }else{\n', '            boolAlertStatus = false;\n', '            localDivFee = dividendFeeBuyClear_;\n', '        }\n', '\n', "        if (msg.sender == dev){   //exempt the dev from transfer fees so we can do some promo, you'll thank me in the morning\n", '            localDivFee = 0;\n', '        }\n', '\n', '        \n', '        // make sure we have the requested tokens\n', '        // also disables transfers until ambassador phase is over\n', '        // ( we dont want whale premines )\n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        \n', '        // withdraw all outstanding dividends first\n', '        if(myDividends(true) > 0) withdraw();\n', '        \n', '        // liquify 20% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, localDivFee),1000);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '        \n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '        \n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        \n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '        checkHalfLife();\n', '        \n', '        // ERC20\n', '        return true;\n', '       \n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setAdministrator(address _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '\n', '    function setAllowHalfLife(bool _allow)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        allowHalfLife = _allow;\n', '    \n', '    }\n', '\n', '    function setAllowReferral(bool _allow)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        allowReferral = _allow;  //for cards\n', '    \n', '    }\n', '\n', '    /**\n', '     * Set fees/rates\n', '     */\n', '    function setFeeRates(uint8 _newDivRate, uint8 _yieldDivFee, uint8 _newCardFee)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newDivRate <= 250);  //25%\n', '        require(_yieldDivFee <= 50);  //5% \n', '        require(_newCardFee <= 50);   //5%\n', '\n', '        dividendFee_ = _newDivRate;\n', '        yieldDividendFeeRate_ = _yieldDivFee;\n', '        cardInsuranceFeeRate_ = _newCardFee;\n', '    }\n', '\n', '    /**\n', '    * Set Exchange Rates\n', '    */\n', '    function setExchangeRates(uint8 _newBuyAlert, uint8 _newBuyClear, uint8 _newSellAlert, uint8 _newSellClear)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newBuyAlert <= 400);   //40%\n', '        require(_newBuyClear <= 400);   //40%\n', '        require(_newSellAlert <= 400);  //40%\n', '        require(_newSellClear <= 400);  //40%\n', '\n', '        dividendFeeBuyClear_ = _newBuyClear;\n', '        dividendFeeSellClear_ = _newSellClear;\n', '        dividendFeeBuyAlert_ = _newBuyAlert;\n', '        dividendFeeSellAlert_ = _newSellAlert;\n', '\n', '    }\n', '\n', '        /**\n', '    * Set Exchange Rates\n', '    */\n', '    function setInsurancePayout(uint8 _newRate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(_newRate <= 200);\n', '        insurancePayoutRate = _newRate;\n', '    }\n', '\n', '    \n', '    /**\n', '     * Set Alert Times\n', '     */\n', '    function setAlertTimes(uint _newAlert1, uint _newAlert2, uint _newAlert3)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        alertTime1 = _newAlert1;\n', '        alertTime2 = _newAlert2;\n', '        alertTime3 = _newAlert3;\n', '    }\n', '\n', '      /**\n', '     * Set HalfLifePeriods\n', '     */\n', '    function setHalfLifePeriods(uint _alert, uint _clear)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeAlert = _alert;\n', '        halfLifeClear = _clear;\n', '    }\n', '    \n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setContractActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolContractActive = _status;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setCardActive(bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        boolCardActive = _status;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Precautionary measures in case we need to adjust the masternode rate.\n', '     */\n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    \n', '    function setMaxCards(uint _card)  \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        maxCards = _card;\n', '    }\n', '\n', '    function setHalfLifeTime(uint _time)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeTime = _time;\n', '    }\n', '\n', '    function setHalfLifeRate(uint _rate)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        halfLifeRate = _rate;\n', '    }\n', '\n', '    function addNewCard(uint _price) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        require(nextAvailableCard < maxCards);\n', '        cardPrice[nextAvailableCard] = _price;\n', '        basePrice[nextAvailableCard] = cardPrice[nextAvailableCard];\n', '        cardOwner[nextAvailableCard] = dev;\n', '        totalCardDivs[nextAvailableCard] = 0;\n', '        cardPreviousPrice[nextAvailableCard] = 0;\n', '        nextAvailableCard = nextAvailableCard + 1;\n', '        getTotalCardValue();\n', '        \n', '    }\n', '\n', '\n', '    function addAmbassador(address _newAmbassador) \n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        ambassadors_[_newAmbassador] = true;\n', '    }\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     * But in the internal calculations, we want them separate. \n', '     */ \n', '    function myDividends(bool _includeReferralBonus) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    function myCardDividends()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return ownerAccounts[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        // our calculation relies on the token supply, so we need supply. Doh.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '    \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    function getTotalCardValue()\n', '    internal\n', '    view\n', '    {\n', '        uint counter = 1;\n', '        uint _totalVal = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            _totalVal = SafeMath.add(_totalVal,cardPrice[counter]);\n', '                \n', '            counter = counter + 1;\n', '        } \n', '        totalCardValue = _totalVal;\n', '            \n', '    }\n', '\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        antiEarlyWhale(_incomingEthereum)\n', '        onlyActive()\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '\n', '        // setup data\n', '        uint8 localDivFee = 200;\n', '\n', '        lastHour = getHour(block.timestamp);\n', '        if (getHour(block.timestamp) == alertTime1 || getHour(block.timestamp) == alertTime2 || getHour(block.timestamp) == alertTime3){\n', '            boolAlertStatus = true;\n', '            localDivFee = dividendFeeBuyAlert_;\n', '        }else{\n', '            boolAlertStatus = false;\n', '            localDivFee = dividendFeeBuyClear_;\n', '        }\n', '\n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000));\n', '        //uint _distDividends = SafeMath.div(SafeMath.mul(_incomingEthereum,yieldDividendFeeRate_),1000);\n', '        distributeYield(SafeMath.div(SafeMath.mul(_incomingEthereum,yieldDividendFeeRate_),1000));\n', '        \n', '        _incomingEthereum = SafeMath.sub(_incomingEthereum,SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_ + yieldDividendFeeRate_), 1000));\n', '\n', '        uint256 _referralBonus = SafeMath.div(SafeMath.div(SafeMath.mul(_incomingEthereum, localDivFee  ),1000), 3);\n', '        uint256 _dividends = SafeMath.sub(SafeMath.div(SafeMath.mul(_incomingEthereum, localDivFee  ),1000), _referralBonus);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, localDivFee),1000));\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        \n', '\n', ' \n', '        // no point in continuing execution if OP is a poorfag russian hacker\n', '        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n', '        // (or hackers)\n', '        // and yes we know that the safemath function automatically rules out the "greater then" equasion.\n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n', '        \n', '        // is the user referred by a masternode?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != msg.sender &&\n', '            \n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '        ){\n', '            // wealth redistribution\n', '            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n', '        } else {\n', '            // no ref purchase\n', '            // add the referral bonus back to the global dividends cake\n', '            _dividends = SafeMath.add(_dividends, _referralBonus);\n', '            _fee = _dividends * magnitude;\n', '        }\n', '        \n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '            \n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n', '        \n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[msg.sender] += _updatedPayouts;\n', '\n', '        \n', '        distributeInsurance();\n', '        checkHalfLife();\n', '        \n', '        // fire event\n', '        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '\n', '\n', '    function buyCard(uint _card, address _referrer)\n', '        public\n', '        payable\n', '        onlyCardActive()\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        require(_card > 0);\n', '        require(msg.value >= cardPrice[_card]);\n', '       \n', '        cardBlockNumber[_card] = block.number;   //reset block number for this card for half life calculations\n', '\n', '\n', '         //Determine the total dividends\n', '        uint _baseDividends = msg.value - cardPreviousPrice[_card];\n', '        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\n', '\n', '        //uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\n', '        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),1000);\n', '        _ownerDividends = SafeMath.add(_ownerDividends,cardPreviousPrice[_card]);  //owner receovers price they paid initially\n', '        uint _insuranceDividends = SafeMath.div(SafeMath.mul(_baseDividends,insuranceDivRate),1000);\n', '\n', '\n', '        //add dividends to the exchange tokens\n', '        uint _exchangeDivs = SafeMath.div(SafeMath.mul(_baseDividends, yieldDivRate),1000);\n', '        profitPerShare_ += (_exchangeDivs * magnitude / (tokenSupply_));\n', '\n', '        totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card],_ownerDividends);\n', '        \n', '        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, _insuranceDividends);\n', '            \n', '        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),1000);\n', '\n', '        if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\n', '                \n', '            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),1000);\n', '            _distDividends = SafeMath.sub(_distDividends,_referralDividends);\n', '            ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\n', '        }\n', '            \n', '        distributeYield(_distDividends);\n', '\n', '        //distribute dividends to accounts\n', '        address _previousOwner = cardOwner[_card];\n', '        address _newOwner = msg.sender;\n', '\n', '        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\n', '        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),1000));\n', '\n', '        cardOwner[_card] = _newOwner;\n', '\n', '        //Increment the card Price\n', '        cardPreviousPrice[_card] = msg.value;\n', '        cardPrice[_card] = SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000);\n', '  \n', '        getTotalCardValue();\n', '        distributeInsurance();\n', '        checkHalfLife();\n', '\n', '        emit onCardBuy(msg.sender, msg.value, _card, SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000), halfLifeTime + block.number);\n', '     \n', '    }\n', '\n', '\n', '    function distributeInsurance() internal\n', '    {\n', '        uint counter = 1;\n', '        uint _cardDistAmount = cardInsuranceAccount;\n', '        cardInsuranceAccount = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '  \n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_cardDistAmount, cardPrice[counter]),totalCardValue);\n', '            \n', '            cardInsurance[counter] = SafeMath.add(cardInsurance[counter], _distAmountLocal);\n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '    \n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '    }\n', '\n', '\n', '    function distributeYield(uint _distDividends) internal\n', '    //tokens\n', '    {\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_distDividends, cardPrice[counter]),totalCardValue);\n', '            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]],_distAmountLocal);\n', '            totalCardDivs[counter] = SafeMath.add(totalCardDivs[counter],_distAmountLocal);\n', '\n', '            counter = counter + 1;\n', '        } \n', '        getTotalCardValue();\n', '        checkHalfLife();\n', '    }\n', '\n', '    function extCheckHalfLife() \n', '    public\n', '    {\n', '        bool _boolDev = (msg.sender == dev);\n', '        if (_boolDev || boolAllowPlayer){\n', '            checkHalfLife();\n', '        }\n', '    }\n', '\n', '\n', '    function checkHalfLife() \n', '    internal\n', '    \n', '    //tokens\n', '    {\n', '\n', '        uint localHalfLifeTime = 120;\n', '        //check whether we are in Alert or All Clear\n', '        //set local half life time\n', '        lastHour = getHour(block.timestamp);\n', '        if (getHour(block.timestamp) == alertTime1 || getHour(block.timestamp) == alertTime2 || getHour(block.timestamp) == alertTime3){\n', '            boolAlertStatus = true;\n', '            localHalfLifeTime = halfLifeAlert;\n', '        }else{\n', '            boolAlertStatus = false;\n', '            localHalfLifeTime = halfLifeClear;\n', '        }\n', '\n', '\n', '\n', '\n', '        uint counter = 1;\n', '        uint currentBlock = block.number;\n', '        uint insurancePayout = 0;\n', '        uint tempInsurance = 0;\n', '\n', '        while (counter < nextAvailableCard) { \n', '\n', '            //HalfLife Check\n', '            if (allowHalfLife) {\n', '\n', '                if (cardPrice[counter] > basePrice[counter]) {\n', '                    uint _life = SafeMath.sub(currentBlock, cardBlockNumber[counter]);\n', '\n', '                    if (_life > localHalfLifeTime) {\n', '                    \n', '                        cardBlockNumber[counter] = currentBlock;  //Reset the clock for this card\n', '                        if (SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000) < basePrice[counter]){\n', '                            \n', '                            cardPrice[counter] = basePrice[counter];\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '                            cardPreviousPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter],halfLifeReductionRate),1000);\n', '                            \n', '                        }else{\n', '\n', '                            cardPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000);  \n', '                            cardPreviousPrice[counter] = SafeMath.div(SafeMath.mul(cardPreviousPrice[counter],halfLifeReductionRate),1000);\n', '                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\n', '                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\n', '                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\n', '\n', '                        }\n', '                        emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\n', '                        emit Halflife(cardOwner[counter], counter, cardPrice[counter], localHalfLifeTime + block.number, insurancePayout, cardInsurance[counter]);\n', '\n', '                    }\n', '                    //HalfLife Check\n', '                    \n', '                }\n', '               \n', '            }\n', '            \n', '            tempInsurance = tempInsurance + cardInsurance[counter];\n', '            counter = counter + 1;\n', '        } \n', '        totalCardInsurance = tempInsurance;\n', '        getTotalCardValue();\n', '\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '\n', '    function getCardPrice(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardPrice[_card];\n', '    }\n', '\n', '   function getCardInsurance(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardInsurance[_card];\n', '    }\n', '\n', '\n', '    function getCardOwner(uint _card)\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return cardOwner[_card];\n', '    }\n', '\n', '    function gettotalCardDivs(uint _card)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_card <= nextAvailableCard);\n', '        return totalCardDivs[_card];\n', '    }\n', '\n', '    function getTotalDivsProduced()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '     \n', '        return totalDivsProduced;\n', '    }\n', '    \n', '    \n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '    function isLeapYear(uint16 year) constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '    function parseTimestamp(uint timestamp) internal returns (DateTime dt) {\n', '        uint secondsAccountedFor = 0;\n', '        uint buf;\n', '        uint8 i;\n', '\n', '        dt.year = ORIGIN_YEAR;\n', '\n', '        // Year\n', '        while (true) {\n', '                if (isLeapYear(dt.year)) {\n', '                        buf = LEAP_YEAR_IN_SECONDS;\n', '                }\n', '                else {\n', '                        buf = YEAR_IN_SECONDS;\n', '                }\n', '\n', '                if (secondsAccountedFor + buf > timestamp) {\n', '                        break;\n', '                }\n', '                dt.year += 1;\n', '                secondsAccountedFor += buf;\n', '        }\n', '\n', '        // Month\n', '        uint8[12] monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(dt.year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        uint secondsInMonth;\n', '        for (i = 0; i < monthDayCounts.length; i++) {\n', '            secondsInMonth = DAY_IN_SECONDS * monthDayCounts[i];\n', '            if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                dt.month = i + 1;\n', '                break;\n', '            }\n', '            secondsAccountedFor += secondsInMonth;\n', '        }\n', '\n', '        // Day\n', '        for (i = 0; i < monthDayCounts[dt.month - 1]; i++) {\n', '                if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                        dt.day = i + 1;\n', '                        break;\n', '                }\n', '                secondsAccountedFor += DAY_IN_SECONDS;\n', '        }\n', '\n', '        // Hour\n', '                for (i = 0; i < 24; i++) {\n', '                        if (HOUR_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.hour = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += HOUR_IN_SECONDS;\n', '                }\n', '\n', '        // Minute\n', '        for (i = 0; i < 60; i++) {\n', '                if (MINUTE_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                        dt.minute = i;\n', '                        break;\n', '                }\n', '                secondsAccountedFor += MINUTE_IN_SECONDS;\n', '        }\n', '\n', '        if (timestamp - secondsAccountedFor > 60) {\n', '                __throw();\n', '        }\n', '\n', '        // Second\n', '        dt.second = uint8(timestamp - secondsAccountedFor);\n', '\n', '         // Day of week.\n', '        buf = timestamp / DAY_IN_SECONDS;\n', '        dt.weekday = uint8((buf + 3) % 7);\n', '        }\n', '\n', '        function getYear(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).hour;\n', '        }\n', '\n', '        function getMinute(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).minute;\n', '        }\n', '\n', '        function getSecond(uint timestamp) constant returns (uint16) {\n', '                return parseTimestamp(timestamp).second;\n', '        }\n', '\n', '        function getWeekday(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).weekday;\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, minute, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '\n', '        function __throw() {\n', '                uint[] arst;\n', '                arst[1];\n', '        }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']