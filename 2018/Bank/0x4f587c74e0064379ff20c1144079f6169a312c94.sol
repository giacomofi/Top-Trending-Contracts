['pragma solidity ^0.4.24;\n', '\n', 'contract Tokens {\n', '    address public owner;\n', '    mapping(string => uint) supply; // Total supply of token named\n', '    mapping(string => mapping(address => uint)) balances;\n', '    uint public fee; // For creation\n', '\n', '    constructor(uint _fee) public {\n', '        owner = msg.sender;\n', '        fee = _fee;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Safe math functions\n', '    function subtr(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function addit(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    // Create new token, supply is hard, be serious on internal\n', '    function mint(string _name, uint _supply) public payable {\n', '        require(msg.value >= fee); // Fee is prevents over create\n', '        require(supply[_name] == 0); // Protect from remint\n', '        supply[_name] = _supply;\n', '        balances[_name][msg.sender] = _supply;\n', '        emit Mint(_name, _supply);\n', '    }\n', '\n', '    function transfer(string _name, address _to, uint _amount) external {\n', '        require(_amount <= balances[_name][msg.sender]);\n', '        balances[_name][msg.sender] = subtr(balances[_name][msg.sender], _amount);\n', '        balances[_name][_to] = addit(balances[_name][_to], _amount);\n', '        emit Transfer(_name, msg.sender, _to, _amount);\n', '    }\n', '\n', '    function balanceOf(string _name, address _address) external view returns(uint) {\n', '        return balances[_name][_address];\n', '    }\n', '\n', '    function supplyOf(string _name) external view returns(uint) {\n', '        return supply[_name];\n', '    }\n', '\n', '    function setFee(uint _fee) external onlyOwner {\n', '        fee = _fee;\n', '    }\n', '\n', '    // Withdraw fee to owner\n', '    function withdraw() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    event Transfer(string indexed name, address indexed from, address indexed to, uint amount);\n', '    event Mint(string indexed name, uint supply);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Tokens {\n', '    address public owner;\n', '    mapping(string => uint) supply; // Total supply of token named\n', '    mapping(string => mapping(address => uint)) balances;\n', '    uint public fee; // For creation\n', '\n', '    constructor(uint _fee) public {\n', '        owner = msg.sender;\n', '        fee = _fee;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Safe math functions\n', '    function subtr(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function addit(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    // Create new token, supply is hard, be serious on internal\n', '    function mint(string _name, uint _supply) public payable {\n', '        require(msg.value >= fee); // Fee is prevents over create\n', '        require(supply[_name] == 0); // Protect from remint\n', '        supply[_name] = _supply;\n', '        balances[_name][msg.sender] = _supply;\n', '        emit Mint(_name, _supply);\n', '    }\n', '\n', '    function transfer(string _name, address _to, uint _amount) external {\n', '        require(_amount <= balances[_name][msg.sender]);\n', '        balances[_name][msg.sender] = subtr(balances[_name][msg.sender], _amount);\n', '        balances[_name][_to] = addit(balances[_name][_to], _amount);\n', '        emit Transfer(_name, msg.sender, _to, _amount);\n', '    }\n', '\n', '    function balanceOf(string _name, address _address) external view returns(uint) {\n', '        return balances[_name][_address];\n', '    }\n', '\n', '    function supplyOf(string _name) external view returns(uint) {\n', '        return supply[_name];\n', '    }\n', '\n', '    function setFee(uint _fee) external onlyOwner {\n', '        fee = _fee;\n', '    }\n', '\n', '    // Withdraw fee to owner\n', '    function withdraw() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    event Transfer(string indexed name, address indexed from, address indexed to, uint amount);\n', '    event Mint(string indexed name, uint supply);\n', '}']
