['pragma solidity ^0.4.22;/*\n', ' _ _____  ___   _ _  __ \n', ' ` __ ___  ___  _  _  ,&#39;   \n', '  `. __  ____   /__ ,&#39;\n', '    `.  __  __ /  ,&#39;       \n', '      `.__ _  /_,&#39;\n', '        `. _ /,&#39;\n', '          `./&#39;             \n', '          ,/`.             \n', '        ,&#39;/ __`.        \n', '      ,&#39;_/_  _ _`.      \n', '    ,&#39;__/_ ___ _  `.       \n', '  ,&#39;_  /___ __ _ __ `.  \n', ' &#39;-.._/____   _  __  _`.\n', 'Decentralized Securities Licensing\n', '*/contract PeerLicensing{\n', '\n', '\t// scaleFactor is used to convert Ether into tokens and vice-versa: they&#39;re of different\n', '\t// orders of magnitude, hence the need to bridge between the two.\n', '\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\n', '\n', '\t// CRR = 50%\n', '\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\n', '\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\n', '\tuint256 constant trickTax = 3;//tricklingUpTax\n', '\tuint256 constant tricklingUpTax = 6;//divided at every referral layer\n', '\tint constant crr_n = 1; // CRR numerator\n', '\tint constant crr_d = 2; // CRR denominator\n', '\n', '\t// The price coefficient. Chosen such that at 1 token total supply\n', '\t// the amount in reserve is 10 ether and token price is 1 Ether.\n', '\tint constant price_coeff = 0x2793DB20E4C20163A;//-0x570CAC130DBC4A9607;//-0x33548A9DD6D8344F0;\n', '\n', '\t// Array between each address and their number of staking bond tokens.\n', '\tmapping(address => uint256) public bondHoldings;\n', '\tmapping(address => uint256) public averageBuyInPrice;\n', '\t\n', '\t// Array between each address and how much Ether has been paid out to it.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tmapping(address => address) public reff;\n', '\tmapping(address => uint256) public tricklePocket;\n', '\tmapping(address => uint256) public trickling;\n', '\tmapping(address => int256) public payouts;\n', '\n', '\t// Variable tracking how many tokens are in existence overall.\n', '\tuint256 public totalBondSupply;\n', '\n', '\t// Aggregate sum of all payouts.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tint256 totalPayouts;\n', '\tuint256 public tricklingSum;\n', '\tuint256 public stakingRequirement = 1e18;\n', '\taddress public lastGateway;\n', '\n', '\t//flux fee ratio score keepers\n', '\tuint256 public withdrawSum;\n', '\tuint256 public investSum;\n', '\n', '\t// Variable tracking how much Ether each token is currently worth.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tuint256 earningsPerToken;\n', '\t\n', '\t// Current contract balance in Ether\n', '\tuint256 public contractBalance;\n', '\n', '\tfunction PeerLicensing() public {\n', '\t}\n', '\n', '\n', '\tevent onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint256 feeFluxImport\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 totalTokensAtTheTime,//maybe it&#39;d be cool to see what % people are selling from their total bank\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn,\n', '        uint256 feeFluxExport\n', '    );\n', '\n', '\n', '\t// Returns the number of tokens currently held by _owner.\n', '\tfunction holdingsOf(address _owner) public constant returns (uint256 balance) {\n', '\t\treturn bondHoldings[_owner];\n', '\t}\n', '\n', '\t// Withdraws all dividends held by the caller sending the transaction, updates\n', '\t// the requisite global variables, and transfers Ether back to the caller.\n', '\tfunction withdraw() public {\n', '\t\ttrickleUp();\n', '\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\tvar balance = dividends(msg.sender);\n', '\t\tvar pocketBalance = tricklePocket[msg.sender];\n', '\t\ttricklePocket[msg.sender] = 0;\n', '\t\ttricklingSum = sub(tricklingSum,pocketBalance);\n', '\t\tuint256 out = add(balance,pocketBalance);\n', '\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Increase the total amount that&#39;s been paid out to maintain invariance.\n', '\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Send the dividends to the address that requested the withdraw.\n', '\t\tcontractBalance = sub(contractBalance, out );\n', '\n', '\t\twithdrawSum = add(withdrawSum,out );\n', '\t\tmsg.sender.transfer(out);\n', '\t\temit onWithdraw(msg.sender, out, withdrawSum);\n', '\t}\n', '\n', '\tfunction withdrawOld(address to) public {\n', '\t\ttrickleUp();\n', '\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\tvar balance = dividends(msg.sender);\n', '\t\tvar pocketBalance = tricklePocket[msg.sender];\n', '\t\ttricklePocket[msg.sender] = 0;\n', '\t\ttricklingSum = sub(tricklingSum,pocketBalance);//gotta preserve that things for dynamic calculation\t\t\n', '\t\tuint256 out = add(balance,pocketBalance);\n', '\n', '\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Increase the total amount that&#39;s been paid out to maintain invariance.\n', '\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Send the dividends to the address that requested the withdraw.\n', '\t\tcontractBalance = sub(contractBalance, out);\n', '\n', '\t\twithdrawSum = add(withdrawSum, out);\n', '\t\tto.transfer(out);\n', '\t\temit onWithdraw(to,out, withdrawSum);\n', '\t}\n', '\n', '\n', '\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\n', '\t// in the bondHoldings array, and therefore is shown as a dividend. A second\n', '\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\n', '\tfunction sellMyTokens(uint256 _amount) public {\n', '\t\tif(_amount <= bondHoldings[msg.sender]){\n', '\t\t\tsell(_amount);\n', '\t\t}else{\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\n', '\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\n', '    function getMeOutOfHere() public {\n', '\t\tsellMyTokens(bondHoldings[msg.sender]);\n', '        withdraw();\n', '\t}\n', '\n', '\tfunction reffUp(address _reff) internal{\n', '\t\taddress sender = msg.sender;\n', '\t\tif (_reff == 0x0000000000000000000000000000000000000000 || _reff == msg.sender)\n', '\t\t\t_reff = lastGateway;\n', '\t\t\t\n', '\t\tif(  bondHoldings[_reff] >= stakingRequirement ) {\n', '\t\t\t//good to go. good gateway\n', '\t\t}else{\n', '\t\t\tif(lastGateway == 0x0000000000000000000000000000000000000000){\n', '\t\t\t\tlastGateway = sender;//first buyer ever\n', '\t\t\t\t_reff = sender;//first buyer is their own gateway/masternode\n', '\t\t\t}\n', '\t\t\telse\n', '\t\t\t\t_reff = lastGateway;//the lucky last player gets to be the gate way.\n', '\t\t}\n', '\n', '\t\treff[sender] = _reff;\n', '\t}\n', '\t// Gatekeeper function to check if the amount of Ether being sent isn&#39;t either\n', '\t// too small or too large. If it passes, goes direct to buy().\n', '\tfunction fund(address _reff) payable public {\n', '\t\t// Don&#39;t allow for funding if the amount of Ether sent is less than 1 szabo.\n', '\t\treffUp(_reff);\n', '\t\tif (msg.value > 0.000001 ether) {\n', '\t\t    contractBalance = add(contractBalance, msg.value);\n', '\t\t    investSum = add(investSum,msg.value);\n', '\t\t\tbuy();\n', '\t\t\tlastGateway = msg.sender;\n', '\t\t} else {\n', '\t\t\trevert();\n', '\t\t}\n', '    }\n', '\n', '\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\n', '\tfunction buyPrice() public constant returns (uint) {\n', '\t\treturn getTokensForEther(1 finney);\n', '\t}\n', '\n', '\t// Function that returns the (dynamic) price of selling a single token.\n', '\tfunction sellPrice() public constant returns (uint) {\n', '        var eth = getEtherForTokens(1 finney);\n', '\n', '        uint256 fee;\n', '        if(withdrawSum ==0){\n', '    \t\treturn eth;\n', '\t    }\n', '        else{\n', '    \t\tfee = fluxFeed(eth,false);\n', '\t    \treturn eth - fee;\n', '\t    }\n', '\n', '        \n', '    }\n', '\tfunction getInvestSum() public constant returns (uint256 sum) {\n', '\t\treturn investSum;\n', '\t}\n', '\tfunction getWithdrawSum() public constant returns (uint256 sum) {\n', '\t\treturn withdrawSum;\n', '\t}\n', '\tfunction fluxFeed(uint256 amount, bool slim_reinvest) public constant returns (uint256 fee) {\n', '\t\tif (withdrawSum == 0)\n', '\t\t\treturn 0;\n', '\t\telse\n', '\t\t{\n', '\t\t\tif(slim_reinvest){\n', '\t\t\t\treturn div( mul(amount , withdrawSum), mul(investSum,3) );//discount for supporting the Pyramid\n', '\t\t\t}else{\n', '\t\t\t\treturn div( mul(amount , withdrawSum), investSum);// amount * withdrawSum / investSum\t\n', '\t\t\t}\n', '\t\t}\n', '\t\t//gotta multiply and stuff in that order in order to get a high precision taxed amount.\n', '\t\t// because grouping (withdrawSum / investSum) can&#39;t return a precise decimal.\n', '\t\t//so instead we expand the value by multiplying then shrink it. by the denominator\n', '\n', '\t\t/*\n', '\t\t100eth IN & 100eth OUT = 100% tax fee (returning 1) !!!\n', '\t\t100eth IN & 50eth OUT = 50% tax fee (returning 2)\n', '\t\t100eth IN & 33eth OUT = 33% tax fee (returning 3)\n', '\t\t100eth IN & 25eth OUT = 25% tax fee (returning 4)\n', '\t\t100eth IN & 10eth OUT = 10% tax fee (returning 10)\n', '\n', '\t\t!!! keep in mind there is no fee if there are no holders. So if 100% of the eth has left the contract that means there can&#39;t possibly be holders to tax you\n', '\t\t*/\n', '\t}\n', '\n', '\t// Calculate the current dividends associated with the caller address. This is the net result\n', '\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\n', '\t// Ether that has already been paid out.\n', '\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n', '\t\treturn (uint256) ((int256)(earningsPerToken * bondHoldings[_owner] ) - payouts[_owner]) / scaleFactor;\n', '\t}\n', '\tfunction cashWallet(address _owner) public constant returns (uint256 amount) {\n', '\t\treturn tricklePocket[_owner] + dividends(_owner);\n', '\t}\n', '\n', '\t// Internal balance function, used to calculate the dynamic reserve value.\n', '\tfunction balance() internal constant returns (uint256 amount){\n', '\t\t// msg.value is the amount of Ether sent by the transaction.\n', '\t\treturn contractBalance - msg.value - tricklingSum;\n', '\t}\n', '\t\t\t\tfunction trickleUp() internal{\n', '\t\t\t\t\tuint256 tricks = trickling[ msg.sender ];\n', '\t\t\t\t\tif(tricks > 0){\n', '\t\t\t\t\t\ttrickling[ msg.sender ] = 0;\n', '\t\t\t\t\t\tuint256 passUp = div(tricks,tricklingUpTax);\n', '\t\t\t\t\t\tuint256 reward = sub(tricks,passUp);//trickling[]\n', '\t\t\t\t\t\taddress reffo = reff[msg.sender];\n', '\t\t\t\t\t\tif( holdingsOf(reffo) >= stakingRequirement){ // your reff must be holding more than the staking requirement\n', '\t\t\t\t\t\t\ttrickling[ reffo ] = add(trickling[ reffo ],passUp);\n', '\t\t\t\t\t\t\ttricklePocket[ reffo ] = add(tricklePocket[ reffo ],reward);\n', '\t\t\t\t\t\t}else{//basically. if your referral guy bailed out then he can&#39;t get the rewards, instead give it to the new guy that was baited in by this feature\n', '\t\t\t\t\t\t\ttrickling[ lastGateway ] = add(trickling[ lastGateway ],passUp);\n', '\t\t\t\t\t\t\ttricklePocket[ lastGateway ] = add(tricklePocket[ lastGateway ],reward);\n', '\t\t\t\t\t\t\treff[msg.sender] = lastGateway;\n', '\t\t\t\t\t\t}\n', '\t\t\t\t\t}\n', '\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\tfunction buy() internal {\n', '\t\t\t\t\t\t\t\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\n', '\t\t\t\t\t\t\t\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n', '\t\t\t\t\t\t\t\t\t\trevert();\n', '\t\t\t\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// msg.sender is the address of the caller.\n', '\t\t\t\t\t\t\t\t\tvar sender = msg.sender;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// 10% of the total Ether sent is used to pay existing holders.\n', '\t\t\t\t\t\t\t\t\tuint256 fee = 0; \n', '\t\t\t\t\t\t\t\t\tuint256 trickle = 0; \n', '\t\t\t\t\t\t\t\t\tif(bondHoldings[sender] < totalBondSupply){\n', '\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(msg.value,false);\n', '\t\t\t\t\t\t\t\t\t\ttrickle = div(fee, trickTax);\n', '\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\t\t\t\t\ttrickling[sender] = add(trickling[sender] ,  trickle);\n', '\t\t\t\t\t\t\t\t\t}\n', '\t\t\t\t\t\t\t\t\tvar numEther = msg.value - (fee + trickle);// The amount of Ether used to purchase new tokens for the caller.\n', '\t\t\t\t\t\t\t\t\tvar numTokens = getTokensForEther(numEther);// The number of tokens which can be purchased for numEther.\n', '\n', '\n', '\t\t\t\t\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\n', '\t\t\t\t\t\t\t\t\tvar buyerFee = fee * scaleFactor;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0){// because ...\n', '\t\t\t\t\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n', '\t\t\t\t\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\n', '\t\t\t\t\t\t\t\t\t\t// same way they would have if they bought each token individually.\n', '\t\t\t\t\t\t\t\t\t\tuint256 bonusCoEff;\n', '\t\t\t\t\t\t\t\t\t\tbonusCoEff = (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / ( totalBondSupply + totalBondSupply + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n', '\t\t\t\t\t\t\t\t\t\t// multiplied by the bonus co-efficient.\n', '\t\t\t\t\t\t\t\t\t\tvar holderReward = fee * bonusCoEff;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\tbuyerFee -= holderReward;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\t\t\t\t\tearningsPerToken += holderReward / totalBondSupply;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Add the numTokens which were just created to the total supply. We&#39;re a crypto central bank!\n', '\t\t\t\t\t\t\t\t\ttotalBondSupply = add(totalBondSupply, numTokens);\n', '\n', '\t\t\t\t\t\t\t\t\tvar averageCostPerToken = div(numTokens , numEther);\n', '\t\t\t\t\t\t\t\t\tvar newTokenSum = add(bondHoldings[sender], numTokens);\n', '\t\t\t\t\t\t\t\t\tvar totalSpentBefore = mul(averageBuyInPrice[sender], holdingsOf(sender) );\n', '\t\t\t\t\t\t\t\t\taverageBuyInPrice[sender] = div( totalSpentBefore + mul( averageCostPerToken , numTokens), newTokenSum )  ;\n', '\n', '\t\t\t\t\t\t\t\t\t// Assign the tokens to the balance of the buyer.\n', '\t\t\t\t\t\t\t\t\tbondHoldings[sender] = add(bondHoldings[sender], numTokens);\n', '\t\t\t\t\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n', '\t\t\t\t\t\t\t\t\t// Also include the fee paid for entering the scheme.\n', '\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the buyer...\n', '\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\n', '\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\n', '\t\t\t\t\t\t\t\t\tpayouts[sender] += payoutDiff;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n', '\t\t\t\t\t\t\t\t\ttotalPayouts += payoutDiff;\n', '\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum ,  trickle);\n', '\t\t\t\t\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\t\t\t\t\temit onTokenPurchase(sender,numEther,numTokens, reff[sender], investSum);\n', '\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\n', '\t\t\t\t\t\t\t\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\n', '\t\t\t\t\t\t\t\t// will be *significant*.\n', '\t\t\t\t\t\t\t\tfunction sell(uint256 amount) internal {\n', '\t\t\t\t\t\t\t\t    var numEthersBeforeFee = getEtherForTokens(amount);\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// x% of the resulting Ether is used to pay remaining holders.\n', '\t\t\t\t\t\t\t\t\tuint256 fee = 0;\n', '\t\t\t\t\t\t\t\t\tuint256 trickle = 0;\n', '\t\t\t\t\t\t\t\t\tif(totalBondSupply != bondHoldings[msg.sender]){\n', '\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(numEthersBeforeFee,false);//fluxFeed()\n', '\t\t\t\t\t\t\t\t\t\ttrickle = div(fee, trickTax); \n', '\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\t\t\t\t\ttrickling[msg.sender] = add(trickling[msg.sender] ,  trickle);\n', '\t\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum ,  trickle);\n', '\t\t\t\t\t\t\t\t\t} \n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Net Ether for the seller after the fee has been subtracted.\n', '\t\t\t\t\t\t\t        var numEthers = numEthersBeforeFee - (fee + trickle);\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t//How much you bought it for divided by how much you&#39;re getting back.\n', '\t\t\t\t\t\t\t\t\t//This means that if you get dumped on, you can get more resolve tokens if you sell out.\n', '\t\t\t\t\t\t\t\t\tmint( mul( div( averageBuyInPrice[msg.sender] * scaleFactor , div(amount,numEthers) ) , amount/*correlate to the amount sold*/) , msg.sender );\n', '\n', '\t\t\t\t\t\t\t\t\t// *Remove* the numTokens which were just sold from the total supply. We&#39;re /definitely/ a crypto central bank.\n', '\t\t\t\t\t\t\t\t\ttotalBondSupply = sub(totalBondSupply, amount);\n', '\t\t\t\t\t\t\t\t\t// Remove the tokens from the balance of the buyer.\n', '\t\t\t\t\t\t\t\t\tbondHoldings[msg.sender] = sub(bondHoldings[msg.sender], amount);\n', '\n', '\t\t\t\t\t\t\t        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\n', '\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the seller...\n', '\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\n', '\t\t\t\t\t\t\t\t\t// since they&#39;re selling all of their tokens). This makes sure the seller isn&#39;t disadvantaged if\n', '\t\t\t\t\t\t\t\t\t// they decide to buy back in.\n', '\t\t\t\t\t\t\t\t\tpayouts[msg.sender] -= payoutDiff;\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Decrease the total amount that&#39;s been paid out to maintain invariance.\n', '\t\t\t\t\t\t\t        totalPayouts -= payoutDiff;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we&#39;re\n', '\t\t\t\t\t\t\t\t\t// selling tokens, but it guards against division by zero).\n', '\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0) {\n', '\t\t\t\t\t\t\t\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\n', '\t\t\t\t\t\t\t\t\t\tvar etherFee = fee * scaleFactor;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// Fee is distributed to all remaining token holders.\n', '\t\t\t\t\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\n', '\t\t\t\t\t\t\t\t\t\tvar rewardPerShare = etherFee / totalBondSupply;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\t\t\t\t\tearningsPerToken = add(earningsPerToken, rewardPerShare);\n', '\t\t\t\t\t\t\t\t\t}\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\t\t\t\t\temit onTokenSell(msg.sender,(bondHoldings[msg.sender]+amount),amount,numEthers);\n', '\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t// Converts the Ether accrued as dividends back into Staking tokens without having to\n', '\t\t\t\t// withdraw it first. Saves on gas and potential price spike loss.\n', '\t\t\t\tfunction reinvestDividends() public {\n', '\t\t\t\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\t\t\t\tvar balance = tricklePocket[msg.sender];\n', '\t\t\t\t\tbalance = add( balance, dividends(msg.sender) );\n', '\t\t\t\t\ttricklingSum = sub(tricklingSum,tricklePocket[msg.sender]);\n', '\t\t\t\t\ttricklePocket[msg.sender] = 0;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\t\t\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\n', '\t\t\t\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Increase the total amount that&#39;s been paid out to maintain invariance.\n', '\t\t\t\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Assign balance to a new variable.\n', '\t\t\t\t\tuint value_ = (uint) (balance);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\n', '\t\t\t\t\t// (in which case, why are you even here), abort.\n', '\t\t\t\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\n', '\t\t\t\t\t\trevert();\n', '\t\t\t\t\t\t\n', '\n', '\t\t\t\t\tuint256 fee = 0; \n', '\t\t\t\t\tuint256 trickle = 0;\n', '\t\t\t\t\tif(bondHoldings[msg.sender] != totalBondSupply){\n', '\t\t\t\t\t\tfee = fluxFeed(value_,true); // reinvestment fees are lower than regular ones.\n', '\t\t\t\t\t\ttrickle = div(fee, trickTax);\n', '\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\ttrickling[msg.sender] += trickle;\n', '\t\t\t\t\t}\n', '\t\t\t\t\t\n', '\n', '\t\t\t\t\tvar res = sub(reserve() , balance);\n', '\t\t\t\t\t// The amount of Ether used to purchase new tokens for the caller.\n', '\t\t\t\t\tvar numEther = value_ - fee;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// The number of tokens which can be purchased for numEther.\n', '\t\t\t\t\tvar numTokens = calculateDividendTokens(numEther, balance);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\n', '\t\t\t\t\tvar buyerFee = fee * scaleFactor;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Check that we have tokens in existence (this should always be true), or\n', '\t\t\t\t\t// else you&#39;re gonna have a bad time.\n', '\t\t\t\t\tif (totalBondSupply > 0) {\n', '\t\t\t\t\t\tuint256 bonusCoEff;\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n', '\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\n', '\t\t\t\t\t\t// same way they would have if they bought each token individually.\n', '\t\t\t\t\t\tbonusCoEff =  (scaleFactor - (res + numEther ) * numTokens * scaleFactor / (totalBondSupply + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\n', '\t\t\t\t\t\n', '\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n', '\t\t\t\t\t\t// multiplied by the bonus co-efficient.\n', '\t\t\t\t\t\tvar holderReward = fee * bonusCoEff;\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\tbuyerFee -= holderReward;\n', '\n', '\t\t\t\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n', '\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\tearningsPerToken += holderReward / totalBondSupply;\n', '\t\t\t\t\t}\n', '\t\t\t\t\t\n', '\t\t\t\t\tint256 payoutDiff;\n', '\t\t\t\t\t// Add the numTokens which were just created to the total supply. We&#39;re a crypto central bank!\n', '\t\t\t\t\ttotalBondSupply = add(totalBondSupply, numTokens);\n', '\t\t\t\t\t// Assign the tokens to the balance of the buyer.\n', '\t\t\t\t\tbondHoldings[msg.sender] = add(bondHoldings[msg.sender], numTokens);\n', '\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n', '\t\t\t\t\t// Also include the fee paid for entering the scheme.\n', '\t\t\t\t\t// First we compute how much was just paid out to the buyer...\n', '\t\t\t\t\tpayoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\n', '\t\t\t\t\n', '\t\t\t\t\t\n', '\t\t\t\t\t/*var averageCostPerToken = div(numTokens , numEther);\n', '\t\t\t\t\tvar newTokenSum = add(bondHoldings_FNX[sender], numTokens);\n', '\t\t\t\t\tvar totalSpentBefore = mul(averageBuyInPrice[sender], holdingsOf(sender) );*/\n', '\t\t\t\t\t//averageBuyInPrice[sender] = div( totalSpentBefore + mul( averageCostPerToken , numTokens), newTokenSum )  ;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\n', '\t\t\t\t\tpayouts[msg.sender] += payoutDiff;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n', '\t\t\t\t\ttotalPayouts += payoutDiff;\n', '\n', '\t\t\t\t\t\n', '\n', '\t\t\t\t\ttricklingSum += trickle;//add to trickle&#39;s Sum after reserve calculations\n', '\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\temit onReinvestment(msg.sender,numEther,numTokens);\n', '\t\t\t\t}\n', '\t\n', '\t// Dynamic value of Ether in reserve, according to the CRR requirement.\n', '\tfunction reserve() internal constant returns (uint256 amount){\n', '\t\treturn sub(balance(),\n', '\t\t\t  ((uint256) ((int256) (earningsPerToken * totalBondSupply) - totalPayouts ) / scaleFactor) \n', '\t\t);\n', '\t}\n', '\n', '\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\n', '\t// dynamic reserve and totalBondSupply values (derived from the buy and sell prices).\n', '\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n', '\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply);\n', '\t}\n', '\n', '\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\n', '\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\n', '\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply);\n', '\t}\n', '\n', '\t// Converts a number tokens into an Ether value.\n', '\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n', '\t\t// How much reserve Ether do we have left in the contract?\n', '\t\tvar reserveAmount = reserve();\n', '\n', '\t\t// If you&#39;re the Highlander (or bagholder), you get The Prize. Everything left in the vault.\n', '\t\tif (tokens == (totalBondSupply) )\n', '\t\t\treturn reserveAmount;\n', '\n', '\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\n', '\t\t// corresponding to the equation in Dr Jochen Hoenicke&#39;s original Ponzi paper, which can be found\n', '\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \n', '\t\t// and denominator altered to 1 and 2 respectively.\n', '\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalBondSupply - tokens) - price_coeff) * crr_d/crr_n));\n', '\t}\n', '\n', '\t// You don&#39;t care about these, but if you really do they&#39;re hex values for \n', '\t// co-efficients used to simulate approximations of the log and exp functions.\n', '\tint256  constant one        = 0x10000000000000000;\n', '\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\n', '\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\n', '\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\n', '\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\n', '\tint256  constant c1         = 0x1ffffffffff9dac9b;\n', '\tint256  constant c3         = 0x0aaaaaaac16877908;\n', '\tint256  constant c5         = 0x0666664e5e9fa0c99;\n', '\tint256  constant c7         = 0x049254026a7630acf;\n', '\tint256  constant c9         = 0x038bd75ed37753d68;\n', '\tint256  constant c11        = 0x03284a0c14610924f;\n', '\n', '\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n', '\t// approximates the function log(1+x)-log(1-x)\n', '\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n', '\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n', '\t\tint32 scale = 0;\n', '\t\twhile (a > sqrt2) {\n', '\t\t\ta /= 2;\n', '\t\t\tscale++;\n', '\t\t}\n', '\t\twhile (a <= sqrtdot5) {\n', '\t\t\ta *= 2;\n', '\t\t\tscale--;\n', '\t\t}\n', '\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n', '\t\tvar z = (s*s) / one;\n', '\t\treturn scale * ln2 +\n', '\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n', '\t\t\t\t/one))/one))/one))/one))/one);\n', '\t}\n', '\n', '\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n', '\tint256 constant c4 = -0x000b60b60808399d1;\n', '\tint256 constant c6 =  0x0000455956bccdd06;\n', '\tint256 constant c8 = -0x000001b893ad04b3a;\n', '\t\n', '\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n', '\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n', '\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n', '\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n', '\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n', '\t\ta -= scale*ln2;\n', '\t\tint256 z = (a*a) / one;\n', '\t\tint256 R = ((int256)(2) * one) +\n', '\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n', '\t\texp = (uint256) (((R + a) * one) / (R - a));\n', '\t\tif (scale >= 0)\n', '\t\t\texp <<= scale;\n', '\t\telse\n', '\t\t\texp >>= -scale;\n', '\t\treturn exp;\n', '\t}\n', '\t\n', '\t// The below are safemath implementations of the four arithmetic operators\n', '\t// designed to explicitly prevent over- and under-flows of integer values.\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\tfunction () payable public {\n', '\t\t\n', '\t\tif (msg.value > 0) {\n', '\t\t\tfund(lastGateway);\n', '\t\t} else {\n', '\t\t\twithdrawOld(msg.sender);\n', '\t\t}\n', '\t}\n', '\n', '\n', '\n', '\tuint256 public totalSupply;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public name = "0xBabylon";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "SEC";\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function mint(uint256 amount,address _account) internal{\n', '    \ttotalSupply += amount;\n', '    \tbalances[_account] += amount;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.22;/*\n', ' _ _____  ___   _ _  __ \n', " ` __ ___  ___  _  _  ,'   \n", "  `. __  ____   /__ ,'\n", "    `.  __  __ /  ,'       \n", "      `.__ _  /_,'\n", "        `. _ /,'\n", "          `./'             \n", '          ,/`.             \n', "        ,'/ __`.        \n", "      ,'_/_  _ _`.      \n", "    ,'__/_ ___ _  `.       \n", "  ,'_  /___ __ _ __ `.  \n", " '-.._/____   _  __  _`.\n", 'Decentralized Securities Licensing\n', '*/contract PeerLicensing{\n', '\n', "\t// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\n", '\t// orders of magnitude, hence the need to bridge between the two.\n', '\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\n', '\n', '\t// CRR = 50%\n', '\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\n', '\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\n', '\tuint256 constant trickTax = 3;//tricklingUpTax\n', '\tuint256 constant tricklingUpTax = 6;//divided at every referral layer\n', '\tint constant crr_n = 1; // CRR numerator\n', '\tint constant crr_d = 2; // CRR denominator\n', '\n', '\t// The price coefficient. Chosen such that at 1 token total supply\n', '\t// the amount in reserve is 10 ether and token price is 1 Ether.\n', '\tint constant price_coeff = 0x2793DB20E4C20163A;//-0x570CAC130DBC4A9607;//-0x33548A9DD6D8344F0;\n', '\n', '\t// Array between each address and their number of staking bond tokens.\n', '\tmapping(address => uint256) public bondHoldings;\n', '\tmapping(address => uint256) public averageBuyInPrice;\n', '\t\n', '\t// Array between each address and how much Ether has been paid out to it.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tmapping(address => address) public reff;\n', '\tmapping(address => uint256) public tricklePocket;\n', '\tmapping(address => uint256) public trickling;\n', '\tmapping(address => int256) public payouts;\n', '\n', '\t// Variable tracking how many tokens are in existence overall.\n', '\tuint256 public totalBondSupply;\n', '\n', '\t// Aggregate sum of all payouts.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tint256 totalPayouts;\n', '\tuint256 public tricklingSum;\n', '\tuint256 public stakingRequirement = 1e18;\n', '\taddress public lastGateway;\n', '\n', '\t//flux fee ratio score keepers\n', '\tuint256 public withdrawSum;\n', '\tuint256 public investSum;\n', '\n', '\t// Variable tracking how much Ether each token is currently worth.\n', '\t// Note that this is scaled by the scaleFactor variable.\n', '\tuint256 earningsPerToken;\n', '\t\n', '\t// Current contract balance in Ether\n', '\tuint256 public contractBalance;\n', '\n', '\tfunction PeerLicensing() public {\n', '\t}\n', '\n', '\n', '\tevent onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy,\n', '        uint256 feeFluxImport\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', "        uint256 totalTokensAtTheTime,//maybe it'd be cool to see what % people are selling from their total bank\n", '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn,\n', '        uint256 feeFluxExport\n', '    );\n', '\n', '\n', '\t// Returns the number of tokens currently held by _owner.\n', '\tfunction holdingsOf(address _owner) public constant returns (uint256 balance) {\n', '\t\treturn bondHoldings[_owner];\n', '\t}\n', '\n', '\t// Withdraws all dividends held by the caller sending the transaction, updates\n', '\t// the requisite global variables, and transfers Ether back to the caller.\n', '\tfunction withdraw() public {\n', '\t\ttrickleUp();\n', '\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\tvar balance = dividends(msg.sender);\n', '\t\tvar pocketBalance = tricklePocket[msg.sender];\n', '\t\ttricklePocket[msg.sender] = 0;\n', '\t\ttricklingSum = sub(tricklingSum,pocketBalance);\n', '\t\tuint256 out = add(balance,pocketBalance);\n', '\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\n', "\t\t// Increase the total amount that's been paid out to maintain invariance.\n", '\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Send the dividends to the address that requested the withdraw.\n', '\t\tcontractBalance = sub(contractBalance, out );\n', '\n', '\t\twithdrawSum = add(withdrawSum,out );\n', '\t\tmsg.sender.transfer(out);\n', '\t\temit onWithdraw(msg.sender, out, withdrawSum);\n', '\t}\n', '\n', '\tfunction withdrawOld(address to) public {\n', '\t\ttrickleUp();\n', '\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\tvar balance = dividends(msg.sender);\n', '\t\tvar pocketBalance = tricklePocket[msg.sender];\n', '\t\ttricklePocket[msg.sender] = 0;\n', '\t\ttricklingSum = sub(tricklingSum,pocketBalance);//gotta preserve that things for dynamic calculation\t\t\n', '\t\tuint256 out = add(balance,pocketBalance);\n', '\n', '\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\n', "\t\t// Increase the total amount that's been paid out to maintain invariance.\n", '\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\n', '\t\t// Send the dividends to the address that requested the withdraw.\n', '\t\tcontractBalance = sub(contractBalance, out);\n', '\n', '\t\twithdrawSum = add(withdrawSum, out);\n', '\t\tto.transfer(out);\n', '\t\temit onWithdraw(to,out, withdrawSum);\n', '\t}\n', '\n', '\n', '\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\n', '\t// in the bondHoldings array, and therefore is shown as a dividend. A second\n', '\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\n', '\tfunction sellMyTokens(uint256 _amount) public {\n', '\t\tif(_amount <= bondHoldings[msg.sender]){\n', '\t\t\tsell(_amount);\n', '\t\t}else{\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\n', '\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\n', '    function getMeOutOfHere() public {\n', '\t\tsellMyTokens(bondHoldings[msg.sender]);\n', '        withdraw();\n', '\t}\n', '\n', '\tfunction reffUp(address _reff) internal{\n', '\t\taddress sender = msg.sender;\n', '\t\tif (_reff == 0x0000000000000000000000000000000000000000 || _reff == msg.sender)\n', '\t\t\t_reff = lastGateway;\n', '\t\t\t\n', '\t\tif(  bondHoldings[_reff] >= stakingRequirement ) {\n', '\t\t\t//good to go. good gateway\n', '\t\t}else{\n', '\t\t\tif(lastGateway == 0x0000000000000000000000000000000000000000){\n', '\t\t\t\tlastGateway = sender;//first buyer ever\n', '\t\t\t\t_reff = sender;//first buyer is their own gateway/masternode\n', '\t\t\t}\n', '\t\t\telse\n', '\t\t\t\t_reff = lastGateway;//the lucky last player gets to be the gate way.\n', '\t\t}\n', '\n', '\t\treff[sender] = _reff;\n', '\t}\n', "\t// Gatekeeper function to check if the amount of Ether being sent isn't either\n", '\t// too small or too large. If it passes, goes direct to buy().\n', '\tfunction fund(address _reff) payable public {\n', "\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\n", '\t\treffUp(_reff);\n', '\t\tif (msg.value > 0.000001 ether) {\n', '\t\t    contractBalance = add(contractBalance, msg.value);\n', '\t\t    investSum = add(investSum,msg.value);\n', '\t\t\tbuy();\n', '\t\t\tlastGateway = msg.sender;\n', '\t\t} else {\n', '\t\t\trevert();\n', '\t\t}\n', '    }\n', '\n', '\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\n', '\tfunction buyPrice() public constant returns (uint) {\n', '\t\treturn getTokensForEther(1 finney);\n', '\t}\n', '\n', '\t// Function that returns the (dynamic) price of selling a single token.\n', '\tfunction sellPrice() public constant returns (uint) {\n', '        var eth = getEtherForTokens(1 finney);\n', '\n', '        uint256 fee;\n', '        if(withdrawSum ==0){\n', '    \t\treturn eth;\n', '\t    }\n', '        else{\n', '    \t\tfee = fluxFeed(eth,false);\n', '\t    \treturn eth - fee;\n', '\t    }\n', '\n', '        \n', '    }\n', '\tfunction getInvestSum() public constant returns (uint256 sum) {\n', '\t\treturn investSum;\n', '\t}\n', '\tfunction getWithdrawSum() public constant returns (uint256 sum) {\n', '\t\treturn withdrawSum;\n', '\t}\n', '\tfunction fluxFeed(uint256 amount, bool slim_reinvest) public constant returns (uint256 fee) {\n', '\t\tif (withdrawSum == 0)\n', '\t\t\treturn 0;\n', '\t\telse\n', '\t\t{\n', '\t\t\tif(slim_reinvest){\n', '\t\t\t\treturn div( mul(amount , withdrawSum), mul(investSum,3) );//discount for supporting the Pyramid\n', '\t\t\t}else{\n', '\t\t\t\treturn div( mul(amount , withdrawSum), investSum);// amount * withdrawSum / investSum\t\n', '\t\t\t}\n', '\t\t}\n', '\t\t//gotta multiply and stuff in that order in order to get a high precision taxed amount.\n', "\t\t// because grouping (withdrawSum / investSum) can't return a precise decimal.\n", '\t\t//so instead we expand the value by multiplying then shrink it. by the denominator\n', '\n', '\t\t/*\n', '\t\t100eth IN & 100eth OUT = 100% tax fee (returning 1) !!!\n', '\t\t100eth IN & 50eth OUT = 50% tax fee (returning 2)\n', '\t\t100eth IN & 33eth OUT = 33% tax fee (returning 3)\n', '\t\t100eth IN & 25eth OUT = 25% tax fee (returning 4)\n', '\t\t100eth IN & 10eth OUT = 10% tax fee (returning 10)\n', '\n', "\t\t!!! keep in mind there is no fee if there are no holders. So if 100% of the eth has left the contract that means there can't possibly be holders to tax you\n", '\t\t*/\n', '\t}\n', '\n', '\t// Calculate the current dividends associated with the caller address. This is the net result\n', '\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\n', '\t// Ether that has already been paid out.\n', '\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n', '\t\treturn (uint256) ((int256)(earningsPerToken * bondHoldings[_owner] ) - payouts[_owner]) / scaleFactor;\n', '\t}\n', '\tfunction cashWallet(address _owner) public constant returns (uint256 amount) {\n', '\t\treturn tricklePocket[_owner] + dividends(_owner);\n', '\t}\n', '\n', '\t// Internal balance function, used to calculate the dynamic reserve value.\n', '\tfunction balance() internal constant returns (uint256 amount){\n', '\t\t// msg.value is the amount of Ether sent by the transaction.\n', '\t\treturn contractBalance - msg.value - tricklingSum;\n', '\t}\n', '\t\t\t\tfunction trickleUp() internal{\n', '\t\t\t\t\tuint256 tricks = trickling[ msg.sender ];\n', '\t\t\t\t\tif(tricks > 0){\n', '\t\t\t\t\t\ttrickling[ msg.sender ] = 0;\n', '\t\t\t\t\t\tuint256 passUp = div(tricks,tricklingUpTax);\n', '\t\t\t\t\t\tuint256 reward = sub(tricks,passUp);//trickling[]\n', '\t\t\t\t\t\taddress reffo = reff[msg.sender];\n', '\t\t\t\t\t\tif( holdingsOf(reffo) >= stakingRequirement){ // your reff must be holding more than the staking requirement\n', '\t\t\t\t\t\t\ttrickling[ reffo ] = add(trickling[ reffo ],passUp);\n', '\t\t\t\t\t\t\ttricklePocket[ reffo ] = add(tricklePocket[ reffo ],reward);\n', "\t\t\t\t\t\t}else{//basically. if your referral guy bailed out then he can't get the rewards, instead give it to the new guy that was baited in by this feature\n", '\t\t\t\t\t\t\ttrickling[ lastGateway ] = add(trickling[ lastGateway ],passUp);\n', '\t\t\t\t\t\t\ttricklePocket[ lastGateway ] = add(tricklePocket[ lastGateway ],reward);\n', '\t\t\t\t\t\t\treff[msg.sender] = lastGateway;\n', '\t\t\t\t\t\t}\n', '\t\t\t\t\t}\n', '\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\tfunction buy() internal {\n', '\t\t\t\t\t\t\t\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\n', '\t\t\t\t\t\t\t\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n', '\t\t\t\t\t\t\t\t\t\trevert();\n', '\t\t\t\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// msg.sender is the address of the caller.\n', '\t\t\t\t\t\t\t\t\tvar sender = msg.sender;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// 10% of the total Ether sent is used to pay existing holders.\n', '\t\t\t\t\t\t\t\t\tuint256 fee = 0; \n', '\t\t\t\t\t\t\t\t\tuint256 trickle = 0; \n', '\t\t\t\t\t\t\t\t\tif(bondHoldings[sender] < totalBondSupply){\n', '\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(msg.value,false);\n', '\t\t\t\t\t\t\t\t\t\ttrickle = div(fee, trickTax);\n', '\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\t\t\t\t\ttrickling[sender] = add(trickling[sender] ,  trickle);\n', '\t\t\t\t\t\t\t\t\t}\n', '\t\t\t\t\t\t\t\t\tvar numEther = msg.value - (fee + trickle);// The amount of Ether used to purchase new tokens for the caller.\n', '\t\t\t\t\t\t\t\t\tvar numTokens = getTokensForEther(numEther);// The number of tokens which can be purchased for numEther.\n', '\n', '\n', '\t\t\t\t\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\n', '\t\t\t\t\t\t\t\t\tvar buyerFee = fee * scaleFactor;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0){// because ...\n', '\t\t\t\t\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n', '\t\t\t\t\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\n', '\t\t\t\t\t\t\t\t\t\t// same way they would have if they bought each token individually.\n', '\t\t\t\t\t\t\t\t\t\tuint256 bonusCoEff;\n', '\t\t\t\t\t\t\t\t\t\tbonusCoEff = (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / ( totalBondSupply + totalBondSupply + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n', '\t\t\t\t\t\t\t\t\t\t// multiplied by the bonus co-efficient.\n', '\t\t\t\t\t\t\t\t\t\tvar holderReward = fee * bonusCoEff;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\tbuyerFee -= holderReward;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\t\t\t\t\tearningsPerToken += holderReward / totalBondSupply;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', "\t\t\t\t\t\t\t\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n", '\t\t\t\t\t\t\t\t\ttotalBondSupply = add(totalBondSupply, numTokens);\n', '\n', '\t\t\t\t\t\t\t\t\tvar averageCostPerToken = div(numTokens , numEther);\n', '\t\t\t\t\t\t\t\t\tvar newTokenSum = add(bondHoldings[sender], numTokens);\n', '\t\t\t\t\t\t\t\t\tvar totalSpentBefore = mul(averageBuyInPrice[sender], holdingsOf(sender) );\n', '\t\t\t\t\t\t\t\t\taverageBuyInPrice[sender] = div( totalSpentBefore + mul( averageCostPerToken , numTokens), newTokenSum )  ;\n', '\n', '\t\t\t\t\t\t\t\t\t// Assign the tokens to the balance of the buyer.\n', '\t\t\t\t\t\t\t\t\tbondHoldings[sender] = add(bondHoldings[sender], numTokens);\n', '\t\t\t\t\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n', '\t\t\t\t\t\t\t\t\t// Also include the fee paid for entering the scheme.\n', '\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the buyer...\n', '\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\n', '\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\n', '\t\t\t\t\t\t\t\t\tpayouts[sender] += payoutDiff;\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n', '\t\t\t\t\t\t\t\t\ttotalPayouts += payoutDiff;\n', '\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum ,  trickle);\n', '\t\t\t\t\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\t\t\t\t\temit onTokenPurchase(sender,numEther,numTokens, reff[sender], investSum);\n', '\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t\t\t\t\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\n', '\t\t\t\t\t\t\t\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\n', '\t\t\t\t\t\t\t\t// will be *significant*.\n', '\t\t\t\t\t\t\t\tfunction sell(uint256 amount) internal {\n', '\t\t\t\t\t\t\t\t    var numEthersBeforeFee = getEtherForTokens(amount);\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// x% of the resulting Ether is used to pay remaining holders.\n', '\t\t\t\t\t\t\t\t\tuint256 fee = 0;\n', '\t\t\t\t\t\t\t\t\tuint256 trickle = 0;\n', '\t\t\t\t\t\t\t\t\tif(totalBondSupply != bondHoldings[msg.sender]){\n', '\t\t\t\t\t\t\t\t\t\tfee = fluxFeed(numEthersBeforeFee,false);//fluxFeed()\n', '\t\t\t\t\t\t\t\t\t\ttrickle = div(fee, trickTax); \n', '\t\t\t\t\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\t\t\t\t\ttrickling[msg.sender] = add(trickling[msg.sender] ,  trickle);\n', '\t\t\t\t\t\t\t\t\t\ttricklingSum = add(tricklingSum ,  trickle);\n', '\t\t\t\t\t\t\t\t\t} \n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t// Net Ether for the seller after the fee has been subtracted.\n', '\t\t\t\t\t\t\t        var numEthers = numEthersBeforeFee - (fee + trickle);\n', '\t\t\t\t\t\t\t\t\t\n', "\t\t\t\t\t\t\t\t\t//How much you bought it for divided by how much you're getting back.\n", '\t\t\t\t\t\t\t\t\t//This means that if you get dumped on, you can get more resolve tokens if you sell out.\n', '\t\t\t\t\t\t\t\t\tmint( mul( div( averageBuyInPrice[msg.sender] * scaleFactor , div(amount,numEthers) ) , amount/*correlate to the amount sold*/) , msg.sender );\n', '\n', "\t\t\t\t\t\t\t\t\t// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\n", '\t\t\t\t\t\t\t\t\ttotalBondSupply = sub(totalBondSupply, amount);\n', '\t\t\t\t\t\t\t\t\t// Remove the tokens from the balance of the buyer.\n', '\t\t\t\t\t\t\t\t\tbondHoldings[msg.sender] = sub(bondHoldings[msg.sender], amount);\n', '\n', '\t\t\t\t\t\t\t        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\n', '\t\t\t\t\t\t\t\t\t// First we compute how much was just paid out to the seller...\n', '\t\t\t\t\t\t\t\t\tint256 payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\n', "\t\t\t\t\t\t\t\t\t// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\n", '\t\t\t\t\t\t\t\t\t// they decide to buy back in.\n', '\t\t\t\t\t\t\t\t\tpayouts[msg.sender] -= payoutDiff;\t\t\n', '\t\t\t\t\t\t\t\t\t\n', "\t\t\t\t\t\t\t\t\t// Decrease the total amount that's been paid out to maintain invariance.\n", '\t\t\t\t\t\t\t        totalPayouts -= payoutDiff;\n', '\t\t\t\t\t\t\t\t\t\n', "\t\t\t\t\t\t\t\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\n", '\t\t\t\t\t\t\t\t\t// selling tokens, but it guards against division by zero).\n', '\t\t\t\t\t\t\t\t\tif (totalBondSupply > 0) {\n', '\t\t\t\t\t\t\t\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\n', '\t\t\t\t\t\t\t\t\t\tvar etherFee = fee * scaleFactor;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// Fee is distributed to all remaining token holders.\n', '\t\t\t\t\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\n', '\t\t\t\t\t\t\t\t\t\tvar rewardPerShare = etherFee / totalBondSupply;\n', '\t\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\t\t\t\t\tearningsPerToken = add(earningsPerToken, rewardPerShare);\n', '\t\t\t\t\t\t\t\t\t}\n', '\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\t\t\t\t\temit onTokenSell(msg.sender,(bondHoldings[msg.sender]+amount),amount,numEthers);\n', '\t\t\t\t\t\t\t\t}\n', '\n', '\t\t\t\t// Converts the Ether accrued as dividends back into Staking tokens without having to\n', '\t\t\t\t// withdraw it first. Saves on gas and potential price spike loss.\n', '\t\t\t\tfunction reinvestDividends() public {\n', '\t\t\t\t\t// Retrieve the dividends associated with the address the request came from.\n', '\t\t\t\t\tvar balance = tricklePocket[msg.sender];\n', '\t\t\t\t\tbalance = add( balance, dividends(msg.sender) );\n', '\t\t\t\t\ttricklingSum = sub(tricklingSum,tricklePocket[msg.sender]);\n', '\t\t\t\t\ttricklePocket[msg.sender] = 0;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Update the payouts array, incrementing the request address by `balance`.\n', '\t\t\t\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\n', '\t\t\t\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n', '\t\t\t\t\t\n', "\t\t\t\t\t// Increase the total amount that's been paid out to maintain invariance.\n", '\t\t\t\t\ttotalPayouts += (int256) (balance * scaleFactor);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Assign balance to a new variable.\n', '\t\t\t\t\tuint value_ = (uint) (balance);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\n', '\t\t\t\t\t// (in which case, why are you even here), abort.\n', '\t\t\t\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\n', '\t\t\t\t\t\trevert();\n', '\t\t\t\t\t\t\n', '\n', '\t\t\t\t\tuint256 fee = 0; \n', '\t\t\t\t\tuint256 trickle = 0;\n', '\t\t\t\t\tif(bondHoldings[msg.sender] != totalBondSupply){\n', '\t\t\t\t\t\tfee = fluxFeed(value_,true); // reinvestment fees are lower than regular ones.\n', '\t\t\t\t\t\ttrickle = div(fee, trickTax);\n', '\t\t\t\t\t\tfee = sub(fee , trickle);\n', '\t\t\t\t\t\ttrickling[msg.sender] += trickle;\n', '\t\t\t\t\t}\n', '\t\t\t\t\t\n', '\n', '\t\t\t\t\tvar res = sub(reserve() , balance);\n', '\t\t\t\t\t// The amount of Ether used to purchase new tokens for the caller.\n', '\t\t\t\t\tvar numEther = value_ - fee;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// The number of tokens which can be purchased for numEther.\n', '\t\t\t\t\tvar numTokens = calculateDividendTokens(numEther, balance);\n', '\t\t\t\t\t\n', '\t\t\t\t\t// The buyer fee, scaled by the scaleFactor variable.\n', '\t\t\t\t\tvar buyerFee = fee * scaleFactor;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Check that we have tokens in existence (this should always be true), or\n', "\t\t\t\t\t// else you're gonna have a bad time.\n", '\t\t\t\t\tif (totalBondSupply > 0) {\n', '\t\t\t\t\t\tuint256 bonusCoEff;\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n', '\t\t\t\t\t\t// The buyer receives part of the distribution for each token bought in the\n', '\t\t\t\t\t\t// same way they would have if they bought each token individually.\n', '\t\t\t\t\t\tbonusCoEff =  (scaleFactor - (res + numEther ) * numTokens * scaleFactor / (totalBondSupply + numTokens) / numEther) * (uint)(crr_d) / (uint)(crr_d-crr_n);\n', '\t\t\t\t\t\n', '\t\t\t\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n', '\t\t\t\t\t\t// multiplied by the bonus co-efficient.\n', '\t\t\t\t\t\tvar holderReward = fee * bonusCoEff;\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\tbuyerFee -= holderReward;\n', '\n', '\t\t\t\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n', '\t\t\t\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n', '\t\t\t\t\t\t\n', '\t\t\t\t\t\t// The Ether value per token is increased proportionally.\n', '\t\t\t\t\t\tearningsPerToken += holderReward / totalBondSupply;\n', '\t\t\t\t\t}\n', '\t\t\t\t\t\n', '\t\t\t\t\tint256 payoutDiff;\n', "\t\t\t\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n", '\t\t\t\t\ttotalBondSupply = add(totalBondSupply, numTokens);\n', '\t\t\t\t\t// Assign the tokens to the balance of the buyer.\n', '\t\t\t\t\tbondHoldings[msg.sender] = add(bondHoldings[msg.sender], numTokens);\n', '\t\t\t\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n', '\t\t\t\t\t// Also include the fee paid for entering the scheme.\n', '\t\t\t\t\t// First we compute how much was just paid out to the buyer...\n', '\t\t\t\t\tpayoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\n', '\t\t\t\t\n', '\t\t\t\t\t\n', '\t\t\t\t\t/*var averageCostPerToken = div(numTokens , numEther);\n', '\t\t\t\t\tvar newTokenSum = add(bondHoldings_FNX[sender], numTokens);\n', '\t\t\t\t\tvar totalSpentBefore = mul(averageBuyInPrice[sender], holdingsOf(sender) );*/\n', '\t\t\t\t\t//averageBuyInPrice[sender] = div( totalSpentBefore + mul( averageCostPerToken , numTokens), newTokenSum )  ;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// Then we update the payouts array for the buyer with this amount...\n', '\t\t\t\t\tpayouts[msg.sender] += payoutDiff;\n', '\t\t\t\t\t\n', '\t\t\t\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n', '\t\t\t\t\ttotalPayouts += payoutDiff;\n', '\n', '\t\t\t\t\t\n', '\n', "\t\t\t\t\ttricklingSum += trickle;//add to trickle's Sum after reserve calculations\n", '\t\t\t\t\ttrickleUp();\n', '\t\t\t\t\temit onReinvestment(msg.sender,numEther,numTokens);\n', '\t\t\t\t}\n', '\t\n', '\t// Dynamic value of Ether in reserve, according to the CRR requirement.\n', '\tfunction reserve() internal constant returns (uint256 amount){\n', '\t\treturn sub(balance(),\n', '\t\t\t  ((uint256) ((int256) (earningsPerToken * totalBondSupply) - totalPayouts ) / scaleFactor) \n', '\t\t);\n', '\t}\n', '\n', '\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\n', '\t// dynamic reserve and totalBondSupply values (derived from the buy and sell prices).\n', '\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n', '\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply);\n', '\t}\n', '\n', '\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\n', '\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\n', '\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalBondSupply);\n', '\t}\n', '\n', '\t// Converts a number tokens into an Ether value.\n', '\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\n', '\t\t// How much reserve Ether do we have left in the contract?\n', '\t\tvar reserveAmount = reserve();\n', '\n', "\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\n", '\t\tif (tokens == (totalBondSupply) )\n', '\t\t\treturn reserveAmount;\n', '\n', '\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\n', "\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\n", '\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \n', '\t\t// and denominator altered to 1 and 2 respectively.\n', '\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalBondSupply - tokens) - price_coeff) * crr_d/crr_n));\n', '\t}\n', '\n', "\t// You don't care about these, but if you really do they're hex values for \n", '\t// co-efficients used to simulate approximations of the log and exp functions.\n', '\tint256  constant one        = 0x10000000000000000;\n', '\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\n', '\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\n', '\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\n', '\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\n', '\tint256  constant c1         = 0x1ffffffffff9dac9b;\n', '\tint256  constant c3         = 0x0aaaaaaac16877908;\n', '\tint256  constant c5         = 0x0666664e5e9fa0c99;\n', '\tint256  constant c7         = 0x049254026a7630acf;\n', '\tint256  constant c9         = 0x038bd75ed37753d68;\n', '\tint256  constant c11        = 0x03284a0c14610924f;\n', '\n', '\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n', '\t// approximates the function log(1+x)-log(1-x)\n', '\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n', '\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n', '\t\tint32 scale = 0;\n', '\t\twhile (a > sqrt2) {\n', '\t\t\ta /= 2;\n', '\t\t\tscale++;\n', '\t\t}\n', '\t\twhile (a <= sqrtdot5) {\n', '\t\t\ta *= 2;\n', '\t\t\tscale--;\n', '\t\t}\n', '\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n', '\t\tvar z = (s*s) / one;\n', '\t\treturn scale * ln2 +\n', '\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n', '\t\t\t\t/one))/one))/one))/one))/one);\n', '\t}\n', '\n', '\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n', '\tint256 constant c4 = -0x000b60b60808399d1;\n', '\tint256 constant c6 =  0x0000455956bccdd06;\n', '\tint256 constant c8 = -0x000001b893ad04b3a;\n', '\t\n', '\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n', '\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n', '\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n', '\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n', '\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n', '\t\ta -= scale*ln2;\n', '\t\tint256 z = (a*a) / one;\n', '\t\tint256 R = ((int256)(2) * one) +\n', '\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n', '\t\texp = (uint256) (((R + a) * one) / (R - a));\n', '\t\tif (scale >= 0)\n', '\t\t\texp <<= scale;\n', '\t\telse\n', '\t\t\texp >>= -scale;\n', '\t\treturn exp;\n', '\t}\n', '\t\n', '\t// The below are safemath implementations of the four arithmetic operators\n', '\t// designed to explicitly prevent over- and under-flows of integer values.\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\tfunction () payable public {\n', '\t\t\n', '\t\tif (msg.value > 0) {\n', '\t\t\tfund(lastGateway);\n', '\t\t} else {\n', '\t\t\twithdrawOld(msg.sender);\n', '\t\t}\n', '\t}\n', '\n', '\n', '\n', '\tuint256 public totalSupply;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    string public name = "0xBabylon";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "SEC";\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function mint(uint256 amount,address _account) internal{\n', '    \ttotalSupply += amount;\n', '    \tbalances[_account] += amount;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
