['pragma solidity ^0.4.22;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public ownerAddress;\n', '  address public transferCreditBotAddress;\n', '  address public twitterBotAddress;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    ownerAddress = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == ownerAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyTransferCreditBot() {\n', '      require(msg.sender == transferCreditBotAddress);\n', '      _;\n', '  }\n', '\n', '  modifier onlyTwitterBot() {\n', '        require(msg.sender == twitterBotAddress);\n', '        _;\n', '    }\n', '\n', '  function setTransferCreditBot(address _newTransferCreditBot) public onlyOwner {\n', '        require(_newTransferCreditBot != address(0));\n', '        transferCreditBotAddress = _newTransferCreditBot;\n', '    }\n', '\n', '  function setTwitterBot(address _newTwitterBot) public onlyOwner {\n', '        require(_newTwitterBot != address(0));\n', '        twitterBotAddress = _newTwitterBot;\n', '    }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(ownerAddress, newOwner);\n', '    ownerAddress = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EtherZaarTwitter is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event addressRegistration(uint256 twitterId, address ethereumAddress);\n', '  event Transfer(uint256 receiverTwitterId, uint256 senderTwitterId, uint256 ethereumAmount);\n', '  event Withdraw(uint256 twitterId, uint256 ethereumAmount);\n', '  event EthereumDeposit(uint256 twitterId, address ethereumAddress, uint256 ethereumAmount);\n', '  event TransferCreditDeposit(uint256 twitterId, uint256 transferCredits);\n', '\n', '  mapping (uint256 => address) public twitterIdToEthereumAddress;\n', '  mapping (uint256 => uint256) public twitterIdToEthereumBalance;\n', '  mapping (uint256 => uint256) public twitterIdToTransferCredits;\n', '\n', '  function _addEthereumAddress(uint256 _twitterId, address _ethereumAddress) external onlyTwitterBot {\n', '    twitterIdToEthereumAddress[_twitterId] = _ethereumAddress;\n', '\n', '    emit addressRegistration(_twitterId, _ethereumAddress);\n', '  }\n', '\n', '  function _depositEthereum(uint256 _twitterId) external payable{\n', '      twitterIdToEthereumBalance[_twitterId] += msg.value;\n', '      emit EthereumDeposit(_twitterId, twitterIdToEthereumAddress[_twitterId], msg.value);\n', '  }\n', '\n', '  function _depositTransferCredits(uint256 _twitterId, uint256 _transferCredits) external onlyTransferCreditBot{\n', '      twitterIdToTransferCredits[_twitterId] += _transferCredits;\n', '      emit TransferCreditDeposit(_twitterId, _transferCredits);\n', '  }\n', '\n', '  function _transferEthereum(uint256 _senderTwitterId, uint256 _receiverTwitterId, uint256 _ethereumAmount) external onlyTwitterBot {\n', '      require(twitterIdToEthereumBalance[_senderTwitterId] >= _ethereumAmount);\n', '      require(twitterIdToTransferCredits[_senderTwitterId] > 0);\n', '\n', '      twitterIdToEthereumBalance[_senderTwitterId] = twitterIdToEthereumBalance[_senderTwitterId] - _ethereumAmount;\n', '      twitterIdToTransferCredits[_senderTwitterId] = twitterIdToTransferCredits[_senderTwitterId] - 1;\n', '      twitterIdToEthereumBalance[_receiverTwitterId] += _ethereumAmount;\n', '\n', '      emit Transfer(_receiverTwitterId, _senderTwitterId, _ethereumAmount);\n', '  }\n', '\n', '  function _withdrawEthereum(uint256 _twitterId) external {\n', '      require(twitterIdToEthereumBalance[_twitterId] > 0);\n', '      require(twitterIdToEthereumAddress[_twitterId] == msg.sender);\n', '\n', '      uint256 transferAmount = twitterIdToEthereumBalance[_twitterId];\n', '      twitterIdToEthereumBalance[_twitterId] = 0;\n', '\n', '      (msg.sender).transfer(transferAmount);\n', '\n', '      emit Withdraw(_twitterId, transferAmount);\n', '  }\n', '\n', '  function _sendEthereum(uint256 _twitterId) external onlyTwitterBot {\n', '      require(twitterIdToEthereumBalance[_twitterId] > 0);\n', '      require(twitterIdToTransferCredits[_twitterId] > 0);\n', '\n', '      twitterIdToTransferCredits[_twitterId] = twitterIdToTransferCredits[_twitterId] - 1;\n', '      uint256 sendAmount = twitterIdToEthereumBalance[_twitterId];\n', '      twitterIdToEthereumBalance[_twitterId] = 0;\n', '\n', '      (twitterIdToEthereumAddress[_twitterId]).transfer(sendAmount);\n', '\n', '      emit Withdraw(_twitterId, sendAmount);\n', '  }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public ownerAddress;\n', '  address public transferCreditBotAddress;\n', '  address public twitterBotAddress;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    ownerAddress = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == ownerAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyTransferCreditBot() {\n', '      require(msg.sender == transferCreditBotAddress);\n', '      _;\n', '  }\n', '\n', '  modifier onlyTwitterBot() {\n', '        require(msg.sender == twitterBotAddress);\n', '        _;\n', '    }\n', '\n', '  function setTransferCreditBot(address _newTransferCreditBot) public onlyOwner {\n', '        require(_newTransferCreditBot != address(0));\n', '        transferCreditBotAddress = _newTransferCreditBot;\n', '    }\n', '\n', '  function setTwitterBot(address _newTwitterBot) public onlyOwner {\n', '        require(_newTwitterBot != address(0));\n', '        twitterBotAddress = _newTwitterBot;\n', '    }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(ownerAddress, newOwner);\n', '    ownerAddress = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract EtherZaarTwitter is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event addressRegistration(uint256 twitterId, address ethereumAddress);\n', '  event Transfer(uint256 receiverTwitterId, uint256 senderTwitterId, uint256 ethereumAmount);\n', '  event Withdraw(uint256 twitterId, uint256 ethereumAmount);\n', '  event EthereumDeposit(uint256 twitterId, address ethereumAddress, uint256 ethereumAmount);\n', '  event TransferCreditDeposit(uint256 twitterId, uint256 transferCredits);\n', '\n', '  mapping (uint256 => address) public twitterIdToEthereumAddress;\n', '  mapping (uint256 => uint256) public twitterIdToEthereumBalance;\n', '  mapping (uint256 => uint256) public twitterIdToTransferCredits;\n', '\n', '  function _addEthereumAddress(uint256 _twitterId, address _ethereumAddress) external onlyTwitterBot {\n', '    twitterIdToEthereumAddress[_twitterId] = _ethereumAddress;\n', '\n', '    emit addressRegistration(_twitterId, _ethereumAddress);\n', '  }\n', '\n', '  function _depositEthereum(uint256 _twitterId) external payable{\n', '      twitterIdToEthereumBalance[_twitterId] += msg.value;\n', '      emit EthereumDeposit(_twitterId, twitterIdToEthereumAddress[_twitterId], msg.value);\n', '  }\n', '\n', '  function _depositTransferCredits(uint256 _twitterId, uint256 _transferCredits) external onlyTransferCreditBot{\n', '      twitterIdToTransferCredits[_twitterId] += _transferCredits;\n', '      emit TransferCreditDeposit(_twitterId, _transferCredits);\n', '  }\n', '\n', '  function _transferEthereum(uint256 _senderTwitterId, uint256 _receiverTwitterId, uint256 _ethereumAmount) external onlyTwitterBot {\n', '      require(twitterIdToEthereumBalance[_senderTwitterId] >= _ethereumAmount);\n', '      require(twitterIdToTransferCredits[_senderTwitterId] > 0);\n', '\n', '      twitterIdToEthereumBalance[_senderTwitterId] = twitterIdToEthereumBalance[_senderTwitterId] - _ethereumAmount;\n', '      twitterIdToTransferCredits[_senderTwitterId] = twitterIdToTransferCredits[_senderTwitterId] - 1;\n', '      twitterIdToEthereumBalance[_receiverTwitterId] += _ethereumAmount;\n', '\n', '      emit Transfer(_receiverTwitterId, _senderTwitterId, _ethereumAmount);\n', '  }\n', '\n', '  function _withdrawEthereum(uint256 _twitterId) external {\n', '      require(twitterIdToEthereumBalance[_twitterId] > 0);\n', '      require(twitterIdToEthereumAddress[_twitterId] == msg.sender);\n', '\n', '      uint256 transferAmount = twitterIdToEthereumBalance[_twitterId];\n', '      twitterIdToEthereumBalance[_twitterId] = 0;\n', '\n', '      (msg.sender).transfer(transferAmount);\n', '\n', '      emit Withdraw(_twitterId, transferAmount);\n', '  }\n', '\n', '  function _sendEthereum(uint256 _twitterId) external onlyTwitterBot {\n', '      require(twitterIdToEthereumBalance[_twitterId] > 0);\n', '      require(twitterIdToTransferCredits[_twitterId] > 0);\n', '\n', '      twitterIdToTransferCredits[_twitterId] = twitterIdToTransferCredits[_twitterId] - 1;\n', '      uint256 sendAmount = twitterIdToEthereumBalance[_twitterId];\n', '      twitterIdToEthereumBalance[_twitterId] = 0;\n', '\n', '      (twitterIdToEthereumAddress[_twitterId]).transfer(sendAmount);\n', '\n', '      emit Withdraw(_twitterId, sendAmount);\n', '  }\n', '}']
