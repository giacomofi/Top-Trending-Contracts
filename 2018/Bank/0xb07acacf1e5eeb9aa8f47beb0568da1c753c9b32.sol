['pragma solidity ^0.4.8;\n', '\n', 'interface token\n', '{\n', '    function transfer(address receiver, uint256 amount) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 amount) returns (bool success);\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', 'contract Crowdsale\n', '{\n', '    address public owner;\n', '    address public seller;\n', '    address public ContractAddress;\n', '    uint public amountRaised;\n', '    uint public price;\n', '    uint public ethereumPrice;\n', '    token public tokenReward;\n', '    address public walletOut1;\n', '    address public walletOut2;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function Crowdsale()\n', '    {\n', '        // Avatar\n', '        walletOut1 = 0x594ae2a6aeab6f5e74bba0958cec21ec4dcd7f1e;\n', '        // A\n', '        walletOut2 = 0x7776eab79aeff7a1c09d8c49a7f3caf252c26451;\n', '\n', '        // адрес продавца\n', '        seller = 0x7776eab79aeff7a1c09d8c49a7f3caf252c26451;\n', '\n', '        owner = msg.sender;\n', '\n', '        price = 15;\n', '        tokenReward = token(0xcd389f4873e8fbce7925b1d57804842043a3bf36);\n', '        ethereumPrice = 447;\n', '    }\n', '\n', '    function changeOwner(address newOwner) onlyowner\n', '    {\n', '        owner = newOwner;\n', '    }\n', '\n', '    modifier onlyowner()\n', '    {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    /* модификатор проверяющий "вызывает продавец или вызывает владелец контракта?" */\n', '    modifier isSetPrice()\n', '    {\n', '        if (msg.sender == seller || msg.sender == owner) _;\n', '    }\n', '\n', '    function () payable\n', '    {\n', '        uint256 amount = msg.value;\n', '        amountRaised += amount;\n', '        uint256 amountOut1 = amount / 2;\n', '        uint256 amountOut2 = amount - amountOut1;\n', '\n', '        uint256 amountWei = amount;\n', '        uint priceUsdCentEth = ethereumPrice * 100;\n', '        uint priceUsdCentAvr = price;\n', '        uint256 amountAvrAtom = ((amountWei * priceUsdCentEth) / priceUsdCentAvr) / 10000000000;\n', '\n', '        if (tokenReward.balanceOf(ContractAddress) < amountAvrAtom) {\n', '            throw;\n', '        }\n', '        tokenReward.transfer(msg.sender, amountAvrAtom);\n', '\n', '        walletOut1.transfer(amountOut1);\n', '        walletOut2.transfer(amountOut2);\n', '\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function setWalletOut1(address wallet) onlyowner\n', '    {\n', '        walletOut1 = wallet;\n', '    }\n', '\n', '    function setWalletOut2(address wallet) onlyowner\n', '    {\n', '        walletOut2 = wallet;\n', '    }\n', '\n', '    function sendAVR(address wallet, uint256 amountAvrAtom) onlyowner\n', '    {\n', '        tokenReward.transfer(wallet, amountAvrAtom);\n', '    }\n', '\n', '    function setContractAddress(address wallet) onlyowner\n', '    {\n', '        ContractAddress = wallet;\n', '    }\n', '\n', '    // uint usdCentCostOfEachToken - цена в центах\n', '    function setPrice(uint usdCentCostOfEachToken) onlyowner\n', '    {\n', '        price = usdCentCostOfEachToken;\n', '    }\n', '\n', '    // uint usd - цена в долларах\n', '    function setEthPrice(uint usd) isSetPrice\n', '    {\n', '        ethereumPrice = usd;\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', 'interface token\n', '{\n', '    function transfer(address receiver, uint256 amount) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 amount) returns (bool success);\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', 'contract Crowdsale\n', '{\n', '    address public owner;\n', '    address public seller;\n', '    address public ContractAddress;\n', '    uint public amountRaised;\n', '    uint public price;\n', '    uint public ethereumPrice;\n', '    token public tokenReward;\n', '    address public walletOut1;\n', '    address public walletOut2;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function Crowdsale()\n', '    {\n', '        // Avatar\n', '        walletOut1 = 0x594ae2a6aeab6f5e74bba0958cec21ec4dcd7f1e;\n', '        // A\n', '        walletOut2 = 0x7776eab79aeff7a1c09d8c49a7f3caf252c26451;\n', '\n', '        // адрес продавца\n', '        seller = 0x7776eab79aeff7a1c09d8c49a7f3caf252c26451;\n', '\n', '        owner = msg.sender;\n', '\n', '        price = 15;\n', '        tokenReward = token(0xcd389f4873e8fbce7925b1d57804842043a3bf36);\n', '        ethereumPrice = 447;\n', '    }\n', '\n', '    function changeOwner(address newOwner) onlyowner\n', '    {\n', '        owner = newOwner;\n', '    }\n', '\n', '    modifier onlyowner()\n', '    {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    /* модификатор проверяющий "вызывает продавец или вызывает владелец контракта?" */\n', '    modifier isSetPrice()\n', '    {\n', '        if (msg.sender == seller || msg.sender == owner) _;\n', '    }\n', '\n', '    function () payable\n', '    {\n', '        uint256 amount = msg.value;\n', '        amountRaised += amount;\n', '        uint256 amountOut1 = amount / 2;\n', '        uint256 amountOut2 = amount - amountOut1;\n', '\n', '        uint256 amountWei = amount;\n', '        uint priceUsdCentEth = ethereumPrice * 100;\n', '        uint priceUsdCentAvr = price;\n', '        uint256 amountAvrAtom = ((amountWei * priceUsdCentEth) / priceUsdCentAvr) / 10000000000;\n', '\n', '        if (tokenReward.balanceOf(ContractAddress) < amountAvrAtom) {\n', '            throw;\n', '        }\n', '        tokenReward.transfer(msg.sender, amountAvrAtom);\n', '\n', '        walletOut1.transfer(amountOut1);\n', '        walletOut2.transfer(amountOut2);\n', '\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    function setWalletOut1(address wallet) onlyowner\n', '    {\n', '        walletOut1 = wallet;\n', '    }\n', '\n', '    function setWalletOut2(address wallet) onlyowner\n', '    {\n', '        walletOut2 = wallet;\n', '    }\n', '\n', '    function sendAVR(address wallet, uint256 amountAvrAtom) onlyowner\n', '    {\n', '        tokenReward.transfer(wallet, amountAvrAtom);\n', '    }\n', '\n', '    function setContractAddress(address wallet) onlyowner\n', '    {\n', '        ContractAddress = wallet;\n', '    }\n', '\n', '    // uint usdCentCostOfEachToken - цена в центах\n', '    function setPrice(uint usdCentCostOfEachToken) onlyowner\n', '    {\n', '        price = usdCentCostOfEachToken;\n', '    }\n', '\n', '    // uint usd - цена в долларах\n', '    function setEthPrice(uint usd) isSetPrice\n', '    {\n', '        ethereumPrice = usd;\n', '    }\n', '}']
