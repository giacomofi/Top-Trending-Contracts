['pragma solidity 0.4.24;\n', 'pragma experimental "v0.5.0";\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract SRNTPriceOracleBasic {\n', '  uint256 public SRNT_per_ETH;\n', '}\n', '\n', 'contract Escrow {\n', '  using SafeMath for uint256;\n', '\n', '  address public party_a;\n', '  address public party_b;\n', '  address constant serenity_wallet = 0x47c8F28e6056374aBA3DF0854306c2556B104601;\n', '  address constant burn_address = 0x0000000000000000000000000000000000000001;\n', '  ERC20Basic constant SRNT_token = ERC20Basic(0xBC7942054F77b82e8A71aCE170E4B00ebAe67eB6);\n', '  SRNTPriceOracleBasic constant SRNT_price_oracle = SRNTPriceOracleBasic(0xae5D95379487d047101C4912BddC6942090E5D17);\n', '\n', '  uint256 public withdrawal_party_a_gets;\n', '  uint256 public withdrawal_party_b_gets;\n', '  address public withdrawal_last_voter;\n', '\n', '  event Deposit(uint256 amount);\n', '  event WithdrawalRequest(address requester, uint256 party_a_gets, uint256 party_b_gets);\n', '  event Withdrawal(uint256 party_a_gets, uint256 party_b_gets);\n', '\n', '  constructor (address new_party_a, address new_party_b) public {\n', '    party_a = new_party_a;\n', '    party_b = new_party_b;\n', '  }\n', '\n', '  function () external payable {\n', '    // New deposit - take commission and issue an event\n', '    uint256 fee = msg.value.div(100);\n', '    uint256 srnt_balance = SRNT_token.balanceOf(address(this));\n', '    uint256 fee_paid_by_srnt = srnt_balance.div(SRNT_price_oracle.SRNT_per_ETH());\n', '    if (fee_paid_by_srnt < fee) {  // Burn all SRNT, deduct from fee\n', '      if (fee_paid_by_srnt > 0) {\n', '        fee = fee.sub(fee_paid_by_srnt);\n', '        SRNT_token.transfer(burn_address, srnt_balance);\n', '      }\n', '      serenity_wallet.transfer(fee);\n', '      emit Deposit(msg.value.sub(fee));\n', '    } else {  // There&#39;s more SRNT available than needed. Burn a part of it.\n', '      SRNT_token.transfer(burn_address, fee.mul(SRNT_price_oracle.SRNT_per_ETH()));\n', '      emit Deposit(msg.value);\n', '    }\n', '  }\n', '\n', '  function request_withdrawal(uint256 party_a_gets, uint256 party_b_gets) external {\n', '    require(msg.sender != withdrawal_last_voter);  // You can&#39;t vote twice\n', '    require((msg.sender == party_a) || (msg.sender == party_b) || (msg.sender == serenity_wallet));\n', '    require(party_a_gets.add(party_b_gets) <= address(this).balance);\n', '\n', '    withdrawal_last_voter = msg.sender;\n', '\n', '    emit WithdrawalRequest(msg.sender, party_a_gets, party_b_gets);\n', '\n', '    if ((withdrawal_party_a_gets == party_a_gets) && (withdrawal_party_b_gets == party_b_gets)) {  // We have consensus\n', '      delete withdrawal_party_a_gets;\n', '      delete withdrawal_party_b_gets;\n', '      delete withdrawal_last_voter;\n', '      if (party_a_gets > 0) {\n', '        party_a.transfer(party_a_gets);\n', '      }\n', '      if (party_b_gets > 0) {\n', '        party_b.transfer(party_b_gets);\n', '      }\n', '      emit Withdrawal(party_a_gets, party_b_gets);\n', '    } else {\n', '      withdrawal_party_a_gets = party_a_gets;\n', '      withdrawal_party_b_gets = party_b_gets;\n', '    }\n', '  }\n', '\n', '}']