['pragma solidity ^0.4.18;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public constant returns (string) {}\n', '    function symbol() public constant returns (string) {}\n', '    function decimals() public constant returns (uint8) {}\n', '    function totalSupply() public constant returns (uint256) {}\n', '    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '///@title - a contract that represents a smart wallet, created by Stox, for every new Stox user\n', 'library SmartWalletLib {\n', '\n', '    /*\n', '     *  Structs\n', '     */\n', '    struct Wallet {\n', '        address operatorAccount;\n', '        address backupAccount;\n', '        address userWithdrawalAccount;\n', '        address feesAccount;\n', '    }\n', '\n', '    /*\n', '     *  Members\n', '     */\n', '    string constant VERSION = "0.1";\n', '   \n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier addressNotSet(address _address) {\n', '        require(_address == 0);\n', '        _;\n', '    }\n', '\n', '    modifier operatorOnly(address _operatorAccount) {\n', '        require(msg.sender == _operatorAccount);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\n', '    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n', '    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n', '\n', '    /*\n', '        @dev Initialize the wallet with the operator and backupAccount address\n', '        \n', '        @param _self                        Wallet storage\n', '        @param _backupAccount               Operator account to release funds in case the user lost his withdrawal account\n', '        @param _operator                    The operator account\n', '        @param _feesAccount                 The account to transfer fees to\n', '    */\n', '    function initWallet(Wallet storage _self, address _backupAccount, address _operator, address _feesAccount) \n', '            public\n', '            validAddress(_backupAccount)\n', '            validAddress(_operator)\n', '            validAddress(_feesAccount)\n', '            {\n', '        \n', '                _self.operatorAccount = _operator;\n', '                _self.backupAccount = _backupAccount;\n', '                _self.feesAccount = _feesAccount;\n', '    }\n', '\n', '    /*\n', '        @dev Setting the account of the user to send funds to. \n', '        \n', '        @param _self                        Wallet storage\n', '        @param _userWithdrawalAccount       The user account to withdraw funds to\n', '    */\n', '    function setUserWithdrawalAccount(Wallet storage _self, address _userWithdrawalAccount) \n', '            public\n', '            operatorOnly(_self.operatorAccount)\n', '            validAddress(_userWithdrawalAccount)\n', '            addressNotSet(_self.userWithdrawalAccount)\n', '            {\n', '        \n', '                _self.userWithdrawalAccount = _userWithdrawalAccount;\n', '                SetUserWithdrawalAccount(_userWithdrawalAccount);\n', '    }\n', '\n', '    /*\n', '        @dev Withdraw funds to a backup account. \n', '\n', '\n', '        @param _self                Wallet storage\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer    \n', '    */\n', '    function transferToBackupAccount(Wallet storage _self, IERC20Token _token, uint _amount) \n', '            public \n', '            operatorOnly(_self.operatorAccount)\n', '            {\n', '        \n', '                _token.transfer(_self.backupAccount, _amount);\n', '                TransferToBackupAccount(_token, _self.backupAccount, _amount); \n', '    }\n', '      \n', '    /*\n', '        @dev Withdraw funds to the user account. \n', '\n', '        @param _self                Wallet storage\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer  \n', '        @param _fee                 Fee to transfer   \n', '    */\n', '    function transferToUserWithdrawalAccount(Wallet storage _self, IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) \n', '            public \n', '            operatorOnly(_self.operatorAccount)\n', '            validAddress(_self.userWithdrawalAccount)\n', '            {\n', '\n', '                if (_fee > 0) {        \n', '                    _feesToken.transfer(_self.feesAccount, _fee); \n', '                }       \n', '                \n', '                _token.transfer(_self.userWithdrawalAccount, _amount);\n', '                TransferToUserWithdrawalAccount(_token, _self.userWithdrawalAccount, _amount,  _feesToken, _self.feesAccount, _fee);   \n', '        \n', '    }\n', '}\n', '\n', '///@title - a contract that represents a smart wallet, created by Stox, for every new Stox user\n', 'contract SmartWallet {\n', '\n', '    /*\n', '     *  Members\n', '     */\n', '    using SmartWalletLib for SmartWalletLib.Wallet;\n', '    SmartWalletLib.Wallet public wallet;\n', '       \n', '   // Wallet public wallet;\n', '    /*\n', '     *  Events\n', '     */\n', '    event TransferToBackupAccount(address _token, address _backupAccount, uint _amount);\n', '    event TransferToUserWithdrawalAccount(address _token, address _userWithdrawalAccount, uint _amount, address _feesToken, address _feesAccount, uint _fee);\n', '    event SetUserWithdrawalAccount(address _userWithdrawalAccount);\n', '     \n', '    /*\n', '        @dev constructor\n', '\n', '        @param _backupAccount       A default operator&#39;s account to send funds to, in cases where the user account is\n', '                                    unavailable or lost\n', '        @param _operator            The contract operator address\n', '        @param _feesAccount         The account to transfer fees to \n', '\n', '    */\n', '    function SmartWallet(address _backupAccount, address _operator, address _feesAccount) public {\n', '        wallet.initWallet(_backupAccount, _operator, _feesAccount);\n', '    }\n', '\n', '    /*\n', '        @dev Setting the account of the user to send funds to. \n', '        \n', '        @param _userWithdrawalAccount       The user account to withdraw funds to\n', '        \n', '    */\n', '    function setUserWithdrawalAccount(address _userWithdrawalAccount) public {\n', '        wallet.setUserWithdrawalAccount(_userWithdrawalAccount);\n', '    }\n', '\n', '    /*\n', '        @dev Withdraw funds to a backup account. \n', '\n', '\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer    \n', '    */\n', '    function transferToBackupAccount(IERC20Token _token, uint _amount) public {\n', '        wallet.transferToBackupAccount(_token, _amount);\n', '    }\n', '\n', '    /*\n', '        @dev Withdraw funds to the user account. \n', '\n', '\n', '        @param _token               The ERC20 token the owner withdraws from \n', '        @param _amount              Amount to transfer    \n', '    */\n', '    function transferToUserWithdrawalAccount(IERC20Token _token, uint _amount, IERC20Token _feesToken, uint _fee) public {\n', '        wallet.transferToUserWithdrawalAccount(_token, _amount, _feesToken, _fee);\n', '    }\n', '}']