['pragma solidity ^0.4.19;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    string public constant name = "Token Name";\n', '    string public constant symbol = "SYM";\n', '    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places\n', '\n', '}\n', '\n', '/**\n', ' *\n', ' *\t# Marketboard Listing\n', ' *\n', ' *\tThis contract represents an item listed on marketboard.io\n', ' *\n', ' */\n', '\n', '/// Represents a listing on the ProWallet Marketboard\n', 'contract MarketboardERC20Listing {\n', '\n', '    /// Contract version\n', '    function _version() pure public returns(uint32) {\n', '        return 2;\n', '    }\n', '\n', '    /// Notifies when the listing has been completed\n', '    event MarketboardListingComplete(address indexed tokenContract, uint256 numTokensSold, uint256 totalEtherPrice, uint256 fee);\n', '\n', '    /// Notifies when the listing was cancelled by the seller\n', '    event MarketboardListingBuyback(address indexed tokenContract, uint256 numTokens);\n', '\n', '\t/// Notifies when the listing has been destroyed\n', '\tevent MarketboardListingDestroyed();\n', '\n', '    /// Notifies that the seller has changed the price on this listing\n', '    event MarketboardListingPriceChanged(uint256 oldPricePerToken, uint256 newPricePerToken);\n', '\n', '\n', '    /// This function modifier fails if the caller is not the contract creator.\n', '    modifier moderatorOnly {\n', '        require(msg.sender == moderator);\n', '        _;\n', '    }\n', '\n', '    /// This function modifier fails if the caller is not the contract creator or token seller.\n', '    modifier moderatorOrSellerOnly {\n', '        require(moderator == msg.sender || seller == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// The Ethereum price per token\n', '\tuint256 public tokenPrice = 0;\n', '\n', '    /// The ERC20 token contract address that we are selling\n', '    address public tokenContract;\n', '\n', '    /// The account which is moderating this transaction. This is also the account which receives the fee profits.\n', '    address moderator;\n', '\n', '    /// The account which will receive the money if someone buys this listing. This is the account which created the listing.\n', '    address seller;\n', '\n', '    /// This is a fixed Ethereum fee added to the transaction. The fee is\n', '    /// sent back to the contract creator after successful purchase.\n', '    uint256 public feeFixed;\n', '\n', '    /// This fee is a percentage of the total price with a base of 100,000, ie. 1,000 is 1%. The fee is\n', '    /// sent back to the contract creator after successful purchase.\n', '    uint32 public feePercentage;\n', '\tuint32 constant public feePercentageMax = 100000;\n', '\n', '    /// Constructor\n', '    function MarketboardERC20Listing(address _moderator, uint256 _feeFixed, uint32 _feePercentage, address _erc20Token, uint256 _tokenPrice) public {\n', '\n', '        // Store the contract creator (the automated server account)\n', '        seller = msg.sender;\n', '        moderator = _moderator;\n', '        feeFixed = _feeFixed;\n', '        feePercentage = _feePercentage;\n', '        tokenContract = _erc20Token;\n', '        tokenPrice = _tokenPrice;\n', '\n', '    }\n', '\n', '    /// Get the total amount of ERC20 tokens we are sending\n', '    function tokenCount() public view returns(uint256) {\n', '\n', '        // Fetch token balance\n', '        ERC20 erc = ERC20(tokenContract);\n', '        return erc.balanceOf(this);\n', '\n', '    }\n', '\n', "    /// Get the number of tokens that equals 1 TOKEN in it's base denomination\n", '    function tokenBase() public view returns(uint256) {\n', '\n', '        // Fetch token balance\n', '        ERC20 erc = ERC20(tokenContract);\n', '        uint256 decimals = erc.decimals();\n', '        return 10 ** decimals;\n', '\n', '    }\n', '\n', '    /// Get the total amount of Ether needed to successfully purchase this item.\n', '    function totalPrice() public view returns(uint256) {\n', '\n', '        // Return price required\n', '        return tokenPrice * tokenCount() / tokenBase() + fee();\n', '\n', '    }\n', '\n', '    /// Get the fee this transaction will cost.\n', '    function fee() public view returns(uint256) {\n', '\n', '        // Get total raw price, item cost * item count\n', '        uint256 price = tokenPrice * tokenCount() / tokenBase();\n', '\n', '        // Calculate fee\n', '        return price * feePercentage / feePercentageMax + feeFixed;\n', '\n', '    }\n', '\n', '    /// Allows the seller to change the price of this listing\n', '    function setPrice(uint256 newTokenPrice) moderatorOrSellerOnly public {\n', '\n', '        // Store old price\n', '        uint256 oldPrice = tokenPrice;\n', '\n', '        // Set new price\n', '        tokenPrice = newTokenPrice;\n', '\n', '        // Notify\n', '        MarketboardListingPriceChanged(oldPrice, newTokenPrice);\n', '\n', '    }\n', '\n', '    /// Perform a buyback, ie. retrieve the item for free. Only the creator or the seller can do this.\n', '    function buyback(address recipient) moderatorOrSellerOnly public {\n', '\n', '        // Send tokens to the recipient\n', '        ERC20 erc = ERC20(tokenContract);\n', '\t\tuint256 balance = erc.balanceOf(this);\n', '        erc.transfer(recipient, balance);\n', '\n', '        // Send event\n', '        MarketboardListingBuyback(tokenContract, balance);\n', '\n', '        // We are done, reset and send remaining Ether (if any) back to the moderator\n', '        reset();\n', '\n', '    }\n', '\n', '\t/// Purchase the item(s) represented by this listing, and send the tokens to\n', '    /// another address instead of the sender.\n', '    function purchase(address recipient) public payable {\n', '\n', '        // Check if the right amount of Ether was sent\n', '        require(msg.value >= totalPrice());\n', '\n', '        // Send tokens to the recipient\n', '        ERC20 erc = ERC20(tokenContract);\n', '\t\tuint256 balance = erc.balanceOf(this);\n', '        erc.transfer(recipient, balance);\n', '\n', '\t\t// Get the amount of Ether to send to the seller\n', '\t\tuint256 basePrice = tokenPrice * balance;\n', '\t\trequire(basePrice > 0);\n', '\t\trequire(basePrice < this.balance);\n', '\n', '\t\t// Send Ether to the seller\n', '\t\tseller.transfer(basePrice);\n', '\n', '        // Send event\n', '        MarketboardListingComplete(tokenContract, balance, 0, 0);\n', '\n', '        // We are done, reset and send remaining Ether back to the moderator as fee\n', '        reset();\n', '\n', '    }\n', '\n', '    /// If somehow another unrelated type of token was sent to this contract, this can be used to claim those tokens back.\n', '    function claimUnrelatedTokens(address unrelatedTokenContract, address recipient) moderatorOrSellerOnly public {\n', '\n', "        // Make sure we're not dealing with the known token\n", '        require(tokenContract != unrelatedTokenContract);\n', '\n', '        // Send tokens to the recipient\n', '        ERC20 erc = ERC20(unrelatedTokenContract);\n', '        uint256 balance = erc.balanceOf(this);\n', '        erc.transfer(recipient, balance);\n', '\n', '    }\n', '\n', '\t/// Destroys the listing. Also transfers profits to the moderator.\n', '\tfunction reset() internal {\n', '\n', '        // Notify\n', '        MarketboardListingDestroyed();\n', '\n', '\t\t// Send remaining Ether (the fee from the last transaction) to the creator as profits\n', '\t\tselfdestruct(moderator);\n', '\n', '\t}\n', '\n', '}']