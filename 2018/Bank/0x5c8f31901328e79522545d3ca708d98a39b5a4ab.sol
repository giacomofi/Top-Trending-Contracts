['pragma solidity 0.4.24;\n', '\n', '\n', 'interface ChickenHunt {\n', '\n', '  /* FUNCTION */\n', '\n', '  function callFor(\n', '    address _to, \n', '    uint256 _value, \n', '    uint256 _gas, \n', '    bytes _code\n', '  ) external payable returns (bool);\n', '\n', '  function addPet(\n', '    uint256 _huntingPower,\n', '    uint256 _offensePower,\n', '    uint256 _defense,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  ) external;\n', '\n', '  function changePet(\n', '    uint256 _id,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  ) external;\n', '\n', '  function addItem(\n', '    uint256 _huntingMultiplier,\n', '    uint256 _offenseMultiplier,\n', '    uint256 _defenseMultiplier,\n', '    uint256 _price\n', '  ) external;\n', '\n', '  function setDepot(uint256 _price, uint256 _max) external;\n', '\n', '  function setConfiguration(\n', '    uint256 _chickenA,\n', '    uint256 _ethereumA,\n', '    uint256 _maxA,\n', '    uint256 _chickenB,\n', '    uint256 _ethereumB,\n', '    uint256 _maxB\n', '  ) external;\n', '\n', '  function setDistribution(\n', '    uint256 _dividendRate,\n', '    uint256 _altarCut,\n', '    uint256 _storeCut,\n', '    uint256 _devCut\n', '  )\n', '    external;\n', '\n', '  function setCooldownTime(uint256 _cooldownTime) external;\n', '  function setNameAndSymbol(string _name, string _symbol) external;\n', '  function setDeveloper(address _developer) external;\n', '  function join() external;\n', '  function withdraw() external;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenHuntCommittee\n', ' * @author M.H. Kang\n', ' * @notice Wrapper solution to unintended flaw that\n', ' * the committee could use ChickenHunt contract ether with callFor function.\n', ' * This vulnerability was discovered by &#39;blah&#39;. I appreciate it!\n', ' */\n', 'contract CHCommitteeWrapper {\n', '\n', '  /* STORAGE */\n', '\n', '  ChickenHunt public chickenHunt;\n', '  address public committee;\n', '\n', '  /* CONSTRUCTOR */\n', '\n', '  constructor(address _chickenHunt) public {\n', '    committee = msg.sender;\n', '    chickenHunt = ChickenHunt(_chickenHunt);\n', '    chickenHunt.join();\n', '  }\n', '\n', '  /* FUNCTION */\n', '\n', '  function () public payable {}\n', '\n', '  function callFor(address _to, uint256 _gas, bytes _code)\n', '    external\n', '    payable\n', '    onlyCommittee\n', '    returns (bool)\n', '  {\n', '    return chickenHunt.callFor.value(msg.value)(_to, msg.value, _gas, _code);\n', '  }\n', '\n', '  function addPet(\n', '    uint256 _huntingPower,\n', '    uint256 _offensePower,\n', '    uint256 _defense,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.addPet(\n', '      _huntingPower, \n', '      _offensePower, \n', '      _defense, \n', '      _chicken, \n', '      _ethereum, \n', '      _max\n', '    );\n', '  }\n', '\n', '  function changePet(\n', '    uint256 _id,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.changePet(\n', '      _id,\n', '      _chicken,\n', '      _ethereum,\n', '      _max\n', '    );\n', '  }\n', '\n', '  function addItem(\n', '    uint256 _huntingMultiplier,\n', '    uint256 _offenseMultiplier,\n', '    uint256 _defenseMultiplier,\n', '    uint256 _price\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.addItem(\n', '      _huntingMultiplier,\n', '      _offenseMultiplier,\n', '      _defenseMultiplier,\n', '      _price\n', '    );\n', '  }\n', '\n', '  function setDepot(uint256 _price, uint256 _max) external onlyCommittee {\n', '    chickenHunt.setDepot(_price, _max);\n', '  }\n', '\n', '  function setConfiguration(\n', '    uint256 _chickenA,\n', '    uint256 _ethereumA,\n', '    uint256 _maxA,\n', '    uint256 _chickenB,\n', '    uint256 _ethereumB,\n', '    uint256 _maxB\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setConfiguration(\n', '      _chickenA,\n', '      _ethereumA,\n', '      _maxA,\n', '      _chickenB,\n', '      _ethereumB,\n', '      _maxB\n', '    );\n', '  }\n', '\n', '  function setDistribution(\n', '    uint256 _dividendRate,\n', '    uint256 _altarCut,\n', '    uint256 _storeCut,\n', '    uint256 _devCut\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setDistribution(\n', '      _dividendRate,\n', '      _altarCut,\n', '      _storeCut,\n', '      _devCut\n', '    );\n', '  }\n', '\n', '  function setCooldownTime(uint256 _cooldownTime) external onlyCommittee {\n', '    chickenHunt.setCooldownTime(_cooldownTime);\n', '  }\n', '\n', '  function setNameAndSymbol(string _name, string _symbol)\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setNameAndSymbol(_name, _symbol);\n', '  }\n', '\n', '  function setDeveloper(address _developer) external onlyCommittee {\n', '    chickenHunt.setDeveloper(_developer);\n', '  }\n', '\n', '  function withdraw() external {\n', '    chickenHunt.withdraw();\n', '    committee.transfer(address(this).balance);\n', '  }\n', '\n', '  function setCommittee(address _committee) external onlyCommittee {\n', '    committee = _committee;\n', '  }\n', '\n', '  /* MODIFIER */\n', '\n', '  modifier onlyCommittee {\n', '    require(msg.sender == committee);\n', '    _;\n', '  }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', 'interface ChickenHunt {\n', '\n', '  /* FUNCTION */\n', '\n', '  function callFor(\n', '    address _to, \n', '    uint256 _value, \n', '    uint256 _gas, \n', '    bytes _code\n', '  ) external payable returns (bool);\n', '\n', '  function addPet(\n', '    uint256 _huntingPower,\n', '    uint256 _offensePower,\n', '    uint256 _defense,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  ) external;\n', '\n', '  function changePet(\n', '    uint256 _id,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  ) external;\n', '\n', '  function addItem(\n', '    uint256 _huntingMultiplier,\n', '    uint256 _offenseMultiplier,\n', '    uint256 _defenseMultiplier,\n', '    uint256 _price\n', '  ) external;\n', '\n', '  function setDepot(uint256 _price, uint256 _max) external;\n', '\n', '  function setConfiguration(\n', '    uint256 _chickenA,\n', '    uint256 _ethereumA,\n', '    uint256 _maxA,\n', '    uint256 _chickenB,\n', '    uint256 _ethereumB,\n', '    uint256 _maxB\n', '  ) external;\n', '\n', '  function setDistribution(\n', '    uint256 _dividendRate,\n', '    uint256 _altarCut,\n', '    uint256 _storeCut,\n', '    uint256 _devCut\n', '  )\n', '    external;\n', '\n', '  function setCooldownTime(uint256 _cooldownTime) external;\n', '  function setNameAndSymbol(string _name, string _symbol) external;\n', '  function setDeveloper(address _developer) external;\n', '  function join() external;\n', '  function withdraw() external;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenHuntCommittee\n', ' * @author M.H. Kang\n', ' * @notice Wrapper solution to unintended flaw that\n', ' * the committee could use ChickenHunt contract ether with callFor function.\n', " * This vulnerability was discovered by 'blah'. I appreciate it!\n", ' */\n', 'contract CHCommitteeWrapper {\n', '\n', '  /* STORAGE */\n', '\n', '  ChickenHunt public chickenHunt;\n', '  address public committee;\n', '\n', '  /* CONSTRUCTOR */\n', '\n', '  constructor(address _chickenHunt) public {\n', '    committee = msg.sender;\n', '    chickenHunt = ChickenHunt(_chickenHunt);\n', '    chickenHunt.join();\n', '  }\n', '\n', '  /* FUNCTION */\n', '\n', '  function () public payable {}\n', '\n', '  function callFor(address _to, uint256 _gas, bytes _code)\n', '    external\n', '    payable\n', '    onlyCommittee\n', '    returns (bool)\n', '  {\n', '    return chickenHunt.callFor.value(msg.value)(_to, msg.value, _gas, _code);\n', '  }\n', '\n', '  function addPet(\n', '    uint256 _huntingPower,\n', '    uint256 _offensePower,\n', '    uint256 _defense,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.addPet(\n', '      _huntingPower, \n', '      _offensePower, \n', '      _defense, \n', '      _chicken, \n', '      _ethereum, \n', '      _max\n', '    );\n', '  }\n', '\n', '  function changePet(\n', '    uint256 _id,\n', '    uint256 _chicken,\n', '    uint256 _ethereum,\n', '    uint256 _max\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.changePet(\n', '      _id,\n', '      _chicken,\n', '      _ethereum,\n', '      _max\n', '    );\n', '  }\n', '\n', '  function addItem(\n', '    uint256 _huntingMultiplier,\n', '    uint256 _offenseMultiplier,\n', '    uint256 _defenseMultiplier,\n', '    uint256 _price\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.addItem(\n', '      _huntingMultiplier,\n', '      _offenseMultiplier,\n', '      _defenseMultiplier,\n', '      _price\n', '    );\n', '  }\n', '\n', '  function setDepot(uint256 _price, uint256 _max) external onlyCommittee {\n', '    chickenHunt.setDepot(_price, _max);\n', '  }\n', '\n', '  function setConfiguration(\n', '    uint256 _chickenA,\n', '    uint256 _ethereumA,\n', '    uint256 _maxA,\n', '    uint256 _chickenB,\n', '    uint256 _ethereumB,\n', '    uint256 _maxB\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setConfiguration(\n', '      _chickenA,\n', '      _ethereumA,\n', '      _maxA,\n', '      _chickenB,\n', '      _ethereumB,\n', '      _maxB\n', '    );\n', '  }\n', '\n', '  function setDistribution(\n', '    uint256 _dividendRate,\n', '    uint256 _altarCut,\n', '    uint256 _storeCut,\n', '    uint256 _devCut\n', '  )\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setDistribution(\n', '      _dividendRate,\n', '      _altarCut,\n', '      _storeCut,\n', '      _devCut\n', '    );\n', '  }\n', '\n', '  function setCooldownTime(uint256 _cooldownTime) external onlyCommittee {\n', '    chickenHunt.setCooldownTime(_cooldownTime);\n', '  }\n', '\n', '  function setNameAndSymbol(string _name, string _symbol)\n', '    external\n', '    onlyCommittee\n', '  {\n', '    chickenHunt.setNameAndSymbol(_name, _symbol);\n', '  }\n', '\n', '  function setDeveloper(address _developer) external onlyCommittee {\n', '    chickenHunt.setDeveloper(_developer);\n', '  }\n', '\n', '  function withdraw() external {\n', '    chickenHunt.withdraw();\n', '    committee.transfer(address(this).balance);\n', '  }\n', '\n', '  function setCommittee(address _committee) external onlyCommittee {\n', '    committee = _committee;\n', '  }\n', '\n', '  /* MODIFIER */\n', '\n', '  modifier onlyCommittee {\n', '    require(msg.sender == committee);\n', '    _;\n', '  }\n', '\n', '}']
