['pragma solidity ^0.4.21;\n', '\n', '// Dev fee payout contract + dividend options \n', '// EtherGuy DApp fee will be stored here \n', '// Buying any token gives right to claim part of development dividends.\n', '// It is suggested you do withdraw once in a while. If someone still finds an attack after this fixed contrat \n', '// they are unable the steal any of your withdrawn eth. Withdrawing does not sell your tokens!\n', '// UI: etherguy.surge.sh/dividend.html\n', '// Made by EtherGuy, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="adc8d9c5c8dfcad8d4edc0ccc4c183cec2c0">[email&#160;protected]</a> \n', '// Version 2 of contract. Exploit(s) found by ccashwell in v1, thanks for reporting them!\n', '\n', '\n', '// IF THERE IS ANY BUG the data will be rerolled from here. See the discord https://discord.gg/R84hD6f if anything happens or mail me \n', '\n', '\n', 'contract Dividends{\n', '    // 10 million token supply \n', '    uint256 constant TokenSupply = 10000000;\n', '    \n', '    uint256 public TotalPaid = 0;\n', '    \n', '    uint16 public Tax = 1250; \n', '    \n', '    address dev;\n', '    \n', '    bool public StopSell=false; // in case aonther bug is found, stop selling so it is easier to give everyone their tokens back. \n', '    \n', '    mapping (address => uint256) public MyTokens;\n', '    mapping (address => uint256) public DividendCollectSince;\n', '    \n', '    // TKNS / PRICE \n', '    mapping(address => uint256[2]) public SellOrder;\n', '    \n', '    // web \n', '    // returns tokens + price (in wei)\n', '    function GetSellOrderDetails(address who) public view returns (uint256, uint256){\n', '        return (SellOrder[who][0], SellOrder[who][1]);\n', '    }\n', '    \n', '    function ViewMyTokens(address who) public view returns (uint256){\n', '        return MyTokens[who];\n', '    }\n', '\n', '    \n', '    function ViewMyDivs(address who) public view returns (uint256){\n', '        uint256 tkns = MyTokens[who];\n', '        if (tkns==0){\n', '            return 0;\n', '        }\n', '        return (GetDividends(who, tkns));\n', '    }\n', '    \n', '    function Bal() public view returns (uint256){\n', '        return (address(this).balance);\n', '    }\n', '    \n', '    // >MINT IT\n', '    function Dividends() public {\n', '        dev = msg.sender;\n', '        // EG\n', '        MyTokens[msg.sender] =  8000000;// was: TokenSupply - 400000;\n', '        // HE\n', '        MyTokens[address(0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285)] = 200000;\n', '        // PG\n', '        MyTokens[address(0x26581d1983ced8955C170eB4d3222DCd3845a092)] = 200000;\n', '        //MyTokens[address(0x0)] = 400000;\n', '        \n', '        // Since not a lot of addresses bought, we can instantly restore this \n', '        // If this happens in the future, we will need users to do a single transaction to retrieve their tokens from \n', '        // previous contract and withdraw all amount immediately \n', '        // Below tokens are paid for - 0.5 szabo per token (cheap right? blame the develo --- oh wait :D )\n', '        \n', '        MyTokens[address(0x3130259deEdb3052E24FAD9d5E1f490CB8CCcaa0)] = 100000;\n', '        MyTokens[address(0x4f0d861281161f39c62B790995fb1e7a0B81B07b)] = 200000;\n', '        MyTokens[address(0x36E058332aE39efaD2315776B9c844E30d07388B)] =  20000;\n', '        MyTokens[address(0x1f2672E17fD7Ec4b52B7F40D41eC5C477fe85c0c)] =  40000;\n', '        MyTokens[address(0xedDaD54E9e1F8dd01e815d84b255998a0a901BbF)] =  20000;\n', '        MyTokens[address(0x0a3239799518E7F7F339867A4739282014b97Dcf)] = 500000;\n', '        MyTokens[address(0x29A9c76aD091c015C12081A1B201c3ea56884579)] = 600000;\n', '        MyTokens[address(0x0668deA6B5ec94D7Ce3C43Fe477888eee2FC1b2C)] = 100000;\n', '        MyTokens[address(0x0982a0bf061f3cec2a004b4d2c802F479099C971)] =  20000;\n', '        //                                                              ------+\n', '        //                                                             1600000 = 1.6M which corresponds to the sell volume. Nice.     +400k + 8M = 10M, which corresponds to token supply                                                          \n', '        \n', '        //PlaceSellOrder(1600000, (0.5 szabo)); // 1 token per 0.5 szabo / 500 gwei or 1000 tokens per 0.5 finney / 0.0005 ether or 1M tokens per 0.5 ETH \n', '    }\n', '    \n', '    function GetDividends(address who, uint256 TokenAmount ) internal view  returns(uint256){\n', '        if (TokenAmount == 0){\n', '            return 0;\n', '        }\n', '        uint256 TotalContractIn = address(this).balance + TotalPaid;\n', '        // division rounds DOWN so we never pay too much\n', '        // no revert errors due to this. \n', '        \n', '        uint256 MyBalance = sub(TotalContractIn, DividendCollectSince[who]);\n', '        \n', '        return  ((MyBalance * TokenAmount) / (TokenSupply));\n', '    }\n', '    \n', '    // dev can stop selling \n', '    // this does NOT DISABLE withdrawing \n', '    function EmergencyStopSell(bool setting) public {\n', '        require(msg.sender==dev);\n', '        StopSell=setting;\n', '    }\n', '    \n', '\n', '    event Sold(address Buyer, address Seller, uint256 price, uint256 tokens);\n', '    // price_max anti-scam arg \n', '    function Buy(address who, uint256 price_max) public payable {\n', '       // require(msg.value >= (1 szabo)); // normal amounts pls \n', '        // lookup order by addr \n', '        require(!StopSell);\n', '        require(who!=msg.sender && who!=tx.origin);\n', '        uint256[2] storage order = SellOrder[who];\n', '        uint256 amt_available = order[0];\n', '        uint256 price = order[1];\n', '        \n', '        // only buy for certain price \n', '        require(price <= price_max);\n', '        \n', '        uint256 excess = 0;\n', '        \n', '        // nothing to sell \n', '        if (amt_available == 0){\n', '            revert();\n', '        }\n', '        \n', '        // high price overflow prevent (ccashwell)\n', '        uint256 max = mul(amt_available, price); \n', '        uint256 currval = msg.value;\n', '        // more than max buy value \n', '        if (currval > max){\n', '            excess = (currval-max);\n', '            currval = max;\n', '        }\n', '        \n', '\n', '\n', '\n', '        uint256 take = currval / price;\n', '        \n', '        if (take == 0){\n', '            revert(); // very high price apparently \n', '        }\n', '        excess = excess + sub(currval, mul(take, price)); \n', '        // do not take max value off .\n', '        currval = sub(currval,sub(currval, mul(take, price)));\n', '        \n', '        // pay fees \n', '\n', '        uint256 fee = (mul(Tax, currval))/10000;\n', '\n', '        \n', '        // the person with these tokens will also receive dividend over this buy order (this.balance)\n', '        // however the excess is removed, see the excess transfer above \n', '     //   if (msg.value > (excess+currval+fee)){\n', '      //      msg.sender.transfer(msg.value-excess-currval-fee);\n', '     //   }\n', '\n', '\n', '        MyTokens[who] = MyTokens[who] - take; \n', '        SellOrder[who][0] = SellOrder[who][0]-take; \n', '        MyTokens[msg.sender] = MyTokens[msg.sender] + take;\n', '    //    MyPayouts[msg.sender] = MyPayouts[msg.sender] + GetDividends(msg.sender, take);\n', '        //DividendCollectSince[msg.sender] = (address(this).balance) + TotalPaid;\n', '        \n', '        emit Sold(msg.sender, who, price, take);\n', '       // push((excess + currval)/(1 finney), (msg.value)/(1 finney));\n', '       \n', '       // all transfers at end \n', '       \n', '       \n', '        dev.transfer(fee);\n', '        who.transfer(currval-fee);\n', '        if ((excess) > 0){\n', '            msg.sender.transfer(excess);\n', '        }\n', '        // call withdraw with tokens before data change \n', '        _withdraw(who, MyTokens[who]+take);\n', '        //DividendCollectSince[msg.sender] = (address(this).balance) + TotalPaid;\n', '        if (sub(MyTokens[msg.sender],take) > 0){\n', '            _withdraw(msg.sender,MyTokens[msg.sender]-take);    \n', '        }\n', '        else{\n', '            // withdraw zero tokens to set DividendCollectSince to the right place. \n', '            // updates before this break the withdraw if user has any tokens .\n', '            _withdraw(msg.sender, 0);\n', '        }\n', '        \n', '        \n', '        \n', '    }\n', '    \n', '    function Withdraw() public {\n', '        _withdraw(msg.sender, MyTokens[msg.sender]);\n', '    }\n', '    \n', '    \n', '    event GiveETH(address who, uint256 yummy_eth);\n', '    function _withdraw(address who, uint256 amt) internal{\n', '        // withdraws from amt. \n', '        // (amt not used in current code, always same value)\n', '       // if (MyTokens[who] < amt){\n', '        //    revert(); // ??? security check \n', '       // }\n', '        \n', '        uint256 divs = GetDividends(who, amt);\n', '        TotalPaid = TotalPaid + divs;\n', '        DividendCollectSince[who] = sub(TotalPaid + address(this).balance, divs);\n', '        \n', '        // muh logs \n', '        emit GiveETH(who, divs);\n', '        \n', '        who.transfer(divs);\n', '\n', '    }\n', '    \n', '    event SellOrderPlaced(address who, uint256 amt, uint256 price);\n', '    function PlaceSellOrder(uint256 amt, uint256 price) public {\n', '        // replaces old order \n', '        if (amt > MyTokens[msg.sender]){\n', '            revert(); // ?? more sell than you got \n', '        }\n', '        SellOrder[msg.sender] = [amt,price];\n', '        emit SellOrderPlaced(msg.sender, amt, price);\n', '    }\n', '    \n', '    function ChangeTax(uint16 amt) public {\n', '        require (amt <= 2500);\n', '        require(msg.sender == dev);\n', '        Tax=amt;\n', '    }\n', '    \n', '\n', '    \n', '    // dump divs in contract \n', '    function() public payable {\n', '        \n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    } \n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '    \n', '}']