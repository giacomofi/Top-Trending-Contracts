['pragma solidity ^0.4.22;\n', '\n', 'contract EthMashMount {\n', '\n', '    address public owner;\n', '    mapping (address => uint) public withdrawals;\n', '\n', '    uint round;\n', '    mapping (uint => address[]) participants;\n', '    \n', '    event Log(address indexed user, uint action, uint price);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        round = 1;\n', '        participants[1].push(owner);\n', '    }\n', '\n', '    modifier whenOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ownerWithdraw(uint amount) external whenOwner {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function ownerDestroy() external whenOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function publicGetRound() view public returns (uint) {\n', '        return round;\n', '    }\n', '\n', '    function publicGetParticipants(uint index) view public returns (uint) {\n', '        return participants[index].length;\n', '    }\n', '\n', '    function publicGetParticipant(uint index, uint participant) view public returns (address) {\n', '        return participants[index][participant];\n', '    }\n', '\n', '    function publicGetBalance(address player) view public returns (uint) {\n', '        return withdrawals[player];\n', '    }\n', '\n', '    function userWithdraw() public {\n', '        require(withdrawals[msg.sender] > 0);\n', '        uint amount = withdrawals[msg.sender];\n', '        withdrawals[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '        emit Log(msg.sender, 0, amount);\n', '    }\n', '\n', '    function userRegister() public payable {\n', '        require(msg.value == 105 finney);\n', '        emit Log(msg.sender, 1, msg.value);\n', '        participants[round].push(msg.sender);\n', '\n', '        uint reward = 100 finney;\n', '        uint random = (uint(blockhash(block.number - 1)) + uint(participants[round][0]) + uint(msg.sender));\n', '\n', '        if (random % 2 == 0) {\n', '            withdrawals[participants[round][0]] += reward;\n', '            emit Log(participants[round][0], 2, reward);\n', '        } else {\n', '            round++;\n', '            participants[round].push(msg.sender);\n', '            withdrawals[msg.sender] += reward;\n', '            emit Log(msg.sender, 2, reward);\n', '        }\n', '    }\n', '}']