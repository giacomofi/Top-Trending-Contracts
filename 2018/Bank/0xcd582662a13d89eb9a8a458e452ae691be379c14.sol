['contract GEE {\n', '\n', '    string public name = "Green Earth Economy Token";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "GEE";\n', '\n', '    address public _owner = 0xb9a2Dd4453dE3f4cF1983f6F6f2521a2BA40E4c8;\n', '    address public _agent = 0xff23a447fD49966043342AbD692F9193f2399f79;\n', '    address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c;\n', '    address public _devFeesAddr = 0x0f521BE3Cd38eb6AA546F8305ee65B62d3018032;\n', '    uint256 public _tokePerEth = 275;\n', '\n', '    bool _payFees = false;\n', '    uint256 _fees = 1500;    // 15% initially\n', '    uint256 _lifeVal = 0;\n', '    uint256 _feeLimit = 312 * 1 ether;\n', '    uint256 _devFees = 0;\n', '\n', '    uint256 public weiAmount;\n', '    uint256 incomingValueAsEth;\n', '    uint256 _calcToken;\n', '    uint256 _tokePerWei;\n', '\n', '    uint256 public _totalSupply = 21000000 * 1 ether;\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // Storage\n', '    mapping (address => uint256) public balances;\n', '\n', '    function GEE() {\n', '        _owner = msg.sender;\n', '        preMine();\n', '    }\n', '\n', '    function preMine() {\n', '        // premine 4m to owner, 1m to dev, 1m to agent\n', '        balances[_owner] = 2000000 * 1 ether;\n', '        Transfer(this, _owner, balances[_owner]);\n', '\n', '        balances[_dev] = 1000000 * 1 ether;\n', '        Transfer(this, _dev, balances[_dev]);\n', '\n', '        balances[_agent] = 1000000 * 1 ether;\n', '        Transfer(this, _agent, balances[_agent]);\n', '\n', '        // reduce _totalSupply\n', '        _totalSupply = sub(_totalSupply, (4000000 * 1 ether));\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        // sender must have enough tokens to transfer\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '        // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        // contact..?\n', '        require(codeLength == 0);\n', '\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        // sender must have enough tokens to transfer\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '        // contract..? .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        // we decided that we don&#39;t want to lose tokens into contracts\n', '        require(codeLength == 0);\n', '\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    // fallback to receive ETH into contract and send tokens back based on current exchange rate\n', '    function () payable public {\n', '        require(msg.value > 0);\n', '        uint256 _tokens = mul(msg.value,_tokePerEth);\n', '        _tokens = div(_tokens,10);\n', '        require(_totalSupply >= _tokens);//, "Insufficient tokens available at current exchange rate");\n', '        _totalSupply = sub(_totalSupply, _tokens);\n', '        balances[msg.sender] = add(balances[msg.sender], _tokens);\n', '        Transfer(this, msg.sender, _tokens);\n', '        _lifeVal = add(_lifeVal, msg.value);\n', '\n', '        if(!_payFees) {\n', '            // then check whether fees are due and set _payFees accordingly\n', '            if(_lifeVal >= _feeLimit) _payFees = true;\n', '        }\n', '\n', '        if(_payFees) {\n', '            _devFees = add(_devFees, ((msg.value * _fees) / 10000));\n', '        }\n', '    }\n', '\n', '    function changePayRate(uint256 _newRate) public {\n', '        require(((msg.sender == _owner) || (msg.sender == _dev)) && (_newRate >= 0));\n', '        _tokePerEth = _newRate;\n', '    }\n', '\n', '    function safeWithdrawal(address _receiver, uint256 _value) public {\n', '        require((msg.sender == _owner));\n', '        uint256 valueAsEth = mul(_value,1 ether);\n', '\n', '        // send the dev fees\n', '        if(_payFees) _devFeesAddr.transfer(_devFees);\n', '\n', '        // check balance before transferring\n', '        require(valueAsEth <= this.balance);\n', '        _receiver.transfer(valueAsEth);\n', '    }\n', '\n', '    function balanceOf(address _receiver) public constant returns (uint balance) {\n', '        return balances[_receiver];\n', '    }\n', '\n', '    function changeOwner(address _receiver) public {\n', '        require(msg.sender == _dev);\n', '        _dev = _receiver;\n', '    }\n', '\n', '    function changeDev(address _receiver) public {\n', '        require(msg.sender == _owner);\n', '        _owner = _receiver;\n', '    }\n', '\n', '    function changeDevFeesAddr(address _receiver) public {\n', '        require(msg.sender == _dev);\n', '        _devFeesAddr = _receiver;\n', '    }\n', '\n', '    function changeAgent(address _receiver) public {\n', '        require(msg.sender == _agent);\n', '        _agent = _receiver;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // just in case fallback\n', '    function updateTokenBalance(uint256 newBalance) public {\n', '        require(msg.sender == _owner);\n', '        _totalSupply = add(_totalSupply,newBalance);\n', '    }\n', '\n', '    function getBalance() public constant returns (uint256) {\n', '        return this.balance;\n', '    }\n', '    function getLifeVal() public returns (uint256) {\n', '        require((msg.sender == _owner) || (msg.sender == _dev));\n', '        return _lifeVal;\n', '    }\n', '\n', '    // enables fee update - must be between 0 and 20 (%)\n', '    function updateFeeAmount(uint _newFee) public {\n', '        require((msg.sender == _dev) || (msg.sender == _owner));\n', '        require((_newFee >= 0) && (_newFee <= 20));\n', '        _fees = _newFee * 100;\n', '    }\n', '\n', '    function withdrawDevFees() public {\n', '        require(_payFees);\n', '        _devFeesAddr.transfer(_devFees);\n', '        _devFees = 0;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']
['contract GEE {\n', '\n', '    string public name = "Green Earth Economy Token";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "GEE";\n', '\n', '    address public _owner = 0xb9a2Dd4453dE3f4cF1983f6F6f2521a2BA40E4c8;\n', '    address public _agent = 0xff23a447fD49966043342AbD692F9193f2399f79;\n', '    address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c;\n', '    address public _devFeesAddr = 0x0f521BE3Cd38eb6AA546F8305ee65B62d3018032;\n', '    uint256 public _tokePerEth = 275;\n', '\n', '    bool _payFees = false;\n', '    uint256 _fees = 1500;    // 15% initially\n', '    uint256 _lifeVal = 0;\n', '    uint256 _feeLimit = 312 * 1 ether;\n', '    uint256 _devFees = 0;\n', '\n', '    uint256 public weiAmount;\n', '    uint256 incomingValueAsEth;\n', '    uint256 _calcToken;\n', '    uint256 _tokePerWei;\n', '\n', '    uint256 public _totalSupply = 21000000 * 1 ether;\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // Storage\n', '    mapping (address => uint256) public balances;\n', '\n', '    function GEE() {\n', '        _owner = msg.sender;\n', '        preMine();\n', '    }\n', '\n', '    function preMine() {\n', '        // premine 4m to owner, 1m to dev, 1m to agent\n', '        balances[_owner] = 2000000 * 1 ether;\n', '        Transfer(this, _owner, balances[_owner]);\n', '\n', '        balances[_dev] = 1000000 * 1 ether;\n', '        Transfer(this, _dev, balances[_dev]);\n', '\n', '        balances[_agent] = 1000000 * 1 ether;\n', '        Transfer(this, _agent, balances[_agent]);\n', '\n', '        // reduce _totalSupply\n', '        _totalSupply = sub(_totalSupply, (4000000 * 1 ether));\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        // sender must have enough tokens to transfer\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '        // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        // contact..?\n', '        require(codeLength == 0);\n', '\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        // sender must have enough tokens to transfer\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '        // contract..? .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', "        // we decided that we don't want to lose tokens into contracts\n", '        require(codeLength == 0);\n', '\n', '        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    // fallback to receive ETH into contract and send tokens back based on current exchange rate\n', '    function () payable public {\n', '        require(msg.value > 0);\n', '        uint256 _tokens = mul(msg.value,_tokePerEth);\n', '        _tokens = div(_tokens,10);\n', '        require(_totalSupply >= _tokens);//, "Insufficient tokens available at current exchange rate");\n', '        _totalSupply = sub(_totalSupply, _tokens);\n', '        balances[msg.sender] = add(balances[msg.sender], _tokens);\n', '        Transfer(this, msg.sender, _tokens);\n', '        _lifeVal = add(_lifeVal, msg.value);\n', '\n', '        if(!_payFees) {\n', '            // then check whether fees are due and set _payFees accordingly\n', '            if(_lifeVal >= _feeLimit) _payFees = true;\n', '        }\n', '\n', '        if(_payFees) {\n', '            _devFees = add(_devFees, ((msg.value * _fees) / 10000));\n', '        }\n', '    }\n', '\n', '    function changePayRate(uint256 _newRate) public {\n', '        require(((msg.sender == _owner) || (msg.sender == _dev)) && (_newRate >= 0));\n', '        _tokePerEth = _newRate;\n', '    }\n', '\n', '    function safeWithdrawal(address _receiver, uint256 _value) public {\n', '        require((msg.sender == _owner));\n', '        uint256 valueAsEth = mul(_value,1 ether);\n', '\n', '        // send the dev fees\n', '        if(_payFees) _devFeesAddr.transfer(_devFees);\n', '\n', '        // check balance before transferring\n', '        require(valueAsEth <= this.balance);\n', '        _receiver.transfer(valueAsEth);\n', '    }\n', '\n', '    function balanceOf(address _receiver) public constant returns (uint balance) {\n', '        return balances[_receiver];\n', '    }\n', '\n', '    function changeOwner(address _receiver) public {\n', '        require(msg.sender == _dev);\n', '        _dev = _receiver;\n', '    }\n', '\n', '    function changeDev(address _receiver) public {\n', '        require(msg.sender == _owner);\n', '        _owner = _receiver;\n', '    }\n', '\n', '    function changeDevFeesAddr(address _receiver) public {\n', '        require(msg.sender == _dev);\n', '        _devFeesAddr = _receiver;\n', '    }\n', '\n', '    function changeAgent(address _receiver) public {\n', '        require(msg.sender == _agent);\n', '        _agent = _receiver;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // just in case fallback\n', '    function updateTokenBalance(uint256 newBalance) public {\n', '        require(msg.sender == _owner);\n', '        _totalSupply = add(_totalSupply,newBalance);\n', '    }\n', '\n', '    function getBalance() public constant returns (uint256) {\n', '        return this.balance;\n', '    }\n', '    function getLifeVal() public returns (uint256) {\n', '        require((msg.sender == _owner) || (msg.sender == _dev));\n', '        return _lifeVal;\n', '    }\n', '\n', '    // enables fee update - must be between 0 and 20 (%)\n', '    function updateFeeAmount(uint _newFee) public {\n', '        require((msg.sender == _dev) || (msg.sender == _owner));\n', '        require((_newFee >= 0) && (_newFee <= 20));\n', '        _fees = _newFee * 100;\n', '    }\n', '\n', '    function withdrawDevFees() public {\n', '        require(_payFees);\n', '        _devFeesAddr.transfer(_devFees);\n', '        _devFees = 0;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']
