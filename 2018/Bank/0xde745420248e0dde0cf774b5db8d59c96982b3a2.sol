['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '}\n', '\n', 'contract Payout {\n', '    ERC20Basic HorseToken;\n', '    address payoutPoolAddress;\n', '    address owner;\n', '    address dev;\n', '    address devTokensVestingAddress;\n', '    bool payoutPaused;\n', '    bool payoutSetup;\n', '    uint256 public payoutPoolAmount;\n', '    mapping(address => bool) public hasClaimed;\n', '\n', '    constructor() public {\n', '        HorseToken = ERC20Basic(0x5B0751713b2527d7f002c0c4e2a37e1219610A6B);        // Horse Token Address\n', '        payoutPoolAddress = address(0xf783A81F046448c38f3c863885D9e99D10209779);    // takeout pool\n', '        dev = address(0x1F92771237Bd5eae04e91B4B6F1d1a78D41565a2);                  // dev wallet\n', '        devTokensVestingAddress = address(0x44935883932b0260C6B1018Cf6436650BD52a257); // vesting contract\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier isPayoutPaused {\n', '        require(!payoutPaused);\n', '        _;\n', '    }\n', '    \n', '    modifier hasNotClaimed {\n', '        require(!hasClaimed[msg.sender]);\n', '        _;\n', '    }\n', '     modifier isPayoutSetup {\n', '         require(payoutSetup);\n', '         _;\n', '     }\n', '    \n', '    function setupPayout() external payable {\n', '        require(!payoutSetup);\n', '        require(msg.sender == payoutPoolAddress);\n', '        payoutPoolAmount = msg.value;\n', '        payoutSetup = true;\n', '        payoutPaused = true;\n', '    }\n', '    \n', '    function getTokenBalance() public view returns (uint256) {\n', '        if (msg.sender == dev) {\n', '            return (HorseToken.balanceOf(devTokensVestingAddress));\n', '        } else {\n', '            return (HorseToken.balanceOf(msg.sender));\n', '        }\n', '    }\n', '    \n', '    function getRewardEstimate() public view isPayoutSetup returns(uint256 rewardEstimate) {\n', '        uint factor = getTokenBalance();\n', '        uint totalSupply = HorseToken.totalSupply();\n', '        factor = factor*(10**18);   // 18 decimal precision\n', '        factor = (factor/(totalSupply));\n', '        rewardEstimate = (payoutPoolAmount*factor)/(10**18); // 18 decimal correction\n', '    }\n', '    \n', '    function claim() external isPayoutPaused hasNotClaimed isPayoutSetup {\n', '        uint rewardAmount = getRewardEstimate();\n', '        hasClaimed[msg.sender] = true;\n', '        require(rewardAmount <= address(this).balance);\n', '        msg.sender.transfer(rewardAmount);\n', '    }\n', '    \n', '    function payoutControlSwitch(bool status) external onlyOwner {\n', '        payoutPaused = status;\n', '    }\n', '    \n', '    function extractFund(uint256 _amount) external onlyOwner {\n', '        if (_amount == 0) {\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            require(_amount <= address(this).balance);\n', '            owner.transfer(_amount);\n', '        }\n', '    }\n', '}']