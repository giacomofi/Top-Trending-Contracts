['pragma solidity ^0.4.23;\n', '\n', 'contract Oasis{\n', '    function getBestOffer(address sell_gem, address buy_gem) public constant returns(uint256);\n', '    function getOffer(uint id) public constant returns (uint, address, uint, address);\n', '}\n', '\n', '\n', 'contract PriceGet {\n', '    using SafeMath for uint;\n', '    \n', '    \n', '    Oasis market;\n', '    address public marketAddress;\n', '    address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    mapping( address => uint256 ) public locked;\n', '    mapping( address => uint256 ) public tokenBalance;\n', '\n', '    constructor(address addr) public {\n', '        marketAddress = addr;\n', '        market = Oasis(marketAddress);\n', '    }\n', '    \n', '    \n', '    function deposit() public payable {\n', '        require(msg.value > 0.001 ether);\n', '        locked[msg.sender] += msg.value;\n', '    }\n', '    \n', '    \n', '    function mint(uint256 amount) public {\n', '        require(locked[msg.sender] > 0.001 ether);\n', '        uint currentPrice = getPrice();\n', '        uint tokens = SafeMath.div(amount*1e18, currentPrice);\n', '        tokenBalance[msg.sender] = SafeMath.add(tokenBalance[msg.sender], tokens);\n', '    }\n', '    \n', '    \n', '    function burn(uint256 amount) public {\n', '        require(amount <= tokenBalance[msg.sender]);\n', '        tokenBalance[msg.sender] = SafeMath.sub(tokenBalance[msg.sender], amount);\n', '    }\n', '    \n', '    \n', '    function tokenValue(address user) public view returns(uint256) {\n', '        require(tokenBalance[user] > 0);\n', '        uint tokens = tokenBalance[user];\n', '        uint currentPrice = getPrice();\n', '        uint value = SafeMath.mul(tokens, currentPrice);\n', '        return value;\n', '    }\n', '    \n', '    \n', '    function withdraw() public {\n', '        require(tokenBalance[msg.sender] == 0);\n', '        require(locked[msg.sender] > 0);\n', '        uint payout = locked[msg.sender];\n', '        locked[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '    \n', '    \n', '    function getPrice() public view returns(uint256) {\n', '        uint id = market.getBestOffer(weth,dai);\n', '        uint payAmt;\n', '        uint buyAmt;\n', '        address payGem;\n', '        address buyGem;\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id);\n', '        uint rate = SafeMath.div(buyAmt*1e18, payAmt);\n', '        return rate;\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Oasis{\n', '    function getBestOffer(address sell_gem, address buy_gem) public constant returns(uint256);\n', '    function getOffer(uint id) public constant returns (uint, address, uint, address);\n', '}\n', '\n', '\n', 'contract PriceGet {\n', '    using SafeMath for uint;\n', '    \n', '    \n', '    Oasis market;\n', '    address public marketAddress;\n', '    address public dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n', '    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    mapping( address => uint256 ) public locked;\n', '    mapping( address => uint256 ) public tokenBalance;\n', '\n', '    constructor(address addr) public {\n', '        marketAddress = addr;\n', '        market = Oasis(marketAddress);\n', '    }\n', '    \n', '    \n', '    function deposit() public payable {\n', '        require(msg.value > 0.001 ether);\n', '        locked[msg.sender] += msg.value;\n', '    }\n', '    \n', '    \n', '    function mint(uint256 amount) public {\n', '        require(locked[msg.sender] > 0.001 ether);\n', '        uint currentPrice = getPrice();\n', '        uint tokens = SafeMath.div(amount*1e18, currentPrice);\n', '        tokenBalance[msg.sender] = SafeMath.add(tokenBalance[msg.sender], tokens);\n', '    }\n', '    \n', '    \n', '    function burn(uint256 amount) public {\n', '        require(amount <= tokenBalance[msg.sender]);\n', '        tokenBalance[msg.sender] = SafeMath.sub(tokenBalance[msg.sender], amount);\n', '    }\n', '    \n', '    \n', '    function tokenValue(address user) public view returns(uint256) {\n', '        require(tokenBalance[user] > 0);\n', '        uint tokens = tokenBalance[user];\n', '        uint currentPrice = getPrice();\n', '        uint value = SafeMath.mul(tokens, currentPrice);\n', '        return value;\n', '    }\n', '    \n', '    \n', '    function withdraw() public {\n', '        require(tokenBalance[msg.sender] == 0);\n', '        require(locked[msg.sender] > 0);\n', '        uint payout = locked[msg.sender];\n', '        locked[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '    \n', '    \n', '    function getPrice() public view returns(uint256) {\n', '        uint id = market.getBestOffer(weth,dai);\n', '        uint payAmt;\n', '        uint buyAmt;\n', '        address payGem;\n', '        address buyGem;\n', '        (payAmt, payGem, buyAmt, buyGem) = market.getOffer(id);\n', '        uint rate = SafeMath.div(buyAmt*1e18, payAmt);\n', '        return rate;\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
