['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract LowRiskBag {\n', '  using SafeMath for uint256;\n', '\n', '  address contractOwner;\n', '  uint tokenStartPrice = 0.001 ether;\n', '  uint tokenPrice;\n', '  address tokenOwner;\n', '  uint lastBuyBlock;\n', '  uint newRoundDelay = 40;\n', '  event Transfer(address indexed from, address indexed to, uint256 price);\n', '  event NewRound();\n', '    \n', '\n', '  function LowRiskBag() public {\n', '    contractOwner = msg.sender;\n', '    tokenOwner = address(0);\n', '    lastBuyBlock = block.number; \n', '    tokenPrice = tokenStartPrice;\n', '  }\n', '\n', '  function changeContractOwner(address newOwner) public {\n', '    require(contractOwner == msg.sender);\n', '    contractOwner = newOwner;\n', '  }\n', '  function changeStartPrice(uint price) public {\n', '    require(contractOwner == msg.sender);\n', '    tokenStartPrice = price;\n', '  }\n', '    \n', '  function changeNewRoundDelay(uint delay) public {\n', '    require(contractOwner == msg.sender);\n', '    newRoundDelay = delay;\n', '  }\n', '  \n', '  function buyToken() public payable {\n', '    address currentOwner = tokenOwner;\n', '    uint256 currentPrice = tokenPrice;\n', '\n', '    require(currentOwner != msg.sender);\n', '    require(msg.value >= currentPrice);\n', '    require(currentPrice > 0);\n', '\n', '    uint256 paidTooMuch = msg.value.sub(currentPrice);\n', '    uint256 payment = currentPrice.div(2);\n', '    \n', '    tokenPrice = currentPrice.mul(110).div(50);\n', '    tokenOwner = msg.sender;\n', '    lastBuyBlock = block.number;\n', '\n', '    Transfer(currentOwner, msg.sender, currentPrice);\n', '    if (currentOwner != address(0))\n', '      currentOwner.transfer(payment);\n', '    if (paidTooMuch > 0)\n', '      msg.sender.transfer(paidTooMuch);\n', '  }\n', '\n', '  function getBlocksToNextRound() public view returns(uint) {\n', '    if (lastBuyBlock + newRoundDelay < block.number)\n', '      return 0;\n', '    return lastBuyBlock + newRoundDelay + 1 - block.number;\n', '  }\n', '\n', '  function getCurrentData() public view returns (uint price, uint nextPrice, uint pool, uint nextPool, address owner, bool canFinish) {\n', '    owner = tokenOwner;\n', '    pool = tokenPrice.mul(50).div(110).mul(85).div(100);\n', '    nextPool = tokenPrice.mul(85).div(100);\n', '    price = tokenPrice;\n', '    nextPrice = price.mul(110).div(50);\n', '    if (getBlocksToNextRound() == 0)\n', '      canFinish = true;\n', '    else\n', '      canFinish = false;\n', '  }\n', '\n', '  function finishRound() public {\n', '    require(tokenPrice > tokenStartPrice);\n', '    require(tokenOwner == msg.sender || lastBuyBlock + newRoundDelay < block.number);\n', '    lastBuyBlock = block.number;\n', '    uint payout = tokenPrice.mul(50).div(110).mul(85).div(100); // 85% of last paid price\n', '    address owner = tokenOwner;\n', '    tokenPrice = tokenStartPrice;\n', '    tokenOwner = address(0);\n', '    owner.transfer(payout);\n', '    NewRound();\n', '  }\n', '\n', '  function payout(uint amount) public {\n', '    require(contractOwner == msg.sender);\n', '    uint balance = this.balance;\n', '    if (tokenPrice > tokenStartPrice)\n', '      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\n', '    if (amount>balance)\n', '      amount = balance;\n', '    contractOwner.transfer(amount);\n', '  }\n', '  \n', '  function getBalance() public view returns(uint balance) {\n', '    balance = this.balance;\n', '    if (tokenPrice > tokenStartPrice)\n', '      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\n', '      \n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract LowRiskBag {\n', '  using SafeMath for uint256;\n', '\n', '  address contractOwner;\n', '  uint tokenStartPrice = 0.001 ether;\n', '  uint tokenPrice;\n', '  address tokenOwner;\n', '  uint lastBuyBlock;\n', '  uint newRoundDelay = 40;\n', '  event Transfer(address indexed from, address indexed to, uint256 price);\n', '  event NewRound();\n', '    \n', '\n', '  function LowRiskBag() public {\n', '    contractOwner = msg.sender;\n', '    tokenOwner = address(0);\n', '    lastBuyBlock = block.number; \n', '    tokenPrice = tokenStartPrice;\n', '  }\n', '\n', '  function changeContractOwner(address newOwner) public {\n', '    require(contractOwner == msg.sender);\n', '    contractOwner = newOwner;\n', '  }\n', '  function changeStartPrice(uint price) public {\n', '    require(contractOwner == msg.sender);\n', '    tokenStartPrice = price;\n', '  }\n', '    \n', '  function changeNewRoundDelay(uint delay) public {\n', '    require(contractOwner == msg.sender);\n', '    newRoundDelay = delay;\n', '  }\n', '  \n', '  function buyToken() public payable {\n', '    address currentOwner = tokenOwner;\n', '    uint256 currentPrice = tokenPrice;\n', '\n', '    require(currentOwner != msg.sender);\n', '    require(msg.value >= currentPrice);\n', '    require(currentPrice > 0);\n', '\n', '    uint256 paidTooMuch = msg.value.sub(currentPrice);\n', '    uint256 payment = currentPrice.div(2);\n', '    \n', '    tokenPrice = currentPrice.mul(110).div(50);\n', '    tokenOwner = msg.sender;\n', '    lastBuyBlock = block.number;\n', '\n', '    Transfer(currentOwner, msg.sender, currentPrice);\n', '    if (currentOwner != address(0))\n', '      currentOwner.transfer(payment);\n', '    if (paidTooMuch > 0)\n', '      msg.sender.transfer(paidTooMuch);\n', '  }\n', '\n', '  function getBlocksToNextRound() public view returns(uint) {\n', '    if (lastBuyBlock + newRoundDelay < block.number)\n', '      return 0;\n', '    return lastBuyBlock + newRoundDelay + 1 - block.number;\n', '  }\n', '\n', '  function getCurrentData() public view returns (uint price, uint nextPrice, uint pool, uint nextPool, address owner, bool canFinish) {\n', '    owner = tokenOwner;\n', '    pool = tokenPrice.mul(50).div(110).mul(85).div(100);\n', '    nextPool = tokenPrice.mul(85).div(100);\n', '    price = tokenPrice;\n', '    nextPrice = price.mul(110).div(50);\n', '    if (getBlocksToNextRound() == 0)\n', '      canFinish = true;\n', '    else\n', '      canFinish = false;\n', '  }\n', '\n', '  function finishRound() public {\n', '    require(tokenPrice > tokenStartPrice);\n', '    require(tokenOwner == msg.sender || lastBuyBlock + newRoundDelay < block.number);\n', '    lastBuyBlock = block.number;\n', '    uint payout = tokenPrice.mul(50).div(110).mul(85).div(100); // 85% of last paid price\n', '    address owner = tokenOwner;\n', '    tokenPrice = tokenStartPrice;\n', '    tokenOwner = address(0);\n', '    owner.transfer(payout);\n', '    NewRound();\n', '  }\n', '\n', '  function payout(uint amount) public {\n', '    require(contractOwner == msg.sender);\n', '    uint balance = this.balance;\n', '    if (tokenPrice > tokenStartPrice)\n', '      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\n', '    if (amount>balance)\n', '      amount = balance;\n', '    contractOwner.transfer(amount);\n', '  }\n', '  \n', '  function getBalance() public view returns(uint balance) {\n', '    balance = this.balance;\n', '    if (tokenPrice > tokenStartPrice)\n', '      balance -= tokenPrice.mul(50).div(110).mul(85).div(100); // payout for tokenOwner cant be paid out from contract owner\n', '      \n', '  }\n', '}']
