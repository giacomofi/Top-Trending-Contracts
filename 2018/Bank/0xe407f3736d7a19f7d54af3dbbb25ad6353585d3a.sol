['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract FLMContract {\n', '    function withdraw() public;\n', '    function buy(address) public payable returns(uint256);\n', '    function myTokens() public view returns(uint256);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        ownerCandidate = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == ownerCandidate);  \n', '        owner = ownerCandidate;\n', '    }\n', '    \n', '}\n', '\n', 'contract BoomerangLiquidity is Owned {\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    uint public multiplier;\n', '    uint public payoutOrder = 0;\n', '    FLMContract flmContract;\n', '\n', '    function BoomerangLiquidity(uint multiplierPercent, address aFlmContract) public {\n', '        multiplier = multiplierPercent;\n', '        flmContract = FLMContract(aFlmContract);\n', '    }\n', '    \n', '    \n', '    struct Participant {\n', '        address etherAddress;\n', '        uint payout;\n', '    }\n', '\n', '    Participant[] public participants;\n', '\n', '    \n', '    function() payable public {\n', '        deposit();\n', '    }\n', '    \n', '    function deposit() payable public {\n', '        participants.push(Participant(msg.sender, (msg.value * multiplier) / 100));\n', '    }\n', '    \n', '    function payout() public {\n', '        uint balance = address(this).balance;\n', '        require(balance > 1);\n', '        uint investment = balance / 2;\n', '        balance =- investment;\n', '        flmContract.buy.value(investment)(msg.sender);\n', '        while (balance > 0) {\n', '            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n', '            if(payoutToSend > 0){\n', '                participants[payoutOrder].payout -= payoutToSend;\n', '                balance -= payoutToSend;\n', '                if(!participants[payoutOrder].etherAddress.send(payoutToSend)){\n', '                    participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();\n', '                }\n', '            }\n', '            if(balance > 0){\n', '                payoutOrder += 1;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return flmContract.myTokens();    \n', '    }\n', '    \n', '    function withdraw() public {\n', '        flmContract.withdraw.gas(1000000)();\n', '    }\n', '    \n', '    function donate() payable public {\n', '    }\n', '    \n', '    //THIS CONTRACT IS FOR TESTING. IF THIS IS HERE, DO NOT INVEST REAL MONEY.\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    //THIS CONTRACT IS FOR TESTING. IF THIS IS HERE, DO NOT INVEST REAL MONEY.\n', '    function exitScam() onlyOwner public {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract FLMContract {\n', '    function withdraw() public;\n', '    function buy(address) public payable returns(uint256);\n', '    function myTokens() public view returns(uint256);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        ownerCandidate = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == ownerCandidate);  \n', '        owner = ownerCandidate;\n', '    }\n', '    \n', '}\n', '\n', 'contract BoomerangLiquidity is Owned {\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    uint public multiplier;\n', '    uint public payoutOrder = 0;\n', '    FLMContract flmContract;\n', '\n', '    function BoomerangLiquidity(uint multiplierPercent, address aFlmContract) public {\n', '        multiplier = multiplierPercent;\n', '        flmContract = FLMContract(aFlmContract);\n', '    }\n', '    \n', '    \n', '    struct Participant {\n', '        address etherAddress;\n', '        uint payout;\n', '    }\n', '\n', '    Participant[] public participants;\n', '\n', '    \n', '    function() payable public {\n', '        deposit();\n', '    }\n', '    \n', '    function deposit() payable public {\n', '        participants.push(Participant(msg.sender, (msg.value * multiplier) / 100));\n', '    }\n', '    \n', '    function payout() public {\n', '        uint balance = address(this).balance;\n', '        require(balance > 1);\n', '        uint investment = balance / 2;\n', '        balance =- investment;\n', '        flmContract.buy.value(investment)(msg.sender);\n', '        while (balance > 0) {\n', '            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n', '            if(payoutToSend > 0){\n', '                participants[payoutOrder].payout -= payoutToSend;\n', '                balance -= payoutToSend;\n', '                if(!participants[payoutOrder].etherAddress.send(payoutToSend)){\n', '                    participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();\n', '                }\n', '            }\n', '            if(balance > 0){\n', '                payoutOrder += 1;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256) {\n', '        return flmContract.myTokens();    \n', '    }\n', '    \n', '    function withdraw() public {\n', '        flmContract.withdraw.gas(1000000)();\n', '    }\n', '    \n', '    function donate() payable public {\n', '    }\n', '    \n', '    //THIS CONTRACT IS FOR TESTING. IF THIS IS HERE, DO NOT INVEST REAL MONEY.\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    //THIS CONTRACT IS FOR TESTING. IF THIS IS HERE, DO NOT INVEST REAL MONEY.\n', '    function exitScam() onlyOwner public {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '}']
