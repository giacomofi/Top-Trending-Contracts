['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MultiEthSender {\n', '    using SafeMath for uint256;\n', '\n', '    event Send(uint256 _amount, address indexed _receiver);\n', '\n', '    function multiSendEth(uint256 amount, address[] list) public returns (bool){\n', '        uint256 _userCount = list.length;\n', '\n', '        require( address(this).balance > amount.mul(_userCount));\n', '\n', '        for(uint256 _i = 0; _i < _userCount; _i++){\n', '            list[_i].transfer(amount);\n', '            emit Send(amount, list[_i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function() public payable{}\n', '}']