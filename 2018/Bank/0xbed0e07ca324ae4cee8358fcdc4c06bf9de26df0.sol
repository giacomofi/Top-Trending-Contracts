['pragma solidity 0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function transfer(address to, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract EthWebATM is Ownable {\n', '  event EtherPay(uint256 _eth, address[] receivers, uint256[] shares);\n', '  event TokenTransfer(address token, address owner, uint256 amount);\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public feeWallet;\n', '  uint256 public adminFee = 1 * (10 ** 15);\n', '\n', '  constructor(address _adminWallet) public{\n', '    require(_adminWallet != address(0));\n', '    feeWallet = _adminWallet;\n', '  }\n', '\n', '  function() public payable {\n', '\n', '  }\n', '\n', '  function payEther(address[] receivers, uint256[] shares) external payable{\n', '    require(receivers.length == shares.length);\n', '    require(msg.value > adminFee.mul(shares.length));\n', '    uint256 _eth = msg.value;\n', '    uint256 totalshares = 0;\n', '    \n', '    for (uint256 i = 0; i < receivers.length; i++){\n', '      require(shares[i] > 0);\n', '      totalshares = totalshares.add(shares[i]);\n', '    }\n', '\n', '    for (uint256 j = 0; j < receivers.length; j++){\n', '      uint256 eth_ = _eth.mul(shares[j]).div(totalshares).sub(adminFee);\n', '      receivers[j].transfer(eth_);\n', '    }\n', '\n', '    emit EtherPay(_eth, receivers, shares);\n', '    feeWallet.transfer(adminFee.mul(receivers.length));\n', '  }\n', '\n', '  function transferToken(address token, uint256 amount) external onlyOwner{\n', '    require(amount > 0);\n', '    require(ERC20Basic(token).transfer(msg.sender, amount));\n', '    emit TokenTransfer(token, msg.sender, amount);\n', '  }\n', '\n', '  function updatefee(uint256 _eth) external onlyOwner{\n', '    adminFee = _eth;\n', '  }\n', '  \n', '  function updateWallet(address _address) external onlyOwner{\n', '    feeWallet = _address;\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function transfer(address to, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract EthWebATM is Ownable {\n', '  event EtherPay(uint256 _eth, address[] receivers, uint256[] shares);\n', '  event TokenTransfer(address token, address owner, uint256 amount);\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public feeWallet;\n', '  uint256 public adminFee = 1 * (10 ** 15);\n', '\n', '  constructor(address _adminWallet) public{\n', '    require(_adminWallet != address(0));\n', '    feeWallet = _adminWallet;\n', '  }\n', '\n', '  function() public payable {\n', '\n', '  }\n', '\n', '  function payEther(address[] receivers, uint256[] shares) external payable{\n', '    require(receivers.length == shares.length);\n', '    require(msg.value > adminFee.mul(shares.length));\n', '    uint256 _eth = msg.value;\n', '    uint256 totalshares = 0;\n', '    \n', '    for (uint256 i = 0; i < receivers.length; i++){\n', '      require(shares[i] > 0);\n', '      totalshares = totalshares.add(shares[i]);\n', '    }\n', '\n', '    for (uint256 j = 0; j < receivers.length; j++){\n', '      uint256 eth_ = _eth.mul(shares[j]).div(totalshares).sub(adminFee);\n', '      receivers[j].transfer(eth_);\n', '    }\n', '\n', '    emit EtherPay(_eth, receivers, shares);\n', '    feeWallet.transfer(adminFee.mul(receivers.length));\n', '  }\n', '\n', '  function transferToken(address token, uint256 amount) external onlyOwner{\n', '    require(amount > 0);\n', '    require(ERC20Basic(token).transfer(msg.sender, amount));\n', '    emit TokenTransfer(token, msg.sender, amount);\n', '  }\n', '\n', '  function updatefee(uint256 _eth) external onlyOwner{\n', '    adminFee = _eth;\n', '  }\n', '  \n', '  function updateWallet(address _address) external onlyOwner{\n', '    feeWallet = _address;\n', '  }\n', '}']
