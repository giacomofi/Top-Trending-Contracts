['pragma solidity ^0.4.19;      // 指定Compiler版本\n', '\n', 'contract ERC20_token {   // 使用 is 繼承 ERC20_interface\n', '    uint256 public totalSupply;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, string _text); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    uint256 constant private MAX_UINT256 = 2**256 - 1; // 避免超過uint256最大可能的值，產生overflow\n', '    mapping (address => uint256) public balances;   // 之後可使用 balances[地址] 查詢特定地址的餘額\n', '    mapping (address => mapping (address => uint256)) public allowed;  // 可用 allowed[地址][地址]，查詢特定地址可以給另一個地址的轉帳配額\n', '\n', '    string public name;             // 幫合約取名稱\n', '    uint8  public decimals = 18;    // 小數點，官方建議為18\n', '    string public symbol;           // e.g. ^_^\n', '    address owner;\n', '    uint256 public buyPrice;   // 一單位Ether可以換多少token\n', '    uint private weiToEther = 10 ** 18; // 把單位從wei轉為Ether\n', '\n', '    // 建構子，一開始即會執行，需要提供總量、價格、名稱、標誌\n', '    constructor (\n', '        uint256 _initialSupply,\n', '        uint256 _buyPrice,\n', '        string _tokenName,\n', '        string _tokenSymbol\n', '    ) public {\n', '        totalSupply = _initialSupply * 10 ** uint256(decimals); // token總量\n', '        balances[msg.sender] = totalSupply;                    // 將所有Token先全部分配給合約部屬者      \n', '\n', '        name = _tokenName;                                   // token名稱\n', '        symbol = _tokenSymbol;                               // token 標誌\n', '        owner = msg.sender;                                  // 合約擁有人\n', '        buyPrice = _buyPrice;                                // 每單位 ether 之價格\n', '    }\n', '    \n', '    // 限定只有合約部屬人才能執行特定function\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // 查詢餘額\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    // 從合約擁有人地址轉帳\n', '    function transfer(address _to, uint256 _value, string _text) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value, _text);\n', '        return true;\n', '    }\n', '\n', '    // 從某一人地址轉給另一人地址，需要其轉帳配額有被同意，可想像為小明(msg.sender)用爸爸的副卡(_from)轉帳給別人(_to)\n', '    function transferFrom(address _from, address _to, uint256 _value, string _text) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value, _text);\n', '        return true;\n', '    }\n', '\n', '    // 給予特定帳號轉帳配額  類似小明的爸爸(msg.sender)給小明(_spender)一張信用卡副卡，額度為value\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // 查詢特定帳號轉給另一帳號之轉帳配額\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '\n', '    // 設定token購買價格，只有合約部屬者可以設定\n', '    function setPrice(uint _price) public onlyOwner {\n', '        buyPrice = _price;\n', '    }\n', '\n', '    // 購買token\n', '    function buy() public payable {\n', '        uint amount;\n', '        amount = msg.value * buyPrice * 10 ** uint256(decimals) / weiToEther;    // 購買多少token\n', '        require(balances[owner] >= amount);              // 檢查還有沒有足夠token可以賣\n', '        balances[msg.sender] += amount;                  // 增加購買者token   \n', '        balances[owner] -= amount;                        // 減少擁有者token\n', '        emit Transfer(msg.sender, owner, amount, &#39;Buy token&#39;);               // 產生token轉帳log\n', '    }\n', '\n', '    // 從合約轉出Ether到部屬者帳戶\n', '    function withdraw(uint amount) public onlyOwner {\n', '        owner.transfer(amount * weiToEther);\n', '    }\n', '}']