['pragma solidity 0.4.18;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/ConversionRatesInterface.sol\n', '\n', 'interface ConversionRatesInterface {\n', '\n', '    function recordImbalance(\n', '        ERC20 token,\n', '        int buyAmount,\n', '        uint rateUpdateBlock,\n', '        uint currentBlock\n', '    )\n', '        public;\n', '\n', '    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint);\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', '/// @title Kyber constants contract\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @author Ilan Doron\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/VolumeImbalanceRecorder.sol\n', '\n', 'contract VolumeImbalanceRecorder is Withdrawable {\n', '\n', '    uint constant internal SLIDING_WINDOW_SIZE = 5;\n', '    uint constant internal POW_2_64 = 2 ** 64;\n', '\n', '    struct TokenControlInfo {\n', '        uint minimalRecordResolution; // can be roughly 1 cent\n', '        uint maxPerBlockImbalance; // in twei resolution\n', '        uint maxTotalImbalance; // max total imbalance (between rate updates)\n', '                            // before halting trade\n', '    }\n', '\n', '    mapping(address => TokenControlInfo) internal tokenControlInfo;\n', '\n', '    struct TokenImbalanceData {\n', '        int  lastBlockBuyUnitsImbalance;\n', '        uint lastBlock;\n', '\n', '        int  totalBuyUnitsImbalance;\n', '        uint lastRateUpdateBlock;\n', '    }\n', '\n', '    mapping(address => mapping(uint=>uint)) public tokenImbalanceData;\n', '\n', '    function VolumeImbalanceRecorder(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    function setTokenControlInfo(\n', '        ERC20 token,\n', '        uint minimalRecordResolution,\n', '        uint maxPerBlockImbalance,\n', '        uint maxTotalImbalance\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        tokenControlInfo[token] =\n', '            TokenControlInfo(\n', '                minimalRecordResolution,\n', '                maxPerBlockImbalance,\n', '                maxTotalImbalance\n', '            );\n', '    }\n', '\n', '    function getTokenControlInfo(ERC20 token) public view returns(uint, uint, uint) {\n', '        return (tokenControlInfo[token].minimalRecordResolution,\n', '                tokenControlInfo[token].maxPerBlockImbalance,\n', '                tokenControlInfo[token].maxTotalImbalance);\n', '    }\n', '\n', '    function addImbalance(\n', '        ERC20 token,\n', '        int buyAmount,\n', '        uint rateUpdateBlock,\n', '        uint currentBlock\n', '    )\n', '        internal\n', '    {\n', '        uint currentBlockIndex = currentBlock % SLIDING_WINDOW_SIZE;\n', '        int recordedBuyAmount = int(buyAmount / int(tokenControlInfo[token].minimalRecordResolution));\n', '\n', '        int prevImbalance = 0;\n', '\n', '        TokenImbalanceData memory currentBlockData =\n', '            decodeTokenImbalanceData(tokenImbalanceData[token][currentBlockIndex]);\n', '\n', '        // first scenario - this is not the first tx in the current block\n', '        if (currentBlockData.lastBlock == currentBlock) {\n', '            if (uint(currentBlockData.lastRateUpdateBlock) == rateUpdateBlock) {\n', '                // just increase imbalance\n', '                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\n', '                currentBlockData.totalBuyUnitsImbalance += recordedBuyAmount;\n', '            } else {\n', '                // imbalance was changed in the middle of the block\n', '                prevImbalance = getImbalanceInRange(token, rateUpdateBlock, currentBlock);\n', '                currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\n', '                currentBlockData.lastBlockBuyUnitsImbalance += recordedBuyAmount;\n', '                currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\n', '            }\n', '        } else {\n', '            // first tx in the current block\n', '            int currentBlockImbalance;\n', '            (prevImbalance, currentBlockImbalance) = getImbalanceSinceRateUpdate(token, rateUpdateBlock, currentBlock);\n', '\n', '            currentBlockData.lastBlockBuyUnitsImbalance = recordedBuyAmount;\n', '            currentBlockData.lastBlock = uint(currentBlock);\n', '            currentBlockData.lastRateUpdateBlock = uint(rateUpdateBlock);\n', '            currentBlockData.totalBuyUnitsImbalance = int(prevImbalance) + recordedBuyAmount;\n', '        }\n', '\n', '        tokenImbalanceData[token][currentBlockIndex] = encodeTokenImbalanceData(currentBlockData);\n', '    }\n', '\n', '    function setGarbageToVolumeRecorder(ERC20 token) internal {\n', '        for (uint i = 0; i < SLIDING_WINDOW_SIZE; i++) {\n', '            tokenImbalanceData[token][i] = 0x1;\n', '        }\n', '    }\n', '\n', '    function getImbalanceInRange(ERC20 token, uint startBlock, uint endBlock) internal view returns(int buyImbalance) {\n', '        // check the imbalance in the sliding window\n', '        require(startBlock <= endBlock);\n', '\n', '        buyImbalance = 0;\n', '\n', '        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\n', '            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\n', '\n', '            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\n', '                buyImbalance += int(perBlockData.lastBlockBuyUnitsImbalance);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getImbalanceSinceRateUpdate(ERC20 token, uint rateUpdateBlock, uint currentBlock)\n', '        internal view\n', '        returns(int buyImbalance, int currentBlockImbalance)\n', '    {\n', '        buyImbalance = 0;\n', '        currentBlockImbalance = 0;\n', '        uint latestBlock = 0;\n', '        int imbalanceInRange = 0;\n', '        uint startBlock = rateUpdateBlock;\n', '        uint endBlock = currentBlock;\n', '\n', '        for (uint windowInd = 0; windowInd < SLIDING_WINDOW_SIZE; windowInd++) {\n', '            TokenImbalanceData memory perBlockData = decodeTokenImbalanceData(tokenImbalanceData[token][windowInd]);\n', '\n', '            if (perBlockData.lastBlock <= endBlock && perBlockData.lastBlock >= startBlock) {\n', '                imbalanceInRange += perBlockData.lastBlockBuyUnitsImbalance;\n', '            }\n', '\n', '            if (perBlockData.lastRateUpdateBlock != rateUpdateBlock) continue;\n', '            if (perBlockData.lastBlock < latestBlock) continue;\n', '\n', '            latestBlock = perBlockData.lastBlock;\n', '            buyImbalance = perBlockData.totalBuyUnitsImbalance;\n', '            if (uint(perBlockData.lastBlock) == currentBlock) {\n', '                currentBlockImbalance = perBlockData.lastBlockBuyUnitsImbalance;\n', '            }\n', '        }\n', '\n', '        if (buyImbalance == 0) {\n', '            buyImbalance = imbalanceInRange;\n', '        }\n', '    }\n', '\n', '    function getImbalance(ERC20 token, uint rateUpdateBlock, uint currentBlock)\n', '        internal view\n', '        returns(int totalImbalance, int currentBlockImbalance)\n', '    {\n', '\n', '        int resolution = int(tokenControlInfo[token].minimalRecordResolution);\n', '\n', '        (totalImbalance, currentBlockImbalance) =\n', '            getImbalanceSinceRateUpdate(\n', '                token,\n', '                rateUpdateBlock,\n', '                currentBlock);\n', '\n', '        totalImbalance *= resolution;\n', '        currentBlockImbalance *= resolution;\n', '    }\n', '\n', '    function getMaxPerBlockImbalance(ERC20 token) internal view returns(uint) {\n', '        return tokenControlInfo[token].maxPerBlockImbalance;\n', '    }\n', '\n', '    function getMaxTotalImbalance(ERC20 token) internal view returns(uint) {\n', '        return tokenControlInfo[token].maxTotalImbalance;\n', '    }\n', '\n', '    function encodeTokenImbalanceData(TokenImbalanceData data) internal pure returns(uint) {\n', '        // check for overflows\n', '        require(data.lastBlockBuyUnitsImbalance < int(POW_2_64 / 2));\n', '        require(data.lastBlockBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\n', '        require(data.lastBlock < POW_2_64);\n', '        require(data.totalBuyUnitsImbalance < int(POW_2_64 / 2));\n', '        require(data.totalBuyUnitsImbalance > int(-1 * int(POW_2_64) / 2));\n', '        require(data.lastRateUpdateBlock < POW_2_64);\n', '\n', '        // do encoding\n', '        uint result = uint(data.lastBlockBuyUnitsImbalance) & (POW_2_64 - 1);\n', '        result |= data.lastBlock * POW_2_64;\n', '        result |= (uint(data.totalBuyUnitsImbalance) & (POW_2_64 - 1)) * POW_2_64 * POW_2_64;\n', '        result |= data.lastRateUpdateBlock * POW_2_64 * POW_2_64 * POW_2_64;\n', '\n', '        return result;\n', '    }\n', '\n', '    function decodeTokenImbalanceData(uint input) internal pure returns(TokenImbalanceData) {\n', '        TokenImbalanceData memory data;\n', '\n', '        data.lastBlockBuyUnitsImbalance = int(int64(input & (POW_2_64 - 1)));\n', '        data.lastBlock = uint(uint64((input / POW_2_64) & (POW_2_64 - 1)));\n', '        data.totalBuyUnitsImbalance = int(int64((input / (POW_2_64 * POW_2_64)) & (POW_2_64 - 1)));\n', '        data.lastRateUpdateBlock = uint(uint64((input / (POW_2_64 * POW_2_64 * POW_2_64))));\n', '\n', '        return data;\n', '    }\n', '}\n', '\n', 'contract ConversionRates is ConversionRatesInterface, VolumeImbalanceRecorder, Utils {\n', '\n', '    // bps - basic rate steps. one step is 1 / 10000 of the rate.\n', '    struct StepFunction {\n', '        int[] x; // quantity for each step. Quantity of each step includes previous steps.\n', '        int[] y; // rate change per quantity step  in bps.\n', '    }\n', '\n', '    struct TokenData {\n', '        bool listed;  // was added to reserve\n', '        bool enabled; // whether trade is enabled\n', '\n', '        // position in the compact data\n', '        uint compactDataArrayIndex;\n', '        uint compactDataFieldIndex;\n', '\n', '        // rate data. base and changes according to quantity and reserve balance.\n', '        // generally speaking. Sell rate is 1 / buy rate i.e. the buy in the other direction.\n', '        uint baseBuyRate;  // in PRECISION units. see KyberConstants\n', '        uint baseSellRate; // PRECISION units. without (sell / buy) spread it is 1 / baseBuyRate\n', '        StepFunction buyRateQtyStepFunction; // in bps. higher quantity - bigger the rate.\n', '        StepFunction sellRateQtyStepFunction;// in bps. higher the qua\n', '        StepFunction buyRateImbalanceStepFunction; // in BPS. higher reserve imbalance - bigger the rate.\n', '        StepFunction sellRateImbalanceStepFunction;\n', '    }\n', '\n', '    /*\n', '    this is the data for tokenRatesCompactData\n', '    but solidity compiler optimizer is sub-optimal, and cannot write this structure in a single storage write\n', '    so we represent it as bytes32 and do the byte tricks ourselves.\n', '    struct TokenRatesCompactData {\n', '        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\n', '        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\n', '\n', '        uint32 blockNumber;\n', '    } */\n', '    uint public validRateDurationInBlocks = 10; // rates are valid for this amount of blocks\n', '    ERC20[] internal listedTokens;\n', '    mapping(address=>TokenData) internal tokenData;\n', '    bytes32[] internal tokenRatesCompactData;\n', '    uint public numTokensInCurrentCompactData = 0;\n', '    address public reserveContract;\n', '    uint constant internal NUM_TOKENS_IN_COMPACT_DATA = 14;\n', '    uint constant internal BYTES_14_OFFSET = (2 ** (8 * NUM_TOKENS_IN_COMPACT_DATA));\n', '    uint constant internal MAX_STEPS_IN_FUNCTION = 10;\n', '    int  constant internal MAX_BPS_ADJUSTMENT = 10 ** 11; // 1B %\n', '    int  constant internal MIN_BPS_ADJUSTMENT = -100 * 100; // cannot go down by more than 100%\n', '\n', '    function ConversionRates(address _admin) public VolumeImbalanceRecorder(_admin)\n', '        { } // solhint-disable-line no-empty-blocks\n', '\n', '    function addToken(ERC20 token) public onlyAdmin {\n', '\n', '        require(!tokenData[token].listed);\n', '        tokenData[token].listed = true;\n', '        listedTokens.push(token);\n', '\n', '        if (numTokensInCurrentCompactData == 0) {\n', '            tokenRatesCompactData.length++; // add new structure\n', '        }\n', '\n', '        tokenData[token].compactDataArrayIndex = tokenRatesCompactData.length - 1;\n', '        tokenData[token].compactDataFieldIndex = numTokensInCurrentCompactData;\n', '\n', '        numTokensInCurrentCompactData = (numTokensInCurrentCompactData + 1) % NUM_TOKENS_IN_COMPACT_DATA;\n', '\n', '        setGarbageToVolumeRecorder(token);\n', '\n', '        setDecimals(token);\n', '    }\n', '\n', '    function setCompactData(bytes14[] buy, bytes14[] sell, uint blockNumber, uint[] indices) public onlyOperator {\n', '\n', '        require(buy.length == sell.length);\n', '        require(indices.length == buy.length);\n', '        require(blockNumber <= 0xFFFFFFFF);\n', '\n', '        uint bytes14Offset = BYTES_14_OFFSET;\n', '\n', '        for (uint i = 0; i < indices.length; i++) {\n', '            require(indices[i] < tokenRatesCompactData.length);\n', '            uint data = uint(buy[i]) | uint(sell[i]) * bytes14Offset | (blockNumber * (bytes14Offset * bytes14Offset));\n', '            tokenRatesCompactData[indices[i]] = bytes32(data);\n', '        }\n', '    }\n', '\n', '    function setBaseRate(\n', '        ERC20[] tokens,\n', '        uint[] baseBuy,\n', '        uint[] baseSell,\n', '        bytes14[] buy,\n', '        bytes14[] sell,\n', '        uint blockNumber,\n', '        uint[] indices\n', '    )\n', '        public\n', '        onlyOperator\n', '    {\n', '        require(tokens.length == baseBuy.length);\n', '        require(tokens.length == baseSell.length);\n', '        require(sell.length == buy.length);\n', '        require(sell.length == indices.length);\n', '\n', '        for (uint ind = 0; ind < tokens.length; ind++) {\n', '            require(tokenData[tokens[ind]].listed);\n', '            tokenData[tokens[ind]].baseBuyRate = baseBuy[ind];\n', '            tokenData[tokens[ind]].baseSellRate = baseSell[ind];\n', '        }\n', '\n', '        setCompactData(buy, sell, blockNumber, indices);\n', '    }\n', '\n', '    function setQtyStepFunction(\n', '        ERC20 token,\n', '        int[] xBuy,\n', '        int[] yBuy,\n', '        int[] xSell,\n', '        int[] ySell\n', '    )\n', '        public\n', '        onlyOperator\n', '    {\n', '        require(xBuy.length == yBuy.length);\n', '        require(xSell.length == ySell.length);\n', '        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\n', '        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\n', '        require(tokenData[token].listed);\n', '\n', '        tokenData[token].buyRateQtyStepFunction = StepFunction(xBuy, yBuy);\n', '        tokenData[token].sellRateQtyStepFunction = StepFunction(xSell, ySell);\n', '    }\n', '\n', '    function setImbalanceStepFunction(\n', '        ERC20 token,\n', '        int[] xBuy,\n', '        int[] yBuy,\n', '        int[] xSell,\n', '        int[] ySell\n', '    )\n', '        public\n', '        onlyOperator\n', '    {\n', '        require(xBuy.length == yBuy.length);\n', '        require(xSell.length == ySell.length);\n', '        require(xBuy.length <= MAX_STEPS_IN_FUNCTION);\n', '        require(xSell.length <= MAX_STEPS_IN_FUNCTION);\n', '        require(tokenData[token].listed);\n', '\n', '        tokenData[token].buyRateImbalanceStepFunction = StepFunction(xBuy, yBuy);\n', '        tokenData[token].sellRateImbalanceStepFunction = StepFunction(xSell, ySell);\n', '    }\n', '\n', '    function setValidRateDurationInBlocks(uint duration) public onlyAdmin {\n', '        validRateDurationInBlocks = duration;\n', '    }\n', '\n', '    function enableTokenTrade(ERC20 token) public onlyAdmin {\n', '        require(tokenData[token].listed);\n', '        require(tokenControlInfo[token].minimalRecordResolution != 0);\n', '        tokenData[token].enabled = true;\n', '    }\n', '\n', '    function disableTokenTrade(ERC20 token) public onlyAlerter {\n', '        require(tokenData[token].listed);\n', '        tokenData[token].enabled = false;\n', '    }\n', '\n', '    function setReserveAddress(address reserve) public onlyAdmin {\n', '        reserveContract = reserve;\n', '    }\n', '\n', '    function recordImbalance(\n', '        ERC20 token,\n', '        int buyAmount,\n', '        uint rateUpdateBlock,\n', '        uint currentBlock\n', '    )\n', '        public\n', '    {\n', '        require(msg.sender == reserveContract);\n', '\n', '        if (rateUpdateBlock == 0) rateUpdateBlock = getRateUpdateBlock(token);\n', '\n', '        return addImbalance(token, buyAmount, rateUpdateBlock, currentBlock);\n', '    }\n', '\n', '    /* solhint-disable function-max-lines */\n', '    function getRate(ERC20 token, uint currentBlockNumber, bool buy, uint qty) public view returns(uint) {\n', '        // check if trade is enabled\n', '        if (!tokenData[token].enabled) return 0;\n', '        if (tokenControlInfo[token].minimalRecordResolution == 0) return 0; // token control info not set\n', '\n', '        // get rate update block\n', '        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\n', '\n', '        uint updateRateBlock = getLast4Bytes(compactData);\n', '        if (currentBlockNumber >= updateRateBlock + validRateDurationInBlocks) return 0; // rate is expired\n', '        // check imbalance\n', '        int totalImbalance;\n', '        int blockImbalance;\n', '        (totalImbalance, blockImbalance) = getImbalance(token, updateRateBlock, currentBlockNumber);\n', '\n', '        // calculate actual rate\n', '        int imbalanceQty;\n', '        int extraBps;\n', '        int8 rateUpdate;\n', '        uint rate;\n', '\n', '        if (buy) {\n', '            // start with base rate\n', '            rate = tokenData[token].baseBuyRate;\n', '\n', '            // add rate update\n', '            rateUpdate = getRateByteFromCompactData(compactData, token, true);\n', '            extraBps = int(rateUpdate) * 10;\n', '            rate = addBps(rate, extraBps);\n', '\n', '            // compute token qty\n', '            qty = getTokenQty(token, rate, qty);\n', '            imbalanceQty = int(qty);\n', '            totalImbalance += imbalanceQty;\n', '\n', '            // add qty overhead\n', '            extraBps = executeStepFunction(tokenData[token].buyRateQtyStepFunction, int(qty));\n', '            rate = addBps(rate, extraBps);\n', '\n', '            // add imbalance overhead\n', '            extraBps = executeStepFunction(tokenData[token].buyRateImbalanceStepFunction, totalImbalance);\n', '            rate = addBps(rate, extraBps);\n', '        } else {\n', '            // start with base rate\n', '            rate = tokenData[token].baseSellRate;\n', '\n', '            // add rate update\n', '            rateUpdate = getRateByteFromCompactData(compactData, token, false);\n', '            extraBps = int(rateUpdate) * 10;\n', '            rate = addBps(rate, extraBps);\n', '\n', '            // compute token qty\n', '            imbalanceQty = -1 * int(qty);\n', '            totalImbalance += imbalanceQty;\n', '\n', '            // add qty overhead\n', '            extraBps = executeStepFunction(tokenData[token].sellRateQtyStepFunction, int(qty));\n', '            rate = addBps(rate, extraBps);\n', '\n', '            // add imbalance overhead\n', '            extraBps = executeStepFunction(tokenData[token].sellRateImbalanceStepFunction, totalImbalance);\n', '            rate = addBps(rate, extraBps);\n', '        }\n', '\n', '        if (abs(totalImbalance) >= getMaxTotalImbalance(token)) return 0;\n', '        if (abs(blockImbalance + imbalanceQty) >= getMaxPerBlockImbalance(token)) return 0;\n', '\n', '        return rate;\n', '    }\n', '    /* solhint-enable function-max-lines */\n', '\n', '    function getBasicRate(ERC20 token, bool buy) public view returns(uint) {\n', '        if (buy)\n', '            return tokenData[token].baseBuyRate;\n', '        else\n', '            return tokenData[token].baseSellRate;\n', '    }\n', '\n', '    function getCompactData(ERC20 token) public view returns(uint, uint, byte, byte) {\n', '        require(tokenData[token].listed);\n', '\n', '        uint arrayIndex = tokenData[token].compactDataArrayIndex;\n', '        uint fieldOffset = tokenData[token].compactDataFieldIndex;\n', '\n', '        return (\n', '            arrayIndex,\n', '            fieldOffset,\n', '            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, true)),\n', '            byte(getRateByteFromCompactData(tokenRatesCompactData[arrayIndex], token, false))\n', '        );\n', '    }\n', '\n', '    function getTokenBasicData(ERC20 token) public view returns(bool, bool) {\n', '        return (tokenData[token].listed, tokenData[token].enabled);\n', '    }\n', '\n', '    /* solhint-disable code-complexity */\n', '    function getStepFunctionData(ERC20 token, uint command, uint param) public view returns(int) {\n', '        if (command == 0) return int(tokenData[token].buyRateQtyStepFunction.x.length);\n', '        if (command == 1) return tokenData[token].buyRateQtyStepFunction.x[param];\n', '        if (command == 2) return int(tokenData[token].buyRateQtyStepFunction.y.length);\n', '        if (command == 3) return tokenData[token].buyRateQtyStepFunction.y[param];\n', '\n', '        if (command == 4) return int(tokenData[token].sellRateQtyStepFunction.x.length);\n', '        if (command == 5) return tokenData[token].sellRateQtyStepFunction.x[param];\n', '        if (command == 6) return int(tokenData[token].sellRateQtyStepFunction.y.length);\n', '        if (command == 7) return tokenData[token].sellRateQtyStepFunction.y[param];\n', '\n', '        if (command == 8) return int(tokenData[token].buyRateImbalanceStepFunction.x.length);\n', '        if (command == 9) return tokenData[token].buyRateImbalanceStepFunction.x[param];\n', '        if (command == 10) return int(tokenData[token].buyRateImbalanceStepFunction.y.length);\n', '        if (command == 11) return tokenData[token].buyRateImbalanceStepFunction.y[param];\n', '\n', '        if (command == 12) return int(tokenData[token].sellRateImbalanceStepFunction.x.length);\n', '        if (command == 13) return tokenData[token].sellRateImbalanceStepFunction.x[param];\n', '        if (command == 14) return int(tokenData[token].sellRateImbalanceStepFunction.y.length);\n', '        if (command == 15) return tokenData[token].sellRateImbalanceStepFunction.y[param];\n', '\n', '        revert();\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function getRateUpdateBlock(ERC20 token) public view returns(uint) {\n', '        bytes32 compactData = tokenRatesCompactData[tokenData[token].compactDataArrayIndex];\n', '        return getLast4Bytes(compactData);\n', '    }\n', '\n', '    function getListedTokens() public view returns(ERC20[]) {\n', '        return listedTokens;\n', '    }\n', '\n', '    function getTokenQty(ERC20 token, uint ethQty, uint rate) internal view returns(uint) {\n', '        uint dstDecimals = getDecimals(token);\n', '        uint srcDecimals = ETH_DECIMALS;\n', '\n', '        return calcDstQty(ethQty, srcDecimals, dstDecimals, rate);\n', '    }\n', '\n', '    function getLast4Bytes(bytes32 b) internal pure returns(uint) {\n', '        // cannot trust compiler with not turning bit operations into EXP opcode\n', '        return uint(b) / (BYTES_14_OFFSET * BYTES_14_OFFSET);\n', '    }\n', '\n', '    function getRateByteFromCompactData(bytes32 data, ERC20 token, bool buy) internal view returns(int8) {\n', '        uint fieldOffset = tokenData[token].compactDataFieldIndex;\n', '        uint byteOffset;\n', '        if (buy)\n', '            byteOffset = 32 - NUM_TOKENS_IN_COMPACT_DATA + fieldOffset;\n', '        else\n', '            byteOffset = 4 + fieldOffset;\n', '\n', '        return int8(data[byteOffset]);\n', '    }\n', '\n', '    function executeStepFunction(StepFunction f, int x) internal pure returns(int) {\n', '        uint len = f.y.length;\n', '        for (uint ind = 0; ind < len; ind++) {\n', '            if (x <= f.x[ind]) return f.y[ind];\n', '        }\n', '\n', '        return f.y[len-1];\n', '    }\n', '\n', '    function addBps(uint rate, int bps) internal pure returns(uint) {\n', '        require(rate <= MAX_RATE);\n', '        require(bps >= MIN_BPS_ADJUSTMENT);\n', '        require(bps <= MAX_BPS_ADJUSTMENT);\n', '\n', '        uint maxBps = 100 * 100;\n', '        return (rate * uint(int(maxBps) + bps)) / maxBps;\n', '    }\n', '\n', '    function abs(int x) internal pure returns(uint) {\n', '        if (x < 0)\n', '            return uint(-1 * x);\n', '        else\n', '            return uint(x);\n', '    }\n', '}\n', '\n', '// File: contracts/ExpectedRateInterface.sol\n', '\n', 'interface ExpectedRateInterface {\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty, bool usePermissionless) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '}\n', '\n', '// File: contracts/FeeBurnerInterface.sol\n', '\n', 'interface FeeBurnerInterface {\n', '    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\n', '    function setReserveData(address reserve, uint feesInBps, address kncWallet) public;\n', '}\n', '\n', '// File: contracts/KyberReserveInterface.sol\n', '\n', '/// @title Kyber Reserve contract\n', 'interface KyberReserveInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n', '}\n', '\n', '// File: contracts/WhiteListInterface.sol\n', '\n', 'contract WhiteListInterface {\n', '    function getUserCapInWei(address user) external view returns (uint userCapWei);\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private guardCounter = 1;\n', '\n', '    /**\n', '     * @dev Prevents a function from calling itself, directly or indirectly.\n', '     * Calling one `nonReentrant` function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and an `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        guardCounter += 1;\n', '        uint256 localCounter = guardCounter;\n', '        _;\n', '        require(localCounter == guardCounter);\n', '    }\n', '}\n', '\n', '// File: contracts/Utils2.sol\n', '\n', 'contract Utils2 is Utils {\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n', '\n', '        if (decimals[token] == 0) {\n', '            setDecimals(token);\n', '        }\n', '\n', '        return decimals[token];\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n', '        internal pure returns(uint)\n', '    {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(destAmount <= MAX_QTY);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/KyberNetworkInterface.sol\n', '\n', '/// @title Kyber Network interface\n', 'interface KyberNetworkInterface {\n', '    function maxGasPrice() public view returns(uint);\n', '    function getUserCapInWei(address user) public view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n', '    function enabled() public view returns(bool);\n', '    function info(bytes32 id) public view returns(uint);\n', '\n', '    function searchBestRate(ERC20 src, ERC20 dest, uint srcAmount, bool usePermissionless) public view\n', '        returns(address, uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(address trader, ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\n', '        uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n', '}\n', '\n', '\n', '////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '/// @title Kyber Network main contract\n', 'contract KyberNetwork is Withdrawable, Utils2, KyberNetworkInterface, ReentrancyGuard {\n', '\n', '    bytes public constant PERM_HINT = "PERM";\n', '    uint  public constant PERM_HINT_GET_RATE = 1 << 255; // for get rate. bit mask hint.\n', '\n', '    uint public negligibleRateDiff = 10; // basic rate steps will be in 0.01%\n', '    KyberReserveInterface[] public reserves;\n', '    mapping(address=>ReserveType) public reserveType;\n', '    WhiteListInterface public whiteListContract;\n', '    ExpectedRateInterface public expectedRateContract;\n', '    FeeBurnerInterface    public feeBurnerContract;\n', '    address               public kyberNetworkProxyContract;\n', '    uint                  public maxGasPriceValue = 50 * 1000 * 1000 * 1000; // 50 gwei\n', '    bool                  public isEnabled = false; // network is enabled\n', '    mapping(bytes32=>uint) public infoFields; // this is only a UI field for external app.\n', '\n', '    mapping(address=>address[]) public reservesPerTokenSrc; //reserves supporting token to eth\n', '    mapping(address=>address[]) public reservesPerTokenDest;//reserves support eth to token\n', '\n', '    enum ReserveType {NONE, PERMISSIONED, PERMISSIONLESS}\n', '    bytes internal constant EMPTY_HINT = "";\n', '\n', '    function KyberNetwork(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    event EtherReceival(address indexed sender, uint amount);\n', '\n', '    /* solhint-disable no-complex-fallback */\n', '    // To avoid users trying to swap tokens using default payable function. We added this short code\n', '    //  to verify Ethers will be received only from reserves if transferred without a specific function call.\n', '    function() public payable {\n', '        require(reserveType[msg.sender] != ReserveType.NONE);\n', '        EtherReceival(msg.sender, msg.value);\n', '    }\n', '    /* solhint-enable no-complex-fallback */\n', '\n', '    struct TradeInput {\n', '        address trader;\n', '        ERC20 src;\n', '        uint srcAmount;\n', '        ERC20 dest;\n', '        address destAddress;\n', '        uint maxDestAmount;\n', '        uint minConversionRate;\n', '        address walletId;\n', '        bytes hint;\n', '    }\n', '\n', '    function tradeWithHint(\n', '        address trader,\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId,\n', '        bytes hint\n', '    )\n', '        public\n', '        nonReentrant\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(msg.sender == kyberNetworkProxyContract);\n', '        require((hint.length == 0) || (hint.length == 4));\n', '\n', '        TradeInput memory tradeInput;\n', '\n', '        tradeInput.trader = trader;\n', '        tradeInput.src = src;\n', '        tradeInput.srcAmount = srcAmount;\n', '        tradeInput.dest = dest;\n', '        tradeInput.destAddress = destAddress;\n', '        tradeInput.maxDestAmount = maxDestAmount;\n', '        tradeInput.minConversionRate = minConversionRate;\n', '        tradeInput.walletId = walletId;\n', '        tradeInput.hint = hint;\n', '\n', '        return trade(tradeInput);\n', '    }\n', '\n', '    event AddReserveToNetwork(KyberReserveInterface indexed reserve, bool add, bool isPermissionless);\n', '\n', '    /// @notice can be called only by operator\n', '    /// @dev add or deletes a reserve to/from the network.\n', '    /// @param reserve The reserve address.\n', '    /// @param isPermissionless is the new reserve from permissionless type.\n', '    function addReserve(KyberReserveInterface reserve, bool isPermissionless) public onlyOperator\n', '        returns(bool)\n', '    {\n', '        require(reserveType[reserve] == ReserveType.NONE);\n', '        reserves.push(reserve);\n', '\n', '        reserveType[reserve] = isPermissionless ? ReserveType.PERMISSIONLESS : ReserveType.PERMISSIONED;\n', '\n', '        AddReserveToNetwork(reserve, true, isPermissionless);\n', '\n', '        return true;\n', '    }\n', '\n', '    event RemoveReserveFromNetwork(KyberReserveInterface reserve);\n', '\n', '    /// @notice can be called only by operator\n', '    /// @dev removes a reserve from Kyber network.\n', '    /// @param reserve The reserve address.\n', '    /// @param index in reserve array.\n', '    function removeReserve(KyberReserveInterface reserve, uint index) public onlyOperator\n', '        returns(bool)\n', '    {\n', '\n', '        require(reserveType[reserve] != ReserveType.NONE);\n', '        require(reserves[index] == reserve);\n', '\n', '        reserveType[reserve] = ReserveType.NONE;\n', '        reserves[index] = reserves[reserves.length - 1];\n', '        reserves.length--;\n', '\n', '        RemoveReserveFromNetwork(reserve);\n', '\n', '        return true;\n', '    }\n', '\n', '    event ListReservePairs(address indexed reserve, ERC20 src, ERC20 dest, bool add);\n', '\n', '    /// @notice can be called only by operator\n', '    /// @dev allow or prevent a specific reserve to trade a pair of tokens\n', '    /// @param reserve The reserve address.\n', '    /// @param token token address\n', '    /// @param ethToToken will it support ether to token trade\n', '    /// @param tokenToEth will it support token to ether trade\n', '    /// @param add If true then list this pair, otherwise unlist it.\n', '    function listPairForReserve(address reserve, ERC20 token, bool ethToToken, bool tokenToEth, bool add)\n', '        public\n', '        onlyOperator\n', '        returns(bool)\n', '    {\n', '        require(reserveType[reserve] != ReserveType.NONE);\n', '\n', '        if (ethToToken) {\n', '            listPairs(reserve, token, false, add);\n', '\n', '            ListReservePairs(reserve, ETH_TOKEN_ADDRESS, token, add);\n', '        }\n', '\n', '        if (tokenToEth) {\n', '            listPairs(reserve, token, true, add);\n', '\n', '            if (add) {\n', '                require(token.approve(reserve, 2**255)); // approve infinity\n', '            } else {\n', '                require(token.approve(reserve, 0));\n', '            }\n', '\n', '            ListReservePairs(reserve, token, ETH_TOKEN_ADDRESS, add);\n', '        }\n', '\n', '        setDecimals(token);\n', '\n', '        return true;\n', '    }\n', '\n', '    event WhiteListContractSet(WhiteListInterface newContract, WhiteListInterface currentContract);\n', '\n', '    ///@param whiteList can be empty\n', '    function setWhiteList(WhiteListInterface whiteList) public onlyAdmin {\n', '        WhiteListContractSet(whiteList, whiteListContract);\n', '        whiteListContract = whiteList;\n', '    }\n', '\n', '    event ExpectedRateContractSet(ExpectedRateInterface newContract, ExpectedRateInterface currentContract);\n', '\n', '    function setExpectedRate(ExpectedRateInterface expectedRate) public onlyAdmin {\n', '        require(expectedRate != address(0));\n', '\n', '        ExpectedRateContractSet(expectedRate, expectedRateContract);\n', '        expectedRateContract = expectedRate;\n', '    }\n', '\n', '    event FeeBurnerContractSet(FeeBurnerInterface newContract, FeeBurnerInterface currentContract);\n', '\n', '    function setFeeBurner(FeeBurnerInterface feeBurner) public onlyAdmin {\n', '        require(feeBurner != address(0));\n', '\n', '        FeeBurnerContractSet(feeBurner, feeBurnerContract);\n', '        feeBurnerContract = feeBurner;\n', '    }\n', '\n', '    event KyberNetwrokParamsSet(uint maxGasPrice, uint negligibleRateDiff);\n', '\n', '    function setParams(\n', '        uint                  _maxGasPrice,\n', '        uint                  _negligibleRateDiff\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_negligibleRateDiff <= 100 * 100); // at most 100%\n', '\n', '        maxGasPriceValue = _maxGasPrice;\n', '        negligibleRateDiff = _negligibleRateDiff;\n', '        KyberNetwrokParamsSet(maxGasPriceValue, negligibleRateDiff);\n', '    }\n', '\n', '    event KyberNetworkSetEnable(bool isEnabled);\n', '\n', '    function setEnable(bool _enable) public onlyAdmin {\n', '        if (_enable) {\n', '            require(feeBurnerContract != address(0));\n', '            require(expectedRateContract != address(0));\n', '            require(kyberNetworkProxyContract != address(0));\n', '        }\n', '        isEnabled = _enable;\n', '\n', '        KyberNetworkSetEnable(isEnabled);\n', '    }\n', '\n', '    function setInfo(bytes32 field, uint value) public onlyOperator {\n', '        infoFields[field] = value;\n', '    }\n', '\n', '    event KyberProxySet(address proxy, address sender);\n', '\n', '    function setKyberProxy(address networkProxy) public onlyAdmin {\n', '        require(networkProxy != address(0));\n', '        kyberNetworkProxyContract = networkProxy;\n', '        KyberProxySet(kyberNetworkProxyContract, msg.sender);\n', '    }\n', '\n', '    /// @dev returns number of reserves\n', '    /// @return number of reserves\n', '    function getNumReserves() public view returns(uint) {\n', '        return reserves.length;\n', '    }\n', '\n', '    /// @notice should be called off chain\n', '    /// @dev get an array of all reserves\n', '    /// @return An array of all reserves\n', '    function getReserves() public view returns(KyberReserveInterface[]) {\n', '        return reserves;\n', '    }\n', '\n', '    function maxGasPrice() public view returns(uint) {\n', '        return maxGasPriceValue;\n', '    }\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns(uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        bool includePermissionless = true;\n', '\n', '        if (srcQty & PERM_HINT_GET_RATE > 0) {\n', '            includePermissionless = false;\n', '            srcQty = srcQty & ~PERM_HINT_GET_RATE;\n', '        }\n', '\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty, includePermissionless);\n', '    }\n', '\n', '    function getExpectedRateOnlyPermission(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns(uint expectedRate, uint slippageRate)\n', '    {\n', '        require(expectedRateContract != address(0));\n', '        return expectedRateContract.getExpectedRate(src, dest, srcQty, false);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        if (whiteListContract == address(0)) return (2 ** 255);\n', '        return whiteListContract.getUserCapInWei(user);\n', '    }\n', '\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\n', '        //future feature\n', '        user;\n', '        token;\n', '        require(false);\n', '    }\n', '\n', '    struct BestRateResult {\n', '        uint rate;\n', '        address reserve1;\n', '        address reserve2;\n', '        uint weiAmount;\n', '        uint rateSrcToEth;\n', '        uint rateEthToDest;\n', '        uint destAmount;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev best conversion rate for a pair of tokens, if number of reserves have small differences. randomize\n', '    /// @param src Src token\n', '    /// @param dest Destination token\n', '    /// @return obsolete - used to return best reserve index. not relevant anymore for this API.\n', '    function findBestRate(ERC20 src, ERC20 dest, uint srcAmount) public view returns(uint obsolete, uint rate) {\n', '        BestRateResult memory result = findBestRateTokenToToken(src, dest, srcAmount, EMPTY_HINT);\n', '        return(0, result.rate);\n', '    }\n', '\n', '    function findBestRateOnlyPermission(ERC20 src, ERC20 dest, uint srcAmount)\n', '        public\n', '        view\n', '        returns(uint obsolete, uint rate)\n', '    {\n', '        BestRateResult memory result = findBestRateTokenToToken(src, dest, srcAmount, PERM_HINT);\n', '        return(0, result.rate);\n', '    }\n', '\n', '    function enabled() public view returns(bool) {\n', '        return isEnabled;\n', '    }\n', '\n', '    function info(bytes32 field) public view returns(uint) {\n', '        return infoFields[field];\n', '    }\n', '\n', '    /* solhint-disable code-complexity */\n', '    // Regarding complexity. Below code follows the required algorithm for choosing a reserve.\n', '    //  It has been tested, reviewed and found to be clear enough.\n', '    //@dev this function always src or dest are ether. can&#39;t do token to token\n', '    function searchBestRate(ERC20 src, ERC20 dest, uint srcAmount, bool usePermissionless)\n', '        public\n', '        view\n', '        returns(address, uint)\n', '    {\n', '        uint bestRate = 0;\n', '        uint bestReserve = 0;\n', '        uint numRelevantReserves = 0;\n', '\n', '        //return 1 for ether to ether\n', '        if (src == dest) return (reserves[bestReserve], PRECISION);\n', '\n', '        address[] memory reserveArr;\n', '\n', '        reserveArr = src == ETH_TOKEN_ADDRESS ? reservesPerTokenDest[dest] : reservesPerTokenSrc[src];\n', '\n', '        if (reserveArr.length == 0) return (reserves[bestReserve], bestRate);\n', '\n', '        uint[] memory rates = new uint[](reserveArr.length);\n', '        uint[] memory reserveCandidates = new uint[](reserveArr.length);\n', '\n', '        for (uint i = 0; i < reserveArr.length; i++) {\n', '            //list all reserves that have this token.\n', '            if (!usePermissionless && reserveType[reserveArr[i]] == ReserveType.PERMISSIONLESS) {\n', '                continue;\n', '            }\n', '\n', '            rates[i] = (KyberReserveInterface(reserveArr[i])).getConversionRate(src, dest, srcAmount, block.number);\n', '\n', '            if (rates[i] > bestRate) {\n', '                //best rate is highest rate\n', '                bestRate = rates[i];\n', '            }\n', '        }\n', '\n', '        if (bestRate > 0) {\n', '            uint smallestRelevantRate = (bestRate * 10000) / (10000 + negligibleRateDiff);\n', '\n', '            for (i = 0; i < reserveArr.length; i++) {\n', '                if (rates[i] >= smallestRelevantRate) {\n', '                    reserveCandidates[numRelevantReserves++] = i;\n', '                }\n', '            }\n', '\n', '            if (numRelevantReserves > 1) {\n', '                //when encountering small rate diff from bestRate. draw from relevant reserves\n', '                bestReserve = reserveCandidates[uint(block.blockhash(block.number-1)) % numRelevantReserves];\n', '            } else {\n', '                bestReserve = reserveCandidates[0];\n', '            }\n', '\n', '            bestRate = rates[bestReserve];\n', '        }\n', '\n', '        return (reserveArr[bestReserve], bestRate);\n', '    }\n', '    /* solhint-enable code-complexity */\n', '\n', '    function findBestRateTokenToToken(ERC20 src, ERC20 dest, uint srcAmount, bytes hint) internal view\n', '        returns(BestRateResult result)\n', '    {\n', '        //by default we use permission less reserves\n', '        bool usePermissionless = true;\n', '\n', '        // if hint in first 4 bytes == &#39;PERM&#39; only permissioned reserves will be used.\n', '        if ((hint.length >= 4) && (keccak256(hint[0], hint[1], hint[2], hint[3]) == keccak256(PERM_HINT))) {\n', '            usePermissionless = false;\n', '        }\n', '\n', '        (result.reserve1, result.rateSrcToEth) =\n', '            searchBestRate(src, ETH_TOKEN_ADDRESS, srcAmount, usePermissionless);\n', '\n', '        result.weiAmount = calcDestAmount(src, ETH_TOKEN_ADDRESS, srcAmount, result.rateSrcToEth);\n', '\n', '        (result.reserve2, result.rateEthToDest) =\n', '            searchBestRate(ETH_TOKEN_ADDRESS, dest, result.weiAmount, usePermissionless);\n', '\n', '        result.destAmount = calcDestAmount(ETH_TOKEN_ADDRESS, dest, result.weiAmount, result.rateEthToDest);\n', '\n', '        result.rate = calcRateFromQty(srcAmount, result.destAmount, getDecimals(src), getDecimals(dest));\n', '    }\n', '\n', '    function listPairs(address reserve, ERC20 token, bool isTokenToEth, bool add) internal {\n', '        uint i;\n', '        address[] storage reserveArr = reservesPerTokenDest[token];\n', '\n', '        if (isTokenToEth) {\n', '            reserveArr = reservesPerTokenSrc[token];\n', '        }\n', '\n', '        for (i = 0; i < reserveArr.length; i++) {\n', '            if (reserve == reserveArr[i]) {\n', '                if (add) {\n', '                    break; //already added\n', '                } else {\n', '                    //remove\n', '                    reserveArr[i] = reserveArr[reserveArr.length - 1];\n', '                    reserveArr.length--;\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (add && i == reserveArr.length) {\n', '            //if reserve wasn&#39;t found add it\n', '            reserveArr.push(reserve);\n', '        }\n', '    }\n', '\n', '    event KyberTrade(address indexed trader, ERC20 src, ERC20 dest, uint srcAmount, uint dstAmount,\n', '        address destAddress, uint ethWeiValue, address reserve1, address reserve2, bytes hint);\n', '\n', '    /* solhint-disable function-max-lines */\n', '    //  Most of the lines here are functions calls spread over multiple lines. We find this function readable enough\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev trade api for kyber network.\n', '    /// @param tradeInput structure of trade inputs\n', '    function trade(TradeInput tradeInput) internal returns(uint) {\n', '        require(isEnabled);\n', '        require(tx.gasprice <= maxGasPriceValue);\n', '        require(validateTradeInput(tradeInput.src, tradeInput.srcAmount, tradeInput.dest, tradeInput.destAddress));\n', '\n', '        BestRateResult memory rateResult =\n', '            findBestRateTokenToToken(tradeInput.src, tradeInput.dest, tradeInput.srcAmount, tradeInput.hint);\n', '\n', '        require(rateResult.rate > 0);\n', '        require(rateResult.rate < MAX_RATE);\n', '        require(rateResult.rate >= tradeInput.minConversionRate);\n', '\n', '        uint actualDestAmount;\n', '        uint weiAmount;\n', '        uint actualSrcAmount;\n', '\n', '        (actualSrcAmount, weiAmount, actualDestAmount) = calcActualAmounts(tradeInput.src,\n', '            tradeInput.dest,\n', '            tradeInput.srcAmount,\n', '            tradeInput.maxDestAmount,\n', '            rateResult);\n', '\n', '        require(getUserCapInWei(tradeInput.trader) >= weiAmount);\n', '        require(handleChange(tradeInput.src, tradeInput.srcAmount, actualSrcAmount, tradeInput.trader));\n', '\n', '        require(doReserveTrade(     //src to ETH\n', '                tradeInput.src,\n', '                actualSrcAmount,\n', '                ETH_TOKEN_ADDRESS,\n', '                this,\n', '                weiAmount,\n', '                KyberReserveInterface(rateResult.reserve1),\n', '                rateResult.rateSrcToEth,\n', '                true));\n', '\n', '        require(doReserveTrade(     //Eth to dest\n', '                ETH_TOKEN_ADDRESS,\n', '                weiAmount,\n', '                tradeInput.dest,\n', '                tradeInput.destAddress,\n', '                actualDestAmount,\n', '                KyberReserveInterface(rateResult.reserve2),\n', '                rateResult.rateEthToDest,\n', '                true));\n', '\n', '        if (tradeInput.src != ETH_TOKEN_ADDRESS) //"fake" trade. (ether to ether) - don&#39;t burn.\n', '            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve1, tradeInput.walletId));\n', '        if (tradeInput.dest != ETH_TOKEN_ADDRESS) //"fake" trade. (ether to ether) - don&#39;t burn.\n', '            require(feeBurnerContract.handleFees(weiAmount, rateResult.reserve2, tradeInput.walletId));\n', '\n', '        KyberTrade({\n', '            trader: tradeInput.trader,\n', '            src: tradeInput.src,\n', '            dest: tradeInput.dest,\n', '            srcAmount: actualSrcAmount,\n', '            dstAmount: actualDestAmount,\n', '            destAddress: tradeInput.destAddress,\n', '            ethWeiValue: weiAmount,\n', '            reserve1: (tradeInput.src == ETH_TOKEN_ADDRESS) ? address(0) : rateResult.reserve1,\n', '            reserve2:  (tradeInput.dest == ETH_TOKEN_ADDRESS) ? address(0) : rateResult.reserve2,\n', '            hint: tradeInput.hint\n', '        });\n', '\n', '        return actualDestAmount;\n', '    }\n', '    /* solhint-enable function-max-lines */\n', '\n', '    function calcActualAmounts (ERC20 src, ERC20 dest, uint srcAmount, uint maxDestAmount, BestRateResult rateResult)\n', '        internal view returns(uint actualSrcAmount, uint weiAmount, uint actualDestAmount)\n', '    {\n', '        if (rateResult.destAmount > maxDestAmount) {\n', '            actualDestAmount = maxDestAmount;\n', '            weiAmount = calcSrcAmount(ETH_TOKEN_ADDRESS, dest, actualDestAmount, rateResult.rateEthToDest);\n', '            actualSrcAmount = calcSrcAmount(src, ETH_TOKEN_ADDRESS, weiAmount, rateResult.rateSrcToEth);\n', '            require(actualSrcAmount <= srcAmount);\n', '        } else {\n', '            actualDestAmount = rateResult.destAmount;\n', '            actualSrcAmount = srcAmount;\n', '            weiAmount = rateResult.weiAmount;\n', '        }\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev do one trade with a reserve\n', '    /// @param src Src token\n', '    /// @param amount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param reserve Reserve to use\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true if trade is successful\n', '    function doReserveTrade(\n', '        ERC20 src,\n', '        uint amount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint expectedDestAmount,\n', '        KyberReserveInterface reserve,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint callValue = 0;\n', '\n', '        if (src == dest) {\n', '            //this is for a "fake" trade when both src and dest are ethers.\n', '            if (destAddress != (address(this)))\n', '                destAddress.transfer(amount);\n', '            return true;\n', '        }\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            callValue = amount;\n', '        }\n', '\n', '        // reserve sends tokens/eth to network. network sends it to destination\n', '        require(reserve.trade.value(callValue)(src, amount, dest, this, conversionRate, validate));\n', '\n', '        if (destAddress != address(this)) {\n', '            //for token to token dest address is network. and Ether / token already here...\n', '            if (dest == ETH_TOKEN_ADDRESS) {\n', '                destAddress.transfer(expectedDestAmount);\n', '            } else {\n', '                require(dest.transfer(destAddress, expectedDestAmount));\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// when user sets max dest amount we could have too many source tokens == change. so we send it back to user.\n', '    function handleChange (ERC20 src, uint srcAmount, uint requiredSrcAmount, address trader) internal returns (bool) {\n', '\n', '        if (requiredSrcAmount < srcAmount) {\n', '            //if there is "change" send back to trader\n', '            if (src == ETH_TOKEN_ADDRESS) {\n', '                trader.transfer(srcAmount - requiredSrcAmount);\n', '            } else {\n', '                require(src.transfer(trader, (srcAmount - requiredSrcAmount)));\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev checks that user sent ether/tokens to contract before trade\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @return true if tradeInput is valid\n', '    function validateTradeInput(ERC20 src, uint srcAmount, ERC20 dest, address destAddress)\n', '        internal\n', '        view\n', '        returns(bool)\n', '    {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(srcAmount != 0);\n', '        require(destAddress != address(0));\n', '        require(src != dest);\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            require(msg.value == srcAmount);\n', '        } else {\n', '            require(msg.value == 0);\n', '            //funds should have been moved to this contract already.\n', '            require(src.balanceOf(this) >= srcAmount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/KyberNetworkProxyInterface.sol\n', '\n', '/// @title Kyber Network interface\n', 'interface KyberNetworkProxyInterface {\n', '    function maxGasPrice() public view returns(uint);\n', '    function getUserCapInWei(address user) public view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n', '    function enabled() public view returns(bool);\n', '    function info(bytes32 id) public view returns(uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n', '        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n', '}\n', '\n', '// File: contracts/SimpleNetworkInterface.sol\n', '\n', '/// @title simple interface for Kyber Network \n', 'interface SimpleNetworkInterface {\n', '    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) public returns(uint);\n', '    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint);\n', '    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint);\n', '}\n', '\n', '// File: contracts/KyberNetworkProxy.sol\n', '\n', '////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '/// @title Kyber Network proxy for main contract\n', 'contract KyberNetworkProxy is KyberNetworkProxyInterface, SimpleNetworkInterface, Withdrawable, Utils2 {\n', '\n', '    KyberNetworkInterface public kyberNetworkContract;\n', '\n', '    function KyberNetworkProxy(address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest   Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @return amount of actual dest tokens\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade between src and dest token and send dest tokens to msg sender\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest Destination token\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapTokenToToken(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        uint minConversionRate\n', '    )\n', '        public\n', '        returns(uint)\n', '    {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade from Ether to token. Sends token to msg sender\n', '    /// @param token Destination token\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapEtherToToken(ERC20 token, uint minConversionRate) public payable returns(uint) {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            ETH_TOKEN_ADDRESS,\n', '            msg.value,\n', '            token,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    /// @dev makes a trade from token to Ether, sends Ether to msg sender\n', '    /// @param token Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @return amount of actual dest tokens\n', '    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) public returns(uint) {\n', '        bytes memory hint;\n', '\n', '        return tradeWithHint(\n', '            token,\n', '            srcAmount,\n', '            ETH_TOKEN_ADDRESS,\n', '            msg.sender,\n', '            MAX_QTY,\n', '            minConversionRate,\n', '            0,\n', '            hint\n', '        );\n', '    }\n', '\n', '    struct UserBalance {\n', '        uint srcBalance;\n', '        uint destBalance;\n', '    }\n', '\n', '    event ExecuteTrade(address indexed trader, ERC20 src, ERC20 dest, uint actualSrcAmount, uint actualDestAmount);\n', '\n', '    /// @notice use token address ETH_TOKEN_ADDRESS for ether\n', '    /// @dev makes a trade between src and dest token and send dest token to destAddress\n', '    /// @param src Src token\n', '    /// @param srcAmount amount of src tokens\n', '    /// @param dest Destination token\n', '    /// @param destAddress Address to send tokens to\n', '    /// @param maxDestAmount A limit on the amount of dest tokens\n', '    /// @param minConversionRate The minimal conversion rate. If actual rate is lower, trade is canceled.\n', '    /// @param walletId is the wallet ID to send part of the fees\n', '    /// @param hint will give hints for the trade.\n', '    /// @return amount of actual dest tokens\n', '    function tradeWithHint(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId,\n', '        bytes hint\n', '    )\n', '        public\n', '        payable\n', '        returns(uint)\n', '    {\n', '        require(src == ETH_TOKEN_ADDRESS || msg.value == 0);\n', '        \n', '        UserBalance memory userBalanceBefore;\n', '\n', '        userBalanceBefore.srcBalance = getBalance(src, msg.sender);\n', '        userBalanceBefore.destBalance = getBalance(dest, destAddress);\n', '\n', '        if (src == ETH_TOKEN_ADDRESS) {\n', '            userBalanceBefore.srcBalance += msg.value;\n', '        } else {\n', '            require(src.transferFrom(msg.sender, kyberNetworkContract, srcAmount));\n', '        }\n', '\n', '        uint reportedDestAmount = kyberNetworkContract.tradeWithHint.value(msg.value)(\n', '            msg.sender,\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId,\n', '            hint\n', '        );\n', '\n', '        TradeOutcome memory tradeOutcome = calculateTradeOutcome(\n', '            userBalanceBefore.srcBalance,\n', '            userBalanceBefore.destBalance,\n', '            src,\n', '            dest,\n', '            destAddress\n', '        );\n', '\n', '        require(reportedDestAmount == tradeOutcome.userDeltaDestAmount);\n', '        require(tradeOutcome.userDeltaDestAmount <= maxDestAmount);\n', '        require(tradeOutcome.actualRate >= minConversionRate);\n', '\n', '        ExecuteTrade(msg.sender, src, dest, tradeOutcome.userDeltaSrcAmount, tradeOutcome.userDeltaDestAmount);\n', '        return tradeOutcome.userDeltaDestAmount;\n', '    }\n', '\n', '    event KyberNetworkSet(address newNetworkContract, address oldNetworkContract);\n', '\n', '    function setKyberNetworkContract(KyberNetworkInterface _kyberNetworkContract) public onlyAdmin {\n', '\n', '        require(_kyberNetworkContract != address(0));\n', '\n', '        KyberNetworkSet(_kyberNetworkContract, kyberNetworkContract);\n', '\n', '        kyberNetworkContract = _kyberNetworkContract;\n', '    }\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\n', '        public view\n', '        returns(uint expectedRate, uint slippageRate)\n', '    {\n', '        return kyberNetworkContract.getExpectedRate(src, dest, srcQty);\n', '    }\n', '\n', '    function getUserCapInWei(address user) public view returns(uint) {\n', '        return kyberNetworkContract.getUserCapInWei(user);\n', '    }\n', '\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint) {\n', '        return kyberNetworkContract.getUserCapInTokenWei(user, token);\n', '    }\n', '\n', '    function maxGasPrice() public view returns(uint) {\n', '        return kyberNetworkContract.maxGasPrice();\n', '    }\n', '\n', '    function enabled() public view returns(bool) {\n', '        return kyberNetworkContract.enabled();\n', '    }\n', '\n', '    function info(bytes32 field) public view returns(uint) {\n', '        return kyberNetworkContract.info(field);\n', '    }\n', '\n', '    struct TradeOutcome {\n', '        uint userDeltaSrcAmount;\n', '        uint userDeltaDestAmount;\n', '        uint actualRate;\n', '    }\n', '\n', '    function calculateTradeOutcome (uint srcBalanceBefore, uint destBalanceBefore, ERC20 src, ERC20 dest,\n', '        address destAddress)\n', '        internal returns(TradeOutcome outcome)\n', '    {\n', '        uint userSrcBalanceAfter;\n', '        uint userDestBalanceAfter;\n', '\n', '        userSrcBalanceAfter = getBalance(src, msg.sender);\n', '        userDestBalanceAfter = getBalance(dest, destAddress);\n', '\n', '        //protect from underflow\n', '        require(userDestBalanceAfter > destBalanceBefore);\n', '        require(srcBalanceBefore > userSrcBalanceAfter);\n', '\n', '        outcome.userDeltaDestAmount = userDestBalanceAfter - destBalanceBefore;\n', '        outcome.userDeltaSrcAmount = srcBalanceBefore - userSrcBalanceAfter;\n', '\n', '        outcome.actualRate = calcRateFromQty(\n', '                outcome.userDeltaSrcAmount,\n', '                outcome.userDeltaDestAmount,\n', '                getDecimalsSafe(src),\n', '                getDecimalsSafe(dest)\n', '            );\n', '    }\n', '}\n', '\n', '// File: contracts/SanityRatesInterface.sol\n', '\n', 'interface SanityRatesInterface {\n', '    function getSanityRate(ERC20 src, ERC20 dest) public view returns(uint);\n', '}\n', '\n', 'contract KyberReserve is KyberReserveInterface, Withdrawable, Utils {\n', '\n', '    address public kyberNetwork;\n', '    bool public tradeEnabled;\n', '    ConversionRatesInterface public conversionRatesContract;\n', '    SanityRatesInterface public sanityRatesContract;\n', '    mapping(bytes32=>bool) public approvedWithdrawAddresses; // sha3(token,address)=>bool\n', '\n', '    function KyberReserve(address _kyberNetwork, ConversionRatesInterface _ratesContract, address _admin) public {\n', '        require(_admin != address(0));\n', '        require(_ratesContract != address(0));\n', '        require(_kyberNetwork != address(0));\n', '        kyberNetwork = _kyberNetwork;\n', '        conversionRatesContract = _ratesContract;\n', '        admin = _admin;\n', '        tradeEnabled = true;\n', '    }\n', '\n', '    event DepositToken(ERC20 token, uint amount);\n', '\n', '    function() public payable {\n', '        DepositToken(ETH_TOKEN_ADDRESS, msg.value);\n', '    }\n', '\n', '    event TradeExecute(\n', '        address indexed origin,\n', '        address src,\n', '        uint srcAmount,\n', '        address destToken,\n', '        uint destAmount,\n', '        address destAddress\n', '    );\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {\n', '        require(tradeEnabled);\n', '        require(msg.sender == kyberNetwork);\n', '\n', '        require(doTrade(srcToken, srcAmount, destToken, destAddress, conversionRate, validate));\n', '\n', '        return true;\n', '    }\n', '\n', '    event TradeEnabled(bool enable);\n', '\n', '    function enableTrade() public onlyAdmin returns(bool) {\n', '        tradeEnabled = true;\n', '        TradeEnabled(true);\n', '\n', '        return true;\n', '    }\n', '\n', '    function disableTrade() public onlyAlerter returns(bool) {\n', '        tradeEnabled = false;\n', '        TradeEnabled(false);\n', '\n', '        return true;\n', '    }\n', '\n', '    event WithdrawAddressApproved(ERC20 token, address addr, bool approve);\n', '\n', '    function approveWithdrawAddress(ERC20 token, address addr, bool approve) public onlyAdmin {\n', '        approvedWithdrawAddresses[keccak256(token, addr)] = approve;\n', '        WithdrawAddressApproved(token, addr, approve);\n', '\n', '        setDecimals(token);\n', '    }\n', '\n', '    event WithdrawFunds(ERC20 token, uint amount, address destination);\n', '\n', '    function withdraw(ERC20 token, uint amount, address destination) public onlyOperator returns(bool) {\n', '        require(approvedWithdrawAddresses[keccak256(token, destination)]);\n', '\n', '        if (token == ETH_TOKEN_ADDRESS) {\n', '            destination.transfer(amount);\n', '        } else {\n', '            require(token.transfer(destination, amount));\n', '        }\n', '\n', '        WithdrawFunds(token, amount, destination);\n', '\n', '        return true;\n', '    }\n', '\n', '    event SetContractAddresses(address network, address rate, address sanity);\n', '\n', '    function setContracts(address _kyberNetwork, ConversionRatesInterface _conversionRates, SanityRatesInterface _sanityRates)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_kyberNetwork != address(0));\n', '        require(_conversionRates != address(0));\n', '\n', '        kyberNetwork = _kyberNetwork;\n', '        conversionRatesContract = _conversionRates;\n', '        sanityRatesContract = _sanityRates;\n', '\n', '        SetContractAddresses(kyberNetwork, conversionRatesContract, sanityRatesContract);\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// status functions ///////////////////////////////////////////////////////\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    function getBalance(ERC20 token) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return this.balance;\n', '        else\n', '            return token.balanceOf(this);\n', '    }\n', '\n', '    function getDestQty(ERC20 src, ERC20 dest, uint srcQty, uint rate) public view returns(uint) {\n', '        uint dstDecimals = getDecimals(dest);\n', '        uint srcDecimals = getDecimals(src);\n', '\n', '        return calcDstQty(srcQty, srcDecimals, dstDecimals, rate);\n', '    }\n', '\n', '    function getSrcQty(ERC20 src, ERC20 dest, uint dstQty, uint rate) public view returns(uint) {\n', '        uint dstDecimals = getDecimals(dest);\n', '        uint srcDecimals = getDecimals(src);\n', '\n', '        return calcSrcQty(dstQty, srcDecimals, dstDecimals, rate);\n', '    }\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint) {\n', '        ERC20 token;\n', '        bool  buy;\n', '\n', '        if (!tradeEnabled) return 0;\n', '\n', '        if (ETH_TOKEN_ADDRESS == src) {\n', '            buy = true;\n', '            token = dest;\n', '        } else if (ETH_TOKEN_ADDRESS == dest) {\n', '            buy = false;\n', '            token = src;\n', '        } else {\n', '            return 0; // pair is not listed\n', '        }\n', '\n', '        uint rate = conversionRatesContract.getRate(token, blockNumber, buy, srcQty);\n', '        uint destQty = getDestQty(src, dest, srcQty, rate);\n', '\n', '        if (getBalance(dest) < destQty) return 0;\n', '\n', '        if (sanityRatesContract != address(0)) {\n', '            uint sanityRate = sanityRatesContract.getSanityRate(src, dest);\n', '            if (rate > sanityRate) return 0;\n', '        }\n', '\n', '        return rate;\n', '    }\n', '\n', '    /// @dev do a trade\n', '    /// @param srcToken Src token\n', '    /// @param srcAmount Amount of src token\n', '    /// @param destToken Destination token\n', '    /// @param destAddress Destination address to send tokens to\n', '    /// @param validate If true, additional validations are applicable\n', '    /// @return true iff trade is successful\n', '    function doTrade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        // can skip validation if done at kyber network level\n', '        if (validate) {\n', '            require(conversionRate > 0);\n', '            if (srcToken == ETH_TOKEN_ADDRESS)\n', '                require(msg.value == srcAmount);\n', '            else\n', '                require(msg.value == 0);\n', '        }\n', '\n', '        uint destAmount = getDestQty(srcToken, destToken, srcAmount, conversionRate);\n', '        // sanity check\n', '        require(destAmount > 0);\n', '\n', '        // add to imbalance\n', '        ERC20 token;\n', '        int buy;\n', '        if (srcToken == ETH_TOKEN_ADDRESS) {\n', '            buy = int(destAmount);\n', '            token = destToken;\n', '        } else {\n', '            buy = -1 * int(srcAmount);\n', '            token = srcToken;\n', '        }\n', '\n', '        conversionRatesContract.recordImbalance(\n', '            token,\n', '            buy,\n', '            0,\n', '            block.number\n', '        );\n', '\n', '        // collect src tokens\n', '        if (srcToken != ETH_TOKEN_ADDRESS) {\n', '            require(srcToken.transferFrom(msg.sender, this, srcAmount));\n', '        }\n', '\n', '        // send dest tokens\n', '        if (destToken == ETH_TOKEN_ADDRESS) {\n', '            destAddress.transfer(destAmount);\n', '        } else {\n', '            require(destToken.transfer(destAddress, destAmount));\n', '        }\n', '\n', '        TradeExecute(msg.sender, srcToken, srcAmount, destToken, destAmount, destAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/permissionless/OrderIdManager.sol\n', '\n', 'contract OrderIdManager {\n', '    struct OrderIdData {\n', '        uint32 firstOrderId;\n', '        uint takenBitmap;\n', '    }\n', '\n', '    uint constant public NUM_ORDERS = 32;\n', '\n', '    function fetchNewOrderId(OrderIdData storage freeOrders)\n', '        internal\n', '        returns(uint32)\n', '    {\n', '        uint orderBitmap = freeOrders.takenBitmap;\n', '        uint bitPointer = 1;\n', '\n', '        for (uint i = 0; i < NUM_ORDERS; ++i) {\n', '\n', '            if ((orderBitmap & bitPointer) == 0) {\n', '                freeOrders.takenBitmap = orderBitmap | bitPointer;\n', '                return(uint32(uint(freeOrders.firstOrderId) + i));\n', '            }\n', '\n', '            bitPointer *= 2;\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    /// @dev mark order as free to use.\n', '    function releaseOrderId(OrderIdData storage freeOrders, uint32 orderId)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        require(orderId >= freeOrders.firstOrderId);\n', '        require(orderId < (freeOrders.firstOrderId + NUM_ORDERS));\n', '\n', '        uint orderBitNum = uint(orderId) - uint(freeOrders.firstOrderId);\n', '        uint bitPointer = uint(1) << orderBitNum;\n', '\n', '        require(bitPointer & freeOrders.takenBitmap > 0);\n', '\n', '        freeOrders.takenBitmap &= ~bitPointer;\n', '        return true;\n', '    }\n', '\n', '    function allocateOrderIds(\n', '        OrderIdData storage makerOrders,\n', '        uint32 firstAllocatedId\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        if (makerOrders.firstOrderId > 0) {\n', '            return false;\n', '        }\n', '\n', '        makerOrders.firstOrderId = firstAllocatedId;\n', '        makerOrders.takenBitmap = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    function orderAllocationRequired(OrderIdData storage freeOrders) internal view returns (bool) {\n', '\n', '        if (freeOrders.firstOrderId == 0) return true;\n', '        return false;\n', '    }\n', '\n', '    function getNumActiveOrderIds(OrderIdData storage makerOrders) internal view returns (uint numActiveOrders) {\n', '        for (uint i = 0; i < NUM_ORDERS; ++i) {\n', '            if ((makerOrders.takenBitmap & (uint(1) << i)) > 0) numActiveOrders++;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/permissionless/OrderListInterface.sol\n', '\n', 'interface OrderListInterface {\n', '    function getOrderDetails(uint32 orderId) public view returns (address, uint128, uint128, uint32, uint32);\n', '    function add(address maker, uint32 orderId, uint128 srcAmount, uint128 dstAmount) public returns (bool);\n', '    function remove(uint32 orderId) public returns (bool);\n', '    function update(uint32 orderId, uint128 srcAmount, uint128 dstAmount) public returns (bool);\n', '    function getFirstOrder() public view returns(uint32 orderId, bool isEmpty);\n', '    function allocateIds(uint32 howMany) public returns(uint32);\n', '    function findPrevOrderId(uint128 srcAmount, uint128 dstAmount) public view returns(uint32);\n', '\n', '    function addAfterId(address maker, uint32 orderId, uint128 srcAmount, uint128 dstAmount, uint32 prevId) public\n', '        returns (bool);\n', '\n', '    function updateWithPositionHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount, uint32 prevId) public\n', '        returns(bool, uint);\n', '}\n', '\n', '// File: contracts/permissionless/OrderListFactoryInterface.sol\n', '\n', 'interface OrderListFactoryInterface {\n', '    function newOrdersContract(address admin) public returns(OrderListInterface);\n', '}\n', '\n', '// File: contracts/permissionless/OrderbookReserveInterface.sol\n', '\n', 'interface OrderbookReserveInterface {\n', '    function init() public returns(bool);\n', '    function kncRateBlocksTrade() public view returns(bool);\n', '}\n', '\n', '// File: contracts/permissionless/OrderbookReserve.sol\n', '\n', 'contract FeeBurnerRateInterface {\n', '    uint public kncPerEthRatePrecision;\n', '}\n', '\n', '\n', 'interface MedianizerInterface {\n', '    function peek() public view returns (bytes32, bool);\n', '}\n', '\n', '\n', 'contract OrderbookReserve is OrderIdManager, Utils2, KyberReserveInterface, OrderbookReserveInterface {\n', '\n', '    uint public constant BURN_TO_STAKE_FACTOR = 5;      // stake per order must be x4 then expected burn amount.\n', '    uint public constant MAX_BURN_FEE_BPS = 100;        // 1%\n', '    uint public constant MIN_REMAINING_ORDER_RATIO = 2; // Ratio between min new order value and min order value.\n', '    uint public constant MAX_USD_PER_ETH = 100000;      // Above this value price is surely compromised.\n', '\n', '    uint32 constant public TAIL_ID = 1;         // tail Id in order list contract\n', '    uint32 constant public HEAD_ID = 2;         // head Id in order list contract\n', '\n', '    struct OrderLimits {\n', '        uint minNewOrderSizeUsd; // Basis for setting min new order size Eth\n', '        uint maxOrdersPerTrade;     // Limit number of iterated orders per trade / getRate loops.\n', '        uint minNewOrderSizeWei;    // Below this value can&#39;t create new order.\n', '        uint minOrderSizeWei;       // below this value order will be removed.\n', '    }\n', '\n', '    uint public kncPerEthBaseRatePrecision; // according to base rate all stakes are calculated.\n', '\n', '    struct ExternalContracts {\n', '        ERC20 kncToken;          // not constant. to enable testing while not on main net\n', '        ERC20 token;             // only supported token.\n', '        FeeBurnerRateInterface feeBurner;\n', '        address kyberNetwork;\n', '        MedianizerInterface medianizer; // price feed Eth - USD from maker DAO.\n', '        OrderListFactoryInterface orderListFactory;\n', '    }\n', '\n', '    //struct for getOrderData() return value. used only in memory.\n', '    struct OrderData {\n', '        address maker;\n', '        uint32 nextId;\n', '        bool isLastOrder;\n', '        uint128 srcAmount;\n', '        uint128 dstAmount;\n', '    }\n', '\n', '    OrderLimits public limits;\n', '    ExternalContracts public contracts;\n', '\n', '    // sorted lists of orders. one list for token to Eth, other for Eth to token.\n', '    // Each order is added in the correct position in the list to keep it sorted.\n', '    OrderListInterface public tokenToEthList;\n', '    OrderListInterface public ethToTokenList;\n', '\n', '    //funds data\n', '    mapping(address => mapping(address => uint)) public makerFunds; // deposited maker funds.\n', '    mapping(address => uint) public makerKnc;            // for knc staking.\n', '    mapping(address => uint) public makerTotalOrdersWei; // per maker how many Wei in orders, for stake calculation.\n', '\n', '    uint public makerBurnFeeBps;    // knc burn fee per order that is taken.\n', '\n', '    //each maker will have orders that will be reused.\n', '    mapping(address => OrderIdData) public makerOrdersTokenToEth;\n', '    mapping(address => OrderIdData) public makerOrdersEthToToken;\n', '\n', '    function OrderbookReserve(\n', '        ERC20 knc,\n', '        ERC20 reserveToken,\n', '        address burner,\n', '        address network,\n', '        MedianizerInterface medianizer,\n', '        OrderListFactoryInterface factory,\n', '        uint minNewOrderUsd,\n', '        uint maxOrdersPerTrade,\n', '        uint burnFeeBps\n', '    )\n', '        public\n', '    {\n', '\n', '        require(knc != address(0));\n', '        require(reserveToken != address(0));\n', '        require(burner != address(0));\n', '        require(network != address(0));\n', '        require(medianizer != address(0));\n', '        require(factory != address(0));\n', '        require(burnFeeBps != 0);\n', '        require(burnFeeBps <= MAX_BURN_FEE_BPS);\n', '        require(maxOrdersPerTrade != 0);\n', '        require(minNewOrderUsd > 0);\n', '\n', '        contracts.kyberNetwork = network;\n', '        contracts.feeBurner = FeeBurnerRateInterface(burner);\n', '        contracts.medianizer = medianizer;\n', '        contracts.orderListFactory = factory;\n', '        contracts.kncToken = knc;\n', '        contracts.token = reserveToken;\n', '\n', '        makerBurnFeeBps = burnFeeBps;\n', '        limits.minNewOrderSizeUsd = minNewOrderUsd;\n', '        limits.maxOrdersPerTrade = maxOrdersPerTrade;\n', '\n', '        require(setMinOrderSizeEth());\n', '    \n', '        require(contracts.kncToken.approve(contracts.feeBurner, (2**255)));\n', '\n', '        //can only support tokens with decimals() API\n', '        setDecimals(contracts.token);\n', '\n', '        kncPerEthBaseRatePrecision = contracts.feeBurner.kncPerEthRatePrecision();\n', '    }\n', '\n', '    ///@dev separate init function for this contract, if this init is in the C&#39;tor. gas consumption too high.\n', '    function init() public returns(bool) {\n', '        if ((tokenToEthList != address(0)) && (ethToTokenList != address(0))) return true;\n', '        if ((tokenToEthList != address(0)) || (ethToTokenList != address(0))) revert();\n', '\n', '        tokenToEthList = contracts.orderListFactory.newOrdersContract(this);\n', '        ethToTokenList = contracts.orderListFactory.newOrdersContract(this);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setKncPerEthBaseRate() public {\n', '        uint kncPerEthRatePrecision = contracts.feeBurner.kncPerEthRatePrecision();\n', '        if (kncPerEthRatePrecision < kncPerEthBaseRatePrecision) {\n', '            kncPerEthBaseRatePrecision = kncPerEthRatePrecision;\n', '        }\n', '    }\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dst, uint srcQty, uint blockNumber) public view returns(uint) {\n', '        require((src == ETH_TOKEN_ADDRESS) || (dst == ETH_TOKEN_ADDRESS));\n', '        require((src == contracts.token) || (dst == contracts.token));\n', '        require(srcQty <= MAX_QTY);\n', '\n', '        if (kncRateBlocksTrade()) return 0;\n', '\n', '        blockNumber; // in this reserve no order expiry == no use for blockNumber. here to avoid compiler warning.\n', '\n', '        //user order ETH -> token is matched with maker order token -> ETH\n', '        OrderListInterface list = (src == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\n', '\n', '        uint32 orderId;\n', '        OrderData memory orderData;\n', '\n', '        uint128 userRemainingSrcQty = uint128(srcQty);\n', '        uint128 totalUserDstAmount = 0;\n', '        uint maxOrders = limits.maxOrdersPerTrade;\n', '\n', '        for (\n', '            (orderId, orderData.isLastOrder) = list.getFirstOrder();\n', '            ((userRemainingSrcQty > 0) && (!orderData.isLastOrder) && (maxOrders-- > 0));\n', '            orderId = orderData.nextId\n', '        ) {\n', '            orderData = getOrderData(list, orderId);\n', '            // maker dst quantity is the requested quantity he wants to receive. user src quantity is what user gives.\n', '            // so user src quantity is matched with maker dst quantity\n', '            if (orderData.dstAmount <= userRemainingSrcQty) {\n', '                totalUserDstAmount += orderData.srcAmount;\n', '                userRemainingSrcQty -= orderData.dstAmount;\n', '            } else {\n', '                totalUserDstAmount += orderData.srcAmount * userRemainingSrcQty / orderData.dstAmount;\n', '                userRemainingSrcQty = 0;\n', '            }\n', '        }\n', '\n', '        if (userRemainingSrcQty != 0) return 0; //not enough tokens to exchange.\n', '\n', '        return calcRateFromQty(srcQty, totalUserDstAmount, getDecimals(src), getDecimals(dst));\n', '    }\n', '\n', '    event OrderbookReserveTrade(ERC20 srcToken, ERC20 dstToken, uint srcAmount, uint dstAmount);\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 dstToken,\n', '        address dstAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {\n', '        require(msg.sender == contracts.kyberNetwork);\n', '        require((srcToken == ETH_TOKEN_ADDRESS) || (dstToken == ETH_TOKEN_ADDRESS));\n', '        require((srcToken == contracts.token) || (dstToken == contracts.token));\n', '        require(srcAmount <= MAX_QTY);\n', '\n', '        conversionRate;\n', '        validate;\n', '\n', '        if (srcToken == ETH_TOKEN_ADDRESS) {\n', '            require(msg.value == srcAmount);\n', '        } else {\n', '            require(msg.value == 0);\n', '            require(srcToken.transferFrom(msg.sender, this, srcAmount));\n', '        }\n', '\n', '        uint totalDstAmount = doTrade(\n', '                srcToken,\n', '                srcAmount,\n', '                dstToken\n', '            );\n', '\n', '        require(conversionRate <= calcRateFromQty(srcAmount, totalDstAmount, getDecimals(srcToken),\n', '            getDecimals(dstToken)));\n', '\n', '        //all orders were successfully taken. send to dstAddress\n', '        if (dstToken == ETH_TOKEN_ADDRESS) {\n', '            dstAddress.transfer(totalDstAmount);\n', '        } else {\n', '            require(dstToken.transfer(dstAddress, totalDstAmount));\n', '        }\n', '\n', '        OrderbookReserveTrade(srcToken, dstToken, srcAmount, totalDstAmount);\n', '        return true;\n', '    }\n', '\n', '    function doTrade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 dstToken\n', '    )\n', '        internal\n', '        returns(uint)\n', '    {\n', '        OrderListInterface list = (srcToken == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\n', '\n', '        uint32 orderId;\n', '        OrderData memory orderData;\n', '        uint128 userRemainingSrcQty = uint128(srcAmount);\n', '        uint128 totalUserDstAmount = 0;\n', '\n', '        for (\n', '            (orderId, orderData.isLastOrder) = list.getFirstOrder();\n', '            ((userRemainingSrcQty > 0) && (!orderData.isLastOrder));\n', '            orderId = orderData.nextId\n', '        ) {\n', '        // maker dst quantity is the requested quantity he wants to receive. user src quantity is what user gives.\n', '        // so user src quantity is matched with maker dst quantity\n', '            orderData = getOrderData(list, orderId);\n', '            if (orderData.dstAmount <= userRemainingSrcQty) {\n', '                totalUserDstAmount += orderData.srcAmount;\n', '                userRemainingSrcQty -= orderData.dstAmount;\n', '                require(takeFullOrder({\n', '                    maker: orderData.maker,\n', '                    orderId: orderId,\n', '                    userSrc: srcToken,\n', '                    userDst: dstToken,\n', '                    userSrcAmount: orderData.dstAmount,\n', '                    userDstAmount: orderData.srcAmount\n', '                }));\n', '            } else {\n', '                uint128 partialDstQty = orderData.srcAmount * userRemainingSrcQty / orderData.dstAmount;\n', '                totalUserDstAmount += partialDstQty;\n', '                require(takePartialOrder({\n', '                    maker: orderData.maker,\n', '                    orderId: orderId,\n', '                    userSrc: srcToken,\n', '                    userDst: dstToken,\n', '                    userPartialSrcAmount: userRemainingSrcQty,\n', '                    userTakeDstAmount: partialDstQty,\n', '                    orderSrcAmount: orderData.srcAmount,\n', '                    orderDstAmount: orderData.dstAmount\n', '                }));\n', '                userRemainingSrcQty = 0;\n', '            }\n', '        }\n', '\n', '        require(userRemainingSrcQty == 0 && totalUserDstAmount > 0);\n', '\n', '        return totalUserDstAmount;\n', '    }\n', '\n', '    ///@param srcAmount is the token amount that will be payed. must be deposited before hand in the makers account.\n', '    ///@param dstAmount is the eth amount the maker expects to get for his tokens.\n', '    function submitTokenToEthOrder(uint128 srcAmount, uint128 dstAmount)\n', '        public\n', '        returns(bool)\n', '    {\n', '        return submitTokenToEthOrderWHint(srcAmount, dstAmount, 0);\n', '    }\n', '\n', '    function submitTokenToEthOrderWHint(uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\n', '        public\n', '        returns(bool)\n', '    {\n', '        uint32 newId = fetchNewOrderId(makerOrdersTokenToEth[msg.sender]);\n', '        return addOrder(false, newId, srcAmount, dstAmount, hintPrevOrder);\n', '    }\n', '\n', '    ///@param srcAmount is the Ether amount that will be payed, must be deposited before hand.\n', '    ///@param dstAmount is the token amount the maker expects to get for his Ether.\n', '    function submitEthToTokenOrder(uint128 srcAmount, uint128 dstAmount)\n', '        public\n', '        returns(bool)\n', '    {\n', '        return submitEthToTokenOrderWHint(srcAmount, dstAmount, 0);\n', '    }\n', '\n', '    function submitEthToTokenOrderWHint(uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\n', '        public\n', '        returns(bool)\n', '    {\n', '        uint32 newId = fetchNewOrderId(makerOrdersEthToToken[msg.sender]);\n', '        return addOrder(true, newId, srcAmount, dstAmount, hintPrevOrder);\n', '    }\n', '\n', '    ///@dev notice here a batch of orders represented in arrays. order x is represented by x cells of all arrays.\n', '    ///@dev all arrays expected to the same length.\n', '    ///@param isEthToToken per each order. is order x eth to token (= src is Eth) or vice versa.\n', '    ///@param srcAmount per each order. source amount for order x.\n', '    ///@param dstAmount per each order. destination amount for order x.\n', '    ///@param hintPrevOrder per each order what is the order it should be added after in ordered list. 0 for no hint.\n', '    ///@param isAfterPrevOrder per each order, set true if should be added in list right after previous added order.\n', '    function addOrderBatch(bool[] isEthToToken, uint128[] srcAmount, uint128[] dstAmount,\n', '        uint32[] hintPrevOrder, bool[] isAfterPrevOrder)\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(isEthToToken.length == hintPrevOrder.length);\n', '        require(isEthToToken.length == dstAmount.length);\n', '        require(isEthToToken.length == srcAmount.length);\n', '        require(isEthToToken.length == isAfterPrevOrder.length);\n', '\n', '        address maker = msg.sender;\n', '        uint32 prevId;\n', '        uint32 newId = 0;\n', '\n', '        for (uint i = 0; i < isEthToToken.length; ++i) {\n', '            prevId = isAfterPrevOrder[i] ? newId : hintPrevOrder[i];\n', '            newId = fetchNewOrderId(isEthToToken[i] ? makerOrdersEthToToken[maker] : makerOrdersTokenToEth[maker]);\n', '            require(addOrder(isEthToToken[i], newId, srcAmount[i], dstAmount[i], prevId));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateTokenToEthOrder(uint32 orderId, uint128 newSrcAmount, uint128 newDstAmount)\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(updateTokenToEthOrderWHint(orderId, newSrcAmount, newDstAmount, 0));\n', '        return true;\n', '    }\n', '\n', '    function updateTokenToEthOrderWHint(\n', '        uint32 orderId,\n', '        uint128 newSrcAmount,\n', '        uint128 newDstAmount,\n', '        uint32 hintPrevOrder\n', '    )\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(updateOrder(false, orderId, newSrcAmount, newDstAmount, hintPrevOrder));\n', '        return true;\n', '    }\n', '\n', '    function updateEthToTokenOrder(uint32 orderId, uint128 newSrcAmount, uint128 newDstAmount)\n', '        public\n', '        returns(bool)\n', '    {\n', '        return updateEthToTokenOrderWHint(orderId, newSrcAmount, newDstAmount, 0);\n', '    }\n', '\n', '    function updateEthToTokenOrderWHint(\n', '        uint32 orderId,\n', '        uint128 newSrcAmount,\n', '        uint128 newDstAmount,\n', '        uint32 hintPrevOrder\n', '    )\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(updateOrder(true, orderId, newSrcAmount, newDstAmount, hintPrevOrder));\n', '        return true;\n', '    }\n', '\n', '    function updateOrderBatch(bool[] isEthToToken, uint32[] orderId, uint128[] newSrcAmount,\n', '        uint128[] newDstAmount, uint32[] hintPrevOrder)\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(isEthToToken.length == orderId.length);\n', '        require(isEthToToken.length == newSrcAmount.length);\n', '        require(isEthToToken.length == newDstAmount.length);\n', '        require(isEthToToken.length == hintPrevOrder.length);\n', '\n', '        for (uint i = 0; i < isEthToToken.length; ++i) {\n', '            require(updateOrder(isEthToToken[i], orderId[i], newSrcAmount[i], newDstAmount[i],\n', '                hintPrevOrder[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    event TokenDeposited(address indexed maker, uint amount);\n', '\n', '    function depositToken(address maker, uint amount) public {\n', '        require(maker != address(0));\n', '        require(amount < MAX_QTY);\n', '\n', '        require(contracts.token.transferFrom(msg.sender, this, amount));\n', '\n', '        makerFunds[maker][contracts.token] += amount;\n', '        TokenDeposited(maker, amount);\n', '    }\n', '\n', '    event EtherDeposited(address indexed maker, uint amount);\n', '\n', '    function depositEther(address maker) public payable {\n', '        require(maker != address(0));\n', '\n', '        makerFunds[maker][ETH_TOKEN_ADDRESS] += msg.value;\n', '        EtherDeposited(maker, msg.value);\n', '    }\n', '\n', '    event KncFeeDeposited(address indexed maker, uint amount);\n', '\n', '    // knc will be staked per order. part of the amount will be used as fee.\n', '    function depositKncForFee(address maker, uint amount) public {\n', '        require(maker != address(0));\n', '        require(amount < MAX_QTY);\n', '\n', '        require(contracts.kncToken.transferFrom(msg.sender, this, amount));\n', '\n', '        makerKnc[maker] += amount;\n', '\n', '        KncFeeDeposited(maker, amount);\n', '\n', '        if (orderAllocationRequired(makerOrdersTokenToEth[maker])) {\n', '            require(allocateOrderIds(\n', '                makerOrdersTokenToEth[maker], /* makerOrders */\n', '                tokenToEthList.allocateIds(uint32(NUM_ORDERS)) /* firstAllocatedId */\n', '            ));\n', '        }\n', '\n', '        if (orderAllocationRequired(makerOrdersEthToToken[maker])) {\n', '            require(allocateOrderIds(\n', '                makerOrdersEthToToken[maker], /* makerOrders */\n', '                ethToTokenList.allocateIds(uint32(NUM_ORDERS)) /* firstAllocatedId */\n', '            ));\n', '        }\n', '    }\n', '\n', '    function withdrawToken(uint amount) public {\n', '\n', '        address maker = msg.sender;\n', '        uint makerFreeAmount = makerFunds[maker][contracts.token];\n', '\n', '        require(makerFreeAmount >= amount);\n', '\n', '        makerFunds[maker][contracts.token] -= amount;\n', '\n', '        require(contracts.token.transfer(maker, amount));\n', '    }\n', '\n', '    function withdrawEther(uint amount) public {\n', '\n', '        address maker = msg.sender;\n', '        uint makerFreeAmount = makerFunds[maker][ETH_TOKEN_ADDRESS];\n', '\n', '        require(makerFreeAmount >= amount);\n', '\n', '        makerFunds[maker][ETH_TOKEN_ADDRESS] -= amount;\n', '\n', '        maker.transfer(amount);\n', '    }\n', '\n', '    function withdrawKncFee(uint amount) public {\n', '\n', '        address maker = msg.sender;\n', '        \n', '        require(makerKnc[maker] >= amount);\n', '        require(makerUnlockedKnc(maker) >= amount);\n', '\n', '        makerKnc[maker] -= amount;\n', '\n', '        require(contracts.kncToken.transfer(maker, amount));\n', '    }\n', '\n', '    function cancelTokenToEthOrder(uint32 orderId) public returns(bool) {\n', '        require(cancelOrder(false, orderId));\n', '        return true;\n', '    }\n', '\n', '    function cancelEthToTokenOrder(uint32 orderId) public returns(bool) {\n', '        require(cancelOrder(true, orderId));\n', '        return true;\n', '    }\n', '\n', '    function setMinOrderSizeEth() public returns(bool) {\n', '        //get eth to $ from maker dao;\n', '        bytes32 usdPerEthInWei;\n', '        bool valid;\n', '        (usdPerEthInWei, valid) = contracts.medianizer.peek();\n', '        require(valid);\n', '\n', '        // ensuring that there is no underflow or overflow possible,\n', '        // even if the price is compromised\n', '        uint usdPerEth = uint(usdPerEthInWei) / (1 ether);\n', '        require(usdPerEth != 0);\n', '        require(usdPerEth < MAX_USD_PER_ETH);\n', '\n', '        // set Eth order limits according to price\n', '        uint minNewOrderSizeWei = limits.minNewOrderSizeUsd * PRECISION * (1 ether) / uint(usdPerEthInWei);\n', '\n', '        limits.minNewOrderSizeWei = minNewOrderSizeWei;\n', '        limits.minOrderSizeWei = limits.minNewOrderSizeWei / MIN_REMAINING_ORDER_RATIO;\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@dev Each maker stakes per order KNC that is factor of the required burn amount.\n', '    ///@dev If Knc per Eth rate becomes lower by more then factor, stake will not be enough and trade will be blocked.\n', '    function kncRateBlocksTrade() public view returns (bool) {\n', '        return (contracts.feeBurner.kncPerEthRatePrecision() > kncPerEthBaseRatePrecision * BURN_TO_STAKE_FACTOR);\n', '    }\n', '\n', '    function getTokenToEthAddOrderHint(uint128 srcAmount, uint128 dstAmount) public view returns (uint32) {\n', '        require(dstAmount >= limits.minNewOrderSizeWei);\n', '        return tokenToEthList.findPrevOrderId(srcAmount, dstAmount);\n', '    }\n', '\n', '    function getEthToTokenAddOrderHint(uint128 srcAmount, uint128 dstAmount) public view returns (uint32) {\n', '        require(srcAmount >= limits.minNewOrderSizeWei);\n', '        return ethToTokenList.findPrevOrderId(srcAmount, dstAmount);\n', '    }\n', '\n', '    function getTokenToEthUpdateOrderHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount)\n', '        public\n', '        view\n', '        returns (uint32)\n', '    {\n', '        require(dstAmount >= limits.minNewOrderSizeWei);\n', '        uint32 prevId = tokenToEthList.findPrevOrderId(srcAmount, dstAmount);\n', '        address add;\n', '        uint128 noUse;\n', '        uint32 next;\n', '\n', '        if (prevId == orderId) {\n', '            (add, noUse, noUse, prevId, next) = tokenToEthList.getOrderDetails(orderId);\n', '        }\n', '\n', '        return prevId;\n', '    }\n', '\n', '    function getEthToTokenUpdateOrderHint(uint32 orderId, uint128 srcAmount, uint128 dstAmount)\n', '        public\n', '        view\n', '        returns (uint32)\n', '    {\n', '        require(srcAmount >= limits.minNewOrderSizeWei);\n', '        uint32 prevId = ethToTokenList.findPrevOrderId(srcAmount, dstAmount);\n', '        address add;\n', '        uint128 noUse;\n', '        uint32 next;\n', '\n', '        if (prevId == orderId) {\n', '            (add, noUse, noUse, prevId, next) = ethToTokenList.getOrderDetails(orderId);\n', '        }\n', '\n', '        return prevId;\n', '    }\n', '\n', '    function getTokenToEthOrder(uint32 orderId)\n', '        public view\n', '        returns (\n', '            address _maker,\n', '            uint128 _srcAmount,\n', '            uint128 _dstAmount,\n', '            uint32 _prevId,\n', '            uint32 _nextId\n', '        )\n', '    {\n', '        return tokenToEthList.getOrderDetails(orderId);\n', '    }\n', '\n', '    function getEthToTokenOrder(uint32 orderId)\n', '        public view\n', '        returns (\n', '            address _maker,\n', '            uint128 _srcAmount,\n', '            uint128 _dstAmount,\n', '            uint32 _prevId,\n', '            uint32 _nextId\n', '        )\n', '    {\n', '        return ethToTokenList.getOrderDetails(orderId);\n', '    }\n', '\n', '    function makerRequiredKncStake(address maker) public view returns (uint) {\n', '        return(calcKncStake(makerTotalOrdersWei[maker]));\n', '    }\n', '\n', '    function makerUnlockedKnc(address maker) public view returns (uint) {\n', '        uint requiredKncStake = makerRequiredKncStake(maker);\n', '        if (requiredKncStake > makerKnc[maker]) return 0;\n', '        return (makerKnc[maker] - requiredKncStake);\n', '    }\n', '\n', '    function calcKncStake(uint weiAmount) public view returns(uint) {\n', '        return(calcBurnAmount(weiAmount) * BURN_TO_STAKE_FACTOR);\n', '    }\n', '\n', '    function calcBurnAmount(uint weiAmount) public view returns(uint) {\n', '        return(weiAmount * makerBurnFeeBps * kncPerEthBaseRatePrecision / (10000 * PRECISION));\n', '    }\n', '\n', '    function calcBurnAmountFromFeeBurner(uint weiAmount) public view returns(uint) {\n', '        return(weiAmount * makerBurnFeeBps * contracts.feeBurner.kncPerEthRatePrecision() / (10000 * PRECISION));\n', '    }\n', '\n', '    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\n', '    function getEthToTokenMakerOrderIds(address maker) public view returns(uint32[] orderList) {\n', '        OrderIdData storage makerOrders = makerOrdersEthToToken[maker];\n', '        orderList = new uint32[](getNumActiveOrderIds(makerOrders));\n', '        uint activeOrder = 0;\n', '\n', '        for (uint32 i = 0; i < NUM_ORDERS; ++i) {\n', '            if ((makerOrders.takenBitmap & (uint(1) << i) > 0)) orderList[activeOrder++] = makerOrders.firstOrderId + i;\n', '        }\n', '    }\n', '\n', '    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\n', '    function getTokenToEthMakerOrderIds(address maker) public view returns(uint32[] orderList) {\n', '        OrderIdData storage makerOrders = makerOrdersTokenToEth[maker];\n', '        orderList = new uint32[](getNumActiveOrderIds(makerOrders));\n', '        uint activeOrder = 0;\n', '\n', '        for (uint32 i = 0; i < NUM_ORDERS; ++i) {\n', '            if ((makerOrders.takenBitmap & (uint(1) << i) > 0)) orderList[activeOrder++] = makerOrders.firstOrderId + i;\n', '        }\n', '    }\n', '\n', '    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\n', '    function getEthToTokenOrderList() public view returns(uint32[] orderList) {\n', '        OrderListInterface list = ethToTokenList;\n', '        return getList(list);\n', '    }\n', '\n', '    ///@dev This function is not fully optimized gas wise. Consider before calling on chain.\n', '    function getTokenToEthOrderList() public view returns(uint32[] orderList) {\n', '        OrderListInterface list = tokenToEthList;\n', '        return getList(list);\n', '    }\n', '\n', '    event NewLimitOrder(\n', '        address indexed maker,\n', '        uint32 orderId,\n', '        bool isEthToToken,\n', '        uint128 srcAmount,\n', '        uint128 dstAmount,\n', '        bool addedWithHint\n', '    );\n', '\n', '    function addOrder(bool isEthToToken, uint32 newId, uint128 srcAmount, uint128 dstAmount, uint32 hintPrevOrder)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        require(srcAmount < MAX_QTY);\n', '        require(dstAmount < MAX_QTY);\n', '        address maker = msg.sender;\n', '\n', '        require(secureAddOrderFunds(maker, isEthToToken, srcAmount, dstAmount));\n', '        require(validateLegalRate(srcAmount, dstAmount, isEthToToken));\n', '\n', '        bool addedWithHint = false;\n', '        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\n', '\n', '        if (hintPrevOrder != 0) {\n', '            addedWithHint = list.addAfterId(maker, newId, srcAmount, dstAmount, hintPrevOrder);\n', '        }\n', '\n', '        if (!addedWithHint) {\n', '            require(list.add(maker, newId, srcAmount, dstAmount));\n', '        }\n', '\n', '        NewLimitOrder(maker, newId, isEthToToken, srcAmount, dstAmount, addedWithHint);\n', '\n', '        return true;\n', '    }\n', '\n', '    event OrderUpdated(\n', '        address indexed maker,\n', '        bool isEthToToken,\n', '        uint orderId,\n', '        uint128 srcAmount,\n', '        uint128 dstAmount,\n', '        bool updatedWithHint\n', '    );\n', '\n', '    function updateOrder(bool isEthToToken, uint32 orderId, uint128 newSrcAmount,\n', '        uint128 newDstAmount, uint32 hintPrevOrder)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        require(newSrcAmount < MAX_QTY);\n', '        require(newDstAmount < MAX_QTY);\n', '        address maker;\n', '        uint128 currDstAmount;\n', '        uint128 currSrcAmount;\n', '        uint32 noUse;\n', '        uint noUse2;\n', '\n', '        require(validateLegalRate(newSrcAmount, newDstAmount, isEthToToken));\n', '\n', '        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\n', '\n', '        (maker, currSrcAmount, currDstAmount, noUse, noUse) = list.getOrderDetails(orderId);\n', '        require(maker == msg.sender);\n', '\n', '        if (!secureUpdateOrderFunds(maker, isEthToToken, currSrcAmount, currDstAmount, newSrcAmount, newDstAmount)) {\n', '            return false;\n', '        }\n', '\n', '        bool updatedWithHint = false;\n', '\n', '        if (hintPrevOrder != 0) {\n', '            (updatedWithHint, noUse2) = list.updateWithPositionHint(orderId, newSrcAmount, newDstAmount, hintPrevOrder);\n', '        }\n', '\n', '        if (!updatedWithHint) {\n', '            require(list.update(orderId, newSrcAmount, newDstAmount));\n', '        }\n', '\n', '        OrderUpdated(maker, isEthToToken, orderId, newSrcAmount, newDstAmount, updatedWithHint);\n', '\n', '        return true;\n', '    }\n', '\n', '    event OrderCanceled(address indexed maker, bool isEthToToken, uint32 orderId, uint128 srcAmount, uint dstAmount);\n', '\n', '    function cancelOrder(bool isEthToToken, uint32 orderId) internal returns(bool) {\n', '\n', '        address maker = msg.sender;\n', '        OrderListInterface list = isEthToToken ? ethToTokenList : tokenToEthList;\n', '        OrderData memory orderData = getOrderData(list, orderId);\n', '\n', '        require(orderData.maker == maker);\n', '\n', '        uint weiAmount = isEthToToken ? orderData.srcAmount : orderData.dstAmount;\n', '        require(releaseOrderStakes(maker, weiAmount, 0));\n', '\n', '        require(removeOrder(list, maker, isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token, orderId));\n', '\n', '        //funds go back to makers account\n', '        makerFunds[maker][isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token] += orderData.srcAmount;\n', '\n', '        OrderCanceled(maker, isEthToToken, orderId, orderData.srcAmount, orderData.dstAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@param maker is the maker of this order\n', '    ///@param isEthToToken which order type the maker is updating / adding\n', '    ///@param srcAmount is the orders src amount (token or ETH) could be negative if funds are released.\n', '    function bindOrderFunds(address maker, bool isEthToToken, int srcAmount)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        address fundsAddress = isEthToToken ? ETH_TOKEN_ADDRESS : contracts.token;\n', '\n', '        if (srcAmount < 0) {\n', '            makerFunds[maker][fundsAddress] += uint(-srcAmount);\n', '        } else {\n', '            require(makerFunds[maker][fundsAddress] >= uint(srcAmount));\n', '            makerFunds[maker][fundsAddress] -= uint(srcAmount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@param maker is the maker address\n', '    ///@param weiAmount is the wei amount inside order that should result in knc staking\n', '    function bindOrderStakes(address maker, int weiAmount) internal returns(bool) {\n', '\n', '        if (weiAmount < 0) {\n', '            uint decreaseWeiAmount = uint(-weiAmount);\n', '            if (decreaseWeiAmount > makerTotalOrdersWei[maker]) decreaseWeiAmount = makerTotalOrdersWei[maker];\n', '            makerTotalOrdersWei[maker] -= decreaseWeiAmount;\n', '            return true;\n', '        }\n', '\n', '        require(makerKnc[maker] >= calcKncStake(makerTotalOrdersWei[maker] + uint(weiAmount)));\n', '\n', '        makerTotalOrdersWei[maker] += uint(weiAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@dev if totalWeiAmount is 0 we only release stakes.\n', '    ///@dev if totalWeiAmount == weiForBurn. all staked amount will be burned. so no knc returned to maker\n', '    ///@param maker is the maker address\n', '    ///@param totalWeiAmount is total wei amount that was released from order - including taken wei amount.\n', '    ///@param weiForBurn is the part in order wei amount that was taken and should result in burning.\n', '    function releaseOrderStakes(address maker, uint totalWeiAmount, uint weiForBurn) internal returns(bool) {\n', '\n', '        require(weiForBurn <= totalWeiAmount);\n', '\n', '        if (totalWeiAmount > makerTotalOrdersWei[maker]) {\n', '            makerTotalOrdersWei[maker] = 0;\n', '        } else {\n', '            makerTotalOrdersWei[maker] -= totalWeiAmount;\n', '        }\n', '\n', '        if (weiForBurn == 0) return true;\n', '\n', '        uint burnAmount = calcBurnAmountFromFeeBurner(weiForBurn);\n', '\n', '        require(makerKnc[maker] >= burnAmount);\n', '        makerKnc[maker] -= burnAmount;\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@dev funds are valid only when required knc amount can be staked for this order.\n', '    function secureAddOrderFunds(address maker, bool isEthToToken, uint128 srcAmount, uint128 dstAmount)\n', '        internal returns(bool)\n', '    {\n', '        uint weiAmount = isEthToToken ? srcAmount : dstAmount;\n', '\n', '        require(weiAmount >= limits.minNewOrderSizeWei);\n', '        require(bindOrderFunds(maker, isEthToToken, int(srcAmount)));\n', '        require(bindOrderStakes(maker, int(weiAmount)));\n', '\n', '        return true;\n', '    }\n', '\n', '    ///@dev funds are valid only when required knc amount can be staked for this order.\n', '    function secureUpdateOrderFunds(address maker, bool isEthToToken, uint128 prevSrcAmount, uint128 prevDstAmount,\n', '        uint128 newSrcAmount, uint128 newDstAmount)\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint weiAmount = isEthToToken ? newSrcAmount : newDstAmount;\n', '        int weiDiff = isEthToToken ? (int(newSrcAmount) - int(prevSrcAmount)) :\n', '            (int(newDstAmount) - int(prevDstAmount));\n', '\n', '        require(weiAmount >= limits.minNewOrderSizeWei);\n', '\n', '        require(bindOrderFunds(maker, isEthToToken, int(newSrcAmount) - int(prevSrcAmount)));\n', '\n', '        require(bindOrderStakes(maker, weiDiff));\n', '\n', '        return true;\n', '    }\n', '\n', '    event FullOrderTaken(address maker, uint32 orderId, bool isEthToToken);\n', '\n', '    function takeFullOrder(\n', '        address maker,\n', '        uint32 orderId,\n', '        ERC20 userSrc,\n', '        ERC20 userDst,\n', '        uint128 userSrcAmount,\n', '        uint128 userDstAmount\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        OrderListInterface list = (userSrc == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\n', '\n', '        //userDst == maker source\n', '        require(removeOrder(list, maker, userDst, orderId));\n', '\n', '        FullOrderTaken(maker, orderId, userSrc == ETH_TOKEN_ADDRESS);\n', '\n', '        return takeOrder(maker, userSrc, userSrcAmount, userDstAmount, 0);\n', '    }\n', '\n', '    event PartialOrderTaken(address maker, uint32 orderId, bool isEthToToken, bool isRemoved);\n', '\n', '    function takePartialOrder(\n', '        address maker,\n', '        uint32 orderId,\n', '        ERC20 userSrc,\n', '        ERC20 userDst,\n', '        uint128 userPartialSrcAmount,\n', '        uint128 userTakeDstAmount,\n', '        uint128 orderSrcAmount,\n', '        uint128 orderDstAmount\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        require(userPartialSrcAmount < orderDstAmount);\n', '        require(userTakeDstAmount < orderSrcAmount);\n', '\n', '        //must reuse parameters, otherwise stack too deep error.\n', '        orderSrcAmount -= userTakeDstAmount;\n', '        orderDstAmount -= userPartialSrcAmount;\n', '\n', '        OrderListInterface list = (userSrc == ETH_TOKEN_ADDRESS) ? tokenToEthList : ethToTokenList;\n', '        uint weiValueNotReleasedFromOrder = (userSrc == ETH_TOKEN_ADDRESS) ? orderDstAmount : orderSrcAmount;\n', '        uint additionalReleasedWei = 0;\n', '\n', '        if (weiValueNotReleasedFromOrder < limits.minOrderSizeWei) {\n', '            // remaining order amount too small. remove order and add remaining funds to free funds\n', '            makerFunds[maker][userDst] += orderSrcAmount;\n', '            additionalReleasedWei = weiValueNotReleasedFromOrder;\n', '\n', '            //for remove order we give makerSrc == userDst\n', '            require(removeOrder(list, maker, userDst, orderId));\n', '        } else {\n', '            bool isSuccess;\n', '\n', '            // update order values, taken order is always first order\n', '            (isSuccess,) = list.updateWithPositionHint(orderId, orderSrcAmount, orderDstAmount, HEAD_ID);\n', '            require(isSuccess);\n', '        }\n', '\n', '        PartialOrderTaken(maker, orderId, userSrc == ETH_TOKEN_ADDRESS, additionalReleasedWei > 0);\n', '\n', '        //stakes are returned for unused wei value\n', '        return(takeOrder(maker, userSrc, userPartialSrcAmount, userTakeDstAmount, additionalReleasedWei));\n', '    }\n', '    \n', '    function takeOrder(\n', '        address maker,\n', '        ERC20 userSrc,\n', '        uint userSrcAmount,\n', '        uint userDstAmount,\n', '        uint additionalReleasedWei\n', '    )\n', '        internal\n', '        returns(bool)\n', '    {\n', '        uint weiAmount = userSrc == (ETH_TOKEN_ADDRESS) ? userSrcAmount : userDstAmount;\n', '\n', '        //token / eth already collected. just update maker balance\n', '        makerFunds[maker][userSrc] += userSrcAmount;\n', '\n', '        // send dst tokens in one batch. not here\n', '        //handle knc stakes and fee. releasedWeiValue was released and not traded.\n', '        return releaseOrderStakes(maker, (weiAmount + additionalReleasedWei), weiAmount);\n', '    }\n', '\n', '    function removeOrder(\n', '        OrderListInterface list,\n', '        address maker,\n', '        ERC20 makerSrc,\n', '        uint32 orderId\n', '    )\n', '        internal returns(bool)\n', '    {\n', '        require(list.remove(orderId));\n', '        OrderIdData storage orders = (makerSrc == ETH_TOKEN_ADDRESS) ?\n', '            makerOrdersEthToToken[maker] : makerOrdersTokenToEth[maker];\n', '        require(releaseOrderId(orders, orderId));\n', '\n', '        return true;\n', '    }\n', '\n', '    function getList(OrderListInterface list) internal view returns(uint32[] memory orderList) {\n', '        OrderData memory orderData;\n', '        uint32 orderId;\n', '        bool isEmpty;\n', '\n', '        (orderId, isEmpty) = list.getFirstOrder();\n', '        if (isEmpty) return(new uint32[](0));\n', '\n', '        uint numOrders = 0;\n', '\n', '        for (; !orderData.isLastOrder; orderId = orderData.nextId) {\n', '            orderData = getOrderData(list, orderId);\n', '            numOrders++;\n', '        }\n', '\n', '        orderList = new uint32[](numOrders);\n', '\n', '        (orderId, orderData.isLastOrder) = list.getFirstOrder();\n', '\n', '        for (uint i = 0; i < numOrders; i++) {\n', '            orderList[i] = orderId;\n', '            orderData = getOrderData(list, orderId);\n', '            orderId = orderData.nextId;\n', '        }\n', '    }\n', '\n', '    function getOrderData(OrderListInterface list, uint32 orderId) internal view returns (OrderData data) {\n', '        uint32 prevId;\n', '        (data.maker, data.srcAmount, data.dstAmount, prevId, data.nextId) = list.getOrderDetails(orderId);\n', '        data.isLastOrder = (data.nextId == TAIL_ID);\n', '    }\n', '\n', '    function validateLegalRate (uint srcAmount, uint dstAmount, bool isEthToToken)\n', '        internal view returns(bool)\n', '    {\n', '        uint rate;\n', '\n', '        /// notice, rate is calculated from taker perspective,\n', '        ///     for taker amounts are opposite. order srcAmount will be DstAmount for taker.\n', '        if (isEthToToken) {\n', '            rate = calcRateFromQty(dstAmount, srcAmount, getDecimals(contracts.token), ETH_DECIMALS);\n', '        } else {\n', '            rate = calcRateFromQty(dstAmount, srcAmount, ETH_DECIMALS, getDecimals(contracts.token));\n', '        }\n', '\n', '        if (rate > MAX_RATE) return false;\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/mockContracts/Wrapper.sol\n', '\n', 'contract Wrapper is Utils {\n', '\n', '    function getBalances(address reserve, ERC20[] tokens) public view returns(uint[]) {\n', '        uint[] memory result = new uint[](tokens.length);\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            uint balance = 0;\n', '            if (tokens[i] == ETH_TOKEN_ADDRESS) {\n', '                balance = reserve.balance;\n', '            } else {\n', '                balance = tokens[i].balanceOf(reserve);\n', '            }\n', '\n', '            result[i] = balance;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    function getByteFromBytes14(bytes14 x, uint byteInd) public pure returns(byte) {\n', '        require(byteInd <= 13);\n', '        return x[byteInd];\n', '    }\n', '\n', '    function getInt8FromByte(bytes14 x, uint byteInd) public pure returns(int8) {\n', '        require(byteInd <= 13);\n', '        return int8(x[byteInd]);\n', '    }\n', '\n', '//    struct TokenRatesCompactData {\n', '//        bytes14 buy;  // change buy rate of token from baseBuyRate in 10 bps\n', '//        bytes14 sell; // change sell rate of token from baseSellRate in 10 bps\n', '//\n', '//        uint32 blockNumber;\n', '//    }\n', '//\n', '//    function getDataFromCompact(TokenRatesCompactData compact, uint byteInd) public pure\n', '//        returns(int8 buyByte, int8 sellByte, uint blockNumber)\n', '//    {\n', '//        blockNumber = uint(compact.blockNumber);\n', '////        return (compact.buy[byteInd], compact.sell[byteInd], uint(compact.blockNumber));\n', '//    }\n', '\n', '    function getCompactData(ConversionRates ratesContract, ERC20 token) internal view returns(int8,int8,uint) {\n', '        uint bulkIndex; uint index; byte buy; byte sell; uint updateBlock;\n', '        (bulkIndex, index, buy, sell) = ratesContract.getCompactData(token);\n', '        updateBlock = ratesContract.getRateUpdateBlock(token);\n', '\n', '        return (int8(buy), int8(sell), updateBlock);\n', '    }\n', '\n', '    function getTokenRates(ConversionRates ratesContract, ERC20[] tokenList)\n', '        public view\n', '        returns(uint[], uint[], int8[], int8[], uint[])\n', '    {\n', '        uint[] memory buyBases = new uint[](tokenList.length);\n', '        uint[] memory sellBases = new uint[](tokenList.length);\n', '        int8[] memory compactBuy = new int8[](tokenList.length);\n', '        int8[] memory compactSell = new int8[](tokenList.length);\n', '        uint[] memory updateBlock = new uint[](tokenList.length);\n', '\n', '        for (uint i = 0;  i < tokenList.length; i++) {\n', '            buyBases[i] = ratesContract.getBasicRate(tokenList[i], true);\n', '            sellBases[i] = ratesContract.getBasicRate(tokenList[i], false);\n', '\n', '            (compactBuy[i], compactSell[i], updateBlock[i]) = getCompactData(ratesContract, tokenList[i]);\n', '        }\n', '\n', '        return (buyBases, sellBases, compactBuy, compactSell, updateBlock);\n', '    }\n', '\n', '    function getTokenIndicies(ConversionRates ratesContract, ERC20[] tokenList) public view returns(uint[], uint[]) {\n', '        uint[] memory bulkIndices = new uint[](tokenList.length);\n', '        uint[] memory tokenIndexInBulk = new uint[](tokenList.length);\n', '\n', '        for (uint i = 0; i < tokenList.length; i++) {\n', '            uint bulkIndex; uint index; byte buy; byte sell;\n', '            (bulkIndex, index, buy, sell) = ratesContract.getCompactData(tokenList[i]);\n', '\n', '            bulkIndices[i] = bulkIndex;\n', '            tokenIndexInBulk[i] = index;\n', '        }\n', '\n', '        return (bulkIndices,tokenIndexInBulk);\n', '    }\n', '\n', '\n', '    function getExpectedRates( KyberNetwork network, ERC20[] srcs, ERC20[] dests, uint[] qty )\n', '        public view returns(uint[], uint[])\n', '    {\n', '        require( srcs.length == dests.length );\n', '        require( srcs.length == dests.length );\n', '\n', '        uint[] memory rates = new uint[](srcs.length);\n', '        uint[] memory slippage = new uint[](srcs.length);\n', '        for ( uint i = 0; i < srcs.length; i++ ) {\n', '            (rates[i],slippage[i]) = network.getExpectedRate(srcs[i],dests[i],qty[i]);\n', '        }\n', '\n', '        return (rates, slippage);\n', '    }\n', '\n', '    function getReserveRate(KyberReserve reserve, ERC20[] srcs, ERC20[] dests)\n', '        public view returns(uint[], uint[])\n', '    {\n', '        require( srcs.length == dests.length );\n', '        require( srcs.length == dests.length );\n', '\n', '        uint[] memory rates      = new uint[](srcs.length);\n', '        uint[] memory sanityRate = new uint[](srcs.length);\n', '\n', '        for(uint i = 0 ; i < srcs.length ; i++) {\n', '            if(reserve.sanityRatesContract() != address(0x0)){\n', '                sanityRate[i] = reserve.sanityRatesContract().getSanityRate(srcs[i],\n', '                                                                            dests[i]);\n', '            }\n', '            rates[i] = reserve.getConversionRate(srcs[i],\n', '                                                 dests[i],\n', '                                                 0,\n', '                                                 block.number);\n', '        }\n', '\n', '        return (rates,sanityRate);\n', '    }\n', '\n', '    function getListPermissionlessTokensAndDecimals(KyberNetworkProxy networkProxy, uint startIndex, uint endIndex)\n', '      public\n', '      view\n', '      returns (ERC20[] memory permissionlessTokens, uint[] memory decimals, bool isEnded)\n', '    {\n', '        KyberNetwork network = KyberNetwork(networkProxy.kyberNetworkContract());\n', '        uint numReserves = network.getNumReserves();\n', '        if (startIndex >= numReserves || startIndex > endIndex) {\n', '            // no need to iterate\n', '            permissionlessTokens = new ERC20[](0);\n', '            decimals = new uint[](0);\n', '            isEnded = true;\n', '            return (permissionlessTokens, decimals, isEnded);\n', '        }\n', '        uint endIterator = numReserves <= endIndex ? numReserves - 1 : endIndex;\n', '        uint numberTokens = 0;\n', '        uint rID; // reserveID\n', '        ERC20 token;\n', '        // count number of tokens in unofficial reserves\n', '        KyberReserveInterface reserve;\n', '        for(rID = startIndex; rID <= endIterator; rID++) {\n', '            reserve = network.reserves(rID);\n', '            if ( reserve != address(0)\n', '              && network.reserveType(reserve) == KyberNetwork.ReserveType.PERMISSIONLESS)\n', '            {\n', '                // permissionless reserve\n', '                (, token , , , ,) = OrderbookReserve(reserve).contracts();\n', '                if (token != address(0)) { numberTokens += 1; }\n', '            }\n', '        }\n', '        permissionlessTokens = new ERC20[](numberTokens);\n', '        decimals = new uint[](numberTokens);\n', '        numberTokens = 0;\n', '        // get final list of tokens and decimals in unofficial reserves\n', '        for(rID = startIndex; rID <= endIterator; rID++) {\n', '            reserve = network.reserves(rID);\n', '            if ( reserve != address(0)\n', '              && network.reserveType(reserve) == KyberNetwork.ReserveType.PERMISSIONLESS)\n', '            {\n', '                // permissionless reserve\n', '                (, token , , , ,) = OrderbookReserve(reserve).contracts();\n', '                if (token != address(0)) {\n', '                    permissionlessTokens[numberTokens] = token;\n', '                    decimals[numberTokens] = getDecimals(token);\n', '                    numberTokens += 1;\n', '                }\n', '            }\n', '        }\n', '        isEnded = endIterator == numReserves - 1;\n', '        return (permissionlessTokens, decimals, isEnded);\n', '    }\n', '}']