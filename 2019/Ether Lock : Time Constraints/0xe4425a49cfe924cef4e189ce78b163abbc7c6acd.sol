['pragma solidity >= 0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '    function balanceOf(address tokenOwner) constant external returns (uint balance);\n', '}\n', '\n', 'contract againstFaucet {\n', '    mapping(address => uint) internal lastdate;\n', '\t\n', '    string public  name = "AGAINST Faucet";\n', '    string public symbol = "AGAINST";\n', '    string public comment = "AGAINST Faucet Contract";\n', '    token public tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\n', '    address releaseWallet = address(0x4e0871dC93410305F83aEEB15741B2BDb54C3c5a);\n', '\t\n', '    function () payable external {        \n', '        uint stockSupply = tokenReward.balanceOf(address(this));\n', '        require(stockSupply >= 1000000*(10**18),"Faucet Ended");\n', '\t    require(now-lastdate[address(msg.sender)] >= 1 days,"Faucet enable once a day");\n', '\t    lastdate[address(msg.sender)] = now;\t\t\n', '        tokenReward.transfer(msg.sender, 1000000*(10**18));\n', '        if (address(this).balance > 2*(10**15)) {\n', '          if (releaseWallet.send(address(this).balance)) {\n', '          }   \n', '        }     \t\t\t\n', '    }\n', '}']