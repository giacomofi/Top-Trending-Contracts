['pragma solidity ^0.5.7;\n', '\n', '/*\n', '................&..,&&&&&&.......%&&&%..........&....................\n', '................#&&&&&...&&&&&&&&&&&&&&&&&&&&&.......................\n', '..............&&&&&..&&&&&&&&&&&&&&&&&&&&&&&&&&&&&...................\n', '..........%.&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&................\n', '..........&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..............\n', '.........&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&............\n', '........&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&..........\n', '.......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&.........\n', '......&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&........\n', '.....&&&&&&&&&&&&&&&&&&&&(&&&&&&&&&&&&&&&&&/&&&&&&&&&&&&&&&&&&.......\n', '....#&&&&&&&&&&&&&&,&&&&&&&.&&&&&&&&&&&&&.&&&&&&&(.&&&&&&&&&&&&......\n', '....&&&&&&&&&&&&&&&&&.&&&&&&&..&&&&&&&..&&&&&&&*...&&&&&&&&&&&&&.....\n', '....&&&&&&&&&&&&&&&&&&&/#&&&&&&&..&..&&&&&&&&......&&&&&&&&&&&&&.....\n', '....&&&&&&&&&&&&&&.&&&&&&&.&&&&&&&.&&&&&&&%.......&&&&&&&&&&&&&&&....\n', '...*&&&&&&&&&&&&&&&&.%&&&&&&.(&&&&&&&&&&........&&&&&&&&&&&&&&&&&....\n', '....&&&&&&&&&&&&&&&&&&.*&&&&&&&.&&&&&%.......,&&&&&&&&&&&&&&&&&&&....\n', '....&&&&&&&&&&&&&&&&&&&&..&&&&&&&.(........#&&&&&&&&&&&&&&&&&&&&&....\n', '....&&&&&&&&&&&&&&&&&&&&&&../&&&&&/......&&&&&&&&&&&&&&&&&&&&&&&&....\n', '....&&&&&&&&&&&&&&&&&&&&&&&&(.,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&&....\n', '.....&&&&&&&&&&&&&&&&&&&&&&&&,,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&%....\n', '......&&&&&&&&&&&&&&&&&&&&&&&*,&&&/....&&&&&&&&&&&&&&&&&&&&&&&&&.....\n', '.......&&&&&&&&&&&&&&&&&&&&&&%,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&*.....\n', '....,...&&&&&&&&&&&&&&&&&&&&&&,&&&*....&&&&&&&&&&&&&&&&&&&&&&&&......\n', '.........&&&&&&&&&&&&&&&&&&&&&,&&&*...,&&&&&&&&&&&&&&&&&&&&&&&.......\n', '..........&&&&&&&&&&&&&&&&&&&&,&&&*.../&&&&&&&&&&&&&&&&&,&&&&........\n', '............&&&&&&&&&&&&&&&&&&,&&&*...&&&&&&&&&&&&&&&&(&&&&%.........\n', '..............&&&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&&&(&&&&&...........\n', '...........&....&&&&&&&&&&&&&&&&&&*...&&&&&&&&&&&&.&&&&&.............\n', '...................%&&&&&&&&&&&&&&*..%&&&&&&&&&..&&&&&...............\n', '................&(......&&&&&&&&&&/&&&&&&&(...&&&&.................\n', '*/\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n', '\n', 'contract Cyle {\n', '\n', '    string name;\n', '    string symbol;\n', '    uint8 decimals = 18;\n', '    uint256 totalSupply;\n', '\n', '    uint256 cyleGenesisBlock;\n', '    uint256 lastBlock;\n', '\n', '    uint256 miningReward;\n', '    uint256 publicMineSupply;\n', '    uint256 masternodeSupply;\n', '    uint256 smallReward = 0;\n', '    uint256 bigReward = 0;\n', '    uint256 masternodeRateNumerator;\n', '    uint256 masternodeRateDenominator;\n', '\n', '    uint256 staticFinney = 1 finney;\n', '    uint256 requiredAmountForMasternode = 100* 10 ** uint256(decimals);\n', '    uint256 public maxAmountForMasternode = 10000* 10 ** uint256(decimals);\n', '\n', '    uint256 blocksBetweenReward;\n', '\n', '    address owner;\n', '\n', '    address cyle = 0x0bAFb154b0E48BC9C483B92A0Cf00Cfb3d132EC7;\n', '\n', '    uint256 blacklistedAmountOfBlocks = 5760;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (uint256 => bool) public blockHasBeenMined;\n', '\n', '    mapping (address => bool) public masternodeCheck;\n', '\n', '    mapping (address => uint256) public registeredAtBlock;\n', '    mapping (address => uint256) public lastTimeRewarded;\n', '\n', '    mapping (address => bool) public addressHasParkedToken;\n', '    mapping (address => uint256) public lockedAmount;\n', '\n', '    mapping (address => uint256) public blacklistedTillBlock;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event ValueCheck(uint256 value);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMasterNode {\n', '        require(masternodeCheck[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier remainingNodeSupplyChecky{\n', '        require(masternodeSupply > 0);\n', '        _;\n', '    }\n', '\n', '    modifier remainingMineSupplyCheck{\n', '        require(publicMineSupply > miningReward);\n', '        _;\n', '    }\n', '\n', '    modifier nodePotentialCheck{\n', '        require(!masternodeCheck[msg.sender]);\n', '        require(balanceOf[msg.sender] > requiredAmountForMasternode);\n', '        _;\n', '    }\n', '\n', '    modifier checkForMiningBlacklisting{\n', '        require(getCurrentCyleBlock() > blacklistedTillBlock[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        totalSupply = 450000000 * 10 ** uint256(decimals);  \n', '        balanceOf[address(this)] = totalSupply;             \n', '        name = "Cyle";                                   \n', '        symbol = "CYLE";                               \n', '        cyleGenesisBlock = block.number;\n', '        lastBlock = block.number;\n', '        publicMineSupply = SafeMath.div(totalSupply,2);\n', '        masternodeSupply = SafeMath.sub(totalSupply, publicMineSupply);\n', '        owner = msg.sender;\n', '        masternodeRateNumerator = 6081;\n', '        masternodeRateDenominator = 500000;\n', '        miningReward = 50 * 10 ** uint256(decimals);\n', '        blocksBetweenReward = 40320;\n', '    }\n', '\n', '    function getStaticFinney() public view returns (uint){\n', '        return staticFinney;\n', '    }\n', '\n', '    function calcSmallReward(uint256 _miningReward) private pure returns(uint256 _reward){\n', '        _reward=SafeMath.div(SafeMath.mul(_miningReward, 20),100);\n', '        return _reward;\n', '    }\n', '\n', '     function calcBigReward(uint256 _miningReward) private pure returns(uint256 _reward){\n', '        _reward=SafeMath.div(SafeMath.mul(_miningReward, 80),100);\n', '        return _reward;\n', '    }\n', '\n', '    function publicMine() public payable remainingMineSupplyCheck checkForMiningBlacklisting{\n', '        require(!blockHasBeenMined[getCurrentCyleBlock()]);\n', '        miningReward = getCurrentMiningReward();\n', '        smallReward = calcSmallReward(miningReward);\n', '        bigReward = calcBigReward(miningReward);\n', '        this.transfer(msg.sender, bigReward);\n', '        this.transfer(cyle, smallReward);\n', '        publicMineSupply = SafeMath.sub(publicMineSupply,miningReward);\n', '        blockHasBeenMined[getCurrentCyleBlock()] = true;\n', '        blacklistedTillBlock[msg.sender] = SafeMath.add(getCurrentCyleBlock(), blacklistedAmountOfBlocks);\n', '    }\n', '    \n', '    function getRemainingPublicMineSupply() public view returns (uint256 _amount){\n', '        return publicMineSupply;\n', '    }\n', '\n', '    function getRemainingMasternodeSupply() public view returns (uint256 _amount){\n', '        return masternodeSupply;\n', '    }\n', '\n', '    function getBlacklistblockForUser() public view returns(uint256){\n', '        return blacklistedTillBlock[msg.sender];\n', '    }\n', '\n', '    function registerMasternode() public nodePotentialCheck{\n', '        require(!masternodeCheck[msg.sender]);\n', '        uint256 currentCyleBlock = getCurrentCyleBlock();\n', '        masternodeCheck[msg.sender] = true;\n', '        registeredAtBlock[msg.sender] = currentCyleBlock;\n', '        lastTimeRewarded[msg.sender] = currentCyleBlock;\n', '    }\n', '\n', '    function lockAmountForMasternode(uint256 _amount) public onlyMasterNode{\n', '\n', '        require(SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]) >= _amount);\n', '        require(_amount <= maxAmountForMasternode && SafeMath.add(lockedAmount[msg.sender],_amount)<= maxAmountForMasternode);\n', '        addressHasParkedToken[msg.sender] = true;\n', '        if(lockedAmount[msg.sender] == 0){\n', '            lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\n', '        }\n', '        lockedAmount[msg.sender] = SafeMath.add(lockedAmount[msg.sender],_amount);\n', '\n', '    }\n', '\n', '    function unlockAmountFromMasterNode() public onlyMasterNode returns(bool){\n', '\n', '        addressHasParkedToken[msg.sender] = false;\n', '        lockedAmount[msg.sender] = 0;\n', '        return true;\n', '\n', '    }\n', '\n', '    function claimMasternodeReward() public onlyMasterNode remainingNodeSupplyChecky{\n', '\n', '        require(addressHasParkedToken[msg.sender]);\n', '        uint256 interest = interestToClaim(msg.sender);\n', '        this.transfer(msg.sender, calcBigReward(interest));\n', '        this.transfer(cyle, calcSmallReward(interest));\n', '        lastTimeRewarded[msg.sender] = getCurrentCyleBlock();\n', '        masternodeSupply = SafeMath.sub(masternodeSupply, interest);\n', '\n', '    }\n', '\n', '    function interestToClaim(address _owner) public view returns(uint256 _amountToClaim){\n', '\n', '        uint256 blockstopay = SafeMath.div(SafeMath.sub(getCurrentCyleBlock(),lastTimeRewarded[_owner]), blocksBetweenReward);\n', '        _amountToClaim = SafeMath.mul((SafeMath.div(SafeMath.mul(getCurrentMasternodeNumerator(), lockedAmount[_owner]), getCurrentMasternodeDenominator())), blockstopay);\n', '        return _amountToClaim;\n', '    }\n', '\n', '    function getCurrentPossibleAmountOfAddress(address _owner) public view returns(uint256 _amount){\n', '\n', '         if(!addressHasParkedToken[_owner]){\n', '            _amount = 0;\n', '        } else {\n', '           _amount = SafeMath.add(lockedAmount[_owner], interestToClaim(_owner));\n', '           return _amount;\n', '        }\n', '    }\n', '\n', '    function getLastTimeRewarded(address _owner) public view returns (uint256 _block){\n', '        return lastTimeRewarded[_owner];\n', '\n', '    }\n', '\n', '    function checkForMasterNode(address _owner) public view returns (bool _state){\n', '       _state = masternodeCheck[_owner];\n', '       return _state;\n', '    }\n', '\n', '    function adjustBlocksBetweenReward(uint256 _newBlocksBetweenReward) public onlyOwner {\n', '        blocksBetweenReward = _newBlocksBetweenReward;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0x0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '}\n', '\n', '    function getCurrentEthBlock() private view returns (uint256 blockAmount){\n', '        return block.number;\n', '    }\n', '\n', '    function getCurrentCyleBlock() public view returns (uint256){\n', '        uint256 eth = getCurrentEthBlock();\n', '        uint256 cyleBlock = SafeMath.sub(eth, cyleGenesisBlock);\n', '        return cyleBlock;\n', '    }\n', '\n', '    function getCurrentMiningReward() public view returns(uint256 _miningReward){\n', '        return miningReward;\n', '    }\n', '\n', '     function getCurrentMasterNodeReward() public view returns(uint256 _miningReward){\n', '        return SafeMath.mul(SafeMath.div(masternodeRateNumerator,masternodeRateDenominator),100);\n', '    }\n', '\n', '    function getCurrentMasternodeNumerator() public view returns(uint256 _numerator){\n', '        return masternodeRateNumerator;    \n', '    }\n', ' \n', '    function getCurrentMasternodeDenominator() public view returns(uint256 _denominator){\n', '        return masternodeRateDenominator;    \n', '    }\n', '\n', '    function getTotalSupply() public view returns (uint256 _totalSupply){\n', '        return totalSupply;\n', '    }\n', '\n', '    function getCurrentLockedAmount() public view returns (uint256 _amount){\n', '        return lockedAmount[msg.sender];\n', '    }\n', '\n', '    function getCurrentUnlockedAmount() public view returns (uint256 _unlockedAmount){\n', '        return SafeMath.sub(balanceOf[msg.sender], lockedAmount[msg.sender]);\n', '    }\n', '\n', '    function getMasternodeRequiredAmount() public view returns(uint256 _reqAmount){\n', '        return requiredAmountForMasternode;\n', '    }\n', '\n', '    function adjustMiningRewards() public{\n', '\n', '        uint256 _remainingMiningSupply = getRemainingPublicMineSupply();\n', '\n', '        if(_remainingMiningSupply < 175000000000000000000000000 && _remainingMiningSupply > 131250000000000000000000000){\n', '            miningReward = 25000000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 131250000000000000000000000 && _remainingMiningSupply > 93750000000000000000000000){\n', '            miningReward = 12500000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 93750000000000000000000000 && _remainingMiningSupply > 62500000000000000000000000){\n', '            miningReward = 6250000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 62500000000000000000000000 && _remainingMiningSupply > 37500000000000000000000000){\n', '            miningReward = 3125000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 37500000000000000000000000 && _remainingMiningSupply > 18750000000000000000000000){\n', '            miningReward = 1562500000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 18750000000000000000000000 && _remainingMiningSupply > 12500000000000000000000000){\n', '            miningReward = 800000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 12500000000000000000000000 && _remainingMiningSupply > 6250000000000000000000000){\n', '            miningReward = 400000000000000000;\n', '        }\n', '\n', '        if(_remainingMiningSupply < 6250000000000000000000000){\n', '            miningReward = 200000000000000000;\n', '        }\n', '\n', '    }\n', '\n', '    function adjustMasternodeRewards() public{\n', '\n', '        uint256 _remainingStakeSupply = getRemainingMasternodeSupply();\n', '\n', '        if(_remainingStakeSupply < 218750000000000000000000000 && _remainingStakeSupply > 206250000000000000000000000){\n', '           masternodeRateNumerator=5410;\n', '           masternodeRateDenominator=500000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 206250000000000000000000000 && _remainingStakeSupply > 187500000000000000000000000){\n', '           masternodeRateNumerator=469;\n', '           masternodeRateDenominator=50000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 187500000000000000000000000 && _remainingStakeSupply > 162500000000000000000000000){\n', '           masternodeRateNumerator=783;\n', '           masternodeRateDenominator=100000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 162500000000000000000000000 && _remainingStakeSupply > 131250000000000000000000000){\n', '           masternodeRateNumerator=307;\n', '           masternodeRateDenominator=50000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 131250000000000000000000000 && _remainingStakeSupply > 93750000000000000000000000){\n', '           masternodeRateNumerator=43;\n', '           masternodeRateDenominator=10000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 93750000000000000000000000 && _remainingStakeSupply > 50000000000000000000000000){\n', '           masternodeRateNumerator=269;\n', '           masternodeRateDenominator=100000;\n', '        }\n', '\n', '        if(_remainingStakeSupply < 50000000000000000000000000){\n', '           masternodeRateNumerator=183;\n', '           masternodeRateDenominator=100000;\n', '        }\n', '    }\n', '    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']