['/**\n', ' * Allows to create contracts which would be able to receive ETH and tokens.\n', ' * Contract will help to detect ETH deposits faster.\n', ' * Contract idea was borrowed from Bittrex.\n', ' * Version: 2\n', ' * */\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setOwner(address _address) public onlyOwner {\n', '        owner = _address;\n', '    }\n', '}\n', '\n', '\n', 'contract RequiringAuthorization is Owned {\n', '    Casino public casino;\n', '    bool public casinoAuthorized;\n', '    mapping(address => bool) public authorized;\n', '\n', '    modifier onlyAuthorized {\n', '        require(authorized[msg.sender] || casinoAuthorized && casino.authorized(msg.sender));\n', '        _;\n', '    }\n', '\n', '    constructor(address _casino) internal {\n', '        authorized[msg.sender] = true;\n', '        casino = Casino(_casino);\n', '        casinoAuthorized = true;\n', '    }\n', '\n', '    function authorize(address _address) public onlyOwner {\n', '        authorized[_address] = true;\n', '    }\n', '\n', '    function deauthorize(address _address) public onlyOwner {\n', '        authorized[_address] = false;\n', '    }\n', '\n', '    function authorizeCasino() public onlyOwner {\n', '        casinoAuthorized = true;\n', '    }\n', '\n', '    function deauthorizeCasino() public onlyOwner {\n', '        casinoAuthorized = false;\n', '    }\n', '\n', '    function setCasino(address _casino) public onlyOwner {\n', '        casino = Casino(_casino);\n', '    }\n', '}\n', '\n', '\n', 'contract WalletController is RequiringAuthorization {\n', '    address public destination;\n', '    address public defaultSweeper = address(new DefaultSweeper(address(this)));\n', '    bool public halted = false;\n', '\n', '    mapping(address => address) public sweepers;\n', '    mapping(address => bool) public wallets;\n', '\n', '    event EthDeposit(address _from, address _to, uint _amount);\n', '    event WalletCreated(address _address);\n', '    event Sweeped(address _from, address _to, address _token, uint _amount);\n', '\n', '    modifier onlyWallet {\n', '        require(wallets[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    constructor(address _casino) public RequiringAuthorization(_casino) {\n', '        owner = msg.sender;\n', '        destination = msg.sender;\n', '    }\n', '\n', '    function setDestination(address _destination) public {\n', '        destination = _destination;\n', '    }\n', '\n', '    function createWallet() public {\n', '        address wallet = address(new UserWallet(this));\n', '        wallets[wallet] = true;\n', '        emit WalletCreated(wallet);\n', '    }\n', '\n', '    function createWallets(uint count) public {\n', '        for (uint i = 0; i < count; i++) {\n', '            createWallet();\n', '        }\n', '    }\n', '\n', '    function addSweeper(address _token, address _sweeper) public onlyOwner {\n', '        sweepers[_token] = _sweeper;\n', '    }\n', '\n', '    function halt() public onlyAuthorized {\n', '        halted = true;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        halted = false;\n', '    }\n', '\n', '    function sweeperOf(address _token) public view returns (address) {\n', '        address sweeper = sweepers[_token];\n', '        if (sweeper == 0) sweeper = defaultSweeper;\n', '        return sweeper;\n', '    }\n', '\n', '    function logEthDeposit(address _from, address _to, uint _amount) public onlyWallet {\n', '        emit EthDeposit(_from, _to, _amount);\n', '    }\n', '\n', '    function logSweep(address _from, address _to, address _token, uint _amount) public {\n', '        emit Sweeped(_from, _to, _token, _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract UserWallet {\n', '    WalletController private controller;\n', '\n', '    constructor (address _controller) public {\n', '        controller = WalletController(_controller);\n', '    }\n', '\n', '    function () public payable {\n', '        controller.logEthDeposit(msg.sender, address(this), msg.value);\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        (_from);\n', '        (_value);\n', '        (_data);\n', '    }\n', '\n', '    function sweep(address _token, uint _amount) public returns (bool) {\n', '        (_amount);\n', '        return controller.sweeperOf(_token).delegatecall(msg.data);\n', '    }\n', '}\n', '\n', '\n', 'contract AbstractSweeper {\n', '    WalletController public controller;\n', '\n', '    constructor (address _controller) public {\n', '        controller = WalletController(_controller);\n', '    }\n', '\n', '    function () public { revert(); }\n', '\n', '    function sweep(address token, uint amount) public returns (bool);\n', '\n', '    modifier canSweep() {\n', '        if (!controller.authorized(msg.sender)) revert();\n', '        if (controller.halted()) revert();\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract DefaultSweeper is AbstractSweeper {\n', '\n', '    constructor (address controller) public AbstractSweeper(controller) {}\n', '\n', '    function sweep(address _token, uint _amount) public canSweep returns (bool) {\n', '        bool success = false;\n', '        address destination = controller.destination();\n', '\n', '        if (_token != address(0)) {\n', '            Token token = Token(_token);\n', '            uint amount = _amount;\n', '            if (amount > token.balanceOf(this)) {\n', '                return false;\n', '            }\n', '\n', '            success = token.transfer(destination, amount);\n', '        } else {\n', '            uint amountInWei = _amount;\n', '            if (amountInWei > address(this).balance) {\n', '                return false;\n', '            }\n', '            success = destination.send(amountInWei);\n', '        }\n', '\n', '        if (success) {\n', '            controller.logSweep(this, destination, _token, _amount);\n', '        }\n', '        return success;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '    function balanceOf(address a) public pure returns (uint) {\n', '        (a);\n', '        return 0;\n', '    }\n', '\n', '    function transfer(address a, uint val) public pure returns (bool) {\n', '        (a);\n', '        (val);\n', '        return false;\n', '    }\n', '}\n', '\n', '\n', 'contract Casino {\n', '    mapping(address => bool) public authorized;\n', '}']