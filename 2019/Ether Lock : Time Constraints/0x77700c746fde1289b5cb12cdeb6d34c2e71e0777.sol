['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '/**\n', '  Multipliers contract: returns 111%-141% of each investment!\n', '  Automatic payouts!\n', '  No bugs, no backdoors, NO OWNER - fully automatic!\n', '  Made and checked by professionals!\n', '\n', '  1. Send any sum to smart contract address\n', '     - sum from 0.01 to 10 ETH\n', '     - min 250000 gas limit\n', '     - you are added to a queue\n', '  2. Wait a little bit\n', '  3. ...\n', '  4. PROFIT! You have got 111-141%\n', '\n', '  How is that?\n', '  1. The first investor in the queue (you will become the\n', '     first in some time) receives next investments until\n', '     it become 111-141% of his initial investment.\n', '  2. You will receive payments in several parts or all at once\n', '  3. Once you receive 111-141% of your initial investment you are\n', '     removed from the queue.\n', '  4. You can make multiple deposits\n', '  5. The balance of this contract should normally be 0 because\n', '     all the money are immediately go to payouts\n', '  6. The more deposits you make the more multiplier you get. See MULTIPLIERS var\n', '  7. If you are the last depositor (no deposits after you in 30 mins)\n', '     you get 5% of all the ether that were on the contract. Send 0 to withdraw it.\n', '     Do it BEFORE NEXT RESTART!\n', '\n', '\n', '     So the last pays to the first (or to several first ones\n', '     if the deposit big enough) and the investors paid 111-141% are removed from the queue\n', '\n', '                new investor --|               brand new investor --|\n', '                 investor5     |                 new investor       |\n', '                 investor4     |     =======>      investor5        |\n', '                 investor3     |                   investor4        |\n', '    (part. paid) investor2    <|                   investor3        |\n', '    (fully paid) investor1   <-|                   investor2   <----|  (pay until full %)\n', '\n', '\n', '  Контракт Умножитель: возвращает 111%-141% от вашего депозита!\n', '  Автоматические выплаты!\n', '  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\n', '  Создан и проверен профессионалами!\n', '\n', '  1. Пошлите любую ненулевую сумму на адрес контракта\n', '     - сумма от 0.01 до 10 ETH\n', '     - gas limit минимум 250000\n', '     - вы встанете в очередь\n', '  2. Немного подождите\n', '  3. ...\n', '  4. PROFIT! Вам пришло 111%-141% от вашего депозита.\n', '\n', '  Как это возможно?\n', '  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\n', '     новых инвесторов до тех пор, пока не получит 111%-141% от своего депозита\n', '  2. Выплаты могут приходить несколькими частями или все сразу\n', '  3. Как только вы получаете 111%-141% от вашего депозита, вы удаляетесь из очереди\n', '  4. Вы можете делать несколько депозитов сразу\n', '  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\n', '     сразу же направляются на выплаты\n', '  6. Чем больше вы сделали депозитов, тем больший процент вы получаете на очередной депозит\n', '     Смотрите переменную MULTIPLIERS в контракте\n', '  7. Если вы последний вкладчик (после вас не сделан депозит в течение 30 минут), то вы можете\n', '     забрать призовой фонд - 5% от эфира, прошедшего через контракт. Пошлите 0 на контракт\n', '     с газом не менее 350000, чтобы его получить.\n', '\n', '\n', '     Таким образом, последние платят первым, и инвесторы, достигшие выплат 111%-141% от депозита,\n', '     удаляются из очереди, уступая место остальным\n', '\n', '              новый инвестор --|            совсем новый инвестор --|\n', '                 инвестор5     |                новый инвестор      |\n', '                 инвестор4     |     =======>      инвестор5        |\n', '                 инвестор3     |                   инвестор4        |\n', ' (част. выплата) инвестор2    <|                   инвестор3        |\n', '(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 111%-141%)\n', '\n', '*/\n', '\n', 'contract Multipliers {\n', '    uint constant public TECH_PERCENT = 5;\n', '    uint constant public PROMO_PERCENT = 5;\n', '    uint constant public PRIZE_PERCENT = 5;\n', '    uint constant public MAX_INVESTMENT = 10 ether;\n', '    uint constant public MIN_INVESTMENT_FOR_PRIZE = 0.03 ether; //Increases by this value per hour since start\n', '    uint constant public MAX_IDLE_TIME = 30 minutes; //Maximum time the deposit should remain the last to receive prize\n', '    uint constant public MAX_SET_TIME_RANGE = 1 weeks; //Do not allow to set start time beyond week from the current time\n', '\n', '    //How many percent for your deposit to be multiplied\n', '    //Depends on number of deposits from specified address at this stage\n', '    //The more deposits the higher the multiplier\n', '    uint8[] MULTIPLIERS = [\n', '        111, //For first deposit made at this stage\n', '        113, //For second\n', '        117, //For third\n', '        121, //For forth\n', '        125, //For fifth\n', '        130, //For sixth\n', '        135, //For seventh\n', '        141  //For eighth and on\n', '    ];\n', '\n', '    //The deposit structure holds all the info about the deposit made\n', '    struct Deposit {\n', '        address depositor; //The depositor address\n', '        uint128 deposit;   //The deposit amount\n', '        uint128 expect;    //How much we should pay out (initially it is 111%-141% of deposit)\n', '    }\n', '\n', '    struct DepositCount {\n', '        int128 stage;\n', '        uint128 count;\n', '    }\n', '\n', '    struct LastDepositInfo {\n', '        uint128 index;\n', '        uint128 time;\n', '    }\n', '\n', '    Deposit[] private queue;  //The queue\n', '    //Address for tech expences\n', '    address private tech;\n', '    //Address for promo expences\n', '    address private promo;\n', '\n', '    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\n', '    uint public currentQueueSize = 0; //The current size of queue (may be less than queue.length)\n', '    LastDepositInfo public lastDepositInfo; //The time last deposit made at\n', '\n', '    uint public prizeAmount = 0; //Prize amount accumulated for the last depositor\n', '    uint public startTime = 0; //Next start time. 0 - inactive, <> 0 - next start time\n', '    uint public maxGasPrice = 1 ether; //Unlimited or limited\n', '    int public stage = 0; //Number of contract runs\n', '    mapping(address => DepositCount) public depositsMade; //The number of deposits of different depositors\n', '\n', '    constructor(address _tech, address _promo) public {\n', '        //Initialize array to save gas to first depositor\n', '        //Remember - actual queue length is stored in currentQueueSize!\n', '        queue.push(Deposit(address(0x1),0,1));\n', '        tech = _tech;\n', '        promo = _promo;\n', '    }\n', '\n', '    //This function receives all the deposits\n', '    //stores them and make immediate payouts\n', '    function () public payable {\n', '        //Prevent cheating with high gas prices.\n', '        require(tx.gasprice <= maxGasPrice, "Gas price is too high! Do not cheat!");\n', '        require(startTime > 0 && now >= startTime, "The race has not begun yet!");\n', '\n', '        if(msg.value > 0 && lastDepositInfo.time > 0 && now > lastDepositInfo.time + MAX_IDLE_TIME){\n', '            //This is deposit after prize is drawn, so just return the money and withdraw the prize to the winner\n', '            msg.sender.transfer(msg.value);\n', '            withdrawPrize();\n', '        }else if(msg.value > 0){\n', '            require(gasleft() >= 220000, "We require more gas!"); //We need gas to process queue\n', '            require(msg.value <= MAX_INVESTMENT, "The investment is too much!"); //Do not allow too big investments to stabilize payouts\n', '\n', '            addDeposit(msg.sender, msg.value);\n', '\n', '            //Pay to first investors in line\n', '            pay();\n', '        }else if(msg.value == 0){\n', '            withdrawPrize();\n', '        }\n', '    }\n', '\n', '    //Used to pay to current investors\n', '    //Each new transaction processes 1 - 4+ investors in the head of queue\n', '    //depending on balance and gas left\n', '    function pay() private {\n', '        //Try to send all the money on contract to the first investors in line\n', '        uint balance = address(this).balance;\n', '        uint money = 0;\n', '        if(balance > prizeAmount) //The opposite is impossible, however the check will not do any harm\n', '            money = balance - prizeAmount;\n', '\n', '        //We will do cycle on the queue\n', '        for(uint i=currentReceiverIndex; i<currentQueueSize; i++){\n', '\n', '            Deposit storage dep = queue[i]; //get the info of the first investor\n', '\n', '            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\n', '                dep.depositor.send(dep.expect); //Send money to him\n', '                money -= dep.expect;            //update money left\n', '\n', '                //this investor is fully paid, so remove him\n', '                delete queue[i];\n', '            }else{\n', '                //Here we don&#39;t have enough money so partially pay to investor\n', '                dep.depositor.send(money); //Send to him everything we have\n', '                dep.expect -= uint128(money);       //Update the expected amount\n', '                break;                     //Exit cycle\n', '            }\n', '\n', '            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\n', '                break;                     //The next investor will process the line further\n', '        }\n', '\n', '        currentReceiverIndex = i; //Update the index of the current first investor\n', '    }\n', '\n', '    function addDeposit(address depositor, uint value) private {\n', '        //Count the number of the deposit at this stage\n', '        DepositCount storage c = depositsMade[depositor];\n', '        if(c.stage != stage){\n', '            c.stage = int128(stage);\n', '            c.count = 0;\n', '        }\n', '\n', '        //If you are applying for the prize you should invest more than minimal amount\n', '        //Otherwize it doesn&#39;t count\n', '        if(value >= getCurrentPrizeMinimalDeposit())\n', '            lastDepositInfo = LastDepositInfo(uint128(currentQueueSize), uint128(now));\n', '\n', '        //Compute the multiplier percent for this depositor\n', '        uint multiplier = getDepositorMultiplier(depositor);\n', '        //Add the investor into the queue. Mark that he expects to receive 111%-141% of deposit back\n', '        push(depositor, value, value*multiplier/100);\n', '\n', '        //Increment number of deposits the depositors made this round\n', '        c.count++;\n', '\n', '        //Save money for prize and father multiplier\n', '        prizeAmount += value*(PRIZE_PERCENT)/100;\n', '\n', '        //Send small part to tech support\n', '        uint support = value*TECH_PERCENT/100;\n', '        tech.send(support);\n', '        uint adv = value*PROMO_PERCENT/100;\n', '        promo.send(adv);\n', '\n', '    }\n', '\n', '    function proceedToNewStage(int _stage) private {\n', '        //Clean queue info\n', '        //The prize amount on the balance is left the same if not withdrawn\n', '        stage = _stage;\n', '        startTime = 0;\n', '        currentQueueSize = 0; //Instead of deleting queue just reset its length (gas economy)\n', '        currentReceiverIndex = 0;\n', '        delete lastDepositInfo;\n', '    }\n', '\n', '    function withdrawPrize() private {\n', '        //You can withdraw prize only if the last deposit was more than MAX_IDLE_TIME ago\n', '        require(lastDepositInfo.time > 0 && lastDepositInfo.time <= now - MAX_IDLE_TIME, "The last depositor is not confirmed yet");\n', '        //Last depositor will receive prize only if it has not been fully paid\n', '        require(currentReceiverIndex <= lastDepositInfo.index, "The last depositor should still be in queue");\n', '\n', '        uint balance = address(this).balance;\n', '        uint prize = prizeAmount;\n', '        if(balance > prize){\n', '            //We should distribute funds to queue\n', '            pay();\n', '        }\n', '        if(balance > prize){\n', '            return; //Funds are still not distributed, so exit\n', '        }\n', '        if(prize > balance) //Impossible but better check it\n', '            prize = balance;\n', '\n', '        queue[lastDepositInfo.index].depositor.send(prize);\n', '\n', '        prizeAmount = 0;\n', '        proceedToNewStage(stage + 1);\n', '    }\n', '\n', '    //Pushes investor to the queue\n', '    function push(address depositor, uint deposit, uint expect) private {\n', '        //Add the investor into the queue\n', '        Deposit memory dep = Deposit(depositor, uint128(deposit), uint128(expect));\n', '        assert(currentQueueSize <= queue.length); //Assert queue size is not corrupted\n', '        if(queue.length == currentQueueSize)\n', '            queue.push(dep);\n', '        else\n', '            queue[currentQueueSize] = dep;\n', '\n', '        currentQueueSize++;\n', '    }\n', '\n', '    //Get the deposit info by its index\n', '    //You can get deposit index from\n', '    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\n', '        Deposit storage dep = queue[idx];\n', '        return (dep.depositor, dep.deposit, dep.expect);\n', '    }\n', '\n', '    function getCurrentPrizeMinimalDeposit() public view returns(uint) {\n', '        uint st = startTime;\n', '        if(st == 0 || now < st)\n', '            return MIN_INVESTMENT_FOR_PRIZE;\n', '        uint dep = MIN_INVESTMENT_FOR_PRIZE + ((now - st)/1 hours)*MIN_INVESTMENT_FOR_PRIZE;\n', '        if(dep > MAX_INVESTMENT)\n', '            dep = MAX_INVESTMENT;\n', '        return dep;\n', '    }\n', '\n', '    //Get the count of deposits of specific investor\n', '    function getDepositsCount(address depositor) public view returns (uint) {\n', '        uint c = 0;\n', '        for(uint i=currentReceiverIndex; i<currentQueueSize; ++i){\n', '            if(queue[i].depositor == depositor)\n', '                c++;\n', '        }\n', '        return c;\n', '    }\n', '\n', '    //Get all deposits (index, deposit, expect) of a specific investor\n', '    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\n', '        uint c = getDepositsCount(depositor);\n', '\n', '        idxs = new uint[](c);\n', '        deposits = new uint128[](c);\n', '        expects = new uint128[](c);\n', '\n', '        if(c > 0) {\n', '            uint j = 0;\n', '            for(uint i=currentReceiverIndex; i<currentQueueSize; ++i){\n', '                Deposit storage dep = queue[i];\n', '                if(dep.depositor == depositor){\n', '                    idxs[j] = i;\n', '                    deposits[j] = dep.deposit;\n', '                    expects[j] = dep.expect;\n', '                    j++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    //Get current queue size\n', '    function getQueueLength() public view returns (uint) {\n', '        return currentQueueSize - currentReceiverIndex;\n', '    }\n', '\n', '    //Get current depositors multiplier percent at this stage\n', '    function getDepositorMultiplier(address depositor) public view returns (uint) {\n', '        DepositCount storage c = depositsMade[depositor];\n', '        uint count = 0;\n', '        if(c.stage == stage)\n', '            count = c.count;\n', '        if(count < MULTIPLIERS.length)\n', '            return MULTIPLIERS[count];\n', '\n', '        return MULTIPLIERS[MULTIPLIERS.length - 1];\n', '    }\n', '\n', '    function setStartTimeAndMaxGasPrice(uint time, uint _gasprice) public {\n', '        require(startTime == 0, "You can set time only in stopped state");\n', '        require(time >= now && time <= now + MAX_SET_TIME_RANGE, "Wrong start time");\n', '        require(msg.sender == tech || msg.sender == promo, "You are not authorized to set start time");\n', '        startTime = time;\n', '        if(_gasprice > 0)\n', '            maxGasPrice = _gasprice;\n', '    }\n', '\n', '    function getCurrentCandidateForPrize() public view returns (address addr, uint prize, uint timeMade, int timeLeft){\n', '        //prevent exception, just return 0 for absent candidate\n', '        if(currentReceiverIndex <= lastDepositInfo.index && lastDepositInfo.index < currentQueueSize){\n', '            Deposit storage d = queue[lastDepositInfo.index];\n', '            addr = d.depositor;\n', '            prize = prizeAmount;\n', '            timeMade = lastDepositInfo.time;\n', '            timeLeft = int(timeMade + MAX_IDLE_TIME) - int(now);\n', '        }\n', '    }\n', '\n', '}']