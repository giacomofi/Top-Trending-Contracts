['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', '\n', '\n', '\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \n', '\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\n', '\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\n', "\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\n", '\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\n', '\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\n', "\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\n", "\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\n", '\t\t\t\t\t| |              | || |              | || |              | || |              | |\n', "\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\n", "\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \n", '\n', ' \n', '*/\n', '\n', '\n', ' ///// Version 6.3 /////\n', '\n', '//// Contract 01\n', 'contract OwnableContract {    \n', '    event onTransferOwnership(address newOwner);\n', '\taddress superOwner; \n', '\t\n', '    constructor() public { \n', '        superOwner = msg.sender;\n', '    }\n', '    modifier restricted() {\n', '        require(msg.sender == superOwner);\n', '        _;\n', '    } \n', '\t\n', '    function viewSuperOwner() public view returns (address owner) {\n', '        return superOwner;\n', '    }\n', '      \n', '    function changeOwner(address newOwner) restricted public {\n', '        require(newOwner != superOwner);       \n', '        superOwner = newOwner;     \n', '        emit onTransferOwnership(superOwner);\n', '    }\n', '}\n', '\n', '//// Contract 02\n', 'contract BlockableContract is OwnableContract {    \n', '    event onBlockHODLs(bool status);\n', '    bool public blockedContract;\n', '    \n', '    constructor() public { \n', '        blockedContract = false;  \n', '    }\n', '    \n', '    modifier contractActive() {\n', '        require(!blockedContract);\n', '        _;\n', '    } \n', '    \n', '    function doBlockContract() restricted public {\n', '        blockedContract = true;        \n', '        emit onBlockHODLs(blockedContract);\n', '    }\n', '    \n', '    function unBlockContract() restricted public {\n', '        blockedContract = false;        \n', '        emit onBlockHODLs(blockedContract);\n', '    }\n', '}\n', '\n', '//// Contract 03\n', 'contract ldoh is BlockableContract {\n', '\t\n', '\tevent onAddContractAddress(address indexed contracthodler, bool contractstatus, uint256 _maxcontribution);     \n', '\tevent onCashbackCode(address indexed hodler, address cashbackcode);\n', '    event onStoreProfileHash(address indexed hodler, string profileHashed);\n', '    event onHodlTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n', '    event onClaimTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n', '\tevent onAffiliateBonus(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n', '    event onReturnAll(uint256 returned);\t// Delete\n', '\t\n', '\t    // Variables \t\n', '    address internal AXPRtoken;\t\t\t//ABCDtoken;\t// Delete\n', '\taddress internal DefaultToken;\t\t\n', '\t\n', '\t\t// Struct Database\n', '\n', '    struct Safe {\n', '        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n', '        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n', '        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n', '        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n', '        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n', '\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n', '\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n', '\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n', '\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n', '\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n', '\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n', '\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n', '\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n', '\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n', '    }\n', '\t\n', '\t\t// Uint256\n', '\t\n', '\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage\n', '\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\n', '\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\n', "\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\n", '\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\n', '    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\n', '\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\n', '\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\n', '\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\n', '\t\n', '\tuint256 public allTimeHighPrice;\t\t\t\t\t\t// Delete\n', '    uint256 public comission;\t\t\t\t\t\t\t\t// Delete\n', '\tmapping(address => string) \tpublic profileHashed; \t\t// Delete\n', '\t\n', '\t\t// Mapping\n', '\t\n', '\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\n', '\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\n', '\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n', '\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\n', '\tmapping(address => uint256) \t\tprivate EthereumVault;    // 05 -- > Reserve Funds\t\t\t\t\t//old = _systemReserves\n', '\tmapping(uint256 => Safe) \t\t\tpublic _safes; \t\t\t\t// 06 -- > Struct safe database\t\t\t//Private\n', '\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//New\t\t\t\t\t\n', '\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//New\t\t\n', '\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//New\t\n', '\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//New\t\n', '\tmapping(address => address[]) \t\tpublic refflist;\t\t\t// 11 -- > Referral List by ID\t\t\t\t\t//New\n', '\t\n', '    \t// Double Mapping\n', '\n', '\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //New\n', '\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //New\t\n', "\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //New\n", '\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //New\n', '\t\n', '\t\n', '    address[] public _listedReserves;\t\t// Delete\n', '    \n', '\t\t//Constructor\n', '   \n', '    constructor() public {\n', '        \n', '        AXPRtoken \t\t= 0xC39E626A04C5971D770e319760D7926502975e47;  \t\n', '\t\tDefaultToken\t= 0xA15C7Ebe1f07CaF6bFF097D8a589fb8AC49Ae5B3;  \t\n', '        hodlingTime \t= 730 days;\n', '        _currentIndex \t= 500;\n', '        comission \t\t= 3;\n', '    }\n', '    \n', '\t\n', '\t\n', '////////////////////////////////// Available For Everyone //////////////////////////////////\t\n', '\n', '\n', '\t\n', '//// Function 01 - Fallback Function To Receive Donation In Eth\n', '    function () public payable {\n', '        require(msg.value > 0);       \n', '        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\n', '    }\n', '\t\n', '\t\n', '//// Function 02 - Contribute (Hodl Platform)\n', '    function HodlTokens(address tokenAddress, uint256 amount) public contractActive {\n', '        require(tokenAddress != 0x0);\n', '\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\n', '\t\t\n', '\t\tif (contractaddress[tokenAddress] == false) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t\telse {\n', '\t\t\t\n', '\t\t\n', '        ERC20Interface token = ERC20Interface(tokenAddress);       \n', '        require(token.transferFrom(msg.sender, address(this), amount));\n', '\t\t\n', '\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\n', '\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\n', '\t\t\n', '\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n', '\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\n', '\t\t\tuint256 data_cashbackbalance \t= 0; \n', '\t\t\taddress data_referrer\t\t\t= superOwner;\n', '\t\t\t\n', '\t\t\tcashbackcode[msg.sender] = superOwner;\n', '\t\t\temit onCashbackCode(msg.sender, superOwner);\n', '\t\t\t\n', '\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\n', '\t\t\t\n', '\t\t\t} else { \t\n', '\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\n', '\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\n', '\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\n', '\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\n', '\n', '\t\t\t\tif (referrer_contribution >= amount) {\n', '\t\t\n', '\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \n', '\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \n', '\t\t\t\t\t\n', '\t\t\t\t} else {\n', '\t\t\t\t\t\n', '\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \n', '\t\t\t\t\t\n', '\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \n', '\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \n', '\t\t\t\t\t\n', '\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\n', '\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\n', '\t\t\t\t\t\n', '\t\t\t\t}\n', '\t\t\t\n', '\t\t\t} \t\n', '\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n', '\t// Insert to Database  \t\t\n', '\t\n', '\t\trefflist[data_referrer].push(msg.sender);\t\n', '\t\t_userSafes[msg.sender].push(_currentIndex);\n', '\t\t_safes[_currentIndex] = \n', '\n', '\t\tSafe(\n', '\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\n', '\n', '\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\n', '\t\t\n', '\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\n', '\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\n', '        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n', '        _currentIndex++;\n', '        _countSafes++;\n', '        \n', '        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n', '    }\t\n', '\t\t\t\n', '\t\t\t\n', '}\n', '\t\t\n', '\t\n', '//// Function 03 - Claim Token That Has Been Unlocked\n', '    function ClaimTokens(address tokenAddress, uint256 id) public {\n', '        require(tokenAddress != 0x0);\n', '        require(id != 0);        \n', '        \n', '        Safe storage s = _safes[id];\n', '        require(s.user == msg.sender);  \n', '\t\t\n', '\t\tif (s.amountbalance == 0) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t\telse {\n', '\t\t\tRetireHodl(tokenAddress, id);\n', '\t\t}\n', '    }\n', '    \n', '    function RetireHodl(address tokenAddress, uint256 id) private {\n', '        Safe storage s = _safes[id];\n', '        \n', '        require(s.id != 0);\n', '        require(s.tokenAddress == tokenAddress);\n', '\n', '        uint256 eventAmount;\n', '        address eventTokenAddress = s.tokenAddress;\n', '        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n', '\t\t     \n', '        if(s.endtime < now) // Hodl Complete\n', '        {\n', '            PayToken(s.user, s.tokenAddress, s.amountbalance);\n', '            \n', '            eventAmount \t\t\t\t= s.amountbalance;\n', '\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n', '\t\t\n', '\t\ts.lastwithdraw = s.amountbalance;\n', '\t\ts.amountbalance = 0;\n', '\t\ts.lasttime \t\t\t\t\t\t= now;  \n', '\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, totalreceive), 100) ;\n', '\t\ts.percentagereceive \t\t\t= mul(mul(88, 100), 100000000000000000000) ;\n', '\t\t\n', '\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n', '\t\t\n', '        }\n', '        else \n', '        {\n', '\t\t\t\n', '\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n', '\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \n', '\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n', '\t\t                         \n', '\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n', '\t\t\t\n', '\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n', '\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n', '\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n', '\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n', '\t\t\t\n', '\t\t\t// Maximum withdraw = User Amount Balance   \n', '\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n', '\t\t\tuint256 realAmount = s.amountbalance; \n', '\t\t\t} else { realAmount = MaxAccumulation; }\n', '\t\t\t\n', '\t\t\ts.lastwithdraw = realAmount;  \t\t\t\n', '\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n', '\t\t\tUpdateUserData(tokenAddress, id, newamountbalance, realAmount);\n', '\t\t\t\n', '\t\t}\n', '        \n', '    }   \n', '\n', '    function UpdateUserData(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n', '        Safe storage s = _safes[id];\n', '        \n', '        require(s.id != 0);\n', '        require(s.tokenAddress == tokenAddress);\n', '\n', '        uint256 eventAmount;\n', '        address eventTokenAddress = s.tokenAddress;\n', '        string memory eventTokenSymbol = s.tokenSymbol;\t\t\t\n', '   \t\t\t\n', '\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n', '\t\ts.lasttime \t\t\t\t\t\t= now;  \n', '\t\t\n', '\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \n', '\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\n', '\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\n', '\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\n', '\t\t\t\n', '\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\n', '\n', '\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n', '\t\t\n', '\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n', '\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n', '\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n', '\t\t\n', '\t\t\n', '\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\n', '            eventAmount = realAmount;\n', '\t\t\t\n', '\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n', '    } \n', '\n', '    function PayToken(address user, address tokenAddress, uint256 amount) private {\n', '\t\t\n', '\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n', '\t\tLifetimePayments[msg.sender][tokenAddress] = add(LifetimePayments[user][tokenAddress], amount); \n', '        \n', '        ERC20Interface token = ERC20Interface(tokenAddress);        \n', '        require(token.balanceOf(address(this)) >= amount);\n', '        token.transfer(user, amount);\n', '    }   \t\n', '\t\n', '//// Function 04 - Get How Many Contribute ?\n', '    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n', '        return _userSafes[hodler].length;\n', '    }\n', '\t\n', '\t\n', '//// Function 05 - Get How Many Referral ?\n', '    function GetTotalReferral(address hodler) public view returns (uint256 length) {\n', '        return refflist[hodler].length;\n', '    }\n', '    \n', '\t\n', '//// Function 06 - Get complete data from each user\n', '\tfunction GetSafe(uint256 _id) public view\n', '        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n', '    {\n', '        Safe storage s = _safes[_id];\n', '        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n', '    }\n', '\t\n', '\t\n', '//// Function 07 - Get Tokens Reserved For Ethereum Vault\n', '    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n', '        return EthereumVault[tokenAddress];\n', '    }    \n', '    \n', '\t\n', "//// Function 08 - Get Ethereum Contract's Balance  \n", '    function GetContractBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    } \t\n', '\t\n', '\t\n', '//// Function 09 - Cashback Code  \n', '    function CashbackCode(address _cashbackcode) public {\n', '\t\trequire(_cashbackcode != msg.sender);\n', '\t\t\n', '\t\tif (cashbackcode[msg.sender] == 0) {\n', '\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n', '\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n', '\t\t}\t\t             \n', '    }  \n', '\t\n', '\t\n', '//// Function 10 - Withdraw Affiliate Bonus\n', '    function WithdrawAffiliate(address user, address tokenAddress) public {  \n', '\t\trequire(tokenAddress != 0x0);\n', '\t\trequire(user == msg.sender);\n', '\t\t\n', '\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n', '\t\t\n', '\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n', '\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n', '\t\t\n', '\t\tuint256 eventAmount\t\t\t\t= amount;\n', '        address eventTokenAddress \t\t= tokenAddress;\n', '        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n', '\t\t\n', '\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n', '        \n', '        ERC20Interface token = ERC20Interface(tokenAddress);        \n', '        require(token.balanceOf(address(this)) >= amount);\n', '        token.transfer(user, amount);\n', '\t\t\n', '\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n', '    } \t\t\n', '\t\n', '\t\n', "//// Function 11 - Get User's Any Token Balance\n", '    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n', '        require(tokenAddress != 0x0);\n', '        \n', '        for(uint256 i = 1; i < _currentIndex; i++) {            \n', '            Safe storage s = _safes[i];\n', '            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n', '                balance += s.amount;\n', '        }\n', '        return balance;\n', '    }\n', '\t\n', '\t\n', '\t\n', '\n', '////////////////////////////////// restricted //////////////////////////////////\n', '\n', '//// 01 Add Contract Address\t\n', '    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\n', '        contractaddress[tokenAddress] \t= contractstatus;\n', '\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n', '\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\n', '\t\t\n', '\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n', '\t\t\tcontractaddress[tokenAddress] \t= true;\n', '\t\t}\t\n', '\t\t\n', '\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution);\n', '    }\n', '\t\n', '\t\n', '//// 02 - Add Maximum Contribution\t\n', '    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n', '        maxcontribution[tokenAddress] = _maxcontribution;\t\n', '    }\n', '\t\n', '\t\n', '//// 03 - Add Retire Hodl\t\n', '    function AddRetireHodl(address tokenAddress, uint256 id) public restricted {\n', '        require(tokenAddress != 0x0);\n', '        require(id != 0);      \n', '        RetireHodl(tokenAddress, id);\n', '    }\n', '\t\n', '    \n', '//// 04 Change Hodling Time   \n', '    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\n', '        require(newHodlingDays >= 180);      \n', '        hodlingTime = newHodlingDays * 1 days;\n', '    }   \n', '\t\n', '//// 05 - Change Speed Distribution \n', '    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\n', '        require(newSpeed <= 12);   \n', '\t\tcomission = newSpeed;\t\t\n', '\t\tpercent = newSpeed;\n', '    }\n', '\t\n', '\t\n', '//// 06 - Withdraw Ethereum Received Through Fallback Function   \n', '    function WithdrawEth(uint256 amount) restricted public {\n', '        require(amount > 0); \n', '        require(address(this).balance >= amount); \n', '        \n', '        msg.sender.transfer(amount);\n', '    }\n', '\t\n', '    \n', '//// 07 Withdraw Token Fees   \n', '    function WithdrawTokenFees(address tokenAddress) restricted public {\n', '        require(EthereumVault[tokenAddress] > 0);\n', '        \n', '        uint256 amount = EthereumVault[tokenAddress];\n', '\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n', '        EthereumVault[tokenAddress] = 0;\n', '        \n', '        ERC20Interface token = ERC20Interface(tokenAddress);\n', '        \n', '        require(token.balanceOf(address(this)) >= amount);\n', '        token.transfer(msg.sender, amount);\n', '    }\n', '\t\n', '    \n', '//// 08 - Return All Tokens To Their Respective Addresses    \n', '    function ReturnAllTokens(bool onlyAXPR) restricted public\n', '    {\n', '        uint256 returned;\n', '\n', '        for(uint256 i = 1; i < _currentIndex; i++) {            \n', '            Safe storage s = _safes[i];\n', '            if (s.id != 0) {\n', '                if (\n', '                    (onlyAXPR && s.tokenAddress == AXPRtoken) ||\n', '                    !onlyAXPR\n', '                    )\n', '                {\n', '                    PayToken(s.user, s.tokenAddress, s.amountbalance);\n', '\t\t\t\t\t\n', '\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n', '\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n', '\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n', '\t\t\t\t\t\n', '\t\t\t\t\ts.percentagereceive \t\t\t= sub(add(totalreceive, s.cashbackbalance), 16); \n', '\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, s.percentagereceive ), 100);\t\t\n', '\n', '\t\t\t\t\t_totalSaved[s.tokenAddress] \t= 0;\t\t\t\t\t\n', '\t\t\t\t\t \n', '                    _countSafes--;\n', '                    returned++;\n', '                }\n', '            }\n', '        }\n', '\t\t\n', '        emit onReturnAll(returned);\n', '    }   \n', '\n', '\n', '    // SAFE MATH FUNCTIONS //\n', '\t\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b; \n', '\t\trequire(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\trequire(b > 0); \n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\trequire(b <= a);\n', '\t\tuint256 c = a - b;\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a);\n', '\t\treturn c;\n', '\t}\n', '    \n', '}\n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public decimals;\n', '    \n', '    function symbol() public view returns (string);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']