['pragma solidity ^0.5.2;\n', 'contract ERC20 {\n', '    function totalSupply() public  returns (uint);\n', '    function balanceOf(address tokenOwner) public view  returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public  returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract future1ex\n', ' {\n', '    address public adminaddr; \n', '    address public useraddr; \n', '    mapping (address => mapping(address => uint256)) public dep_token;\n', '    mapping (address => uint256) public dep_ETH;\n', '\n', ' \n', '    constructor() public\n', '    {\n', '         adminaddr = msg.sender; \n', '    }\n', '    \n', '    function safeAdd(uint crtbal, uint depbal) public pure returns (uint) \n', '    {\n', '        uint totalbal = crtbal + depbal;\n', '        return totalbal;\n', '    }\n', '    \n', '    function safeSub(uint crtbal, uint depbal) public pure returns (uint) \n', '    {\n', '        uint totalbal = crtbal - depbal;\n', '        return totalbal;\n', '    }\n', '        \n', '    function balanceOf(address token,address user) public view returns(uint256)            // show bal of perticular token in user add\n', '    {\n', '        return ERC20(token).balanceOf(user);\n', '    }\n', '    \n', '    function transfer(address token, uint256 tokens)public payable                         // deposit perticular token balance to contract address (site address), can depoit multiple token   \n', '    {\n', '        ERC20(token).transferFrom(msg.sender, address(this), tokens);\n', '        dep_token[msg.sender][token] = safeAdd(dep_token[msg.sender][token] , tokens);\n', '        \n', '    }\n', '    \n', '     function admin_token_withdraw(address token, address to, uint256 tokens)public payable  // withdraw perticular token balance from contract to user    \n', '    {\n', '        if(adminaddr==msg.sender)\n', '        {                                                              // here only admin can withdraw token                    \n', '            if(dep_token[to][token]>=tokens) \n', '            {\n', '                dep_token[to][token] = safeSub(dep_token[to][token] , tokens) ;   \n', '                ERC20(token).transfer(to, tokens);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function tok_bal_contract(address token) public view returns(uint256)                       // show balance of contract address\n', '    {\n', '        return ERC20(token).balanceOf(address(this));\n', '    }\n', '    \n', ' \n', '    function depositETH() payable external                                                      // this function deposit eth in contract address\n', ' \n', '    { \n', '        dep_ETH[msg.sender] = safeAdd(dep_ETH[msg.sender] , msg.value);\n', '    }\n', '    \n', '    function admin_withdrawETH(address payable to, uint256 value) public payable returns (bool)  // this will withdraw eth from contract  to address(to)\n', '    {\n', '        \n', '        if(adminaddr==msg.sender)\n', '        {                                                               // only admin can withdraw ETH from user\n', '            if(dep_ETH[msg.sender]>=value) \n', '             {\n', '                 dep_ETH[to]= safeSub(dep_ETH[to] , value);    \n', '                 to.transfer(value);\n', '                 return true;\n', '             }\n', '         }\n', '    }\n', '}\n', '    \n', '\n', '//0xef2d4d6fa3dd517abb4f713aa64834a898f6dcaa']