['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity ^0.4.22;\n', '\n', 'contract ieoservices {\n', '\n', '    string public name = "ieo services";\n', '    string public symbol = "ieos";\n', '    uint256 public decimals = 18;\n', '    address public adminWallet;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 1000000;\n', '    bool public stopped = false;\n', '    uint public constant TOKEN_SUPPLY_TOTAL = 1000000000000000000000000;\n', '    uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL;\n', '    address owner = 0x0;\n', '\n', '    mapping (address => bool) public LockWallets;\n', '\n', '    function lockWallet(address _wallet) public isOwner{\n', '        LockWallets[_wallet]=true;\n', '    }\n', '\n', '    function unlockWallet(address _wallet) public isOwner{\n', '        LockWallets[_wallet]=false;\n', '    }\n', '\n', '    function containsLock(address _wallet) public view returns (bool){\n', '        return LockWallets[_wallet];\n', '    }\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        adminWallet = owner;\n', '        totalSupply = valueFounder;\n', '        balanceOf[owner] = valueFounder;\n', '        emit Transfer(0x0, owner, valueFounder);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        if (containsLock(msg.sender) == true) {\n', '            revert("Wallet Locked");\n', '        }\n', '\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '\n', '        if (containsLock(_from) == true) {\n', '            revert("Wallet Locked");\n', '        }\n', '\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) public isOwner {\n', '        name = _name;\n', '    }\n', '\n', '    function setSymbol(string _symbol) public isOwner {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.22;\n', '\n', 'contract ieoservices {\n', '\n', '    string public name = "ieo services";\n', '    string public symbol = "ieos";\n', '    uint256 public decimals = 18;\n', '    address public adminWallet;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 1000000;\n', '    bool public stopped = false;\n', '    uint public constant TOKEN_SUPPLY_TOTAL = 1000000000000000000000000;\n', '    uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL;\n', '    address owner = 0x0;\n', '\n', '    mapping (address => bool) public LockWallets;\n', '\n', '    function lockWallet(address _wallet) public isOwner{\n', '        LockWallets[_wallet]=true;\n', '    }\n', '\n', '    function unlockWallet(address _wallet) public isOwner{\n', '        LockWallets[_wallet]=false;\n', '    }\n', '\n', '    function containsLock(address _wallet) public view returns (bool){\n', '        return LockWallets[_wallet];\n', '    }\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        adminWallet = owner;\n', '        totalSupply = valueFounder;\n', '        balanceOf[owner] = valueFounder;\n', '        emit Transfer(0x0, owner, valueFounder);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        if (containsLock(msg.sender) == true) {\n', '            revert("Wallet Locked");\n', '        }\n', '\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '\n', '        if (containsLock(_from) == true) {\n', '            revert("Wallet Locked");\n', '        }\n', '\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    function setName(string _name) public isOwner {\n', '        name = _name;\n', '    }\n', '\n', '    function setSymbol(string _symbol) public isOwner {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[0x0] += _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
