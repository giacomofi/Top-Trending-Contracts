['pragma solidity ^0.4.24;\n', '\n', '    contract DAO {\n', '        function balanceOf(address addr) public returns (uint);\n', '    }\n', '    \n', '    interface RegisterInterface {\n', '        function register(string);\n', '    }\n', '    \n', '// auth\n', 'contract Auth {\n', '    address      public  owner;\n', '    constructor () public {\n', '         owner = msg.sender;\n', '    }\n', '    \n', '    modifier auth {\n', '        require(isAuthorized(msg.sender) == true);\n', '        _;\n', '    }\n', '    \n', '    function isAuthorized(address src) internal view returns (bool) {\n', '        if(src == owner){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'contract TokenTimelock is Auth{\n', '    \n', '    constructor() public {\n', '        benificiary = msg.sender;\n', '    }\n', '    \n', '    uint constant public days_of_month = 30;\n', '    \n', '    uint[] public dateArray;\n', '    uint public release_percent = 0;\n', '    \n', '    mapping (uint => bool) public release_map;\n', '    uint256 public totalFutureRelease = 0;\n', '    \n', '    // cosToken address, \n', '    address constant public contract_addr = 0x589891a198195061cb8ad1a75357a3b7dbadd7bc;\n', '    address public benificiary;\n', '    uint     public  startTime; \n', '    bool public lockStart = false;\n', '    \n', '    // set total cos to lock\n', '    function set_total(uint256 total) auth public {\n', '        require(lockStart == false);\n', '        totalFutureRelease = total;\n', '    }\n', '    \n', '    // set month to release\n', '    function set_lock_info(int startMonth,int periods,int percent,int gap) auth public {\n', '        require(lockStart == false);\n', '        require(startMonth > 0);\n', '        require(periods > 0);\n', '        require(percent > 0);\n', '        require(gap > 0);\n', '        require(periods * percent == 100);\n', '        release_percent = uint(percent);\n', '        uint tmp = uint(startMonth);\n', '        delete dateArray;\n', '        for (int i = 0; i < periods; i++) {\n', '             dateArray.push(tmp * days_of_month);\n', '             tmp += uint(gap);\n', '        }\n', '    }\n', '\n', '    // when transfer certain balance to this contract address, we can call lock\n', '    function lock(int offsetMinutes) auth public returns(bool) {\n', '        require(lockStart == false);\n', '        require(offsetMinutes >= 0);\n', '        for(uint i = 0; i < dateArray.length; i++) {\n', '            require(dateArray[i] != 0);\n', '        }\n', '        require(release_percent != 0);\n', '        require(totalFutureRelease != 0);\n', '        \n', '        DAO cosTokenApi = DAO(contract_addr);\n', '        uint256 balance = cosTokenApi.balanceOf(address(this));\n', '        require(balance == totalFutureRelease);\n', '        \n', '        startTime = block.timestamp + uint(offsetMinutes) * 1 minutes;\n', '        lockStart = true;\n', '    }\n', '    \n', '    function set_benificiary(address b) auth public {\n', '        benificiary = b;\n', '    }\n', '    \n', '    function release_specific(uint i) private {\n', '        if (release_map[i] == true) {\n', '            emit mapCheck(true,i);\n', '            return;\n', '        }\n', '        emit mapCheck(false,i);\n', '        \n', '        DAO cosTokenApi = DAO(contract_addr);\n', '        uint256 balance = cosTokenApi.balanceOf(address(this));\n', '        uint256 eachRelease = 0;\n', '        eachRelease = (totalFutureRelease / 100) * release_percent;\n', '        \n', '        bool ok = balance >= eachRelease; \n', '        emit balanceCheck(ok,balance);\n', '        require(balance >= eachRelease);\n', '  \n', '        bool success = contract_addr.call(bytes4(keccak256("transfer(address,uint256)")),benificiary,eachRelease);\n', '        emit tokenTransfer(success);\n', '        require(success);\n', '        release_map[i] = true;\n', '    }\n', '    \n', '    event mapCheck(bool ok,uint window);\n', '    event balanceCheck(bool ok,uint256 balance);\n', '    event tokenTransfer(bool success);\n', '\n', '    function release() auth public {\n', '        require(lockStart == true);\n', '        require(release_map[dateArray[dateArray.length-1]] == false);\n', '        uint theDay = dayFor();\n', '        \n', '        for (uint i=0; i<dateArray.length;i++) {\n', '            if(theDay > dateArray[i]) {\n', '                release_specific(dateArray[i]);\n', '            }\n', '        }\n', '    }\n', '    \n', '        // days after lock\n', '    function dayFor() view public returns (uint) {\n', '        uint timestamp = block.timestamp;\n', '        return timestamp < startTime ? 0 : (timestamp - startTime) / 1 days + 1;\n', '    }\n', '    \n', '    function regist(string key) auth public {\n', '        RegisterInterface(contract_addr).register(key);\n', '    }\n', '}']