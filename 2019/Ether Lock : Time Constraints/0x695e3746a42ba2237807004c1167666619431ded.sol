['pragma solidity 0.4.18;\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/KyberReserveInterface.sol\n', '\n', '/// @title Kyber Reserve contract\n', 'interface KyberReserveInterface {\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool);\n', '\n', '    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', '/// @title Kyber constants contract\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/Utils2.sol\n', '\n', 'contract Utils2 is Utils {\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n', '\n', '        if (decimals[token] == 0) {\n', '            setDecimals(token);\n', '        }\n', '\n', '        return decimals[token];\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n', '        internal pure returns(uint)\n', '    {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(destAmount <= MAX_QTY);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @author Ilan Doron\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/dutchX/KyberDutchXReserve.sol\n', '\n', 'interface WETH9 {\n', '    function approve(address spender, uint amount) public returns(bool);\n', '    function withdraw(uint amount) public;\n', '    function deposit() public payable;\n', '}\n', '\n', '\n', 'interface DutchXExchange {\n', '    // Two functions below are in fact: mapping (address => mapping (address => uint)) public sellVolumesCurrent;\n', '    // Token => Token => amount\n', '    function buyVolumes(address sellToken, address buyToken) public view returns (uint);\n', '    function sellVolumesCurrent(address sellToken, address buyToken) public view returns (uint);\n', '    function deposit(address tokenAddress,uint amount) public returns(uint);\n', '    function postBuyOrder(address sellToken,address buyToken,uint auctionIndex,uint amount) public returns (uint);\n', '\n', '    function claimBuyerFunds(address sellToken, address buyToken, address user, uint auctionIndex) public\n', '        returns(uint returned, uint frtsIssued);\n', '\n', '    function withdraw(address tokenAddress,uint amount) public returns (uint);\n', '    function getAuctionIndex(address sellToken, address buyToken) public view returns(uint index);\n', '    function getFeeRatio(address user) public view returns (uint num, uint den); // feeRatio < 10^4\n', '\n', '    function getCurrentAuctionPrice(address sellToken, address buyToken, uint auctionIndex) public view\n', '        returns (uint num, uint den);\n', '}\n', '\n', '\n', 'contract KyberDutchXReserve is KyberReserveInterface, Withdrawable, Utils2 {\n', '\n', '    uint public constant BPS = 10000;\n', '    uint public constant DEFAULT_KYBER_FEE_BPS = 25;\n', '    uint public feeBps = DEFAULT_KYBER_FEE_BPS;\n', '    uint public dutchXFeeNum;\n', '    uint public dutchXFeeDen;\n', '\n', '    DutchXExchange public dutchX;\n', '    address public kyberNetwork;\n', '    WETH9 public weth;\n', '\n', '    mapping(address => bool) listedTokens;\n', '\n', '    bool public tradeEnabled = true;\n', '\n', '    /**\n', '        Constructor\n', '    */\n', '    function KyberDutchXReserve(\n', '        DutchXExchange _dutchX,\n', '        address _admin,\n', '        address _kyberNetwork,\n', '        WETH9 _weth\n', '    )\n', '        public\n', '    {\n', '        require(address(_dutchX) != 0);\n', '        require(_admin != 0);\n', '        require(_kyberNetwork != 0);\n', '        require(_weth != WETH9(0));\n', '\n', '        dutchX = _dutchX;\n', '        admin = _admin;\n', '        kyberNetwork = _kyberNetwork;\n', '        weth = _weth;\n', '\n', '        weth.approve(dutchX, 2 ** 255);\n', '        setDecimals(ETH_TOKEN_ADDRESS);\n', '        listedTokens[ETH_TOKEN_ADDRESS] = true;\n', '    }\n', '\n', '    function() public payable {\n', '        // anyone can deposit ether\n', '    }\n', '\n', '    function setDutchXFees() public {\n', '        (dutchXFeeNum, dutchXFeeDen) = dutchX.getFeeRatio(this);\n', '    }\n', '\n', '    struct AuctionData {\n', '        uint index;\n', '        ERC20 srcToken;\n', '        ERC20 dstToken;\n', '        uint num;\n', '        uint den;\n', '    }\n', '\n', '    /**\n', '        Returns rate = dest quantity / source quantity.\n', '    */\n', '    function getConversionRate(\n', '        ERC20 src,\n', '        ERC20 dest,\n', '        uint srcQty,\n', '        uint blockNumber\n', '    )\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        blockNumber;\n', '        if (!tradeEnabled) return 0;\n', '        if (!listedTokens[src] || !listedTokens[dest]) return 0;\n', '\n', '        AuctionData memory auctionData;\n', '        auctionData.srcToken = src == ETH_TOKEN_ADDRESS ? ERC20(weth) : src;\n', '        auctionData.dstToken = dest == ETH_TOKEN_ADDRESS ? ERC20(weth) : dest;\n', '        auctionData.index = dutchX.getAuctionIndex(auctionData.dstToken, auctionData.srcToken);\n', '        if (auctionData.index == 0) return 0;\n', '\n', '        (auctionData.num, auctionData.den) = dutchX.getCurrentAuctionPrice(\n', '                auctionData.dstToken,\n', '                auctionData.srcToken,\n', '                auctionData.index\n', '            );\n', '\n', '        if (!sufficientLiquidity(auctionData.srcToken, srcQty, auctionData.dstToken,\n', '            auctionData.num, auctionData.den)) {\n', '            return 0;\n', '        }\n', '\n', '        uint actualSrcQty = (src == ETH_TOKEN_ADDRESS) ? srcQty * (BPS - feeBps) / BPS : srcQty;\n', '        require(actualSrcQty * auctionData.den > actualSrcQty);\n', '        uint convertedQty = (actualSrcQty * auctionData.den) / auctionData.num;\n', '        convertedQty = (src == ETH_TOKEN_ADDRESS) ? convertedQty : convertedQty * (BPS - feeBps) / BPS;\n', '\n', '        return calcRateFromQty(\n', '            actualSrcQty, /* srcAmount */\n', '            convertedQty, /* destAmount */\n', '            getDecimals(src), /* srcDecimals */\n', '            getDecimals(dest) /* dstDecimals */\n', '        );\n', '    }\n', '\n', '    event TradeExecute(\n', '        address indexed sender,\n', '        address src,\n', '        uint srcAmount,\n', '        address destToken,\n', '        uint destAmount,\n', '        address destAddress,\n', '        uint auctionIndex\n', '    );\n', '\n', '    function trade(\n', '        ERC20 srcToken,\n', '        uint srcAmount,\n', '        ERC20 destToken,\n', '        address destAddress,\n', '        uint conversionRate,\n', '        bool validate\n', '    )\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {\n', '        validate;\n', '\n', '        require(tradeEnabled);\n', '        require(msg.sender == kyberNetwork);\n', '\n', '        AuctionData memory auctionData;\n', '        auctionData.srcToken = srcToken == ETH_TOKEN_ADDRESS ? ERC20(weth) : srcToken;\n', '        auctionData.dstToken = destToken == ETH_TOKEN_ADDRESS ? ERC20(weth) : destToken;\n', '        auctionData.index = dutchX.getAuctionIndex(auctionData.dstToken, auctionData.srcToken);\n', '        if (auctionData.index == 0) revert();\n', '\n', '        uint actualSrcQty;\n', '\n', '        if (srcToken == ETH_TOKEN_ADDRESS){\n', '            require(srcAmount == msg.value);\n', '            actualSrcQty = srcAmount * (BPS - feeBps) / BPS;\n', '            weth.deposit.value(actualSrcQty)();\n', '        } else {\n', '            require(msg.value == 0);\n', '            require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\n', '            actualSrcQty = srcAmount;\n', '        }\n', '\n', '        dutchX.deposit(auctionData.srcToken, actualSrcQty);\n', '        dutchX.postBuyOrder(auctionData.dstToken, auctionData.srcToken, auctionData.index, actualSrcQty);\n', '\n', '        uint destAmount;\n', '        uint frtsIssued;\n', '        (destAmount, frtsIssued) = dutchX.claimBuyerFunds(auctionData.dstToken, auctionData.srcToken, this,\n', '            auctionData.index);\n', '        dutchX.withdraw(auctionData.dstToken, destAmount);\n', '\n', '        if (destToken == ETH_TOKEN_ADDRESS) {\n', '            weth.withdraw(destAmount);\n', '            destAmount = destAmount * (BPS - feeBps) / BPS;\n', '            destAddress.transfer(destAmount);\n', '        } else {\n', '            require(auctionData.dstToken.transfer(destAddress, destAmount));\n', '        }\n', '\n', '        require(conversionRate <= calcRateFromQty(\n', '            actualSrcQty, /* srcAmount */\n', '            destAmount, /* destAmount */\n', '            getDecimals(srcToken), /* srcDecimals */\n', '            getDecimals(destToken) /* dstDecimals */\n', '        ));\n', '        \n', '        TradeExecute(\n', '            msg.sender, /* sender */\n', '            srcToken, /* src */\n', '            srcAmount, /* srcAmount */\n', '            destToken, /* destToken */\n', '            destAmount, /* destAmount */\n', '            destAddress, /* destAddress */\n', '            auctionData.index\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    event FeeUpdated(\n', '        uint bps\n', '    );\n', '\n', '    function setFee(uint bps) public onlyAdmin {\n', '        require(bps <= BPS);\n', '        feeBps = bps;\n', '        FeeUpdated(bps);\n', '    }\n', '\n', '    event TokenListed(\n', '        ERC20 token\n', '    );\n', '\n', '    function listToken(ERC20 token)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(address(token) != 0);\n', '\n', '        listedTokens[token] = true;\n', '\n', '        setDecimals(token);\n', '\n', '        require(token.approve(dutchX, 2**255));\n', '\n', '        TokenListed(token);\n', '    }\n', '\n', '    event TokenDelisted(ERC20 token);\n', '\n', '    function delistToken(ERC20 token)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(listedTokens[token] == true);\n', '        listedTokens[token] == false;\n', '\n', '        TokenDelisted(token);\n', '    }\n', '\n', '    event TradeEnabled(\n', '        bool enable\n', '    );\n', '\n', '    function enableTrade()\n', '        public\n', '        onlyAdmin\n', '        returns(bool)\n', '    {\n', '        tradeEnabled = true;\n', '        TradeEnabled(true);\n', '        return true;\n', '    }\n', '\n', '    function disableTrade()\n', '        public\n', '        onlyAlerter\n', '        returns(bool)\n', '    {\n', '        tradeEnabled = false;\n', '        TradeEnabled(false);\n', '        return true;\n', '    }\n', '\n', '    event KyberNetworkSet(\n', '        address kyberNetwork\n', '    );\n', '\n', '    function setKyberNetwork(\n', '        address _kyberNetwork\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_kyberNetwork != 0);\n', '        kyberNetwork = _kyberNetwork;\n', '        KyberNetworkSet(kyberNetwork);\n', '    }\n', '\n', '    event DutchXSet(\n', '        DutchXExchange dutchX\n', '    );\n', '\n', '    function setDutchX(\n', '        DutchXExchange _dutchX\n', '    )\n', '        public\n', '        onlyAdmin\n', '    {\n', '        require(_dutchX != DutchXExchange(0));\n', '        dutchX = _dutchX;\n', '        DutchXSet(dutchX);\n', '    }\n', '\n', '    event Execution(bool success, address caller, address destination, uint value, bytes data);\n', '\n', '    function executeTransaction(address destination, uint value, bytes data)\n', '        public\n', '        onlyOperator\n', '    {\n', '        if (destination.call.value(value)(data)) {\n', '            Execution(true, msg.sender, destination, value, data);\n', '        } else {\n', '            Execution(false, msg.sender, destination, value, data);\n', '        }\n', '    }\n', '\n', '    function sufficientLiquidity(ERC20 src, uint srcQty, ERC20 dest, uint num, uint den) internal view returns(bool) {\n', '\n', '        uint buyVolume = dutchX.buyVolumes(dest, src);\n', '        uint sellVolume = dutchX.sellVolumesCurrent(dest, src);\n', '\n', '        // 10^30 * 10^37 = 10^67\n', '        require(sellVolume * num > sellVolume);\n', '        uint outstandingVolume = (sellVolume * num) / den - buyVolume;\n', '\n', '        if (outstandingVolume > srcQty) return true;\n', '\n', '        return false;\n', '    }\n', '}']