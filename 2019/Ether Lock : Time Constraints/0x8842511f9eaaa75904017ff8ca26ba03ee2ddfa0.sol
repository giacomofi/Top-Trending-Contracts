['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    } \n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    } \n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    } \n', '}\n', '\n', 'library SafeMath8{\n', '     function add(uint8 a, uint8 b) internal pure returns (uint8) {\n', '        uint8 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n', '        require(b <= a);\n', '        uint8 c = a - b;\n', '        return c;\n', '    }\n', '   \n', ' }\n', '\n', '\n', 'library SafeMath16{\n', '     function add(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        uint16 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        require(b <= a);\n', '        uint16 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint16 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n', '        require(b > 0);\n', '        uint16 c = a / b;\n', '        return c;\n', '    }\n', ' }\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner); \n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface controller{\n', '    function mintToken(address target, uint mintedAmount) external;\n', '    function burnToken(uint8 boxIndex, address target, uint mintedAmount) external;\n', '    function control(uint8 boxIndex, uint8 indexMaterial, address target, uint256 amount) external;\n', '    function setMaterialRate(uint indexMaterial, uint8 rate) external;                                  \n', '    function setAddMaterial(uint8 rate) external;                                                       \n', '    function setAddMaterialAll(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) external; \n', '    function setAddMaterialEight(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) external; \n', '    function balanceOf(address tokenOwner) external view returns (uint);                                \n', '    function set_material_address(address _material_address) external;\n', '    function set_pet_address(address _pet_address) external;\n', '}\n', '\n', '\n', 'contract Factroy is Owned{\n', '    \n', '    using SafeMath for uint;\n', '    using SafeMath16 for uint16;\n', '    \n', '    address[] public newContracts;\n', '    address personcall_address;\n', '   \n', '    uint16 public box_contract_amount = 0;\n', '    \n', '     \n', '    function createConstruct(string _name, uint8 _level) public onlyOwner{\n', '        address newContract = new createTreasure(_name, _level);\n', '        newContracts.push(newContract);\n', '        box_contract_amount = box_contract_amount.add(1);\n', '    } \n', '    \n', '    \n', '    function controlMintokenManager(uint8 _index,address target, uint mintedAmount) public{       \n', '         require(msg.sender == owner);\n', '         controller mintokener = controller(newContracts[_index]);\n', '         mintokener.mintToken(target, mintedAmount);\n', '    } \n', '    \n', '\n', '     \n', '    function controlMintoken(uint8 _index,address target, uint mintedAmount) public{        \n', '         require(msg.sender == personcall_address);\n', '         controller mintokener = controller(newContracts[_index]);\n', '         mintokener.mintToken(target, mintedAmount);\n', '    } \n', '    \n', '    function controlBurntoken(uint8 _index,address target, uint mintedAmount) public{       \n', '         require(msg.sender == personcall_address);\n', '         controller burntokener = controller(newContracts[_index]);\n', '         uint8 boxIndex;\n', '         if(_index<5){\n', '             boxIndex = 0;\n', '         }else if(_index<10){\n', '             boxIndex = 1;\n', '         }else if(_index<15){\n', '             boxIndex = 2;\n', '         }else if(_index<20){\n', '             boxIndex = 3;\n', '         }else if(_index<25){\n', '             boxIndex = 4;\n', '         }else{\n', '             boxIndex = 5;\n', '         }\n', '\n', '         burntokener.burnToken(boxIndex, target, mintedAmount);\n', '         \n', '    }\n', ' \n', '    \n', '    function controlMaterialRate(uint8 _index, uint8 materialIndex, uint8 rate ) public onlyOwner{   \n', '         controller setMaterailTokener = controller(newContracts[_index]);\n', '         setMaterailTokener.setMaterialRate(materialIndex,rate);\n', '         \n', '    }\n', '    \n', '    function controlAddMaterial(uint8 _index,uint8 rate) public onlyOwner{        \n', '        controller setAddMaterialler = controller(newContracts[_index]);\n', '        setAddMaterialler.setAddMaterial(rate);\n', '    }  \n', '    \n', '    function controlAddMaterialAll(uint8 _index,uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) public onlyOwner{  \n', '        controller setAddMaterialler = controller(newContracts[_index]);\n', '        setAddMaterialler.setAddMaterialAll(rate1,rate2,rate3,rate4,rate5,rate6,rate7,rate8,rate9,rate10);\n', '    }\n', '    \n', '    function controlAddMaterialEight(uint8 _index,uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) public onlyOwner{  \n', '        controller setAddMaterialler = controller(newContracts[_index]);\n', '        setAddMaterialler.setAddMaterialEight(rate1,rate2,rate3,rate4,rate5,rate6,rate7,rate8);\n', '    } \n', '\n', '    function controlSearchBoxCount(uint8 _index,address target) public view returns (uint) {   \n', '         controller setSearchMaterialCnt = controller(newContracts[_index]);\n', '         return setSearchMaterialCnt.balanceOf(target);\n', '    }\n', '    \n', '    function controlSet_material_address(address _new_material_address) public onlyOwner{\n', '        for(uint8 i=0;i<25;i++){\n', '            controller setter = controller(newContracts[i]);\n', '            setter.set_material_address(_new_material_address);\n', '        }\n', '    }\n', '    \n', '    function controlSet_pet_address(address _new_pet_address) public onlyOwner{\n', '        for(uint8 i=25;i<30;i++){\n', '            controller setter = controller(newContracts[i]);\n', '            setter.set_pet_address(_new_pet_address);\n', '        }\n', '    }\n', '    \n', '    function set_personcall(address _new_personcall) public onlyOwner {\n', '        personcall_address = _new_personcall;\n', '    }\n', '        \n', '\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract createTreasure is ERC20Interface, Owned {\n', '\n', '    event whatOfHerb(address indexed target, uint8 boxIndex, uint8 materialIndex, uint materialAmount);\n', '    \n', '    \n', '    using SafeMath for uint;\n', '    using SafeMath8 for uint8;\n', '    using SafeMath16 for uint16;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint8 public level;\n', '    uint _totalSupply;\n', '    \n', '    address  material_address=0x65844f2e98495b6c8780f689c5d13bb7f4975d65;\n', '    address  pet_address;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    \n', '    uint8[] public  materialRate;  \n', '    uint[] public materialCount;      \n', '    \n', '\n', '\n', '    \n', '    \n', '    \n', '    constructor(string _symbol, uint8 _level) public {\n', '    \n', '        symbol = _symbol;\n', '        level = _level;\n', '        decimals = 0;\n', '        _totalSupply = 0;\n', '        balances[owner] = _totalSupply;\n', '        \n', '        emit Transfer(address(0), owner, _totalSupply);\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function setAddMaterialAll(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8,uint8 rate9,uint8 rate10) public onlyOwner{\n', '      materialRate.push(rate1);\n', '      materialRate.push(rate2);\n', '      materialRate.push(rate3);\n', '      materialRate.push(rate4);\n', '      materialRate.push(rate5);\n', '      materialRate.push(rate6);\n', '      materialRate.push(rate7);\n', '      materialRate.push(rate8);\n', '      materialRate.push(rate9);\n', '      materialRate.push(rate10);\n', '      \n', '      for(uint8 o=0;o<10;o++){\n', '          materialCount.push(0);\n', '      }\n', '\n', '    }\n', '    \n', '     \n', '    \n', '    \n', '    function setAddMaterialEight(uint8 rate1,uint8 rate2,uint8 rate3,uint8 rate4,uint8 rate5,uint8 rate6,uint8 rate7,uint8 rate8) public onlyOwner{\n', '      materialRate.push(rate1);\n', '      materialRate.push(rate2);\n', '      materialRate.push(rate3);\n', '      materialRate.push(rate4);\n', '      materialRate.push(rate5);\n', '      materialRate.push(rate6);\n', '      materialRate.push(rate7);\n', '      materialRate.push(rate8);\n', '   \n', '      for(uint8 o=0;o<8;o++){\n', '          materialCount.push(0);\n', '      }\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function set_material_address(address _material_address) public onlyOwner{\n', '      material_address = _material_address;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function set_pet_address(address _pet_address) public onlyOwner{\n', '      pet_address = _pet_address;\n', '    }\n', ' \n', ' \n', '    \n', '    \n', '    \n', '    function setAddMaterial(uint8 rate) public onlyOwner{\n', '      materialRate.push(rate);\n', '      materialCount.push(0);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function setMaterialRate(uint8 materialIndex, uint8 rate) public onlyOwner{\n', '        materialRate[materialIndex] = rate;\n', '    }\n', '    \n', '\n', '    \n', '    \n', '    \n', '    function arrLength() public view returns(uint){\n', '        return materialRate.length;\n', '    }\n', '    \n', '    function arrLengthCount() public view returns(uint){\n', '        return materialCount.length;\n', '    }\n', '\n', '\n', '    \n', '    \n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    \n', '    \n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', ' \n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '     \n', '    \n', '    \n', '\n', '    \n', '    \n', '    \n', '    function mintToken(address target, uint mintedAmount) public onlyOwner { \n', '        \n', '        balances[target] = balances[target].add(mintedAmount);\n', '        _totalSupply = _totalSupply.add(mintedAmount);\n', '        emit Transfer(address(this), target, mintedAmount);\n', '    }\n', '\n', '\n', '    \n', '    \n', '    \n', '   \n', '    function burnToken(uint8 boxIndex, address target, uint mintedAmount) public onlyOwner {\n', '        \n', '        require(balances[target] >= mintedAmount);\n', '        balances[target] = balances[target].sub(mintedAmount);\n', '        _totalSupply = _totalSupply.sub(mintedAmount);\n', '\n', '        emit Transfer(target, address(0), mintedAmount);\n', '        address factory_address;\n', '         \n', '        if(boxIndex < 5){\n', '            factory_address = material_address;\n', '        }else{\n', '            factory_address = pet_address;\n', '        }\n', '        \n', '        \n', '        controller control2 = controller(factory_address);\n', '        \n', '        for(uint8 j=0;j<materialRate.length;j++){\n', '            materialCount[j] = 0; \n', '        }\n', '        \n', '        \n', '        for(uint16 i=1;i<=mintedAmount;i++){            \n', '            uint16 random = get_random(i);\n', '            uint16 totalRate = 0;\n', '             for(uint8 m=0;m<materialRate.length;m++){         \n', '                totalRate = totalRate.add(materialRate[m]);\n', '                if(random < totalRate){ \n', '                  materialCount[m] = uint(materialCount[m].add(1));\n', '                  break;\n', '                }\n', '             }\n', '        }\n', '\n', '        for(uint8 n=0;n<materialRate.length;n++){\n', '            if(materialCount[n] !=0){\n', '                control2.control(boxIndex, n, target, materialCount[n]);          \n', '                emit whatOfHerb(target,boxIndex,n,materialCount[n]);              \n', '            }\n', '        }\n', '\n', '    }\n', '    \n', '    function get_random(uint amount) private view returns(uint16){\n', '        \n', '        uint16 total;\n', '        for(uint8 i=0;i<materialRate.length;i++){\n', '            total = total.add(materialRate[i]);\n', '        }\n', '        uint16 ramdon = uint16(keccak256(abi.encodePacked(now + uint(amount),blockhash(block.number-1)))); \n', '        \n', '        return uint16(ramdon) % total;\n', '    } \n', '    \n', '   \n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']