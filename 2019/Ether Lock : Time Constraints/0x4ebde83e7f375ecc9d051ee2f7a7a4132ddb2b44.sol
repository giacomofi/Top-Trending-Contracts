['pragma solidity 0.5.1;\n', 'contract zBetForFun {\n', '\taddress payable gadrOwner;\n', '\tuint32 gnLastContestID = 0;\n', '\tuint32 gnLastWagerID = 0;\n', '\tuint gnTotalYesBets = 0;\n', '\tuint gnTotalNoBets = 0;\n', '\tuint gnTotalFees = 0;\n', '\n', '\tstruct clsContest {\n', '\t\tuint nSeconds_Created;\n', '\t\tstring sDescription;\n', '\t\tstring sShortDescription;\n', '\t\tuint nSeconds_Expiration;\n', '\t\tuint8 nFee;\n', '\t\tuint nTotal_Yes;\n', '\t\tuint nTotal_No;\n', '\t\tuint nSeconds_Resolved;\n', '\t\tint8 n8Result_NYP;\n', '\t\tuint nTotal_Winners;\n', '\t\tuint nTotal_Losers;\n', '\t}\n', '\n', '\tstruct clsWager {\n', '\t\tuint nSeconds_Created;\n', '\t\taddress adrPlayer;\n', '\t\tuint nBetAmount;\n', '\t\tint8 n8ChoiceNY;\n', '\t\tuint nSeconds_Paid;\n', '\t\tint8 n8LWP;\n', '\t\tuint nFeeCharged;\n', '\t\tuint nPaymentAmount;\n', '\t}\n', '\n', '\tstruct clsUser {\n', '\t\tuint nBalance;\n', '\t\tuint nSeconds_LastWithdrawal;\n', '\t}\n', '\n', '\tmapping(uint32 => clsContest) gmapContests;\n', '\tmapping (uint32 => mapping (uint32 => clsWager)) gmapWagers;\n', '\tmapping(address => clsUser) gmapUsers;\n', '\n', '\tconstructor() public { gadrOwner = msg.sender; }\n', '\n', '\tmodifier onlyByOwner()\n', '\t{\n', '\t\trequire(\n', '\t\t\tmsg.sender == gadrOwner, "Sender not authorized."\n', '\t\t);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent Pending_Bets(address indexed Player, uint Player_Balance, string Contest, bytes3 Player_Choice, uint Player_Bet, uint Total_Yes, uint Total_No, uint Total_Both, uint Fee_Percent);\n', '\tevent Finalized_Bets(address indexed Player, uint Player_Balance, string Contest, bytes3 Contest_Result, bytes3 Player_Choice, bytes4 Player_Result, uint Player_Bet, uint Total_Winners, uint Total_Losers, uint Total_Bets, uint Fee_Percent, uint Fee_Charged, uint Player_Paid);\n', '\tevent Withdrawals (address indexed Player, uint Withdrawal_Amount);\n', '\n', '\tfunction zKill() onlyByOwner() external {selfdestruct (gadrOwner);}\n', '\t\n', '\tfunction zEventLog_Pending_Bets() private {\n', '\t\temit Pending_Bets(msg.sender,\n', '\t\t\tgmapUsers[msg.sender].nBalance,\n', '\t\t\tgmapContests[gnLastContestID].sShortDescription, \n', '\t\t\tzYesNoToBytes(gmapWagers[gnLastContestID][gnLastWagerID].n8ChoiceNY),\n', '\t\t\tgmapWagers[gnLastContestID][gnLastWagerID].nBetAmount,\n', '\t\t\tgnTotalYesBets,\n', '\t\t\tgnTotalNoBets,\n', '\t\t\tgnTotalYesBets + gnTotalNoBets, \n', '\t\t\tuint(gmapContests[gnLastContestID].nFee) * 10000000000000000);\n', '\t}\n', '\n', '\tfunction zYesNoToBytes(int8 nYesNo) private pure returns (bytes3 b3YesNo) {\n', '\t\tb3YesNo = "No";\n', '\t\tif (nYesNo == 1) {\n', '\t\t\tb3YesNo = "Yes";\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction zEventLog_Finalized_Bets(uint32 i) private {\n', '\t\temit Finalized_Bets(gmapWagers[gnLastContestID][i].adrPlayer,\n', '\t\t\tgmapUsers[gmapWagers[gnLastContestID][i].adrPlayer].nBalance,\n', '\t\t\tgmapContests[gnLastContestID].sShortDescription,\n', '\t\t\tzYesNoTieToBytes(gmapContests[gnLastContestID].n8Result_NYP), \n', '\t\t\tzYesNoToBytes(gmapWagers[gnLastContestID][i].n8ChoiceNY), \n', '\t\t\tzYesNoPushToBytes(gmapWagers[gnLastContestID][i].n8LWP),\n', '\t\t\tgmapWagers[gnLastContestID][i].nBetAmount,\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Winners,\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Losers,\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Winners + gmapContests[gnLastContestID].nTotal_Losers,\n', '\t\t\tuint(gmapContests[gnLastContestID].nFee) * 10000000000000000,\n', '\t\t\tgmapWagers[gnLastContestID][i].nFeeCharged,\n', '\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount);\n', '\t}\n', '\n', '\tfunction zYesNoPushToBytes(int8 nYesNoPush) private pure returns (bytes4 b4YesNoPush) {\n', '\t\tb4YesNoPush = "Lost";\n', '\t\tif (nYesNoPush == 1) {\n', '\t\t\tb4YesNoPush = "Won";\n', '\t\t}\n', '\t\tif (nYesNoPush == 2) {\n', '\t\t\tb4YesNoPush = "Push";\n', '\t\t}\n', '\t}\n', '\n', '\tfunction zYesNoTieToBytes(int8 nYesNoTie) private pure returns (bytes3 b3YesNoTie) {\n', '\t\tb3YesNoTie = "No";\n', '\t\tif (nYesNoTie == 1) {\n', '\t\t\tb3YesNoTie = "Yes";\n', '\t\t}\n', '\t\tif (nYesNoTie == 2) {\n', '\t\t\tb3YesNoTie = "Tie";\n', '\t\t}\n', '\t\treturn b3YesNoTie;\n', '\t}\n', '\n', '\tfunction zEventLog_Withdrawals(uint nWithdrawal_Amount) private {\n', '\t\temit Withdrawals(msg.sender, nWithdrawal_Amount);\n', '\t}\n', '\n', '\t\n', '\tfunction zGetGlobals() external onlyByOwner() view returns (address adrOwner, uint32 nLastContestID, uint32 nLastWagerID, uint nTotalYesBets, uint nTotalNoBets, uint nTotalFees) {\n', '\t\tadrOwner = gadrOwner;\n', '\t\tnLastContestID = gnLastContestID;\n', '\t\tnLastWagerID = gnLastWagerID;\n', '\t\tnTotalYesBets = gnTotalYesBets;\n', '\t\tnTotalNoBets = gnTotalNoBets;\n', '\t\tnTotalFees = gnTotalFees;\n', '\t}\n', '\n', '\tfunction zAddWager (int8 n8ChoiceNY) external payable {\n', '\t\trequire(msg.value > 0 && block.timestamp < gmapContests[gnLastContestID].nSeconds_Expiration);\n', '\t\tgnLastWagerID++;\n', '\t\tgmapWagers[gnLastContestID][gnLastWagerID].nSeconds_Created = block.timestamp;\n', '\t\tgmapWagers[gnLastContestID][gnLastWagerID].adrPlayer = msg.sender;\n', '\t\tgmapWagers[gnLastContestID][gnLastWagerID].nBetAmount = msg.value;\n', '\t\tgmapWagers[gnLastContestID][gnLastWagerID].n8ChoiceNY = n8ChoiceNY;\n', '\t\tif (n8ChoiceNY == 1) {\n', '\t\t\tgnTotalYesBets += msg.value;\n', '\t\t} else {\n', '\t\t\tgnTotalNoBets += msg.value;\n', '\t\t}\n', '\t\tzEventLog_Pending_Bets();\n', '\t}\n', '\n', '\tfunction zGetOneWager_1(uint32 nContestID, uint32 nWagerID) external onlyByOwner() view returns (\n', '\t\tuint nSeconds_Created,\n', '\t\taddress adrPlayer,\n', '\t\tint8 n8ChoiceNY,\n', '\t\tuint nBetAmount,\n', '\t\tuint nTotalYesBets,\n', '\t\tuint nTotalNoBets) {\n', '\t\tnSeconds_Created = gmapWagers[nContestID][nWagerID].nSeconds_Created;\n', '\t\tadrPlayer = gmapWagers[nContestID][nWagerID].adrPlayer;\n', '\t\tn8ChoiceNY = gmapWagers[nContestID][nWagerID].n8ChoiceNY;\n', '\t\tnBetAmount = gmapWagers[nContestID][nWagerID].nBetAmount;\n', '\t\tnTotalYesBets = gnTotalYesBets;\n', '\t\tnTotalNoBets = gnTotalNoBets;\n', '\t}\n', '\n', '\tfunction zGetOneWager_2(uint32 nContestID, uint32 nWagerID) external onlyByOwner() view returns (\n', '\t\tint8 n8LWP,\n', '\t\tuint nSeconds_Paid,\n', '\t\tuint nPaymentAmount,\n', '\t\tuint nFeeCharged) {\n', '\t\tn8LWP = gmapWagers[nContestID][nWagerID].n8LWP;\n', '\t\tnSeconds_Paid = gmapWagers[nContestID][nWagerID].nSeconds_Paid;\n', '\t\tnPaymentAmount = gmapWagers[nContestID][nWagerID].nPaymentAmount;\n', '\t\tnFeeCharged = gmapWagers[nContestID][nWagerID].nFeeCharged;\n', '\t}\n', '\n', '\tfunction zGetAllWagers_1 (uint32 nContestID) external onlyByOwner() view returns (uint[] memory anSeconds_Created, address[] memory aadrPlayer, int8[] memory an8ChoiceNY, uint[] memory anBetAmount) {\n', '\t\tanSeconds_Created = new uint[](gnLastWagerID+1);\n', '\t\taadrPlayer = new address[](gnLastWagerID+1);\n', '\t\tan8ChoiceNY = new int8[](gnLastWagerID+1);\n', '\t\tanBetAmount = new uint[](gnLastWagerID+1);\n', '\n', '\t\tfor (uint32 i = 1; i <= gnLastWagerID; i++) {\n', '\t\t\tclsWager memory objWager = gmapWagers[nContestID][i];\n', '\t\t\tanSeconds_Created[i] = objWager.nSeconds_Created;\n', '\t\t\taadrPlayer[i] = objWager.adrPlayer;\n', '\t\t\tan8ChoiceNY[i] = objWager.n8ChoiceNY;\n', '\t\t\tanBetAmount[i] = objWager.nBetAmount;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction zGetAllWagers_2 (uint32 nContestID) external onlyByOwner() view returns (int8[] memory an8LWP, uint[] memory anSeconds_Paid, uint[] memory anPaymentAmount, uint[] memory anFeeCharged) {\n', '\t\tan8LWP = new int8[](gnLastWagerID+1);\n', '\t\tanSeconds_Paid = new uint[](gnLastWagerID+1);\n', '\t\tanPaymentAmount = new uint[](gnLastWagerID+1);\n', '\t\tanFeeCharged = new uint[](gnLastWagerID+1);\n', '\n', '\t\tfor (uint32 i = 1; i <= gnLastWagerID; i++) {\n', '\t\t\tclsWager memory objWager = gmapWagers[nContestID][i];\n', '\t\t\tan8LWP[i] = objWager.n8LWP;\n', '\t\t\tanSeconds_Paid[i] = objWager.nSeconds_Paid;\n', '\t\t\tanPaymentAmount[i] = objWager.nPaymentAmount;\n', '\t\t\tanFeeCharged[i] = objWager.nFeeCharged;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction zAddContest(string calldata sDescription, string calldata sShortDescription, uint32 nSeconds_Expiration, uint8 nFee) external onlyByOwner() {\n', '\t\tgnLastContestID++;\n', '\t\tgnLastWagerID = 0;\n', '\t\tgnTotalYesBets = 0;\n', '\t\tgnTotalNoBets = 0;\n', '\t\tgmapContests[gnLastContestID].nSeconds_Created = block.timestamp;\n', '\t\tgmapContests[gnLastContestID].sDescription = sDescription;\n', '\t\tgmapContests[gnLastContestID].sShortDescription = sShortDescription;\n', '\t\tgmapContests[gnLastContestID].nSeconds_Expiration = nSeconds_Expiration;\n', '\t\tgmapContests[gnLastContestID].nFee = nFee;\n', '\t}\n', '\n', '\tfunction zGetOneContest_1(uint32 nContestID) external onlyByOwner() view returns (\n', '\t\tuint nSeconds_Created,\n', '\t\tstring memory sDescription,\n', '\t\tstring memory sShortDescription,\n', '\t\tuint nSeconds_Expiration,\n', '\t\tuint nSeconds_Resolved,\n', '\t\tint8 n8Result_NYP) {\n', '\t\tnSeconds_Created = gmapContests[nContestID].nSeconds_Created;\n', '\t\tsDescription = gmapContests[nContestID].sDescription;\n', '\t\tsShortDescription = gmapContests[nContestID].sShortDescription;\n', '\t\tnSeconds_Expiration = gmapContests[nContestID].nSeconds_Expiration;\n', '\t\tnSeconds_Resolved = gmapContests[nContestID].nSeconds_Resolved;\n', '\t\tn8Result_NYP = gmapContests[nContestID].n8Result_NYP;\n', '\t}\n', '\n', '\tfunction zGetOneContest_2(uint32 nContestID) external onlyByOwner() view returns (\n', '\t\tuint nTotal_Yes,\n', '\t\tuint nTotal_No,\n', '\t\tuint nTotal_Winners,\n', '\t\tuint nTotal_Losers,\n', '\t\tuint nFee) {\n', '\t\tnTotal_Yes = gmapContests[nContestID].nTotal_Yes;\n', '\t\tnTotal_No = gmapContests[nContestID].nTotal_No;\n', '\t\tnTotal_Winners = gmapContests[nContestID].nTotal_Winners;\n', '\t\tnTotal_Losers = gmapContests[nContestID].nTotal_Losers;\n', '\t\tnFee = gmapContests[nContestID].nFee;\n', '\t}\n', '\n', '\tfunction zGetAllContests_1 () external onlyByOwner() view returns (uint[] memory anSeconds_Created, uint[] memory anSeconds_Expiration, uint[] memory anSeconds_Resolved, int8[] memory an8Result_NYP) {\n', '\t\tanSeconds_Created = new uint[](gnLastContestID+1);\n', '\t\tanSeconds_Expiration = new uint[](gnLastContestID+1);\n', '\t\tanSeconds_Resolved = new uint[](gnLastContestID+1);\n', '\t\tan8Result_NYP = new int8[](gnLastContestID+1);\n', '\n', '\t\tfor (uint32 i = 1; i <= gnLastContestID; i++) {\n', '\t\t\tclsContest memory objContest = gmapContests[i];\n', '\t\t\tanSeconds_Created[i] = objContest.nSeconds_Created;\n', '\t\t\tanSeconds_Expiration[i] = objContest.nSeconds_Expiration;\n', '\t\t\tanSeconds_Resolved[i] = objContest.nSeconds_Resolved;\n', '\t\t\tan8Result_NYP[i]= objContest.n8Result_NYP;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction zGetAllContests_2 () external onlyByOwner() view returns (uint[] memory anTotal_Yes, uint[] memory anTotal_No, uint[] memory anTotal_Winners, uint[] memory anTotal_Losers, uint[] memory anFee) {\n', '\t\tanTotal_Yes = new uint[](gnLastContestID+1);\n', '\t\tanTotal_No = new uint[](gnLastContestID+1);\n', '\t\tanTotal_Winners = new uint[](gnLastContestID+1);\n', '\t\tanTotal_Losers = new uint[](gnLastContestID+1);\n', '\t\tanFee = new uint[](gnLastContestID+1);\n', '\n', '\t\tfor (uint32 i = 1; i <= gnLastContestID; i++) {\n', '\t\t\tclsContest memory objContest = gmapContests[i];\n', '\t\t\tanTotal_Yes[i] = objContest.nTotal_Yes;\n', '\t\t\tanTotal_No[i] = objContest.nTotal_No;\n', '\t\t\tanTotal_Winners[i] = objContest.nTotal_Winners;\n', '\t\t\tanTotal_Losers[i] = objContest.nTotal_Losers;\n', '\t\t\tanFee[i]= objContest.nFee;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction zSetContestResult(int8 n8Result_NYP) external onlyByOwner() {\n', '\t\trequire(gmapContests[gnLastContestID].nSeconds_Resolved == 0);\n', '\t\tuint nRemainingTotalLosses;\n', '\t\tuint32 i;\n', '\t\tclsWager memory objWager;\n', '\t\tuint8 nFee_LargePerc = 100 - gmapContests[gnLastContestID].nFee;\n', '\t\tuint8 nFee_SmallPerc = gmapContests[gnLastContestID].nFee;\n', '\t\tgmapContests[gnLastContestID].n8Result_NYP = n8Result_NYP;\n', '\t\tgmapContests[gnLastContestID].nTotal_Yes = gnTotalYesBets;\n', '\t\tgmapContests[gnLastContestID].nTotal_No = gnTotalNoBets;\n', '\t\tgmapContests[gnLastContestID].nSeconds_Resolved = block.timestamp;\n', '\n', '\t\tif (n8Result_NYP == 1) {\n', '\t\t\tnRemainingTotalLosses = gnTotalNoBets;\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Winners = gnTotalYesBets;\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Losers = gnTotalNoBets;\n', '\t\t} else {\n', '\t\t\tnRemainingTotalLosses = gnTotalYesBets;\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Winners = gnTotalNoBets;\n', '\t\t\tgmapContests[gnLastContestID].nTotal_Losers = gnTotalYesBets;\n', '\t\t}\n', '\n', '\t\tif (n8Result_NYP == 2) {\n', '\t\t\tfor (i = 1; i <= gnLastWagerID; i++) {\n', '\t\t\t\tgmapWagers[gnLastContestID][i].nSeconds_Paid = block.timestamp;\n', '\t\t\t\tgmapWagers[gnLastContestID][i].n8LWP = 2;\n', '\t\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount = gmapWagers[gnLastContestID][i].nBetAmount;\n', '\t\t\t\tgmapUsers[gmapWagers[gnLastContestID][i].adrPlayer].nBalance += gmapWagers[gnLastContestID][i].nBetAmount;\n', '\t\t\t\tgmapContests[gnLastContestID].nTotal_Winners = 0;\n', '\t\t\t\tgmapContests[gnLastContestID].nTotal_Losers = 0;\n', '\t\t\t}\t\n', '\t\t} else {\n', '// Process Winners\n', '\t\t\tfor (i = 1; i <= gnLastWagerID; i++) {\n', '\t\t\t\tgmapWagers[gnLastContestID][i].nSeconds_Paid = block.timestamp;\n', '\t\t\t\tobjWager = gmapWagers[gnLastContestID][i];\n', '\t\t\t\tif (objWager.n8ChoiceNY == n8Result_NYP) {\n', '\t\t\t\t\tgmapWagers[gnLastContestID][i].n8LWP = 1;\n', '\t\t\t\t\tif (nRemainingTotalLosses <= objWager.nBetAmount) {\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount = objWager.nBetAmount + (nRemainingTotalLosses * nFee_LargePerc / 100);\n', '\t\t\t\t\t\tgnTotalFees += nRemainingTotalLosses * nFee_SmallPerc / 100;\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nFeeCharged = nRemainingTotalLosses * nFee_SmallPerc / 100;\n', '\t\t\t\t\t\tnRemainingTotalLosses = 0;\n', '\t\t\t\t\t} else {\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount = objWager.nBetAmount + (objWager.nBetAmount * nFee_LargePerc / 100);\n', '\t\t\t\t\t\tgnTotalFees += objWager.nBetAmount * nFee_SmallPerc / 100;\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nFeeCharged = objWager.nBetAmount * nFee_SmallPerc / 100;\n', '\t\t\t\t\t\tnRemainingTotalLosses -= objWager.nBetAmount;\n', '\t\t\t\t\t}\n', '\t\t\t\t}\n', '\t\t\t}\n', '\n', '// Process Losers\n', '\t\t\tfor (i = gnLastWagerID; i > 0; i--) {\n', '\t\t\t\tobjWager = gmapWagers[gnLastContestID][i];\n', '\t\t\t\tif (objWager.n8ChoiceNY != n8Result_NYP) {\n', '\t\t\t\t\tif (nRemainingTotalLosses <= objWager.nBetAmount) {\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount = nRemainingTotalLosses;\n', '\t\t\t\t\t\tnRemainingTotalLosses = 0;\n', '\t\t\t\t\t} else {\n', '\t\t\t\t\t\tgmapWagers[gnLastContestID][i].nPaymentAmount = objWager.nBetAmount;\n', '\t\t\t\t\t\tnRemainingTotalLosses -= objWager.nBetAmount;\n', '\t\t\t\t\t}\n', '\t\t\t\t}\n', '\t\t\t\tgmapUsers[gmapWagers[gnLastContestID][i].adrPlayer].nBalance += gmapWagers[gnLastContestID][i].nPaymentAmount;\n', '\t\t\t}\n', '\t\t}\n', '\t\tfor (i = 1; i <= gnLastWagerID; i++) {\n', '\t\t\tzEventLog_Finalized_Bets(i);\n', '\t\t}\n', '\t\t\n', '\t}\n', '\t\n', '\tfunction zGetOneUser(address adrUserAddress) external onlyByOwner() view returns (\n', '\t\tuint nBalance,\n', '\t\tuint nSeconds_LastWithdrawal) {\n', '\t\tnBalance = gmapUsers[adrUserAddress].nBalance;\n', '\t\tnSeconds_LastWithdrawal = gmapUsers[adrUserAddress].nSeconds_LastWithdrawal;\n', '\t}\n', '\n', '\tfunction zUserWithdrawal() external {\n', '\t\trequire(gmapUsers[msg.sender].nBalance > 0);\n', '\t\tuint nBalance = gmapUsers[msg.sender].nBalance;\n', '\t\tgmapUsers[msg.sender].nBalance = 0;\n', '\t\tmsg.sender.transfer(nBalance);\n', '\t\tzEventLog_Withdrawals(nBalance);\n', '\t}\n', '\n', '\tfunction zFeesWithdrawal() external onlyByOwner() {\n', '\t\trequire(gnTotalFees > 0);\n', '\t\tuint nFees = gnTotalFees;\n', '\t\tgnTotalFees = 0;\n', '\t\tmsg.sender.transfer(nFees);\n', '\t}\n', '\n', '\tfunction zGetContestDescription() external view returns (string memory sDescription) {\n', '\t\tif (block.timestamp >= gmapContests[gnLastContestID].nSeconds_Expiration) {\n', '\t\t\tsDescription = "The last contest has expired, so do not place a bet at this time.~nPlease check back often for a new contest.";\n', '\t\t} else {\n', '\t\t\tsDescription = gmapContests[gnLastContestID].sDescription;\n', '\t\t}\n', '\t}\n', '}']