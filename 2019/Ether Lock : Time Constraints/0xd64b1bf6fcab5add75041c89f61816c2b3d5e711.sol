['pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface IOrbsGuardians {\n', '\n', '    event GuardianRegistered(address indexed guardian);\n', '    event GuardianLeft(address indexed guardian);\n', '    event GuardianUpdated(address indexed guardian);\n', '\n', '    /// @dev register a new guardian. You will need to transfer registrationDepositWei amount of ether.\n', '    /// @param name string The name of the guardian\n', '    /// @param website string The website of the guardian\n', '    function register(string name, string website) external payable;\n', '\n', "    /// @dev update guardian details. only msg.sender can update it's own guardian details.\n", '    /// @param name string The name of the guardian\n', '    /// @param website string The website of the guardianfunction update(string name, string website) external;\n', '    function update(string name, string website) external;\n', '\n', '    /// @dev Delete the guardian and take back the locked ether. only msg.sender can leave.\n', '    function leave() external;\n', '\n', '    /// @dev Returns if the address belongs to a guardian\n', '    /// @param guardian address the guardian address\n', '    function isGuardian(address guardian) external view returns (bool);\n', '\n', '    /// @dev Returns name and website for  a specific guardian.\n', '    /// @param guardian address the guardian address\n', '    function getGuardianData(address guardian)\n', '        external\n', '        view\n', '        returns (string name, string website);\n', '\n', '    /// @dev Returns in which block the guardian registered, and in which block it was last updated.\n', '    /// @param guardian address the guardian address\n', '    function getRegistrationBlockNumber(address guardian)\n', '        external\n', '        view\n', '        returns (uint registeredOn, uint lastUpdatedOn);\n', '\n', '    /// @dev Returns an array of guardians.\n', '    /// @param offset uint offset from which to start getting guardians from the array\n', '    /// @param limit uint limit of guardians to be returned.\n', '    function getGuardians(uint offset, uint limit)\n', '        external\n', '        view\n', '        returns (address[]);\n', '\n', '    /// @dev Similar to getGuardians, but returns addresses represented as byte20.\n', '    /// @param offset uint offset from which to start getting guardians from the array\n', '    /// @param limit uint limit of guardians to be returned.\n', '    function getGuardiansBytes20(uint offset, uint limit)\n', '        external\n', '        view\n', '        returns (bytes20[]);\n', '}\n', '\n', '\n', 'contract OrbsGuardians is IOrbsGuardians {\n', '    using SafeMath for uint256;\n', '\n', '    struct GuardianData {\n', '        string name;\n', '        string website;\n', '        uint index;\n', '        uint registeredOnBlock;\n', '        uint lastUpdatedOnBlock;\n', '        uint registeredOn;\n', '    }\n', '\n', '    // The version of the current Guardian smart contract.\n', '    uint public constant VERSION = 1;\n', '\n', '    // Amount of Ether in Wei need to be locked when registering - this will be set to 1.\n', '    uint public registrationDepositWei;\n', '    // The amount of time needed to wait until a guardian can leave and get registrationDepositWei_\n', '    uint public registrationMinTime;\n', '\n', '    // Iterable array to get a list of all guardians\n', '    address[] internal guardians;\n', '\n', '    // Mapping between address and the guardian data.\n', '    mapping(address => GuardianData) internal guardiansData;\n', '\n', '    /// @dev Check that the caller is a guardian.\n', '    modifier onlyGuardian() {\n', '        require(isGuardian(msg.sender), "You must be a registered guardian");\n', '        _;\n', '    }\n', '\n', '    /// @dev Check that the caller is not a contract.\n', '    modifier onlyEOA() {\n', '        require(!Address.isContract(msg.sender),"Only EOA may register as Guardian");\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor that initializes the amount of ether needed to lock when registering. This will be set to 1.\n', '    /// @param registrationDepositWei_ uint the amount of ether needed to lock when registering.\n', '    /// @param registrationMinTime_ uint the amount of time needed to wait until a guardian can leave and get registrationDepositWei_\n', '    constructor(uint registrationDepositWei_, uint registrationMinTime_) public {\n', '        require(registrationDepositWei_ > 0, "registrationDepositWei_ must be positive");\n', '\n', '        registrationMinTime = registrationMinTime_;\n', '        registrationDepositWei = registrationDepositWei_;\n', '    }\n', '\n', '    /// @dev register a new guardian. You will need to transfer registrationDepositWei amount of ether.\n', '    /// @param name string The name of the guardian\n', '    /// @param website string The website of the guardian\n', '    function register(string name, string website)\n', '        external\n', '        payable\n', '        onlyEOA\n', '    {\n', '        address sender = msg.sender;\n', '        require(bytes(name).length > 0, "Please provide a valid name");\n', '        require(bytes(website).length > 0, "Please provide a valid website");\n', '        require(!isGuardian(sender), "Cannot be a guardian");\n', '        require(msg.value == registrationDepositWei, "Please provide the exact registration deposit");\n', '\n', '        uint index = guardians.length;\n', '        guardians.push(sender);\n', '        guardiansData[sender] = GuardianData({\n', '            name: name,\n', '            website: website,\n', '            index: index ,\n', '            registeredOnBlock: block.number,\n', '            lastUpdatedOnBlock: block.number,\n', '            registeredOn: now\n', '        });\n', '\n', '        emit GuardianRegistered(sender);\n', '    }\n', '\n', "    /// @dev update guardian details. only msg.sender can update it's own guardian details.\n", '    /// @param name string The name of the guardian\n', '    /// @param website string The website of the guardian\n', '    function update(string name, string website)\n', '        external\n', '        onlyGuardian\n', '        onlyEOA\n', '    {\n', '        address sender = msg.sender;\n', '        require(bytes(name).length > 0, "Please provide a valid name");\n', '        require(bytes(website).length > 0, "Please provide a valid website");\n', '\n', '\n', '        guardiansData[sender].name = name;\n', '        guardiansData[sender].website = website;\n', '        guardiansData[sender].lastUpdatedOnBlock = block.number;\n', '\n', '        emit GuardianUpdated(sender);\n', '    }\n', '\n', '    /// @dev Delete the guardian and take back the locked ether. only msg.sender can leave.\n', '    function leave() external onlyGuardian onlyEOA {\n', '        address sender = msg.sender;\n', '        require(now >= guardiansData[sender].registeredOn.add(registrationMinTime), "Minimal guardian time didnt pass");\n', '\n', '        uint i = guardiansData[sender].index;\n', '\n', '        assert(guardians[i] == sender); // Will consume all available gas.\n', '\n', '        // Replace with last element and remove from end\n', '        guardians[i] = guardians[guardians.length - 1]; // Switch with last\n', "        guardiansData[guardians[i]].index = i; // Update it's lookup index\n", '        guardians.length--; // Remove the last one\n', '\n', '        // Clear data\n', '        delete guardiansData[sender];\n', '\n', '        // Refund deposit\n', '        sender.transfer(registrationDepositWei);\n', '\n', '        emit GuardianLeft(sender);\n', '    }\n', '\n', '    /// @dev Similar to getGuardians, but returns addresses represented as byte20.\n', '    /// @param offset uint offset from which to start getting guardians from the array\n', '    /// @param limit uint limit of guardians to be returned.\n', '    function getGuardiansBytes20(uint offset, uint limit)\n', '        external\n', '        view\n', '        returns (bytes20[])\n', '    {\n', '        address[] memory guardianAddresses = getGuardians(offset, limit);\n', '        uint guardianAddressesLength = guardianAddresses.length;\n', '\n', '        bytes20[] memory result = new bytes20[](guardianAddressesLength);\n', '\n', '        for (uint i = 0; i < guardianAddressesLength; i++) {\n', '            result[i] = bytes20(guardianAddresses[i]);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @dev Returns in which block the guardian registered, and in which block it was last updated.\n', '    /// @param guardian address the guardian address\n', '    function getRegistrationBlockNumber(address guardian)\n', '        external\n', '        view\n', '        returns (uint registeredOn, uint lastUpdatedOn)\n', '    {\n', '        require(isGuardian(guardian), "Please provide a listed Guardian");\n', '\n', '        GuardianData storage entry = guardiansData[guardian];\n', '        registeredOn = entry.registeredOnBlock;\n', '        lastUpdatedOn = entry.lastUpdatedOnBlock;\n', '    }\n', '\n', '    /// @dev Returns an array of guardians.\n', '    /// @param offset uint offset from which to start getting guardians from the array\n', '    /// @param limit uint limit of guardians to be returned.\n', '    function getGuardians(uint offset, uint limit)\n', '        public\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        if (offset >= guardians.length) { // offset out of bounds\n', '            return new address[](0);\n', '        }\n', '\n', '        if (offset.add(limit) > guardians.length) { // clip limit to array size\n', '            limit = guardians.length.sub(offset);\n', '        }\n', '\n', '        address[] memory result = new address[](limit);\n', '\n', '        uint resultLength = result.length;\n', '        for (uint i = 0; i < resultLength; i++) {\n', '            result[i] = guardians[offset.add(i)];\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /// @dev Returns name and website for  a specific guardian.\n', '    /// @param guardian address the guardian address\n', '    function getGuardianData(address guardian)\n', '        public\n', '        view\n', '        returns (string memory name, string memory website)\n', '    {\n', '        require(isGuardian(guardian), "Please provide a listed Guardian");\n', '        name = guardiansData[guardian].name;\n', '        website = guardiansData[guardian].website;\n', '    }\n', '\n', '    /// @dev Returns if the address belongs to a guardian\n', '    /// @param guardian address the guardian address\n', '    function isGuardian(address guardian) public view returns (bool) {\n', '        return guardiansData[guardian].registeredOnBlock > 0;\n', '    }\n', '}']