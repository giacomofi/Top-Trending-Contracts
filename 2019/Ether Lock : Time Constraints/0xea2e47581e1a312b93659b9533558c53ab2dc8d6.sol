['pragma solidity ^0.4.25 ;\n', '\n', 'interface IERC20Token {                                     \n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '}\n', '\n', 'contract LupeMining {\n', '    \n', '    using SafeMath for uint ; \n', '    using Limit for uint ; \n', '    \n', '    IERC20Token public tokenContract ;\n', '    address public owner;\n', '    \n', '    mapping(bytes32 => bytes32) public solutionForChallenge ; \n', '    \n', '    uint public blockNumber  = 0 ; \n', '    \n', '    uint public LUPX_BLOCKS_PER_EPOCH_TARGET = 5 ;\n', '    uint public LUPX_BLOCK_TIME = 600 ; \n', '    uint public ETHER_BLOCK_TIME = 15 ; \n', '    uint public halvingBlockAmount = 25000 ; \n', '    \n', '    uint public ETHER_BLOCKS_PER_EPOCH_TARGET = (LUPX_BLOCK_TIME.div(ETHER_BLOCK_TIME)).mul(LUPX_BLOCKS_PER_EPOCH_TARGET) ;\n', '    \n', '    uint public MIN_TARGET = 2 ** 16 ; \n', '    uint public MAX_TARGET = 2 ** 252 ; \n', '    \n', '    uint public target  = MAX_TARGET.div(10**4) ; \n', '    bytes32 public challenge ; \n', '    \n', '    address public lastRewardedMiner ; \n', '    uint public lastRewardAmount ; \n', '    uint public lastRewardETHBlock ; \n', '    \n', '    uint public ETHBlockDiffAdjusted  = block.number ; \n', '    \n', '    uint public minedTokensAmount  = 0 ; \n', '    \n', '    uint public blockReward = 200 ; \n', '    \n', '    bool public locked = false ; \n', '    \n', '    event newBlock(address miner, uint reward) ; \n', '    \n', '    constructor(IERC20Token _tokenContract) public {\n', '        tokenContract = _tokenContract ;\n', '        owner = msg.sender ; \n', '        \n', '        newBlockChallenge() ; \n', '    }\n', '    \n', '    function lockContract() public onlyOwner returns (bool success) {\n', '        locked = true ; \n', '        return true ; \n', '    }\n', '    \n', '    function mine(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n', '        require(!locked) ; \n', '        require(tokenContract.balanceOf(address(this)) > blockReward) ;\n', '        \n', '        bytes32 digest =  keccak256(challenge, msg.sender, nonce); \n', '        \n', '        if (digest != challenge_digest) {\n', '            revert() ; \n', '        }\n', '        \n', '        if (uint256(challenge_digest) > target) {\n', '            revert() ; \n', '        }\n', '        \n', '\n', '        bytes32 solution = solutionForChallenge[challenge];\n', '        solutionForChallenge[challenge] = digest;\n', '        if(solution != 0x0) {\n', '            revert();\n', '        }\n', '        \n', '        minedTokensAmount = minedTokensAmount.add(blockReward) ; \n', '        \n', '        lastRewardedMiner = msg.sender ; \n', '        lastRewardAmount = blockReward ; \n', '        lastRewardETHBlock = block.number ; \n', '        \n', '        emit newBlock(msg.sender, blockReward) ; \n', '        \n', '        tokenContract.transfer(msg.sender, blockReward * 10 ** tokenContract.decimals()) ; \n', '        \n', '        newBlockChallenge() ; \n', '        \n', '        return true ; \n', '    }\n', '\n', '    function newBlockChallenge() internal {\n', '        blockNumber = blockNumber.add(1) ; \n', '        \n', '        if (blockNumber % LUPX_BLOCKS_PER_EPOCH_TARGET == 0) {\n', '            adjustDifficulty() ; \n', '        }\n', '        \n', '        if (blockNumber % halvingBlockAmount == 0) {\n', '            blockReward = blockReward.div(2) ; \n', '        }\n', '        \n', '        challenge = blockhash(block.number - 1) ; \n', '    }\n', '    \n', '    function adjustDifficulty() internal {\n', '        uint blocksSinceLastBlock = block.number - ETHBlockDiffAdjusted ; \n', '          \n', '        if (blocksSinceLastBlock < ETHER_BLOCKS_PER_EPOCH_TARGET) { \n', '            \n', '            uint excs_percentage = (ETHER_BLOCKS_PER_EPOCH_TARGET.mul(100)).div(blocksSinceLastBlock) ;\n', '\n', '            uint excs_percentage_extra = excs_percentage.sub(100).limitLessThan(1000) ;  \n', '          \n', '            target = target.sub(target.div(2000).mul(excs_percentage_extra)) ;      \n', '        }\n', '        \n', '        else {      \n', '            \n', '            uint short_percentage = (blocksSinceLastBlock.mul(100)).div(ETHER_BLOCKS_PER_EPOCH_TARGET) ;\n', '\n', '            uint short_percentage_extra = short_percentage.sub(100).limitLessThan(1000) ;\n', '\n', '            target = target.add(target.div(2000).mul(short_percentage_extra)) ;\n', '        }\n', '        \n', '        \n', '        ETHBlockDiffAdjusted = block.number ; \n', '        \n', '        \n', '        if(target < MIN_TARGET) {target = MIN_TARGET ;}\n', '\n', '        if(target > MAX_TARGET) {target = MAX_TARGET ;}\n', '    }\n', '    \n', '    function getChallenge() public view returns (bytes32) {\n', '        return challenge;\n', '    }\n', '\n', '     function getMiningDifficulty() public view returns (uint) {\n', '        return MAX_TARGET.div(target);\n', '    }\n', '\n', '    function getMiningTarget() public view returns (uint) {\n', '       return target;\n', '   }\n', '   \n', '   function testHASH(uint256 nonce, bytes32 challenge_digest) public view returns (bool success) {\n', '        bytes32 digest =  keccak256(challenge, msg.sender, nonce); \n', '        \n', '        if (digest != challenge_digest) {\n', '            revert() ; \n', '        }\n', '        \n', '        if (uint256(challenge_digest) > target) {\n', '            revert() ; \n', '        }\n', '        \n', '        return true ; \n', '   }\n', '   \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function destroyOwnership() public onlyOwner {\n', '        owner = address(0) ; \n', '    }\n', '    \n', '    function stopMining() public onlyOwner {\n', '        tokenContract.transfer(msg.sender, tokenContract.balanceOf(address(this))) ;\n', '        msg.sender.transfer(address(this).balance) ;  \n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Limit {\n', '    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        if(a > b) {\n', '            return b;\n', '        } else {\n', '            return a;\n', '        }\n', '    }\n', '}']