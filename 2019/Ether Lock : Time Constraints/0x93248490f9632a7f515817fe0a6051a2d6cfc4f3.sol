['pragma solidity ^0.4.17;\n', '\n', 'contract TokenERC20 {\n', '\n', '    address[] public players;\n', '    address public manager;\n', '    uint256 existValue=0;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    //当天公司已经发出去币的数量\n', '    uint256 oneDaySendCoin = 0;\n', '    event Transfer(address indexed to, uint256 value);\n', '    mapping (address => uint256) public exchangeCoin;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '     function TokenERC20(uint256 initialSupply,string tokenName,string tokenSymbol,uint8 tokenDecimals) public {\n', '        require(initialSupply < 2**256 - 1);\n', '        require(tokenDecimals < 2**8 -1);\n', '        totalSupply = initialSupply * 10 ** uint256(tokenDecimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = tokenDecimals;\n', '        manager = msg.sender;\n', '    }\n', '    //查询当天已经发了多少币\n', '    function checkSend() public view returns(uint256){\n', '        return oneDaySendCoin;\n', '    }\n', '    //新的一天把oneDaySendCoin清零\n', '    function restore() public onlyManagerCanCall{\n', '        oneDaySendCoin = 0;\n', '    }\n', '    //给合约转钱\n', '    function enter() payable public{\n', '    }\n', '    //转账(根据做任务获取积分)\n', '    function send(address _to, uint256 _a, uint256 _b, uint256 _oneDayTotalCoin, uint256 _maxOneDaySendCoin) public onlyManagerCanCall {\n', '        //防止越界问题\n', '        if(_a > 2**256 - 1){\n', '            _a = 2**256 - 1;\n', '        }\n', '        if(_b > 2**256 - 1){\n', '            _b = 2**256 - 1;\n', '        }\n', '        if(_oneDayTotalCoin > 2**256 - 1){\n', '            _oneDayTotalCoin = 2**256 - 1;\n', '        }\n', '        if(_maxOneDaySendCoin > 2**256 - 1){\n', '            _maxOneDaySendCoin = 2**256 - 1;\n', '        }\n', '        require(_a <= _b);\n', '        //每天转账的总数量必须<=规定的每天发币数\n', '        require(oneDaySendCoin <= _oneDayTotalCoin);\n', '        uint less = _a * _oneDayTotalCoin / _b;\n', '        if(less < _maxOneDaySendCoin){\n', '            require(totalSupply>=less);\n', '            require(_to != 0x0);\n', '            require(balanceOf[msg.sender] >= less);\n', '            require(balanceOf[_to] + less >= balanceOf[_to]);\n', '            uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_to];\n', '            balanceOf[msg.sender] -= less;\n', '            balanceOf[_to] += less;\n', '             Transfer(_to, less);\n', '            assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '            totalSupply -= less;\n', '            //转账完成后, 总数量加上转账的数量\n', '            oneDaySendCoin += less;\n', '            //存储数据，更新数据\n', '            exchangeCoin[_to] = existValue;\n', '            exchangeCoin[_to] = less+existValue;\n', '            existValue = existValue + less;\n', '        }else{\n', '            require(totalSupply>=_maxOneDaySendCoin);\n', '            require(_to != 0x0);\n', '            require(balanceOf[msg.sender] >= less);\n', '            require(balanceOf[_to] + _maxOneDaySendCoin >= balanceOf[_to]);\n', '            previousBalances = balanceOf[msg.sender] + balanceOf[_to];\n', '            balanceOf[msg.sender] -= _maxOneDaySendCoin;\n', '            balanceOf[_to] += _maxOneDaySendCoin;\n', '             Transfer(_to, _maxOneDaySendCoin);\n', '            assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '            totalSupply -= _maxOneDaySendCoin;\n', '            //转账完成后, 总数量加上转账的数量\n', '            oneDaySendCoin += _maxOneDaySendCoin;\n', '            //存储数据，更新数据\n', '            exchangeCoin[_to] = existValue;\n', '            exchangeCoin[_to] = _maxOneDaySendCoin+existValue;\n', '            existValue = existValue + _maxOneDaySendCoin;\n', '        }\n', '        // 转账完成之后,将调用者扔进players\n', '        players.push(_to);\n', '    }\n', '    // 获取用户每天获得的币\n', '    function getUserCoin() public view returns (uint256){\n', '        return exchangeCoin[msg.sender];\n', '    }\n', '    // 设置管理员权限\n', '    modifier onlyManagerCanCall(){\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    // 获取所有参与任务人员地址\n', '    function getAllPlayers() public view returns (address[]){\n', '        return players;\n', '    }\n', '    function setPlayers() public {\n', '        players.push(msg.sender);\n', '    }\n', '    function getManager() public view returns(address){\n', '        return manager;\n', '    }\n', '        //获取合约里面的余额(ether的余额)\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '}']