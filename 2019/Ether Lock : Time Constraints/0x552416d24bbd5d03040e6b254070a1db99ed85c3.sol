['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  \n', '  \n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  \n', '    \n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev 围绕ERC20操作发生故障的包装程序.\n', ' * 可以在合约中通过这样使用这个库 `using SafeERC20 for ERC20;` 来使用安全的操作`token.safeTransfer(...)`\n', ' */\n', 'library SafeERC20 {\n', '  \n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock 锁定期释放token\n', ' * @dev TokenTimelock 是一个令token持有人合同，将允许一个受益人在给定的发布时间之后提取token\n', ' */\n', 'contract TokenTimelock {\n', '  //这里用到了上面的SafeERC20\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '  address public owner;\n', '  \n', '  // token 释放受益人组  \n', '  mapping (address => uint256) public beneficiary;\n', '  address[] beneficial;\n', '  // token可以被释放的时间戳\n', '  uint256 public releaseTime;\n', '  // 对token，受益人address和释放时间初始化\n', '  constructor(\n', '    ERC20Basic _token,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    owner = msg.sender;\n', '    releaseTime = _releaseTime;\n', '  }\n', '  \n', '  function pushInvestor(address Ins,uint256 count) public  {\n', '      require (msg.sender == owner);\n', '      require (block.timestamp < releaseTime);\n', '      beneficial.push(Ins);\n', '      beneficiary[Ins] = count;\n', '  }\n', '  function chkBalance() public view returns (uint) {\n', '         return token.balanceOf(this);\n', '      \n', '  }\n', '  /**\n', '   * @notice 将时间限制内的token转移给受益人.\n', '   */\n', '  function release() public {\n', '    require(block.timestamp >= releaseTime);\n', '    \n', '    for (uint i=0;i<beneficial.length;i++ ){\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '        uint256 count = beneficiary[beneficial[i]];\n', '        if (amount>=count){\n', '             beneficiary[beneficial[i]] = 0;\n', '             token.safeTransfer(beneficial[i], count);\n', '        }\n', '    }\n', '  }\n', '  /**\n', '   * @notice owner可以退回合约内的token.\n', '   */\n', '  function revoke() public {\n', '      require (msg.sender == owner);\n', '      uint256 amount = token.balanceOf(this);\n', '      require(amount > 0);\n', '      token.safeTransfer(owner, amount);\n', '  }\n', '}']