['pragma solidity ^0.4.25;\n', '\n', '/*\n', '* CryptoMiningWar - Blockchain-based strategy game\n', '* Author: InspiGames\n', '* Website: https://cryptominingwar.github.io/\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', 'interface CryptoMiningWarInterface {\n', '    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n', '    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n', '    function isMiningWarContract() external pure returns(bool);\n', '}\n', 'interface CryptoEngineerInterface {\n', '    function addVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n', '    function subVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n', '\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/);\n', '    function isEngineerContract() external pure returns(bool);\n', '    function calCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/);\n', '    function calCurrentCrystals(address /*_addr*/) external pure returns(uint256 /*_currentCrystals*/);\n', '}\n', 'interface CryptoProgramFactoryInterface {\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n', '    function isProgramFactoryContract() external pure returns(bool);\n', '\n', '    function subPrograms(address /*_addr*/, uint256[] /*_programs*/) external;\n', '    function getData(address _addr) external pure returns(uint256 /*_factoryLevel*/, uint256 /*_factoryTime*/, uint256[] /*memory _programs*/);\n', '    function getProgramsValue() external pure returns(uint256[]);\n', '}\n', 'interface MiniGameInterface {\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n', '    function fallback() external payable;\n', '}\n', 'contract CrryptoArena {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public administrator;\n', '\n', '    uint256 public VIRUS_NORMAL = 0;\n', '    uint256 public HALF_TIME_ATK= 60 * 15;  \n', '    uint256 public CRTSTAL_MINING_PERIOD = 86400;\n', '    uint256 public VIRUS_MINING_PERIOD   = 86400;\n', '    address public engineerAddress;\n', '\n', '    CryptoMiningWarInterface      public MiningWar;\n', '    CryptoEngineerInterface       public Engineer;\n', '    CryptoProgramFactoryInterface public Factory;\n', '\n', '    // factory info\n', '    // player info\n', '    mapping(address => Player) public players;\n', '\n', '    mapping(uint256 => Virus)  public viruses;\n', '     // minigame info\n', '    mapping(address => bool)   public miniGames; \n', '   \n', '    struct Player {\n', '        uint256 virusDef;\n', '        uint256 nextTimeAtk;\n', '        uint256 endTimeUnequalledDef;\n', '    }\n', '    struct Virus {\n', '        uint256 atk;\n', '        uint256 def;\n', '    }\n', '    modifier isAdministrator()\n', '    {\n', '        require(msg.sender == administrator);\n', '        _;\n', '    }\n', '    modifier onlyContractsMiniGame() \n', '    {\n', '        require(miniGames[msg.sender] == true);\n', '        _;\n', '    }\n', '    event Attack(address atkAddress, address defAddress, bool victory, uint256 reward, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round); // 1 : crystals, 2: hashrate, 3: virus\n', '    event Programs(uint256 programLv1, uint256 programLv2, uint256 programLv3, uint256 programLv4);\n', '\n', '    constructor() public {\n', '        administrator = msg.sender;\n', '        // set interface contract\n', '        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\n', '        setEngineerInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\n', '        setFactoryInterface(0x0498e54b6598e96b7a42ade3d238378dc57b5bb2);\n', '\n', '         // setting virusupd\n', '        viruses[VIRUS_NORMAL] = Virus(1,1);\n', '    }\n', '    function () public payable\n', '    {\n', '        \n', '    }\n', '    /** \n', '    * @dev MainContract used this function to verify game&#39;s contract\n', '    */\n', '    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n', '    {\n', '    \t_isContractMiniGame = true;\n', '    }\n', '    function isArenaContract() public pure returns(bool)\n', '    {\n', '        return true;\n', '    }\n', '    function upgrade(address addr) public isAdministrator\n', '    {\n', '        selfdestruct(addr);\n', '    }\n', '    /** \n', '    * @dev Main Contract call this function to setup mini game.\n', '    */\n', '    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\n', '    {\n', '\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    // SETTING CONTRACT MINI GAME \n', '    //--------------------------------------------------------------------------\n', '    function setContractsMiniGame( address _addr ) public isAdministrator \n', '    {\n', '        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n', '        if( MiniGame.isContractMiniGame() == false ) revert(); \n', '\n', '        miniGames[_addr] = true;\n', '    }\n', '    /**\n', '    * @dev remove mini game contract from main contract\n', '    * @param _addr mini game contract address\n', '    */\n', '    function removeContractMiniGame(address _addr) public isAdministrator\n', '    {\n', '        miniGames[_addr] = false;\n', '    }\n', '    // ---------------------------------------------------------------------------------------\n', '    // SET INTERFACE CONTRACT\n', '    // ---------------------------------------------------------------------------------------\n', '    \n', '    function setMiningWarInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n', '\n', '        require(miningWarInterface.isMiningWarContract() == true);\n', '                \n', '        MiningWar = miningWarInterface;\n', '    }\n', '    function setEngineerInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n', '        \n', '        require(engineerInterface.isEngineerContract() == true);\n', '\n', '        engineerAddress = _addr;\n', '\n', '        Engineer = engineerInterface;\n', '    }\n', '    \n', '    function setFactoryInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoProgramFactoryInterface factoryInterface = CryptoProgramFactoryInterface(_addr);\n', '\n', '        Factory = factoryInterface;\n', '    }\n', '\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // FUCTION FOR NEXT VERSION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    /**\n', '    * @dev additional time unequalled defence \n', '    * @param _addr player address \n', '    */\n', '    function setAtkNowForPlayer(address _addr) public onlyContractsMiniGame\n', '    {\n', '        Player storage p = players[_addr];\n', '        p.nextTimeAtk = now;\n', '    }\n', '    function setPlayerVirusDef(address _addr, uint256 _value) public onlyContractsMiniGame\n', '    {     \n', '        players[_addr].virusDef = SafeMath.mul(_value, VIRUS_MINING_PERIOD);\n', '    } \n', '    function addVirusDef(address _addr, uint256 _virus) public\n', '    {\n', '        require(miniGames[msg.sender] == true || msg.sender == _addr);\n', '\n', '        Engineer.subVirus(_addr, _virus);\n', '\n', '        Player storage p = players[_addr];\n', '\n', '        p.virusDef += SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n', '    }\n', '    function subVirusDef(address _addr, uint256 _virus) public onlyContractsMiniGame\n', '    {        \n', '        _virus = SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n', '        require(players[_addr].virusDef >= _virus);\n', '\n', '        Player storage p = players[_addr];\n', '\n', '        p.virusDef -= _virus;\n', '    }\n', '    function addTimeUnequalledDefence(address _addr, uint256 _value) public onlyContractsMiniGame\n', '    {\n', '        Player storage p = players[_addr];\n', '        uint256 currentTimeUnequalled = p.endTimeUnequalledDef;\n', '        if (currentTimeUnequalled < now) currentTimeUnequalled = now;\n', '        \n', '        p.endTimeUnequalledDef = SafeMath.add(currentTimeUnequalled, _value);\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // MAIN CONTENT\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function setVirusInfo(uint256 _atk, uint256 _def) public isAdministrator\n', '    {\n', '        Virus storage v = viruses[VIRUS_NORMAL];\n', '        v.atk = _atk;\n', '        v.def = _def;\n', '    }\n', '\n', '    /**\n', '    * @dev ATTACK\n', '    * _programs[0]: + 10% _virus;\n', '    * _programs[1]: revival 15 % _virus if this atk lose(not use item before)\n', '    * _programs[2]: + 20% dame\n', '    * _programs[3]: -5% virus defence of player you want attack\n', '    */\n', '    function attack(address _defAddress, uint256 _virus, uint256[] _programs) public\n', '    {\n', '        require(validateAttack(msg.sender, _defAddress) == true);\n', '        require(_programs.length == 4);\n', '        require(validatePrograms(_programs) == true);\n', '\n', '        Factory.subPrograms(msg.sender, _programs);\n', '\n', '        players[msg.sender].nextTimeAtk = now + HALF_TIME_ATK;\n', '\n', '        if (players[_defAddress].virusDef == 0) return endAttack(_defAddress, true, 0, 0, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), 0, 1, _programs);\n', '\n', '        Engineer.subVirus(msg.sender, _virus);\n', '\n', '        uint256[] memory programsValue = Factory.getProgramsValue(); \n', '\n', '        bool victory;\n', '        uint256 atk;\n', '        uint256 def;\n', '        uint256 virusAtkDead;\n', '        uint256 virusDefDead;   \n', '        \n', '        (victory, atk, def, virusAtkDead, virusDefDead) = firstAttack(_defAddress, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), _programs, programsValue);\n', '\n', '        endAttack(_defAddress, victory, SafeMath.div(virusAtkDead, VIRUS_MINING_PERIOD), SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 1, _programs);\n', '\n', '        if (_programs[1] == 1 && victory == false)  \n', '            againAttack(_defAddress, SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, VIRUS_MINING_PERIOD), programsValue[1]), 100)); // revival 15 % _virus if this atk lose(not use item before)\n', '    }\n', '    function firstAttack(address _defAddress, uint256 _virus, uint256[] _programs, uint256[] programsValue) \n', '    private \n', '    returns(\n', '        bool victory,\n', '        uint256 atk,\n', '        uint256 def,\n', '        uint256 virusAtkDead,\n', '        uint256 virusDefDead        \n', '        )\n', '    {\n', '        Player storage pDef = players[_defAddress];\n', '\n', '        atk             = _virus; \n', '        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n', '        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n', '\n', '        if (_programs[0] == 1) // + 10% _virus;\n', '            atk += SafeMath.div(SafeMath.mul(atk, programsValue[0]), 100); \n', '        if (_programs[3] == 1) // -5% virus defence of player you want attack\n', '            pDef.virusDef = SafeMath.sub(pDef.virusDef, SafeMath.div(SafeMath.mul(pDef.virusDef, programsValue[3]), 100)); \n', '            \n', '        atk = SafeMath.div(SafeMath.mul(SafeMath.mul(atk, viruses[VIRUS_NORMAL].atk), rateAtk), 100);\n', '        def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, viruses[VIRUS_NORMAL].def), rateDef), 100);\n', '\n', '        if (_programs[2] == 1)  //+ 20% dame\n', '            atk += SafeMath.div(SafeMath.mul(atk, programsValue[2]), 100);\n', '\n', '        if (atk >= def) {\n', '            virusAtkDead = SafeMath.min(_virus, SafeMath.div(SafeMath.mul(def, 100), SafeMath.mul(viruses[VIRUS_NORMAL].atk, rateAtk)));\n', '            virusDefDead = pDef.virusDef;\n', '            victory      = true;\n', '        } else {\n', '            virusAtkDead = _virus;\n', '            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(viruses[VIRUS_NORMAL].def, rateDef)));\n', '        }\n', '\n', '        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n', '\n', '        if (_virus > virusAtkDead) \n', '            Engineer.addVirus(msg.sender, SafeMath.div(SafeMath.sub(_virus, virusAtkDead), VIRUS_MINING_PERIOD));\n', '\n', '    }\n', '    function againAttack(address _defAddress, uint256 _virus) private returns(bool victory)\n', '    {\n', '        Player storage pDef = players[_defAddress];\n', '        // virus normal info\n', '        Virus memory v = viruses[VIRUS_NORMAL];\n', '\n', '        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n', '        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n', '\n', '        uint256 atk = SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, v.atk), rateAtk), 100);\n', '        uint256 def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, v.def), rateDef), 100);\n', '        uint256 virusDefDead = 0;\n', '        uint256[] memory programs;\n', '        if (atk >= def) {\n', '            virusDefDead = pDef.virusDef;\n', '            victory = true;\n', '        } else {\n', '            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(v.def, rateDef)));\n', '        }\n', '\n', '        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n', '\n', '        endAttack(_defAddress, victory, 0,  SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 2, programs);\n', '    }\n', '    function endAttack(address _defAddress, bool victory, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round, uint256[] programs) private \n', '    {\n', '        uint256 reward = 0;\n', '        if (victory == true) {\n', '            uint256 pDefCrystals = Engineer.calCurrentCrystals(_defAddress);\n', '            // subtract random 10% to 50% current crystals of player defence\n', '            uint256 rate = 10 + randomNumber(_defAddress, pDefCrystals, 41);\n', '            reward = SafeMath.div(SafeMath.mul(pDefCrystals, rate),100);\n', '\n', '            if (reward > 0) {\n', '                MiningWar.subCrystal(_defAddress, reward);    \n', '                MiningWar.addCrystal(msg.sender, reward);\n', '            }\n', '        }\n', '        emit Attack(msg.sender, _defAddress, victory, reward, virusAtkDead, virusDefDead, atk, def, round);\n', '        if (round == 1) emit Programs( programs[0], programs[1], programs[2], programs[3]);\n', '    }\n', '    function validateAttack(address _atkAddress, address _defAddress) private view returns(bool _status) \n', '    {\n', '        if (\n', '            _atkAddress != _defAddress &&\n', '            players[_atkAddress].nextTimeAtk <= now &&\n', '            canAttack(_defAddress) == true\n', '            ) {\n', '            _status = true;\n', '        }\n', '    } \n', '    function validatePrograms(uint256[] _programs) private view returns(bool _status)\n', '    {\n', '        _status = true;\n', '        for(uint256 idx = 0; idx < _programs.length; idx++) {\n', '            if (_programs[idx] != 0 && _programs[idx] != 1) _status = false;\n', '        }\n', '    }\n', '    function canAttack(address _addr) private view returns(bool _canAtk)\n', '    {\n', '        if ( \n', '            players[_addr].endTimeUnequalledDef < now &&\n', '            Engineer.calCurrentCrystals(_addr) >= 5000\n', '            ) {\n', '            _canAtk = true;\n', '        }\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // CALL FUNCTION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function getData(address _addr) \n', '    public\n', '    view\n', '    returns(\n', '        uint256 _virusDef,\n', '        uint256 _nextTimeAtk,\n', '        uint256 _endTimeUnequalledDef,\n', '        bool    _canAtk,\n', '        // engineer\n', '        uint256 _currentVirus, \n', '        // mingin war\n', '        uint256 _currentCrystals\n', '    ) {\n', '        Player memory p      = players[_addr];\n', '        _virusDef            = SafeMath.div(p.virusDef, VIRUS_MINING_PERIOD);\n', '        _nextTimeAtk         = p.nextTimeAtk;\n', '        _endTimeUnequalledDef= p.endTimeUnequalledDef;\n', '        _currentVirus        = SafeMath.div(Engineer.calCurrentVirus(_addr), VIRUS_MINING_PERIOD);\n', '        _currentCrystals     = Engineer.calCurrentCrystals(_addr);\n', '        _canAtk              = canAttack(_addr);\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // INTERNAL FUNCTION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function randomNumber(address _addr, uint256 randNonce, uint256 _maxNumber) private view returns(uint256)\n', '    {\n', '        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '/*\n', '* CryptoMiningWar - Blockchain-based strategy game\n', '* Author: InspiGames\n', '* Website: https://cryptominingwar.github.io/\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', 'interface CryptoMiningWarInterface {\n', '    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n', '    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) external pure;\n', '    function isMiningWarContract() external pure returns(bool);\n', '}\n', 'interface CryptoEngineerInterface {\n', '    function addVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n', '    function subVirus(address /*_addr*/, uint256 /*_value*/) external pure;\n', '\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/);\n', '    function isEngineerContract() external pure returns(bool);\n', '    function calCurrentVirus(address /*_addr*/) external view returns(uint256 /*_currentVirus*/);\n', '    function calCurrentCrystals(address /*_addr*/) external pure returns(uint256 /*_currentCrystals*/);\n', '}\n', 'interface CryptoProgramFactoryInterface {\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n', '    function isProgramFactoryContract() external pure returns(bool);\n', '\n', '    function subPrograms(address /*_addr*/, uint256[] /*_programs*/) external;\n', '    function getData(address _addr) external pure returns(uint256 /*_factoryLevel*/, uint256 /*_factoryTime*/, uint256[] /*memory _programs*/);\n', '    function getProgramsValue() external pure returns(uint256[]);\n', '}\n', 'interface MiniGameInterface {\n', '    function isContractMiniGame() external pure returns( bool /*_isContractMiniGame*/ );\n', '    function fallback() external payable;\n', '}\n', 'contract CrryptoArena {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public administrator;\n', '\n', '    uint256 public VIRUS_NORMAL = 0;\n', '    uint256 public HALF_TIME_ATK= 60 * 15;  \n', '    uint256 public CRTSTAL_MINING_PERIOD = 86400;\n', '    uint256 public VIRUS_MINING_PERIOD   = 86400;\n', '    address public engineerAddress;\n', '\n', '    CryptoMiningWarInterface      public MiningWar;\n', '    CryptoEngineerInterface       public Engineer;\n', '    CryptoProgramFactoryInterface public Factory;\n', '\n', '    // factory info\n', '    // player info\n', '    mapping(address => Player) public players;\n', '\n', '    mapping(uint256 => Virus)  public viruses;\n', '     // minigame info\n', '    mapping(address => bool)   public miniGames; \n', '   \n', '    struct Player {\n', '        uint256 virusDef;\n', '        uint256 nextTimeAtk;\n', '        uint256 endTimeUnequalledDef;\n', '    }\n', '    struct Virus {\n', '        uint256 atk;\n', '        uint256 def;\n', '    }\n', '    modifier isAdministrator()\n', '    {\n', '        require(msg.sender == administrator);\n', '        _;\n', '    }\n', '    modifier onlyContractsMiniGame() \n', '    {\n', '        require(miniGames[msg.sender] == true);\n', '        _;\n', '    }\n', '    event Attack(address atkAddress, address defAddress, bool victory, uint256 reward, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round); // 1 : crystals, 2: hashrate, 3: virus\n', '    event Programs(uint256 programLv1, uint256 programLv2, uint256 programLv3, uint256 programLv4);\n', '\n', '    constructor() public {\n', '        administrator = msg.sender;\n', '        // set interface contract\n', '        setMiningWarInterface(0x1b002cd1ba79dfad65e8abfbb3a97826e4960fe5);\n', '        setEngineerInterface(0xd7afbf5141a7f1d6b0473175f7a6b0a7954ed3d2);\n', '        setFactoryInterface(0x0498e54b6598e96b7a42ade3d238378dc57b5bb2);\n', '\n', '         // setting virusupd\n', '        viruses[VIRUS_NORMAL] = Virus(1,1);\n', '    }\n', '    function () public payable\n', '    {\n', '        \n', '    }\n', '    /** \n', "    * @dev MainContract used this function to verify game's contract\n", '    */\n', '    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n', '    {\n', '    \t_isContractMiniGame = true;\n', '    }\n', '    function isArenaContract() public pure returns(bool)\n', '    {\n', '        return true;\n', '    }\n', '    function upgrade(address addr) public isAdministrator\n', '    {\n', '        selfdestruct(addr);\n', '    }\n', '    /** \n', '    * @dev Main Contract call this function to setup mini game.\n', '    */\n', '    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\n', '    {\n', '\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    // SETTING CONTRACT MINI GAME \n', '    //--------------------------------------------------------------------------\n', '    function setContractsMiniGame( address _addr ) public isAdministrator \n', '    {\n', '        MiniGameInterface MiniGame = MiniGameInterface( _addr );\n', '        if( MiniGame.isContractMiniGame() == false ) revert(); \n', '\n', '        miniGames[_addr] = true;\n', '    }\n', '    /**\n', '    * @dev remove mini game contract from main contract\n', '    * @param _addr mini game contract address\n', '    */\n', '    function removeContractMiniGame(address _addr) public isAdministrator\n', '    {\n', '        miniGames[_addr] = false;\n', '    }\n', '    // ---------------------------------------------------------------------------------------\n', '    // SET INTERFACE CONTRACT\n', '    // ---------------------------------------------------------------------------------------\n', '    \n', '    function setMiningWarInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoMiningWarInterface miningWarInterface = CryptoMiningWarInterface(_addr);\n', '\n', '        require(miningWarInterface.isMiningWarContract() == true);\n', '                \n', '        MiningWar = miningWarInterface;\n', '    }\n', '    function setEngineerInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n', '        \n', '        require(engineerInterface.isEngineerContract() == true);\n', '\n', '        engineerAddress = _addr;\n', '\n', '        Engineer = engineerInterface;\n', '    }\n', '    \n', '    function setFactoryInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoProgramFactoryInterface factoryInterface = CryptoProgramFactoryInterface(_addr);\n', '\n', '        Factory = factoryInterface;\n', '    }\n', '\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // FUCTION FOR NEXT VERSION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    /**\n', '    * @dev additional time unequalled defence \n', '    * @param _addr player address \n', '    */\n', '    function setAtkNowForPlayer(address _addr) public onlyContractsMiniGame\n', '    {\n', '        Player storage p = players[_addr];\n', '        p.nextTimeAtk = now;\n', '    }\n', '    function setPlayerVirusDef(address _addr, uint256 _value) public onlyContractsMiniGame\n', '    {     \n', '        players[_addr].virusDef = SafeMath.mul(_value, VIRUS_MINING_PERIOD);\n', '    } \n', '    function addVirusDef(address _addr, uint256 _virus) public\n', '    {\n', '        require(miniGames[msg.sender] == true || msg.sender == _addr);\n', '\n', '        Engineer.subVirus(_addr, _virus);\n', '\n', '        Player storage p = players[_addr];\n', '\n', '        p.virusDef += SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n', '    }\n', '    function subVirusDef(address _addr, uint256 _virus) public onlyContractsMiniGame\n', '    {        \n', '        _virus = SafeMath.mul(_virus, VIRUS_MINING_PERIOD);\n', '        require(players[_addr].virusDef >= _virus);\n', '\n', '        Player storage p = players[_addr];\n', '\n', '        p.virusDef -= _virus;\n', '    }\n', '    function addTimeUnequalledDefence(address _addr, uint256 _value) public onlyContractsMiniGame\n', '    {\n', '        Player storage p = players[_addr];\n', '        uint256 currentTimeUnequalled = p.endTimeUnequalledDef;\n', '        if (currentTimeUnequalled < now) currentTimeUnequalled = now;\n', '        \n', '        p.endTimeUnequalledDef = SafeMath.add(currentTimeUnequalled, _value);\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // MAIN CONTENT\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function setVirusInfo(uint256 _atk, uint256 _def) public isAdministrator\n', '    {\n', '        Virus storage v = viruses[VIRUS_NORMAL];\n', '        v.atk = _atk;\n', '        v.def = _def;\n', '    }\n', '\n', '    /**\n', '    * @dev ATTACK\n', '    * _programs[0]: + 10% _virus;\n', '    * _programs[1]: revival 15 % _virus if this atk lose(not use item before)\n', '    * _programs[2]: + 20% dame\n', '    * _programs[3]: -5% virus defence of player you want attack\n', '    */\n', '    function attack(address _defAddress, uint256 _virus, uint256[] _programs) public\n', '    {\n', '        require(validateAttack(msg.sender, _defAddress) == true);\n', '        require(_programs.length == 4);\n', '        require(validatePrograms(_programs) == true);\n', '\n', '        Factory.subPrograms(msg.sender, _programs);\n', '\n', '        players[msg.sender].nextTimeAtk = now + HALF_TIME_ATK;\n', '\n', '        if (players[_defAddress].virusDef == 0) return endAttack(_defAddress, true, 0, 0, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), 0, 1, _programs);\n', '\n', '        Engineer.subVirus(msg.sender, _virus);\n', '\n', '        uint256[] memory programsValue = Factory.getProgramsValue(); \n', '\n', '        bool victory;\n', '        uint256 atk;\n', '        uint256 def;\n', '        uint256 virusAtkDead;\n', '        uint256 virusDefDead;   \n', '        \n', '        (victory, atk, def, virusAtkDead, virusDefDead) = firstAttack(_defAddress, SafeMath.mul(_virus, VIRUS_MINING_PERIOD), _programs, programsValue);\n', '\n', '        endAttack(_defAddress, victory, SafeMath.div(virusAtkDead, VIRUS_MINING_PERIOD), SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 1, _programs);\n', '\n', '        if (_programs[1] == 1 && victory == false)  \n', '            againAttack(_defAddress, SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, VIRUS_MINING_PERIOD), programsValue[1]), 100)); // revival 15 % _virus if this atk lose(not use item before)\n', '    }\n', '    function firstAttack(address _defAddress, uint256 _virus, uint256[] _programs, uint256[] programsValue) \n', '    private \n', '    returns(\n', '        bool victory,\n', '        uint256 atk,\n', '        uint256 def,\n', '        uint256 virusAtkDead,\n', '        uint256 virusDefDead        \n', '        )\n', '    {\n', '        Player storage pDef = players[_defAddress];\n', '\n', '        atk             = _virus; \n', '        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n', '        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n', '\n', '        if (_programs[0] == 1) // + 10% _virus;\n', '            atk += SafeMath.div(SafeMath.mul(atk, programsValue[0]), 100); \n', '        if (_programs[3] == 1) // -5% virus defence of player you want attack\n', '            pDef.virusDef = SafeMath.sub(pDef.virusDef, SafeMath.div(SafeMath.mul(pDef.virusDef, programsValue[3]), 100)); \n', '            \n', '        atk = SafeMath.div(SafeMath.mul(SafeMath.mul(atk, viruses[VIRUS_NORMAL].atk), rateAtk), 100);\n', '        def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, viruses[VIRUS_NORMAL].def), rateDef), 100);\n', '\n', '        if (_programs[2] == 1)  //+ 20% dame\n', '            atk += SafeMath.div(SafeMath.mul(atk, programsValue[2]), 100);\n', '\n', '        if (atk >= def) {\n', '            virusAtkDead = SafeMath.min(_virus, SafeMath.div(SafeMath.mul(def, 100), SafeMath.mul(viruses[VIRUS_NORMAL].atk, rateAtk)));\n', '            virusDefDead = pDef.virusDef;\n', '            victory      = true;\n', '        } else {\n', '            virusAtkDead = _virus;\n', '            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(viruses[VIRUS_NORMAL].def, rateDef)));\n', '        }\n', '\n', '        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n', '\n', '        if (_virus > virusAtkDead) \n', '            Engineer.addVirus(msg.sender, SafeMath.div(SafeMath.sub(_virus, virusAtkDead), VIRUS_MINING_PERIOD));\n', '\n', '    }\n', '    function againAttack(address _defAddress, uint256 _virus) private returns(bool victory)\n', '    {\n', '        Player storage pDef = players[_defAddress];\n', '        // virus normal info\n', '        Virus memory v = viruses[VIRUS_NORMAL];\n', '\n', '        uint256 rateAtk = 50 + randomNumber(msg.sender, 1, 101);\n', '        uint256 rateDef = 50 + randomNumber(_defAddress, rateAtk, 101);\n', '\n', '        uint256 atk = SafeMath.div(SafeMath.mul(SafeMath.mul(_virus, v.atk), rateAtk), 100);\n', '        uint256 def = SafeMath.div(SafeMath.mul(SafeMath.mul(pDef.virusDef, v.def), rateDef), 100);\n', '        uint256 virusDefDead = 0;\n', '        uint256[] memory programs;\n', '        if (atk >= def) {\n', '            virusDefDead = pDef.virusDef;\n', '            victory = true;\n', '        } else {\n', '            virusDefDead = SafeMath.min(pDef.virusDef, SafeMath.div(SafeMath.mul(atk, 100), SafeMath.mul(v.def, rateDef)));\n', '        }\n', '\n', '        pDef.virusDef = SafeMath.sub(pDef.virusDef, virusDefDead);\n', '\n', '        endAttack(_defAddress, victory, 0,  SafeMath.div(virusDefDead, VIRUS_MINING_PERIOD), atk, def, 2, programs);\n', '    }\n', '    function endAttack(address _defAddress, bool victory, uint256 virusAtkDead, uint256 virusDefDead, uint256 atk, uint256 def, uint256 round, uint256[] programs) private \n', '    {\n', '        uint256 reward = 0;\n', '        if (victory == true) {\n', '            uint256 pDefCrystals = Engineer.calCurrentCrystals(_defAddress);\n', '            // subtract random 10% to 50% current crystals of player defence\n', '            uint256 rate = 10 + randomNumber(_defAddress, pDefCrystals, 41);\n', '            reward = SafeMath.div(SafeMath.mul(pDefCrystals, rate),100);\n', '\n', '            if (reward > 0) {\n', '                MiningWar.subCrystal(_defAddress, reward);    \n', '                MiningWar.addCrystal(msg.sender, reward);\n', '            }\n', '        }\n', '        emit Attack(msg.sender, _defAddress, victory, reward, virusAtkDead, virusDefDead, atk, def, round);\n', '        if (round == 1) emit Programs( programs[0], programs[1], programs[2], programs[3]);\n', '    }\n', '    function validateAttack(address _atkAddress, address _defAddress) private view returns(bool _status) \n', '    {\n', '        if (\n', '            _atkAddress != _defAddress &&\n', '            players[_atkAddress].nextTimeAtk <= now &&\n', '            canAttack(_defAddress) == true\n', '            ) {\n', '            _status = true;\n', '        }\n', '    } \n', '    function validatePrograms(uint256[] _programs) private view returns(bool _status)\n', '    {\n', '        _status = true;\n', '        for(uint256 idx = 0; idx < _programs.length; idx++) {\n', '            if (_programs[idx] != 0 && _programs[idx] != 1) _status = false;\n', '        }\n', '    }\n', '    function canAttack(address _addr) private view returns(bool _canAtk)\n', '    {\n', '        if ( \n', '            players[_addr].endTimeUnequalledDef < now &&\n', '            Engineer.calCurrentCrystals(_addr) >= 5000\n', '            ) {\n', '            _canAtk = true;\n', '        }\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // CALL FUNCTION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function getData(address _addr) \n', '    public\n', '    view\n', '    returns(\n', '        uint256 _virusDef,\n', '        uint256 _nextTimeAtk,\n', '        uint256 _endTimeUnequalledDef,\n', '        bool    _canAtk,\n', '        // engineer\n', '        uint256 _currentVirus, \n', '        // mingin war\n', '        uint256 _currentCrystals\n', '    ) {\n', '        Player memory p      = players[_addr];\n', '        _virusDef            = SafeMath.div(p.virusDef, VIRUS_MINING_PERIOD);\n', '        _nextTimeAtk         = p.nextTimeAtk;\n', '        _endTimeUnequalledDef= p.endTimeUnequalledDef;\n', '        _currentVirus        = SafeMath.div(Engineer.calCurrentVirus(_addr), VIRUS_MINING_PERIOD);\n', '        _currentCrystals     = Engineer.calCurrentCrystals(_addr);\n', '        _canAtk              = canAttack(_addr);\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // INTERNAL FUNCTION\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function randomNumber(address _addr, uint256 randNonce, uint256 _maxNumber) private view returns(uint256)\n', '    {\n', '        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\n', '    }\n', '}']
