['/**\n', ' * Source Code first verified at https://etherscan.io on Friday, May 10, 2019\n', ' (UTC) */\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '/**\n', '*\n', '* MAVRO.ORG\n', '*\n', '* Telegram_channel -  https://t.me/Mavro_MMM\n', '* Chat RU:            https://t.me/mavroorg\n', '* CHAT International: https://t.me/mavro_international\n', '* Twitter          -  https://twitter.com/Sergey_Mavrody\n', '* VK               -  https://vk.com/mavro_official\n', '*\n', '*  - GAIN PER 24 HOURS:\n', '*     -- Contract balance  < 200 Ether: 0.7 %\n', '*     -- Contract balance >= 200 Ether: 0.8 %\n', '*     -- Contract balance >= 400 Ether: 0.9 %\n', '*     -- Contract balance >= 600 Ether: 1 %\n', '*     -- Contract balance >= 800 Ether: 1.1 %\n', '*     -- Contract balance >= 1000 Ether: 1.2 %\n', '*  - Life-long payments\n', '*  - Minimal contribution 0.01 eth\n', '*  - Currency and payment - ETH\n', '*  - Contribution allocation schemes:\n', '*    -- 85% payments\n', '*    -- 15% Marketing + Operating Expenses\n', '*\n', '* ---How to use:\n', '*  1. Send from ETH wallet to the smart contract address\n', '*     any amount from 0.01 ETH.\n', '*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address\n', '*     of your wallet.\n', "*  3. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're\n", '*      spending too much on GAS)\n', '*\n', '* RECOMMENDED GAS LIMIT: 150000\n', '* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', '* You can check the payments on the etherscan.io site, in the "Internal Txns" tab of your wallet.\n', '*\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Percent {\n', '\n', '  struct percent {\n', '    uint num;\n', '    uint den;\n', '  }\n', '  function mul(percent storage p, uint a) internal view returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    return a*p.num/p.den;\n', '  }\n', '\n', '  function div(percent storage p, uint a) internal view returns (uint) {\n', '    return a/p.num*p.den;\n', '  }\n', '\n', '  function sub(percent storage p, uint a) internal view returns (uint) {\n', '    uint b = mul(p, a);\n', '    if (b >= a) return 0;\n', '    return a - b;\n', '  }\n', '\n', '  function add(percent storage p, uint a) internal view returns (uint) {\n', '    return a + mul(p, a);\n', '  }\n', '}\n', '\n', 'contract MavroOrg{\n', '\n', '    using SafeMath for uint;\n', '    using Percent for Percent.percent;\n', '    // array containing information about beneficiaries\n', '    mapping (address => uint) public balances;\n', '    //array containing information about the time of payment\n', '    mapping (address => uint) public time;\n', '\n', '    //The marks of the balance on the contract after which the percentage of payments will change\n', '    uint step1 = 200;\n', '    uint step2 = 400;\n', '    uint step3 = 600;\n', '    uint step4 = 800;\n', '    uint step5 = 1000;\n', '\n', '    //the time through which dividends will be paid\n', '    uint dividendsTime = 1 days;\n', '\n', '    event NewInvestor(address indexed investor, uint deposit);\n', '    event PayOffDividends(address indexed investor, uint value);\n', '    event NewDeposit(address indexed investor, uint value);\n', '\n', '    uint public allDeposits;\n', '    uint public allPercents;\n', '    uint public allBeneficiaries;\n', '    uint public lastPayment;\n', '\n', '    uint public constant minInvesment = 10 finney;\n', '\n', '    address public commissionAddr = 0x2eB660298263C5dd82b857EA26360dacd5fbB34d;\n', '\n', '    Percent.percent private m_adminPercent = Percent.percent(15, 100);\n', '\n', '    /**\n', '     * The modifier checking the positive balance of the beneficiary\n', '    */\n', '    modifier isIssetRecepient(){\n', '        require(balances[msg.sender] > 0, "Deposit not found");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * modifier checking the next payout time\n', '     */\n', '    modifier timeCheck(){\n', '         require(now >= time[msg.sender].add(dividendsTime), "Too fast payout request. The time of payment has not yet come");\n', '         _;\n', '    }\n', '\n', '    function getDepositMultiplier()public view returns(uint){\n', '        uint percent = getPercent();\n', '\n', '        uint rate = balances[msg.sender].mul(percent).div(10000);\n', '\n', '        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\n', '\n', '        return(rate.mul(depositMultiplier));\n', '    }\n', '\n', '    function receivePayment()isIssetRecepient timeCheck private{\n', '\n', '        uint depositMultiplier = getDepositMultiplier();\n', '        time[msg.sender] = now;\n', '        msg.sender.transfer(depositMultiplier);\n', '\n', '        allPercents+=depositMultiplier;\n', '        lastPayment =now;\n', '        emit PayOffDividends(msg.sender, depositMultiplier);\n', '    }\n', '\n', '    /**\n', '     * @return bool\n', '     */\n', '    function authorizationPayment()public view returns(bool){\n', '\n', '        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\n', '            return (true);\n', '        }else{\n', '            return(false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return uint percent\n', '     */\n', '    function getPercent() public view returns(uint){\n', '\n', '        uint contractBalance = address(this).balance;\n', '\n', '        uint balanceStep1 = step1.mul(1 ether);\n', '        uint balanceStep2 = step2.mul(1 ether);\n', '        uint balanceStep3 = step3.mul(1 ether);\n', '        uint balanceStep4 = step4.mul(1 ether);\n', '        uint balanceStep5 = step5.mul(1 ether);\n', '\n', '        if(contractBalance < balanceStep1){\n', '            return(70);\n', '        }\n', '        if(contractBalance >= balanceStep1 && contractBalance < balanceStep2){\n', '            return(80);\n', '        }\n', '        if(contractBalance >= balanceStep2 && contractBalance < balanceStep3){\n', '            return(90);\n', '        }\n', '        if(contractBalance >= balanceStep3 && contractBalance < balanceStep4){\n', '            return(100);\n', '        }\n', '        if(contractBalance >= balanceStep4 && contractBalance < balanceStep5){\n', '            return(110);\n', '        }\n', '        if(contractBalance >= balanceStep5){\n', '            return(120);\n', '        }\n', '    }\n', '\n', '    function createDeposit() private{\n', '\n', '        if(msg.value > 0){\n', '\n', '            require(msg.value >= minInvesment, "msg.value must be >= minInvesment");\n', '\n', '            if (balances[msg.sender] == 0){\n', '                emit NewInvestor(msg.sender, msg.value);\n', '                allBeneficiaries+=1;\n', '            }\n', '\n', '            // commission\n', '            commissionAddr.transfer(m_adminPercent.mul(msg.value));\n', '\n', '            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\n', '                receivePayment();\n', '            }\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '            time[msg.sender] = now;\n', '\n', '            allDeposits+=msg.value;\n', '            emit NewDeposit(msg.sender, msg.value);\n', '\n', '        }else{\n', '            receivePayment();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * function that is launched when transferring money to a contract\n', '     */\n', '    function() external payable{\n', '        createDeposit();\n', '    }\n', '}']