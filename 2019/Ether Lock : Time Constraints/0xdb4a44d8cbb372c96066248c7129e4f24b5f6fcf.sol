['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    // safeApprove should only be called when setting an initial allowance, \n', '    // or when resetting it to zero. To increase and decrease it, use \n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '    require(token.approve(spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/access/RBACManager.sol\n', '\n', 'contract RBACManager is Ownable {\n', '  using Roles for Roles.Role;\n', '\n', '  event ManagerAdded(address indexed account);\n', '  event ManagerRemoved(address indexed account);\n', '\n', '  Roles.Role private managers;\n', '\n', '  modifier onlyOwnerOrManager() {\n', '    require(\n', '      msg.sender == owner() || isManager(msg.sender),\n', '      "unauthorized"\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    addManager(msg.sender);\n', '  }\n', '\n', '  function isManager(address account) public view returns (bool) {\n', '    return managers.has(account);\n', '  }\n', '\n', '  function addManager(address account) public onlyOwner {\n', '    managers.add(account);\n', '    emit ManagerAdded(account);\n', '  }\n', '\n', '  function removeManager(address account) public onlyOwner {\n', '    managers.remove(account);\n', '    emit ManagerRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/CharityProject.sol\n', '\n', 'contract CharityProject is RBACManager {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  modifier canWithdraw() {\n', '    require(\n', '      _canWithdrawBeforeEnd || _closingTime == 0 || block.timestamp > _closingTime, // solium-disable-line security/no-block-members\n', '      "can\'t withdraw");\n', '    _;\n', '  }\n', '\n', '  uint256 private _feeInMillis;\n', '  uint256 private _withdrawnTokens;\n', '  uint256 private _withdrawnFees;\n', '  uint256 private _maxGoal;\n', '  uint256 private _openingTime;\n', '  uint256 private _closingTime;\n', '  address private _wallet;\n', '  IERC20 private _token;\n', '  bool private _canWithdrawBeforeEnd;\n', '\n', '  constructor (\n', '    uint256 feeInMillis,\n', '    uint256 maxGoal,\n', '    uint256 openingTime,\n', '    uint256 closingTime,\n', '    address wallet,\n', '    IERC20 token,\n', '    bool canWithdrawBeforeEnd,\n', '    address additionalManager\n', '  ) public {\n', '    require(wallet != address(0), "wallet can\'t be zero");\n', '    require(token != address(0), "token can\'t be zero");\n', '    require(\n', '      closingTime == 0 || closingTime >= openingTime,\n', '      "wrong value for closingTime"\n', '    );\n', '\n', '    _feeInMillis = feeInMillis;\n', '    _maxGoal = maxGoal;\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '    _wallet = wallet;\n', '    _token = token;\n', '    _canWithdrawBeforeEnd = canWithdrawBeforeEnd;\n', '\n', '    if (_wallet != owner()) {\n', '      addManager(_wallet);\n', '    }\n', '\n', '    // solium-disable-next-line max-len\n', '    if (additionalManager != address(0) && additionalManager != owner() && additionalManager != _wallet) {\n', '      addManager(additionalManager);\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // GETTERS\n', '  // -----------------------------------------\n', '\n', '  function feeInMillis() public view returns(uint256) {\n', '    return _feeInMillis;\n', '  }\n', '\n', '  function withdrawnTokens() public view returns(uint256) {\n', '    return _withdrawnTokens;\n', '  }\n', '\n', '  function withdrawnFees() public view returns(uint256) {\n', '    return _withdrawnFees;\n', '  }\n', '\n', '  function maxGoal() public view returns(uint256) {\n', '    return _maxGoal;\n', '  }\n', '\n', '  function openingTime() public view returns(uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  function closingTime() public view returns(uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  function canWithdrawBeforeEnd() public view returns(bool) {\n', '    return _canWithdrawBeforeEnd;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // SETTERS\n', '  // -----------------------------------------\n', '\n', '  function setMaxGoal(uint256 newMaxGoal) public onlyOwner {\n', '    _maxGoal = newMaxGoal;\n', '  }\n', '\n', '  function setTimes(\n', '    uint256 newOpeningTime,\n', '    uint256 newClosingTime\n', '  )\n', '  public\n', '  onlyOwner\n', '  {\n', '    require(\n', '      newClosingTime == 0 || newClosingTime >= newOpeningTime,\n', '      "wrong value for closingTime"\n', '    );\n', '\n', '    _openingTime = newOpeningTime;\n', '    _closingTime = newClosingTime;\n', '  }\n', '\n', '  function setCanWithdrawBeforeEnd(\n', '    bool newCanWithdrawBeforeEnd\n', '  )\n', '  public\n', '  onlyOwner\n', '  {\n', '    _canWithdrawBeforeEnd = newCanWithdrawBeforeEnd;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // CHECKS\n', '  // -----------------------------------------\n', '\n', '  function totalRaised() public view returns (uint256) {\n', '    uint256 raised = _token.balanceOf(this);\n', '    return raised.add(_withdrawnTokens).add(_withdrawnFees);\n', '  }\n', '\n', '  function totalFee() public view returns (uint256) {\n', '    return totalRaised().mul(_feeInMillis).div(1000);\n', '  }\n', '\n', '  function hasStarted() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return _openingTime == 0 ? true : block.timestamp > _openingTime;\n', '  }\n', '\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return _closingTime == 0 ? false : block.timestamp > _closingTime;\n', '  }\n', '\n', '  function maxGoalReached() public view returns (bool) {\n', '    return totalRaised() >= _maxGoal;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // ACTIONS\n', '  // -----------------------------------------\n', '\n', '  function withdrawTokens(\n', '    address to,\n', '    uint256 value\n', '  )\n', '  public\n', '  onlyOwnerOrManager\n', '  canWithdraw\n', '  {\n', '    uint256 expectedTotalWithdraw = _withdrawnTokens.add(value);\n', '    require(\n', '      expectedTotalWithdraw <= totalRaised().sub(totalFee()),\n', '      "can\'t withdraw more than available token"\n', '    );\n', '    _withdrawnTokens = expectedTotalWithdraw;\n', '    _token.safeTransfer(to, value);\n', '  }\n', '\n', '  function withdrawFees(\n', '    address to,\n', '    uint256 value\n', '  )\n', '  public\n', '  onlyOwner\n', '  canWithdraw\n', '  {\n', '    uint256 expectedTotalWithdraw = _withdrawnFees.add(value);\n', '    require(\n', '      expectedTotalWithdraw <= totalFee(),\n', '      "can\'t withdraw more than available fee"\n', '    );\n', '    _withdrawnFees = expectedTotalWithdraw;\n', '    _token.safeTransfer(to, value);\n', '  }\n', '\n', '  function recoverERC20(\n', '    address tokenAddress,\n', '    address receiverAddress,\n', '    uint256 amount\n', '  )\n', '  public\n', '  onlyOwnerOrManager\n', '  {\n', '    require(\n', '      tokenAddress != address(_token),\n', '      "to transfer project\'s funds use withdrawTokens"\n', '    );\n', '    IERC20(tokenAddress).safeTransfer(receiverAddress, amount);\n', '  }\n', '}']