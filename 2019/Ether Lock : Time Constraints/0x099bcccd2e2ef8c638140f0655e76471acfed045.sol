['pragma solidity ^0.5.7;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event SetOwner(address _owner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        emit SetOwner(msg.sender);\n', '        owner = msg.sender; \n', '    }\n', '\n', '    /**\n', '        @dev Transfers the ownership of the contract.\n', '\n', '        @param _to Address of the new owner\n', '    */\n', '    function setOwner(address _to) external onlyOwner returns (bool) {\n', '        require(_to != address(0));\n', '        emit SetOwner(_to);\n', '        owner = _to;\n', '        return true;\n', '    } \n', '}\n', '\n', 'interface Oracle {\n', '    function getRate(bytes32 currency, bytes calldata data) external returns (uint256, uint256);\n', '}\n', '\n', 'library SafeCast {\n', '    function toUint8(uint256 _v) internal pure returns (uint8) {\n', '        require(_v < 2 ** 8, "uint8 overflow");\n', '        return uint8(_v);\n', '    }\n', '\n', '    function toUint40(uint256 _v) internal pure returns (uint40) {\n', '        require(_v < 2 ** 40, "uint40 overflow");\n', '        return uint40(_v);\n', '    }\n', '\n', '    function toUint208(uint256 _v) internal pure returns (uint208) {\n', '        require(_v < 2 ** 208, "uint208 overflow");\n', '        return uint208(_v);\n', '    }\n', '}\n', '\n', 'contract SimpleOracle is Ownable {\n', '    using SafeCast for uint256;\n', '\n', '    event DelegatedCall(\n', '        address requester,\n', '        address to\n', '    );\n', '\n', '    event DeliveredRate(\n', '        address requester,\n', '        bytes32 currency,\n', '        uint256 deliverTimestamp,\n', '        uint256 rate,\n', '        uint256 decimals\n', '    );\n', '\n', '    event UpdatedRate(\n', '        address delegate,\n', '        bytes32 currency,\n', '        uint256 timestamp,\n', '        uint256 rate,\n', '        uint256 decimals\n', '    );\n', '    \n', '    event SetExpirationTime(uint256 _time);\n', '    event SetUrl(string _url);\n', '    event SetFallback(address _fallback);\n', '    event SetDelegate(address _delegate);\n', '\n', '    Oracle public fallback;\n', '    address public delegate;\n', '    uint256 public expiration = 6 hours;\n', '\n', '    mapping(bytes32 => Rate) public rates;\n', '\n', '    string private iurl;\n', '\n', '    struct Rate {\n', '        uint8 decimals;\n', '        uint40 timestamp; \n', '        uint208 value;\n', '    }\n', '\n', '    modifier delegateOrOwner() {\n', '        require(msg.sender == delegate || msg.sender == owner, "Not authorized");\n', '        _;\n', '    }\n', '\n', '    function url() public view returns (string memory) {\n', '        return iurl;\n', '    }\n', '\n', '    function setExpirationTime(uint256 _time) external onlyOwner {\n', '        expiration = _time;\n', '        emit SetExpirationTime(_time);\n', '    }\n', '\n', '    function setUrl(string calldata _url) external onlyOwner {\n', '        iurl = _url;\n', '        emit SetUrl(_url);\n', '    }\n', '\n', '    function setFallback(Oracle _fallback) external onlyOwner {\n', '        fallback = _fallback;\n', '        emit SetFallback(address(_fallback));\n', '    }\n', '\n', '    function setDelegate(address _delegate) external onlyOwner {\n', '        delegate = _delegate;\n', '        emit SetDelegate(_delegate);\n', '    }\n', '    \n', '    function updateRate(\n', '        bytes32 _currency,\n', '        uint256 _value,\n', '        uint256 _timestamp,\n', '        uint256 _decimals\n', '    ) external delegateOrOwner {\n', '        require(_timestamp <= block.timestamp, "Future rate");\n', '        require(_timestamp + expiration > block.timestamp, "Rate expired");\n', '\n', '        rates[_currency] = Rate(\n', '            _decimals.toUint8(),\n', '            _timestamp.toUint40(),\n', '            _value.toUint208()\n', '        );\n', '\n', '        emit UpdatedRate(\n', '            msg.sender,\n', '            _currency,\n', '            _timestamp,\n', '            _value,\n', '            _decimals\n', '        );\n', '    }\n', '\n', '    function isExpired(uint256 timestamp) internal view returns (bool) {\n', '        return timestamp <= now - expiration;\n', '    }\n', '\n', '    function getRate(bytes32 _currency, bytes calldata _data) external returns (uint256, uint256) {\n', '        if (address(fallback) != address(0)) {\n', '            emit DelegatedCall(msg.sender, address(fallback));\n', '            return fallback.getRate(_currency, _data);\n', '        }\n', '\n', '        Rate memory rate = rates[_currency];\n', '        require(rate.timestamp + expiration > block.timestamp);\n', '        emit DeliveredRate(msg.sender, _currency, rate.timestamp, rate.value, rate.decimals);\n', '        return (rate.value, rate.decimals);\n', '    }\n', '}']