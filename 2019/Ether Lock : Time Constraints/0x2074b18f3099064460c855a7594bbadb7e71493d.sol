['// solium-disable linebreak-style\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract CryptoTycoonsVIPLib{\n', '    \n', '    address payable public owner;\n', '\n', '    mapping (address => uint) userExpPool;\n', '    mapping (address => bool) public callerMap;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "OnlyOwner methods called by non-owner.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCaller {\n', '        bool isCaller = callerMap[msg.sender];\n', '        require(isCaller, "onlyCaller methods called by non-caller.");\n', '        _;\n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '        callerMap[owner] = true;\n', '    }\n', '\n', '    function kill() external onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function addCaller(address caller) public onlyOwner{\n', '        bool isCaller = callerMap[caller];\n', '        if (isCaller == false){\n', '            callerMap[caller] = true;\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) external onlyOwner {\n', '        bool isCaller = callerMap[caller];\n', '        if (isCaller == true) {\n', '            callerMap[caller] = false;\n', '        }\n', '    }\n', '\n', '    function addUserExp(address addr, uint256 amount) public onlyCaller{\n', '        uint exp = userExpPool[addr];\n', '        exp = exp + amount;\n', '        userExpPool[addr] = exp;\n', '    }\n', '\n', '    function getUserExp(address addr) public view returns(uint256 exp){\n', '        return userExpPool[addr];\n', '    }\n', '\n', '    function getVIPLevel(address user) public view returns (uint256 level) {\n', '        uint exp = userExpPool[user];\n', '\n', '        if(exp >= 30 ether && exp < 150 ether){\n', '            level = 1;\n', '        } else if(exp >= 150 ether && exp < 300 ether){\n', '            level = 2;\n', '        } else if(exp >= 300 ether && exp < 1500 ether){\n', '            level = 3;\n', '        } else if(exp >= 1500 ether && exp < 3000 ether){\n', '            level = 4;\n', '        } else if(exp >= 3000 ether && exp < 15000 ether){\n', '            level = 5;\n', '        } else if(exp >= 15000 ether && exp < 30000 ether){\n', '            level = 6;\n', '        } else if(exp >= 30000 ether && exp < 150000 ether){\n', '            level = 7;\n', '        } else if(exp >= 150000 ether){\n', '            level = 8;\n', '        } else{\n', '            level = 0;\n', '        }\n', '\n', '        return level;\n', '    }\n', '\n', '    function getVIPBounusRate(address user) public view returns (uint256 rate){\n', '        uint level = getVIPLevel(user);\n', '\n', '        if(level == 1){\n', '            rate = 1;\n', '        } else if(level == 2){\n', '            rate = 2;\n', '        } else if(level == 3){\n', '            rate = 3;\n', '        } else if(level == 4){\n', '            rate = 4;\n', '        } else if(level == 5){\n', '            rate = 5;\n', '        } else if(level == 6){\n', '            rate = 7;\n', '        } else if(level == 7){\n', '            rate = 9;\n', '        } else if(level == 8){\n', '            rate = 11;\n', '        } else if(level == 9){\n', '            rate = 13;\n', '        } else if(level == 10){\n', '            rate = 15;\n', '        } else{\n', '            rate = 0;\n', '        }\n', '    }\n', '}']
['// solium-disable linebreak-style\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract CryptoTycoonsVIPLib{\n', '    \n', '    address payable public owner;\n', '\n', '    mapping (address => uint) userExpPool;\n', '    mapping (address => bool) public callerMap;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "OnlyOwner methods called by non-owner.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCaller {\n', '        bool isCaller = callerMap[msg.sender];\n', '        require(isCaller, "onlyCaller methods called by non-caller.");\n', '        _;\n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '        callerMap[owner] = true;\n', '    }\n', '\n', '    function kill() external onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function addCaller(address caller) public onlyOwner{\n', '        bool isCaller = callerMap[caller];\n', '        if (isCaller == false){\n', '            callerMap[caller] = true;\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) external onlyOwner {\n', '        bool isCaller = callerMap[caller];\n', '        if (isCaller == true) {\n', '            callerMap[caller] = false;\n', '        }\n', '    }\n', '\n', '    function addUserExp(address addr, uint256 amount) public onlyCaller{\n', '        uint exp = userExpPool[addr];\n', '        exp = exp + amount;\n', '        userExpPool[addr] = exp;\n', '    }\n', '\n', '    function getUserExp(address addr) public view returns(uint256 exp){\n', '        return userExpPool[addr];\n', '    }\n', '\n', '    function getVIPLevel(address user) public view returns (uint256 level) {\n', '        uint exp = userExpPool[user];\n', '\n', '        if(exp >= 30 ether && exp < 150 ether){\n', '            level = 1;\n', '        } else if(exp >= 150 ether && exp < 300 ether){\n', '            level = 2;\n', '        } else if(exp >= 300 ether && exp < 1500 ether){\n', '            level = 3;\n', '        } else if(exp >= 1500 ether && exp < 3000 ether){\n', '            level = 4;\n', '        } else if(exp >= 3000 ether && exp < 15000 ether){\n', '            level = 5;\n', '        } else if(exp >= 15000 ether && exp < 30000 ether){\n', '            level = 6;\n', '        } else if(exp >= 30000 ether && exp < 150000 ether){\n', '            level = 7;\n', '        } else if(exp >= 150000 ether){\n', '            level = 8;\n', '        } else{\n', '            level = 0;\n', '        }\n', '\n', '        return level;\n', '    }\n', '\n', '    function getVIPBounusRate(address user) public view returns (uint256 rate){\n', '        uint level = getVIPLevel(user);\n', '\n', '        if(level == 1){\n', '            rate = 1;\n', '        } else if(level == 2){\n', '            rate = 2;\n', '        } else if(level == 3){\n', '            rate = 3;\n', '        } else if(level == 4){\n', '            rate = 4;\n', '        } else if(level == 5){\n', '            rate = 5;\n', '        } else if(level == 6){\n', '            rate = 7;\n', '        } else if(level == 7){\n', '            rate = 9;\n', '        } else if(level == 8){\n', '            rate = 11;\n', '        } else if(level == 9){\n', '            rate = 13;\n', '        } else if(level == 10){\n', '            rate = 15;\n', '        } else{\n', '            rate = 0;\n', '        }\n', '    }\n', '}']
