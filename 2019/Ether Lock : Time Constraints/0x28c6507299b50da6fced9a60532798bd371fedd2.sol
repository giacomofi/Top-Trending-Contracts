['pragma solidity ^0.4.25;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '////// Version 4.1 ////// \n', '\n', '// Contract 01\n', 'contract OwnableContract {    \n', '    event onTransferOwnership(address newOwner);\n', '\taddress superOwner; \n', '\t\n', '    constructor() public { \n', '        superOwner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == superOwner);\n', '        _;\n', '    } \n', '\t\n', '    function viewSuperOwner() public view returns (address owner) {\n', '        return superOwner;\n', '    }\n', '      \n', '    function changeOwner(address newOwner) onlyOwner public {\n', '        require(newOwner != superOwner);       \n', '        superOwner = newOwner;     \n', '        emit onTransferOwnership(superOwner);\n', '    }\n', '}\n', '\n', '// Contract 02\n', 'contract BlockableContract is OwnableContract {    \n', '    event onBlockHODLs(bool status);\n', '    bool public blockedContract;\n', '    \n', '    constructor() public { \n', '        blockedContract = false;  \n', '    }\n', '    \n', '    modifier contractActive() {\n', '        require(!blockedContract);\n', '        _;\n', '    } \n', '    \n', '    function doBlockContract() onlyOwner public {\n', '        blockedContract = true;        \n', '        emit onBlockHODLs(blockedContract);\n', '    }\n', '    \n', '    function unBlockContract() onlyOwner public {\n', '        blockedContract = false;        \n', '        emit onBlockHODLs(blockedContract);\n', '    }\n', '}\n', '\n', '// Contract 03\n', 'contract ldoh is BlockableContract {\n', '    \n', '\tevent onCashbackCode(address indexed hodler, address cashbackcode);\n', '    event onStoreProfileHash(address indexed hodler, string profileHashed);\n', '    event onHodlTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n', '    event onClaimTokens(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\n', '    event onReturnAll(uint256 returned);\n', '\t\n', '    // Variables // * = New ** = Undeveloped\t\n', '    address internal AXPRtoken;\n', '    mapping(address => string) public profileHashed; \t\t// User Prime \n', '\tmapping(address => address) public cashbackcode; \t\t// Cashback Code \n', '\tmapping(address => bool) public contractaddress; \t\t// Contract Address\n', '\t\n', '\t// Default Setting\n', '\tuint256 public \tpercent \t\t\t\t= 1200;        \t// * Percent Permonth ( Only Test = 1200% )\n', '\tuint256 private constant affiliate \t\t= 12;        \t// * 12% from deposit\n', '\tuint256 private constant cashback \t\t= 16;        \t// * 16% from deposit\n', '\tuint256 private constant totalreceive \t= 88;        \t// * 88% from deposit\t\n', '    uint256 private constant seconds30days \t= 2592000;  \t// *\n', '\n', '    struct Safe {\n', '        uint256 id;\n', '        uint256 amount;\n', '        uint256 endtime;\n', '        address user;\n', '        address tokenAddress;\n', '\t\tstring  tokenSymbol;\t\n', '\t\tuint256 amountbalance; \t\t\t// * --- > 88% from deposit\n', '\t\tuint256 cashbackbalance; \t\t// * --- > 16% from deposit\n', '\t\tuint256 lasttime; \t\t\t\t// * --- > Last Withdraw\n', '\t\tuint256 percentage; \t\t\t// * --- > return tokens every month\n', '\t\tuint256 percentagereceive; \t\t// * --- > 0 %\n', '\t\tuint256 tokenreceive; \t\t\t// * --- > 0 Token\n', '\t\tuint256 affiliatebalance; \t\t// **\n', '\t\taddress referrer; \t\t\t\t// **\n', '\n', '    }\n', '    \n', '\tmapping(address => uint256[]) \tpublic \t_userSafes;\t\t\t// ?????\n', '    mapping(address => uint256) \tpublic \t_totalSaved; \t\t// Token Balance\n', '\tmapping(uint256 => Safe) \t\tprivate _safes; \t\t\t// Struct safe database\n', '    uint256 \t\t\t\t\t\tprivate _currentIndex; \t\t// Sequential number ( Start from 500 )\n', '\tuint256 \t\t\t\t\t\tpublic _countSafes; \t\t// Total Smart Contract User\n', '\tuint256 \t\t\t\t\t\tpublic hodlingTime;\t\t\t\n', '    uint256 \t\t\t\t\t\tpublic allTimeHighPrice;\n', '    uint256 \t\t\t\t\t\tpublic comission;\n', '\t\n', '    mapping(address => uint256) \tprivate _systemReserves;    // Token Balance ( Reserve )\n', '    address[] \t\t\t\t\t\tpublic _listedReserves;\t\t// ?????\n', '    \n', '    //Constructor\n', '   \n', '    constructor() public {\n', '        \n', '        AXPRtoken \t\t= 0xC39E626A04C5971D770e319760D7926502975e47;        \n', '        hodlingTime \t= 730 days;\n', '        _currentIndex \t= 500;\n', '        comission \t\t= 12;\n', '    }\n', '    \n', '\t\n', '// Function 01 - Fallback Function To Receive Donation In Eth\n', '    function () public payable {\n', '        require(msg.value > 0);       \n', '        _systemReserves[0x0] = add(_systemReserves[0x0], msg.value);\n', '    }\n', '\t\n', '// Function 02 - Contribute (Hodl Platform)\n', '    function HodlTokens(address tokenAddress, uint256 amount) public contractActive {\n', '        require(tokenAddress != 0x0);\n', '        require(amount > 0);\n', '\t\t\n', '\t\tif (contractaddress[tokenAddress] = false) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t\telse {\n', '\t\t\t\n', '\t\t\n', '        ERC20Interface token = ERC20Interface(tokenAddress);       \n', '        require(token.transferFrom(msg.sender, address(this), amount));\n', '\t\t\n', '\t\tuint256 affiliatecomission \t\t= mul(amount, affiliate) / 100; \t// *\n', '\t\tuint256 nocashback \t\t\t\t= mul(amount, 28) / 100; \t// *\n', '\t\t\n', '\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n', '\t\t\tuint256 data_amountbalance \t\t= mul(amount, 72) / 100;\n', '\t\t\tuint256 data_cashbackbalance \t= 0; \n', '\t\t\taddress data_referrer\t\t\t= superOwner;\n', '\t\t\t\n', '\t\t\tcashbackcode[msg.sender] = superOwner;\n', '\t\t\temit onCashbackCode(msg.sender, superOwner);\n', '\t\t\t\n', '\t\t\t_systemReserves[tokenAddress] \t= add(_systemReserves[tokenAddress], nocashback);\n', '\t\t\t\n', '\t\t\t} else { \t\n', '\t\t\tdata_amountbalance \t\t= sub(amount, affiliatecomission);\t\n', '\t\t\tdata_cashbackbalance \t= mul(amount, cashback) / 100;\n', '\t\t\tdata_referrer\t\t\t= cashbackcode[msg.sender];\n', '\n', '\t\t\t_systemReserves[tokenAddress] \t= add(_systemReserves[tokenAddress], affiliatecomission); } //--->>> Dont forget to change code\n', '\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n', '\t// Insert to Database  \t\t\t \t  \n', '\t\t_userSafes[msg.sender].push(_currentIndex);\n', '\t\t_safes[_currentIndex] = \n', '\n', '\t\tSafe(\n', '\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\t\t\t\n', '\t\t\n', '\t// Update Token Balance, Current Index, CountSafes\t\t\n', '        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n', '        _currentIndex++;\n', '        _countSafes++;\n', '        \n', '        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n', '    }\t\n', '\t\t\t\n', '\t\t\t\n', '}\n', '\t\t\n', '\t\t\n', '\t\t\n', '\t\t\n', '\t\t\n', '\t\n', '\t\n', '// Function 03 - Claim (Hodl Platform)\t\n', '    function ClaimTokens(address tokenAddress, uint256 id) public {\n', '        require(tokenAddress != 0x0);\n', '        require(id != 0);        \n', '        \n', '        Safe storage s = _safes[id];\n', '        require(s.user == msg.sender);  \n', '\t\t\n', '\t\tif (s.amountbalance == 0) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t\telse {\n', '\t\t\tRetireHodl(tokenAddress, id);\n', '\t\t}\n', '    }\n', '    \n', '    function RetireHodl(address tokenAddress, uint256 id) private {\n', '        Safe storage s = _safes[id];\n', '        \n', '        require(s.id != 0);\n', '        require(s.tokenAddress == tokenAddress);\n', '\n', '        uint256 eventAmount;\n', '        address eventTokenAddress = s.tokenAddress;\n', '        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n', '\t\t     \n', '        if(s.endtime < now) // Hodl Complete\n', '        {\n', '            PayToken(s.user, s.tokenAddress, s.amountbalance);\n', '            \n', '            eventAmount \t\t\t\t= s.amountbalance;\n', '\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n', '\t\t\t\n', '\t    s.amountbalance = 0;\n', '\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n', '\t\t\n', '        }\n', '        else \n', '        {\n', '\t\t\t\n', '\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\n', '\t\t\tuint256 CalculateWithdraw \t= s.amount * s.percentage / 100 * timeframe / seconds30days ;\t\t// SAFE MATH FUNCTIONS ???\t\n', '\t\t\tuint256 MaxWithdraw \t\t= mul(s.amount, 10);\n', '\t\t\t\n', '\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n', '\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n', '\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n', '\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n', '\t\t\t\n', '\t\t\t// Maximum withdraw = User Amount Balance   \n', '\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n', '\t\t\tuint256 realAmount = s.amountbalance; \n', '\t\t\t} else { realAmount = MaxAccumulation; }\n', '\t\t\t   \t\t\t\t\n', '\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n', '\t\t\tUpdateUserData(tokenAddress, id, newamountbalance, realAmount);\n', '\t\t\t\n', '\t\t}\n', '        \n', '    }   \n', '\n', '    function UpdateUserData(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n', '        Safe storage s = _safes[id];\n', '        \n', '        require(s.id != 0);\n', '        require(s.tokenAddress == tokenAddress);\n', '\n', '        uint256 eventAmount;\n', '        address eventTokenAddress = s.tokenAddress;\n', '        string memory eventTokenSymbol = s.tokenSymbol;\t\t\t\n', '   \t\t\t\n', '\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n', '\t\ts.lasttime \t\t\t\t\t\t= now;  \n', '\t\t\n', '\t\t\tuint256 tokenaffiliate \t\t= mul(s.amount, affiliate) / 100 ; \n', '\t\t\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance;\t  \t\t// * SAFE MATH FUNCTIONS ???\t\t\n', '\t\t\tuint256 percentagereceived \t= tokenreceived / s.amount * 100000000000000000000;\t  \t// * SAFE MATH FUNCTIONS ???\t\n', '\t\t\n', '\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n', '\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n', '\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n', '\t\t\n', '\t\t\n', '\t        PayToken(s.user, s.tokenAddress, realAmount);           \n', '            eventAmount = realAmount;\n', '\t\t\t\n', '\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n', '    } \n', '\n', '    function PayToken(address user, address tokenAddress, uint256 amount) private {\n', '        \n', '        ERC20Interface token = ERC20Interface(tokenAddress);        \n', '        require(token.balanceOf(address(this)) >= amount);\n', '        token.transfer(user, amount);\n', '    }   \t\n', '\t\n', '// Function 04 - Get How Many Contribute ?\n', '    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n', '        return _userSafes[hodler].length;\n', '    }\n', '    \n', '// Function 05 - Get Data Values\n', '\tfunction GetSafe(uint256 _id) public view\n', '        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n', '    {\n', '        Safe storage s = _safes[_id];\n', '        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n', '    }\n', '\t\n', '// Function 06 - Get Tokens Reserved For The Owner As Commission \n', '    function GetTokenFees(address tokenAddress) public view returns (uint256 amount) {\n', '        return _systemReserves[tokenAddress];\n', '    }    \n', '    \n', "// Function 07 - Get Contract's Balance  \n", '    function GetContractBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    } \t\n', '\t\n', '//Function 08 - Cashback Code  \n', '    function CashbackCode(address _cashbackcode) public {\n', '\t\t\n', '\t\tif (cashbackcode[msg.sender] == 0) {\n', '\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n', '\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n', '\t\t}\t\t             \n', '    }  \n', '\t\n', '\t\n', '// Useless Function ( Public )\t\n', '\t\n', '//??? Function 01 - Store Comission From Unfinished Hodl\n', '    function StoreComission(address tokenAddress, uint256 amount) private {\n', '            \n', '        _systemReserves[tokenAddress] = add(_systemReserves[tokenAddress], amount);\n', '        \n', '        bool isNew = true;\n', '        for(uint256 i = 0; i < _listedReserves.length; i++) {\n', '            if(_listedReserves[i] == tokenAddress) {\n', '                isNew = false;\n', '                break;\n', '            }\n', '        }         \n', '        if(isNew) _listedReserves.push(tokenAddress); \n', '    }    \n', '\t\n', '//??? Function 02 - Delete Safe Values In Storage   \n', '    function DeleteSafe(Safe s) private {\n', '        \n', '        _totalSaved[s.tokenAddress] = sub(_totalSaved[s.tokenAddress], s.amount);\n', '        delete _safes[s.id];\n', '        \n', '        uint256[] storage vector = _userSafes[msg.sender];\n', '        uint256 size = vector.length; \n', '        for(uint256 i = 0; i < size; i++) {\n', '            if(vector[i] == s.id) {\n', '                vector[i] = vector[size-1];\n', '                vector.length--;\n', '                break;\n', '            }\n', '        } \n', '    }\n', '\t\n', "//??? Function 03 - Store The Profile's Hash In The Blockchain   \n", '    function storeProfileHashed(string _profileHashed) public {\n', '        profileHashed[msg.sender] = _profileHashed;        \n', '        emit onStoreProfileHash(msg.sender, _profileHashed);\n', '    }  \t\n', '\n', "//??? Function 04 - Get User's Any Token Balance\n", '    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n', '        require(tokenAddress != 0x0);\n', '        \n', '        for(uint256 i = 1; i < _currentIndex; i++) {            \n', '            Safe storage s = _safes[i];\n', '            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n', '                balance += s.amount;\n', '        }\n', '        return balance;\n', '    }\n', '\t\n', '\t\n', '\t\t    function ContractAddress(address _contractaddress, bool status) public {\n', '\t\t\n', '\t\tcontractaddress[_contractaddress] = status;\n', '\t\t\n', '\t\t\t             \n', '    }\n', '\t\n', '\t\n', '////////////////////////////////// onlyOwner //////////////////////////////////\n', '\n', '// 00 Insert Token Contract Address\t\n', '    function AddContractAddress(address tokenAddress, bool contractstatus) public onlyOwner {\n', '        contractaddress[tokenAddress] = contractstatus;\n', '    }\n', '\t\n', '// 01 Claim ( By Owner )\t\n', '    function OwnerRetireHodl(address tokenAddress, uint256 id) public onlyOwner {\n', '        require(tokenAddress != 0x0);\n', '        require(id != 0);      \n', '        RetireHodl(tokenAddress, id);\n', '    }\n', '    \n', '// 02 Change Hodling Time   \n', '    function ChangeHodlingTime(uint256 newHodlingDays) onlyOwner public {\n', '        require(newHodlingDays >= 60);      \n', '        hodlingTime = newHodlingDays * 1 days;\n', '    }   \n', '    \n', '// 03 Change All Time High Price   \n', '    function ChangeAllTimeHighPrice(uint256 newAllTimeHighPrice) onlyOwner public {\n', '        require(newAllTimeHighPrice > allTimeHighPrice);       \n', '        allTimeHighPrice = newAllTimeHighPrice;\n', '    }              \n', '\n', '// 04 Change Comission Value   \n', '    function ChangeComission(uint256 newComission) onlyOwner public {\n', '        require(newComission <= 30);       \n', '        comission = newComission;\n', '    }\n', '\t\n', '// 05 - Withdraw Ether Received Through Fallback Function    \n', '    function WithdrawEth(uint256 amount) onlyOwner public {\n', '        require(amount > 0); \n', '        require(address(this).balance >= amount); \n', '        \n', '        msg.sender.transfer(amount);\n', '    }\n', '    \n', '// 06 Withdraw Token Fees By Token Address   \n', '    function WithdrawTokenFees(address tokenAddress) onlyOwner public {\n', '        require(_systemReserves[tokenAddress] > 0);\n', '        \n', '        uint256 amount = _systemReserves[tokenAddress];\n', '        _systemReserves[tokenAddress] = 0;\n', '        \n', '        ERC20Interface token = ERC20Interface(tokenAddress);\n', '        \n', '        require(token.balanceOf(address(this)) >= amount);\n', '        token.transfer(msg.sender, amount);\n', '    }\n', '\n', '// 07 Withdraw All Eth And All Tokens Fees   \n', '    function WithdrawAllFees() onlyOwner public {\n', '        \n', '        // Ether\n', '        uint256 x = _systemReserves[0x0];\n', '        if(x > 0 && x <= address(this).balance) {\n', '            _systemReserves[0x0] = 0;\n', '            msg.sender.transfer(_systemReserves[0x0]);\n', '        }\n', '        \n', '        // Tokens\n', '        address ta;\n', '        ERC20Interface token;\n', '        for(uint256 i = 0; i < _listedReserves.length; i++) {\n', '            ta = _listedReserves[i];\n', '            if(_systemReserves[ta] > 0)\n', '            { \n', '                x = _systemReserves[ta];\n', '                _systemReserves[ta] = 0;\n', '                \n', '                token = ERC20Interface(ta);\n', '                token.transfer(msg.sender, x);\n', '            }\n', '        }\n', '        _listedReserves.length = 0; \n', '    }\n', '    \n', '\n', '\n', '// 08 - Returns All Tokens Addresses With Fees       \n', '    function GetTokensAddressesWithFees() \n', '        onlyOwner public view \n', '        returns (address[], string[], uint256[])\n', '    {\n', '        uint256 length = _listedReserves.length;\n', '        \n', '        address[] memory tokenAddress = new address[](length);\n', '        string[] memory tokenSymbol = new string[](length);\n', '        uint256[] memory tokenFees = new uint256[](length);\n', '        \n', '        for (uint256 i = 0; i < length; i++) {\n', '    \n', '            tokenAddress[i] = _listedReserves[i];\n', '            \n', '            ERC20Interface token = ERC20Interface(tokenAddress[i]);\n', '            \n', '            tokenSymbol[i] = token.symbol();\n', '            tokenFees[i] = GetTokenFees(tokenAddress[i]);\n', '        }\n', '        \n', '        return (tokenAddress, tokenSymbol, tokenFees);\n', '    }\n', '\n', '\t\n', '// 09 - Return All Tokens To Their Respective Addresses    \n', '    function ReturnAllTokens(bool onlyAXPR) onlyOwner public\n', '    {\n', '        uint256 returned;\n', '\n', '        for(uint256 i = 1; i < _currentIndex; i++) {            \n', '            Safe storage s = _safes[i];\n', '            if (s.id != 0) {\n', '                if (\n', '                    (onlyAXPR && s.tokenAddress == AXPRtoken) ||\n', '                    !onlyAXPR\n', '                    )\n', '                {\n', '                    PayToken(s.user, s.tokenAddress, s.amountbalance);\n', '                    \n', '                    _countSafes--;\n', '                    returned++;\n', '                }\n', '            }\n', '        }\n', '\n', '        emit onReturnAll(returned);\n', '    }   \n', '\n', '\n', '\n', '//////////////////////////////////////////////// \t\n', '\t\n', '\n', '    /**\n', '    * SAFE MATH FUNCTIONS\n', '    * \n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '}\n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public decimals;\n', '    \n', '    function symbol() public view returns (string);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']