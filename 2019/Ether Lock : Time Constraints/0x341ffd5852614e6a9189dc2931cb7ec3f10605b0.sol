['pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract CommunityVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => Holding) public holdings;\n', '\n', '    uint256 constant public MinimumHoldingPeriod = 90 days;\n', '    uint256 constant public Interval = 90 days;\n', '    uint256 constant public MaximumHoldingPeriod = 360 days;\n', '\n', '    uint256 constant public CommunityCap = 14300000 ether; // 14.3 million tokens\n', '\n', '    uint256 public totalCommunityTokensCommitted;\n', '\n', '    struct Holding {\n', '        uint256 tokensCommitted;\n', '        uint256 tokensRemaining;\n', '        uint256 startTime;\n', '    }\n', '\n', '    event CommunityVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n', '    event CommunityVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n', '\n', '    function claimTokens(address beneficiary)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 tokensToClaim)\n', '    {\n', '        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n', '        uint256 startTime = holdings[beneficiary].startTime;\n', '        require(tokensRemaining > 0, "All tokens claimed");\n', '\n', '        require(now.sub(startTime) > MinimumHoldingPeriod, "Claiming period not started yet");\n', '\n', '        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n', '\n', '            tokensToClaim = tokensRemaining;\n', '            delete holdings[beneficiary];\n', '\n', '        } else {\n', '\n', '            uint256 percentage = calculatePercentageToRelease(startTime);\n', '\n', '            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n', '            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n', '            tokensRemaining = tokensNotToClaim;\n', '            holdings[beneficiary].tokensRemaining = tokensRemaining;\n', '\n', '        }\n', '    }\n', '\n', '    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n', '        // how many 90 day periods have passed\n', '        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n', '        percentage = periodsPassed.mul(25); // 25% to be released every 90 days\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        totalCommunityTokensCommitted = totalCommunityTokensCommitted.add(_tokens);\n', '        require(totalCommunityTokensCommitted <= CommunityCap);\n', '\n', '        if (holdings[_beneficiary].tokensCommitted != 0) {\n', '            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n', '            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n', '\n', '            emit CommunityVestingUpdated(\n', '                _beneficiary,\n', '                holdings[_beneficiary].tokensRemaining,\n', '                holdings[_beneficiary].startTime\n', '            );\n', '\n', '        } else {\n', '            holdings[_beneficiary] = Holding(\n', '                _tokens,\n', '                _tokens,\n', '                _startTime\n', '            );\n', '\n', '            emit CommunityVestingInitialized(_beneficiary, _tokens, _startTime);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract EcosystemVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => Holding) public holdings;\n', '\n', '    uint256 constant public Interval = 90 days;\n', '    uint256 constant public MaximumHoldingPeriod = 630 days;\n', '\n', '    uint256 constant public EcosystemCap = 54100000 ether; // 54.1 million tokens\n', '\n', '    uint256 public totalEcosystemTokensCommitted;\n', '\n', '    struct Holding {\n', '        uint256 tokensCommitted;\n', '        uint256 tokensRemaining;\n', '        uint256 startTime;\n', '    }\n', '\n', '    event EcosystemVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n', '    event EcosystemVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n', '\n', '    function claimTokens(address beneficiary)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 tokensToClaim)\n', '    {\n', '        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n', '        uint256 startTime = holdings[beneficiary].startTime;\n', '        require(tokensRemaining > 0, "All tokens claimed");\n', '\n', '        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n', '\n', '            tokensToClaim = tokensRemaining;\n', '            delete holdings[beneficiary];\n', '\n', '        } else {\n', '\n', '            uint256 permill = calculatePermillToRelease(startTime);\n', '\n', '            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\n', '            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n', '            tokensRemaining = tokensNotToClaim;\n', '            holdings[beneficiary].tokensRemaining = tokensRemaining;\n', '\n', '        }\n', '    }\n', '\n', '    function calculatePermillToRelease(uint256 _startTime) internal view returns (uint256 permill) {\n', '        // how many 90 day periods have passed\n', '        uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\n', '        permill = periodsPassed.mul(125); // 125 per thousand to be released every 90 days\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\n', '        require(totalEcosystemTokensCommitted <= EcosystemCap);\n', '\n', '        if (holdings[_beneficiary].tokensCommitted != 0) {\n', '            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n', '            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n', '\n', '            emit EcosystemVestingUpdated(\n', '                _beneficiary,\n', '                holdings[_beneficiary].tokensRemaining,\n', '                holdings[_beneficiary].startTime\n', '            );\n', '\n', '        } else {\n', '            holdings[_beneficiary] = Holding(\n', '                _tokens,\n', '                _tokens,\n', '                _startTime\n', '            );\n', '\n', '            emit EcosystemVestingInitialized(_beneficiary, _tokens, _startTime);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SeedPrivateAdvisorVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum User { Public, Seed, Private, Advisor }\n', '\n', '    mapping (address => Holding) public holdings;\n', '\n', '    uint256 constant public MinimumHoldingPeriod = 90 days;\n', '    uint256 constant public Interval = 30 days;\n', '    uint256 constant public MaximumHoldingPeriod = 180 days;\n', '\n', '    uint256 constant public SeedCap = 28000000 ether; // 28 million tokens\n', '    uint256 constant public PrivateCap = 9000000 ether; // 9 million tokens\n', '    uint256 constant public AdvisorCap = 7400000 ether; // 7.4 million tokens\n', '\n', '    uint256 public totalSeedTokensCommitted;\n', '    uint256 public totalPrivateTokensCommitted;\n', '    uint256 public totalAdvisorTokensCommitted;\n', '\n', '    struct Holding {\n', '        uint256 tokensCommitted;\n', '        uint256 tokensRemaining;\n', '        uint256 startTime;\n', '        User user;\n', '    }\n', '\n', '    event VestingInitialized(address _to, uint256 _tokens, uint256 _startTime, User user);\n', '    event VestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime, User user);\n', '\n', '    function claimTokens(address beneficiary)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 tokensToClaim)\n', '    {\n', '        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n', '        uint256 startTime = holdings[beneficiary].startTime;\n', '        require(tokensRemaining > 0, "All tokens claimed");\n', '\n', '        require(now.sub(startTime) > MinimumHoldingPeriod, "Claiming period not started yet");\n', '\n', '        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n', '\n', '            tokensToClaim = tokensRemaining;\n', '            delete holdings[beneficiary];\n', '\n', '        } else {\n', '\n', '            uint256 percentage = calculatePercentageToRelease(startTime);\n', '\n', '            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n', '            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n', '            tokensRemaining = tokensNotToClaim;\n', '            holdings[beneficiary].tokensRemaining = tokensRemaining;\n', '\n', '        }\n', '    }\n', '\n', '    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n', '        // how many 30 day periods have passed\n', '        uint periodsPassed = ((now.sub(_startTime.add(MinimumHoldingPeriod))).div(Interval)).add(1);\n', '        percentage = periodsPassed.mul(25); // 25% to be released every 30 days\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime,\n', '        uint8 user\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        User _user;\n', '        if (user == uint8(User.Seed)) {\n', '            _user = User.Seed;\n', '            totalSeedTokensCommitted = totalSeedTokensCommitted.add(_tokens);\n', '            require(totalSeedTokensCommitted <= SeedCap);\n', '        } else if (user == uint8(User.Private)) {\n', '            _user = User.Private;\n', '            totalPrivateTokensCommitted = totalPrivateTokensCommitted.add(_tokens);\n', '            require(totalPrivateTokensCommitted <= PrivateCap);\n', '        } else if (user == uint8(User.Advisor)) {\n', '            _user = User.Advisor;\n', '            totalAdvisorTokensCommitted = totalAdvisorTokensCommitted.add(_tokens);\n', '            require(totalAdvisorTokensCommitted <= AdvisorCap);\n', '        } else {\n', '            revert( "incorrect category, not eligible for vesting" );\n', '        }\n', '\n', '        if (holdings[_beneficiary].tokensCommitted != 0) {\n', '            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n', '            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n', '\n', '            emit VestingUpdated(\n', '                _beneficiary,\n', '                holdings[_beneficiary].tokensRemaining,\n', '                holdings[_beneficiary].startTime,\n', '                holdings[_beneficiary].user\n', '            );\n', '\n', '        } else {\n', '            holdings[_beneficiary] = Holding(\n', '                _tokens,\n', '                _tokens,\n', '                _startTime,\n', '                _user\n', '            );\n', '\n', '            emit VestingInitialized(_beneficiary, _tokens, _startTime, _user);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract TeamVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => Holding) public holdings;\n', '\n', '    uint256 constant public MinimumHoldingPeriod = 180 days;\n', '    uint256 constant public Interval = 180 days;\n', '    uint256 constant public MaximumHoldingPeriod = 720 days;\n', '\n', '    uint256 constant public TeamCap = 12200000 ether; // 12.2 million tokens\n', '\n', '    uint256 public totalTeamTokensCommitted;\n', '\n', '    struct Holding {\n', '        uint256 tokensCommitted;\n', '        uint256 tokensRemaining;\n', '        uint256 startTime;\n', '    }\n', '\n', '    event TeamVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n', '    event TeamVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n', '\n', '    function claimTokens(address beneficiary)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 tokensToClaim)\n', '    {\n', '        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n', '        uint256 startTime = holdings[beneficiary].startTime;\n', '        require(tokensRemaining > 0, "All tokens claimed");\n', '\n', '        require(now.sub(startTime) > MinimumHoldingPeriod, "Claiming period not started yet");\n', '\n', '        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n', '\n', '            tokensToClaim = tokensRemaining;\n', '            delete holdings[beneficiary];\n', '\n', '        } else {\n', '\n', '            uint256 percentage = calculatePercentageToRelease(startTime);\n', '\n', '            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n', '\n', '            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n', '            tokensRemaining = tokensNotToClaim;\n', '            holdings[beneficiary].tokensRemaining = tokensRemaining;\n', '\n', '        }\n', '    }\n', '\n', '    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n', '        // how many 180 day periods have passed\n', '        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n', '        percentage = periodsPassed.mul(25); // 25% to be released every 180 days\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        totalTeamTokensCommitted = totalTeamTokensCommitted.add(_tokens);\n', '        require(totalTeamTokensCommitted <= TeamCap);\n', '\n', '        if (holdings[_beneficiary].tokensCommitted != 0) {\n', '            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n', '            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n', '\n', '            emit TeamVestingUpdated(\n', '                _beneficiary,\n', '                holdings[_beneficiary].tokensRemaining,\n', '                holdings[_beneficiary].startTime\n', '            );\n', '\n', '        } else {\n', '            holdings[_beneficiary] = Holding(\n', '                _tokens,\n', '                _tokens,\n', '                _startTime\n', '            );\n', '\n', '            emit TeamVestingInitialized(_beneficiary, _tokens, _startTime);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface TokenInterface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract Vesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum VestingUser { Public, Seed, Private, Advisor, Team, Community, Ecosystem }\n', '\n', '    TokenInterface public token;\n', '    CommunityVesting public communityVesting;\n', '    TeamVesting public teamVesting;\n', '    EcosystemVesting public ecosystemVesting;\n', '    SeedPrivateAdvisorVesting public seedPrivateAdvisorVesting;\n', '    mapping (address => VestingUser) public userCategory;\n', '    uint256 public totalAllocated;\n', '\n', '    event TokensReleased(address _to, uint256 _tokensReleased, VestingUser user);\n', '\n', '    constructor(address _token) public {\n', '        //require(_token != 0x0, "Invalid address");\n', '        token = TokenInterface(_token);\n', '        communityVesting = new CommunityVesting();\n', '        teamVesting = new TeamVesting();\n', '        ecosystemVesting = new EcosystemVesting();\n', '        seedPrivateAdvisorVesting = new SeedPrivateAdvisorVesting();\n', '    }\n', '\n', '    function claimTokens() external {\n', '        uint8 category = uint8(userCategory[msg.sender]);\n', '\n', '        uint256 tokensToClaim;\n', '\n', '        if (category == 1 || category == 2 || category == 3) {\n', '            tokensToClaim = seedPrivateAdvisorVesting.claimTokens(msg.sender);\n', '        } else if (category == 4) {\n', '            tokensToClaim = teamVesting.claimTokens(msg.sender);\n', '        } else if (category == 5) {\n', '            tokensToClaim = communityVesting.claimTokens(msg.sender);\n', '        } else if (category == 6){\n', '            tokensToClaim = ecosystemVesting.claimTokens(msg.sender);\n', '        } else {\n', '            revert( "incorrect category, maybe unknown user" );\n', '        }\n', '\n', '        totalAllocated = totalAllocated.sub(tokensToClaim);\n', '        require(token.transfer(msg.sender, tokensToClaim), "Insufficient balance in vesting contract");\n', '        emit TokensReleased(msg.sender, tokensToClaim, userCategory[msg.sender]);\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime,\n', '        VestingUser user\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint8 category = uint8(user);\n', '        require(category != 0, "Not eligible for vesting");\n', '\n', '        require( uint8(userCategory[_beneficiary]) == 0 || userCategory[_beneficiary] == user, "cannot change user category" );\n', '        userCategory[_beneficiary] = user;\n', '        totalAllocated = totalAllocated.add(_tokens);\n', '\n', '        if (category == 1 || category == 2 || category == 3) {\n', '            seedPrivateAdvisorVesting.initializeVesting(_beneficiary, _tokens, _startTime, category);\n', '        } else if (category == 4) {\n', '            teamVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n', '        } else if (category == 5) {\n', '            communityVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n', '        } else if (category == 6){\n', '            ecosystemVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n', '        } else {\n', '            revert( "incorrect category, not eligible for vesting" );\n', '        }\n', '    }\n', '\n', '    function claimUnallocated( address _sendTo) external onlyOwner{\n', '        uint256 allTokens = token.balanceOf(address(this));\n', '        token.transfer(_sendTo, allTokens);\n', '    }\n', '}']