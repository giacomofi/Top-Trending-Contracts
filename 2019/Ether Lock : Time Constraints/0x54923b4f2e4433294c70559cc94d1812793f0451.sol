['pragma solidity ^0.4.24;\n', '\n', 'contract Token {\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Future1Exchange\n', ' {\n', '    address public archon; \n', '    \n', '    mapping (address => mapping(address => uint256)) public _token;\n', '    \n', '    constructor() public\n', '    {\n', '         archon = msg.sender;                                                            \n', '    }\n', '    \n', '    \n', '    function safeAdd(uint crtbal, uint depbal) public pure returns (uint) \n', '    {\n', '        uint totalbal = crtbal + depbal;\n', '        return totalbal;\n', '    }\n', '    \n', '    function safeSub(uint crtbal, uint depbal) public pure returns (uint) \n', '    {\n', '        uint totalbal = crtbal - depbal;\n', '        return totalbal;\n', '    }\n', '    \n', '    /// @notice View balance\n', '    /// @param token Token contract\n', '    /// @param user  owner address\n', '    function balanceOf(address token,address user) public view returns(uint256)            \n', '    {\n', '        return Token(token).balanceOf(user);\n', '    }\n', '\n', '    \n', '    /// @notice Token transfer\n', '    /// @param  token Token contract\n', '    /// @param  tokens value\n', '    function tokenTransfer(address token, uint256 tokens)public payable                          \n', '    {\n', '\n', '        _token[msg.sender][token] = safeAdd(_token[msg.sender][token], tokens);\n', '        Token(token).transferFrom(msg.sender,address(this), tokens);\n', '\n', '    }\n', '    \n', '    /// @notice Token withdraw\n', '    /// @param  token Token contract\n', '    /// @param  to Receiver address\n', '    /// @param  tokens value\n', '    function tokenWithdraw(address token, address to, uint256 tokens)public payable      \n', '    {\n', '        if(archon==msg.sender)\n', '        {                                                                                                        \n', '            if(Token(token).balanceOf(address(this))>=tokens) \n', '            {\n', '                _token[msg.sender][token] = safeSub(_token[msg.sender][token] , tokens) ;   \n', '                Token(token).transfer(to, tokens);\n', '            }\n', '        }\n', '    }\n', '    \n', '    ///@notice Token balance\n', '    ///@param token Token contract\n', '    function contract_bal(address token) public view returns(uint256)                       \n', '    {\n', '        return Token(token).balanceOf(address(this));\n', '    }\n', '    \n', '    ///@notice Deposit ETH\n', '    function depositETH() payable external                                                      \n', '    { \n', '        \n', '    }\n', '    \n', '    ///@notice Withdraw ETH\n', '    ///@param  to Receiver address\n', '    ///@param  value ethervalue\n', '    function withdrawETH(address  to, uint256 value) public payable returns (bool)        \n', '    {\n', '        \n', '        if(archon==msg.sender)\n', '        {                                                                                           \n', '                 to.transfer(value);\n', '                 return true;\n', '    \n', '         }\n', '    }\n', '}']