['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' *  @title ERC223 Interface of the Bether Token currently deployed on the Ethereum main net.\n', ' */\n', 'contract BetherERC223Interface {\n', '    /** \n', '     *  @dev The total amount of Bether available\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /** \n', '     *  @dev Provides access to check how much Bether the _owner allowed the _spender to use.\n', '     *  @param _owner Address that owns the Bether.\n', "     *  @param _spender Address that wants to transfer the _owner's Bether.\n", '     *  @return remaining The amount of Bether that _owner allowed _spender to transfer (in Wei).\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    /** \n', "     *  @dev Allows the Bether holder to authorize _spender to transfer the holder's Bether (in Wei).\n", '     *  @param _spender The address that will be allowed to transfer _value amount of the holders Bether.\n', '     *  @param _value The amount of Bether that _spender is allowed to transfer on behalf of the holder.\n', '     *  @return _approved Whether the approval was successful or not.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool _approved);\n', '\n', '    /** \n', '     *  @dev Checks the amount of Bether the _address holds.\n', '     *  @param _address The address the balance of which is to be checked.\n', '     *  @return balance The Bether balance of _address (in Wei).\n', '     */\n', '    function balanceOf(address _address) public constant returns (uint256 balance);\n', '\n', '    /**\n', '     *  @dev Gets the amount of decimal points Bether supports.\n', '     *  @return _decimals The amount of decimal points Bether supports.\n', '     */\n', '    function decimals() public constant returns (uint8 _decimals);\n', '\n', '    /**\n', '     *  @dev Gets the name of the token.\n', '     *  @return _name The name of the token.\n', '     */\n', '    function name() public constant returns (string _name);\n', '\n', '    /**\n', '     *  @dev Gets the symbol of the token.\n', '     *  @return _symbol The symbol of the token.\n', '     */\n', '    function symbol() public constant returns (string _symbol);\n', '\n', '    /**\n', '     *  @dev Transfers Bether.\n', '     *  @param _to The target address to which Bether will be sent from the caller.\n', '     *  @param _value The amount of Bether to send (in Wei).\n', '     *  @return _sent Whether the transfer was successful or not.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool _sent);\n', '\n', '    /**\n', '     *  @dev Transfers Bether.\n', '     *  @param _to The target address to which Bether will be sent from the caller.\n', '     *  @param _value The amount of Bether to send (in Wei).\n', '     *  @param _data TODO: What is this?\n', '     *  @return _sent Whether the transfer was successful or not.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool _sent);\n', '\n', '    /**\n', '     *  @dev Transfers Bether.\n', '     *  @param _from The address from which Bether will be sent (Requires approval via the approve() method).\n', '     *  @param _to The target address to which Bether will be sent.\n', '     *  @param _value The amount of Bether to send (in Wei).\n', '     *  @return _sent Whether the transfer was successful or not.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _sent);\n', '}\n', '\n', '\n', ' /*\n', " * Contract that is working with ERC223 tokens. Implementing the tokenFallback function in a way that doesn't throw an error enables\n", ' * the contract to receive ERC223 tokens. Making it an empty function is enough to enable receiving of tokens. The default\n', ' * implementation of tokenFallback ALWAYS throws an error. This is to prevent random contracts from ending up with ERC223\n', ' * tokens but not having the functionality to send them away.\n', ' * https://github.com/ethereum/EIPs/issues/223\n', ' */\n', '\n', '/** @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens. */\n', 'contract ERC223ReceivingContract {\n', '\n', '    /** \n', '     *  @dev Function that is called when a user or another contract wants to transfer funds.\n', '     *  @param _from Transaction initiator, analogue of msg.sender.\n', '     *  @param _value Number of tokens to transfer.\n', '     *  @param _data Data containig a function signature and/or parameters.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '\n', '/**\n', '    The DepositContract only has a single purpose and that is to forward all Bether and Ether\n', '    to the BalanceManager contract, which created it. It serves as an aggregator.\n', '    Every user has one DepositContract, meaning when the funds arrive to the BalanceManager,\n', '    we know which user sent them (it depends on which DepositContract forwarded the funds).\n', '*/\n', 'contract DepositContract is ERC223ReceivingContract {\n', '\n', '    /** @dev The BalanceManager to which funds will be transfered. */\n', '    BalanceManager public balanceManager;\n', '\n', '    /** @dev The Bether token itself. Only this token will be forwarded, others will be aborted. */\n', '    BetherERC223Interface public betherToken;\n', '\n', '    /**\n', '        @dev Basic constructor.\n', '        @param balanceManagerAddress The address of the BalanceManager to forward funds to.\n', '        @param betherTokenAddress The address of the token that is to be forwarded.\n', '    */\n', '    constructor(address balanceManagerAddress, address betherTokenAddress) public {\n', '        balanceManager = BalanceManager(balanceManagerAddress);\n', '        betherToken = BetherERC223Interface(betherTokenAddress);\n', '    }\n', '\n', '    /**\n', '        @dev Fallback payable function, which forwards all Ether to the BalanceManager.\n', '    */\n', '    function () public payable {\n', '        require(address(balanceManager).send(msg.value));\n', '    }\n', '\n', '\n', '    /** \n', '        @dev Function that is called by the ERC223 token contract when tokens are sent to\n', '        this contract.\n', '        @param _value Number of tokens (in wei) that have been sent.\n', '     */\n', '    function tokenFallback(address, uint256 _value, bytes) public {\n', '        require(msg.sender == address(betherToken));\n', '        require(betherToken.transfer(address(balanceManager), _value));\n', '    }\n', '}\n', '\n', '\n', '/**\n', '    The BalanceManager is a contract that aggregates Bether and Ether that users deposit into our\n', '    platform via DepositContracts. It is also responsible for applying an exchange rate for received\n', '    Ether.\n', '*/\n', 'contract BalanceManager is ERC223ReceivingContract {\n', '\n', '    /** @dev The BalanceManager to which funds will be transfered. */\n', '    BetherERC223Interface public betherToken;\n', '\n', '    /** @dev Current exchange rate (amount of Bether that is given for each Ether) */\n', '    uint256 public betherForEther;\n', '\n', '    /** @dev The address of the Admin. The Admin wallet is fully authorized to control this contract */\n', '    address public adminWallet;\n', '\n', '    /**\n', '        @dev The Operator wallet has a subset of the privileges of the Admin wallet. It can send Bether\n', '        and change the exchange rate.\n', '    */\n', '    address public operatorWallet;\n', '\n', '    /** @dev Basic constructor populates the storage variables.    */\n', '    constructor(address betherTokenAddress, address _adminWallet, address _operatorWallet) public {\n', '        betherToken = BetherERC223Interface(betherTokenAddress);\n', '        adminWallet = _adminWallet;\n', '        operatorWallet = _operatorWallet;\n', '    }\n', '\n', '\n', '\n', '    /***********************************************************************************************************/\n', '    /** Security and Privilege Control *************************************************************************/\n', '\n', '    /** @dev Modifier for ensuring only the Admin wallet can call a function. */\n', '    modifier adminLevel {\n', '        require(msg.sender == adminWallet);\n', '        _;\n', '    }\n', '\n', '    /** @dev Modifier for ensuring only the Admin and Operator wallets can call a function. */\n', '    modifier operatorLevel {\n', '        require(msg.sender == operatorWallet || msg.sender == adminWallet);\n', '        _;\n', '    }\n', '    \n', '    /** @dev Setter for the Admin wallet. */\n', '    function setAdminWallet(address _adminWallet) public adminLevel {\n', '        adminWallet = _adminWallet;\n', '    }\n', '\n', '    /** @dev Setter for the Operator wallet. */\n', '    function setOperatorWallet(address _operatorWallet) public adminLevel {\n', '        operatorWallet = _operatorWallet;\n', '    }\n', '\n', '\n', '\n', '    /***********************************************************************************************************/\n', '    /** Token Receiving and Exchanging *************************************************************************/\n', '\n', '    /** @dev Setter for the exchange rate. */\n', '    function setBetherForEther(uint256 _betherForEther) public operatorLevel {\n', '        betherForEther = _betherForEther;\n', '    }\n', '\n', '    /** \n', '        @dev This event is used to track which account deposited how much Bether.\n', '        @param depositContractAddress The address from whence the Bether arrived.\n', '        @param amount The amount of Bether (in wei) that arrived.\n', '    */\n', '    event DepositDetected(address depositContractAddress, uint256 amount);\n', '    \n', '    /**\n', '        @dev Payable callback function. This is triggered when Ether is sent to\n', '        this contract. It applies the exchange rate to the Ether and emits an\n', '        event, logging the deposit.\n', '    */\n', '    function () public payable {\n', '        uint256 etherValue = msg.value;\n', '        require(etherValue > 0);\n', '        uint256 betherValue = etherValue * betherForEther;\n', '        require(betherValue / etherValue == betherForEther);\n', '        emit DepositDetected(msg.sender, betherValue);\n', '    }\n', '\n', '    /** \n', '        @dev Function that is called by the ERC223 token contract when tokens are sent to\n', '        this contract.\n', '        @param _from Transaction initiator, analogue of msg.sender.\n', '        @param _value Number of tokens (in wei) that have been sent.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes) public {\n', '        require(msg.sender == address(betherToken));\n', '        emit DepositDetected(_from, _value);\n', '    }\n', '\n', '\n', '\n', '    /***********************************************************************************************************/\n', '    /** Token Transfering **************************************************************************************/\n', '\n', '    /**\n', "        @dev Function sends 'amount' of Bether (in wei) from this contract to\n", "        the 'target' address.\n", '    */\n', '    function sendBether(address target, uint256 amount) public operatorLevel {\n', '        require(betherToken.transfer(target, amount));\n', '    }\n', '\n', '    /**\n', "        @dev Function sends 'amount' of Ether (in wei) from this contract to\n", "        the 'target' address. This function can only be triggered by the Admin\n", '        wallet, since we only support one-way exchange.\n', '    */\n', '    function sendEther(address target, uint256 amount) public adminLevel {\n', '        require(target.send(amount));\n', '    }\n', '\n', '\n', '\n', '    /***********************************************************************************************************/\n', '    /** Deployment of Deposit Contracts ************************************************************************/\n', '\n', '    /** @dev This event is used to track down the addresses of newly deployed DepositContracts. */\n', '    event NewDepositContract(address depositContractAddress);\n', '\n', '    /**\n', "        @dev Function deploys 'amount' DepositContracts with this contract set as their\n", '        DepositManager.\n', '        @param amount Amount of DepositContracts to Deploy.\n', '    */\n', '    function deployNewDepositContracts(uint256 amount) public {\n', '        for (uint256 i = 0; i < amount; i++) {\n', '            address newContractAddress = new DepositContract(address(this), address(betherToken));\n', '            emit NewDepositContract(newContractAddress);\n', '        }\n', '    }\n', '\n', '    /***********************************************************************************************************/\n', '}']