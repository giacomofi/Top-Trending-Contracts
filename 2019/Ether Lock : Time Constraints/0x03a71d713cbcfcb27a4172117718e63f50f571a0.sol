['pragma solidity ^0.5.6;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */ \n', 'library SafeMath{\n', '    function mul(uint a, uint b) internal pure returns (uint){\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', ' \n', '    function div(uint a, uint b) internal pure returns (uint){\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', ' \n', '    function sub(uint a, uint b) internal pure returns (uint){\n', '        assert(b <= a); \n', '        return a - b; \n', '    } \n', '  \n', '    function add(uint a, uint b) internal pure returns (uint){ \n', '        uint c = a + b; assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', ' \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', ' \n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', ' \n', '   /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */ \n', '   modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', ' \n', '   /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */ \n', '   function transferOwnership(address newOwner) onlyOwner public{\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ITCMoney token\n', ' * @dev ERC20 Token implementation, with mintable and its own specific\n', ' */\n', 'contract ITCMoney is Ownable{\n', '    using SafeMath for uint;\n', '    \n', '    string public constant name = "ITC Money";\n', '    string public constant symbol = "ITCM";\n', '    uint32 public constant decimals = 18;\n', '    \n', '    address payable public companyAddr = address(0);\n', '    address public constant bonusAddr   = 0xaEA6949B27C44562Dd446c2C44f403cF6D13a2fD;\n', '    address public constant teamAddr    = 0xe0b70c54a1baa2847e210d019Bb8edc291AEA5c7;\n', '    address public constant sellerAddr  = 0x95E1f32981F909ce39d45bF52C9108f47e0FCc50;\n', '    \n', '    uint public totalSupply = 0;\n', '    uint public maxSupply = 17000000000 * 1 ether; // Maximum of tokens to be minted. 1 ether multiplier is decimal.\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '    \n', '    bool public transferAllowed = false;\n', '    mapping(address => bool) internal customTransferAllowed;\n', '    \n', '    uint public tokenRate = 170 * 1 finney; // Start token rate * 10000 (0.017 CHF * 10000). 1 finney multiplier is for decimal.\n', '    uint private tokenRateDays = 0;\n', '    // growRate is the sequence of periods and percents of rate grow. First element is timestamp of period start. Second is grow percent * 10000.\n', '    uint[2][] private growRate = [\n', '        [1538784000, 100],\n', '        [1554422400,  19],\n', '        [1564617600,  17],\n', '        [1572566400,   0]\n', '    ];\n', '    \n', '    uint public rateETHCHF = 0;\n', '    mapping(address => uint) balancesCHF;\n', '    bool public amountBonusAllowed = true;\n', '    // amountBonus describes the token bonus that depends from CHF amount. First element is minimum accumulated CHF amount. Second one is bonus percent * 100.\n', '    uint[2][] private amountBonus = [\n', '        [uint32(2000),    500],\n', '        [uint32(8000),    700],\n', '        [uint32(17000),  1000],\n', '        [uint32(50000),  1500],\n', '        [uint32(100000), 1750],\n', '        [uint32(150000), 2000],\n', '        [uint32(500000), 2500]\n', '    ];\n', '    \n', '    // timeBonus describes the token bonus that depends from date. First element is the timestamp of start date. Second one is bonus percent * 100.\n', '    uint[2][] private timeBonus = [\n', '        [1535673600, 2000], // 2018-08-31\n', '        [1535760000, 1800], // 2018-09-01\n', '        [1538784000, 1500], // 2018-10-06\n', '        [1541462400, 1000], // 2018-11-06\n', '        [1544054400,  800], // 2018-12-06\n', '        [1546732800,  600], // 2019-01-06\n', '        [1549411200,  300], // 2019-02-06\n', '        [1551830400,  200]  // 2019-03-06\n', '    ];\n', '    uint private finalTimeBonusDate = 1554508800; // 2019-04-06. No bonus tokens after this date.\n', '    uint public constantBonus = 0;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event CompanyChanged(address indexed previousOwner, address indexed newOwner);\n', '    event TransfersAllowed();\n', '    event TransfersAllowedTo(address indexed to);\n', '    event CHFBonusStopped();\n', '    event AddedCHF(address indexed to, uint value);\n', '    event NewRateCHF(uint value);\n', '    event AddedGrowPeriod(uint startTime, uint rate);\n', '    event ConstantBonus(uint value);\n', '    event NewTokenRate(uint tokenRate);\n', '\n', '    /** \n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint){\n', '        return balances[_owner];\n', '    }\n', ' \n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */ \n', '    function transfer(address _to, uint _value) public returns (bool){\n', '        require(_to != address(0));\n', '        require(transferAllowed || _to == sellerAddr || customTransferAllowed[msg.sender]);\n', '        require(_value > 0 && _value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true; \n', '    } \n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */ \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool){\n', '        require(_to != address(0));\n', '        require(transferAllowed || _to == sellerAddr || customTransferAllowed[_from]);\n', '        require(_value > 0 && _value <= balances[_from] && _value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', ' \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool){\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', '    /** \n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint){\n', '        return allowed[_owner][_spender]; \n', '    } \n', ' \n', '    /**\n', '     * @dev Increase approved amount of tokents that could be spent on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to be spent.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n', '        return true; \n', '    }\n', ' \n', '    /**\n', '     * @dev Decrease approved amount of tokents that could be spent on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to be spent.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool){\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue){\n', '            allowed[msg.sender][_spender] = 0;\n', '        }else{\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function changes the company address. Ether moves to company address from contract.\n', '     * @param newCompany New company address.\n', '     */\n', '    function changeCompany(address payable newCompany) onlyOwner public{\n', '        require(newCompany != address(0));\n', '        emit CompanyChanged(companyAddr, newCompany);\n', '        companyAddr = newCompany;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow ITCM token transfer for each address.\n', '     */\n', '    function allowTransfers() onlyOwner public{\n', '        transferAllowed = true;\n', '        emit TransfersAllowed();\n', '    }\n', ' \n', '    /**\n', '     * @dev Allow ITCM token transfer for spcified address.\n', '     * @param _to Address to which token transfers become allowed.\n', '     */\n', '    function allowCustomTransfers(address _to) onlyOwner public{\n', '        customTransferAllowed[_to] = true;\n', '        emit TransfersAllowedTo(_to);\n', '    }\n', '    \n', '    /**\n', '     * @dev Stop adding token bonus that depends from accumulative CHF amount.\n', '     */\n', '    function stopCHFBonus() onlyOwner public{\n', '        amountBonusAllowed = false;\n', '        emit CHFBonusStopped();\n', '    }\n', '    \n', '    /**\n', '     * @dev Emit new tokens and transfer from 0 to client address. This function will generate tokens for bonus and team addresses.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */ \n', '    function _mint(address _to, uint _value) private returns (bool){\n', '        // 3% of token amount to bonus address\n', '        uint bonusAmount = _value.mul(3).div(87);\n', '        // 10% of token amount to team address\n', '        uint teamAmount = _value.mul(10).div(87);\n', '        // Restore the total token amount\n', '        uint total = _value.add(bonusAmount).add(teamAmount);\n', '        \n', '        require(total <= maxSupply);\n', '        \n', '        maxSupply = maxSupply.sub(total);\n', '        totalSupply = totalSupply.add(total);\n', '        \n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\n', '        balances[teamAddr] = balances[teamAddr].add(teamAmount);\n', '\n', '        emit Transfer(address(0), _to, _value);\n', '        emit Transfer(address(0), bonusAddr, bonusAmount);\n', '        emit Transfer(address(0), teamAddr, teamAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This is wrapper for _mint.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */ \n', '    function mint(address _to, uint _value) onlyOwner public returns (bool){\n', '        return _mint(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Similar to mint function but take array of addresses and values.\n', '     * @param _to The addresses to transfer to.\n', '     * @param _value The amounts to be transferred.\n', '     */ \n', '    function mint(address[] memory _to, uint[] memory _value) onlyOwner public returns (bool){\n', '        require(_to.length == _value.length);\n', '\n', '        uint len = _to.length;\n', '        for(uint i = 0; i < len; i++){\n', '            if(!_mint(_to[i], _value[i])){\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /** \n', '     * @dev Gets the accumulative CHF balance of the specified address.\n', '     * @param _owner The address to query the the CHF balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceCHFOf(address _owner) public view returns (uint){\n', '        return balancesCHF[_owner];\n', '    }\n', '\n', '    /** \n', '     * @dev Increase CHF amount for address to which the tokens were minted.\n', '     * @param _to Target address.\n', '     * @param _value The amount of CHF.\n', '     */\n', '    function increaseCHF(address _to, uint _value) onlyOwner public{\n', '        balancesCHF[_to] = balancesCHF[_to].add(_value);\n', '        emit AddedCHF(_to, _value);\n', '    }\n', '\n', '    /** \n', '     * @dev Increase CHF amounts for addresses to which the tokens were minted.\n', '     * @param _to Target addresses.\n', '     * @param _value The amounts of CHF.\n', '     */\n', '    function increaseCHF(address[] memory _to, uint[] memory _value) onlyOwner public{\n', '        require(_to.length == _value.length);\n', '\n', '        uint len = _to.length;\n', '        for(uint i = 0; i < len; i++){\n', '            balancesCHF[_to[i]] = balancesCHF[_to[i]].add(_value[i]);\n', '            emit AddedCHF(_to[i], _value[i]);\n', '        }\n', '    }\n', ' \n', '    /** \n', '     * @dev Sets the rate ETH to CHF that represents UINT (rate * 10000).\n', '     * @param _rate ETH CHF rate * 10000.\n', '     */\n', '    function setETHCHFRate(uint _rate) onlyOwner public{\n', '        rateETHCHF = _rate;\n', '        emit NewRateCHF(_rate);\n', '    }\n', '    \n', '    /** \n', '     * @dev Set new period and grow percent at the day.\n', '     * @param _startTime timestamp when the rate will start grow.\n', '     * @param _rate Grow percent * 10000.\n', '     */\n', '    function addNewGrowRate(uint _startTime, uint _rate) onlyOwner public{\n', '        growRate.push([_startTime, _rate]);\n', '        emit AddedGrowPeriod(_startTime, _rate);\n', '    }\n', ' \n', '    /** \n', '     * @dev Set constant token bonus for each address that applies in fallback.\n', '     * @param _value Grow percent * 100.\n', '     */\n', '    function setConstantBonus(uint _value) onlyOwner public{\n', '        constantBonus = _value;\n', '        emit ConstantBonus(_value);\n', '    }\n', '\n', '    /** \n', '     * @dev Calculate and store current token rate.\n', '     *      The rate grows every day per percent that is shown in growRate starting from timestamp that was set for the rate.\n', '     */\n', '    function getTokenRate() public returns (uint){\n', '        uint startTokenRate = tokenRate;\n', '        uint totalDays = 0;\n', '        uint len = growRate.length;\n', '        // For each period from growRate\n', '        for(uint i = 0; i < len; i++){\n', '            if(now > growRate[i][0] && growRate[i][1] > 0){\n', '                // The final date is minimum from now and next period date\n', '                uint end = now;\n', '                if(i + 1 < len && end > growRate[i + 1][0]){\n', '                    end = growRate[i + 1][0];\n', '                }\n', '                uint dateDiff = (end - growRate[i][0]) / 1 days;\n', '                totalDays = totalDays + dateDiff;\n', '                // Check if the rate calculation required\n', '                if(dateDiff > 0 && totalDays > tokenRateDays){\n', '                    // Calculate and store the rate.\n', '                    // This is like rate * (100+percent)**days but memory safe.\n', '                    for(uint ii = tokenRateDays; ii < totalDays; ii++){\n', '                        tokenRate = tokenRate * (10000 + growRate[i][1]) / 10000;\n', '                    }\n', '                    tokenRateDays = totalDays;\n', '                }\n', '            }\n', '        }\n', '        if(startTokenRate != tokenRate){\n', '            emit NewTokenRate(tokenRate);\n', '        }\n', '        return tokenRate;\n', '    }\n', '    \n', '    /** \n', '     * @dev Function that receives the ether, transfers it to company address and mints tokens to address that initiates payment. Company, bonus and team addresses gets the tokens as well.\n', '     */\n', '    function () external payable {\n', '        // Revert if there are no basic parameters\n', '        require(msg.data.length == 0);\n', '        require(msg.value > 0);\n', '        require(rateETHCHF > 0);\n', '        \n', '        // Calculate token amount (amount of CHF / current rate). Remember that token rate is multiplied by 1 finney, add the same multiplier for ether amount.\n', '        uint amount = (msg.value * rateETHCHF * 1 finney) / getTokenRate();\n', '        // Calculate CHF amount analogue, then store it for customer.\n', '        uint amountCHF = (msg.value * rateETHCHF) / 10000 / 1 ether;\n', '        uint totalCHF = balancesCHF[msg.sender].add(amountCHF);\n', '        emit AddedCHF(msg.sender, amountCHF);\n', '\n', '        // Get the bonus percent that depends from time or its constant.\n', '        uint len = 0;\n', '        uint i = 0;\n', '        uint percent = 0;\n', '        uint bonus = 0;\n', '        if(constantBonus > 0){\n', '            bonus = amount.mul(constantBonus).div(10000);\n', '        }else if(now < finalTimeBonusDate){\n', '            len = timeBonus.length;\n', '            percent = 0;\n', '            for(i = 0; i < len; i++){\n', '                if(now >= timeBonus[i][0]){\n', '                    percent = timeBonus[i][1];\n', '                }else{\n', '                    break;\n', '                }\n', '            }\n', '            if(percent > 0){\n', '                bonus = amount.mul(percent).div(10000);\n', '            }\n', '        }\n', '\n', '        // Add the bonus that depends from accumulated CHF amount\n', '        if(amountBonusAllowed){\n', '            len = amountBonus.length;\n', '            percent = 0;\n', '            for(i = 0; i < len; i++){\n', '                if(totalCHF >= amountBonus[i][0]){\n', '                    percent = amountBonus[i][1];\n', '                }else{\n', '                    break;\n', '                }\n', '            }\n', '            if(percent > 0){\n', '                bonus = bonus.add(amount.mul(percent).div(10000));\n', '            }\n', '        }\n', '        \n', '        amount = amount.add(bonus);\n', '        \n', '        // 3% of token amount to bonus address\n', '        uint bonusAmount = amount.mul(3).div(87);\n', '        // 10% of token amount to team address\n', '        uint teamAmount = amount.mul(10).div(87);\n', '        // Restore the total token amount\n', '        uint total = amount.add(bonusAmount).add(teamAmount);\n', '        \n', '        require(total <= maxSupply);\n', '        \n', '        maxSupply = maxSupply.sub(total);\n', '        totalSupply = totalSupply.add(total);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        balancesCHF[msg.sender] = totalCHF;\n', '        balances[bonusAddr] = balances[bonusAddr].add(bonusAmount);\n', '        balances[teamAddr] = balances[teamAddr].add(teamAmount);\n', '\n', '        companyAddr.transfer(msg.value);\n', '        \n', '        emit Transfer(address(0), msg.sender, amount);\n', '        emit Transfer(address(0), bonusAddr, bonusAmount);\n', '        emit Transfer(address(0), teamAddr, teamAmount);\n', '    }\n', '}']