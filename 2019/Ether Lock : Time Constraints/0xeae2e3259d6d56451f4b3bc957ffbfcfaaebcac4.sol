['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-05\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BasicERC20\n', '{\n', '    /* Public variables of the token */\n', '    string public standard = &#39;ERC20&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    bool public isTokenTransferable = true;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        assert(isTokenTransferable);\n', '        assert(balanceOf[msg.sender] >= _value);             // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success)  {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        assert(isTokenTransferable || _from == address(0x0)); // allow to transfer for crowdsale\n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BasicCrowdsale is Ownable\n', '{\n', '    using SafeMath for uint256;\n', '    BasicERC20 token;\n', '\n', '    address public ownerWallet;\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    uint256 public totalEtherRaised = 0;\n', '    uint256 public minDepositAmount;\n', '    uint256 public maxDepositAmount;\n', '\n', '    uint256 public softCapEther;\n', '    uint256 public hardCapEther;\n', '\n', '    mapping(address => uint256) private deposits;\n', '\n', '    constructor () public {\n', '\n', '    }\n', '\n', '    function () external payable {\n', '        buy(msg.sender);\n', '    }\n', '\n', '    function getSettings () view public returns(uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _totalEtherRaised,\n', '        uint256 _minDepositAmount,\n', '        uint256 _maxDepositAmount,\n', '        uint256 _tokensLeft ) {\n', '\n', '        _startTime = startTime;\n', '        _endTime = endTime;\n', '        _rate = getRate();\n', '        _totalEtherRaised = totalEtherRaised;\n', '        _minDepositAmount = minDepositAmount;\n', '        _maxDepositAmount = maxDepositAmount;\n', '        _tokensLeft = tokensLeft();\n', '    }\n', '\n', '    function tokensLeft() view public returns (uint256)\n', '    {\n', '        return token.balanceOf(address(0x0));\n', '    }\n', '\n', '    function changeMinDepositAmount (uint256 _minDepositAmount) onlyOwner public {\n', '        minDepositAmount = _minDepositAmount;\n', '    }\n', '\n', '    function changeMaxDepositAmount (uint256 _maxDepositAmount) onlyOwner public {\n', '        maxDepositAmount = _maxDepositAmount;\n', '    }\n', '\n', '    function getRate() view public returns (uint256) {\n', '        assert(false);\n', '    }\n', '\n', '    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n', '        return weiAmount.mul(getRate());\n', '    }\n', '\n', '    function checkCorrectPurchase() view internal {\n', '        require(startTime < now && now < endTime);\n', '        require(msg.value >= minDepositAmount);\n', '        require(msg.value < maxDepositAmount);\n', '        require(totalEtherRaised + msg.value < hardCapEther);\n', '    }\n', '\n', '    function isCrowdsaleFinished() view public returns(bool)\n', '    {\n', '        return totalEtherRaised >= hardCapEther || now > endTime;\n', '    }\n', '\n', '    function buy(address userAddress) public payable {\n', '        require(userAddress != address(0));\n', '        checkCorrectPurchase();\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getTokenAmount(msg.value);\n', '\n', '        // update state\n', '        totalEtherRaised = totalEtherRaised.add(msg.value);\n', '\n', '        token.transferFrom(address(0x0), userAddress, tokens);\n', '\n', '        if (totalEtherRaised >= softCapEther)\n', '        {\n', '            ownerWallet.transfer(this.balance);\n', '        }\n', '        else\n', '        {\n', '            deposits[userAddress] = deposits[userAddress].add(msg.value);\n', '        }\n', '    }\n', '\n', '    function getRefundAmount(address userAddress) view public returns (uint256)\n', '    {\n', '        if (totalEtherRaised >= softCapEther) return 0;\n', '        return deposits[userAddress];\n', '    }\n', '\n', '    function refund(address userAddress) public\n', '    {\n', '        assert(totalEtherRaised < softCapEther && now > endTime);\n', '        uint256 amount = deposits[userAddress];\n', '        deposits[userAddress] = 0;\n', '        userAddress.transfer(amount);\n', '    }\n', '}\n', '\n', '\n', 'contract CrowdsaleCompatible is BasicERC20, Ownable\n', '{\n', '    BasicCrowdsale public crowdsale = BasicCrowdsale(0x0);\n', '\n', '    // anyone can unfreeze tokens when crowdsale is finished\n', '    function unfreezeTokens() public\n', '    {\n', '        assert(now > crowdsale.endTime());\n', '        isTokenTransferable = true;\n', '    }\n', '\n', '    // change owner to 0x0 to lock this function\n', '    function initializeCrowdsale(address crowdsaleContractAddress, uint256 tokensAmount) onlyOwner public  {\n', '        transfer((address)(0x0), tokensAmount);\n', '        allowance[(address)(0x0)][crowdsaleContractAddress] = tokensAmount;\n', '        crowdsale = BasicCrowdsale(crowdsaleContractAddress);\n', '        isTokenTransferable = false;\n', '        transferOwnership(0x0); // remove an owner\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EditableToken is BasicERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // change owner to 0x0 to lock this function\n', '    function editTokenProperties(string _name, string _symbol, int256 extraSupplay) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        if (extraSupplay > 0)\n', '        {\n', '            balanceOf[owner] = balanceOf[owner].add(uint256(extraSupplay));\n', '            totalSupply = totalSupply.add(uint256(extraSupplay));\n', '            emit Transfer(address(0x0), owner, uint256(extraSupplay));\n', '        }\n', '        else if (extraSupplay < 0)\n', '        {\n', '            balanceOf[owner] = balanceOf[owner].sub(uint256(extraSupplay * -1));\n', '            totalSupply = totalSupply.sub(uint256(extraSupplay * -1));\n', '            emit Transfer(owner, address(0x0), uint256(extraSupplay * -1));\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ThirdPartyTransferableToken is BasicERC20{\n', '    using SafeMath for uint256;\n', '\n', '    struct confidenceInfo {\n', '        uint256 nonce;\n', '        mapping (uint256 => bool) operation;\n', '    }\n', '    mapping (address => confidenceInfo) _confidence_transfers;\n', '\n', '    function nonceOf(address src) view public returns (uint256) {\n', '        return _confidence_transfers[src].nonce;\n', '    }\n', '\n', '    function transferByThirdParty(uint256 nonce, address where, uint256 amount, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        assert(where != address(this));\n', '        assert(where != address(0x0));\n', '\n', '        bytes32 hash = sha256(this, nonce, where, amount);\n', '        address src = ecrecover(keccak256("\\x19Ethereum Signed Message:\\n32", hash),v,r,s);\n', '        assert(balanceOf[src] >= amount);\n', '        assert(nonce == _confidence_transfers[src].nonce+1);\n', '\n', '        assert(_confidence_transfers[src].operation[uint256(hash)]==false);\n', '\n', '        balanceOf[src] = balanceOf[src].sub(amount);\n', '        balanceOf[where] = balanceOf[where].add(amount);\n', '        _confidence_transfers[src].nonce += 1;\n', '        _confidence_transfers[src].operation[uint256(hash)] = true;\n', '\n', '        emit Transfer(src, where, amount);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ERC20Token is CrowdsaleCompatible, EditableToken, ThirdPartyTransferableToken {\n', '    using SafeMath for uint256;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public\n', '    {\n', '        balanceOf[0xdffd1e7fb9a88b7ab3316fdf7575c14fdb0c3b3a] = uint256(100000) * 10**18;\n', '        emit Transfer(address(0x0), 0xdffd1e7fb9a88b7ab3316fdf7575c14fdb0c3b3a, balanceOf[0xdffd1e7fb9a88b7ab3316fdf7575c14fdb0c3b3a]);\n', '\n', '        transferOwnership(0xdffd1e7fb9a88b7ab3316fdf7575c14fdb0c3b3a);\n', '\n', '        totalSupply = 100000 * 10**18;                  // Update total supply\n', '        name = &#39;Bitcoin40&#39;;                                   // Set the name for display purposes\n', '        symbol = &#39;BHT&#39;;                               // Set the symbol for display purposes\n', '        decimals = 18;                                           // Amount of decimals for display purposes\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () public {\n', '        assert(false);     // Prevents accidental sending of ether\n', '    }\n', '}']