['pragma solidity ^0.4.0;\n', '\n', 'contract ChessBank{\n', '    \n', '    mapping (address => uint) private balances;\n', '    \n', '    address public owner;\n', '    \n', '    event depositDone(string message, address accountAddress, uint amount);\n', '    event withdrawalDone(string message, address accountAddress, uint amount);\n', '    \n', '    function BankContract() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function deposit() public payable {\n', '        balances[msg.sender] += msg.value;\n', '        depositDone("A deposit was done", msg.sender, msg.value);\n', '    }\n', '    \n', '    function withdraw(uint amount) public {\n', '        require(balances[msg.sender] >= amount);\n', '        balances[msg.sender] -= amount;\n', '        \n', '        if(!msg.sender.send(amount)){\n', '            balances[msg.sender] += amount;\n', '        }\n', '        else{\n', '            withdrawalDone("A withdrawal was done", msg.sender, amount);\n', '        }\n', '        \n', '    }\n', '    \n', '    function getBalance() public constant returns (uint){\n', '        return balances[msg.sender];\n', '    }\n', '}']