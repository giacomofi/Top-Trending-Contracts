['pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract Sopow {\n', '\n', '    event NewStake(address source, uint256 hash, uint256 value, uint256 target, uint payment);\n', '    event NewMiner(address miner, uint256 hash, uint payment);\n', '    event Status(uint min, uint256 target, uint block);\n', '    event PaidOut(address miner, uint amount);\n', '\n', '    address payable service = 0x935F545C5aA388B6846FB7A4c51ED1b180A4eFFF;\n', '\n', '    //Set initial values\n', '    uint min = 1 wei;\n', '    uint finalBlock = 100000000;\n', '    uint lastBlock = 7000000;\n', '    address payable miner = 0x0000000000000000000000000000000000000000;\n', '    uint256 target = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '\n', '    function getTargetAmount() public view returns(uint) {\n', '        return min;\n', '    }\n', '\n', '    function getPayment() public view returns(uint) {\n', '        uint _total = getPreviousBalance();\n', '        return (_total / 2) + (_total / 4);\n', '    }\n', '\n', '    function getTarget() public view returns(uint) {\n', '        return target;\n', '    }\n', '\n', '    function getMiner() public view returns(address) {\n', '        return miner;\n', '    }\n', '\n', '    function getFinalBlock() public view returns(uint) {\n', '        return finalBlock;\n', '    }\n', '\n', '    // ---\n', '\n', '    function getPreviousBalance() private view returns(uint) {\n', '        return address(this).balance - msg.value;\n', '    }\n', '\n', '    function isFinished() private view returns(bool) {\n', '        return block.number >= getFinalBlock();\n', '    }\n', '\n', '    function tooLate() private view returns(bool) {\n', '        return block.number >= getFinalBlock() + 11000;\n', '    }\n', '\n', '    function work(uint _target, uint _total, uint _value) private pure returns(uint) {\n', '        return uint256(keccak256(abi.encodePacked(_target, _total, _value))) - _value;\n', '    }\n', '\n', '    function getNextPayment() private view returns(uint) {\n', '        uint _total = address(this).balance;\n', '        return (_total / 2) + (_total / 4);\n', '    }\n', '\n', '    // ---\n', '\n', '    function () external payable {\n', '        if (msg.sender != tx.origin) {\n', '            return;\n', '        }\n', '\n', '        payout();\n', '\n', '        uint total = getPreviousBalance();\n', '        uint nextMinerPayment = getNextPayment();\n', '        uint hash = work(target, total, msg.value);\n', '        uint stake = msg.value;\n', '        emit NewStake(msg.sender, hash, msg.value, target, nextMinerPayment);\n', '\n', '        if (stake < min) {\n', '            return;\n', '        }\n', '\n', '        if (hash < target) {\n', '            target = hash;\n', '            miner = msg.sender;\n', '            min = stake;\n', '            finalBlock = block.number + (block.number - lastBlock) + 42;\n', '            if (finalBlock > (block.number + 11000)) {\n', '                finalBlock =  block.number + 11000;\n', '            }\n', '            lastBlock = block.number;\n', '            emit NewMiner(miner, target, nextMinerPayment);\n', '            emit Status(min, target, finalBlock);\n', '        }\n', '    }\n', '\n', '    function payout() public {\n', '        if (!isFinished()) {\n', '            return;\n', '        }\n', '\n', '        // if nobody requested payout for more than 11000 blocks\n', '        if (tooLate()) {\n', '            service.transfer(getPreviousBalance() / 2);\n', '            min = min / 2;\n', '            target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '            lastBlock  = block.number - 11000;\n', '            finalBlock = block.number + 11000;\n', '            return;\n', '        }\n', '\n', '        uint _total = getPreviousBalance();\n', '        uint _payment = getPayment();\n', '        uint _fee = _total / 8;\n', '\n', '        miner.transfer(_payment);\n', '        service.transfer(_fee);\n', '        emit PaidOut(miner, _payment);\n', '\n', '        min = _total / 64;\n', '        target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '        lastBlock  = block.number - 11000;\n', '        finalBlock = block.number + 11000;\n', '        emit Status(min, target, finalBlock);\n', '    }\n', '\n', '}']