['// File: contracts/interfaces/IERC173.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/// @title ERC-173 Contract Ownership Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\n', '///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n', 'contract IERC173 {\n', '    /// @dev This emits when ownership of a contract changes.\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    /// @notice Get the address of the owner\n', '    /// @return The address of the owner.\n', '    //// function owner() external view returns (address);\n', '\n', '    /// @notice Set the address of the new owner of the contract\n', '    /// @param _newOwner The address of the new owner of the contract\n', '    function transferOwnership(address _newOwner) external;\n', '}\n', '\n', '// File: contracts/commons/Ownable.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', 'contract Ownable is IERC173 {\n', '    address internal _owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "The owner should be the sender");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0x0), msg.sender);\n', '    }\n', '\n', '    function owner() external view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '        @dev Transfers the ownership of the contract.\n', '\n', '        @param _newOwner Address of the new owner\n', '    */\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "0x0 Is not a valid owner");\n', '        emit OwnershipTransferred(_owner, _newOwner);\n', '        _owner = _newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC165.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'interface IERC165 {\n', '    /// @notice Query if a contract implements an interface\n', '    /// @param interfaceID The interface identifier, as specified in ERC-165\n', '    /// @dev Interface identification is specified in ERC-165. This function\n', '    ///  uses less than 30,000 gas.\n', '    /// @return `true` if the contract implements `interfaceID` and\n', '    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '// File: contracts/core/diaspore/interfaces/RateOracle.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', '/**\n', '    @dev Defines the interface of a standard Diaspore RCN Oracle,\n', '\n', "    The contract should also implement it's ERC165 interface: 0xa265d8e0\n", '\n', '    @notice Each oracle can only support one currency\n', '\n', '    @author Agustin Aguilar\n', '*/\n', 'contract RateOracle is IERC165 {\n', '    uint256 public constant VERSION = 5;\n', '    bytes4 internal constant RATE_ORACLE_INTERFACE = 0xa265d8e0;\n', '\n', '    constructor() internal {}\n', '\n', '    /**\n', '        3 or 4 letters symbol of the currency, Ej: ETH\n', '    */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '        Descriptive name of the currency, Ej: Ethereum\n', '    */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '        The number of decimals of the currency represented by this Oracle,\n', '            it should be the most common number of decimal places\n', '    */\n', '    function decimals() external view returns (uint256);\n', '\n', '    /**\n', '        The base token on which the sample is returned\n', '            should be the RCN Token address.\n', '    */\n', '    function token() external view returns (address);\n', '\n', '    /**\n', '        The currency symbol encoded on a UTF-8 Hex\n', '    */\n', '    function currency() external view returns (bytes32);\n', '\n', '    /**\n', '        The name of the Individual or Company in charge of this Oracle\n', '    */\n', '    function maintainer() external view returns (string memory);\n', '\n', '    /**\n', '        Returns the url where the oracle exposes a valid "oracleData" if needed\n', '    */\n', '    function url() external view returns (string memory);\n', '\n', '    /**\n', '        Returns a sample on how many token() are equals to how many currency()\n', '    */\n', '    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent);\n', '}\n', '\n', '// File: contracts/commons/ERC165.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '    /**\n', '    * 0x01ffc9a7 ===\n', "    *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '    */\n', '\n', '    /**\n', "    * @dev a mapping of interface id to whether or not it's supported\n", '    */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    /**\n', '    * @dev A contract implementing SupportsInterfaceWithLookup\n', '    * implement ERC165 itself\n', '    */\n', '    constructor()\n', '        internal\n', '    {\n', '        _registerInterface(_InterfaceId_ERC165);\n', '    }\n', '\n', '    /**\n', '    * @dev implement supportsInterface(bytes4) using a lookup table\n', '    */\n', '    function supportsInterface(bytes4 interfaceId)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '    * @dev internal method for registering an interface\n', '    */\n', '    function _registerInterface(bytes4 interfaceId)\n', '        internal\n', '    {\n', '        require(interfaceId != 0xffffffff, "Can\'t register 0xffffffff");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: contracts/core/basalt/utils/OwnableBasalt.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'contract OwnableBasalt {\n', '    address public owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "The owner should be the sender");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '        @dev Transfers the ownership of the contract.\n', '\n', '        @param _to Address of the new owner\n', '    */\n', '    function transferTo(address _to) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "0x0 Is not a valid owner");\n', '        owner = _to;\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/core/basalt/interfaces/Oracle.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', '/**\n', '    @dev Defines the interface of a standard RCN oracle.\n', '\n', '    The oracle is an agent in the RCN network that supplies a convertion rate between RCN and any other currency,\n', "    it's primarily used by the exchange but could be used by any other agent.\n", '*/\n', 'contract Oracle is OwnableBasalt {\n', '    uint256 public constant VERSION = 4;\n', '\n', '    event NewSymbol(bytes32 _currency);\n', '\n', '    mapping(bytes32 => bool) public supported;\n', '    bytes32[] public currencies;\n', '\n', '    /**\n', '        @dev Returns the url where the oracle exposes a valid "oracleData" if needed\n', '    */\n', '    function url() public view returns (string memory);\n', '\n', '    /**\n', '        @dev Returns a valid convertion rate from the currency given to RCN\n', '\n', '        @param symbol Symbol of the currency\n', '        @param data Generic data field, could be used for off-chain signing\n', '    */\n', '    function getRate(bytes32 symbol, bytes memory data) public returns (uint256 rate, uint256 decimals);\n', '\n', '    /**\n', '        @dev Adds a currency to the oracle, once added it cannot be removed\n', '\n', '        @param ticker Symbol of the currency\n', '\n', '        @return if the creation was done successfully\n', '    */\n', '    function addCurrency(string memory ticker) public onlyOwner returns (bool) {\n', '        bytes32 currency = encodeCurrency(ticker);\n', '        emit NewSymbol(currency);\n', '        supported[currency] = true;\n', '        currencies.push(currency);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @return the currency encoded as a bytes32\n', '    */\n', '    function encodeCurrency(string memory currency) public pure returns (bytes32 o) {\n', '        require(bytes(currency).length <= 32);\n', '        assembly {\n', '            o := mload(add(currency, 32))\n', '        }\n', '    }\n', '\n', '    /**\n', '        @return the currency string from a encoded bytes32\n', '    */\n', '    function decodeCurrency(bytes32 b) public pure returns (string memory o) {\n', '        uint256 ns = 256;\n', '        while (true) {\n', '            if (ns == 0 || (b<<ns-8) != 0)\n', '                break;\n', '            ns -= 8;\n', '        }\n', '        assembly {\n', '            ns := div(ns, 8)\n', '            o := mload(0x40)\n', '            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\n', '            mstore(o, ns)\n', '            mstore(add(o, 32), b)\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/core/diaspore/utils/OracleAdapter.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', '\n', '\n', 'contract OracleAdapter is Ownable, RateOracle, ERC165 {\n', '    Oracle public legacyOracle;\n', '\n', '    string private isymbol;\n', '    string private iname;\n', '    string private imaintainer;\n', '\n', '    uint256 private idecimals;\n', '    bytes32 private icurrency;\n', '\n', '    address private itoken;\n', '\n', '    constructor(\n', '        Oracle _legacyOracle,\n', '        string memory _symbol,\n', '        string memory _name,\n', '        string memory _maintainer,\n', '        uint256 _decimals,\n', '        bytes32 _currency,\n', '        address _token\n', '    ) public {\n', '        legacyOracle = _legacyOracle;\n', '        isymbol = _symbol;\n', '        iname = _name;\n', '        imaintainer = _maintainer;\n', '        idecimals = _decimals;\n', '        icurrency = _currency;\n', '        itoken = _token;\n', '\n', '        _registerInterface(RATE_ORACLE_INTERFACE);\n', '    }\n', '\n', '    function symbol() external view returns (string memory) { return isymbol; }\n', '\n', '    function name() external view returns (string memory) { return iname; }\n', '\n', '    function decimals() external view returns (uint256) { return idecimals; }\n', '\n', '    function token() external view returns (address) { return itoken; }\n', '\n', '    function currency() external view returns (bytes32) { return icurrency; }\n', '\n', '    function maintainer() external view returns (string memory) { return imaintainer; }\n', '\n', '    function url() external view returns (string memory) {\n', '        return legacyOracle.url();\n', '    }\n', '    \n', '    function setMaintainer(string calldata _maintainer) external onlyOwner {\n', '        imaintainer = _maintainer;\n', '    }\n', '    \n', '    function setName(string calldata _name) external onlyOwner {\n', '        iname = _name;\n', '    }\n', '    \n', '    function setLegacyOracle(Oracle _legacyOracle) external onlyOwner {\n', '        legacyOracle = _legacyOracle;\n', '    }\n', '\n', '    function readSample(bytes calldata _data) external returns (uint256 _tokens, uint256 _equivalent) {\n', '        (_tokens, _equivalent) = legacyOracle.getRate(icurrency, _data);\n', '        _equivalent = 10 ** _equivalent;\n', '    }\n', '}']