['pragma solidity ^0.4.20;\n', '\n', 'library safeMath\n', '{\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '    return c;\n', '  }\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Event\n', '{\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Deposit(address indexed sender, uint256 amount , string status);\n', '  event TokenBurn(address indexed from, uint256 value);\n', '  event TokenAdd(address indexed from, uint256 value);\n', '  event Set_Status(string changedStatus);\n', '  event Set_TokenReward(uint256 changedTokenReward);\n', '  event Set_TimeStamp(uint256 ico_open_time, uint256 ico_closed_time);\n', '  event WithdrawETH(uint256 amount);\n', '  event BlockedAddress(address blockedAddress);\n', '  event TempLockedAddress(address tempLockAddress, uint256 unlockTime);\n', '}\n', '\n', 'contract Variable\n', '{\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  uint256 public totalSupply;\n', '  address public owner;\n', '  string public status;\n', '\n', '  uint256 internal _decimals;\n', '  uint256 internal tokenReward;\n', '  uint256 internal ico_open_time;\n', '  uint256 internal ico_closed_time;\n', '  bool internal transferLock;\n', '  bool internal depositLock;\n', '\n', '  mapping (address => bool) public allowedAddress;\n', '  mapping (address => bool) public blockedAddress;\n', '  mapping (address => uint256) public tempLockedAddress;\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  constructor() public\n', '  {\n', '    name = "PURIECO";\n', '    symbol = "PEC";\n', '    decimals = 18;\n', '    _decimals = 10 ** uint256(decimals);\n', '    tokenReward = 0;\n', '    totalSupply = _decimals * 8800000000;\n', '    status = "";\n', '    ico_open_time = 0; // 18.01.01 00:00:00 1514732400;\n', '    ico_closed_time = 0;\n', '    transferLock = true;\n', '    depositLock = true;\n', '    owner =  msg.sender;\n', '    balanceOf[owner] = totalSupply;\n', '    allowedAddress[owner] = true;\n', '  }\n', '}\n', '\n', 'contract Modifiers is Variable\n', '{\n', '  modifier isOwner\n', '  {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier isValidAddress\n', '  {\n', '    require(0x0 != msg.sender);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Set is Variable, Modifiers, Event\n', '{\n', '  function setStatus(string _status) public isOwner returns(bool success)\n', '  {\n', '    status = _status;\n', '    emit Set_Status(status);\n', '    return true;\n', '  }\n', '  function setTokenReward(uint256 _tokenReward) public isOwner returns(bool success)\n', '  {\n', '    tokenReward = _tokenReward;\n', '    emit Set_TokenReward(tokenReward);\n', '    return true;\n', '  }\n', '  function setTimeStamp(uint256 _ico_open_time,uint256 _ico_closed_time) public isOwner returns(bool success)\n', '  {\n', '    ico_open_time = _ico_open_time;\n', '    ico_closed_time = _ico_closed_time;\n', '\n', '    emit Set_TimeStamp(ico_open_time, ico_closed_time);\n', '    return true;\n', '  }\n', '  function setTransferLock(bool _transferLock) public isOwner returns(bool success)\n', '  {\n', '    transferLock = _transferLock;\n', '    return true;\n', '  }\n', '  function setDepositLock(bool _depositLock) public isOwner returns(bool success)\n', '  {\n', '    depositLock = _depositLock;\n', '    return true;\n', '  }\n', '  function setTimeStampStatus(uint256 _ico_open_time, uint256 _ico_closed_time, string _status) public isOwner returns(bool success)\n', '  {\n', '    ico_open_time = _ico_open_time;\n', '    ico_closed_time = _ico_closed_time;\n', '    status = _status;\n', '    emit Set_TimeStamp(ico_open_time,ico_closed_time);\n', '    emit Set_Status(status);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract manageAddress is Variable, Modifiers, Event\n', '{\n', '\n', '  function add_allowedAddress(address _address) public isOwner\n', '  {\n', '    allowedAddress[_address] = true;\n', '  }\n', '\n', '  function add_blockedAddress(address _address) public isOwner\n', '  {\n', '    require(_address != owner);\n', '    blockedAddress[_address] = true;\n', '    emit BlockedAddress(_address);\n', '  }\n', '\n', '  function delete_allowedAddress(address _address) public isOwner\n', '  {\n', '    require(_address != owner);\n', '    allowedAddress[_address] = false;\n', '  }\n', '\n', '  function delete_blockedAddress(address _address) public isOwner\n', '  {\n', '    blockedAddress[_address] = false;\n', '  }\n', '}\n', '\n', 'contract Get is Variable, Modifiers\n', '{\n', '  using safeMath for uint256;\n', '\n', '  function get_tokenTime() public view returns(uint256 start, uint256 stop)\n', '  {\n', '    return (ico_open_time,ico_closed_time);\n', '  }\n', '  function get_transferLock() public view returns(bool)\n', '  {\n', '    return transferLock;\n', '  }\n', '  function get_depositLock() public view returns(bool)\n', '  {\n', '    return depositLock;\n', '  }\n', '  function get_tokenReward() public view returns(uint256)\n', '  {\n', '    return tokenReward;\n', '  }\n', '}\n', '\n', 'contract Admin is Variable, Modifiers, Event\n', '{\n', '  using safeMath for uint256;\n', '\n', '  function admin_transfer_tempLockAddress(address _to, uint256 _value, uint256 _unlockTime) public isOwner returns(bool success)\n', '  {\n', '    require(_value > 0);\n', '    require(balanceOf[msg.sender] >= _value);\n', '    require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '    balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '    tempLockedAddress[_to] = _unlockTime;\n', '    emit Transfer(msg.sender, _to, _value);\n', '    emit TempLockedAddress(_to, _unlockTime);\n', '    return true;\n', '  }\n', '  function admin_transferFrom(address _from, address _to, uint256 _value) public isOwner returns(bool success)\n', '  {\n', '    require(_value > 0);\n', '    require(balanceOf[msg.sender] >= _value);\n', '    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '    balanceOf[_to] = balanceOf[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function admin_tokenBurn(uint256 _value) public isOwner returns(bool success)\n', '  {\n', '    require(_value > 0);\n', '    require(balanceOf[msg.sender] >= _value);\n', '    balanceOf[msg.sender] -= _value;\n', '    totalSupply -= _value;\n', '    emit TokenBurn(msg.sender, _value);\n', '    return true;\n', '  }\n', '  function admin_tokenAdd(uint256 _value) public isOwner returns(bool success)\n', '  {\n', '    require(_value > 0);\n', '    balanceOf[msg.sender] = balanceOf[msg.sender].add(_value);\n', '    totalSupply = totalSupply.add(_value);\n', '    emit TokenAdd(msg.sender, _value);\n', '    return true;\n', '  }\n', '  function admin_renewLockedAddress(address _address, uint256 _unlockTime) public isOwner returns(bool success)\n', '  {\n', '    tempLockedAddress[_address] = _unlockTime;\n', '    emit TempLockedAddress(_address, _unlockTime);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PEC is Variable, Event, Get, Set, Admin, manageAddress\n', '{\n', '  function() payable public\n', '  {\n', '    require(msg.value > 0);\n', '    require(ico_open_time < block.timestamp && ico_closed_time > block.timestamp);\n', '    require(!depositLock);\n', '    uint256 tokenValue;\n', '    tokenValue = (msg.value).mul(tokenReward);\n', '    require(balanceOf[owner] >= tokenValue);\n', '    require(balanceOf[msg.sender].add(tokenValue) >= balanceOf[msg.sender]);\n', '    emit Deposit(msg.sender, msg.value, status);\n', '    balanceOf[owner] -= tokenValue;\n', '    balanceOf[msg.sender] += tokenValue;\n', '    emit Transfer(owner, msg.sender, tokenValue);\n', '  }\n', '  function transfer(address _to, uint256 _value) public isValidAddress\n', '  {\n', '    require(!blockedAddress[msg.sender] && !blockedAddress[_to]);\n', '    require(_value > 0 && _to != msg.sender);\n', '    require(balanceOf[msg.sender] >= _value);\n', '    require(allowedAddress[msg.sender] || transferLock == false);\n', '    require(tempLockedAddress[msg.sender] < block.timestamp);\n', '    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '    balanceOf[_to] = balanceOf[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '  }\n', '  function ETH_withdraw(uint256 amount) public isOwner returns(bool)\n', '  {\n', '    owner.transfer(amount);\n', '    emit WithdrawETH(amount);\n', '    return true;\n', '  }\n', '}']