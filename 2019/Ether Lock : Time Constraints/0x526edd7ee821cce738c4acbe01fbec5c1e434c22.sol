['pragma solidity ^0.5.7;\n', '\n', 'contract DepositContract {\n', '    MainDepositContract public _main_contract;\n', '    uint256 public _user_id;\n', '\n', '    constructor(uint256 user_id) public {\n', '        _user_id = user_id;\n', '        _main_contract = MainDepositContract(msg.sender);\n', '    }\n', '\n', '    function () external payable {\n', '        _main_contract.log_deposit.value(msg.value)(_user_id);\n', '    }\n', '}\n', '\n', 'contract MainDepositContract {\n', '    mapping (uint256 => DepositContract) public _deposit_contracts;\n', '    mapping (address => bool) public _owners;\n', '    address _management_address;\n', '\n', '    event Deposit(uint256 _user_id, uint256 _amount);\n', '    event Withdraw(address payable _address, uint256 _amount);\n', '\n', '    modifier _onlyOwners() {\n', "        require(_owners[msg.sender], 'Sender is not an owner');\n", '        _;\n', '    }\n', '\n', '    modifier _onlyManager() {\n', "        require(_owners[msg.sender] || msg.sender == _management_address, 'Sender is nether a manager nor owner');\n", '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        _owners[msg.sender] = true;\n', '        _management_address = msg.sender;\n', '    }\n', '\n', '    function add_owner(address owner_address) _onlyOwners public {\n', "        require(!_owners[owner_address], 'This address is already an owner');\n", '        _owners[owner_address] = true;\n', '    }\n', '\n', '    function remove_owner(address owner_address) _onlyOwners public {\n', "        require(_owners[owner_address], 'This address is not an owner');\n", '        _owners[owner_address] = false;\n', '    }\n', '\n', '    function set_management_address(address management_address) _onlyOwners public {\n', '        _management_address = management_address;\n', '    }\n', '\n', '    function create_deposit_address(uint256 user_id) _onlyManager public returns (DepositContract created_contract) {\n', '        DepositContract c = new DepositContract(user_id);\n', '        _deposit_contracts[user_id] = c;\n', '        return c;\n', '    }\n', '\n', '    function log_deposit(uint256 user_id) public payable {\n', "        require(address(_deposit_contracts[user_id]) == msg.sender, 'Sender is not a deployed deposit contract');\n", '        emit Deposit(user_id, msg.value);\n', '    }\n', '\n', '    function withdraw(uint256 amount, address payable withdraw_to) _onlyManager public {\n', "        require(address(this).balance >= amount, 'Not enough balance');\n", '        withdraw_to.transfer(amount);\n', '        emit Withdraw(withdraw_to, amount);\n', '    }\n', '}']