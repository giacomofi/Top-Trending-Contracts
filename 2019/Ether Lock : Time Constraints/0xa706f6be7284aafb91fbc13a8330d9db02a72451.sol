['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() internal {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '  * @return the address of the owner.\n', '  */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @return true if `msg.sender` is the owner of the contract.\n', '  */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to relinquish control of the contract.\n', '  * @notice Renouncing to ownership will leave the contract without an owner.\n', '  * It will not be possible to call the functions with the `onlyOwner`\n', '  * modifier anymore.\n', '  */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function _transferOwnership(address payable newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PayeeShare is Ownable{\n', '    \n', '    struct Payee {\n', '        address payable payee;\n', '        uint payeePercentage;\n', '    }\n', '    \n', '    Payee[] public payees;\n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    IERC20Token public tokenContract;\n', '    \n', '    bool processingPayout = false;\n', '    \n', '    uint256 public payeePartsLeft = 100;\n', '    uint256 public payeePartsToSell = 0;\n', '    uint256 public payeePricePerPart = 0;\n', '    \n', '    uint256 public lockedToken;\n', '    uint256 public lockedTokenTime;\n', '    uint256 minTokenTransfer = 1;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    event TokenPayout(address receiver, uint256 value, string memberOf);\n', '    event EtherPayout(address receiver, uint256 value, string memberOf);\n', '    event PayeeAdded(address payee, uint256 partsPerFull);\n', '    event LockedTokensUnlocked();\n', '    \n', '    constructor(address _tokenContract, uint256 _lockedToken, uint256 _lockedTokenTime) public {\n', '        tokenContract = IERC20Token(_tokenContract);\n', '        lockedToken = _lockedToken;\n', '        lockedTokenTime = _lockedTokenTime;\n', '    }\n', '\n', '    function getPayeeLenght() public view returns (uint256) {\n', '        return payees.length;\n', '    }\n', '    \n', '     function getLockedToken() public view returns (uint256) {\n', '        return lockedToken;\n', '    }\n', '    \n', '    function addPayee(address payable _address, uint _payeePercentage) public payable {\n', '        if (msg.sender == _owner) {\n', '        require(payeePartsLeft >= _payeePercentage);\n', '        payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n', '        payees.push(Payee(_address, _payeePercentage));\n', '        emit PayeeAdded(_address, _payeePercentage);\n', '        }\n', '        else if (msg.value == _payeePercentage.mul(payeePricePerPart)) {\n', '        if (address(this).balance > 0) {\n', '          etherPayout();\n', '        }\n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n', '          tokenPayout();\n', '        }\n', '            require(payeePartsLeft >= _payeePercentage);\n', '            require(payeePartsToSell >= _payeePercentage);\n', '            require(tx.origin == msg.sender);\n', '            payeePartsToSell = payeePartsToSell.sub(_payeePercentage);\n', '            payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n', '            payees.push(Payee(tx.origin, _payeePercentage));\n', '            emit PayeeAdded(tx.origin, _payeePercentage);\n', '        } else revert();\n', '    } \n', '    \n', '    function setPartsToSell(uint256 _parts, uint256 _price) public onlyOwner {\n', '        require(payeePartsLeft >= _parts);\n', '        payeePartsToSell = _parts;\n', '        payeePricePerPart = _price;\n', '    }\n', '    \n', '    function etherPayout() public {\n', '        require(processingPayout == false);\n', '        processingPayout = true;\n', '        uint256 receivedValue = address(this).balance;\n', '        uint counter = 0;\n', '        for (uint i = 0; i < payees.length; i++) {\n', '           Payee memory myPayee = payees[i];\n', '           myPayee.payee.transfer((receivedValue.mul(myPayee.payeePercentage).div(100)));\n', '           emit EtherPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), "Shareholder");\n', '            counter++;\n', '          }\n', '        if(address(this).balance > 0) {\n', '            _owner.transfer(address(this).balance);\n', '            emit EtherPayout(_owner, address(this).balance, "Owner");\n', '        }\n', '        processingPayout = false;\n', '    }\n', '    \n', '     function tokenPayout() public payable {\n', '        require(processingPayout == false);\n', '        require(tokenContract.balanceOf(address(this)) >= lockedToken.add((minTokenTransfer.mul(10 ** tokenContract.decimals()))));\n', '        processingPayout = true;\n', '        uint256 receivedValue = tokenContract.balanceOf(address(this)).sub(lockedToken);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < payees.length; i++) {\n', '           Payee memory myPayee = payees[i];\n', '           tokenContract.transfer(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100));\n', '           emit TokenPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), "Shareholder");\n', '            counter++;\n', '          } \n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 0) {\n', '            tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken));\n', '            emit TokenPayout(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken), "Owner");\n', '        }\n', '        processingPayout = false;\n', '    }\n', '    \n', '    function payoutLockedToken() public payable onlyOwner {\n', '        require(processingPayout == false);\n', '        require(now > lockedTokenTime);\n', '        require(tokenContract.balanceOf(address(this)) >= lockedToken);\n', '        lockedToken = 0;\n', '        if (address(this).balance > 0) {\n', '          etherPayout();\n', '        }\n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n', '          tokenPayout();\n', '        }\n', '        processingPayout = true;\n', '        emit LockedTokensUnlocked();\n', '        tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)));\n', '        processingPayout = false;\n', '    }\n', '    \n', '    function() external payable {\n', '    }\n', '}']
['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() internal {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '  * @return the address of the owner.\n', '  */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @return true if `msg.sender` is the owner of the contract.\n', '  */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to relinquish control of the contract.\n', '  * @notice Renouncing to ownership will leave the contract without an owner.\n', '  * It will not be possible to call the functions with the `onlyOwner`\n', '  * modifier anymore.\n', '  */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function _transferOwnership(address payable newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PayeeShare is Ownable{\n', '    \n', '    struct Payee {\n', '        address payable payee;\n', '        uint payeePercentage;\n', '    }\n', '    \n', '    Payee[] public payees;\n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    IERC20Token public tokenContract;\n', '    \n', '    bool processingPayout = false;\n', '    \n', '    uint256 public payeePartsLeft = 100;\n', '    uint256 public payeePartsToSell = 0;\n', '    uint256 public payeePricePerPart = 0;\n', '    \n', '    uint256 public lockedToken;\n', '    uint256 public lockedTokenTime;\n', '    uint256 minTokenTransfer = 1;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    event TokenPayout(address receiver, uint256 value, string memberOf);\n', '    event EtherPayout(address receiver, uint256 value, string memberOf);\n', '    event PayeeAdded(address payee, uint256 partsPerFull);\n', '    event LockedTokensUnlocked();\n', '    \n', '    constructor(address _tokenContract, uint256 _lockedToken, uint256 _lockedTokenTime) public {\n', '        tokenContract = IERC20Token(_tokenContract);\n', '        lockedToken = _lockedToken;\n', '        lockedTokenTime = _lockedTokenTime;\n', '    }\n', '\n', '    function getPayeeLenght() public view returns (uint256) {\n', '        return payees.length;\n', '    }\n', '    \n', '     function getLockedToken() public view returns (uint256) {\n', '        return lockedToken;\n', '    }\n', '    \n', '    function addPayee(address payable _address, uint _payeePercentage) public payable {\n', '        if (msg.sender == _owner) {\n', '        require(payeePartsLeft >= _payeePercentage);\n', '        payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n', '        payees.push(Payee(_address, _payeePercentage));\n', '        emit PayeeAdded(_address, _payeePercentage);\n', '        }\n', '        else if (msg.value == _payeePercentage.mul(payeePricePerPart)) {\n', '        if (address(this).balance > 0) {\n', '          etherPayout();\n', '        }\n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n', '          tokenPayout();\n', '        }\n', '            require(payeePartsLeft >= _payeePercentage);\n', '            require(payeePartsToSell >= _payeePercentage);\n', '            require(tx.origin == msg.sender);\n', '            payeePartsToSell = payeePartsToSell.sub(_payeePercentage);\n', '            payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n', '            payees.push(Payee(tx.origin, _payeePercentage));\n', '            emit PayeeAdded(tx.origin, _payeePercentage);\n', '        } else revert();\n', '    } \n', '    \n', '    function setPartsToSell(uint256 _parts, uint256 _price) public onlyOwner {\n', '        require(payeePartsLeft >= _parts);\n', '        payeePartsToSell = _parts;\n', '        payeePricePerPart = _price;\n', '    }\n', '    \n', '    function etherPayout() public {\n', '        require(processingPayout == false);\n', '        processingPayout = true;\n', '        uint256 receivedValue = address(this).balance;\n', '        uint counter = 0;\n', '        for (uint i = 0; i < payees.length; i++) {\n', '           Payee memory myPayee = payees[i];\n', '           myPayee.payee.transfer((receivedValue.mul(myPayee.payeePercentage).div(100)));\n', '           emit EtherPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), "Shareholder");\n', '            counter++;\n', '          }\n', '        if(address(this).balance > 0) {\n', '            _owner.transfer(address(this).balance);\n', '            emit EtherPayout(_owner, address(this).balance, "Owner");\n', '        }\n', '        processingPayout = false;\n', '    }\n', '    \n', '     function tokenPayout() public payable {\n', '        require(processingPayout == false);\n', '        require(tokenContract.balanceOf(address(this)) >= lockedToken.add((minTokenTransfer.mul(10 ** tokenContract.decimals()))));\n', '        processingPayout = true;\n', '        uint256 receivedValue = tokenContract.balanceOf(address(this)).sub(lockedToken);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < payees.length; i++) {\n', '           Payee memory myPayee = payees[i];\n', '           tokenContract.transfer(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100));\n', '           emit TokenPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), "Shareholder");\n', '            counter++;\n', '          } \n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 0) {\n', '            tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken));\n', '            emit TokenPayout(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken), "Owner");\n', '        }\n', '        processingPayout = false;\n', '    }\n', '    \n', '    function payoutLockedToken() public payable onlyOwner {\n', '        require(processingPayout == false);\n', '        require(now > lockedTokenTime);\n', '        require(tokenContract.balanceOf(address(this)) >= lockedToken);\n', '        lockedToken = 0;\n', '        if (address(this).balance > 0) {\n', '          etherPayout();\n', '        }\n', '        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n', '          tokenPayout();\n', '        }\n', '        processingPayout = true;\n', '        emit LockedTokensUnlocked();\n', '        tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)));\n', '        processingPayout = false;\n', '    }\n', '    \n', '    function() external payable {\n', '    }\n', '}']
