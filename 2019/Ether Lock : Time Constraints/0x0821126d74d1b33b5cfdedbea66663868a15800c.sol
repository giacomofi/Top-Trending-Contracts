['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/FreeDnaCardRepositoryInterface.sol\n', '\n', 'interface FreeDnaCardRepositoryInterface {\n', '    function airdrop(address to, uint256 animalId) external;\n', '\n', '    function giveaway(\n', '        address to,\n', '        uint256 animalId,\n', '        uint8 effectiveness\n', '    )\n', '    external;\n', '}\n', '\n', '// File: contracts/Airdrop.sol\n', '\n', 'interface CryptoServal {\n', '    function getAnimalsCount() external view returns(uint256 animalsCount);\n', '}\n', '\n', '\n', 'contract Airdrop {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (uint256 => bool)) private addressHasWithdraw;\n', '    mapping (uint256 => uint256) private periodDonationCount;\n', '\n', '    CryptoServal private cryptoServal;\n', '    FreeDnaCardRepositoryInterface private freeDnaCardRepository;\n', '\n', '    uint256 private startTimestamp;\n', '    uint256 private endTimestamp;\n', '    uint256 private periodDuration; // 23 hours (82800 seconds)?\n', '    uint16 private cardsByPeriod; // number of cards dropped by period\n', '\n', '    constructor(\n', '        address _cryptoServalAddress,\n', '        address _freeDnaCardRepositoryAddress,\n', '        uint _startTimestamp,\n', '        uint _endTimestamp,\n', '        uint256 _periodDuration,\n', '        uint16 _cardsByPeriod\n', '    )\n', '    public {\n', '        freeDnaCardRepository =\n', '            FreeDnaCardRepositoryInterface(_freeDnaCardRepositoryAddress);\n', '        cryptoServal = CryptoServal(_cryptoServalAddress);\n', '        startTimestamp = _startTimestamp;\n', '        endTimestamp = _endTimestamp;\n', '        periodDuration = _periodDuration;\n', '        cardsByPeriod = _cardsByPeriod;\n', '    }\n', '\n', '    function withdraw() external {\n', '        require(now >= startTimestamp, "not started yet");\n', '        require(now <= endTimestamp, "ended");\n', '\n', '        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n', '        uint256 currentPeriodKey = getCurrentPeriodKey();\n', '\n', '        // Ensure the sender has not already withdraw during the current period\n', '        require(senderHasWithdraw[currentPeriodKey] == false, "once / period");\n', '\n', '        // Ensure we didn&#39;t reached the daily (period) limit\n', '        require(\n', '            periodDonationCount[currentPeriodKey] < cardsByPeriod,\n', '            "period maximum donations reached"\n', '        );\n', '\n', '        // Donate the card\n', '        freeDnaCardRepository.airdrop(msg.sender, getRandomAnimalId());\n', '\n', '        // And record his withdrawal\n', '        periodDonationCount[currentPeriodKey]++;\n', '        senderHasWithdraw[currentPeriodKey] = true;\n', '    }\n', '\n', '    function hasAvailableCard() external view returns(bool) {\n', '        uint256 currentPeriodKey = getCurrentPeriodKey();\n', '        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n', '\n', '        return (senderHasWithdraw[currentPeriodKey] == false &&\n', '                periodDonationCount[currentPeriodKey] < cardsByPeriod);\n', '    }\n', '\n', '    function getAvailableCardCount() external view returns(uint256) {\n', '        return cardsByPeriod - periodDonationCount[getCurrentPeriodKey()];\n', '    }\n', '\n', '    function getNextPeriodTimestamp() external view returns(uint256) {\n', '        uint256 nextPeriodKey = getCurrentPeriodKey() + 1;\n', '        return nextPeriodKey.mul(periodDuration);\n', '    }\n', '\n', '    function getRandomNumber(uint256 max) public view returns(uint256) {\n', '        require(max != 0);\n', '        return now % max;\n', '    }\n', '\n', '    function getAnimalCount() public view returns(uint256) {\n', '        return cryptoServal.getAnimalsCount();\n', '    }\n', '\n', '    function getRandomAnimalId() public view returns(uint256) {\n', '        return getRandomNumber(getAnimalCount());\n', '    }\n', '\n', '    function getPeriodKey(uint atTime) private view returns(uint256) {\n', '        return atTime.div(periodDuration);\n', '    }\n', '\n', '    function getCurrentPeriodKey() private view returns(uint256) {\n', '        return getPeriodKey(now);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/FreeDnaCardRepositoryInterface.sol\n', '\n', 'interface FreeDnaCardRepositoryInterface {\n', '    function airdrop(address to, uint256 animalId) external;\n', '\n', '    function giveaway(\n', '        address to,\n', '        uint256 animalId,\n', '        uint8 effectiveness\n', '    )\n', '    external;\n', '}\n', '\n', '// File: contracts/Airdrop.sol\n', '\n', 'interface CryptoServal {\n', '    function getAnimalsCount() external view returns(uint256 animalsCount);\n', '}\n', '\n', '\n', 'contract Airdrop {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (uint256 => bool)) private addressHasWithdraw;\n', '    mapping (uint256 => uint256) private periodDonationCount;\n', '\n', '    CryptoServal private cryptoServal;\n', '    FreeDnaCardRepositoryInterface private freeDnaCardRepository;\n', '\n', '    uint256 private startTimestamp;\n', '    uint256 private endTimestamp;\n', '    uint256 private periodDuration; // 23 hours (82800 seconds)?\n', '    uint16 private cardsByPeriod; // number of cards dropped by period\n', '\n', '    constructor(\n', '        address _cryptoServalAddress,\n', '        address _freeDnaCardRepositoryAddress,\n', '        uint _startTimestamp,\n', '        uint _endTimestamp,\n', '        uint256 _periodDuration,\n', '        uint16 _cardsByPeriod\n', '    )\n', '    public {\n', '        freeDnaCardRepository =\n', '            FreeDnaCardRepositoryInterface(_freeDnaCardRepositoryAddress);\n', '        cryptoServal = CryptoServal(_cryptoServalAddress);\n', '        startTimestamp = _startTimestamp;\n', '        endTimestamp = _endTimestamp;\n', '        periodDuration = _periodDuration;\n', '        cardsByPeriod = _cardsByPeriod;\n', '    }\n', '\n', '    function withdraw() external {\n', '        require(now >= startTimestamp, "not started yet");\n', '        require(now <= endTimestamp, "ended");\n', '\n', '        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n', '        uint256 currentPeriodKey = getCurrentPeriodKey();\n', '\n', '        // Ensure the sender has not already withdraw during the current period\n', '        require(senderHasWithdraw[currentPeriodKey] == false, "once / period");\n', '\n', "        // Ensure we didn't reached the daily (period) limit\n", '        require(\n', '            periodDonationCount[currentPeriodKey] < cardsByPeriod,\n', '            "period maximum donations reached"\n', '        );\n', '\n', '        // Donate the card\n', '        freeDnaCardRepository.airdrop(msg.sender, getRandomAnimalId());\n', '\n', '        // And record his withdrawal\n', '        periodDonationCount[currentPeriodKey]++;\n', '        senderHasWithdraw[currentPeriodKey] = true;\n', '    }\n', '\n', '    function hasAvailableCard() external view returns(bool) {\n', '        uint256 currentPeriodKey = getCurrentPeriodKey();\n', '        mapping (uint256 => bool) senderHasWithdraw = addressHasWithdraw[msg.sender];\n', '\n', '        return (senderHasWithdraw[currentPeriodKey] == false &&\n', '                periodDonationCount[currentPeriodKey] < cardsByPeriod);\n', '    }\n', '\n', '    function getAvailableCardCount() external view returns(uint256) {\n', '        return cardsByPeriod - periodDonationCount[getCurrentPeriodKey()];\n', '    }\n', '\n', '    function getNextPeriodTimestamp() external view returns(uint256) {\n', '        uint256 nextPeriodKey = getCurrentPeriodKey() + 1;\n', '        return nextPeriodKey.mul(periodDuration);\n', '    }\n', '\n', '    function getRandomNumber(uint256 max) public view returns(uint256) {\n', '        require(max != 0);\n', '        return now % max;\n', '    }\n', '\n', '    function getAnimalCount() public view returns(uint256) {\n', '        return cryptoServal.getAnimalsCount();\n', '    }\n', '\n', '    function getRandomAnimalId() public view returns(uint256) {\n', '        return getRandomNumber(getAnimalCount());\n', '    }\n', '\n', '    function getPeriodKey(uint atTime) private view returns(uint256) {\n', '        return atTime.div(periodDuration);\n', '    }\n', '\n', '    function getCurrentPeriodKey() private view returns(uint256) {\n', '        return getPeriodKey(now);\n', '    }\n', '}']
