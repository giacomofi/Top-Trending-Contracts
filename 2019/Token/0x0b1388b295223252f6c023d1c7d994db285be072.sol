['pragma solidity ^0.5.7;\n', '\n', '// Wesion Business Fund\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract\n', '     * to the sender account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0));\n', '        _owner = newOwner;\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20 Token\n', '     *\n', '     * @param tokenAddr ERC20 The address of the ERC20 token contract\n', '     * @param receiver The address of the receiver\n', '     * @param amount uint256\n', '     */\n', '    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\n', '        IERC20 _token = IERC20(tokenAddr);\n', '        require(receiver != address(0));\n', '        uint256 balance = _token.balanceOf(address(this));\n', '\n', '        require(balance >= amount);\n', '        assert(_token.transfer(receiver, amount));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther(address payable to, uint256 amount) external onlyOwner {\n', '        require(to != address(0));\n', '\n', '        uint256 balance = address(this).balance;\n', '\n', '        require(balance >= amount);\n', '        to.transfer(amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20{\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title Wesion Business Fund\n', ' */\n', 'contract WesionBusinessFund is Ownable{\n', '    IERC20 public Wesion;\n', '\n', '    event Donate(address indexed account, uint256 amount);\n', '\n', '    /**\n', '     * @dev constructor\n', '     */\n', '    constructor() public {\n', '        Wesion = IERC20(0x2c1564A74F07757765642ACef62a583B38d5A213);\n', '    }\n', '\n', '    /**\n', '     * @dev donate\n', '     */\n', '    function () external payable {\n', '        emit Donate(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev transfer Wesion\n', '     */\n', '    function transferWesion(address to, uint256 amount) external onlyOwner {\n', '        assert(Wesion.transfer(to, amount));\n', '    }\n', '\n', '    /**\n', '     * @dev batch transfer\n', '     */\n', '    function batchTransfer(address[] memory accounts, uint256[] memory values) public onlyOwner {\n', '        require(accounts.length == values.length);\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            assert(Wesion.transfer(accounts[i], values[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev set Wesion Address\n', '     */\n', '    function setWesionAddress(address _WesionAddr) public onlyOwner {\n', '        Wesion = IERC20(_WesionAddr);\n', '    }\n', '}']