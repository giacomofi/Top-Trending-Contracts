['pragma solidity ^0.4.25;\n', '\n', 'import "./owned.sol";\n', 'import "./safemath.sol";\n', 'import "./erc20.sol";\n', '\n', 'contract goldcash is owned, ERC20 {\n', '    using SafeMath for uint256;\n', '    //coin details\n', '    string public name = "goldcash";  \n', '    string public symbol = "GAS";\n', '    uint256 public totalSupply;\n', '    address public contractAddress = this; \n', '    uint8 public decimals = 18;\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    //ether exchg details\n', '    uint256 public buyPriceEth = 1 finney;                                  // Buy price \n', '    uint256 public sellPriceEth = 1 finney;                                 // Sell price \n', '\n', '    constructor (uint256 initialSupply, uint256 ownerSupply) public owned(){\n', '        require(initialSupply >= ownerSupply);\n', '        totalSupply = initialSupply.mul(10 ** uint256(decimals));  // Update total supply with the decimal amount\n', '        uint256 ownertotalSupply = ownerSupply.mul(10 ** uint256(decimals));\n', '        balanceOf[contractAddress] = totalSupply.sub(ownertotalSupply);\n', '        balanceOf[msg.sender] = ownertotalSupply;\n', '    }\n', '    event Withdraw(address indexed owner, uint256 withdrawal, uint256 blockNumber);\n', '    function withdraw(uint256 _eth) public onlyOwner{\n', '        address _owner = owner;\n', '        uint256 oldBal = _eth;//address(this).balance;\n', '        //_owner.transfer(address(this).balance);\n', '        emit Withdraw(_owner, oldBal, block.number);\n', '        _owner.transfer(_eth);\n', '    }\n', '    function set_sellPriceEth(uint256 _eth) public onlyOwner returns (uint256){\n', '        require(_eth > 0);\n', '        uint256 oldValue = sellPriceEth;\n', '        sellPriceEth = _eth;\n', '        emit chg_setting(owner, oldValue, sellPriceEth, "set_sellPriceEth", block.number);\n', '        return sellPriceEth;\n', '    }\n', '    function set_buyPriceEth(uint256 _eth) public onlyOwner returns (uint256){\n', '        require(_eth > 0);\n', '        uint256 oldValue = buyPriceEth;\n', '        buyPriceEth = _eth;\n', '        emit chg_setting(owner, oldValue, buyPriceEth, "set_buyPriceEth", block.number);\n', '        return buyPriceEth;\n', '    }\n', '    event chg_setting(address indexed changer, uint256 oldValue, uint256 newValue, string indexed setting, uint256 blockNumber);\n', '   \n', '\n', '    /*\n', '        For coin transaction implementing ERC20\n', '    */\n', '    function totalSupply() public view returns (uint256){\n', '        return totalSupply;\n', '    }\n', '    function allowance(address _giver, address _spender) public view returns (uint256){\n', '        return allowance[_giver][_spender];\n', '    }\n', '    function balanceOf(address who) public view returns (uint256){\n', '        return balanceOf[who];\n', '    }\n', '    //the transfer function core\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    //user can transfer from an address that allowed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //user can transfer from their balance\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit noted_transfer(msg.sender, _to, _value, "", block.number);\n', '        return true;\n', '    }\n', '    //transfer+note\n', '    function notedTransfer (address _to, uint256 _value, string _note) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit noted_transfer(msg.sender, _to, _value, _note, block.number);\n', '        return true;\n', '    }\n', '    event noted_transfer(address indexed from, address indexed to, uint256 value, string note, uint256 blockNumber);\n', '    //give allowance for transfer to a user (spender)\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    event ETH_transaction(address indexed source, address indexed aplicant, uint256 value, string indexed act, uint256 time);\n', '    /*\n', '        getting by ether\n', '    */\n', '    function buyWithEther() public payable returns (uint amount) {\n', '        require (buyPriceEth != 0 && msg.value >= buyPriceEth );             // Avoid dividing 0, sending small amounts and spam\n', '        amount = msg.value/(buyPriceEth);                                   // Calculate the amount of token\n', '        uint256 totalAmount = amount * (10 ** uint256(decimals));\n', '        require (balanceOf[this] >= totalAmount);                              // Check if it has enough to sell\n', '        balanceOf[this] = balanceOf[this]-(totalAmount);                   // Subtract amount from balance\n', '        balanceOf[msg.sender] = balanceOf[msg.sender]+(totalAmount);       // Add the amount to buyer&#39;s balance\n', '        emit Transfer(this, msg.sender, totalAmount);                                 // Execute an event reflecting the change\n', '        emit noted_transfer(this, msg.sender, totalAmount, &#39;BuyFromEth&#39;, block.number);\n', '        return totalAmount;\n', '    }\n', '    /* User sells and gets Ether */\n', '    function sellToEther(uint256 amountOFGoldcash) public returns (uint ethToBeClaimed) {\n', '        require (balanceOf[msg.sender] >= amountOFGoldcash);                           // Check if the sender has enough to sell\n', '        ethToBeClaimed = amountOFGoldcash * (sellPriceEth);                            // ethToBeClaimed = eth that will be send to the user\n', '        uint256 amountOFGoldcashWei =(amountOFGoldcash * (10 ** uint256(decimals)));\n', '        emit Transfer(msg.sender, this, amountOFGoldcashWei);                            // Execute an event reflecting on the change\n', '        emit noted_transfer(msg.sender, this, amountOFGoldcashWei, &#39;SellToEth&#39;, block.number);\n', '        balanceOf[msg.sender] -= amountOFGoldcashWei;   // Subtract the amount from seller&#39;s balance\n', '        balanceOf[this] +=(amountOFGoldcashWei);               // Add the amount to balance\n', '        msg.sender.transfer(ethToBeClaimed);\n', '        return ethToBeClaimed;                                                 // End function and returns\n', '    }\n', '\n', '}']