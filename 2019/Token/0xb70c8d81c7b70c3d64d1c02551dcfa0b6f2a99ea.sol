['pragma solidity 0.4.24;\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '    bool public paused = false;\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    modifier notPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract EIP20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Olea is Owned, SafeMath, Pausable, EIP20Interface {\n', '    uint256 private totalSupply_;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    mapping (address => uint256) public balances;\n', '    mapping (address => uint256) public frozen;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    event Freeze(address indexed from, uint256 value);\n', '    event Unfreeze(address indexed from, uint256 value);\n', '    event Burned(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        name = "OLEA Chain";\n', '        symbol = "OLEA";\n', '        decimals = 6;\n', '        totalSupply_ = 360000000 * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '\n', '    // burn\n', '    function burn(address _addr, uint256 _amount) onlyOwner public returns (bool success) {\n', '        require(_addr != 0);\n', '        require(_amount <= balances[_addr]);\n', '\n', '        totalSupply_ = sub(totalSupply_, _amount);\n', '        balances[_addr] = sub(balances[_addr], _amount);\n', '        emit Transfer(_addr, address(0), _amount);\n', '        emit Burned(_addr, _amount);\n', '        return true;\n', '    }\n', '\n', '    // freeze part\n', '    function freeze(address _addr, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balances[_addr] >= _value);\n', '        require(_value > 0);\n', '        balances[_addr] = sub(balances[_addr], _value);\n', '        frozen[_addr] = add(frozen[_addr], _value);\n', '        emit Freeze(_addr, _value);\n', '        return true;\n', '    }\n', '    \n', '    function unfreeze(address _addr, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(frozen[_addr] >= _value);\n', '        require(_value > 0);\n', '        frozen[_addr] = sub(frozen[_addr], _value);\n', '        balances[_addr] = add(balances[_addr], _value);\n', '        emit Unfreeze(_addr, _value);\n', '        return true;\n', '    }\n', '\n', '    function frozenOf(address _addr) public view returns (uint256 balance) {\n', '        return frozen[_addr];\n', '    }\n', '    \n', '    // erc20 part\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _addr) public view returns (uint256 balance) {\n', '        return balances[_addr];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public notPaused returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public notPaused returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public notPaused returns (bool success) {\n', '        require(_value > 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    } \n', '}']