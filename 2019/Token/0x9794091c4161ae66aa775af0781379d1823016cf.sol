['library SafeMath\n', '{\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function GET_MAX_UINT256() pure internal returns(uint256){\n', '        return MAX_UINT256;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal returns(uint){\n', '        uint c = a * b;\n', '        assertSafe(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) pure internal returns(uint){\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns(uint){\n', '        assertSafe(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns(uint){\n', '        uint c = a + b;\n', '        assertSafe(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal view returns(uint64){\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal view returns(uint64){\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal view returns(uint256){\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal view returns(uint256){\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assertSafe(bool assertion) internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC223Interface {\n', '      \n', '    function balanceOf(address _who) view public returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n', '    event Approval(address indexed _from, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract ERC223Token is ERC223Interface {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    mapping (address => mapping (address => uint256)) private allowances;\n', '    \n', '    uint256 public supply;\n', '    \n', '    function ERC223Token(uint256 _totalSupply) public\n', '    {\n', '        supply = _totalSupply;\n', '    }       \n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success){\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer (msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success){\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '        emit Transfer (msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) view public returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /*\n', '    ERC 20 compatible functions\n', '    */\n', '\n', '    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (allowances [_from][msg.sender] < _value) return false;\n', '        if (balances [_from] < _value) return false;\n', '\n', '        allowances [_from][msg.sender] = allowances [_from][msg.sender].sub(_value);\n', '\n', '        if (_value > 0 && _from != _to) {\n', '            balances [_from] = balances [_from].sub(_value);\n', '            balances [_to] = balances [_to].add(_value);\n', '            emit Transfer (_from, _to, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve (address _spender, uint256 _value) public returns (bool success) {\n', '        allowances [msg.sender][_spender] = _value;\n', '        emit Approval (msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance (address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowances [_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract LykkeTokenErc223Base is ERC223Token {\n', '\n', '    address internal _issuer;\n', '    string public standard;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function LykkeTokenErc223Base(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version,\n', '        uint256 totalSupply) ERC223Token(totalSupply) public{\n', '        symbol = tokenSymbol;\n', '        standard = version;\n', '        name = tokenName;\n', '        decimals = divisibility;\n', '        _issuer = issuer;\n', '    }\n', '}\n', '\n', 'contract EmissiveErc223Token is LykkeTokenErc223Base {\n', '    using SafeMath for uint;\n', '    \n', '    function EmissiveErc223Token(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version) LykkeTokenErc223Base(issuer, tokenName, divisibility, tokenSymbol, version, 0) public{\n', '        balances [_issuer] = SafeMath.GET_MAX_UINT256();\n', '    }\n', '\n', '    function totalSupply () view public returns (uint256 supply) {\n', '        return SafeMath.GET_MAX_UINT256().sub(balances [_issuer]);\n', '    }\n', '\n', '    function balanceOf (address _owner) view public returns (uint256 balance) {\n', '        return _owner == _issuer ? 0 : ERC223Token.balanceOf (_owner);\n', '    }\n', '}\n', '\n', 'contract LyCI is EmissiveErc223Token {\n', '    using SafeMath for uint;\n', '    string public termsAndConditionsUrl;\n', '    address public owner;\n', '\n', '    function LyCI(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version) EmissiveErc223Token(issuer, tokenName, divisibility, tokenSymbol, version) public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function getTermsAndConditions () public view returns (string tc) {\n', '        return termsAndConditionsUrl;\n', '    }\n', '\n', '    function setTermsAndConditions (string _newTc) public {\n', '        if (msg.sender != owner){\n', '            revert("Only owner is allowed to change T & C");\n', '        }\n', '        termsAndConditionsUrl = _newTc;\n', '    }\n', '}']
['library SafeMath\n', '{\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function GET_MAX_UINT256() pure internal returns(uint256){\n', '        return MAX_UINT256;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal returns(uint){\n', '        uint c = a * b;\n', '        assertSafe(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) pure internal returns(uint){\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns(uint){\n', '        assertSafe(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns(uint){\n', '        uint c = a + b;\n', '        assertSafe(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal view returns(uint64){\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal view returns(uint64){\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal view returns(uint256){\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal view returns(uint256){\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assertSafe(bool assertion) internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC223Interface {\n', '      \n', '    function balanceOf(address _who) view public returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n', '    event Approval(address indexed _from, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract ERC223Token is ERC223Interface {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    mapping (address => mapping (address => uint256)) private allowances;\n', '    \n', '    uint256 public supply;\n', '    \n', '    function ERC223Token(uint256 _totalSupply) public\n', '    {\n', '        supply = _totalSupply;\n', '    }       \n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success){\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer (msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success){\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '        emit Transfer (msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) view public returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /*\n', '    ERC 20 compatible functions\n', '    */\n', '\n', '    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (allowances [_from][msg.sender] < _value) return false;\n', '        if (balances [_from] < _value) return false;\n', '\n', '        allowances [_from][msg.sender] = allowances [_from][msg.sender].sub(_value);\n', '\n', '        if (_value > 0 && _from != _to) {\n', '            balances [_from] = balances [_from].sub(_value);\n', '            balances [_to] = balances [_to].add(_value);\n', '            emit Transfer (_from, _to, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve (address _spender, uint256 _value) public returns (bool success) {\n', '        allowances [msg.sender][_spender] = _value;\n', '        emit Approval (msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance (address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowances [_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract LykkeTokenErc223Base is ERC223Token {\n', '\n', '    address internal _issuer;\n', '    string public standard;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function LykkeTokenErc223Base(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version,\n', '        uint256 totalSupply) ERC223Token(totalSupply) public{\n', '        symbol = tokenSymbol;\n', '        standard = version;\n', '        name = tokenName;\n', '        decimals = divisibility;\n', '        _issuer = issuer;\n', '    }\n', '}\n', '\n', 'contract EmissiveErc223Token is LykkeTokenErc223Base {\n', '    using SafeMath for uint;\n', '    \n', '    function EmissiveErc223Token(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version) LykkeTokenErc223Base(issuer, tokenName, divisibility, tokenSymbol, version, 0) public{\n', '        balances [_issuer] = SafeMath.GET_MAX_UINT256();\n', '    }\n', '\n', '    function totalSupply () view public returns (uint256 supply) {\n', '        return SafeMath.GET_MAX_UINT256().sub(balances [_issuer]);\n', '    }\n', '\n', '    function balanceOf (address _owner) view public returns (uint256 balance) {\n', '        return _owner == _issuer ? 0 : ERC223Token.balanceOf (_owner);\n', '    }\n', '}\n', '\n', 'contract LyCI is EmissiveErc223Token {\n', '    using SafeMath for uint;\n', '    string public termsAndConditionsUrl;\n', '    address public owner;\n', '\n', '    function LyCI(\n', '        address issuer,\n', '        string tokenName,\n', '        uint8 divisibility,\n', '        string tokenSymbol, \n', '        string version) EmissiveErc223Token(issuer, tokenName, divisibility, tokenSymbol, version) public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function getTermsAndConditions () public view returns (string tc) {\n', '        return termsAndConditionsUrl;\n', '    }\n', '\n', '    function setTermsAndConditions (string _newTc) public {\n', '        if (msg.sender != owner){\n', '            revert("Only owner is allowed to change T & C");\n', '        }\n', '        termsAndConditionsUrl = _newTc;\n', '    }\n', '}']
