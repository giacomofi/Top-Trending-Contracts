['// File: contracts/Token/IERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/Token/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowed;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(value <= _allowed[from][msg.sender]);\n', '\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(value <= _balances[from]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != 0);\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '}\n', '\n', '// File: contracts/library/Ownable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/library/Pausable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/Token/ERC20Pausable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/whitelist/Roles.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an address access to this role\n', '     */\n', '    function add(Role storage _role, address _addr) internal {\n', '        _role.bearer[_addr] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an address' access to this role\n", '     */\n', '    function remove(Role storage _role, address _addr) internal {\n', '        _role.bearer[_addr] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * // reverts\n', '     */\n', '    function check(Role storage _role, address _addr) internal view {\n', '        require(has(_role, _addr));\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage _role, address _addr) internal view returns (bool) {\n', '        return _role.bearer[_addr];\n', '    }\n', '}\n', '\n', '// File: contracts/whitelist/RBAC.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '    using Roles for Roles.Role;\n', '\n', '    mapping (string => Roles.Role) private roles;\n', '\n', '    event RoleAdded(address indexed operator, string role);\n', '    event RoleRemoved(address indexed operator, string role);\n', '\n', '    /**\n', '     * @dev reverts if addr does not have role\n', '     * @param _operator address\n', '     * @param _role the name of the role\n', '     * // reverts\n', '     */\n', '    function checkRole(address _operator, string _role)\n', '        public\n', '        view\n', '    {\n', '        roles[_role].check(_operator);\n', '    }\n', '\n', '    /**\n', '     * @dev determine if addr has role\n', '     * @param _operator address\n', '     * @param _role the name of the role\n', '     * @return bool\n', '     */\n', '    function hasRole(address _operator, string _role)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return roles[_role].has(_operator);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param _operator address\n', '     * @param _role the name of the role\n', '     */\n', '    function addRole(address _operator, string _role) internal {\n', '        roles[_role].add(_operator);\n', '        emit RoleAdded(_operator, _role);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param _operator address\n', '     * @param _role the name of the role\n', '     */\n', '    function removeRole(address _operator, string _role) internal {\n', '        roles[_role].remove(_operator);\n', '        emit RoleRemoved(_operator, _role);\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '     * @param _role the name of the role\n', '     * // reverts\n', '     */\n', '    modifier onlyRole(string _role) {\n', '        checkRole(msg.sender, _role);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/whitelist/Whitelist.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable, RBAC {\n', '    string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '    /**\n', '     * @dev Throws if operator is not whitelisted.\n', '     * @param _operator address\n', '     */\n', '    modifier onlyIfWhitelisted(address _operator) {\n', '        checkRole(_operator, ROLE_WHITELISTED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev add an address to the whitelist\n', '     * @param _operator address\n', '     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '     */\n', '    function addAddressToWhitelist(address _operator)\n', '        public\n', '        onlyOwner\n', '    {\n', '        addRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '     * @dev getter to determine if address is in whitelist\n', '     */\n', '    function whitelist(address _operator)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return hasRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '     * @dev add addresses to the whitelist\n', '     * @param _operators addresses\n', '     * @return true if at least one address was added to the whitelist,\n', '     * false if all addresses were already in the whitelist\n', '     */\n', '    function addAddressesToWhitelist(address[] _operators)\n', '        public\n', '        onlyOwner\n', '    {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            addAddressToWhitelist(_operators[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev remove an address from the whitelist\n', '     * @param _operator address\n', '     * @return true if the address was removed from the whitelist,\n', "     * false if the address wasn't in the whitelist in the first place\n", '     */\n', '    function removeAddressFromWhitelist(address _operator)\n', '        public\n', '        onlyOwner\n', '    {\n', '        removeRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '     * @dev remove addresses from the whitelist\n', '     * @param _operators addresses\n', '     * @return true if at least one address was removed from the whitelist,\n', "     * false if all addresses weren't in the whitelist in the first place\n", '     */\n', '    function removeAddressesFromWhitelist(address[] _operators)\n', '        public\n', '        onlyOwner\n', '    {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            removeAddressFromWhitelist(_operators[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Xcoin.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract Xcoin is ERC20Pausable {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    mapping (address => bool) private _frozenAccounts;\n', '\n', '    Whitelist private _whitelistForBurn;\n', '    Pausable private _pauseForAll;\n', '\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event WhitelistForBurnChanged(address indexed oldAddress, address indexed newAddress);\n', '    event TransferWithMessage(address from, address to, uint256 value, bytes message);\n', '\n', '    // Constructor\n', '    constructor(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals,\n', '        uint256 initialSupply,\n', '        address tokenHolder,\n', '        address owner,\n', '        address whitelistForBurn,\n', '        address pauseForAll\n', '    )\n', '    public\n', '    {\n', '        _transferOwnership(owner);\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '\n', '        _whitelistForBurn = Whitelist(whitelistForBurn);\n', '        _pauseForAll = Pausable(pauseForAll);\n', '\n', '        uint256 initialSupplyWithDecimals = initialSupply.mul(10 ** uint256(_decimals));\n', '        _mint(tokenHolder, initialSupplyWithDecimals);\n', '    }\n', '\n', '    // Modifier to check _pauseForAll is not true\n', '    modifier whenNotPausedForAll() {\n', '        require(!_pauseForAll.paused(), "pausedForAll is paused");\n', '        _;\n', '    }\n', '\n', '    /// @notice Return name of this token\n', '    /// @return token name\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    /// @notice Return symbol of this token\n', '    /// @return token symbol\n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    /// @notice Return decimals of this token\n', '    /// @return token decimals\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /// @notice Return flag whether account is freezed or not\n', '    /// @return true if account is freezed\n', '    function frozenAccounts(address target) public view returns (bool) {\n', '        return _frozenAccounts[target];\n', '    }\n', '\n', '    /// @notice Return address of _whitelistForBurn contract\n', '    /// @return _whitelistForBurn address\n', '    function whitelistForBurn() public view returns (address) {\n', '        return _whitelistForBurn;\n', '    }\n', '\n', '    /// @notice Return address of _pauseForAll contract\n', '    /// @return _pauseForAll address\n', '    function pauseForAll() public view returns (address) {\n', '        return _pauseForAll;\n', '    }\n', '\n', '    /// @notice Change the address of _whitelistForBurn address.\n', '    ///         Owner can only execute this function\n', '    /// @param newWhitelistForBurn new _whitelistForBurn address\n', '    function changeWhitelistForBurn(address newWhitelistForBurn) public onlyOwner {\n', '        address oldWhitelist = _whitelistForBurn;\n', '        _whitelistForBurn = Whitelist(newWhitelistForBurn);\n', '        emit WhitelistForBurnChanged(oldWhitelist, newWhitelistForBurn);\n', '    }\n', '\n', '    /// @notice Freezes specific addresses.\n', '    /// @param targets The array of target addresses.\n', '    function freeze(address[] targets) public onlyOwner {\n', '        require(targets.length > 0, "the length of targets is 0");\n', '\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            require(targets[i] != address(0), "targets has zero address.");\n', '            _frozenAccounts[targets[i]] = true;\n', '            emit FrozenFunds(targets[i], true);\n', '        }\n', '    }\n', '\n', '    /// @notice Unfreezes specific addresses.\n', '    /// @param targets The array of target addresses.\n', '    function unfreeze(address[] targets) public onlyOwner {\n', '        require(targets.length > 0, "the length of targets is 0");\n', '\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            require(targets[i] != address(0), "targets has zero address.");\n', '            _frozenAccounts[targets[i]] = false;\n', '            emit FrozenFunds(targets[i], false);\n', '        }\n', '    }\n', '\n', '    /// @notice transfer token. If msg.sender is frozen, this function will be reverted.\n', '    /// @param to Target address to transfer token.\n', '    /// @param value Amount of token msg.sender wants to transfer.\n', '    /// @return true if execution works correctly.\n', '    function transfer(address to, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\n', '        require(!frozenAccounts(msg.sender), "msg.sender address is frozen.");\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /// @notice transfer token with message.\n', '    /// @param to Target address to transfer token.\n', '    /// @param value Amount of token msg.sender wants to transfer.\n', '    /// @param message UTF-8 encoded Message sent from msg.sender to to address.\n', '    /// @return true if execution works correctly.\n', '    function transferWithMessage(\n', '        address to,\n', '        uint256 value,\n', '        bytes message\n', '    )\n', '    public\n', '    whenNotPaused\n', '    whenNotPausedForAll\n', '    returns (bool)\n', '    {\n', '        require(!_frozenAccounts[msg.sender], "msg.sender is frozen");\n', '        emit TransferWithMessage(msg.sender, to, value, message);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /// @notice transfer token. If from address is frozen, this function will be reverted.\n', '    /// @param from The sender address.\n', '    /// @param to Target address to transfer token.\n', '    /// @param value Amount of token msg.sender wants to transfer.\n', '    /// @return true if execution works correctly.\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\n', '        require(!frozenAccounts(from), "from address is frozen.");\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /// @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    ///         Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    ///         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    ///         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    /// @param spender The address which will spend the funds.\n', '    /// @param value The amount of tokens to be spent.\n', '    /// @return true if execution works correctly.\n', '    function approve(address spender, uint256 value) public whenNotPaused whenNotPausedForAll returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    /// @notice Increase the amount of tokens that an owner allowed to a spender.\n', '    ///         approve should be called when allowed_[_spender] == 0. To increment\n', '    ///         allowed value is better to use this function to avoid 2 calls (and wait until\n', '    ///         the first transaction is mined)\n', '    /// @param spender The address which will spend the funds.\n', '    /// @param addedValue The amount of tokens to increase the allowance by.\n', '    /// @return true if execution works correctly.\n', '    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused whenNotPausedForAll returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    /// @notice Decrease the amount of tokens that an owner allowed to a spender.\n', '    ///         approve should be called when allowed_[_spender] == 0. To decrement\n', '    ///         allowed value is better to use this function to avoid 2 calls (and wait until\n', '    ///         the first transaction is mined)\n', '    /// @param spender The address which will spend the funds.\n', '    /// @param subtractedValue The amount of tokens to decrease the allowance by.\n', '    /// @return true if execution works correctly.\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused whenNotPausedForAll returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '\n', '    /// @notice Function to mint tokens\n', '    ///         Owner can only execute this function.\n', '    /// @param to The address that will receive the minted tokens.\n', '    /// @param value The amount of tokens to mint.\n', '    /// @return A boolean that indicates if the operation was successful.\n', '    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n', '        super._mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public whenNotPaused whenNotPausedForAll {\n', '        require(_whitelistForBurn.whitelist(msg.sender), "msg.sender is not added on whitelist");\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= _balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        _balances[_who] = _balances[_who].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}']