['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    mapping(address => uint256[]) public keySearch;\n', '    mapping(address => bool) public keyExists;\n', '    mapping(bytes32 => bool) private pExists;\n', '    mapping(bytes32 => uint256) private pSearch;\n', '\n', '    address public contractOwner;\n', '\n', '    string[]    public annotation;\n', '    string[]    public externalUid;\n', '    address[]   public fromAddress;\n', '    address[]   public toAddress;\n', '    uint256[]   public numberOfTokens;\n', '    string[]    public action;\n', '    \n', '    \n', '    \n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        address contractOwnerC,\n', '        address defaultReturnAddress\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        contractOwner = contractOwnerC;\n', '        string[]    memory tmpAnnotation;\n', '        string[]    memory tmpExternalUid;\n', '        address[]   memory tmpFromAddress;\n', '        address[]   memory tmpToAddress;\n', '        uint256[]   memory tmpNumberOfTokens;\n', '        string[]    memory tmpAction;\n', '        annotation = tmpAnnotation;\n', '        externalUid = tmpExternalUid;\n', '        action = tmpAction;\n', '        fromAddress = tmpFromAddress;\n', '        toAddress = tmpToAddress;\n', '        numberOfTokens = tmpNumberOfTokens;\n', '        //addCBA(contractOwner, false, "no match, default value" , false, "no match, default value");\n', '        cBAList.push(cashBackAddressObj({cba:defaultReturnAddress, cbaActive:false, bankUid:"no match, default value" , bankUIDActive:false, expired:true}));\n', '        cBAStatusMessage[contractOwner].push("default value, not intended for use");\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0x0));\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function collapseInput(string memory _in) private pure returns (bytes32){\n', '        return keccak256(abi.encode (_in));\n', '    }    \n', '    \n', '    function testPExists(string memory _in) public view returns (bool){\n', '        return pExists[collapseInput(_in)];\n', '    }\n', '    \n', '    function getPSearch(string memory _in) public view returns (uint256){\n', '        return pSearch[collapseInput(_in)];\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Annotated functions\n', '     * keyIndex usually == to toAddress\n', '     */\n', '    function addAnnotation(\n', '            string memory tmpAnnotation,\n', '            string memory tmpExternalUid,\n', '            address tmpFromAddress,\n', '            address tmpToAddress,\n', '            uint256 tmpNumberOfTokens,\n', '            address keyIndex,\n', '            string memory tmpAction\n', '        ) private {\n', '        require(msg.sender == contractOwner);\n', '        bytes32 tmpPKey = collapseInput(tmpExternalUid);\n', '        require(!pExists[tmpPKey]); \n', '        uint256 id = annotation.length;\n', '        pExists[tmpPKey] = true;\n', '        pSearch[tmpPKey] = id;\n', '        if (!keyExists[keyIndex]) {\n', '            keyExists[keyIndex] = true;\n', '            uint256[] memory tmpArr;\n', '            keySearch[keyIndex]= tmpArr;\n', '        }\n', '        keySearch[keyIndex].push(id);\n', '        annotation.push(tmpAnnotation);\n', '        externalUid.push(tmpExternalUid);\n', '        fromAddress.push(tmpFromAddress);\n', '        toAddress.push(tmpToAddress);\n', '        action.push(tmpAction);\n', '        numberOfTokens.push(tmpNumberOfTokens);\n', '        \n', '    }\n', '    \n', '    function getNumberOfAnnotations(address keyIndex) public view returns(uint256){\n', '        uint256 num = 0;\n', '        if(keyExists[keyIndex]){\n', '            num = keySearch[keyIndex].length;\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    function annotatedTransfer(address to, uint tokens, string memory uid, string memory note) public{\n', '        require(msg.sender == contractOwner);\n', '        transfer(to, tokens);\n', '        addAnnotation(note, uid, msg.sender, to, tokens, to, "send");\n', '    }\n', '    \n', '    function annotatedBurn(address to, uint tokens, string memory uid, string memory note) public{\n', '        require(msg.sender == contractOwner);\n', '        burn(tokens);\n', '        addAnnotation(note, uid, msg.sender, to, tokens, to, "burn");\n', '    }\n', '    \n', '    function returnNote(uint256 trx) public view returns(\n', '        string memory,\n', '        string memory,\n', '        address,\n', '        address,\n', '        uint256,\n', '        string memory\n', '        ){\n', '        return(\n', '            annotation[trx],\n', '            externalUid[trx],\n', '            fromAddress[trx],\n', '            toAddress[trx],\n', '            numberOfTokens[trx],\n', '            action[trx]\n', '            );\n', '        }\n', '\n', '    function annotationLength()public view returns(uint256){\n', '        return annotation.length;\n', '    }\n', '\n', '    address public cashBackManager;\n', '    mapping(address => uint256) public getCBAbyAddress;\n', '    mapping(bytes32 => uint256) public getCBAbyBkUid;\n', '    cashBackAddressObj[] public cBAList;\n', '    mapping(address => string[]) public cBATransactionMessage;\n', '    mapping(address => string[]) public cBAStatusMessage;\n', '    mapping(address => uint256[]) public expiredAddress;\n', '    mapping(bytes32 => uint256[]) public expiredBankUid;\n', '\n', '    struct cashBackAddressObj{\n', '        address cba;\n', '        bool cbaActive;\n', '        string bankUid;\n', '        bool bankUIDActive;\n', '        bool expired;\n', '    }\n', '    \n', '    modifier restricted(){\n', '        require(msg.sender == cashBackManager || msg.sender == contractOwner);\n', '        _;\n', '    }\n', '    \n', '    function setCashbackManager(address cba) public restricted{\n', '        cashBackManager=cba;\n', '    }\n', '\n', '    function cBAListLength()public view returns(uint256){\n', '        return cBAList.length;\n', '    }\n', '    \n', '    function addCBA(address cba, bool cbaStatus, string memory bkUid, bool bkUidStatus, string memory statusMsg) public restricted{\n', '        uint256 oldIdx=getCBAbyAddress[cba];\n', '        if(oldIdx>0){\n', '            expiredAddress[cba].push(oldIdx);\n', '            cBAList[oldIdx].expired=true;\n', '            cBAStatusMessage[cba].push("Expired Address");\n', '        }\n', '        bytes32 bkUidHash = collapseInput(bkUid);\n', '        uint256 oldBkUidIndex = getCBAbyBkUid[bkUidHash];\n', '        if(oldBkUidIndex > 0){\n', '            expiredBankUid[bkUidHash].push(oldBkUidIndex);\n', '            cBAList[oldBkUidIndex].expired=true;\n', '            cBAStatusMessage[cba].push("Expired Bank UID");\n', '        }\n', '        getCBAbyAddress[cba]=cBAList.length;\n', '        getCBAbyBkUid[bkUidHash]=cBAList.length;\n', '        cBAList.push(cashBackAddressObj({cba:cba,cbaActive:cbaStatus,bankUid:bkUid,bankUIDActive:bkUidStatus, expired:false}));\n', '        cBAStatusMessage[cba].push(statusMsg);\n', '    }\n', '    \n', '    function getExpiredBkUidIndexes(string memory bkUid)public view returns (uint256[] memory){\n', '        return expiredBankUid[collapseInput(bkUid)];\n', '    }\n', '\n', '    function getExpiredAddressIndexes(address cba)public view returns (uint256[] memory){\n', '            return expiredAddress[cba];\n', '    }\n', '\n', '    function searchByBkUid(string memory bkUid) public view returns(uint256){\n', '        return getCBAbyBkUid[collapseInput(bkUid)];\n', '    }\n', '    \n', '    function getCBAStatusMessageLength(address cba) public view returns(uint256){\n', '        return cBAStatusMessage[cba].length;\n', '    }\n', '    \n', '    function getCBATransactionMessageLength(address cba) public view returns(uint256){\n', '        return  cBATransactionMessage[cba].length;\n', '    }\n', '    \n', '    function getCashBackObject(uint256 obj_id)public  view returns(address, bool, string memory, bool, bool){\n', '        return(\n', '                cBAList[obj_id].cba,\n', '                cBAList[obj_id].cbaActive,\n', '                cBAList[obj_id].bankUid,\n', '                cBAList[obj_id].bankUIDActive,\n', '                cBAList[obj_id].expired\n', '            );\n', '    }\n', '    \n', '\n', '    function annotatedCashBack(uint256 tk, address _to, string memory transferMsg) public{\n', '        uint256 sndIdx = getCBAbyAddress[msg.sender];\n', '        require(sndIdx>0 && cBAList[sndIdx].bankUIDActive);\n', '        cBATransactionMessage[cBAList[sndIdx].cba].push(transferMsg);\n', '        transfer(_to,tk);\n', '    }\n', '}']
['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    mapping(address => uint256[]) public keySearch;\n', '    mapping(address => bool) public keyExists;\n', '    mapping(bytes32 => bool) private pExists;\n', '    mapping(bytes32 => uint256) private pSearch;\n', '\n', '    address public contractOwner;\n', '\n', '    string[]    public annotation;\n', '    string[]    public externalUid;\n', '    address[]   public fromAddress;\n', '    address[]   public toAddress;\n', '    uint256[]   public numberOfTokens;\n', '    string[]    public action;\n', '    \n', '    \n', '    \n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        address contractOwnerC,\n', '        address defaultReturnAddress\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        contractOwner = contractOwnerC;\n', '        string[]    memory tmpAnnotation;\n', '        string[]    memory tmpExternalUid;\n', '        address[]   memory tmpFromAddress;\n', '        address[]   memory tmpToAddress;\n', '        uint256[]   memory tmpNumberOfTokens;\n', '        string[]    memory tmpAction;\n', '        annotation = tmpAnnotation;\n', '        externalUid = tmpExternalUid;\n', '        action = tmpAction;\n', '        fromAddress = tmpFromAddress;\n', '        toAddress = tmpToAddress;\n', '        numberOfTokens = tmpNumberOfTokens;\n', '        //addCBA(contractOwner, false, "no match, default value" , false, "no match, default value");\n', '        cBAList.push(cashBackAddressObj({cba:defaultReturnAddress, cbaActive:false, bankUid:"no match, default value" , bankUIDActive:false, expired:true}));\n', '        cBAStatusMessage[contractOwner].push("default value, not intended for use");\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0x0));\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function collapseInput(string memory _in) private pure returns (bytes32){\n', '        return keccak256(abi.encode (_in));\n', '    }    \n', '    \n', '    function testPExists(string memory _in) public view returns (bool){\n', '        return pExists[collapseInput(_in)];\n', '    }\n', '    \n', '    function getPSearch(string memory _in) public view returns (uint256){\n', '        return pSearch[collapseInput(_in)];\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Annotated functions\n', '     * keyIndex usually == to toAddress\n', '     */\n', '    function addAnnotation(\n', '            string memory tmpAnnotation,\n', '            string memory tmpExternalUid,\n', '            address tmpFromAddress,\n', '            address tmpToAddress,\n', '            uint256 tmpNumberOfTokens,\n', '            address keyIndex,\n', '            string memory tmpAction\n', '        ) private {\n', '        require(msg.sender == contractOwner);\n', '        bytes32 tmpPKey = collapseInput(tmpExternalUid);\n', '        require(!pExists[tmpPKey]); \n', '        uint256 id = annotation.length;\n', '        pExists[tmpPKey] = true;\n', '        pSearch[tmpPKey] = id;\n', '        if (!keyExists[keyIndex]) {\n', '            keyExists[keyIndex] = true;\n', '            uint256[] memory tmpArr;\n', '            keySearch[keyIndex]= tmpArr;\n', '        }\n', '        keySearch[keyIndex].push(id);\n', '        annotation.push(tmpAnnotation);\n', '        externalUid.push(tmpExternalUid);\n', '        fromAddress.push(tmpFromAddress);\n', '        toAddress.push(tmpToAddress);\n', '        action.push(tmpAction);\n', '        numberOfTokens.push(tmpNumberOfTokens);\n', '        \n', '    }\n', '    \n', '    function getNumberOfAnnotations(address keyIndex) public view returns(uint256){\n', '        uint256 num = 0;\n', '        if(keyExists[keyIndex]){\n', '            num = keySearch[keyIndex].length;\n', '        }\n', '        return num;\n', '    }\n', '    \n', '    function annotatedTransfer(address to, uint tokens, string memory uid, string memory note) public{\n', '        require(msg.sender == contractOwner);\n', '        transfer(to, tokens);\n', '        addAnnotation(note, uid, msg.sender, to, tokens, to, "send");\n', '    }\n', '    \n', '    function annotatedBurn(address to, uint tokens, string memory uid, string memory note) public{\n', '        require(msg.sender == contractOwner);\n', '        burn(tokens);\n', '        addAnnotation(note, uid, msg.sender, to, tokens, to, "burn");\n', '    }\n', '    \n', '    function returnNote(uint256 trx) public view returns(\n', '        string memory,\n', '        string memory,\n', '        address,\n', '        address,\n', '        uint256,\n', '        string memory\n', '        ){\n', '        return(\n', '            annotation[trx],\n', '            externalUid[trx],\n', '            fromAddress[trx],\n', '            toAddress[trx],\n', '            numberOfTokens[trx],\n', '            action[trx]\n', '            );\n', '        }\n', '\n', '    function annotationLength()public view returns(uint256){\n', '        return annotation.length;\n', '    }\n', '\n', '    address public cashBackManager;\n', '    mapping(address => uint256) public getCBAbyAddress;\n', '    mapping(bytes32 => uint256) public getCBAbyBkUid;\n', '    cashBackAddressObj[] public cBAList;\n', '    mapping(address => string[]) public cBATransactionMessage;\n', '    mapping(address => string[]) public cBAStatusMessage;\n', '    mapping(address => uint256[]) public expiredAddress;\n', '    mapping(bytes32 => uint256[]) public expiredBankUid;\n', '\n', '    struct cashBackAddressObj{\n', '        address cba;\n', '        bool cbaActive;\n', '        string bankUid;\n', '        bool bankUIDActive;\n', '        bool expired;\n', '    }\n', '    \n', '    modifier restricted(){\n', '        require(msg.sender == cashBackManager || msg.sender == contractOwner);\n', '        _;\n', '    }\n', '    \n', '    function setCashbackManager(address cba) public restricted{\n', '        cashBackManager=cba;\n', '    }\n', '\n', '    function cBAListLength()public view returns(uint256){\n', '        return cBAList.length;\n', '    }\n', '    \n', '    function addCBA(address cba, bool cbaStatus, string memory bkUid, bool bkUidStatus, string memory statusMsg) public restricted{\n', '        uint256 oldIdx=getCBAbyAddress[cba];\n', '        if(oldIdx>0){\n', '            expiredAddress[cba].push(oldIdx);\n', '            cBAList[oldIdx].expired=true;\n', '            cBAStatusMessage[cba].push("Expired Address");\n', '        }\n', '        bytes32 bkUidHash = collapseInput(bkUid);\n', '        uint256 oldBkUidIndex = getCBAbyBkUid[bkUidHash];\n', '        if(oldBkUidIndex > 0){\n', '            expiredBankUid[bkUidHash].push(oldBkUidIndex);\n', '            cBAList[oldBkUidIndex].expired=true;\n', '            cBAStatusMessage[cba].push("Expired Bank UID");\n', '        }\n', '        getCBAbyAddress[cba]=cBAList.length;\n', '        getCBAbyBkUid[bkUidHash]=cBAList.length;\n', '        cBAList.push(cashBackAddressObj({cba:cba,cbaActive:cbaStatus,bankUid:bkUid,bankUIDActive:bkUidStatus, expired:false}));\n', '        cBAStatusMessage[cba].push(statusMsg);\n', '    }\n', '    \n', '    function getExpiredBkUidIndexes(string memory bkUid)public view returns (uint256[] memory){\n', '        return expiredBankUid[collapseInput(bkUid)];\n', '    }\n', '\n', '    function getExpiredAddressIndexes(address cba)public view returns (uint256[] memory){\n', '            return expiredAddress[cba];\n', '    }\n', '\n', '    function searchByBkUid(string memory bkUid) public view returns(uint256){\n', '        return getCBAbyBkUid[collapseInput(bkUid)];\n', '    }\n', '    \n', '    function getCBAStatusMessageLength(address cba) public view returns(uint256){\n', '        return cBAStatusMessage[cba].length;\n', '    }\n', '    \n', '    function getCBATransactionMessageLength(address cba) public view returns(uint256){\n', '        return  cBATransactionMessage[cba].length;\n', '    }\n', '    \n', '    function getCashBackObject(uint256 obj_id)public  view returns(address, bool, string memory, bool, bool){\n', '        return(\n', '                cBAList[obj_id].cba,\n', '                cBAList[obj_id].cbaActive,\n', '                cBAList[obj_id].bankUid,\n', '                cBAList[obj_id].bankUIDActive,\n', '                cBAList[obj_id].expired\n', '            );\n', '    }\n', '    \n', '\n', '    function annotatedCashBack(uint256 tk, address _to, string memory transferMsg) public{\n', '        uint256 sndIdx = getCBAbyAddress[msg.sender];\n', '        require(sndIdx>0 && cBAList[sndIdx].bankUIDActive);\n', '        cBATransactionMessage[cBAList[sndIdx].cba].push(transferMsg);\n', '        transfer(_to,tk);\n', '    }\n', '}']
