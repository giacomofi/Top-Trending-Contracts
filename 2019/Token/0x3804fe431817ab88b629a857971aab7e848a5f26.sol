['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract T {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    mapping (address => bool) public centralUsers;\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    address public owner;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    // 8888800000000,"center for digital finacial assets",8,"T", ["0x72F720B4fa62F0d12EF58F2E460272548C897c5a","0x27e04E00B3A092CF7B943C31d3DC1b292f1B41e9"]\n', '\n', '\n', '    constructor(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        address [] _centralUsers\n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;\n', '        totalSupply = _initialAmount;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        owner = msg.sender;\n', '        for (uint8 i = 0; i< _centralUsers.length; i++){\n', '            centralUsers[_centralUsers[i]] = true;\n', '        }\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCentralUser() {\n', '        require(centralUsers[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function setCentralUser(address user) public onlyOwner {\n', '        centralUsers[user] = true;\n', '    }\n', '\n', '    function removeCentralUser(address user) public onlyOwner {\n', '        centralUsers[user] = false;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function feeCentralTransfer(address _from, address _to, uint256 _value, uint256 _charge) public onlyCentralUser returns (bool success) {\n', '        // charge\n', '\n', '        // not charge company account\n', '        if (_from != owner && _charge != 0) {\n', '            _transfer(_from, owner, _charge);\n', '        }\n', '        _value = _value - _charge;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function centralTransfer(address _from, address _to, uint256 _value) public onlyCentralUser returns (bool success) {\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']