['/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require( (allowed[msg.sender][_spender] == 0) || (_value == 0) );\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467,  under MIT license. See LICENSE\n', '*/\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferInitiated(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the specific function owner.\n', '     */\n', '    modifier ownedBy(address _a) {\n', '        require( msg.sender == _a );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to. Needs to be accepted by\n', '     * the new owner.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnershipAtomic(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Completes the ownership transfer by having the new address confirm the transfer.\n', '     */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, msg.sender);\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '        emit OwnershipTransferInitiated(owner, _newOwner);\n', '    }\n', '}\n', '\n', '/*\n', 'This source file has been copied with modification from https://github.com/OpenZeppelin/openzeppelin-solidity\n', 'commit 2307467, under MIT license. See LICENSE\n', '*/\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    // Overflow check: 1500 *1e6 * 1e18 < 10^30 < 2^105 < 2^256\n', '    uint constant public SUPPLY_HARD_CAP = 1500 * 1e6 * 1e18;\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        hasMintPermission\n', '        canMint\n', '        returns (bool)\n', '    {\n', '        require( totalSupply_.add(_amount) <= SUPPLY_HARD_CAP );\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Allocation is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public backend;\n', '    address public team;\n', '    address public partners;\n', '    address public toSendFromStorage; address public rewards;\n', '    OPUCoin public token;\n', '    Vesting public vesting;\n', '    ColdStorage public coldStorage;\n', '\n', '    bool public emergencyPaused = false;\n', '    bool public finalizedHoldingsAndTeamTokens = false;\n', '    bool public mintingFinished = false;\n', '\n', '    // All the numbers on the following 8 lines are lower than 10^30\n', '    // Which is in turn lower than 2^105, which is lower than 2^256\n', '    // So, no overflows are possible, the operations are safe.\n', '    uint constant internal MIL = 1e6 * 1e18;\n', '\n', '    // Token distribution table, all values in millions of tokens\n', '    uint constant internal ICO_DISTRIBUTION    = 550 * MIL;\n', '    uint constant internal TEAM_TOKENS         = 550  * MIL;\n', '    uint constant internal COLD_STORAGE_TOKENS = 75  * MIL;\n', '    uint constant internal PARTNERS_TOKENS     = 175  * MIL;\n', '    uint constant internal REWARDS_POOL        = 150  * MIL;\n', '\n', '    uint internal totalTokensSold = 0;\n', '\n', '    event TokensAllocated(address _buyer, uint _tokens);\n', '    event TokensAllocatedIntoHolding(address _buyer, uint _tokens);\n', '    event TokensMintedForRedemption(address _to, uint _tokens);\n', '    event TokensSentIntoVesting(address _vesting, address _to, uint _tokens);\n', '    event TokensSentIntoHolding(address _vesting, address _to, uint _tokens);\n', '    event HoldingAndTeamTokensFinalized();\n', '    event BackendUpdated(address oldBackend, address newBackend);\n', '    event TeamUpdated(address oldTeam, address newTeam);\n', '    event PartnersUpdated(address oldPartners, address newPartners);\n', '    event ToSendFromStorageUpdated(address oldToSendFromStorage, address newToSendFromStorage);\n', '\n', '    // Human interaction (only accepted from the address that launched the contract)\n', '    constructor(\n', '        address _backend,\n', '        address _team,\n', '        address _partners,\n', '        address _toSendFromStorage,\n', '        address _rewards\n', '    )\n', '        public\n', '    {\n', '        require( _backend           != address(0) );\n', '        require( _team              != address(0) );\n', '        require( _partners          != address(0) );\n', '        require( _toSendFromStorage != address(0) );\n', '        require( _rewards != address(0) );\n', '\n', '        backend           = _backend;\n', '        team              = _team;\n', '        partners          = _partners;\n', '        toSendFromStorage = _toSendFromStorage;\n', '        rewards = _rewards;\n', '\n', '        token       = new OPUCoin();\n', '        vesting     = new Vesting(address(token), team);\n', '        coldStorage = new ColdStorage(address(token));\n', '    }\n', '\n', '    function emergencyPause() public onlyOwner unpaused { emergencyPaused = true; }\n', '\n', '    function emergencyUnpause() public onlyOwner paused { emergencyPaused = false; }\n', '\n', '    function allocate(\n', '        address _buyer,\n', '        uint _tokensWithStageBonuses\n', '    )\n', '        public\n', '        ownedBy(backend)\n', '        mintingEnabled\n', '    {\n', '        uint tokensAllocated = _allocateTokens(_buyer, _tokensWithStageBonuses);\n', '        emit TokensAllocated(_buyer, tokensAllocated);\n', '    }\n', '\n', '    function finalizeHoldingAndTeamTokens()\n', '        public\n', '        ownedBy(backend)\n', '        unpaused\n', '    {\n', '        require( !finalizedHoldingsAndTeamTokens );\n', '\n', '        finalizedHoldingsAndTeamTokens = true;\n', '\n', '        vestTokens(team, TEAM_TOKENS);\n', '        holdTokens(toSendFromStorage, COLD_STORAGE_TOKENS);\n', '        token.mint(partners, PARTNERS_TOKENS);\n', '        token.mint(rewards, REWARDS_POOL);\n', '\n', '        // Can exceed ICO token cap\n', '\n', '        vesting.finalizeVestingAllocation();\n', '\n', '        mintingFinished = true;\n', '        token.finishMinting();\n', '\n', '        emit HoldingAndTeamTokensFinalized();\n', '    }\n', '\n', '    function _allocateTokens(\n', '        address _to,\n', '        uint _tokensWithStageBonuses\n', '    )\n', '        internal\n', '        unpaused\n', '        returns (uint)\n', '    {\n', '        require( _to != address(0) );\n', '\n', '        checkCapsAndUpdate(_tokensWithStageBonuses);\n', '\n', '        // Calculate the total token sum to allocate\n', '        uint tokensToAllocate = _tokensWithStageBonuses;\n', '\n', '        // Mint the tokens\n', '        require( token.mint(_to, tokensToAllocate) );\n', '        return tokensToAllocate;\n', '    }\n', '\n', '    function checkCapsAndUpdate(uint _tokensToSell) internal {\n', '        uint newTotalTokensSold = totalTokensSold.add(_tokensToSell);\n', '        require( newTotalTokensSold <= ICO_DISTRIBUTION );\n', '        totalTokensSold = newTotalTokensSold;\n', '    }\n', '\n', '    function vestTokens(address _to, uint _tokens) internal {\n', '        require( token.mint(address(vesting), _tokens) );\n', '        vesting.initializeVesting( _to, _tokens );\n', '        emit TokensSentIntoVesting(address(vesting), _to, _tokens);\n', '    }\n', '\n', '    function holdTokens(address _to, uint _tokens) internal {\n', '        require( token.mint(address(coldStorage), _tokens) );\n', '        coldStorage.initializeHolding(_to);\n', '        emit TokensSentIntoHolding(address(coldStorage), _to, _tokens);\n', '    }\n', '\n', '    function updateBackend(address _newBackend) public onlyOwner {\n', '        require(_newBackend != address(0));\n', '        backend = _newBackend;\n', '        emit BackendUpdated(backend, _newBackend);\n', '    }\n', '\n', '    function updateTeam(address _newTeam) public onlyOwner {\n', '        require(_newTeam != address(0));\n', '        team = _newTeam;\n', '        emit TeamUpdated(team, _newTeam);\n', '    }\n', '\n', '    function updatePartners(address _newPartners) public onlyOwner {\n', '        require(_newPartners != address(0));\n', '        partners = _newPartners;\n', '        emit PartnersUpdated(partners, _newPartners);\n', '    }\n', '\n', '    function updateToSendFromStorage(address _newToSendFromStorage) public onlyOwner {\n', '        require(_newToSendFromStorage != address(0));\n', '        toSendFromStorage = _newToSendFromStorage;\n', '        emit ToSendFromStorageUpdated(toSendFromStorage, _newToSendFromStorage);\n', '    }\n', '\n', '    modifier unpaused() {\n', '        require( !emergencyPaused );\n', '        _;\n', '    }\n', '\n', '    modifier paused() {\n', '        require( emergencyPaused );\n', '        _;\n', '    }\n', '\n', '    modifier mintingEnabled() {\n', '        require( !mintingFinished );\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ColdStorage is Ownable {\n', '    using SafeMath for uint8;\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '\n', '    uint public lockupEnds;\n', '    uint public lockupPeriod;\n', '    uint public lockupRewind = 109 days;\n', '    bool public storageInitialized = false;\n', '    address public founders;\n', '\n', '    event StorageInitialized(address _to, uint _tokens);\n', '    event TokensReleased(address _to, uint _tokensReleased);\n', '\n', '    constructor(address _token) public {\n', '        require( _token != address(0) );\n', '        token = ERC20(_token);\n', '        uint lockupYears = 2;\n', '        lockupPeriod = lockupYears.mul(365 days);\n', '    }\n', '\n', '    function claimTokens() external {\n', '        require( now > lockupEnds );\n', '        require( msg.sender == founders );\n', '\n', '        uint tokensToRelease = token.balanceOf(address(this));\n', '        require( token.transfer(msg.sender, tokensToRelease) );\n', '        emit TokensReleased(msg.sender, tokensToRelease);\n', '    }\n', '\n', '    function initializeHolding(address _to) public onlyOwner {\n', '        uint tokens = token.balanceOf(address(this));\n', '        require( !storageInitialized );\n', '        require( tokens != 0 );\n', '\n', '        lockupEnds = now.sub(lockupRewind).add(lockupPeriod);\n', '        founders = _to;\n', '        storageInitialized = true;\n', '        emit StorageInitialized(_to, tokens);\n', '    }\n', '}\n', '\n', '\n', 'contract Migrations {\n', '  address public owner;\n', '  uint public last_completed_migration;\n', '\n', '  modifier restricted() {\n', '    if (msg.sender == owner) _;\n', '  }\n', '\n', '  function Migrations() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setCompleted(uint completed) public restricted {\n', '    last_completed_migration = completed;\n', '  }\n', '\n', '  function upgrade(address new_address) public restricted {\n', '    Migrations upgraded = Migrations(new_address);\n', '    upgraded.setCompleted(last_completed_migration);\n', '  }\n', '}\n', '\n', 'contract OPUCoin is MintableToken {\n', '    string constant public symbol = "OPU";\n', '    string constant public name = "Opu Coin";\n', '    uint8 constant public decimals = 18;\n', '\n', '    // -------------------------------------------\n', '\t// Public functions\n', '    // -------------------------------------------\n', '    constructor() public { }\n', '}\n', '\n', '\n', 'contract Vesting is Ownable {\n', '    using SafeMath for uint;\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '    mapping (address => Holding) public holdings;\n', '    address internal founders;\n', '\n', '    uint constant internal PERIOD_INTERVAL = 30 days;\n', '    uint constant internal FOUNDERS_HOLDING = 365 days;\n', '    uint constant internal BONUS_HOLDING = 0;\n', '    uint constant internal TOTAL_PERIODS = 12;\n', '\n', '    uint internal totalTokensCommitted = 0;\n', '\n', '    bool internal vestingStarted = false;\n', '    uint internal vestingStart = 0;\n', '    uint vestingRewind = 109 days;\n', '\n', '    struct Holding {\n', '        uint tokensCommitted;\n', '        uint tokensRemaining;\n', '        uint batchesClaimed;\n', '\n', '        bool isFounder;\n', '        bool isValue;\n', '    }\n', '\n', '    event TokensReleased(address _to, uint _tokensReleased, uint _tokensRemaining);\n', '    event VestingInitialized(address _to, uint _tokens);\n', '    event VestingUpdated(address _to, uint _totalTokens);\n', '\n', '    constructor(address _token, address _founders) public {\n', '        require( _token != 0x0);\n', '        require(_founders != 0x0);\n', '        token = ERC20(_token);\n', '        founders = _founders;\n', '    }\n', '\n', '    function claimTokens() external {\n', '        require( holdings[msg.sender].isValue );\n', '        require( vestingStarted );\n', '        uint personalVestingStart =\n', '            (holdings[msg.sender].isFounder) ? (vestingStart.add(FOUNDERS_HOLDING)) : (vestingStart);\n', '        require( now > personalVestingStart );\n', '        uint periodsPassed = now.sub(personalVestingStart).div(PERIOD_INTERVAL);\n', '        uint batchesToClaim = periodsPassed.sub(holdings[msg.sender].batchesClaimed);\n', '        require( batchesToClaim > 0 );\n', '        uint tokensPerBatch = (holdings[msg.sender].tokensRemaining).div(\n', '            TOTAL_PERIODS.sub(holdings[msg.sender].batchesClaimed)\n', '        );\n', '        uint tokensToRelease = 0;\n', '\n', '        if (periodsPassed >= TOTAL_PERIODS) {\n', '            tokensToRelease = holdings[msg.sender].tokensRemaining;\n', '            delete holdings[msg.sender];\n', '        } else {\n', '            tokensToRelease = tokensPerBatch.mul(batchesToClaim);\n', '            holdings[msg.sender].tokensRemaining = (holdings[msg.sender].tokensRemaining).sub(tokensToRelease);\n', '            holdings[msg.sender].batchesClaimed = holdings[msg.sender].batchesClaimed.add(batchesToClaim);\n', '        }\n', '        require( token.transfer(msg.sender, tokensToRelease) );\n', '        emit TokensReleased(msg.sender, tokensToRelease, holdings[msg.sender].tokensRemaining);\n', '    }\n', '\n', '    function tokensRemainingInHolding(address _user) public view returns (uint) {\n', '        return holdings[_user].tokensRemaining;\n', '    }\n', '\n', '    function initializeVesting(address _beneficiary, uint _tokens) public onlyOwner {\n', '        bool isFounder = (_beneficiary == founders);\n', '        _initializeVesting(_beneficiary, _tokens, isFounder);\n', '    }\n', '\n', '    function finalizeVestingAllocation() public onlyOwner {\n', '        vestingStarted = true;\n', '        vestingStart = now.sub(vestingRewind);\n', '    }\n', '\n', '    function _initializeVesting(address _to, uint _tokens, bool _isFounder) internal {\n', '        require( !vestingStarted );\n', '        if (!_isFounder) totalTokensCommitted = totalTokensCommitted.add(_tokens);\n', '        if (!holdings[_to].isValue) {\n', '            holdings[_to] = Holding({\n', '                tokensCommitted: _tokens,\n', '                tokensRemaining: _tokens,\n', '                batchesClaimed: 0,\n', '                isFounder: _isFounder,\n', '                isValue: true\n', '            });\n', '            emit VestingInitialized(_to, _tokens);\n', '        } else {\n', '            holdings[_to].tokensCommitted = (holdings[_to].tokensCommitted).add(_tokens);\n', '            holdings[_to].tokensRemaining = (holdings[_to].tokensRemaining).add(_tokens);\n', '            emit VestingUpdated(_to, holdings[_to].tokensRemaining);\n', '        }\n', '    }\n', '}']