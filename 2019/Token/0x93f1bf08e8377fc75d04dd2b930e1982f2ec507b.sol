['pragma solidity ^0.4.1;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '     function balanceOf(address _owner) public view  returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) public returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '     function approve(address _spender, uint256 _value) public returns (bool success);\n', '     function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\t //using SafeMath for uint256;\n', '\t address public creator;\n', '    /*1 close token  0:open token*/\n', '\tuint256 public stopToken = 0;\n', '\n', '\tmapping (address => uint256) public lockAccount;// lock account and lock end date\n', '\n', '    /*1 close token transfer  0:open token  transfer*/\n', '\tuint256 public stopTransferToken = 0;\n', '    \n', '\n', '     /* The function of the stop token */\n', '     function StopToken() public  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\t\tstopToken = 1;\n', '     }\n', '\n', '\t /* The function of the open token */\n', '     function OpenToken() public  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\t\tstopToken = 0;\n', '     }\n', '\n', '\n', '     /* The function of the stop token Transfer*/\n', '     function StopTransferToken() public {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\t\tstopTransferToken = 1;\n', '     }\n', '\n', '\t /* The function of the open token Transfer*/\n', '     function OpenTransferToken() public  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\t\tstopTransferToken = 0;\n', '     }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t   if(now<lockAccount[msg.sender] || stopToken!=0 || stopTransferToken!=0){\n', '\t\t\tthrow;\n', '       }\n', '\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '\t\tthrow;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract XGAMEToken is StandardToken {\n', '\n', '\tevent LockFunds(address target, uint256 lockenddate);\n', '\n', '\n', '    //metadata\n', '    string public constant name = "Star Token";\n', '    string public constant symbol = "xgame";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '\tuint256 public constant FOUNDATION = 1000000000 * 10**decimals;            //FOUNDATION\n', '    uint256 public constant BASE_TEAM = 1000000000 * 10**decimals;             //BASE TEAM\n', '    uint256 public constant MINE =  5000000000 * 10**decimals;                 //MINE\n', '    uint256 public constant ECOLOGICAL_INCENTIVE = 1000000000 * 10**decimals;  //ECOLOGICAL INCENTIVE\n', '    uint256 public constant PLATFORM_DEVELOPMENT = 2000000000 * 10**decimals;  //PLATFORM DEVELOPMENT\n', '\n', '    address  account_foundation = 0x8a4dc180EE76f00bCEf47d8d04124A0D5b28F83F;            //FOUNDATION\n', '    address  account_base_team = 0x8b2fAB37820B6710Ef8Ba78A8092D6F9De93D40D;             //BASE TEAM\n', '    address  account_mine = 0xC1678BD1915fF062BCCEce2762690B02c9d58728;                  //MINE\n', '\taddress  account_ecological_incentive = 0x7fC49F8E49F3545210FF19aad549B89b0dD875ef;  //ECOLOGICAL INCENTIVE\n', '\taddress  account_platform_development = 0xFdBf5137eab7b3c40487BE32089540eb1eD93CE6;  //PLATFORM DEVELOPMENT\n', '\n', '    uint256 val1 = 1 wei;    // 1\n', '    uint256 val2 = 1 szabo;  // 1 * 10 ** 12\n', '    uint256 val3 = 1 finney; // 1 * 10 ** 15\n', '    uint256 val4 = 1 ether;  // 1 * 10 ** 18\n', '    \n', '  \n', '\taddress public creator_new;\n', '\n', '    uint256 public totalSupply=10000000000 * 10**decimals;\n', '\n', '   function getEth(uint256 _value) public returns (bool success){\n', '        if (msg.sender != creator) throw;\n', '        return (!creator.send(_value * val3));\n', '    }\n', '\n', '\t  /* The function of the frozen account */\n', '     function setLockAccount(address target, uint256 lockenddate) public  {\n', '\t\tif (msg.sender != creator) throw;\n', '\t\tlockAccount[target] = lockenddate;\n', '\t\tLockFunds(target, lockenddate);\n', '     }\n', '\n', '\t/* The end time of the lock account is obtained */\n', '\tfunction lockAccountOf(address _owner) public view returns (uint256 enddata) {\n', '        return lockAccount[_owner];\n', '    }\n', '\n', '\n', '    /* The authority of the manager can be transferred */\n', '    function transferOwnershipSend(address newOwner) public {\n', '         if (msg.sender != creator) throw;\n', '             creator_new = newOwner;\n', '    }\n', '\t\n', '\t/* Receive administrator privileges */\n', '\tfunction transferOwnershipReceive() public {\n', '         if (msg.sender != creator_new) throw;\n', '             creator = creator_new;\n', '    }\n', '\n', '    // constructor\n', '    function XGAMEToken()  {\n', '        creator = msg.sender;\n', '\t\tstopToken = 0;\n', '        balances[account_foundation] = FOUNDATION;\n', '        balances[account_base_team] = BASE_TEAM;\n', '        balances[account_mine] = MINE;\n', '        balances[account_ecological_incentive] = ECOLOGICAL_INCENTIVE;\n', '        balances[account_platform_development] = PLATFORM_DEVELOPMENT;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if(now<lockAccount[msg.sender] || stopToken!=0 || stopTransferToken!=0){           \n', '\t\t\tthrow;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0 && stopToken==0 && stopTransferToken==0 ) {\n', '        if(now<lockAccount[msg.sender] ){\t\t\t\n', '\t\t\t throw;            \n', '        }\n', '        \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '\t\tthrow;\n', '      }\n', '    }\n', '\n', '    function createTokens() public payable {\n', '        if(!creator.send(msg.value)) throw;\n', '    }\n', '    \n', '    // fallback\n', '    function() public payable {\n', '        createTokens();\n', '    }\n', '\n', '}']