['pragma solidity ^0.5.1;\n', '\n', 'contract CareerOnToken {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed a_owner, address indexed _spender, uint256 _value);\n', '    event OwnerChange(address indexed _old,address indexed _new,uint256 _coin_change);\n', '    \n', '    uint256 public totalSupply;  \n', '    string public name;                   //名称，例如"My test token"\n', '    uint8 public decimals;               //返回token使用的小数点后几位。比如如果设置为3，就是支持0.001表示.\n', '    string public symbol;               //token简称,like MTT\n', '    address public owner;\n', '    \n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '\t//如果通过函数setPauseStatus设置这个变量为TRUE，则所有转账交易都会失败\n', '    bool isTransPaused=false;\n', '    \n', '    constructor(\n', '        uint256 _initialAmount,\n', '        uint8 _decimalUnits) public \n', '    {\n', '        owner=msg.sender;//记录合约的owner\n', '\t\tif(_initialAmount<=0){\n', '\t\t    totalSupply = 100000000000000000;   // 设置初始总量\n', '\t\t    balances[owner]=totalSupply;\n', '\t\t}else{\n', '\t\t    totalSupply = _initialAmount;   // 设置初始总量\n', '\t\t    balances[owner]=_initialAmount;\n', '\t\t}\n', '\t\tif(_decimalUnits<=0){\n', '\t\t    decimals=8;\n', '\t\t}else{\n', '\t\t    decimals = _decimalUnits;\n', '\t\t}\n', '        name = "CareerOn Chain Token"; \n', '        symbol = "COT";\n', '    }\n', '    \n', '    \n', '    function transfer(\n', '        address _to, \n', '        uint256 _value) public returns (bool success) \n', '    {\n', '        assert(_to!=address(this) && \n', '                !isTransPaused &&\n', '                balances[msg.sender] >= _value &&\n', '                balances[_to] + _value > balances[_to]\n', '        );\n', '        \n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '\t\tif(msg.sender==owner){\n', '\t\t\temit Transfer(address(this), _to, _value);//触发转币交易事件\n', '\t\t}else{\n', '\t\t\temit Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '\t\t}\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(\n', '        address _from, \n', '        address _to, \n', '        uint256 _value) public returns (bool success) \n', '    {\n', '        assert(_to!=address(this) && \n', '                !isTransPaused &&\n', '                balances[_from] >= _value &&\n', '                balances[_to] + _value > balances[_to] &&\n', '                allowed[_from][msg.sender] >= _value\n', '        );\n', '        \n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        if(_from==owner){\n', '\t\t\temit Transfer(address(this), _to, _value);//触发转币交易事件\n', '\t\t}else{\n', '\t\t\temit Transfer(_from, _to, _value);//触发转币交易事件\n', '\t\t}\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) \n', '    { \n', '        assert(msg.sender!=_spender && _value>0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(\n', '        address _owner, \n', '        address _spender) public view returns (uint256 remaining) \n', '    {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    \n', '    function balanceOf(address accountAddr) public view returns (uint256) {\n', '        return balances[accountAddr];\n', '    }\n', '\t\n', '\t//以下为本代币协议的特殊逻辑\n', '\t//转移协议所有权并将附带的代币一并转移过去\n', '\tfunction changeOwner(address newOwner) public{\n', '        assert(msg.sender==owner && msg.sender!=newOwner);\n', '        balances[newOwner]=balances[owner];\n', '        balances[owner]=0;\n', '        owner=newOwner;\n', '        emit OwnerChange(msg.sender,newOwner,balances[owner]);//触发合约所有权的转移事件\n', '    }\n', '    \n', '\t//isPaused为true则暂停所有转账交易\n', '    function setPauseStatus(bool isPaused)public{\n', '        assert(msg.sender==owner);\n', '        isTransPaused=isPaused;\n', '    }\n', '    \n', '\t//修改合约名字\n', '    function changeContractName(string memory _newName,string memory _newSymbol) public {\n', '        assert(msg.sender==owner);\n', '        name=_newName;\n', '        symbol=_newSymbol;\n', '    }\n', '    \n', '    \n', '    function () external payable {\n', '        revert();\n', '    }\n', '}']