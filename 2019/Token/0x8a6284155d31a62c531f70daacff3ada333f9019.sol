['pragma solidity ^0.4.24;\n', '\n', '\n', 'library Math {\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    \n', '\n', '    address public owner_;\n', '    mapping(address => bool) locked_;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        \n', '        owner_ = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        \n', '        require(msg.sender == owner_);\n', '        _;\n', '    }\n', '\n', '    modifier locked() {\n', '        require(!locked_[msg.sender]);\n', '        _;\n', '    }    \n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        \n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner_, newOwner);\n', '        owner_ = newOwner;\n', '    }\n', '\n', '    function lock(address owner) public onlyOwner {\n', '        locked_[owner] = true;\n', '    }\n', '\n', '    function unlock(address owner) public onlyOwner {\n', '        locked_[owner] = false;\n', '    }    \n', '}\n', '\n', '\n', 'contract BasicToken is ERC20 {\n', '    \n', '\n', '    using Math for uint256;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    uint256 totalSupply_;\n', '    mapping(address => uint256) balances_;\n', '    mapping (address => mapping (address => uint256)) internal allowed_;    \n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        \n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '\n', '        require(to != address(0));\n', '        require(value <= balances_[msg.sender]);\n', '\n', '        balances_[msg.sender] = balances_[msg.sender].sub(value);\n', '        balances_[to] = balances_[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance) {\n', '\n', '        return balances_[owner];\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '\n', '        require(to != address(0));\n', '        require(value <= balances_[from]);\n', '        require(value <= allowed_[from][msg.sender]);\n', '\n', '        balances_[from] = balances_[from].sub(value);\n', '        balances_[to] = balances_[to].add(value);\n', '        allowed_[from][msg.sender] = allowed_[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        \n', '        allowed_[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        \n', '        return allowed_[owner][spender];\n', '    }\n', '\n', '    function burn(uint256 value) public {\n', '\n', '        require(value <= balances_[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances_[burner] = balances_[burner].sub(value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        emit Burn(burner, value);\n', '    }    \n', '}\n', '\n', '\n', '\n', 'contract DLOToken is BasicToken, Ownable {\n', '\n', '    \n', '    using Math for uint;\n', '\n', '    string constant public name     = "Delio";\n', '    string constant public symbol   = "DLO";\n', '    uint8 constant public decimals  = 18;\n', '    uint256 constant TOTAL_SUPPLY   = 5000000000e18;\n', '    \n', '    address constant company1 = 0xa4Fb2C681A51e52930467109d990BbB21857EaCE; // 40\n', '    address constant company2 = 0x0Cc7b6c24f5546a4938F67A3C7A8c29Eba2a0f9d; // 20\n', '    address constant company3 = 0x7c0b9BdA7cAaE0015F17F2664B46DFE293C85BAb; // 20\n', '    address constant company4 = 0x5ca06ad3E9141818049e8fDF6731Ab639A8832AD; // 10\n', '    address constant company5 = 0x3444E9FC958e2e0e706f71ACC7F06211E0580CD2; // 10   \n', '\n', '\n', '    uint constant rate40 = 2000000000e18;\n', '    uint constant rate20 = 1000000000e18;\n', '    uint constant rate10 = 500000000e18;\n', '    \n', '    constructor() public {\n', '\n', '        totalSupply_ = TOTAL_SUPPLY;\n', '        allowTo(company1, rate40);\n', '        allowTo(company2, rate20);\n', '        allowTo(company3, rate20);\n', '        allowTo(company4, rate10);\n', '        allowTo(company5, rate10);\n', '    }\n', '\n', '    function allowTo(address addr, uint amount) internal returns (bool) {\n', '        \n', '        balances_[addr] = amount;\n', '        emit Transfer(address(0x0), addr, amount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public locked returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public locked returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}']