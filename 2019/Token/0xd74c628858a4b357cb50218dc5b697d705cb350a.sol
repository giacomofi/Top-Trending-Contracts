['pragma solidity >= 0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', 'contract Constants {\n', '    uint public constant UNLOCK_COUNT = 7;\n', '}\n', '\n', 'contract CardioCoin is ERC20, Ownable, Constants {\n', '    using SafeMath for uint256;\n', '\n', '    uint public constant RESELLER_UNLOCK_TIME = 1559347200; \n', '    uint public constant UNLOCK_PERIOD = 30 days;\n', '\n', '    string public name = "CardioCoin";\n', '    string public symbol = "CRDC";\n', '\n', '    uint8 public decimals = 18;\n', '    uint256 internal totalSupply_ = 50000000000 * (10 ** uint256(decimals));\n', '\n', '    mapping (address => uint256) internal reselling;\n', '    uint256 internal resellingAmount = 0;\n', '\n', '    struct locker {\n', '        bool isLocker;\n', '        string role;\n', '        uint lockUpPeriod;\n', '        uint unlockCount;\n', '        bool isReseller;\n', '    }\n', '\n', '    mapping (address => locker) internal lockerList;\n', '\n', '    event AddToLocker(address indexed owner, string role, uint lockUpPeriod, uint unlockCount);\n', '    event AddToReseller(address indexed owner);\n', '\n', '    event ResellingAdded(address indexed seller, uint256 amount);\n', '    event ResellingSubtracted(address indexed seller, uint256 amount);\n', '    event Reselled(address indexed seller, address indexed buyer, uint256 amount);\n', '\n', '    event TokenLocked(address indexed owner, uint256 amount);\n', '    event TokenUnlocked(address indexed owner, uint256 amount);\n', '\n', '    constructor() public Ownable() {\n', '        balance memory b;\n', '\n', '        b.available = totalSupply_;\n', '        balances[msg.sender] = b;\n', '    }\n', '\n', '    function addLockedUpTokens(address _owner, uint256 amount, uint lockUpPeriod, uint unlockCount)\n', '    internal {\n', '        balance storage b = balances[_owner];\n', '        lockUp memory l;\n', '\n', '        l.amount = amount;\n', '        l.unlockTimestamp = now + lockUpPeriod;\n', '        l.unlockCount = unlockCount;\n', '        b.lockedUp += amount;\n', '        b.lockUpData[b.lockUpCount] = l;\n', '        b.lockUpCount += 1;\n', '        emit TokenLocked(_owner, amount);\n', '    }\n', '\n', '    // Reselling\n', '\n', '    function addAddressToResellerList(address _operator)\n', '    public\n', '    onlyOwner {\n', '        locker storage existsLocker = lockerList[_operator];\n', '\n', '        require(!existsLocker.isLocker);\n', '\n', '        locker memory l;\n', '\n', '        l.isLocker = true;\n', '        l.role = "Reseller";\n', '        l.lockUpPeriod = RESELLER_UNLOCK_TIME;\n', '        l.unlockCount = UNLOCK_COUNT;\n', '        l.isReseller = true;\n', '        lockerList[_operator] = l;\n', '        emit AddToReseller(_operator);\n', '    }\n', '\n', '    function addResellingAmount(address seller, uint256 amount)\n', '    public\n', '    onlyOwner\n', '    {\n', '        require(seller != address(0));\n', '        require(amount > 0);\n', '        require(balances[seller].available >= amount);\n', '\n', '        reselling[seller] = reselling[seller].add(amount);\n', '        balances[seller].available = balances[seller].available.sub(amount);\n', '        resellingAmount = resellingAmount.add(amount);\n', '        emit ResellingAdded(seller, amount);\n', '    }\n', '\n', '    function subtractResellingAmount(address seller, uint256 _amount)\n', '    public\n', '    onlyOwner\n', '    {\n', '        uint256 amount = reselling[seller];\n', '\n', '        require(seller != address(0));\n', '        require(_amount > 0);\n', '        require(amount >= _amount);\n', '\n', '        reselling[seller] = reselling[seller].sub(_amount);\n', '        resellingAmount = resellingAmount.sub(_amount);\n', '        balances[seller].available = balances[seller].available.add(_amount);\n', '        emit ResellingSubtracted(seller, _amount);\n', '    }\n', '\n', '    function cancelReselling(address seller)\n', '    public\n', '    onlyOwner {\n', '        uint256 amount = reselling[seller];\n', '\n', '        require(seller != address(0));\n', '        require(amount > 0);\n', '\n', '        subtractResellingAmount(seller, amount);\n', '    }\n', '\n', '    function resell(address seller, address buyer, uint256 amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        require(seller != address(0));\n', '        require(buyer != address(0));\n', '        require(amount > 0);\n', '        require(reselling[seller] >= amount);\n', '        require(balances[owner()].available >= amount);\n', '\n', '        reselling[seller] = reselling[seller].sub(amount);\n', '        resellingAmount = resellingAmount.sub(amount);\n', '        addLockedUpTokens(buyer, amount, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\n', '        emit Reselled(seller, buyer, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    // ERC20 Custom\n', '\n', '    struct lockUp {\n', '        uint256 amount;\n', '        uint unlockTimestamp;\n', '        uint unlockedCount;\n', '        uint unlockCount;\n', '    }\n', '\n', '    struct balance {\n', '        uint256 available;\n', '        uint256 lockedUp;\n', '        mapping (uint => lockUp) lockUpData;\n', '        uint lockUpCount;\n', '        uint unlockIndex;\n', '    }\n', '\n', '    mapping(address => balance) internal balances;\n', '\n', '    function unlockBalance(address _owner) internal {\n', '        balance storage b = balances[_owner];\n', '\n', '        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\n', '            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\n', '                lockUp storage l = b.lockUpData[i];\n', '\n', '                if (l.unlockTimestamp <= now) {\n', '                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\n', '                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\n', '\n', '                    if (unlockedAmount > b.lockedUp) {\n', '                        unlockedAmount = b.lockedUp;\n', '                        l.unlockedCount = l.unlockCount;\n', '                    } else {\n', '                        b.available = b.available.add(unlockedAmount);\n', '                        b.lockedUp = b.lockedUp.sub(unlockedAmount);\n', '                        l.unlockedCount += count;\n', '                    }\n', '                    emit TokenUnlocked(_owner, unlockedAmount);\n', '                    if (l.unlockedCount == l.unlockCount) {\n', '                        lockUp memory tempA = b.lockUpData[i];\n', '                        lockUp memory tempB = b.lockUpData[b.unlockIndex];\n', '\n', '                        b.lockUpData[i] = tempB;\n', '                        b.lockUpData[b.unlockIndex] = tempA;\n', '                        b.unlockIndex += 1;\n', '                    } else {\n', '                        l.unlockTimestamp += UNLOCK_PERIOD * count;\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function calculateUnlockCount(uint timestamp, uint unlockedCount, uint unlockCount) view internal returns (uint) {\n', '        uint count = 0;\n', '        uint nowFixed = now;\n', '\n', '        while (timestamp < nowFixed && unlockedCount + count < unlockCount) {\n', '            count++;\n', '            timestamp += UNLOCK_PERIOD;\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        locker storage l = lockerList[from];\n', '\n', '        if (l.isReseller && RESELLER_UNLOCK_TIME < now) {\n', '            l.isLocker = false;\n', '            l.isReseller = false;\n', '\n', '            uint elapsedPeriod = (now - RESELLER_UNLOCK_TIME) / UNLOCK_PERIOD;\n', '\n', '            if (elapsedPeriod < UNLOCK_COUNT) {\n', '                balance storage b = balances[from];\n', '                uint256 lockUpAmount = b.available * (UNLOCK_COUNT - elapsedPeriod) / UNLOCK_COUNT;\n', '\n', '                b.available = b.available.sub(lockUpAmount);\n', '                addLockedUpTokens(from, lockUpAmount, RESELLER_UNLOCK_TIME + UNLOCK_PERIOD * (elapsedPeriod + 1) - now, UNLOCK_COUNT - elapsedPeriod);\n', '            }\n', '        }\n', '        unlockBalance(from);\n', '\n', '        require(value <= balances[from].available);\n', '        require(to != address(0));\n', '        if (l.isLocker) {\n', '            balances[from].available = balances[from].available.sub(value);\n', '            if (l.isReseller) {\n', '                addLockedUpTokens(to, value, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\n', '            } else {\n', '                addLockedUpTokens(to, value, l.lockUpPeriod, l.unlockCount);\n', '            }\n', '        } else {\n', '            balances[from].available = balances[from].available.sub(value);\n', '            balances[to].available = balances[to].available.add(value);\n', '        }\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner].available.add(balances[_owner].lockedUp);\n', '    }\n', '\n', '    function lockedUpBalanceOf(address _owner) public view returns (uint256) {\n', '        balance storage b = balances[_owner];\n', '        uint256 lockedUpBalance = b.lockedUp;\n', '\n', '        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\n', '            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\n', '                lockUp storage l = b.lockUpData[i];\n', '\n', '                if (l.unlockTimestamp <= now) {\n', '                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\n', '                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\n', '\n', '                    if (unlockedAmount > lockedUpBalance) {\n', '                        lockedUpBalance = 0;\n', '                        break;\n', '                    } else {\n', '                        lockedUpBalance = lockedUpBalance.sub(unlockedAmount);\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        return lockedUpBalance;\n', '    }\n', '\n', '    function resellingBalanceOf(address _owner) public view returns (uint256) {\n', '        return reselling[_owner];\n', '    }\n', '\n', '    function transferWithLockUp(address _to, uint256 _value, uint lockUpPeriod, uint unlockCount)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(_value <= balances[owner()].available);\n', '        require(_to != address(0));\n', '\n', '        balances[owner()].available = balances[owner()].available.sub(_value);\n', '        addLockedUpTokens(_to, _value, lockUpPeriod, unlockCount);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    // Burnable\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who].available);\n', '\n', '        balances[_who].available = balances[_who].available.sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    // Lockup\n', '\n', '    function addAddressToLockerList(address _operator, string memory role, uint lockUpPeriod, uint unlockCount)\n', '    public\n', '    onlyOwner {\n', '        locker storage existsLocker = lockerList[_operator];\n', '\n', '        require(!existsLocker.isLocker);\n', '\n', '        locker memory l;\n', '\n', '        l.isLocker = true;\n', '        l.role = role;\n', '        l.lockUpPeriod = lockUpPeriod;\n', '        l.unlockCount = unlockCount;\n', '        l.isReseller = false;\n', '        lockerList[_operator] = l;\n', '        emit AddToLocker(_operator, role, lockUpPeriod, unlockCount);\n', '    }\n', '\n', '    function lockerInfo(address _operator) public view returns (string memory, uint, uint, bool) {\n', '        locker memory l = lockerList[_operator];\n', '\n', '        return (l.role, l.lockUpPeriod, l.unlockCount, l.isReseller);\n', '    }\n', '\n', '    // Refund\n', '\n', '    event RefundRequested(address indexed reuqester, uint256 tokenAmount, uint256 paidAmount);\n', '    event RefundCanceled(address indexed requester);\n', '    event RefundAccepted(address indexed requester, address indexed tokenReceiver, uint256 tokenAmount, uint256 paidAmount);\n', '\n', '    struct refundRequest {\n', '        bool active;\n', '        uint256 tokenAmount;\n', '        uint256 paidAmount;\n', '        address buyFrom;\n', '    }\n', '\n', '    mapping (address => refundRequest) internal refundRequests;\n', '\n', '    function requestRefund(uint256 paidAmount, address buyFrom) public {\n', '        require(!refundRequests[msg.sender].active);\n', '\n', '        refundRequest memory r;\n', '\n', '        r.active = true;\n', '        r.tokenAmount = balanceOf(msg.sender);\n', '        r.paidAmount = paidAmount;\n', '        r.buyFrom = buyFrom;\n', '        refundRequests[msg.sender] = r;\n', '\n', '        emit RefundRequested(msg.sender, r.tokenAmount, r.paidAmount);\n', '    }\n', '\n', '    function cancelRefund() public {\n', '        require(refundRequests[msg.sender].active);\n', '        refundRequests[msg.sender].active = false;\n', '        emit RefundCanceled(msg.sender);\n', '    }\n', '\n', '    function acceptRefundForOwner(address payable requester, address receiver) public payable onlyOwner {\n', '        require(requester != address(0));\n', '        require(receiver != address(0));\n', '\n', '        refundRequest storage r = refundRequests[requester];\n', '\n', '        require(r.active);\n', '        require(balanceOf(requester) == r.tokenAmount);\n', '        require(msg.value == r.paidAmount);\n', '        require(r.buyFrom == owner());\n', '        requester.transfer(msg.value);\n', '        transferForRefund(requester, receiver, r.tokenAmount);\n', '        r.active = false;\n', '        emit RefundAccepted(requester, receiver, r.tokenAmount, msg.value);\n', '    }\n', '\n', '    function acceptRefundForReseller(address payable requester) public payable {\n', '        require(requester != address(0));\n', '\n', '        locker memory l = lockerList[msg.sender];\n', '\n', '        require(l.isReseller);\n', '\n', '        refundRequest storage r = refundRequests[requester];\n', '\n', '        require(r.active);\n', '        require(balanceOf(requester) == r.tokenAmount);\n', '        require(msg.value == r.paidAmount);\n', '        require(r.buyFrom == msg.sender);\n', '        requester.transfer(msg.value);\n', '        transferForRefund(requester, msg.sender, r.tokenAmount);\n', '        r.active = false;\n', '        emit RefundAccepted(requester, msg.sender, r.tokenAmount, msg.value);\n', '    }\n', '\n', '    function refundInfo(address requester) public view returns (bool, uint256, uint256) {\n', '        refundRequest memory r = refundRequests[requester];\n', '\n', '        return (r.active, r.tokenAmount, r.paidAmount);\n', '    }\n', '\n', '    function transferForRefund(address from, address to, uint256 amount) internal {\n', '        require(balanceOf(from) == amount);\n', '\n', '        unlockBalance(from);\n', '\n', '        balance storage fromBalance = balances[from];\n', '        balance storage toBalance = balances[to];\n', '\n', '        fromBalance.available = 0;\n', '        fromBalance.lockedUp = 0;\n', '        fromBalance.unlockIndex = fromBalance.lockUpCount;\n', '        toBalance.available = toBalance.available.add(amount);\n', '\n', '        emit Transfer(from, to, amount);\n', '    }\n', '}']