['pragma solidity ^0.5.7;\n', '\n', '\n', ' contract Ownable {\n', '     address private _owner;\n', '\n', '     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '     /**\n', '      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '      * account.\n', '      */\n', '     constructor () internal {\n', '         _owner = msg.sender;\n', '         emit OwnershipTransferred(address(0), _owner);\n', '     }\n', '\n', '     /**\n', '      * @return the address of the owner.\n', '      */\n', '     function owner() public view returns (address) {\n', '         return _owner;\n', '     }\n', '\n', '     /**\n', '      * @dev Throws if called by any account other than the owner.\n', '      */\n', '     modifier onlyOwner() {\n', '         require(isOwner());\n', '         _;\n', '     }\n', '\n', '     /**\n', '      * @return true if `msg.sender` is the owner of the contract.\n', '      */\n', '     function isOwner() public view returns (bool) {\n', '         return msg.sender == _owner;\n', '     }\n', '\n', '     /**\n', '      * @dev Allows the current owner to relinquish control of the contract.\n', '      * It will not be possible to call the functions with the `onlyOwner`\n', '      * modifier anymore.\n', '      * @notice Renouncing ownership will leave the contract without an owner,\n', '      * thereby removing any functionality that is only available to the owner.\n', '      */\n', '     function renounceOwnership() public onlyOwner {\n', '         emit OwnershipTransferred(_owner, address(0));\n', '         _owner = address(0);\n', '     }\n', '\n', '     /**\n', '      * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '     function transferOwnership(address newOwner) public onlyOwner {\n', '         _transferOwnership(newOwner);\n', '     }\n', '\n', '     /**\n', '      * @dev Transfers control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '     function _transferOwnership(address newOwner) internal {\n', '         require(newOwner != address(0));\n', '         emit OwnershipTransferred(_owner, newOwner);\n', '         _owner = newOwner;\n', '     }\n', ' }\n', '\n', '\n', '\n', ' contract Pausable is Ownable {\n', '   event Pause();\n', '   event Unpause();\n', '\n', '   bool public paused = false;\n', '\n', '\n', '   /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '   modifier whenNotPaused() {\n', '     require(!paused);\n', '     _;\n', '   }\n', '\n', '   /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '   modifier whenPaused() {\n', '     require(paused);\n', '     _;\n', '   }\n', '\n', '   /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '   function pause() onlyOwner whenNotPaused public {\n', '     paused = true;\n', '     emit Pause();\n', '   }\n', '\n', '   /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '   function unpause() onlyOwner whenPaused public {\n', '     paused = false;\n', '     emit Unpause();\n', '   }\n', ' }\n', '\n', '\n', 'contract IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '  \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MVITc is Ownable {\n', '\n', '\n', '  MVITtoken public token;\n', '  uint256 constant public tokenDecimals = 18;\n', '  uint256 public totalSupply = 90000000 * (10 ** uint256(tokenDecimals));\n', '\n', '  constructor () public {\n', '\n', '    token = createTokenContract();\n', '    token.unpause();\n', '  }\n', '\n', '\n', '\n', '  //\n', '  // Token related operations\n', '  //\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MVITtoken) {\n', '    return new MVITtoken();\n', '  }\n', '\n', '  // enable token transferability\n', '  function enableTokenTransferability() external onlyOwner {\n', '    token.unpause();\n', '  }\n', '\n', '  // disable token transferability\n', '  function disableTokenTransferability() external onlyOwner {\n', '    token.pause();\n', '  }\n', '\n', '  // transfer token to designated address\n', '  function transfer(address to, uint256 value) external onlyOwner returns (bool ok)  {\n', '    uint256 converterdValue = value * (10 ** uint256(tokenDecimals));\n', '    return token.transfer(to, converterdValue);\n', '   }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract MVITtoken is ERC20Pausable {\n', '  string constant public name = "MVit Token";\n', '  string constant public symbol = "MVT";\n', '  uint8 constant public decimals = 18;\n', '  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '  uint256 constant INITIAL_SUPPLY = 90000000 * TOKEN_UNIT;\n', '\n', '\n', '  constructor () public {\n', '    // Set untransferable by default to the token\n', '    paused = true;\n', '    // asign all tokens to the contract creator\n', '    totalSupply = INITIAL_SUPPLY;\n', '\n', '    _balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']