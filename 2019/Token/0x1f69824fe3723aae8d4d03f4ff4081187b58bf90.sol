['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-07\n', '*/\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from the caller&#39;s account to `recipient`.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the caller&#39;s tokens.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', '     * condition is to first reduce the spender&#39;s allowance to 0 and set the\n', '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', '     * allowance mechanism. `amount` is then deducted from the caller&#39;s\n', '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @dev Wrappers over Solidity&#39;s arithmetic operations with added overflow\n', ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', ' * class of bugs, so it&#39;s recommended to use it always.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `+` operator.\n', '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * Counterpart to Solidity&#39;s `-` operator.\n', '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `*` operator.\n', '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `/` operator. Note: this function uses a\n', '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `%` operator. This function uses a `revert`\n', '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', ' * these events, as it isn&#39;t required by the specification.\n', ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', '     * - the caller must have allowance for `sender`&#39;s tokens of at least\n', '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', '     * from the caller&#39;s allowance.\n', '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: contracts\\CremanonToken.sol\n', '\n', 'contract CremanonToken is ERC20 {\n', '    string public name = ""; // solium-disable-line uppercase\n', '    string public symbol = ""; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public initialSupply = 0;\n', '\n', '    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        initialSupply = _initialSupply * 10**uint256(decimals);\n', '        super._mint(msg.sender, initialSupply);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //ownership\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', ' /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Already owner");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    //crc contract\n', '    address public crc;\n', '\n', '    event CrcTransferred(\n', '    address indexed previousCrc,\n', '    address indexed newCrc\n', '    );\n', '\n', '    function transferCrc(address _newCrc) public onlyOwner {\n', '        require(_newCrc != address(0), "Invalid Address");\n', '        emit CrcTransferred(crc, _newCrc);\n', '        crc = _newCrc;\n', '    }\n', '    \n', '    modifier onlyCrc() {\n', '        require(msg.sender == crc, "Not crc");\n', '        _;\n', '    }\n', '\n', '    //mintable\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '      public onlyCrc\n', '      returns (bool)\n', '    {\n', '        super._mint(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    //burnable\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(address _who, uint256 _value) public onlyCrc returns (bool) {\n', '        require(_value <= super.balanceOf(_who), "Balance is too small.");\n', '\n', '        super._burn(_who, _value);\n', '        emit Burn(_who, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\Cremanon.sol\n', '\n', 'contract Cremanon is ERC20 {\n', '    string public constant name = "Cremanon"; // solium-disable-line uppercase\n', '    string public constant symbol = "CRC"; // solium-disable-line uppercase\n', '    // string public constant name = "Cremanon"; // solium-disable-line uppercase\n', '    // string public constant symbol = "CRC"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public constant initialSupply = 10 * 10000 * 10000 * (10 ** uint256(decimals));\n', '    //CremanonToken private constant _crt = CremanonToken(0xF6E46Bc5cC050476c8ab0A82519f3623b5b7bFc5);\n', '\n', '    address[] public stakeHolders;\n', '\n', '    struct ProposalInfo {\n', '        uint8 mode;\n', '        uint256 amount;\n', '        CremanonToken ct;\n', '        mapping (address => bool) agreement;\n', '    }\n', '    mapping (address => ProposalInfo) public proposals;\n', '    \n', '    event AddStakeHolder(address indexed stakeHolder);\n', '    event RemoveStakeHolder(address indexed stakeHolder);\n', '    \n', '    event MakeProposal(address indexed target, uint8 mode, uint256 amount, address token);\n', '    event AgreeProposal(address indexed target, address stakeHolder);\n', '\n', '    constructor() public {\n', '        super._mint(msg.sender, initialSupply);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyStakeHolder() {\n', '        bool validation = false;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == msg.sender) {\n', '                validation = true;\n', '                break;\n', '            }\n', '        }\n', '        require(validation, "Not stake holder");\n', '        _;\n', '    }\n', '\n', '    function addStakeHolder(address newStakeHolder) public onlyOwner {\n', '        bool flag = false;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == newStakeHolder) flag = true;\n', '        }\n', '        require(!flag, "Already stake holder");\n', '        stakeHolders.push(newStakeHolder);\n', '        emit AddStakeHolder(newStakeHolder);\n', '    }\n', '\n', '    function removeStakeHolder(address oldStakeHolder) public onlyOwner {\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == oldStakeHolder) {\n', '                stakeHolders[i] = stakeHolders[stakeHolders.length - 1];\n', '                stakeHolders.length--;\n', '                emit RemoveStakeHolder(oldStakeHolder);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function makeProposal(address target, uint8 mode, uint256 amount, address token) public onlyOwner {\n', '        proposals[target] = ProposalInfo(mode, amount, CremanonToken(token));\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            proposals[target].agreement[stakeHolders[i]] = false;\n', '        }\n', '        emit MakeProposal(target, mode, amount, token);\n', '    }\n', '\n', '    function agreeProposal(address target) public onlyStakeHolder {\n', '        proposals[target].agreement[msg.sender] = true;\n', '        emit AgreeProposal(target, msg.sender);\n', '        if (_checkAgreement(target)) {\n', '            if (proposals[target].mode == 1) {\n', '                mint(target, proposals[target].amount, proposals[target].ct);\n', '                proposals[target].mode = 3;\n', '            }\n', '            else if (proposals[target].mode == 2) {\n', '                burn(target, proposals[target].amount, proposals[target].ct);\n', '                proposals[target].mode = 4;\n', '            }\n', '        }\n', '    }\n', '\n', '    \n', '    function _checkAgreement(address target) internal view returns (bool) {\n', '        uint num = 0;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (proposals[target].agreement[stakeHolders[i]]) {\n', '              num++;\n', '            }\n', '        }\n', '        if (stakeHolders.length == num) return true;\n', '        else return false;\n', '    }\n', '\n', '    //crt contract\n', '    // address public crt;\n', '\n', '    // event CrtTransferred(\n', '    // address indexed previousCrt,\n', '    // address indexed newCrt\n', '    // );\n', '\n', '    // function transferCrt(address _newCrt) public onlyOwner {\n', '    //     require(_newCrt != address(0), "Invalid Address");\n', '    //     emit CrtTransferred(crt, _newCrt);\n', '    //     crt = _newCrt;\n', '    // }\n', '\n', '    //token wallet contract\n', '    address public tokenWallet;\n', '\n', '    event TokenWalletTransferred(\n', '    address indexed previousTokenWallet,\n', '    address indexed newTokenWallet\n', '    );\n', '\n', '    function transferTokenWallet(address _newTokenWallet) public onlyOwner {\n', '        require(_newTokenWallet != address(0), "Invalid Address");\n', '        emit TokenWalletTransferred(tokenWallet, _newTokenWallet);\n', '        tokenWallet = _newTokenWallet;\n', '    }\n', '\n', '    //ownership\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', ' /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Already owner");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    //pausable\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    \n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Paused by owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Not paused now");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    //freezable\n', '    event Frozen(address target);\n', '    event Unfrozen(address target);\n', '\n', '    mapping(address => bool) internal freezes;\n', '\n', '    modifier whenNotFrozen() {\n', '        require(!freezes[msg.sender], "Sender account is locked.");\n', '        _;\n', '    }\n', '\n', '    function freeze(address _target) public onlyOwner {\n', '        freezes[_target] = true;\n', '        emit Frozen(_target);\n', '    }\n', '\n', '    function unfreeze(address _target) public onlyOwner {\n', '        freezes[_target] = false;\n', '        emit Unfrozen(_target);\n', '    }\n', '\n', '    function isFrozen(address _target) public view returns (bool) {\n', '        return freezes[_target];\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotFrozen\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        releaseLock(msg.sender);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        require(!freezes[_from], "From account is locked.");\n', '        releaseLock(_from);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    //mintable\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount,\n', '        CremanonToken ct\n', '    )\n', '      internal\n', '      returns (bool)\n', '    {\n', '        require(tokenWallet != address(0), "token wallet is not set");\n', '        ct.mint(tokenWallet, _amount*10);\n', '        // crt.call(abi.encodeWithSignature("mint(address,uint256)",_to, _amount*10));\n', '        super._mint(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    //burnable\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(address _who, uint256 _value, CremanonToken ct) internal {\n', '        require(_value <= super.balanceOf(_who), "Balance is too small.");\n', '        require(tokenWallet != address(0), "token wallet is not set");\n', '\n', '        ct.burn(tokenWallet, _value*10);\n', '        _burn(_who, _value);\n', '        emit Burn(_who, _value);\n', '    }\n', '\n', '    //lockable\n', '    struct LockInfo {\n', '        uint256 releaseTime;\n', '        uint256 balance;\n', '    }\n', '    mapping(address => LockInfo[]) internal lockInfo;\n', '\n', '    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n', '    event Unlock(address indexed holder, uint256 value);\n', '\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        uint256 lockedBalance = 0;\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);\n', '        }\n', '        return super.balanceOf(_holder).add(lockedBalance);\n', '    }\n', '\n', '    function releaseLock(address _holder) internal {\n', '\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            if (lockInfo[_holder][i].releaseTime <= now) {\n', '                _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '                emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '                lockInfo[_holder][i].balance = 0;\n', '\n', '                if (i != lockInfo[_holder].length - 1) {\n', '                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '                    i--;\n', '                }\n', '                lockInfo[_holder].length--;\n', '\n', '            }\n', '        }\n', '    }\n', '    function lockCount(address _holder) public view returns (uint256) {\n', '        return lockInfo[_holder].length;\n', '    }\n', '    function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {\n', '        return (lockInfo[_holder][_idx].releaseTime, lockInfo[_holder][_idx].balance);\n', '    }\n', '\n', '    function lock(address _holder, uint256 _amount, uint256 _releaseTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(_releaseTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, _releaseTime);\n', '    }\n', '\n', '    function lockAfter(address _holder, uint256 _amount, uint256 _afterTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(now + _afterTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, now + _afterTime);\n', '    }\n', '\n', '    function unlock(address _holder, uint256 i) public onlyOwner {\n', '        require(i < lockInfo[_holder].length, "No lock information.");\n', '\n', '        _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '        emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '        lockInfo[_holder][i].balance = 0;\n', '\n', '        if (i != lockInfo[_holder].length - 1) {\n', '            lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '        }\n', '        lockInfo[_holder].length--;\n', '    }\n', '\n', '    function transferWithLock(address _to, uint256 _value, uint256 _releaseTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(_releaseTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, _releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferWithLockAfter(address _to, uint256 _value, uint256 _afterTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(now + _afterTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, now + _afterTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function currentTime() public view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function afterTime(uint256 _value) public view returns (uint256) {\n', '        return now + _value;\n', '    }\n', '}']
['pragma solidity 0.5.0;\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: contracts\\CremanonToken.sol\n', '\n', 'contract CremanonToken is ERC20 {\n', '    string public name = ""; // solium-disable-line uppercase\n', '    string public symbol = ""; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public initialSupply = 0;\n', '\n', '    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        initialSupply = _initialSupply * 10**uint256(decimals);\n', '        super._mint(msg.sender, initialSupply);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //ownership\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', ' /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Already owner");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    //crc contract\n', '    address public crc;\n', '\n', '    event CrcTransferred(\n', '    address indexed previousCrc,\n', '    address indexed newCrc\n', '    );\n', '\n', '    function transferCrc(address _newCrc) public onlyOwner {\n', '        require(_newCrc != address(0), "Invalid Address");\n', '        emit CrcTransferred(crc, _newCrc);\n', '        crc = _newCrc;\n', '    }\n', '    \n', '    modifier onlyCrc() {\n', '        require(msg.sender == crc, "Not crc");\n', '        _;\n', '    }\n', '\n', '    //mintable\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '      public onlyCrc\n', '      returns (bool)\n', '    {\n', '        super._mint(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    //burnable\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(address _who, uint256 _value) public onlyCrc returns (bool) {\n', '        require(_value <= super.balanceOf(_who), "Balance is too small.");\n', '\n', '        super._burn(_who, _value);\n', '        emit Burn(_who, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\Cremanon.sol\n', '\n', 'contract Cremanon is ERC20 {\n', '    string public constant name = "Cremanon"; // solium-disable-line uppercase\n', '    string public constant symbol = "CRC"; // solium-disable-line uppercase\n', '    // string public constant name = "Cremanon"; // solium-disable-line uppercase\n', '    // string public constant symbol = "CRC"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public constant initialSupply = 10 * 10000 * 10000 * (10 ** uint256(decimals));\n', '    //CremanonToken private constant _crt = CremanonToken(0xF6E46Bc5cC050476c8ab0A82519f3623b5b7bFc5);\n', '\n', '    address[] public stakeHolders;\n', '\n', '    struct ProposalInfo {\n', '        uint8 mode;\n', '        uint256 amount;\n', '        CremanonToken ct;\n', '        mapping (address => bool) agreement;\n', '    }\n', '    mapping (address => ProposalInfo) public proposals;\n', '    \n', '    event AddStakeHolder(address indexed stakeHolder);\n', '    event RemoveStakeHolder(address indexed stakeHolder);\n', '    \n', '    event MakeProposal(address indexed target, uint8 mode, uint256 amount, address token);\n', '    event AgreeProposal(address indexed target, address stakeHolder);\n', '\n', '    constructor() public {\n', '        super._mint(msg.sender, initialSupply);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyStakeHolder() {\n', '        bool validation = false;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == msg.sender) {\n', '                validation = true;\n', '                break;\n', '            }\n', '        }\n', '        require(validation, "Not stake holder");\n', '        _;\n', '    }\n', '\n', '    function addStakeHolder(address newStakeHolder) public onlyOwner {\n', '        bool flag = false;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == newStakeHolder) flag = true;\n', '        }\n', '        require(!flag, "Already stake holder");\n', '        stakeHolders.push(newStakeHolder);\n', '        emit AddStakeHolder(newStakeHolder);\n', '    }\n', '\n', '    function removeStakeHolder(address oldStakeHolder) public onlyOwner {\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (stakeHolders[i] == oldStakeHolder) {\n', '                stakeHolders[i] = stakeHolders[stakeHolders.length - 1];\n', '                stakeHolders.length--;\n', '                emit RemoveStakeHolder(oldStakeHolder);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function makeProposal(address target, uint8 mode, uint256 amount, address token) public onlyOwner {\n', '        proposals[target] = ProposalInfo(mode, amount, CremanonToken(token));\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            proposals[target].agreement[stakeHolders[i]] = false;\n', '        }\n', '        emit MakeProposal(target, mode, amount, token);\n', '    }\n', '\n', '    function agreeProposal(address target) public onlyStakeHolder {\n', '        proposals[target].agreement[msg.sender] = true;\n', '        emit AgreeProposal(target, msg.sender);\n', '        if (_checkAgreement(target)) {\n', '            if (proposals[target].mode == 1) {\n', '                mint(target, proposals[target].amount, proposals[target].ct);\n', '                proposals[target].mode = 3;\n', '            }\n', '            else if (proposals[target].mode == 2) {\n', '                burn(target, proposals[target].amount, proposals[target].ct);\n', '                proposals[target].mode = 4;\n', '            }\n', '        }\n', '    }\n', '\n', '    \n', '    function _checkAgreement(address target) internal view returns (bool) {\n', '        uint num = 0;\n', '        for (uint i=0; i < stakeHolders.length; i++){\n', '            if (proposals[target].agreement[stakeHolders[i]]) {\n', '              num++;\n', '            }\n', '        }\n', '        if (stakeHolders.length == num) return true;\n', '        else return false;\n', '    }\n', '\n', '    //crt contract\n', '    // address public crt;\n', '\n', '    // event CrtTransferred(\n', '    // address indexed previousCrt,\n', '    // address indexed newCrt\n', '    // );\n', '\n', '    // function transferCrt(address _newCrt) public onlyOwner {\n', '    //     require(_newCrt != address(0), "Invalid Address");\n', '    //     emit CrtTransferred(crt, _newCrt);\n', '    //     crt = _newCrt;\n', '    // }\n', '\n', '    //token wallet contract\n', '    address public tokenWallet;\n', '\n', '    event TokenWalletTransferred(\n', '    address indexed previousTokenWallet,\n', '    address indexed newTokenWallet\n', '    );\n', '\n', '    function transferTokenWallet(address _newTokenWallet) public onlyOwner {\n', '        require(_newTokenWallet != address(0), "Invalid Address");\n', '        emit TokenWalletTransferred(tokenWallet, _newTokenWallet);\n', '        tokenWallet = _newTokenWallet;\n', '    }\n', '\n', '    //ownership\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', ' /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Already owner");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    //pausable\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    \n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Paused by owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Not paused now");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    //freezable\n', '    event Frozen(address target);\n', '    event Unfrozen(address target);\n', '\n', '    mapping(address => bool) internal freezes;\n', '\n', '    modifier whenNotFrozen() {\n', '        require(!freezes[msg.sender], "Sender account is locked.");\n', '        _;\n', '    }\n', '\n', '    function freeze(address _target) public onlyOwner {\n', '        freezes[_target] = true;\n', '        emit Frozen(_target);\n', '    }\n', '\n', '    function unfreeze(address _target) public onlyOwner {\n', '        freezes[_target] = false;\n', '        emit Unfrozen(_target);\n', '    }\n', '\n', '    function isFrozen(address _target) public view returns (bool) {\n', '        return freezes[_target];\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotFrozen\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        releaseLock(msg.sender);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        require(!freezes[_from], "From account is locked.");\n', '        releaseLock(_from);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    //mintable\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount,\n', '        CremanonToken ct\n', '    )\n', '      internal\n', '      returns (bool)\n', '    {\n', '        require(tokenWallet != address(0), "token wallet is not set");\n', '        ct.mint(tokenWallet, _amount*10);\n', '        // crt.call(abi.encodeWithSignature("mint(address,uint256)",_to, _amount*10));\n', '        super._mint(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    //burnable\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(address _who, uint256 _value, CremanonToken ct) internal {\n', '        require(_value <= super.balanceOf(_who), "Balance is too small.");\n', '        require(tokenWallet != address(0), "token wallet is not set");\n', '\n', '        ct.burn(tokenWallet, _value*10);\n', '        _burn(_who, _value);\n', '        emit Burn(_who, _value);\n', '    }\n', '\n', '    //lockable\n', '    struct LockInfo {\n', '        uint256 releaseTime;\n', '        uint256 balance;\n', '    }\n', '    mapping(address => LockInfo[]) internal lockInfo;\n', '\n', '    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n', '    event Unlock(address indexed holder, uint256 value);\n', '\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        uint256 lockedBalance = 0;\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);\n', '        }\n', '        return super.balanceOf(_holder).add(lockedBalance);\n', '    }\n', '\n', '    function releaseLock(address _holder) internal {\n', '\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            if (lockInfo[_holder][i].releaseTime <= now) {\n', '                _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '                emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '                lockInfo[_holder][i].balance = 0;\n', '\n', '                if (i != lockInfo[_holder].length - 1) {\n', '                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '                    i--;\n', '                }\n', '                lockInfo[_holder].length--;\n', '\n', '            }\n', '        }\n', '    }\n', '    function lockCount(address _holder) public view returns (uint256) {\n', '        return lockInfo[_holder].length;\n', '    }\n', '    function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {\n', '        return (lockInfo[_holder][_idx].releaseTime, lockInfo[_holder][_idx].balance);\n', '    }\n', '\n', '    function lock(address _holder, uint256 _amount, uint256 _releaseTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(_releaseTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, _releaseTime);\n', '    }\n', '\n', '    function lockAfter(address _holder, uint256 _amount, uint256 _afterTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(now + _afterTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, now + _afterTime);\n', '    }\n', '\n', '    function unlock(address _holder, uint256 i) public onlyOwner {\n', '        require(i < lockInfo[_holder].length, "No lock information.");\n', '\n', '        _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '        emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '        lockInfo[_holder][i].balance = 0;\n', '\n', '        if (i != lockInfo[_holder].length - 1) {\n', '            lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '        }\n', '        lockInfo[_holder].length--;\n', '    }\n', '\n', '    function transferWithLock(address _to, uint256 _value, uint256 _releaseTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(_releaseTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, _releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferWithLockAfter(address _to, uint256 _value, uint256 _afterTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(now + _afterTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, now + _afterTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function currentTime() public view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function afterTime(uint256 _value) public view returns (uint256) {\n', '        return now + _value;\n', '    }\n', '}']
