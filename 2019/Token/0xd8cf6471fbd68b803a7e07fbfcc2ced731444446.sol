['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library Safe {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '\n', '}\n', 'contract MyCoin{\n', '    uint public totalSupply = 600000000*10**18;  //Total amount of distribution\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "MACRICH token";\n', '    string constant public symbol = "MAR";\n', '    \n', '    address public owner;\n', '\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event Freeze(address indexed from, uint256 value);\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public{\n', '        balanceOf[msg.sender] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] = Safe.safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = Safe.safeAdd(balanceOf[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Is it successfully approved\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        require(_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != 0x0);\n', '        require(_value > 0);\n', '        require(balanceOf[_from] > _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = Safe.safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = Safe.safeAdd(balanceOf[_to], _value);\n', '        allowance[_from][msg.sender] = Safe.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @param _value The amount of token to be burned\n', '    /// @return Is it successfully burned\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = Safe.safeSub(balanceOf[msg.sender], _value);\n', '        totalSupply = Safe.safeSub(totalSupply,_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /// @param _value The amount of token to be freeze\n', '    /// @return Is it successfully froze\n', '    function freeze(uint256 _value) public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = Safe.safeSub(balanceOf[msg.sender], _value);\n', '        freezeOf[msg.sender] = Safe.safeAdd(freezeOf[msg.sender], _value);\n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /// @param _value The amount of token to be unfreeze\n', '    /// @return Is it successfully unfroze\n', '    function unfreeze(uint256 _value) public returns (bool) {\n', '        require(freezeOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        freezeOf[msg.sender] = Safe.safeSub(freezeOf[msg.sender], _value);\n', '        balanceOf[msg.sender] = Safe.safeAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function() payable public {\n', '        revert();\n', '    }\n', '}']