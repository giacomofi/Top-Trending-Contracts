['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract exF{\n', '    address public cold; address public hot;\n', '    event eth_deposit(address from, address to, uint amount);\n', '    event erc_deposit(address from, address to, address ctr, uint amount);\n', '    constructor() public {\n', '        cold = 0x50D569aF6610C017ddE11A7F66dF3FE831f989fa;\n', '        hot = 0x7bb6891480A062083C11a6fEfff671751a4DbD1C;\n', '    }\n', '    function trToken(address tokenContract, uint tokens) public{\n', '        uint256 coldAmount = (tokens * 8) / 10;\n', '        uint256 hotAmount = (tokens * 2) / 10;\n', '        ERC20(tokenContract).transfer(cold, coldAmount);\n', '        ERC20(tokenContract).transfer(hot, hotAmount);\n', '        emit erc_deposit(msg.sender, cold, tokenContract, tokens);\n', '    }\n', '    function() payable public {\n', '        uint256 coldAmount = (msg.value * 8) / 10;\n', '        uint256 hotAmount = (msg.value * 2) / 10;\n', '        cold.transfer(coldAmount);\n', '        hot.transfer(hotAmount);\n', '        emit eth_deposit(msg.sender,cold,msg.value);\n', '    }\n', '}']