['pragma solidity ^0.4.20;\n', '\n', '// This is a contract for GMB AirDrops\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor () internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract GMBAirdrop is Ownable {\n', '\n', '    function multisend(address[] to, uint256[] value) onlyOwner returns (uint256) {\n', '\n', '        address tokenAddr = 0x1B148b90442826375e864B71165A18B4D9256097;\n', '        uint256 i = 0;\n', '        while (i < to.length) {\n', '           ERC20(tokenAddr).transfer(to[i], value[i] * ( 10 ** 18 ));\n', '           i++;\n', '        }\n', '        return(i);\n', '    }\n', '}']