['pragma solidity ^0.5.7;\n', '\n', '/**\n', ' * @dev Implements a contract to add password-protection support to API calls of child contracts.\n', ' * This is secure through storage of only the keccak256 hash of the password, which is irreversible.\n', ' * Critically, all sensitive methods have private visibility.\n', ' *\n', ' * As implemented, the password has contract-wide scope. This does not implement per-account passwords,\n', ' * though that would not be difficult to do.\n', ' */\n', 'contract PasswordProtected {\n', '    bytes32 private passwordHash;\n', '\n', '    /**\n', '     * A default contract password must be set at construction time.\n', '     */\n', '    constructor (string memory password) internal {\n', '        _setNewPassword(password);\n', '    }\n', '\n', '    function _setNewPassword(string memory password) private {\n', '        passwordHash = keccak256(bytes(password));\n', '    }\n', '\n', '    function _isValidPassword(string memory password) internal view returns (bool ok) {\n', '        return (bytes32(keccak256(bytes(password))) == passwordHash);\n', '    }\n', '\n', '    /**\n', '     * Any contract functions requiring password-restricted access can use this modifier.\n', '     */\n', '    modifier onlyValidPassword(string memory password) {\n', '        require(_isValidPassword(password), "access denied");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Allow password to be changed.\n', '     */\n', '    function _changePassword(string memory oldPassword, string memory newPassword) onlyValidPassword(oldPassword) internal returns (bool ok) {\n', '        _setNewPassword(newPassword);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', 'contract Identity {\n', '    mapping(address => string) private _names;\n', '\n', '    /**\n', '     * Handy function to associate a short name with the account.\n', '     */\n', '    function iAm(string memory shortName) public {\n', '        _names[msg.sender] = shortName;\n', '    }\n', '\n', '    /**\n', '     * Handy function to confirm address of the current account.\n', '     */\n', '    function whereAmI() public view returns (address yourAddress) {\n', '        address myself = msg.sender;\n', '        return myself;\n', '    }\n', '\n', '    /**\n', '     * Handy function to confirm short name of the current account.\n', '     */\n', '    function whoAmI() public view returns (string memory yourName) {\n', '        return (_names[msg.sender]);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses.\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n', '     * @param from address The account whose tokens will be burned.\n', '     * @param value uint256 The amount of token to be burned.\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev This role allows the contract to be paused, so that in case something goes horribly wrong\n', ' * during an ICO, the owner/administrator has an ability to suspend all transactions while things\n', ' * are sorted out.\n', ' *\n', ' * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\n', ' * This is necessary to support enterprise software, which requires a permissions model in which\n', ' * roles can be owner-administered, in contrast to a blockchain community approach in which\n', ' * permissions can be self-administered. Therefore, this implementation replaces the self-service\n', ' * "renounce" approach with one where only the owner is allowed to makes role changes.\n', ' *\n', ' * Owner is not allowed to renounce ownership, lest the contract go without administration. But\n', ' * it is ok for owner to shed initially granted roles by removing role from self.\n', ' */\n', 'contract PauserRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "onlyPauser");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '\n', '    function _addPauser(address account) private {\n', '        require(account != address(0));\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) private {\n', '        require(account != address(0));\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\n', '     * pauser administration becoming impossible. We override this to always disallow it.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        require(false, "forbidden");\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _removePauser(msg.sender);\n', '        super.transferOwnership(newOwner);\n', '        _addPauser(newOwner);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return True if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'contract VerifiedAccount is ERC20, Ownable {\n', '\n', '    mapping(address => bool) private _isRegistered;\n', '\n', '    constructor () internal {\n', '        // The smart contract starts off registering itself, since address is known.\n', '        registerAccount();\n', '    }\n', '\n', '    event AccountRegistered(address indexed account);\n', '\n', '    /**\n', '     * This registers the calling wallet address as a known address. Operations that transfer responsibility\n', '     * may require the target account to be a registered account, to protect the system from getting into a\n', '     * state where administration or a large amount of funds can become forever inaccessible.\n', '     */\n', '    function registerAccount() public returns (bool ok) {\n', '        _isRegistered[msg.sender] = true;\n', '        emit AccountRegistered(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function isRegistered(address account) public view returns (bool ok) {\n', '        return _isRegistered[account];\n', '    }\n', '\n', '    function _accountExists(address account) internal view returns (bool exists) {\n', '        return account == msg.sender || _isRegistered[account];\n', '    }\n', '\n', '    modifier onlySafeAccount(address account) {\n', '        require(_accountExists(account), "account not registered");\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Safe ERC20 methods\n', '    // =========================================================================\n', '\n', '    function safeTransfer(address to, uint256 value) public onlySafeAccount(to) returns (bool ok) {\n', '        transfer(to, value);\n', '        return true;\n', '    }\n', '\n', '    function safeApprove(address spender, uint256 value) public onlySafeAccount(spender) returns (bool ok) {\n', '        approve(spender, value);\n', '        return true;\n', '    }\n', '\n', '    function safeTransferFrom(address from, address to, uint256 value) public onlySafeAccount(to) returns (bool ok) {\n', '        transferFrom(from, to, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Safe ownership transfer\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlySafeAccount(newOwner) onlyOwner {\n', '        super.transferOwnership(newOwner);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev GrantorRole trait\n', ' *\n', ' * This adds support for a role that allows creation of vesting token grants, allocated from the\n', " * role holder's wallet.\n", ' *\n', ' * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\n', ' * This is necessary to support enterprise software, which requires a permissions model in which\n', ' * roles can be owner-administered, in contrast to a blockchain community approach in which\n', ' * permissions can be self-administered. Therefore, this implementation replaces the self-service\n', ' * "renounce" approach with one where only the owner is allowed to makes role changes.\n', ' *\n', ' * Owner is not allowed to renounce ownership, lest the contract go without administration. But\n', ' * it is ok for owner to shed initially granted roles by removing role from self.\n', ' */\n', 'contract GrantorRole is Ownable {\n', '    bool private constant OWNER_UNIFORM_GRANTOR_FLAG = false;\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    event GrantorAdded(address indexed account);\n', '    event GrantorRemoved(address indexed account);\n', '\n', '    Roles.Role private _grantors;\n', '    mapping(address => bool) private _isUniformGrantor;\n', '\n', '    constructor () internal {\n', '        _addGrantor(msg.sender, OWNER_UNIFORM_GRANTOR_FLAG);\n', '    }\n', '\n', '    modifier onlyGrantor() {\n', '        require(isGrantor(msg.sender), "onlyGrantor");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGrantorOrSelf(address account) {\n', '        require(isGrantor(msg.sender) || msg.sender == account, "onlyGrantorOrSelf");\n', '        _;\n', '    }\n', '\n', '    function isGrantor(address account) public view returns (bool) {\n', '        return _grantors.has(account);\n', '    }\n', '\n', '    function addGrantor(address account, bool isUniformGrantor) public onlyOwner {\n', '        _addGrantor(account, isUniformGrantor);\n', '    }\n', '\n', '    function removeGrantor(address account) public onlyOwner {\n', '        _removeGrantor(account);\n', '    }\n', '\n', '    function _addGrantor(address account, bool isUniformGrantor) private {\n', '        require(account != address(0));\n', '        _grantors.add(account);\n', '        _isUniformGrantor[account] = isUniformGrantor;\n', '        emit GrantorAdded(account);\n', '    }\n', '\n', '    function _removeGrantor(address account) private {\n', '        require(account != address(0));\n', '        _grantors.remove(account);\n', '        emit GrantorRemoved(account);\n', '    }\n', '\n', '    function isUniformGrantor(address account) public view returns (bool) {\n', '        return isGrantor(account) && _isUniformGrantor[account];\n', '    }\n', '\n', '    modifier onlyUniformGrantor() {\n', '        require(isUniformGrantor(msg.sender), "Only uniform grantor role can do this.");\n', '        // Only grantor role can do this.\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\n', '     * token grant administration becoming impossible. We override this to always disallow it.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        require(false, "forbidden");\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _removeGrantor(msg.sender);\n', '        super.transferOwnership(newOwner);\n', '        _addGrantor(newOwner, OWNER_UNIFORM_GRANTOR_FLAG);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'interface IERC20Vestable {\n', '    function getIntrinsicVestingSchedule(address grantHolder)\n', '    external\n', '    view\n', '    returns (\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays\n', '    );\n', '\n', '    function grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    ) external returns (bool ok);\n', '\n', '    function today() external view returns (uint32 dayNumber);\n', '\n', '    function vestingForAccountAsOf(\n', '        address grantHolder,\n', '        uint32 onDayOrToday\n', '    )\n', '    external\n', '    view\n', '    returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    );\n', '\n', '    function vestingAsOf(uint32 onDayOrToday) external view returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    );\n', '\n', '    function revokeGrant(address grantHolder, uint32 onDay) external returns (bool);\n', '\n', '\n', '    event VestingScheduleCreated(\n', '        address indexed vestingLocation,\n', '        uint32 cliffDuration, uint32 indexed duration, uint32 interval,\n', '        bool indexed isRevocable);\n', '\n', '    event VestingTokensGranted(\n', '        address indexed beneficiary,\n', '        uint256 indexed vestingAmount,\n', '        uint32 startDay,\n', '        address vestingLocation,\n', '        address indexed grantor);\n', '\n', '    event GrantRevoked(address indexed grantHolder, uint32 indexed onDay);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @title Contract for grantable ERC20 token vesting schedules\n', ' *\n', ' * @notice Adds to an ERC20 support for grantor wallets, which are able to grant vesting tokens to\n', ' *   beneficiary wallets, following per-wallet custom vesting schedules.\n', ' *\n', ' * @dev Contract which gives subclass contracts the ability to act as a pool of funds for allocating\n', ' *   tokens to any number of other addresses. Token grants support the ability to vest over time in\n', ' *   accordance a predefined vesting schedule. A given wallet can receive no more than one token grant.\n', ' *\n', ' *   Tokens are transferred from the pool to the recipient at the time of grant, but the recipient\n', ' *   will only able to transfer tokens out of their wallet after they have vested. Transfers of non-\n', ' *   vested tokens are prevented.\n', ' *\n', ' *   Two types of toke grants are supported:\n', ' *   - Irrevocable grants, intended for use in cases when vesting tokens have been issued in exchange\n', ' *     for value, such as with tokens that have been purchased in an ICO.\n', ' *   - Revocable grants, intended for use in cases when vesting tokens have been gifted to the holder,\n', ' *     such as with employee grants that are given as compensation.\n', ' */\n', 'contract ERC20Vestable is ERC20, VerifiedAccount, GrantorRole, IERC20Vestable {\n', '    using SafeMath for uint256;\n', '\n', '    // Date-related constants for sanity-checking dates to reject obvious erroneous inputs\n', '    // and conversions from seconds to days and years that are more or less leap year-aware.\n', '    uint32 private constant THOUSAND_YEARS_DAYS = 365243;                   /* See https://www.timeanddate.com/date/durationresult.html?m1=1&d1=1&y1=2000&m2=1&d2=1&y2=3000 */\n', "    uint32 private constant TEN_YEARS_DAYS = THOUSAND_YEARS_DAYS / 100;     /* Includes leap years (though it doesn't really matter) */\n", '    uint32 private constant SECONDS_PER_DAY = 24 * 60 * 60;                 /* 86400 seconds in a day */\n', '    uint32 private constant JAN_1_2000_SECONDS = 946684800;                 /* Saturday, January 1, 2000 0:00:00 (GMT) (see https://www.epochconverter.com/) */\n', '    uint32 private constant JAN_1_2000_DAYS = JAN_1_2000_SECONDS / SECONDS_PER_DAY;\n', '    uint32 private constant JAN_1_3000_DAYS = JAN_1_2000_DAYS + THOUSAND_YEARS_DAYS;\n', '\n', '    struct vestingSchedule {\n', '        bool isValid;               /* true if an entry exists and is valid */\n', '        bool isRevocable;           /* true if the vesting option is revocable (a gift), false if irrevocable (purchased) */\n', '        uint32 cliffDuration;       /* Duration of the cliff, with respect to the grant start day, in days. */\n', '        uint32 duration;            /* Duration of the vesting schedule, with respect to the grant start day, in days. */\n', '        uint32 interval;            /* Duration in days of the vesting interval. */\n', '    }\n', '\n', '    struct tokenGrant {\n', '        bool isActive;              /* true if this vesting entry is active and in-effect entry. */\n', '        bool wasRevoked;            /* true if this vesting schedule was revoked. */\n', '        uint32 startDay;            /* Start day of the grant, in days since the UNIX epoch (start of day). */\n', '        uint256 amount;             /* Total number of tokens that vest. */\n', '        address vestingLocation;    /* Address of wallet that is holding the vesting schedule. */\n', '        address grantor;            /* Grantor that made the grant */\n', '    }\n', '\n', '    mapping(address => vestingSchedule) private _vestingSchedules;\n', '    mapping(address => tokenGrant) private _tokenGrants;\n', '\n', '\n', '    // =========================================================================\n', '    // === Methods for administratively creating a vesting schedule for an account.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev This one-time operation permanently establishes a vesting schedule in the given account.\n', '     *\n', "     * For standard grants, this establishes the vesting schedule in the beneficiary's account.\n", "     * For uniform grants, this establishes the vesting schedule in the linked grantor's account.\n", '     *\n', '     * @param vestingLocation = Account into which to store the vesting schedule. Can be the account\n', '     *   of the beneficiary (for one-off grants) or the account of the grantor (for uniform grants\n', '     *   made from grant pools).\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function _setVestingSchedule(\n', '        address vestingLocation,\n', '        uint32 cliffDuration, uint32 duration, uint32 interval,\n', '        bool isRevocable) internal returns (bool ok) {\n', '\n', '        // Check for a valid vesting schedule given (disallow absurd values to reject likely bad input).\n', '        require(\n', '            duration > 0 && duration <= TEN_YEARS_DAYS\n', '            && cliffDuration < duration\n', '            && interval >= 1,\n', '            "invalid vesting schedule"\n', '        );\n', '\n', '        // Make sure the duration values are in harmony with interval (both should be an exact multiple of interval).\n', '        require(\n', '            duration % interval == 0 && cliffDuration % interval == 0,\n', '            "invalid cliff/duration for interval"\n', '        );\n', '\n', '        // Create and populate a vesting schedule.\n', '        _vestingSchedules[vestingLocation] = vestingSchedule(\n', '            true/*isValid*/,\n', '            isRevocable,\n', '            cliffDuration, duration, interval\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit VestingScheduleCreated(\n', '            vestingLocation,\n', '            cliffDuration, duration, interval,\n', '            isRevocable);\n', '        return true;\n', '    }\n', '\n', '    function _hasVestingSchedule(address account) internal view returns (bool ok) {\n', '        return _vestingSchedules[account].isValid;\n', '    }\n', '\n', '    /**\n', '     * @dev returns all information about the vesting schedule directly associated with the given\n', '     * account. This can be used to double check that a uniform grantor has been set up with a\n', '     * correct vesting schedule. Also, recipients of standard (non-uniform) grants can use this.\n', '     * This method is only callable by the account holder or a grantor, so this is mainly intended\n', '     * for administrative use.\n', '     *\n', '     * Holders of uniform grants must use vestingAsOf() to view their vesting schedule, as it is\n', '     * stored in the grantor account.\n', '     *\n', '     * @param grantHolder = The address to do this for.\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   vestDuration = grant duration in days.\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     */\n', '    function getIntrinsicVestingSchedule(address grantHolder)\n', '    public\n', '    view\n', '    onlyGrantorOrSelf(grantHolder)\n', '    returns (\n', '        uint32 vestDuration,\n', '        uint32 cliffDuration,\n', '        uint32 vestIntervalDays\n', '    )\n', '    {\n', '        return (\n', '        _vestingSchedules[grantHolder].duration,\n', '        _vestingSchedules[grantHolder].cliffDuration,\n', '        _vestingSchedules[grantHolder].interval\n', '        );\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Token grants (general-purpose)\n', '    // === Methods to be used for administratively creating one-off token grants with vesting schedules.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an account, referencing a vesting schedule which may be\n', '     * stored in the same account (individual/one-off) or in a different account (shared/uniform).\n', '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     * @param vestingLocation = Account where the vesting schedule is held (must already exist).\n', '     * @param grantor = Account which performed the grant. Also the account from where the granted\n', '     *   funds will be withdrawn.\n', '     */\n', '    function _grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        address vestingLocation,\n', '        address grantor\n', '    )\n', '    internal returns (bool ok)\n', '    {\n', '        // Make sure no prior grant is in effect.\n', '        require(!_tokenGrants[beneficiary].isActive, "grant already exists");\n', '\n', '        // Check for valid vestingAmount\n', '        require(\n', '            vestingAmount <= totalAmount && vestingAmount > 0\n', '            && startDay >= JAN_1_2000_DAYS && startDay < JAN_1_3000_DAYS,\n', '            "invalid vesting params");\n', '\n', '        // Make sure the vesting schedule we are about to use is valid.\n', '        require(_hasVestingSchedule(vestingLocation), "no such vesting schedule");\n', '\n', "        // Transfer the total number of tokens from grantor into the account's holdings.\n", '        _transfer(grantor, beneficiary, totalAmount);\n', '        /* Emits a Transfer event. */\n', '\n', '        // Create and populate a token grant, referencing vesting schedule.\n', '        _tokenGrants[beneficiary] = tokenGrant(\n', '            true/*isActive*/,\n', '            false/*wasRevoked*/,\n', '            startDay,\n', '            vestingAmount,\n', '            vestingLocation, /* The wallet address where the vesting schedule is kept. */\n', '            grantor             /* The account that performed the grant (where revoked funds would be sent) */\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit VestingTokensGranted(beneficiary, vestingAmount, startDay, vestingLocation, grantor);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an address, including a portion that will vest over time\n', '     * according to a set vesting schedule. The overall duration and cliff duration of the grant must\n', '     * be an even multiple of the vesting interval.\n', '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    ) public onlyGrantor returns (bool ok) {\n', '        // Make sure no prior vesting schedule has been set.\n', '        require(!_tokenGrants[beneficiary].isActive, "grant already exists");\n', '\n', '        // The vesting schedule is unique to this wallet and so will be stored here,\n', '        _setVestingSchedule(beneficiary, cliffDuration, duration, interval, isRevocable);\n', '\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, beneficiary, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\n', '     */\n', '    function safeGrantVestingTokens(\n', '        address beneficiary, uint256 totalAmount, uint256 vestingAmount,\n', '        uint32 startDay, uint32 duration, uint32 cliffDuration, uint32 interval,\n', '        bool isRevocable) public onlyGrantor onlySafeAccount(beneficiary) returns (bool ok) {\n', '\n', '        return grantVestingTokens(\n', '            beneficiary, totalAmount, vestingAmount,\n', '            startDay, duration, cliffDuration, interval,\n', '            isRevocable);\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Check vesting.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev returns the day number of the current day, in days since the UNIX epoch.\n', '     */\n', '    function today() public view returns (uint32 dayNumber) {\n', '        return uint32(block.timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function _effectiveDay(uint32 onDayOrToday) internal view returns (uint32 dayNumber) {\n', '        return onDayOrToday == 0 ? today() : onDayOrToday;\n', '    }\n', '\n', '    /**\n', '     * @dev Determines the amount of tokens that have not vested in the given account.\n', '     *\n', '     * The math is: not vested amount = vesting amount * (end date - on date)/(end date - start date)\n', '     *\n', '     * @param grantHolder = The account to check.\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     */\n', '    function _getNotVestedAmount(address grantHolder, uint32 onDayOrToday) internal view returns (uint256 amountNotVested) {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint32 onDay = _effectiveDay(onDayOrToday);\n', '\n', "        // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\n", '        if (!grant.isActive || onDay < grant.startDay + vesting.cliffDuration)\n', '        {\n', '            // None are vested (all are not vested)\n', '            return grant.amount;\n', '        }\n', '        // If after end of vesting, then the not vested amount is zero (all are vested).\n', '        else if (onDay >= grant.startDay + vesting.duration)\n', '        {\n', '            // All are vested (none are not vested)\n', '            return uint256(0);\n', '        }\n', '        // Otherwise a fractional amount is vested.\n', '        else\n', '        {\n', '            // Compute the exact number of days vested.\n', '            uint32 daysVested = onDay - grant.startDay;\n', '            // Adjust result rounding down to take into consideration the interval.\n', '            uint32 effectiveDaysVested = (daysVested / vesting.interval) * vesting.interval;\n', '\n', '            // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\n', '            // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\n', '            // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\n', '            // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\n', '            // amounts many orders of magnitude greater than mere billions.\n', '            uint256 vested = grant.amount.mul(effectiveDaysVested).div(vesting.duration);\n', '            return grant.amount.sub(vested);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the amount of funds in the given account which are available for use as of\n', "     * the given day. If there's no vesting schedule then 0 tokens are considered to be vested and\n", '     * this just returns the full account balance.\n', '     *\n', '     * The math is: available amount = total funds - notVestedAmount.\n', '     *\n', '     * @param grantHolder = The account to check.\n', '     * @param onDay = The day to check for, in days since the UNIX epoch.\n', '     */\n', '    function _getAvailableAmount(address grantHolder, uint32 onDay) internal view returns (uint256 amountAvailable) {\n', '        uint256 totalTokens = balanceOf(grantHolder);\n', '        uint256 vested = totalTokens.sub(_getNotVestedAmount(grantHolder, onDay));\n', '        return vested;\n', '    }\n', '\n', '    /**\n', "     * @dev returns all information about the grant's vesting as of the given day\n", '     * for the given account. Only callable by the account holder or a grantor, so\n', '     * this is mainly intended for administrative use.\n', '     *\n', '     * @param grantHolder = The address to do this for.\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   amountVested = the amount out of vestingAmount that is vested\n', '     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\n', '     *   amountOfGrant = the amount of tokens subject to vesting.\n', '     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\n', '     *   vestDuration = grant duration in days.\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     *   isActive = true if the vesting schedule is currently active.\n', '     *   wasRevoked = true if the vesting schedule was revoked.\n', '     */\n', '    function vestingForAccountAsOf(\n', '        address grantHolder,\n', '        uint32 onDayOrToday\n', '    )\n', '    public\n', '    view\n', '    onlyGrantorOrSelf(grantHolder)\n', '    returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 vestDuration,\n', '        uint32 cliffDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    )\n', '    {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint256 notVestedAmount = _getNotVestedAmount(grantHolder, onDayOrToday);\n', '        uint256 grantAmount = grant.amount;\n', '\n', '        return (\n', '        grantAmount.sub(notVestedAmount),\n', '        notVestedAmount,\n', '        grantAmount,\n', '        grant.startDay,\n', '        vesting.duration,\n', '        vesting.cliffDuration,\n', '        vesting.interval,\n', '        grant.isActive,\n', '        grant.wasRevoked\n', '        );\n', '    }\n', '\n', '    /**\n', "     * @dev returns all information about the grant's vesting as of the given day\n", '     * for the current account, to be called by the account holder.\n', '     *\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   amountVested = the amount out of vestingAmount that is vested\n', '     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\n', '     *   amountOfGrant = the amount of tokens subject to vesting.\n', '     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestDuration = grant duration in days.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     *   isActive = true if the vesting schedule is currently active.\n', '     *   wasRevoked = true if the vesting schedule was revoked.\n', '     */\n', '    function vestingAsOf(uint32 onDayOrToday) public view returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    )\n', '    {\n', '        return vestingForAccountAsOf(msg.sender, onDayOrToday);\n', '    }\n', '\n', '    /**\n', '     * @dev returns true if the account has sufficient funds available to cover the given amount,\n', '     *   including consideration for vesting tokens.\n', '     *\n', '     * @param account = The account to check.\n', '     * @param amount = The required amount of vested funds.\n', '     * @param onDay = The day to check for, in days since the UNIX epoch.\n', '     */\n', '    function _fundsAreAvailableOn(address account, uint256 amount, uint32 onDay) internal view returns (bool ok) {\n', '        return (amount <= _getAvailableAmount(account, onDay));\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the amount is sufficiently vested right now.\n', '     *\n', '     * @param account = The account to check.\n', '     * @param amount = The required amount of vested funds.\n', '     */\n', '    modifier onlyIfFundsAvailableNow(address account, uint256 amount) {\n', '        // Distinguish insufficient overall balance from insufficient vested funds balance in failure msg.\n', '        require(_fundsAreAvailableOn(account, amount, today()),\n', '            balanceOf(account) < amount ? "insufficient funds" : "insufficient vested funds");\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Grant revocation\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev If the account has a revocable grant, this forces the grant to end based on computing\n', '     * the amount vested up to the given date. All tokens that would no longer vest are returned\n', '     * to the account of the original grantor.\n', '     *\n', '     * @param grantHolder = Address to which tokens will be granted.\n', '     * @param onDay = The date upon which the vesting schedule will be effectively terminated,\n', '     *   in days since the UNIX epoch (start of day).\n', '     */\n', '    function revokeGrant(address grantHolder, uint32 onDay) public onlyGrantor returns (bool ok) {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint256 notVestedAmount;\n', '\n', '        // Make sure grantor can only revoke from own pool.\n', '        require(msg.sender == owner() || msg.sender == grant.grantor, "not allowed");\n', '        // Make sure a vesting schedule has previously been set.\n', '        require(grant.isActive, "no active vesting schedule");\n', "        // Make sure it's revocable.\n", '        require(vesting.isRevocable, "irrevocable");\n', '        // Fail on likely erroneous input.\n', '        require(onDay <= grant.startDay + vesting.duration, "no effect");\n', '        // Don"t let grantor revoke anf portion of vested amount.\n', '        require(onDay >= today(), "cannot revoke vested holdings");\n', '\n', '        notVestedAmount = _getNotVestedAmount(grantHolder, onDay);\n', '\n', '        // Use ERC20 _approve() to forcibly approve grantor to take back not-vested tokens from grantHolder.\n', '        _approve(grantHolder, grant.grantor, notVestedAmount);\n', '        /* Emits an Approval Event. */\n', '        transferFrom(grantHolder, grant.grantor, notVestedAmount);\n', '        /* Emits a Transfer and an Approval Event. */\n', '\n', '        // Kill the grant by updating wasRevoked and isActive.\n', '        _tokenGrants[grantHolder].wasRevoked = true;\n', '        _tokenGrants[grantHolder].isActive = false;\n', '\n', '        emit GrantRevoked(grantHolder, onDay);\n', '        /* Emits the GrantRevoked event. */\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Methods transfer() and approve() require an additional available funds check to\n', '     * prevent spending held but non-vested tokens. Note that transferFrom() does NOT have this\n', '     * additional check because approved funds come from an already set-aside allowance, not from the wallet.\n', '     */\n', '    function transfer(address to, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Additional available funds check to prevent spending held but non-vested tokens.\n', '     */\n', '    function approve(address spender, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\n', '        return super.approve(spender, value);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @title Contract for uniform granting of vesting tokens\n', ' *\n', ' * @notice Adds methods for programmatic creation of uniform or standard token vesting grants.\n', ' *\n', ' * @dev This is primarily for use by exchanges and scripted internal employee incentive grant creation.\n', ' */\n', 'contract UniformTokenGrantor is ERC20Vestable {\n', '\n', '    struct restrictions {\n', '        bool isValid;\n', '        uint32 minStartDay;        /* The smallest value for startDay allowed in grant creation. */\n', '        uint32 maxStartDay;        /* The maximum value for startDay allowed in grant creation. */\n', '        uint32 expirationDay;       /* The last day this grantor may make grants. */\n', '    }\n', '\n', '    mapping(address => restrictions) private _restrictions;\n', '\n', '\n', '    // =========================================================================\n', '    // === Uniform token grant setup\n', '    // === Methods used by owner to set up uniform grants on restricted grantor\n', '    // =========================================================================\n', '\n', '    event GrantorRestrictionsSet(\n', '        address indexed grantor,\n', '        uint32 minStartDay,\n', '        uint32 maxStartDay,\n', '        uint32 expirationDay);\n', '\n', '    /**\n', '     * @dev Lets owner set or change existing specific restrictions. Restrictions must be established\n', '     * before the grantor will be allowed to issue grants.\n', '     *\n', '     * All date values are expressed as number of days since the UNIX epoch. Note that the inputs are\n', '     * themselves not very thoroughly restricted. However, this method can be called more than once\n', "     * if incorrect values need to be changed, or to extend a grantor's expiration date.\n", '     *\n', '     * @param grantor = Address which will receive the uniform grantable vesting schedule.\n', '     * @param minStartDay = The smallest value for startDay allowed in grant creation.\n', '     * @param maxStartDay = The maximum value for startDay allowed in grant creation.\n', '     * @param expirationDay = The last day this grantor may make grants.\n', '     */\n', '    function setRestrictions(\n', '        address grantor,\n', '        uint32 minStartDay,\n', '        uint32 maxStartDay,\n', '        uint32 expirationDay\n', '    )\n', '    public\n', '    onlyOwner\n', '    onlySafeAccount(grantor)\n', '    returns (bool ok)\n', '    {\n', '        require(\n', '            isUniformGrantor(grantor)\n', '         && maxStartDay > minStartDay\n', '         && expirationDay > today(), "invalid params");\n', '\n', '        // We allow owner to set or change existing specific restrictions.\n', '        _restrictions[grantor] = restrictions(\n', '            true/*isValid*/,\n', '            minStartDay,\n', '            maxStartDay,\n', '            expirationDay\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit GrantorRestrictionsSet(grantor, minStartDay, maxStartDay, expirationDay);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets owner permanently establish a vesting schedule for a restricted grantor to use when\n', "     * creating uniform token grants. Grantee accounts forever refer to the grantor's account to look up\n", '     * vesting, so this method can only be used once per grantor.\n', '     *\n', '     * @param grantor = Address which will receive the uniform grantable vesting schedule.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function setGrantorVestingSchedule(\n', '        address grantor,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    )\n', '    public\n', '    onlyOwner\n', '    onlySafeAccount(grantor)\n', '    returns (bool ok)\n', '    {\n', '        // Only allow doing this to restricted grantor role account.\n', '        require(isUniformGrantor(grantor), "uniform grantor only");\n', '        // Make sure no prior vesting schedule has been set!\n', '        require(!_hasVestingSchedule(grantor), "schedule already exists");\n', '\n', '        // The vesting schedule is unique to this grantor wallet and so will be stored here to be\n', '        // referenced by future grants. Emits VestingScheduleCreated event.\n', '        _setVestingSchedule(grantor, cliffDuration, duration, interval, isRevocable);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Uniform token grants\n', '    // === Methods to be used by exchanges to use for creating tokens.\n', '    // =========================================================================\n', '\n', '    function isUniformGrantorWithSchedule(address account) internal view returns (bool ok) {\n', '        // Check for grantor that has a uniform vesting schedule already set.\n', '        return isUniformGrantor(account) && _hasVestingSchedule(account);\n', '    }\n', '\n', '    modifier onlyUniformGrantorWithSchedule(address account) {\n', '        require(isUniformGrantorWithSchedule(account), "grantor account not ready");\n', '        _;\n', '    }\n', '\n', '    modifier whenGrantorRestrictionsMet(uint32 startDay) {\n', '        restrictions storage restriction = _restrictions[msg.sender];\n', '        require(restriction.isValid, "set restrictions first");\n', '\n', '        require(\n', '            startDay >= restriction.minStartDay\n', '            && startDay < restriction.maxStartDay, "startDay too early");\n', '\n', '        require(today() < restriction.expirationDay, "grantor expired");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an address, including a portion that will vest over time\n', "     * according to the uniform vesting schedule already established in the grantor's account.\n", '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     */\n', '    function grantUniformVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay\n', '    )\n', '    public\n', '    onlyUniformGrantorWithSchedule(msg.sender)\n', '    whenGrantorRestrictionsMet(startDay)\n', '    returns (bool ok)\n', '    {\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        // Emits VestingTokensGranted event.\n', '        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\n', '     */\n', '    function safeGrantUniformVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay\n', '    )\n', '    public\n', '    onlyUniformGrantorWithSchedule(msg.sender)\n', '    whenGrantorRestrictionsMet(startDay)\n', '    onlySafeAccount(beneficiary)\n', '    returns (bool ok)\n', '    {\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        // Emits VestingTokensGranted event.\n', '        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev An ERC20 implementation of the Dyncoin Proxy Token. All tokens are initially pre-assigned to\n', ' * the creator, and can later be distributed freely using transfer transferFrom and other ERC20\n', ' * functions.\n', ' */\n', 'contract ProxyToken is PasswordProtected, Identity, ERC20, ERC20Pausable, ERC20Burnable, ERC20Detailed, UniformTokenGrantor {\n', '    uint32 public constant VERSION = 5;\n', '\n', '    uint8 private constant DECIMALS = 18;\n', '    uint256 private constant TOKEN_WEI = 10 ** uint256(DECIMALS);\n', '\n', '    uint256 private constant INITIAL_WHOLE_TOKENS = uint256(5 * (10 ** 9));\n', '    uint256 private constant INITIAL_SUPPLY = uint256(INITIAL_WHOLE_TOKENS) * uint256(TOKEN_WEI);\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    constructor (string memory defaultPassword) ERC20Detailed("MediaRich.io Dyncoin proxy token", "DYNP", DECIMALS) PasswordProtected(defaultPassword) public {\n', '        // This is the only place where we ever mint tokens.\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    event DepositReceived(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * fallback function: collect any ether sent to us (whether we asked for it or not).\n', '     */\n', '    function() payable external {\n', '        // Track where unexpected ETH came from so we can follow up later.\n', '        emit DepositReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', "     * @dev Allow only the owner to burn tokens from the owner's wallet, also decreasing the total\n", '     * supply. There is no reason for a token holder to EVER call this method directly. It will be\n', '     * used by the future Dyncoin contract to implement the ProxyToken side of of token redemption.\n', '     */\n', '    function burn(uint256 value) onlyIfFundsAvailableNow(msg.sender, value) public {\n', '        // This is the only place where we ever burn tokens.\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * Allow owner to change password.\n', '     */\n', '    function changePassword(string memory oldPassword, string memory newPassword) onlyOwner public returns (bool ok) {\n', '        _changePassword(oldPassword, newPassword);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\n', '     * in place to ensure this could not happen by accident very easily. ETH is returned to owner wallet.\n', '     */\n', '    function kill(string memory password) whenPaused onlyPauser onlyValidPassword(password) public returns (bool itsDeadJim) {\n', '        require(isPauser(msg.sender), "onlyPauser");\n', '        address payable payableOwner = address(uint160(owner()));\n', '        selfdestruct(payableOwner);\n', '        return true;\n', '    }\n', '}']