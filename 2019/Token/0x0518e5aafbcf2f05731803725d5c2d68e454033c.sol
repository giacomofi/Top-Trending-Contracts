['pragma solidity ^0.4.25;\n', '\n', 'contract XIO {\n', '    uint private k = 1000000000000000000;\n', '    \n', "    string public name = 'XIO';\n", "    string public symbol = 'XIO';\n", '    uint8 public decimals = 18;\n', '    uint public totalSupply = 1000000000 * k;\n', '    uint public createdAt = block.number;\n', '    uint public lastMiningAt;\n', '    uint public unconfirmedTxs;\n', '\n', '    address private lastSender;\n', '    address private lastOrigin;\n', '    \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public successesOf;\n', '    mapping (address => uint256) public failsOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event Mine(address indexed from, uint256 value, uint256 number, uint256 rollUnder);\n', '    event Dice(address indexed from, uint256 bet, uint256 prize, uint256 number, uint256 rollUnder);\n', '    \n', '    uint private seed;\n', ' \n', '    modifier notContract() {\n', '        lastSender = msg.sender;\n', '        lastOrigin = tx.origin;\n', '        require(lastSender == lastOrigin);\n', '        _;\n', '    }\n', '    \n', '    // uint256 to bytes32\n', '    function toBytes(uint256 x) internal pure returns (bytes b) {\n', '        b = new bytes(32);\n', '        assembly {\n', '            mstore(add(b, 32), x)\n', '        }\n', '    }\n', '    \n', '    // returns a pseudo-random number\n', '    function random(uint lessThan) internal returns (uint) {\n', '        seed += block.timestamp + uint(msg.sender);\n', '        return uint(sha256(toBytes(uint(blockhash(block.number - 1)) + seed))) % lessThan;\n', '    }\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '        unconfirmedTxs++;\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Transfer tokens from other address */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Set allowance for other address */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Burn tokens */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function issue(uint256 _value) internal {\n', '        balanceOf[msg.sender] += _value;\n', '        totalSupply += _value;\n', '        emit Transfer(0, this, _value);\n', '        emit Transfer(this, msg.sender, _value);\n', '    }\n', '    \n', '    function getReward() public view returns (uint) {\n', '        uint pow = (block.number - createdAt) / 864000;\n', '        if (pow > 25) {\n', '            return 0;\n', '        }\n', '        return 50 * k / 2 ** pow;\n', '    }\n', '    \n', '    function canMine(address _user) public view returns (bool) {\n', '        return balanceOf[_user] * 10000 / totalSupply > 0;\n', '    }\n', '    \n', '    function dice(uint rollUnder, uint amount) public notContract {\n', '        require(rollUnder >= 2 && rollUnder <= 97);\n', '        require(balanceOf[msg.sender] >= amount);\n', '        \n', '        uint number = random(100);\n', '        if (number < rollUnder) {\n', '            uint prize = amount * 98 / rollUnder;\n', '            issue(prize - amount);\n', '            emit Dice(msg.sender, amount, prize, number, rollUnder);\n', '        } else {\n', '            burn(amount);\n', '            emit Dice(msg.sender, amount, 0, number, rollUnder);\n', '        }\n', '    }\n', '    \n', '    function mine() public notContract {\n', '        uint minedHashRel = random(65536);\n', '        uint balanceRel = balanceOf[msg.sender] * 10000 / totalSupply;\n', '        if (balanceRel > 0) {\n', '            uint rollUnder = (block.number - lastMiningAt) * balanceRel;\n', '            if (minedHashRel < rollUnder) {\n', '                uint reward = getReward() + unconfirmedTxs * k;\n', '                issue(reward);\n', '                emit Mine(msg.sender, reward, minedHashRel, rollUnder);\n', '                successesOf[msg.sender]++;\n', '                \n', '                lastMiningAt = block.number;\n', '                unconfirmedTxs = 0;\n', '            } else {\n', '                emit Transfer(this, msg.sender, 0);\n', '                emit Mine(msg.sender, 0, minedHashRel, rollUnder);\n', '                failsOf[msg.sender]++;\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']