['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenWhitelist is Ownable {\n', '\n', '    mapping(address => bool) private whitelist;\n', '\n', '    event Whitelisted(address indexed wallet);\n', '    event Dewhitelisted(address indexed wallet);\n', '\n', '    function enableWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0), "Invalid wallet");\n', '        whitelist[_wallet] = true;\n', '        emit Whitelisted(_wallet);\n', '    }\n', '    \n', '    function enableWalletBatch(address[] memory _wallets) public onlyOwner {\n', '        for (uint256 i = 0; i < _wallets.length; i++) {\n', '            enableWallet(_wallets[i]);\n', '        }\n', '    }\n', '\n', '\n', '    function disableWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0), "Invalid wallet");\n', '        whitelist[_wallet] = false;\n', '        emit Dewhitelisted(_wallet);\n', '    }\n', '\n', '    \n', '    function disableWalletBatch(address[] memory _wallets) public onlyOwner {\n', '        for (uint256 i = 0; i < _wallets.length; i++) {\n', '            disableWallet(_wallets[i]);\n', '        }\n', '    }\n', '    \n', '    function checkWhitelisted(address _wallet) public view returns (bool){\n', '        return whitelist[_wallet];\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TrustedRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event TrustedAdded(address indexed account);\n', '    event TrustedRemoved(address indexed account);\n', '\n', '    Roles.Role private trusted;\n', '\n', '    constructor() internal {\n', '        _addTrusted(msg.sender);\n', '    }\n', '\n', '    modifier onlyOwnerOrTrusted() {\n', '        require(isOwner() || isTrusted(msg.sender), "Only owner or trusted allowed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyTrusted() {\n', '        require(isTrusted(msg.sender), "Only trusted allowed");\n', '        _;\n', '    }\n', '\n', '    function isTrusted(address account) public view returns (bool) {\n', '        return trusted.has(account);\n', '    }\n', '\n', '    function addTrusted(address account) public onlyOwner {\n', '        _addTrusted(account);\n', '    }\n', '\n', '    function removeTrusted(address account) public onlyOwner {\n', '        _removeTrusted(account);\n', '    }\n', '\n', '    function _addTrusted(address account) internal {\n', '        trusted.add(account);\n', '        emit TrustedAdded(account);\n', '    }\n', '\n', '    function _removeTrusted(address account) internal {\n', '        trusted.remove(account);\n', '        emit TrustedRemoved(account);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title MultiTokenDividend\n', ' *\n', ' * Based on https://medium.com/%40weka/dividend-bearing-tokens-on-ethereum-42d01c710657\n', ' * Distributes dividends on multiple currencies: ETH and ERC20\n', ' */\n', 'contract MultiTokenDividend is Ownable, TrustedRole {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Stores each account preferred payment method and balance\n', '    struct Account {\n', '        address tokenAddress;\n', '        uint256 amount;\n', '        uint256 lastTotalDividendPoints;\n', '    }\n', '    mapping(address => Account) public accounts;\n', '\n', '    // Stores information about each payment method\n', '    struct Dividend {\n', '        uint256 totalDividendPoints;\n', '        uint256 unclaimedDividends;\n', '        uint256 totalSupply;\n', '    }\n', '    mapping(address => Dividend) public tokenDividends;\n', '\n', '    // Main token for calculation of dividends\n', '    ERC20Detailed private _sharesToken;\n', '\n', '    // Constant to allow division by totalSupply (from the article)\n', '    uint256 private X;\n', '\n', '    // Disbursement failure for tracking\n', '    event TransferFailure(address indexed beneficiary);\n', '\n', '    constructor(ERC20Detailed token, uint256 const) public {\n', '        _sharesToken = token;\n', '        X = const;\n', '    }\n', '\n', '    // Access\n', '    modifier onlyToken() {\n', '        require(msg.sender == address(_sharesToken), "Only the token allowed");\n', '        _;\n', '    }\n', '\n', '    // Receive and collect funds\n', '    function() external payable {}\n', '    function collect(address tokenAddress) public onlyOwner {\n', '        if (tokenAddress == address(0)) {\n', '            address(uint160(owner())).transfer(address(this).balance);\n', '        }\n', '        else {\n', '            IERC20 token = IERC20(tokenAddress);\n', '            token.safeTransfer(owner(), token.balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    function setPaymentMethod(address beneficiary, address tokenAddress) public onlyOwnerOrTrusted {\n', "        // Ensure he doesn't lose his unclaimed dividends\n", '        updateAccount(beneficiary);\n', '        require(accounts[beneficiary].amount == 0, "Withdraw the balance before changing payout token");\n', '\n', '        // Set the new payment method\n', '        address oldToken = accounts[beneficiary].tokenAddress;\n', '        accounts[beneficiary].tokenAddress = tokenAddress;\n', '        accounts[beneficiary].lastTotalDividendPoints = tokenDividends[tokenAddress].totalDividendPoints;\n', '        \n', '        // Move his pool of tokens to another payment method\n', '        uint256 beneficiaryShares = _sharesToken.balanceOf(beneficiary);\n', '        tokenDividends[oldToken].totalSupply = tokenDividends[oldToken].totalSupply.sub(beneficiaryShares);\n', '        tokenDividends[tokenAddress].totalSupply = tokenDividends[tokenAddress].totalSupply.add(beneficiaryShares);\n', '    }\n', '\n', '    function dividendsOwing(address beneficiary) internal view returns(uint256) {\n', '        Account storage account = accounts[beneficiary];\n', '        uint256 newDividendPoints = tokenDividends[account.tokenAddress].totalDividendPoints.sub(account.lastTotalDividendPoints);\n', '        return _sharesToken.balanceOf(beneficiary).mul(newDividendPoints).div(X);\n', '    }\n', '\n', '    function updateAccount(address account) public onlyOwnerOrTrusted {\n', '        _updateAccount(account);\n', '    }\n', '\n', '    function _updateAccount(address account) internal {\n', '        uint256 owing = dividendsOwing(account);\n', '        Dividend storage dividend = tokenDividends[accounts[account].tokenAddress];\n', '        if (owing > 0) {\n', '            dividend.unclaimedDividends = dividend.unclaimedDividends.sub(owing);\n', '            accounts[account].amount = accounts[account].amount.add(owing);\n', '        }\n', '        // Prevent new account holders to claim past dividends\n', '        if (accounts[account].lastTotalDividendPoints != dividend.totalDividendPoints) {\n', '            accounts[account].lastTotalDividendPoints = dividend.totalDividendPoints;\n', '        }\n', '    }\n', '\n', '    // Register dividends for these payment methods\n', '    function addDividends(address[] memory tokens) public onlyOwner {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            address token = tokens[i];\n', '            uint256 tokenAmount = 0;\n', '            \n', '            // Get the total amount to distribute\n', '            if (token == address(0)) {\n', '                // ETH\n', '                tokenAmount = address(this).balance;\n', '            }\n', '            else {\n', '                // ERC20\n', '                tokenAmount = IERC20(token).balanceOf(address(this));\n', '            }\n', '\n', '            Dividend storage dividend = tokenDividends[token];\n', '\n', '            // Subtract unclaimed tokens\n', '            if (tokenAmount > dividend.unclaimedDividends) {\n', '                tokenAmount = tokenAmount - dividend.unclaimedDividends;\n', '                dividend.totalDividendPoints = dividend.totalDividendPoints.add(\n', '                    tokenAmount.mul(X).div(dividend.totalSupply)\n', '                );\n', '                dividend.unclaimedDividends = dividend.unclaimedDividends.add(tokenAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    // Send the dividends to their accounts\n', '    // Iterate offchain to prevent hitting the gas limit\n', '    function disburse(address payable[] calldata beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < beneficiaries.length; i++) {\n', '            address payable acc = beneficiaries[i];\n', '            updateAccount(acc);\n', '\n', '            bool success = _disburse(acc);\n', '            if (!success) {\n', '                emit TransferFailure(acc);\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdraw() public {\n', '        _updateAccount(msg.sender);\n', '        require(_disburse(msg.sender), "Failed to transfer ETH");\n', '    }\n', '\n', '    function _disburse(address payable beneficiary) internal returns (bool) {\n', '        Account storage account = accounts[beneficiary];\n', '        uint256 amount = account.amount;\n', '        if (amount == 0) return true;\n', '        \n', '        // Set to 0 before transfering\n', '        account.amount = 0;\n', '\n', '        if (account.tokenAddress == address(0)) {\n', '            // ETH disbursement\n', '            bool success = beneficiary.send(amount);\n', '            if (!success) {\n', '                account.amount = amount;\n', '            }\n', '            return success;\n', '        }\n', '        else {\n', '            // ERC20 disbursement\n', '            IERC20 token = IERC20(account.tokenAddress);\n', '            token.safeTransfer(beneficiary, amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Changes to totalSupply\n', '     */\n', '    function _registerBurn(address from, uint256 amount) public onlyToken {\n', '        _updateAccount(from);\n', '        Dividend storage tokenDividend = tokenDividends[accounts[from].tokenAddress];\n', '        tokenDividend.totalSupply = tokenDividend.totalSupply.sub(amount);\n', '    }\n', '    function _registerMint(address to, uint256 amount) public onlyToken {\n', '        _updateAccount(to);\n', '        Dividend storage tokenDividend = tokenDividends[accounts[to].tokenAddress];\n', '        tokenDividend.totalSupply = tokenDividend.totalSupply.add(amount);\n', '    }\n', '    function _registerTransfer(address from, address to, uint256 amount) public onlyToken {\n', '        _updateAccount(from);\n', '        _updateAccount(to);\n', '        if (accounts[from].tokenAddress != accounts[to].tokenAddress) {\n', '            Dividend storage fromDividend = tokenDividends[accounts[from].tokenAddress];\n', '            fromDividend.totalSupply = fromDividend.totalSupply.sub(amount);\n', '            \n', '            Dividend storage toDividend = tokenDividends[accounts[to].tokenAddress];\n', '            toDividend.totalSupply = toDividend.totalSupply.add(amount);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20MultiDividend is Ownable, ERC20 {\n', '    MultiTokenDividend internal _dividend;\n', '\n', '    constructor() internal {}\n', '\n', '    function setDividendContract(MultiTokenDividend dividend) external onlyOwner {\n', '        _dividend = dividend;\n', '    }\n', '\n', '    /**\n', '     * Notify MultiTokenDividend of changes\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        _dividend._registerBurn(account, value);\n', '        super._burn(account, value);\n', '    }\n', '    function _mint(address account, uint256 value) internal {\n', '        _dividend._registerMint(account, value);\n', '        super._mint(account, value);\n', '    }\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        _dividend._registerTransfer(from, to, value);\n', '        super._transfer(from, to, value);\n', '    }\n', '}\n', '\n', 'contract ReitBZ is Ownable, ERC20MultiDividend, ERC20Burnable, ERC20Mintable, ERC20Pausable, ERC20Detailed {\n', '\n', '    TokenWhitelist public whitelist;\n', '\n', '    constructor() public\n', '    ERC20Detailed("ReitBZ", "RBZ", 18) {\n', '        whitelist = new TokenWhitelist();\n', '    }\n', '\n', '    // Distribution Functions\n', '    // Whitelist Functions\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        super.transferOwnership(newOwner);\n', '        _addMinter(newOwner);\n', '        _removeMinter(msg.sender);\n', '        _addPauser(newOwner);\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function addToWhitelistBatch(address[] calldata wallets) external onlyOwner {\n', '        whitelist.enableWalletBatch(wallets);\n', '    }\n', '\n', '    function addToWhitelist(address wallet) public onlyOwner {\n', '        whitelist.enableWallet(wallet);\n', '    }\n', '\n', '    function removeFromWhitelist(address wallet) public onlyOwner {\n', '        whitelist.disableWallet(wallet);\n', '    }\n', '\n', '    function removeFromWhitelistBatch(address[] calldata wallets) external onlyOwner {\n', '        whitelist.disableWalletBatch(wallets);\n', '    }\n', '\n', '    function checkWhitelisted(address wallet) public view returns (bool) {\n', '        return whitelist.checkWhitelisted(wallet);\n', '    }\n', '\n', '    // ERC20Burnable Functions\n', '\n', '    function burn(uint256 value) public onlyOwner {\n', '        super.burn(value);\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public onlyOwner {\n', '        _burn(from, value);\n', '    }\n', '\n', '    // ERC20Mintable Functions\n', '\n', '    function mint(address to, uint256 value) public returns (bool) {\n', '        require(whitelist.checkWhitelisted(to), "Receiver is not whitelisted.");\n', '        return super.mint(to, value);\n', '    }\n', '\n', '    // ERC20 Functions\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(whitelist.checkWhitelisted(msg.sender), "Sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(to), "Receiver is not whitelisted.");\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from,address to, uint256 value) public returns (bool) {\n', '        require(whitelist.checkWhitelisted(msg.sender), "Transaction sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(from), "Token sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(to), "Receiver is not whitelisted.");\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(whitelist.checkWhitelisted(msg.sender), "Sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(spender), "Spender is not whitelisted.");\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool success) {\n', '        require(whitelist.checkWhitelisted(msg.sender), "Sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(spender), "Spender is not whitelisted.");\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool success) {\n', '        require(whitelist.checkWhitelisted(msg.sender), "Sender is not whitelisted.");\n', '        require(whitelist.checkWhitelisted(spender), "Spender is not whitelisted.");\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '\n', '}']