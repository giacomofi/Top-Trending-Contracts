['pragma solidity 0.4.26;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw an error.\n', ' * Based off of https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n', ' */\n', 'library SafeMath {\n', '    /*\n', '     * Internal functions\n', '     */\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '*/\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    address private owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event MintFinished();\n', '    \n', '    bool public mintingFinished = false;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) onlyOwner public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) onlyOwner public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) onlyOwner public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) onlyOwner public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '    /**\n', '   * @dev Function to transfer token ownership. \n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '    modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  \n', '    /**\n', '   * @dev Function to stop minting new guild member tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', ' \n', ' /**\n', ' * @title Mintable Tribute Token\n', ' * @dev Simple ERC20 Token example, with mintable token creation and amendable tribute system\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableTributeToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint public totalSupply;\n', '  address public owner;\n', '  uint public tribute;\n', '  address public guild;\n', '  uint8 private amount;\n', '\n', '  bool public mintingFinished = false;\n', '\n', 'constructor(string memory _symbol, string memory _name, uint _totalSupply, address _owner, uint _tribute, address _guild) public {\n', '    \tsymbol = _symbol;\n', '    \tname = _name;\n', '    \tdecimals = 0;\n', '    \ttotalSupply = _totalSupply;\n', '    \towner = _owner;\n', '    \ttribute = _tribute;\n', '        guild = _guild;\n', '    \tbalances[_owner] = _totalSupply;\n', '    \temit Transfer(address(0), _owner, _totalSupply);\n', '}\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to update tribute amount for guild token mint. \n', '   */\n', '  function updateTribute(uint _tribute) onlyOwner public {\n', '    \ttribute = _tribute;\n', '\t}\n', '    \t\n', '  /**\n', '   * @dev Function to update guild address for tribute transfer. \n', '   */\t\n', '  function updateGuild(address _guild) onlyOwner public {\n', '    \tguild = _guild;\n', '\t}\n', '  \n', '  /**\n', '   * @dev Function to mint new guild tokens after tribute attached.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint() canMint payable public returns (bool) {\n', '    require(address(this).balance == tribute, "tribute must be funded");\n', '    address(guild).transfer(address(this).balance);\n', '    amount = 1;\n', '    totalSupply = totalSupply.add(amount);\n', '    balances[msg.sender] = balances[msg.sender].add(amount);\n', '    emit Mint(msg.sender, amount);\n', '    emit Transfer(address(0), msg.sender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new guild member tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to transfer token ownership. \n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '}\n', '}\n', '\n', 'contract Factory {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event ContractInstantiation(address sender, address instantiation);\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping(address => bool) public isInstantiation;\n', '    mapping(address => address[]) public instantiations;\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '    /// @dev Returns number of instantiations by creator.\n', '    /// @param creator Contract creator.\n', '    /// @return Returns number of instantiations by creator.\n', '    function getInstantiationCount(address creator)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return instantiations[creator].length;\n', '    }\n', '\n', '    /*\n', '     * Internal functions\n', '     */\n', '    /// @dev Registers contract in factory registry.\n', '    /// @param instantiation Address of contract instantiation.\n', '    function register(address instantiation)\n', '        internal\n', '    {\n', '        isInstantiation[instantiation] = true;\n', '        instantiations[msg.sender].push(instantiation);\n', '        emit ContractInstantiation(msg.sender, instantiation);\n', '    }\n', '}']