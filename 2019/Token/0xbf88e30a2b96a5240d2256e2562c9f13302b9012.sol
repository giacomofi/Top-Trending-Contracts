['pragma solidity 0.5.6;\n', '\n', '/*\n', '* @dev Crowdsal contract\n', '*/\n', 'contract Sale {\n', '\n', '    GameWave public GWContract;\n', '    uint256 public buyPrice;\n', '    address public owner;\n', '    uint balance;\n', '\n', '    bool crowdSaleClosed = false;\n', '\n', '    constructor(\n', '        address payable _GWContract\n', '    ) payable public {\n', '        owner = msg.sender;\n', '        GWContract = GameWave(_GWContract);\n', '        GWContract.approve(owner, 9999999999999999999000000000000000000);\n', '    }\n', '\n', '    /**\n', '     * @notice Allow users to buy tokens for `newBuyPrice`\n', '     * @param newBuyPrice Price users can buy from the contract.\n', '     */\n', '\n', '    function setPrice(uint256 newBuyPrice) public {\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract and\n', '     * sends tokens to the buyer.\n', '     */\n', '\n', '    function () payable external {\n', '        uint amount = msg.value;\n', '        balance = (amount / buyPrice) * 10 ** 18;\n', '        GWContract.transfer(msg.sender, balance);\n', '        address(GWContract).transfer(amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '  external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '  external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '  external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Multiplies two unsigned integers, reverts on overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two unsigned integers, reverts on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '   * reverts when dividing by zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '  )\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '\n', '    emit Approval(msg.sender, spender, value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '    _allowed[msg.sender][spender].add(addedValue));\n', '\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '    _allowed[msg.sender][spender].sub(subtractedValue));\n', '\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != address(0));\n', '\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != address(0));\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '    require(token.approve(spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '  internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract GameWave is ERC20, ERC20Detailed, Ownable {\n', '\n', '  uint paymentsTime = block.timestamp;\n', '  uint totalPaymentAmount;\n', '  uint lastTotalPaymentAmount;\n', '  uint minted = 20000000;\n', '\n', '  mapping (address => uint256) lastWithdrawTime;\n', '\n', '  /**\n', '   * @dev The GW constructor sets the original variables\n', '   * specified in the contract ERC20Detailed.\n', '   */\n', '  constructor() public ERC20Detailed("Game wave token", "GWT", 18) {\n', '    _mint(msg.sender, minted * (10 ** uint256(decimals())));\n', '  }\n', '\n', '  /**\n', '    * Fallback function\n', '    *\n', '    * The function without name is the default function that is called whenever anyone sends funds to a contract.\n', '    */\n', '  function () payable external {\n', '    if (msg.value == 0){\n', '      withdrawDividends(msg.sender);\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @notice This function allows the investor to see the amount of dividends available for withdrawal.\n', '    * @param _holder this is the address of the investor, where you can see the number of diverders available for withdrawal.\n', '    * @return An uint the value available for the removal of dividends.\n', '    */\n', '  function getDividends(address _holder) view public returns(uint) {\n', '    if (paymentsTime >= lastWithdrawTime[_holder]){\n', '      return totalPaymentAmount.mul(balanceOf(_holder)).div(minted * (10 ** uint256(decimals())));\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @notice This function allows the investor to withdraw dividends available for withdrawal.\n', '    * @param _holder this is the address of the investor, by which there is a withdrawal available to dividend.\n', '    * @return An uint value of removed dividends.\n', '    */\n', '  function withdrawDividends(address payable _holder) public returns(uint) {\n', '    uint dividends = getDividends(_holder);\n', '    lastWithdrawTime[_holder] = block.timestamp;\n', '    lastTotalPaymentAmount = lastTotalPaymentAmount.add(dividends);\n', '    _holder.transfer(dividends);\n', '  }\n', '\n', '  /**\n', '  * @notice This function initializes payments with a period of 30 days.\n', '  *\n', '  */\n', '\n', '  function startPayments() public {\n', '    require(block.timestamp >= paymentsTime + 30 days);\n', '    owner.transfer(totalPaymentAmount.sub(lastTotalPaymentAmount));\n', '    totalPaymentAmount = address(this).balance;\n', '    paymentsTime = block.timestamp;\n', '    lastTotalPaymentAmount = 0;\n', '  }\n', '}\n', '\n', '/*\n', '* @title Bank\n', '* @dev Bank contract which contained all ETH from Dragons and Hamsters teams.\n', '* When time in blockchain will be grater then current deadline or last deadline need call getWinner function\n', '* then participants able get prizes.\n', '*\n', '* Last participant(last hero) win 10% from all bank\n', '*\n', '* - To get prize send 0 ETH to this contract\n', '*/\n', 'contract Bank is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (uint256 => mapping (address => uint256)) public depositBears;\n', '    mapping (uint256 => mapping (address => uint256)) public depositBulls;\n', '\n', '    uint256 public currentDeadline;\n', '    uint256 public currentRound = 1;\n', '    uint256 public lastDeadline;\n', '    uint256 public defaultCurrentDeadlineInHours = 24;\n', '    uint256 public defaultLastDeadlineInHours = 48;\n', '    uint256 public countOfBears;\n', '    uint256 public countOfBulls;\n', '    uint256 public totalSupplyOfBulls;\n', '    uint256 public totalSupplyOfBears;\n', '    uint256 public totalGWSupplyOfBulls;\n', '    uint256 public totalGWSupplyOfBears;\n', '    uint256 public probabilityOfBulls;\n', '    uint256 public probabilityOfBears;\n', '    address public lastHero;\n', '    address public lastHeroHistory;\n', '    uint256 public jackPot;\n', '    uint256 public winner;\n', '    uint256 public withdrawn;\n', '    uint256 public withdrawnGW;\n', '    uint256 public remainder;\n', '    uint256 public remainderGW;\n', '    uint256 public rate = 1;\n', '    uint256 public rateModifier = 0;\n', '    uint256 public tokenReturn;\n', '    address crowdSale;\n', '\n', '    uint256 public lastTotalSupplyOfBulls;\n', '    uint256 public lastTotalSupplyOfBears;\n', '    uint256 public lastTotalGWSupplyOfBulls;\n', '    uint256 public lastTotalGWSupplyOfBears;\n', '    uint256 public lastProbabilityOfBulls;\n', '    uint256 public lastProbabilityOfBears;\n', '    address public lastRoundHero;\n', '    uint256 public lastJackPot;\n', '    uint256 public lastWinner;\n', '    uint256 public lastBalance;\n', '    uint256 public lastBalanceGW;\n', '    uint256 public lastCountOfBears;\n', '    uint256 public lastCountOfBulls;\n', '    uint256 public lastWithdrawn;\n', '    uint256 public lastWithdrawnGW;\n', '\n', '\n', '    bool public finished = false;\n', '\n', '    Bears public BearsContract;\n', '    Bulls public BullsContract;\n', '    GameWave public GameWaveContract;\n', '\n', '    /*\n', '    * @dev Constructor create first deadline\n', '    */\n', '    constructor(address _crowdSale) public {\n', '        _setRoundTime(6, 8);\n', '        crowdSale = _crowdSale;\n', '    }\n', '\n', '    /**\n', '    * @dev Setter token rate.\n', '    * @param _rate this value for change percent relation rate to count of tokens.\n', '    * @param _rateModifier this value for change math operation under tokens.\n', '    */\n', '    function setRateToken(uint256 _rate, uint256 _rateModifier) public onlyOwner returns(uint256){\n', '        rate = _rate;\n', '        rateModifier = _rateModifier;\n', '    }\n', '\n', '    /**\n', '    * @dev Setter crowd sale address.\n', '    * @param _crowdSale Address of the crowd sale contract.\n', '    */\n', '    function setCrowdSale(address _crowdSale) public onlyOwner{\n', '        crowdSale = _crowdSale;\n', '    }\n', '\n', '    /**\n', '    * @dev Setter round time.\n', '    * @param _currentDeadlineInHours this value current deadline in hours.\n', '    * @param _lastDeadlineInHours this value last deadline in hours.\n', '    */\n', '    function _setRoundTime(uint _currentDeadlineInHours, uint _lastDeadlineInHours) internal {\n', '        defaultCurrentDeadlineInHours = _currentDeadlineInHours;\n', '        defaultLastDeadlineInHours = _lastDeadlineInHours;\n', '        currentDeadline = block.timestamp + 60 * 60 * _currentDeadlineInHours;\n', '        lastDeadline = block.timestamp + 60 * 60 * _lastDeadlineInHours;\n', '    }\n', '\n', '    /**\n', '    * @dev Setter round time.\n', '    * @param _currentDeadlineInHours this value current deadline in hours.\n', '    * @param _lastDeadlineInHours this value last deadline in hours.\n', '    */\n', '    function setRoundTime(uint _currentDeadlineInHours, uint _lastDeadlineInHours) public onlyOwner {\n', '        _setRoundTime(_currentDeadlineInHours, _lastDeadlineInHours);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Setter the GameWave contract address. Address can be set at once.\n', '    * @param _GameWaveAddress Address of the GameWave contract\n', '    */\n', '    function setGameWaveAddress(address payable _GameWaveAddress) public {\n', '        require(address(GameWaveContract) == address(0x0));\n', '        GameWaveContract = GameWave(_GameWaveAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Setter the Bears contract address. Address can be set at once.\n', '    * @param _bearsAddress Address of the Bears contract\n', '    */\n', '    function setBearsAddress(address payable _bearsAddress) external {\n', '        require(address(BearsContract) == address(0x0));\n', '        BearsContract = Bears(_bearsAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Setter the Bulls contract address. Address can be set at once.\n', '    * @param _bullsAddress Address of the Bulls contract\n', '    */\n', '    function setBullsAddress(address payable _bullsAddress) external {\n', '        require(address(BullsContract) == address(0x0));\n', '        BullsContract = Bulls(_bullsAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev Getting time from blockchain for timer\n', '    */\n', '    function getNow() view public returns(uint){\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '    * @dev Getting state of game. True - game continue, False - game stopped\n', '    */\n', '    function getState() view public returns(bool) {\n', '        if (block.timestamp > currentDeadline) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Setting info about participant from Bears or Bulls contract\n', '    * @param _lastHero Address of participant\n', '    * @param _deposit Amount of deposit\n', '    */\n', '    function setInfo(address _lastHero, uint256 _deposit) public {\n', '        require(address(BearsContract) == msg.sender || address(BullsContract) == msg.sender);\n', '\n', '        if (address(BearsContract) == msg.sender) {\n', '            require(depositBulls[currentRound][_lastHero] == 0, "You are already in bulls team");\n', '            if (depositBears[currentRound][_lastHero] == 0)\n', '                countOfBears++;\n', '            totalSupplyOfBears = totalSupplyOfBears.add(_deposit.mul(90).div(100));\n', '            depositBears[currentRound][_lastHero] = depositBears[currentRound][_lastHero].add(_deposit.mul(90).div(100));\n', '        }\n', '\n', '        if (address(BullsContract) == msg.sender) {\n', '            require(depositBears[currentRound][_lastHero] == 0, "You are already in bears team");\n', '            if (depositBulls[currentRound][_lastHero] == 0)\n', '                countOfBulls++;\n', '            totalSupplyOfBulls = totalSupplyOfBulls.add(_deposit.mul(90).div(100));\n', '            depositBulls[currentRound][_lastHero] = depositBulls[currentRound][_lastHero].add(_deposit.mul(90).div(100));\n', '        }\n', '\n', '        lastHero = _lastHero;\n', '\n', '        if (currentDeadline.add(120) <= lastDeadline) {\n', '            currentDeadline = currentDeadline.add(120);\n', '        } else {\n', '            currentDeadline = lastDeadline;\n', '        }\n', '\n', '        jackPot += _deposit.mul(10).div(100);\n', '\n', '        calculateProbability();\n', '    }\n', '\n', '    function estimateTokenPercent(uint256 _difference) public view returns(uint256){\n', '        if (rateModifier == 0) {\n', '            return _difference.mul(rate);\n', '        } else {\n', '            return _difference.div(rate);\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @dev Calculation probability for team's win\n", '    */\n', '    function calculateProbability() public {\n', '        require(winner == 0 && getState());\n', '\n', '        totalGWSupplyOfBulls = GameWaveContract.balanceOf(address(BullsContract));\n', '        totalGWSupplyOfBears = GameWaveContract.balanceOf(address(BearsContract));\n', '        uint256 percent = (totalSupplyOfBulls.add(totalSupplyOfBears)).div(100);\n', '\n', '        if (totalGWSupplyOfBulls < 1 ether) {\n', '            totalGWSupplyOfBulls = 0;\n', '        }\n', '\n', '        if (totalGWSupplyOfBears < 1 ether) {\n', '            totalGWSupplyOfBears = 0;\n', '        }\n', '\n', '        if (totalGWSupplyOfBulls <= totalGWSupplyOfBears) {\n', '            uint256 difference = totalGWSupplyOfBears.sub(totalGWSupplyOfBulls).div(0.01 ether);\n', '\n', '            probabilityOfBears = totalSupplyOfBears.mul(100).div(percent).add(estimateTokenPercent(difference));\n', '\n', '            if (probabilityOfBears > 8000) {\n', '                probabilityOfBears = 8000;\n', '            }\n', '            if (probabilityOfBears < 2000) {\n', '                probabilityOfBears = 2000;\n', '            }\n', '            probabilityOfBulls = 10000 - probabilityOfBears;\n', '        } else {\n', '            uint256 difference = totalGWSupplyOfBulls.sub(totalGWSupplyOfBears).div(0.01 ether);\n', '            probabilityOfBulls = totalSupplyOfBulls.mul(100).div(percent).add(estimateTokenPercent(difference));\n', '\n', '            if (probabilityOfBulls > 8000) {\n', '                probabilityOfBulls = 8000;\n', '            }\n', '            if (probabilityOfBulls < 2000) {\n', '                probabilityOfBulls = 2000;\n', '            }\n', '            probabilityOfBears = 10000 - probabilityOfBulls;\n', '        }\n', '\n', '        totalGWSupplyOfBulls = GameWaveContract.balanceOf(address(BullsContract));\n', '        totalGWSupplyOfBears = GameWaveContract.balanceOf(address(BearsContract));\n', '    }\n', '\n', '    /**\n', '    * @dev Getting winner team\n', '    */\n', '    function getWinners() public {\n', '        require(winner == 0 && !getState());\n', '        uint256 seed1 = address(this).balance;\n', '        uint256 seed2 = totalSupplyOfBulls;\n', '        uint256 seed3 = totalSupplyOfBears;\n', '        uint256 seed4 = totalGWSupplyOfBulls;\n', '        uint256 seed5 = totalGWSupplyOfBulls;\n', '        uint256 seed6 = block.difficulty;\n', '        uint256 seed7 = block.timestamp;\n', '\n', '        bytes32 randomHash = keccak256(abi.encodePacked(seed1, seed2, seed3, seed4, seed5, seed6, seed7));\n', '        uint randomNumber = uint(randomHash);\n', '\n', '        if (randomNumber == 0){\n', '            randomNumber = 1;\n', '        }\n', '\n', '        uint winningNumber = randomNumber % 10000;\n', '\n', '        if (1 <= winningNumber && winningNumber <= probabilityOfBears){\n', '            winner = 1;\n', '        }\n', '\n', '        if (probabilityOfBears < winningNumber && winningNumber <= 10000){\n', '            winner = 2;\n', '        }\n', '\n', '        if (GameWaveContract.balanceOf(address(BullsContract)) > 0)\n', '            GameWaveContract.transferFrom(\n', '                address(BullsContract),\n', '                address(this),\n', '                GameWaveContract.balanceOf(address(BullsContract))\n', '            );\n', '\n', '        if (GameWaveContract.balanceOf(address(BearsContract)) > 0)\n', '            GameWaveContract.transferFrom(\n', '                address(BearsContract),\n', '                address(this),\n', '                GameWaveContract.balanceOf(address(BearsContract))\n', '            );\n', '\n', '        lastTotalSupplyOfBulls = totalSupplyOfBulls;\n', '        lastTotalSupplyOfBears = totalSupplyOfBears;\n', '        lastTotalGWSupplyOfBears = totalGWSupplyOfBears;\n', '        lastTotalGWSupplyOfBulls = totalGWSupplyOfBulls;\n', '        lastRoundHero = lastHero;\n', '        lastJackPot = jackPot;\n', '        lastWinner = winner;\n', '        lastCountOfBears = countOfBears;\n', '        lastCountOfBulls = countOfBulls;\n', '        lastWithdrawn = withdrawn;\n', '        lastWithdrawnGW = withdrawnGW;\n', '\n', '        if (lastBalance > lastWithdrawn){\n', '            remainder = lastBalance.sub(lastWithdrawn);\n', '            address(GameWaveContract).transfer(remainder);\n', '        }\n', '\n', '        lastBalance = lastTotalSupplyOfBears.add(lastTotalSupplyOfBulls).add(lastJackPot);\n', '\n', '        if (lastBalanceGW > lastWithdrawnGW){\n', '            remainderGW = lastBalanceGW.sub(lastWithdrawnGW);\n', '            tokenReturn = (totalGWSupplyOfBears.add(totalGWSupplyOfBulls)).mul(20).div(100).add(remainderGW);\n', '            GameWaveContract.transfer(crowdSale, tokenReturn);\n', '        }\n', '\n', '        lastBalanceGW = GameWaveContract.balanceOf(address(this));\n', '\n', '        totalSupplyOfBulls = 0;\n', '        totalSupplyOfBears = 0;\n', '        totalGWSupplyOfBulls = 0;\n', '        totalGWSupplyOfBears = 0;\n', '        remainder = 0;\n', '        remainderGW = 0;\n', '        jackPot = 0;\n', '\n', '        withdrawn = 0;\n', '        winner = 0;\n', '        withdrawnGW = 0;\n', '        countOfBears = 0;\n', '        countOfBulls = 0;\n', '        probabilityOfBulls = 0;\n', '        probabilityOfBears = 0;\n', '\n', '        _setRoundTime(defaultCurrentDeadlineInHours, defaultLastDeadlineInHours);\n', '        currentRound++;\n', '    }\n', '\n', '    /**\n', '    * @dev Payable function for take prize\n', '    */\n', '    function () external payable {\n', '        if (msg.value == 0){\n', '            require(depositBears[currentRound - 1][msg.sender] > 0 || depositBulls[currentRound - 1][msg.sender] > 0);\n', '\n', '            uint payout = 0;\n', '            uint payoutGW = 0;\n', '\n', '            if (lastWinner == 1 && depositBears[currentRound - 1][msg.sender] > 0) {\n', '                payout = calculateLastETHPrize(msg.sender);\n', '            }\n', '            if (lastWinner == 2 && depositBulls[currentRound - 1][msg.sender] > 0) {\n', '                payout = calculateLastETHPrize(msg.sender);\n', '            }\n', '\n', '            if (payout > 0) {\n', '                depositBears[currentRound - 1][msg.sender] = 0;\n', '                depositBulls[currentRound - 1][msg.sender] = 0;\n', '                withdrawn = withdrawn.add(payout);\n', '                msg.sender.transfer(payout);\n', '            }\n', '\n', '            if ((lastWinner == 1 && depositBears[currentRound - 1][msg.sender] == 0) || (lastWinner == 2 && depositBulls[currentRound - 1][msg.sender] == 0)) {\n', '                payoutGW = calculateLastGWPrize(msg.sender);\n', '                withdrawnGW = withdrawnGW.add(payoutGW);\n', '                GameWaveContract.transfer(msg.sender, payoutGW);\n', '            }\n', '\n', '            if (msg.sender == lastRoundHero) {\n', '                lastHeroHistory = lastRoundHero;\n', '                lastRoundHero = address(0x0);\n', '                withdrawn = withdrawn.add(lastJackPot);\n', '                msg.sender.transfer(lastJackPot);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Getting ETH prize of participant\n', '    * @param participant Address of participant\n', '    */\n', '    function calculateETHPrize(address participant) public view returns(uint) {\n', '\n', '        uint payout = 0;\n', '        uint256 totalSupply = (totalSupplyOfBears.add(totalSupplyOfBulls));\n', '\n', '        if (depositBears[currentRound][participant] > 0) {\n', '            payout = totalSupply.mul(depositBears[currentRound][participant]).div(totalSupplyOfBears);\n', '        }\n', '\n', '        if (depositBulls[currentRound][participant] > 0) {\n', '            payout = totalSupply.mul(depositBulls[currentRound][participant]).div(totalSupplyOfBulls);\n', '        }\n', '\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '    * @dev Getting GW Token prize of participant\n', '    * @param participant Address of participant\n', '    */\n', '    function calculateGWPrize(address participant) public view returns(uint) {\n', '\n', '        uint payout = 0;\n', '        uint totalSupply = (totalGWSupplyOfBears.add(totalGWSupplyOfBulls)).mul(80).div(100);\n', '\n', '        if (depositBears[currentRound][participant] > 0) {\n', '            payout = totalSupply.mul(depositBears[currentRound][participant]).div(totalSupplyOfBears);\n', '        }\n', '\n', '        if (depositBulls[currentRound][participant] > 0) {\n', '            payout = totalSupply.mul(depositBulls[currentRound][participant]).div(totalSupplyOfBulls);\n', '        }\n', '\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '    * @dev Getting ETH prize of _lastParticipant\n', '    * @param _lastParticipant Address of _lastParticipant\n', '    */\n', '    function calculateLastETHPrize(address _lastParticipant) public view returns(uint) {\n', '\n', '        uint payout = 0;\n', '        uint256 totalSupply = (lastTotalSupplyOfBears.add(lastTotalSupplyOfBulls));\n', '\n', '        if (depositBears[currentRound - 1][_lastParticipant] > 0) {\n', '            payout = totalSupply.mul(depositBears[currentRound - 1][_lastParticipant]).div(lastTotalSupplyOfBears);\n', '        }\n', '\n', '        if (depositBulls[currentRound - 1][_lastParticipant] > 0) {\n', '            payout = totalSupply.mul(depositBulls[currentRound - 1][_lastParticipant]).div(lastTotalSupplyOfBulls);\n', '        }\n', '\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '    * @dev Getting GW Token prize of _lastParticipant\n', '    * @param _lastParticipant Address of _lastParticipant\n', '    */\n', '    function calculateLastGWPrize(address _lastParticipant) public view returns(uint) {\n', '\n', '        uint payout = 0;\n', '        uint totalSupply = (lastTotalGWSupplyOfBears.add(lastTotalGWSupplyOfBulls)).mul(80).div(100);\n', '\n', '        if (depositBears[currentRound - 1][_lastParticipant] > 0) {\n', '            payout = totalSupply.mul(depositBears[currentRound - 1][_lastParticipant]).div(lastTotalSupplyOfBears);\n', '        }\n', '\n', '        if (depositBulls[currentRound - 1][_lastParticipant] > 0) {\n', '            payout = totalSupply.mul(depositBulls[currentRound - 1][_lastParticipant]).div(lastTotalSupplyOfBulls);\n', '        }\n', '\n', '        return payout;\n', '    }\n', '}\n', '\n', '/**\n', '* @dev Base contract for teams\n', '*/\n', 'contract CryptoTeam {\n', '    using SafeMath for uint256;\n', '\n', '    //Developers fund\n', '    address payable public owner;\n', '\n', '    Bank public BankContract;\n', '    GameWave public GameWaveContract;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Payable function. 10% will send to Developers fund and 90% will send to JackPot contract.\n', '    * Also setting info about player.\n', '    */\n', '    function () external payable {\n', '        require(BankContract.getState() && msg.value >= 0.05 ether);\n', '\n', '        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));\n', '\n', '        owner.transfer(msg.value.mul(10).div(100));\n', '        \n', '        address(BankContract).transfer(msg.value.mul(90).div(100));\n', '    }\n', '}\n', '\n', '/*\n', '* @dev Bears contract. To play game with Bears send ETH to this contract\n', '*/\n', 'contract Bears is CryptoTeam {\n', '    constructor(address payable _bankAddress, address payable _GameWaveAddress) public {\n', '        BankContract = Bank(_bankAddress);\n', '        BankContract.setBearsAddress(address(this));\n', '        GameWaveContract = GameWave(_GameWaveAddress);\n', '        GameWaveContract.approve(_bankAddress, 9999999999999999999000000000000000000);\n', '    }\n', '}\n', '\n', '/*\n', '* @dev Bulls contract. To play game with Bulls send ETH to this contract\n', '*/\n', 'contract Bulls is CryptoTeam {\n', '    constructor(address payable _bankAddress, address payable _GameWaveAddress) public {\n', '        BankContract = Bank(_bankAddress);\n', '        BankContract.setBullsAddress(address(this));\n', '        GameWaveContract = GameWave(_GameWaveAddress);\n', '        GameWaveContract.approve(_bankAddress, 9999999999999999999000000000000000000);\n', '    }\n', '}']