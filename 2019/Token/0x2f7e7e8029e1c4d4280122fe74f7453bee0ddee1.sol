['pragma solidity ^0.5.1;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ICashToken is ERC20Interface {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    \n', '    uint private _totalSupply;\n', '    \n', '    address private _owner;\n', '\n', '    mapping(address => uint) private _balances;\n', '    mapping(address => mapping(address => uint)) private _allowed;\n', '    \n', '    constructor() public {\n', '        symbol = "iCash";\n', '        name = "iCash Token";\n', '        decimals = 18;\n', '        _totalSupply = 300*1000000*10**uint(decimals); //300M\n', '        \n', '        _owner = msg.sender;\n', '\n', '        address master = address(0x8FA33dE666e0c4d560b68638798c5fC64b7519eb);\n', '        _balances[master] = _totalSupply;\n', '        emit Transfer(address(0), master, _totalSupply);\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(_balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        _balances[msg.sender] = _balances[msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        _balances[from] = _balances[from].sub(tokens);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '        revert();\n', '    }\n', '     // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n', '        require(msg.sender == _owner);\n', '        return ERC20Interface(tokenAddress).transfer(_owner, tokens);\n', '    }\n', '}']