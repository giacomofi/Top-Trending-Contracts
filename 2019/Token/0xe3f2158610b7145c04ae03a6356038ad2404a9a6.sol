['pragma solidity ^0.4.25;\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() internal {\n', '    _addMinter(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    _addMinter(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    _removeMinter(msg.sender);\n', '  }\n', '\n', '  function _addMinter(address account) internal {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param value The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '  {\n', '    _mint(to, value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    // safeApprove should only be called when setting an initial allowance, \n', '    // or when resetting it to zero. To increase and decrease it, use \n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '    require(token.approve(spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '}\n', '\n', 'contract Modifiable {\n', '    //\n', '    // Modifiers\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    modifier notNullAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier notThisAddress(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    modifier notNullOrThisAddress(address _address) {\n', '        require(_address != address(0));\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    modifier notSameAddresses(address _address1, address _address2) {\n', '        if (_address1 != _address2)\n', '            _;\n', '    }\n', '}\n', '\n', 'contract RevenueToken is ERC20Mintable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public mintingDisabled;\n', '\n', '    address[] public holders;\n', '\n', '    mapping(address => bool) public holdersMap;\n', '\n', '    mapping(address => uint256[]) public balances;\n', '\n', '    mapping(address => uint256[]) public balanceBlocks;\n', '\n', '    mapping(address => uint256[]) public balanceBlockNumbers;\n', '\n', '    event DisableMinting();\n', '\n', '    /**\n', '     * @notice Disable further minting\n', '     * @dev This operation can not be undone\n', '     */\n', '    function disableMinting()\n', '    public\n', '    onlyMinter\n', '    {\n', '        mintingDisabled = true;\n', '\n', '        emit DisableMinting();\n', '    }\n', '\n', '    /**\n', '     * @notice Mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value)\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '    {\n', '        require(!mintingDisabled);\n', '\n', "        // Call super's mint, including event emission\n", '        bool minted = super.mint(to, value);\n', '\n', '        if (minted) {\n', '            // Adjust balance blocks\n', '            addBalanceBlocks(to);\n', '\n', '            // Add to the token holders list\n', '            if (!holdersMap[to]) {\n', '                holdersMap[to] = true;\n', '                holders.push(to);\n', '            }\n', '        }\n', '\n', '        return minted;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer token for a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transfer(address to, uint256 value)\n', '    public\n', '    returns (bool)\n', '    {\n', "        // Call super's transfer, including event emission\n", '        bool transferred = super.transfer(to, value);\n', '\n', '        if (transferred) {\n', '            // Adjust balance blocks\n', '            addBalanceBlocks(msg.sender);\n', '            addBalanceBlocks(to);\n', '\n', '            // Add to the token holders list\n', '            if (!holdersMap[to]) {\n', '                holdersMap[to] = true;\n', '                holders.push(to);\n', '            }\n', '        }\n', '\n', '        return transferred;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', "     * @dev Beware that to change the approve amount you first have to reduce the addresses'\n", '     * allowance to zero by calling `approve(spender, 0)` if it is not already 0 to mitigate the race\n', '     * condition described here:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value)\n', '    public\n', '    returns (bool)\n', '    {\n', '        // Prevent the update of non-zero allowance\n', '        require(0 == value || 0 == allowance(msg.sender, spender));\n', '\n', "        // Call super's approve, including event emission\n", '        return super.approve(spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public\n', '    returns (bool)\n', '    {\n', "        // Call super's transferFrom, including event emission\n", '        bool transferred = super.transferFrom(from, to, value);\n', '\n', '        if (transferred) {\n', '            // Adjust balance blocks\n', '            addBalanceBlocks(from);\n', '            addBalanceBlocks(to);\n', '\n', '            // Add to the token holders list\n', '            if (!holdersMap[to]) {\n', '                holdersMap[to] = true;\n', '                holders.push(to);\n', '            }\n', '        }\n', '\n', '        return transferred;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate the amount of balance blocks, i.e. the area under the curve (AUC) of\n', '     * balance as function of block number\n', '     * @dev The AUC is used as weight for the share of revenue that a token holder may claim\n', '     * @param account The account address for which calculation is done\n', '     * @param startBlock The start block number considered\n', '     * @param endBlock The end block number considered\n', '     * @return The calculated AUC\n', '     */\n', '    function balanceBlocksIn(address account, uint256 startBlock, uint256 endBlock)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        require(startBlock < endBlock);\n', '        require(account != address(0));\n', '\n', '        if (balanceBlockNumbers[account].length == 0 || endBlock < balanceBlockNumbers[account][0])\n', '            return 0;\n', '\n', '        uint256 i = 0;\n', '        while (i < balanceBlockNumbers[account].length && balanceBlockNumbers[account][i] < startBlock)\n', '            i++;\n', '\n', '        uint256 r;\n', '        if (i >= balanceBlockNumbers[account].length)\n', '            r = balances[account][balanceBlockNumbers[account].length - 1].mul(endBlock.sub(startBlock));\n', '\n', '        else {\n', '            uint256 l = (i == 0) ? startBlock : balanceBlockNumbers[account][i - 1];\n', '\n', '            uint256 h = balanceBlockNumbers[account][i];\n', '            if (h > endBlock)\n', '                h = endBlock;\n', '\n', '            h = h.sub(startBlock);\n', '            r = (h == 0) ? 0 : balanceBlocks[account][i].mul(h).div(balanceBlockNumbers[account][i].sub(l));\n', '            i++;\n', '\n', '            while (i < balanceBlockNumbers[account].length && balanceBlockNumbers[account][i] < endBlock) {\n', '                r = r.add(balanceBlocks[account][i]);\n', '                i++;\n', '            }\n', '\n', '            if (i >= balanceBlockNumbers[account].length)\n', '                r = r.add(\n', '                    balances[account][balanceBlockNumbers[account].length - 1].mul(\n', '                        endBlock.sub(balanceBlockNumbers[account][balanceBlockNumbers[account].length - 1])\n', '                    )\n', '                );\n', '\n', '            else if (balanceBlockNumbers[account][i - 1] < endBlock)\n', '                r = r.add(\n', '                    balanceBlocks[account][i].mul(\n', '                        endBlock.sub(balanceBlockNumbers[account][i - 1])\n', '                    ).div(\n', '                        balanceBlockNumbers[account][i].sub(balanceBlockNumbers[account][i - 1])\n', '                    )\n', '                );\n', '        }\n', '\n', '        return r;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the count of balance updates for the given account\n', '     * @return The count of balance updates\n', '     */\n', '    function balanceUpdatesCount(address account)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return balanceBlocks[account].length;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the count of holders\n', '     * @return The count of holders\n', '     */\n', '    function holdersCount()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return holders.length;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the subset of holders (optionally with positive balance only) in the given 0 based index range\n', '     * @param low The lower inclusive index\n', '     * @param up The upper inclusive index\n', '     * @param posOnly List only positive balance holders\n', '     * @return The subset of positive balance registered holders in the given range\n', '     */\n', '    function holdersByIndices(uint256 low, uint256 up, bool posOnly)\n', '    public\n', '    view\n', '    returns (address[])\n', '    {\n', '        require(low <= up);\n', '\n', '        up = up > holders.length - 1 ? holders.length - 1 : up;\n', '\n', '        uint256 length = 0;\n', '        if (posOnly) {\n', '            for (uint256 i = low; i <= up; i++)\n', '                if (0 < balanceOf(holders[i]))\n', '                    length++;\n', '        } else\n', '            length = up - low + 1;\n', '\n', '        address[] memory _holders = new address[](length);\n', '\n', '        uint256 j = 0;\n', '        for (i = low; i <= up; i++)\n', '            if (!posOnly || 0 < balanceOf(holders[i]))\n', '                _holders[j++] = holders[i];\n', '\n', '        return _holders;\n', '    }\n', '\n', '    function addBalanceBlocks(address account)\n', '    private\n', '    {\n', '        uint256 length = balanceBlockNumbers[account].length;\n', '        balances[account].push(balanceOf(account));\n', '        if (0 < length)\n', '            balanceBlocks[account].push(\n', '                balances[account][length - 1].mul(\n', '                    block.number.sub(balanceBlockNumbers[account][length - 1])\n', '                )\n', '            );\n', '        else\n', '            balanceBlocks[account].push(0);\n', '        balanceBlockNumbers[account].push(block.number);\n', '    }\n', '}\n', '\n', 'library SafeMathUintLib {\n', '    function mul(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    //\n', '    //Clamping functions.\n', '    //\n', '    function clamp(uint256 a, uint256 min, uint256 max)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a > max) ? max : ((a < min) ? min : a);\n', '    }\n', '\n', '    function clampMin(uint256 a, uint256 min)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a < min) ? min : a;\n', '    }\n', '\n', '    function clampMax(uint256 a, uint256 max)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a > max) ? max : a;\n', '    }\n', '}\n', '\n', 'contract SelfDestructible {\n', '    //\n', '    // Variables\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    bool public selfDestructionDisabled;\n', '\n', '    //\n', '    // Events\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    event SelfDestructionDisabledEvent(address wallet);\n', '    event TriggerSelfDestructionEvent(address wallet);\n', '\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    /// @notice Get the address of the destructor role\n', '    function destructor()\n', '    public\n', '    view\n', '    returns (address);\n', '\n', '    /// @notice Disable self-destruction of this contract\n', '    /// @dev This operation can not be undone\n', '    function disableSelfDestruction()\n', '    public\n', '    {\n', '        // Require that sender is the assigned destructor\n', '        require(destructor() == msg.sender);\n', '\n', '        // Disable self-destruction\n', '        selfDestructionDisabled = true;\n', '\n', '        // Emit event\n', '        emit SelfDestructionDisabledEvent(msg.sender);\n', '    }\n', '\n', '    /// @notice Destroy this contract\n', '    function triggerSelfDestruction()\n', '    public\n', '    {\n', '        // Require that sender is the assigned destructor\n', '        require(destructor() == msg.sender);\n', '\n', '        // Require that self-destruction has not been disabled\n', '        require(!selfDestructionDisabled);\n', '\n', '        // Emit event\n', '        emit TriggerSelfDestructionEvent(msg.sender);\n', '\n', '        // Self-destruct and reward destructor\n', '        selfdestruct(msg.sender);\n', '    }\n', '}\n', '\n', 'contract Ownable is Modifiable, SelfDestructible {\n', '    //\n', '    // Variables\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    address public deployer;\n', '    address public operator;\n', '\n', '    //\n', '    // Events\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    event SetDeployerEvent(address oldDeployer, address newDeployer);\n', '    event SetOperatorEvent(address oldOperator, address newOperator);\n', '\n', '    //\n', '    // Constructor\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    constructor(address _deployer) internal notNullOrThisAddress(_deployer) {\n', '        deployer = _deployer;\n', '        operator = _deployer;\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    /// @notice Return the address that is able to initiate self-destruction\n', '    function destructor()\n', '    public\n', '    view\n', '    returns (address)\n', '    {\n', '        return deployer;\n', '    }\n', '\n', '    /// @notice Set the deployer of this contract\n', '    /// @param newDeployer The address of the new deployer\n', '    function setDeployer(address newDeployer)\n', '    public\n', '    onlyDeployer\n', '    notNullOrThisAddress(newDeployer)\n', '    {\n', '        if (newDeployer != deployer) {\n', '            // Set new deployer\n', '            address oldDeployer = deployer;\n', '            deployer = newDeployer;\n', '\n', '            // Emit event\n', '            emit SetDeployerEvent(oldDeployer, newDeployer);\n', '        }\n', '    }\n', '\n', '    /// @notice Set the operator of this contract\n', '    /// @param newOperator The address of the new operator\n', '    function setOperator(address newOperator)\n', '    public\n', '    onlyOperator\n', '    notNullOrThisAddress(newOperator)\n', '    {\n', '        if (newOperator != operator) {\n', '            // Set new operator\n', '            address oldOperator = operator;\n', '            operator = newOperator;\n', '\n', '            // Emit event\n', '            emit SetOperatorEvent(oldOperator, newOperator);\n', '        }\n', '    }\n', '\n', '    /// @notice Gauge whether message sender is deployer or not\n', '    /// @return true if msg.sender is deployer, else false\n', '    function isDeployer()\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        return msg.sender == deployer;\n', '    }\n', '\n', '    /// @notice Gauge whether message sender is operator or not\n', '    /// @return true if msg.sender is operator, else false\n', '    function isOperator()\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        return msg.sender == operator;\n', '    }\n', '\n', '    /// @notice Gauge whether message sender is operator or deployer on the one hand, or none of these on these on\n', '    /// on the other hand\n', '    /// @return true if msg.sender is operator, else false\n', '    function isDeployerOrOperator()\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        return isDeployer() || isOperator();\n', '    }\n', '\n', '    // Modifiers\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    modifier onlyDeployer() {\n', '        require(isDeployer());\n', '        _;\n', '    }\n', '\n', '    modifier notDeployer() {\n', '        require(!isDeployer());\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator());\n', '        _;\n', '    }\n', '\n', '    modifier notOperator() {\n', '        require(!isOperator());\n', '        _;\n', '    }\n', '\n', '    modifier onlyDeployerOrOperator() {\n', '        require(isDeployerOrOperator());\n', '        _;\n', '    }\n', '\n', '    modifier notDeployerOrOperator() {\n', '        require(!isDeployerOrOperator());\n', '        _;\n', '    }\n', '}\n', '\n', 'contract TokenMultiTimelock is Ownable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    //\n', '    // Structures\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    struct Release {\n', '        uint256 earliestReleaseTime;\n', '        uint256 amount;\n', '        uint256 blockNumber;\n', '        bool done;\n', '    }\n', '\n', '    //\n', '    // Variables\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    IERC20 public token;\n', '    address public beneficiary;\n', '\n', '    Release[] public releases;\n', '    uint256 public totalLockedAmount;\n', '    uint256 public executedReleasesCount;\n', '\n', '    //\n', '    // Events\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    event SetTokenEvent(IERC20 token);\n', '    event SetBeneficiaryEvent(address beneficiary);\n', '    event DefineReleaseEvent(uint256 earliestReleaseTime, uint256 amount, uint256 blockNumber);\n', '    event SetReleaseBlockNumberEvent(uint256 index, uint256 blockNumber);\n', '    event ReleaseEvent(uint256 index, uint256 blockNumber, uint256 earliestReleaseTime,\n', '        uint256 actualReleaseTime, uint256 amount);\n', '\n', '    //\n', '    // Constructor\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    constructor(address deployer)\n', '    Ownable(deployer)\n', '    public\n', '    {\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    /// @notice Set the address of token\n', '    /// @param _token The address of token\n', '    function setToken(IERC20 _token)\n', '    public\n', '    onlyOperator\n', '    notNullOrThisAddress(_token)\n', '    {\n', '        // Require that the token has not previously been set\n', '        require(address(token) == address(0));\n', '\n', '        // Update beneficiary\n', '        token = _token;\n', '\n', '        // Emit event\n', '        emit SetTokenEvent(token);\n', '    }\n', '\n', '    /// @notice Set the address of beneficiary\n', '    /// @param _beneficiary The new address of beneficiary\n', '    function setBeneficiary(address _beneficiary)\n', '    public\n', '    onlyOperator\n', '    notNullAddress(_beneficiary)\n', '    {\n', '        // Update beneficiary\n', '        beneficiary = _beneficiary;\n', '\n', '        // Emit event\n', '        emit SetBeneficiaryEvent(beneficiary);\n', '    }\n', '\n', '    /// @notice Define a set of new releases\n', '    /// @param earliestReleaseTimes The timestamp after which the corresponding amount may be released\n', '    /// @param amounts The amounts to be released\n', '    /// @param releaseBlockNumbers The set release block numbers for releases whose earliest release time\n', '    /// is in the past\n', '    function defineReleases(uint256[] earliestReleaseTimes, uint256[] amounts, uint256[] releaseBlockNumbers)\n', '    onlyOperator\n', '    public\n', '    {\n', '        require(earliestReleaseTimes.length == amounts.length);\n', '        require(earliestReleaseTimes.length >= releaseBlockNumbers.length);\n', '\n', '        // Require that token address has been set\n', '        require(address(token) != address(0));\n', '\n', '        for (uint256 i = 0; i < earliestReleaseTimes.length; i++) {\n', '            // Update the total amount locked by this contract\n', '            totalLockedAmount += amounts[i];\n', '\n', '            // Require that total amount locked is smaller than or equal to the token balance of\n', '            // this contract\n', '            require(token.balanceOf(address(this)) >= totalLockedAmount);\n', '\n', '            // Retrieve early block number where available\n', '            uint256 blockNumber = i < releaseBlockNumbers.length ? releaseBlockNumbers[i] : 0;\n', '\n', '            // Add release\n', '            releases.push(Release(earliestReleaseTimes[i], amounts[i], blockNumber, false));\n', '\n', '            // Emit event\n', '            emit DefineReleaseEvent(earliestReleaseTimes[i], amounts[i], blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Get the count of releases\n', '    /// @return The number of defined releases\n', '    function releasesCount()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return releases.length;\n', '    }\n', '\n', '    /// @notice Set the block number of a release that is not done\n', '    /// @param index The index of the release\n', '    /// @param blockNumber The updated block number\n', '    function setReleaseBlockNumber(uint256 index, uint256 blockNumber)\n', '    public\n', '    onlyBeneficiary\n', '    {\n', '        // Require that the release is not done\n', '        require(!releases[index].done);\n', '\n', '        // Update the release block number\n', '        releases[index].blockNumber = blockNumber;\n', '\n', '        // Emit event\n', '        emit SetReleaseBlockNumberEvent(index, blockNumber);\n', '    }\n', '\n', '    /// @notice Transfers tokens held in the indicated release to beneficiary.\n', '    /// @param index The index of the release\n', '    function release(uint256 index)\n', '    public\n', '    onlyBeneficiary\n', '    {\n', '        // Get the release object\n', '        Release storage _release = releases[index];\n', '\n', '        // Require that this release has been properly defined by having non-zero amount\n', '        require(0 < _release.amount);\n', '\n', '        // Require that this release has not already been executed\n', '        require(!_release.done);\n', '\n', '        // Require that the current timestamp is beyond the nominal release time\n', '        require(block.timestamp >= _release.earliestReleaseTime);\n', '\n', '        // Set release done\n', '        _release.done = true;\n', '\n', '        // Set release block number if not previously set\n', '        if (0 == _release.blockNumber)\n', '            _release.blockNumber = block.number;\n', '\n', '        // Bump number of executed releases\n', '        executedReleasesCount++;\n', '\n', '        // Decrement the total locked amount\n', '        totalLockedAmount -= _release.amount;\n', '\n', '        // Execute transfer\n', '        token.safeTransfer(beneficiary, _release.amount);\n', '\n', '        // Emit event\n', '        emit ReleaseEvent(index, _release.blockNumber, _release.earliestReleaseTime, block.timestamp, _release.amount);\n', '    }\n', '\n', '    // Modifiers\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    modifier onlyBeneficiary() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract RevenueTokenManager is TokenMultiTimelock {\n', '    using SafeMathUintLib for uint256;\n', '\n', '    //\n', '    // Variables\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    uint256[] public totalReleasedAmounts;\n', '    uint256[] public totalReleasedAmountBlocks;\n', '\n', '    //\n', '    // Constructor\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    constructor(address deployer)\n', '    public\n', '    TokenMultiTimelock(deployer)\n', '    {\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    /// @notice Transfers tokens held in the indicated release to beneficiary\n', '    /// and update amount blocks\n', '    /// @param index The index of the release\n', '    function release(uint256 index)\n', '    public\n', '    onlyBeneficiary\n', '    {\n', '        // Call release of multi timelock\n', '        super.release(index);\n', '\n', '        // Add amount blocks\n', '        _addAmountBlocks(index);\n', '    }\n', '\n', '    /// @notice Calculate the released amount blocks, i.e. the area under the curve (AUC) of\n', '    /// release amount as function of block number\n', '    /// @param startBlock The start block number considered\n', '    /// @param endBlock The end block number considered\n', '    /// @return The calculated AUC\n', '    function releasedAmountBlocksIn(uint256 startBlock, uint256 endBlock)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        require(startBlock < endBlock);\n', '\n', '        if (executedReleasesCount == 0 || endBlock < releases[0].blockNumber)\n', '            return 0;\n', '\n', '        uint256 i = 0;\n', '        while (i < executedReleasesCount && releases[i].blockNumber < startBlock)\n', '            i++;\n', '\n', '        uint256 r;\n', '        if (i >= executedReleasesCount)\n', '            r = totalReleasedAmounts[executedReleasesCount - 1].mul(endBlock.sub(startBlock));\n', '\n', '        else {\n', '            uint256 l = (i == 0) ? startBlock : releases[i - 1].blockNumber;\n', '\n', '            uint256 h = releases[i].blockNumber;\n', '            if (h > endBlock)\n', '                h = endBlock;\n', '\n', '            h = h.sub(startBlock);\n', '            r = (h == 0) ? 0 : totalReleasedAmountBlocks[i].mul(h).div(releases[i].blockNumber.sub(l));\n', '            i++;\n', '\n', '            while (i < executedReleasesCount && releases[i].blockNumber < endBlock) {\n', '                r = r.add(totalReleasedAmountBlocks[i]);\n', '                i++;\n', '            }\n', '\n', '            if (i >= executedReleasesCount)\n', '                r = r.add(\n', '                    totalReleasedAmounts[executedReleasesCount - 1].mul(\n', '                        endBlock.sub(releases[executedReleasesCount - 1].blockNumber)\n', '                    )\n', '                );\n', '\n', '            else if (releases[i - 1].blockNumber < endBlock)\n', '                r = r.add(\n', '                    totalReleasedAmountBlocks[i].mul(\n', '                        endBlock.sub(releases[i - 1].blockNumber)\n', '                    ).div(\n', '                        releases[i].blockNumber.sub(releases[i - 1].blockNumber)\n', '                    )\n', '                );\n', '        }\n', '\n', '        return r;\n', '    }\n', '\n', '    /// @notice Get the block number of the release\n', '    /// @param index The index of the release\n', '    /// @return The block number of the release;\n', '    function releaseBlockNumbers(uint256 index)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return releases[index].blockNumber;\n', '    }\n', '\n', '    //\n', '    // Private functions\n', '    // -----------------------------------------------------------------------------------------------------------------\n', '    function _addAmountBlocks(uint256 index)\n', '    private\n', '    {\n', '        // Push total amount released and total released amount blocks\n', '        if (0 < index) {\n', '            totalReleasedAmounts.push(\n', '                totalReleasedAmounts[index - 1] + releases[index].amount\n', '            );\n', '            totalReleasedAmountBlocks.push(\n', '                totalReleasedAmounts[index - 1].mul(\n', '                    releases[index].blockNumber.sub(releases[index - 1].blockNumber)\n', '                )\n', '            );\n', '\n', '        } else {\n', '            totalReleasedAmounts.push(releases[index].amount);\n', '            totalReleasedAmountBlocks.push(0);\n', '        }\n', '    }\n', '}']