['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-05\n', '*/\n', '\n', 'pragma solidity "0.5.1";\n', '\n', '/* =========================================================================================================*/\n', '// ----------------------------------------------------------------------------\n', '// &#39;Deflationary&#39; token contract\n', '//\n', '// Symbol      : DTO\n', '// Name        : Deflationary\n', '// Total supply: 9800000\n', '// Decimals    : 0\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '        uint256 c = add(a,m);\n', '        uint256 d = sub(c,1);\n', '        return div(mul(d,m),m);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Deflationary is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint256 internal extras = 100;\n', '    uint private count=1;\n', '    \n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimals, address _owner) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        _totalSupply = 98e5; //9800000\n', '        owner = address(_owner);\n', '        balances[address(owner)] =  _totalSupply * 10**uint(decimals);\n', '        emit Transfer(address(0),address(owner), _totalSupply * 10**uint(decimals));\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t Accepts ETH\n', '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '        revert();\n', '    }\n', '    \n', '    function onePercent(uint256 _tokens) public view returns (uint256){\n', '        uint roundValue = _tokens.ceil(extras);\n', '        uint onePercentofTokens = roundValue.mul(extras).div(extras * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    /*===============================ERC20 functions=====================================*/\n', '    \n', '    function totalSupply() public view returns (uint){\n', '       return _totalSupply* 10**uint(decimals);\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(to != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        uint256 tokenstoTransfer;\n', '        \n', '        if(count > 100){\n', '            // calculate 1% of the tokens\n', '            uint256 onePercenToBurn = onePercent(tokens);\n', '            tokenstoTransfer = tokens.sub(onePercenToBurn);\n', '            \n', '            // burn one percent of tokens by transfering to zero address\n', '            balances[address(0)] = onePercenToBurn;\n', '        \n', '            // remove burned tokens from _totalSupply\n', '            _totalSupply = _totalSupply.sub(onePercenToBurn);\n', '        \n', '            // emit Transfer event to address(0)\n', '            emit Transfer(msg.sender,address(0),onePercenToBurn);\n', '        } \n', '        else {\n', '            tokenstoTransfer = tokens;\n', '            count++;\n', '        }\n', '        \n', '        require(balances[to] + tokenstoTransfer >= balances[to]);\n', '        \n', '        // Transfer the unburned tokens to "to" address\n', '        balances[to] = balances[to].add(tokenstoTransfer);\n', '        \n', '        // emit Transfer event to "to" address\n', '        emit Transfer(msg.sender,to,tokenstoTransfer);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens); // check if sufficient balance exist or not\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        \n', '        uint256 tokenstoTransfer;\n', '        \n', '        if(count > 100){\n', '        // calculate 1% of the tokens\n', '        uint256 onePercenToBurn = onePercent(tokens);\n', '        tokenstoTransfer = tokens.sub(onePercenToBurn);\n', '        \n', '        // burn one percent of tokens by transfering to zero address\n', '        balances[address(0)] = onePercenToBurn;\n', '        \n', '        // remove burned tokens from _totalSupply\n', '        _totalSupply = _totalSupply.sub(onePercenToBurn);\n', '        \n', '        // emit Transfer event to address(0)\n', '        emit Transfer(from,address(0),onePercenToBurn);\n', '        } else {\n', '            tokenstoTransfer = tokens;\n', '            count++;\n', '        }\n', '        \n', '        require(balances[to] + tokenstoTransfer >= balances[to]);\n', '        // Transfer the unburned tokens to "to" address\n', '        balances[to] = balances[to].add(tokenstoTransfer);\n', '        \n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        \n', '        emit Transfer(from,to,tokenstoTransfer);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        require(spender != address(0));\n', '        require(tokens <= balances[msg.sender]);\n', '        require(tokens >= 0);\n', '        require(allowed[msg.sender][spender] == 0 || tokens == 0);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '}']