['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Interface{ \n', '  function totalSupply() public view returns (uint);\n', '\n', '  function balanceOf(address who) public view returns (uint);\n', ' \n', '  function transfer(address to, uint value) public returns (bool);\n', ' \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  \n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Interface{\n', ' \n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  \n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  \n', '  function approve (address spender, uint value) public returns (bool);\n', '\n', '  event Approval (address indexed owner, address indexed spender, uint value);\n', ' \n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  \n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    \n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', ' \n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); \n', '    uint256 c = _a / _b;\n', '   \n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', ' \n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  \n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Interface{\n', '  using SafeMath for uint256;\n', '\n', '\n', '  mapping (address => uint256) balances;\n', '\n', '\n', '  uint totalSupply_;\n', '\n', '\n', '  function totalSupply() public view returns (uint){\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public returns (bool){\n', '    require (_to != address(0));\n', '  \n', '    require (_value <= balances[msg.sender]);\n', '   \n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '\n', '    emit Transfer(msg.sender,_to,_value);\n', '   \n', '    return true; //모든것이 실행되면 참을 출력.\n', '\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns(uint balance){\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken{\n', '\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', ' \n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool){\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '   \n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from,_to,_value);\n', '    return true;\n', '\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns (bool){\n', '    allowed[msg.sender][_spender] = _value;\n', '   \n', '    emit Approval(msg.sender,_spender,_value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint){\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', 'contract VIM is StandardToken{\n', '\n', '  string public constant name = "VIM";\n', '  string public constant symbol = "VIM";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 4000000000 * (10**uint(decimals));\n', '\n', '  constructor() public{\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(0x0,msg.sender,INITIAL_SUPPLY);\n', '\n', '  }\n', '}']