['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    require(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    require(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TwoKeyCongressMembersRegistry {\n', '    /**\n', '     * This contract will serve as accountant for Members inside TwoKeyCongress\n', '     * contract. Only contract eligible to mutate state of this contract is TwoKeyCongress\n', "     * TwoKeyCongress will check for it's members from this contract.\n", '     */\n', '\n', '    using SafeMath for uint;\n', '\n', '    event MembershipChanged(address member, bool isMember);\n', '\n', '    address public TWO_KEY_CONGRESS;\n', '\n', '    // The maximum voting power containing sum of voting powers of all active members\n', '    uint256 public maxVotingPower;\n', '    //The minimum number of voting members that must be in attendance\n', '    uint256 public minimumQuorum;\n', '\n', '    // Mapping to check if the member is belonging to congress\n', '    mapping (address => bool) public isMemberInCongress;\n', '    // Mapping address to memberId\n', '    mapping(address => Member) public address2Member;\n', '    // Mapping to store all members addresses\n', '    address[] public allMembers;\n', '\n', '    struct Member {\n', '        address memberAddress;\n', '        bytes32 name;\n', '        uint votingPower;\n', '        uint memberSince;\n', '    }\n', '\n', '    modifier onlyTwoKeyCongress () {\n', '        require(msg.sender == TWO_KEY_CONGRESS);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param initialCongressMembers is the array containing addresses of initial members\n', '     * @param memberVotingPowers is the array of unassigned integers containing voting powers respectively\n', '     * @dev initialMembers.length must be equal votingPowers.length\n', '     */\n', '    constructor(\n', '        address[] initialCongressMembers,\n', '        bytes32[] initialCongressMemberNames,\n', '        uint[] memberVotingPowers,\n', '        address _twoKeyCongress\n', '    )\n', '    public\n', '    {\n', '        uint length = initialCongressMembers.length;\n', '        for(uint i=0; i<length; i++) {\n', '            addMemberInternal(\n', '                initialCongressMembers[i],\n', '                initialCongressMemberNames[i],\n', '                memberVotingPowers[i]\n', '            );\n', '        }\n', '        TWO_KEY_CONGRESS = _twoKeyCongress;\n', '    }\n', '\n', '    /**\n', '     * Add member\n', '     *\n', '     * Make `targetMember` a member named `memberName`\n', '     *\n', '     * @param targetMember ethereum address to be added\n', '     * @param memberName public name for that member\n', '     */\n', '    function addMember(\n', '        address targetMember,\n', '        bytes32 memberName,\n', '        uint _votingPower\n', '    )\n', '    public\n', '    onlyTwoKeyCongress\n', '    {\n', '        addMemberInternal(targetMember, memberName, _votingPower);\n', '    }\n', '\n', '    function addMemberInternal(\n', '        address targetMember,\n', '        bytes32 memberName,\n', '        uint _votingPower\n', '    )\n', '    internal\n', '    {\n', '        //Require that this member is not already a member of congress\n', '        require(isMemberInCongress[targetMember] == false);\n', '        minimumQuorum = allMembers.length;\n', '        maxVotingPower = maxVotingPower.add(_votingPower);\n', '        address2Member[targetMember] = Member(\n', '            {\n', '            memberAddress: targetMember,\n', '            memberSince: block.timestamp,\n', '            votingPower: _votingPower,\n', '            name: memberName\n', '            }\n', '        );\n', '        allMembers.push(targetMember);\n', '        isMemberInCongress[targetMember] = true;\n', '        emit MembershipChanged(targetMember, true);\n', '    }\n', '\n', '    /**\n', '     * Remove member\n', '     *\n', '     * @notice Remove membership from `targetMember`\n', '     *\n', '     * @param targetMember ethereum address to be removed\n', '     */\n', '    function removeMember(\n', '        address targetMember\n', '    )\n', '    public\n', '    onlyTwoKeyCongress\n', '    {\n', '        require(isMemberInCongress[targetMember] == true);\n', '\n', '        //Remove member voting power from max voting power\n', '        uint votingPower = getMemberVotingPower(targetMember);\n', '        maxVotingPower-= votingPower;\n', '\n', '        uint length = allMembers.length;\n', '        uint i=0;\n', '        //Find selected member\n', '        while(allMembers[i] != targetMember) {\n', '            if(i == length) {\n', '                revert();\n', '            }\n', '            i++;\n', '        }\n', '\n', '        // Move the lest member to this place\n', '        allMembers[i] = allMembers[length-1];\n', '\n', '        //After reduce array size\n', '        delete allMembers[allMembers.length-1];\n', '\n', '        uint newLength = allMembers.length.sub(1);\n', '        allMembers.length = newLength;\n', '\n', '        //Remove him from state mapping\n', '        isMemberInCongress[targetMember] = false;\n', '\n', '        //Remove his state to empty member\n', '        address2Member[targetMember] = Member(\n', '            {\n', '                memberAddress: address(0),\n', '                memberSince: block.timestamp,\n', '                votingPower: 0,\n', '                name: "0x0"\n', '            }\n', '        );\n', '        //Reduce 1 member from quorum\n', '        minimumQuorum = minimumQuorum.sub(1);\n', '    }\n', '\n', '    /// @notice Function getter for voting power for specific member\n', '    /// @param _memberAddress is the address of the member\n', '    /// @return integer representing voting power\n', '    function getMemberVotingPower(\n', '        address _memberAddress\n', '    )\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        Member memory _member = address2Member[_memberAddress];\n', '        return _member.votingPower;\n', '    }\n', '\n', '    /**\n', '     * @notice Function which will be exposed and congress will use it as "modifier"\n', "     * @param _address is the address we're willing to check if it belongs to congress\n", '     * @return true/false depending if it is either a member or not\n', '     */\n', '    function isMember(\n', '        address _address\n', '    )\n', '    public\n', '    view\n', '    returns (bool)\n', '    {\n', '        return isMemberInCongress[_address];\n', '    }\n', '\n', '    /// @notice Getter for length for how many members are currently\n', '    /// @return length of members\n', '    function getMembersLength()\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        return allMembers.length;\n', '    }\n', '\n', '    /// @notice Function to get addresses of all members in congress\n', '    /// @return array of addresses\n', '    function getAllMemberAddresses()\n', '    public\n', '    view\n', '    returns (address[])\n', '    {\n', '        return allMembers;\n', '    }\n', '\n', '    /// Basic getter function\n', '    function getMemberInfo()\n', '    public\n', '    view\n', '    returns (address, bytes32, uint, uint)\n', '    {\n', '        Member memory member = address2Member[msg.sender];\n', '        return (member.memberAddress, member.name, member.votingPower, member.memberSince);\n', '    }\n', '}']