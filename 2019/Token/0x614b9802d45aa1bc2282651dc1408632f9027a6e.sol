['pragma solidity ^0.5.3;\n', '\n', 'contract TrustInvest{\n', '    event mintTransfer(address indexe,uint);\n', '    event Transfer(address indexed _from,address indexed _to,uint _amount);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Burn(address,uint);\n', '    string public constant name="TrustInvest";\n', '    string public constant symbol="TIC";\n', '    uint public constant decimals=18;\n', '    uint  public constant initialSuply=27000000000;\n', '    uint public  totalSupply= initialSuply*10**decimals;\n', '    address ownerOfTotalSupply;\n', '    constructor(address _ownerOfTotalSupply)public{\n', '        ownerOfTotalSupply = _ownerOfTotalSupply;\n', '        balanceOf[_ownerOfTotalSupply] = totalSupply;\n', '    }\n', '    mapping(address=>uint)balanceOf;\n', '    mapping(address=>mapping(address=>uint))allowed;\n', '    function balance(address _owner)public view returns(uint){\n', '        return(balanceOf[_owner]);\n', '    }\n', '    function _transfer(address _from,address _to,uint _value)public {\n', '        require(_to != address(0x0));\n', '        require(balanceOf[_from]>= _value);\n', '        require(balanceOf[_to]+_value >= balanceOf[_to]);\n', '        require(_value>0 );\n', '        uint previosBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from]-=_value;\n', '        balanceOf[_to]+=_value;\n', '        emit Transfer(_from,_to,_value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previosBalances);\n', '    }\n', '    function transfer(address _to,uint _value)public returns(bool success){\n', '        _transfer(msg.sender,_to,_value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from,address _to,uint _value)public returns(bool success){\n', '        require(_value<=allowed[_from][msg.sender]);\n', '        _transfer(_from,_to,_value);\n', '        return true;\n', '    }\n', '    function approve(address _spender,uint _value)public returns(bool success){\n', '        allowed[msg.sender][_spender]=_value;\n', '        emit Approval(msg.sender,_spender,_value);\n', '        return true;\n', '    }\n', '    function mintToken(address _target,uint _amountMintToken)public{\n', '        require(msg.sender == ownerOfTotalSupply);\n', '        balanceOf[_target]+=_amountMintToken;\n', '        totalSupply+=_amountMintToken;\n', '        emit mintTransfer(ownerOfTotalSupply,_amountMintToken);\n', '        emit Transfer(ownerOfTotalSupply,_target,_amountMintToken);\n', '    }\n', '    function burn(uint _amount)public returns(bool success){\n', '        require(msg.sender == ownerOfTotalSupply);\n', '        require(balanceOf[msg.sender] >=_amount);\n', '        balanceOf[msg.sender]-=_amount;\n', '        totalSupply-=_amount;\n', '        emit Burn(msg.sender,_amount);\n', '        return true;\n', '    }\n', '    function burnFrom(address _from,uint _amount)public  returns(bool success){\n', '        require(balanceOf[_from]>= _amount);\n', '        require(_amount<=allowed[_from][msg.sender]);\n', '        balanceOf[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        totalSupply-=_amount;\n', '        emit Burn(_from,_amount);\n', '        return true;\n', '        \n', '    }\n', '}']