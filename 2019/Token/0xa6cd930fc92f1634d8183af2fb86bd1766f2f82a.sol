['// File: contracts/lib/interface/ICelerWallet.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title CelerWallet interface\n', ' */\n', 'interface ICelerWallet {\n', '    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\n', '\n', '    function depositETH(bytes32 _walletId) external payable;\n', '\n', '    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\n', '    \n', '    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\n', '\n', '    function getOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\n', '\n', '    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\n', '\n', '    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\n', '\n', '    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\n', '\n', '    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\n', '\n', '    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\n', '\n', '    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\n', '\n', '    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\n', '\n', '    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/CelerWallet.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title CelerWallet contract\n', ' * @notice A multi-owner, multi-token, operator-centric wallet designed for CelerChannel.\n', " *   This wallet can run independetly and doesn't rely on trust of any external contracts\n", ' *   even CelerLedger to maximize its security.\n', ' */\n', 'contract CelerWallet is ICelerWallet, Pausable {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    enum MathOperation { Add, Sub }\n', '\n', '    struct Wallet {\n', '        // corresponding to peers in CelerLedger\n', '        address[] owners;\n', '        // corresponding to CelerLedger\n', '        address operator;\n', '        // adderss(0) for ETH\n', '        mapping(address => uint) balances;\n', '        address proposedNewOperator;\n', '        mapping(address => bool) proposalVotes;\n', '    }\n', '\n', '    uint public walletNum;\n', '    mapping(bytes32 => Wallet) private wallets;\n', '\n', '    /**\n', "     * @dev Throws if called by any account other than the wallet's operator\n", '     * @param _walletId id of the wallet to be operated\n', '     */\n', '    modifier onlyOperator(bytes32 _walletId) {\n', '        require(msg.sender == wallets[_walletId].operator, "msg.sender is not operator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if given address is not an owner of the wallet\n', '     * @param _walletId id of the wallet to be operated\n', '     * @param _addr address to be checked\n', '     */\n', '    modifier onlyWalletOwner(bytes32 _walletId, address _addr) {\n', '        require(_isWalletOwner(_walletId, _addr), "Given address is not wallet owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Create a new wallet\n', '     * @param _owners owners of the wallet\n', '     * @param _operator initial operator of the wallet\n', '     * @param _nonce nonce given by caller to generate the wallet id\n', '     * @return id of created wallet\n', '     */\n', '    function create(\n', '        address[] memory _owners,\n', '        address _operator,\n', '        bytes32 _nonce\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns(bytes32)\n', '    {\n', '        require(_operator != address(0), "New operator is address(0)");\n', '\n', '        bytes32 walletId = keccak256(abi.encodePacked(address(this), msg.sender, _nonce));\n', '        Wallet storage w = wallets[walletId];\n', '        // wallet must be uninitialized\n', '        require(w.operator == address(0), "Occupied wallet id");\n', '        w.owners = _owners;\n', '        w.operator = _operator;\n', '        walletNum++;\n', '\n', '        emit CreateWallet(walletId, _owners, _operator);\n', '        return walletId;\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit ETH to a wallet\n', '     * @param _walletId id of the wallet to deposit into\n', '     */\n', '    function depositETH(bytes32 _walletId) public payable whenNotPaused {\n', '        uint amount = msg.value;\n', '        _updateBalance(_walletId, address(0), amount, MathOperation.Add);\n', '        emit DepositToWallet(_walletId, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit ERC20 tokens to a wallet\n', '     * @param _walletId id of the wallet to deposit into\n', '     * @param _tokenAddress address of token to deposit\n', '     * @param _amount deposit token amount\n', '     */\n', '    function depositERC20(\n', '        bytes32 _walletId,\n', '        address _tokenAddress,\n', '        uint _amount\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        _updateBalance(_walletId, _tokenAddress, _amount, MathOperation.Add);\n', '        emit DepositToWallet(_walletId, _tokenAddress, _amount);\n', '\n', '        IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw funds to an address\n', '     * @dev Since this withdraw() function uses direct transfer to send ETH, if CelerLedger\n', '     *   allows non externally-owned account (EOA) to be a peer of the channel namely an owner\n', '     *   of the wallet, CelerLedger should implement a withdraw pattern for ETH to avoid\n', '     *   maliciously fund locking. Withdraw pattern reference:\n', '     *   https://solidity.readthedocs.io/en/v0.5.9/common-patterns.html#withdrawal-from-contracts\n', '     * @param _walletId id of the wallet to withdraw from\n', '     * @param _tokenAddress address of token to withdraw\n', '     * @param _receiver token receiver\n', '     * @param _amount withdrawal token amount\n', '     */\n', '    function withdraw(\n', '        bytes32 _walletId,\n', '        address _tokenAddress,\n', '        address _receiver,\n', '        uint _amount\n', '    )\n', '        public\n', '        whenNotPaused\n', '        onlyOperator(_walletId)\n', '        onlyWalletOwner(_walletId, _receiver)\n', '    {\n', '        _updateBalance(_walletId, _tokenAddress, _amount, MathOperation.Sub);\n', '        emit WithdrawFromWallet(_walletId, _tokenAddress, _receiver, _amount);\n', '\n', '        _withdrawToken(_tokenAddress, _receiver, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer funds from one wallet to another wallet with a same owner (as the receiver)\n', '     * @dev from wallet and to wallet must have one common owner as the receiver or beneficiary\n', '     *   of this transfer\n', '     * @param _fromWalletId id of wallet to transfer funds from\n', '     * @param _toWalletId id of wallet to transfer funds to\n', '     * @param _tokenAddress address of token to transfer\n', '     * @param _receiver beneficiary who transfers her funds from one wallet to another wallet\n', '     * @param _amount transferred token amount\n', '     */\n', '    function transferToWallet(\n', '        bytes32 _fromWalletId,\n', '        bytes32 _toWalletId,\n', '        address _tokenAddress,\n', '        address _receiver,\n', '        uint _amount\n', '    )\n', '        public\n', '        whenNotPaused\n', '        onlyOperator(_fromWalletId)\n', '        onlyWalletOwner(_fromWalletId, _receiver)\n', '        onlyWalletOwner(_toWalletId, _receiver)\n', '    {\n', '        _updateBalance(_fromWalletId, _tokenAddress, _amount, MathOperation.Sub);\n', '        _updateBalance(_toWalletId, _tokenAddress, _amount, MathOperation.Add);\n', '        emit TransferToWallet(_fromWalletId, _toWalletId, _tokenAddress, _receiver, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Current operator transfers the operatorship of a wallet to the new operator\n', '     * @param _walletId id of wallet to transfer the operatorship\n', '     * @param _newOperator the new operator\n', '     */\n', '    function transferOperatorship(\n', '        bytes32 _walletId,\n', '        address _newOperator\n', '    )\n', '        public\n', '        whenNotPaused\n', '        onlyOperator(_walletId)\n', '    {\n', '        _changeOperator(_walletId, _newOperator);\n', '    }\n', '\n', '    /**\n', '     * @notice Wallet owners propose and assign a new operator of their wallet\n', '     * @dev it will assign a new operator if all owners propose the same new operator.\n', '     *   This does not require unpaused.\n', '     * @param _walletId id of wallet which owners propose new operator of\n', '     * @param _newOperator the new operator proposal\n', '     */\n', '    function proposeNewOperator(\n', '        bytes32 _walletId,\n', '        address _newOperator\n', '    )\n', '        public\n', '        onlyWalletOwner(_walletId, msg.sender)\n', '    {\n', '        require(_newOperator != address(0), "New operator is address(0)");\n', '\n', '        Wallet storage w = wallets[_walletId];\n', '        if (_newOperator != w.proposedNewOperator) {\n', '            _clearVotes(w);\n', '            w.proposedNewOperator = _newOperator;\n', '        }\n', '\n', '        w.proposalVotes[msg.sender] = true;\n', '        emit ProposeNewOperator(_walletId, _newOperator, msg.sender);\n', '\n', '        if (_checkAllVotes(w)) {\n', '            _changeOperator(_walletId, _newOperator);\n', '            _clearVotes(w);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Pauser drains one type of tokens when paused\n', '     * @dev This is for emergency situations.\n', '     * @param _tokenAddress address of token to drain\n', '     * @param _receiver token receiver\n', '     * @param _amount drained token amount\n', '     */\n', '    function drainToken(\n', '        address _tokenAddress,\n', '        address _receiver,\n', '        uint _amount\n', '    )\n', '        public\n', '        whenPaused\n', '        onlyPauser\n', '    {\n', '        emit DrainToken(_tokenAddress, _receiver, _amount);\n', '\n', '        _withdrawToken(_tokenAddress, _receiver, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get owners of a given wallet\n', '     * @param _walletId id of the queried wallet\n', "     * @return wallet's owners\n", '     */\n', '    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory) {\n', '        return wallets[_walletId].owners;\n', '    }\n', '\n', '    /**\n', '     * @notice Get operator of a given wallet\n', '     * @param _walletId id of the queried wallet\n', "     * @return wallet's operator\n", '     */\n', '    function getOperator(bytes32 _walletId) public view returns(address) {\n', '        return wallets[_walletId].operator;\n', '    }\n', '\n', '    /**\n', '     * @notice Get balance of a given token in a given wallet\n', '     * @param _walletId id of the queried wallet\n', '     * @param _tokenAddress address of the queried token\n', '     * @return amount of the given token in the wallet\n', '     */\n', '    function getBalance(bytes32 _walletId, address _tokenAddress) public view returns(uint) {\n', '        return wallets[_walletId].balances[_tokenAddress];\n', '    }\n', '\n', '    /**\n', '     * @notice Get proposedNewOperator of a given wallet\n', '     * @param _walletId id of the queried wallet\n', "     * @return wallet's proposedNewOperator\n", '     */\n', '    function getProposedNewOperator(bytes32 _walletId) external view returns(address) {\n', '        return wallets[_walletId].proposedNewOperator;\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice Get the vote of an owner for the proposedNewOperator of a wallet\n', '     * @param _walletId id of the queried wallet\n', '     * @param _owner owner to be checked\n', "     * @return the owner's vote for the proposedNewOperator\n", '     */\n', '    function getProposalVote(\n', '        bytes32 _walletId,\n', '        address _owner\n', '    )\n', '        external\n', '        view\n', '        onlyWalletOwner(_walletId, _owner)\n', '        returns(bool)\n', '    {\n', '        return wallets[_walletId].proposalVotes[_owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to withdraw out one type of token\n', '     * @param _tokenAddress address of token to withdraw\n', '     * @param _receiver token receiver\n', '     * @param _amount withdrawal token amount\n', '     */\n', '    function _withdrawToken(address _tokenAddress, address _receiver, uint _amount) internal {\n', '        if (_tokenAddress == address(0)) {\n', '            // convert from address to address payable\n', '            // TODO: latest version of openzeppelin Address.sol provide this api toPayable()\n', '            address payable receiver  = address(uint160(_receiver));\n', '            receiver.transfer(_amount);\n', '        } else {\n', '            IERC20(_tokenAddress).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Update balance record\n', '     * @param _walletId id of wallet to update\n', '     * @param _tokenAddress address of token to update\n', '     * @param _amount update amount\n', '     * @param _op update operation\n', '     */\n', '    function _updateBalance(\n', '        bytes32 _walletId,\n', '        address _tokenAddress,\n', '        uint _amount,\n', '        MathOperation _op\n', '    )\n', '        internal\n', '    {\n', '        Wallet storage w = wallets[_walletId];\n', '        if (_op == MathOperation.Add) {\n', '            w.balances[_tokenAddress] = w.balances[_tokenAddress].add(_amount);\n', '        } else if (_op == MathOperation.Sub) {\n', '            w.balances[_tokenAddress] = w.balances[_tokenAddress].sub(_amount);\n', '        } else {\n', '            assert(false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Clear all votes of new operator proposals of the wallet\n', '     * @param _w the wallet\n', '     */\n', '    function _clearVotes(Wallet storage _w) internal {\n', '        for (uint i = 0; i < _w.owners.length; i++) {\n', '            _w.proposalVotes[_w.owners[i]] = false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function of changing the operator of a wallet\n', '     * @param _walletId id of wallet to change its operator\n', '     * @param _newOperator the new operator\n', '     */\n', '    function _changeOperator(bytes32 _walletId, address _newOperator) internal {\n', '        require(_newOperator != address(0), "New operator is address(0)");\n', '\n', '        Wallet storage w = wallets[_walletId];\n', '        address oldOperator = w.operator;\n', '        w.operator = _newOperator;\n', '        emit ChangeOperator(_walletId, oldOperator, _newOperator);\n', '    }\n', '\n', '    /**\n', '     * @notice Check if all owners have voted for the same new operator\n', '     * @param _w the wallet\n', '     * @return true if all owners have voted for a same operator; otherwise false\n', '     */\n', '    function _checkAllVotes(Wallet storage _w) internal view returns(bool) {\n', '        for (uint i = 0; i < _w.owners.length; i++) {\n', '            if (_w.proposalVotes[_w.owners[i]] == false) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Check if an address is an owner of a wallet\n', '     * @param _walletId id of wallet to check\n', '     * @param _addr address to check\n', '     * @return true if this address is an owner of the wallet; otherwise false\n', '     */\n', '    function _isWalletOwner(bytes32 _walletId, address _addr) internal view returns(bool) {\n', '        Wallet storage w = wallets[_walletId];\n', '        for (uint i = 0; i < w.owners.length; i++) {\n', '            if (_addr == w.owners[i]) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '}']