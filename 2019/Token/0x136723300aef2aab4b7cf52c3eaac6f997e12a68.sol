['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HAI {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name = "HAI";      //  token name\n', '    \n', '    string public symbol = "HAI";           //  token symbol\n', '    \n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', ' \n', '    \n', '    uint256 public totalSupply = 0;\n', '\n', '    uint256 constant valueFounder = 1000000000000000000;\n', '    \n', '    \n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    constructor() public {\n', '\n', '        totalSupply = valueFounder;\n', '        balanceOf[msg.sender] = valueFounder;\n', '        emit Transfer(0x0, msg.sender, valueFounder);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) private {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']