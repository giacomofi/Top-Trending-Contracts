['pragma solidity >=0.4.24;\n', '/* @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/helpers/Ownable.sol\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions". This adds two-phase\n', " * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \n", ' * designates a new owner but does not actually transfer ownership. The new owner then accepts \n', ' * ownership and completes the transfer.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public pendingOwner;\n', '\n', '\n', '    event OwnershipTransferred(\n', '      address indexed previousOwner,\n', '      address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Account is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner, "Account is not pending owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "Empty address");\n', '        pendingOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the pendingOwner address to finalize the transfer.\n', '    */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/token/dataStorage/AllowanceSheet.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @title AllowanceSheet\n', '* @notice A wrapper around an allowance mapping. \n', '*/\n', 'contract AllowanceSheet is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowanceOf;\n', '\n', '    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n', '        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\n', '    }\n', '\n', '    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n', '        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\n', '    }\n', '\n', '    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n', '        allowanceOf[_tokenHolder][_spender] = _value;\n', '    }\n', '}\n', '\n', '// File: contracts/token/dataStorage/BalanceSheet.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @title BalanceSheet\n', '* @notice A wrapper around the balanceOf mapping. \n', '*/\n', 'contract BalanceSheet is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    uint256 public totalSupply;\n', '\n', '    function addBalance(address _addr, uint256 _value) public onlyOwner {\n', '        balanceOf[_addr] = balanceOf[_addr].add(_value);\n', '    }\n', '\n', '    function subBalance(address _addr, uint256 _value) public onlyOwner {\n', '        balanceOf[_addr] = balanceOf[_addr].sub(_value);\n', '    }\n', '\n', '    function setBalance(address _addr, uint256 _value) public onlyOwner {\n', '        balanceOf[_addr] = _value;\n', '    }\n', '\n', '    function addTotalSupply(uint256 _value) public onlyOwner {\n', '        totalSupply = totalSupply.add(_value);\n', '    }\n', '\n', '    function subTotalSupply(uint256 _value) public onlyOwner {\n', '        totalSupply = totalSupply.sub(_value);\n', '    }\n', '\n', '    function setTotalSupply(uint256 _value) public onlyOwner {\n', '        totalSupply = _value;\n', '    }\n', '}\n', '\n', '// File: contracts/token/dataStorage/TokenStorage.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @title TokenStorage\n', '*/\n', 'contract TokenStorage {\n', '    /**\n', '        Storage\n', '    */\n', '    BalanceSheet public balances;\n', '    AllowanceSheet public allowances;\n', '\n', '\n', '    string public name;   //name of Token                \n', '    uint8  public decimals;        //decimals of Token        \n', '    string public symbol;   //Symbol of Token\n', '\n', '    /**\n', '    * @dev a TokenStorage consumer can set its storages only once, on construction\n', '    *\n', '    **/\n', '    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public {\n', '        balances = BalanceSheet(_balances);\n', '        allowances = AllowanceSheet(_allowances);\n', '\n', '        name = _name;\n', '        decimals = _decimals;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '    * @dev claim ownership of balance sheet passed into constructor.\n', '    **/\n', '    function claimBalanceOwnership() public {\n', '        balances.claimOwnership();\n', '    }\n', '\n', '    /**\n', '    * @dev claim ownership of allowance sheet passed into constructor.\n', '    **/\n', '    function claimAllowanceOwnership() public {\n', '        allowances.claimOwnership();\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/token/AkropolisBaseToken.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @title AkropolisBaseToken\n', '* @notice A basic ERC20 token with modular data storage\n', '*/\n', 'contract AkropolisBaseToken is ERC20, TokenStorage, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /** Events */\n', '    event Mint(address indexed to, uint256 value);\n', '    event MintFinished();\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public \n', '    TokenStorage(_balances, _allowances, _name, _decimals, _symbol) {}\n', '\n', '    /** Modifiers **/\n', '\n', '    modifier canMint() {\n', '        require(!isMintingFinished());\n', '        _;\n', '    }\n', '\n', '    /** Functions **/\n', '\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint {\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) public onlyOwner {\n', '        _burn(msg.sender, _amount);\n', '    }\n', '\n', '\n', '    function isMintingFinished() public view returns (bool) {\n', '        bytes32 slot = keccak256(abi.encode("Minting", "mint"));\n', '        uint256 v;\n', '        assembly {\n', '            v := sload(slot)\n', '        }\n', '        return v != 0;\n', '    }\n', '\n', '\n', '    function setMintingFinished(bool value) internal {\n', '        bytes32 slot = keccak256(abi.encode("Minting", "mint"));\n', '        uint256 v = value ? 1 : 0;\n', '        assembly {\n', '            sstore(slot, v)\n', '        }\n', '    }\n', '\n', '    function mintFinished() public onlyOwner {\n', '        setMintingFinished(true);\n', '        emit MintFinished();\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) \n', '    public returns (bool) {\n', '        allowances.setAllowance(msg.sender, _spender, _value);\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        require(_to != address(0),"to address cannot be 0x0");\n', '        require(_amount <= balanceOf(msg.sender),"not enough balance to transfer");\n', '\n', '        balances.subBalance(msg.sender, _amount);\n', '        balances.addBalance(_to, _amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) \n', '    public returns (bool) {\n', '        require(_amount <= allowance(_from, msg.sender),"not enough allowance to transfer");\n', '        require(_to != address(0),"to address cannot be 0x0");\n', '        require(_amount <= balanceOf(_from),"not enough balance to transfer");\n', '        \n', '        allowances.subAllowance(_from, msg.sender, _amount);\n', '        balances.addBalance(_to, _amount);\n', '        balances.subBalance(_from, _amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Implements balanceOf() as specified in the ERC20 standard.\n', '    */\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return balances.balanceOf(who);\n', '    }\n', '\n', '    /**\n', '    * @notice Implements allowance() as specified in the ERC20 standard.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowances.allowanceOf(owner, spender);\n', '    }\n', '\n', '    /**\n', '    * @notice Implements totalSupply() as specified in the ERC20 standard.\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return balances.totalSupply();\n', '    }\n', '\n', '\n', '    /** Internal functions **/\n', '\n', '    function _burn(address _tokensOf, uint256 _amount) internal {\n', '        require(_amount <= balanceOf(_tokensOf),"not enough balance to burn");\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        balances.subBalance(_tokensOf, _amount);\n', '        balances.subTotalSupply(_amount);\n', '        emit Burn(_tokensOf, _amount);\n', '        emit Transfer(_tokensOf, address(0), _amount);\n', '    }\n', '\n', '    function _mint(address _to, uint256 _amount) internal {\n', '        balances.addTotalSupply(_amount);\n', '        balances.addBalance(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/helpers/Lockable.sol\n', '\n', '\n', '\n', '\n', '/**\n', '* @title Lockable\n', '* @dev Base contract which allows children to lock certain methods from being called by clients.\n', '* Locked methods are deemed unsafe by default, but must be implemented in children functionality to adhere by\n', '* some inherited standard, for example. \n', '*/\n', '\n', 'contract Lockable is Ownable {\n', '\t// Events\n', '\tevent Unlocked();\n', '\tevent Locked();\n', '\n', '\t// Modifiers\n', '\t/**\n', '\t* @dev Modifier that disables functions by default unless they are explicitly enabled\n', '\t*/\n', '\tmodifier whenUnlocked() {\n', '\t\trequire(!isLocked(), "Contact is locked");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev called by the owner to disable method, back to normal state\n', '\t*/\n', '\tfunction lock() public  onlyOwner {\n', '\t\tsetLock(true);\n', '\t\temit Locked();\n', '\t}\n', '\n', '\t// Methods\n', '\t/**\n', '\t* @dev called by the owner to enable method\n', '\t*/\n', '\tfunction unlock() public onlyOwner  {\n', '\t\tsetLock(false);\n', '\t\temit Unlocked();\n', '\t}\n', '\n', '\tfunction setLock(bool value) internal {\n', '        bytes32 slot = keccak256(abi.encode("Lockable", "lock"));\n', '        uint256 v = value ? 1 : 0;\n', '        assembly {\n', '            sstore(slot, v)\n', '        }\n', '    }\n', '\n', '    function isLocked() public view returns (bool) {\n', '        bytes32 slot = keccak256(abi.encode("Lockable", "lock"));\n', '        uint256 v;\n', '        assembly {\n', '            v := sload(slot)\n', '        }\n', '        return v != 0;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/helpers/Pausable.sol\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism. Identical to OpenZeppelin version\n', ' * except that it uses local Ownable contract\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!isPaused(), "Contract is paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(isPaused(), "Contract is not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner  whenNotPaused  {\n', '        setPause(true);\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner  whenPaused {\n', '        setPause(false);\n', '        emit Unpause();\n', '    }\n', '\n', '    function setPause(bool value) internal {\n', '        bytes32 slot = keccak256(abi.encode("Pausable", "pause"));\n', '        uint256 v = value ? 1 : 0;\n', '        assembly {\n', '            sstore(slot, v)\n', '        }\n', '    }\n', '\n', '    function isPaused() public view returns (bool) {\n', '        bytes32 slot = keccak256(abi.encode("Pausable", "pause"));\n', '        uint256 v;\n', '        assembly {\n', '            v := sload(slot)\n', '        }\n', '        return v != 0;\n', '    }\n', '}\n', '\n', '// File: contracts/helpers/Whitelist.sol\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev Base contract which allows children to implement an emergency whitelist mechanism. Identical to OpenZeppelin version\n', ' * except that it uses local Ownable contract\n', ' */\n', ' \n', 'contract Whitelist is Ownable {\n', '    event AddToWhitelist(address indexed to);\n', '    event RemoveFromWhitelist(address indexed to);\n', '    event EnableWhitelist();\n', '    event DisableWhitelist();\n', '    event AddPermBalanceToWhitelist(address indexed to, uint256 balance);\n', '    event RemovePermBalanceToWhitelist(address indexed to);\n', '\n', '    mapping(address => bool) internal whitelist;\n', '    mapping (address => uint256) internal permBalancesForWhitelist;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when msg.sender is in whitelist.\n', '    */\n', '    modifier onlyWhitelist() {\n', '        if (isWhitelisted() == true) {\n', '            require(whitelist[msg.sender] == true, "Address is not in whitelist");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when msg.sender is in permitted balance\n', '    */\n', '    modifier checkPermBalanceForWhitelist(uint256 value) {\n', '        if (isWhitelisted() == true) {\n', '            require(permBalancesForWhitelist[msg.sender]==0 || permBalancesForWhitelist[msg.sender]>=value, "Not permitted balance for transfer");\n', '        }\n', '        \n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to set permitted balance for transfer\n', '    */\n', '\n', '    function addPermBalanceToWhitelist(address _owner, uint256 _balance) public onlyOwner {\n', '        permBalancesForWhitelist[_owner] = _balance;\n', '        emit AddPermBalanceToWhitelist(_owner, _balance);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to remove permitted balance for transfer\n', '    */\n', '    function removePermBalanceToWhitelist(address _owner) public onlyOwner {\n', '        permBalancesForWhitelist[_owner] = 0;\n', '        emit RemovePermBalanceToWhitelist(_owner);\n', '    }\n', '   \n', '    /**\n', '    * @dev called by the owner to enable whitelist\n', '    */\n', '\n', '    function enableWhitelist() public onlyOwner {\n', '        setWhitelisted(true);\n', '        emit EnableWhitelist();\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev called by the owner to disable whitelist\n', '    */\n', '    function disableWhitelist() public onlyOwner {\n', '        setWhitelisted(false);\n', '        emit DisableWhitelist();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to enable some address for whitelist\n', '    */\n', '    function addToWhitelist(address _address) public onlyOwner  {\n', '        whitelist[_address] = true;\n', '        emit AddToWhitelist(_address);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to disable address for whitelist\n', '    */\n', '    function removeFromWhitelist(address _address) public onlyOwner {\n', '        whitelist[_address] = false;\n', '        emit RemoveFromWhitelist(_address);\n', '    }\n', '\n', '\n', '    // bool public whitelisted = false;\n', '\n', '    function setWhitelisted(bool value) internal {\n', '        bytes32 slot = keccak256(abi.encode("Whitelist", "whitelisted"));\n', '        uint256 v = value ? 1 : 0;\n', '        assembly {\n', '            sstore(slot, v)\n', '        }\n', '    }\n', '\n', '    function isWhitelisted() public view returns (bool) {\n', '        bytes32 slot = keccak256(abi.encode("Whitelist", "whitelisted"));\n', '        uint256 v;\n', '        assembly {\n', '            v := sload(slot)\n', '        }\n', '        return v != 0;\n', '    }\n', '}\n', '\n', '// File: contracts/token/AkropolisToken.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @title AkropolisToken\n', '* @notice Adds pausability and disables approve() to defend against double-spend attacks in addition\n', '* to inherited AkropolisBaseToken behavior\n', '*/\n', 'contract AkropolisToken is AkropolisBaseToken, Pausable, Lockable, Whitelist {\n', '    using SafeMath for uint256;\n', '\n', '    /** Events */\n', '\n', '    constructor (address _balances, address _allowances, string _name, uint8 _decimals, string _symbol) public \n', '    AkropolisBaseToken(_balances, _allowances, _name, _decimals, _symbol) {}\n', '\n', '    /** Modifiers **/\n', '\n', '    /** Functions **/\n', '\n', '    function mint(address _to, uint256 _amount) public {\n', '        super.mint(_to, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) public whenUnlocked  {\n', '        super.burn(_amount);\n', '    }\n', '\n', '    /**\n', '    * @notice Implements ERC-20 standard approve function.\n', '    * double spend attacks. To modify allowances, clients should call safer increase/decreaseApproval methods.\n', '    * Upon construction, all calls to approve() will revert unless this contract owner explicitly unlocks approve()\n', '    */\n', '    function approve(address _spender, uint256 _value) \n', '    public whenNotPaused  whenUnlocked returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', "     * @notice increaseApproval should be used instead of approve when the user's allowance\n", '     * is greater than 0. Using increaseApproval protects against potential double-spend attacks\n', '     * by moving the check of whether the user has spent their allowance to the time that the transaction \n', "     * is mined, removing the user's ability to double-spend\n", '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) \n', '    public whenNotPaused returns (bool) {\n', '        increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', "     * @notice decreaseApproval should be used instead of approve when the user's allowance\n", '     * is greater than 0. Using decreaseApproval protects against potential double-spend attacks\n', '     * by moving the check of whether the user has spent their allowance to the time that the transaction \n', "     * is mined, removing the user's ability to double-spend\n", '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) \n', '    public whenNotPaused returns (bool) {\n', '        decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public whenNotPaused onlyWhitelist checkPermBalanceForWhitelist(_amount) returns (bool) {\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @notice Initiates a transfer operation between address `_from` and `_to`. Requires that the\n', '    * message sender is an approved spender on the _from account.\n', '    * @dev When implemented, it should use the transferFromConditionsRequired() modifier.\n', '    * @param _to The address of the recipient. This address must not be blacklisted.\n', '    * @param _from The address of the origin of funds. This address _could_ be blacklisted, because\n', '    * a regulator may want to transfer tokens out of a blacklisted account, for example.\n', '    * In order to do so, the regulator would have to add themselves as an approved spender\n', '    * on the account via `addBlacklistAddressSpender()`, and would then be able to transfer tokens out of it.\n', '    * @param _amount The number of tokens to transfer\n', '    * @return `true` if successful \n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) \n', '    public whenNotPaused onlyWhitelist checkPermBalanceForWhitelist(_amount) returns (bool) {\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    /** Internal functions **/\n', '    \n', '    function decreaseApprovalAllArgs(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\n', '        uint256 oldValue = allowances.allowanceOf(_tokenHolder, _spender);\n', '        if (_subtractedValue > oldValue) {\n', '            allowances.setAllowance(_tokenHolder, _spender, 0);\n', '        } else {\n', '            allowances.subAllowance(_tokenHolder, _spender, _subtractedValue);\n', '        }\n', '        emit Approval(_tokenHolder, _spender, allowances.allowanceOf(_tokenHolder, _spender));\n', '    }\n', '\n', '    function increaseApprovalAllArgs(address _spender, uint256 _addedValue, address _tokenHolder) internal {\n', '        allowances.addAllowance(_tokenHolder, _spender, _addedValue);\n', '        emit Approval(_tokenHolder, _spender, allowances.allowanceOf(_tokenHolder, _spender));\n', '    }\n', '}']