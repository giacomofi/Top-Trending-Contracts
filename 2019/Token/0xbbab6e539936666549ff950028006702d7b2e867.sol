['pragma solidity ^0.5.4;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) view public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) balances; /// balance amount of tokens for address\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        // Prevent transfer to 0x0 address.\n', '        require(_to != address(0x0));\n', '        // Check if the sender has enough\n', '        require(balances[msg.sender] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to].add(_value) > balances[_to]);\n', '\n', '        uint previousBalances = balances[msg.sender].add(balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[msg.sender].add(balances[_to]) == previousBalances);\n', '\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract WEED is BasicToken {\n', '\n', '    function () external payable {\n', '        //if ether is sent to this address, send it back.\n', '        //throw;\n', '        require(false);\n', '    }\n', '\n', '    string public constant name = "WEED";\n', '    string public constant symbol = "WEED";\n', '    uint256 private constant _INITIAL_SUPPLY = 400000000;\n', '    uint8 public decimals = 9;\n', '    uint256 public totalSupply;\n', '    string public version = "WEED 1.0";\n', '\n', '    string public agreement = "https://www.tenjove.com/weed/subscriptionagreement.txt";\n', '    string public disclaimer = "https://etherscan.io/tx/0xa35e89443df2abbe4f62dfc213b7cd98d5d5922c24a581a339857cf6255356dd";\n', '\n', '    constructor() public {\n', '        // init\n', '        totalSupply = _INITIAL_SUPPLY * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '}']