['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable\n', '{\n', '    bool private stopped;\n', '    address private _owner;\n', '    address private _master;\n', '\n', '    event Stopped();\n', '    event Started();\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event MasterRoleTransferred(address indexed previousMaster, address indexed newMaster);\n', '\n', '    constructor () internal\n', '    {\n', '        stopped = false;\n', '        _owner = msg.sender;\n', '        _master = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '        emit MasterRoleTransferred(address(0), _master);\n', '    }\n', '\n', '    function owner() public view returns (address)\n', '    {\n', '        return _owner;\n', '    }\n', '\n', '    function master() public view returns (address)\n', '    {\n', '        return _master;\n', '    }\n', '\n', '    modifier onlyOwner()\n', '    {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    modifier onlyMaster()\n', '    {\n', '        require(isMaster() || isOwner());\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenNotStopped()\n', '    {\n', '        require(!isStopped());\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool)\n', '    {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function isMaster() public view returns (bool)\n', '    {\n', '        return msg.sender == _master;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner\n', '    {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function transferMasterRole(address newMaster) external onlyOwner\n', '    {\n', '        _transferMasterRole(newMaster);\n', '    }\n', '\n', '    function isStopped() public view returns (bool)\n', '    {\n', '        return stopped;\n', '    }\n', '\n', '    function stop() public onlyOwner\n', '    {\n', '        _stop();\n', '    }\n', '\n', '    function start() public onlyOwner\n', '    {\n', '        _start();\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal\n', '    {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function _transferMasterRole(address newMaster) internal\n', '    {\n', '        require(newMaster != address(0));\n', '        emit MasterRoleTransferred(_master, newMaster);\n', '        _master = newMaster;\n', '    }\n', '\n', '    function _stop() internal\n', '    {\n', '        emit Stopped();\n', '        stopped = true;\n', '    }\n', '\n', '    function _start() internal\n', '    {\n', '        emit Started();\n', '        stopped = false;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BaseToken is IERC20, Ownable\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping ( address => uint256 )) public approvals;\n', '\n', '    uint256 public totalTokenSupply;\n', '\n', '    function totalSupply() view external returns (uint256)\n', '    {\n', '        return totalTokenSupply;\n', '    }\n', '\n', '    function balanceOf(address _who) view external returns (uint256)\n', '    {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external onlyWhenNotStopped returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external onlyWhenNotStopped returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        approvals[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view external returns (uint256)\n', '    {\n', '        return approvals[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external onlyWhenNotStopped returns (bool)\n', '    {\n', '        require(_from != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(approvals[_from][msg.sender] >= _value);\n', '\n', '        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to]  = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CreetToken is BaseToken\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    uint256 public decimals;\n', '    string public symbol;\n', '\n', '    uint256 constant private E18 = 1000000000000000000;\n', '    uint256 constant private MAX_TOKEN_SUPPLY = 5000000000;\n', '\n', '    event Deposit(address indexed from, address to, uint256 value);\n', '    event ReferralDrop(address indexed from, address indexed to1, uint256 value1, address indexed to2, uint256 value2);\n', '\n', '    constructor() public\n', '    {\n', "        name        = 'Creet';\n", '        decimals    = 18;\n', "        symbol      = 'CREET';\n", '\n', '        totalTokenSupply = MAX_TOKEN_SUPPLY * E18;\n', '\n', '        balances[msg.sender] = totalTokenSupply;\n', '    }\n', '\n', '    function deposit(address _to, uint256 _value) external returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Deposit(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function referralDrop2(address _to, uint256 _value, address _sale, uint256 _fee) external onlyWhenNotStopped returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value + _fee);\n', '        require(_to != address(0));\n', '        require(_sale != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value + _fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_sale] = balances[_sale].add(_fee);\n', '\n', '        emit ReferralDrop(msg.sender, _to, _value, address(0), 0);\n', '\n', '        return true;\n', '    }\n', '\n', '    function referralDrop3(address _to1, uint256 _value1, address _to2, uint256 _value2, address _sale, uint256 _fee) external onlyWhenNotStopped returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value1 + _value2 + _fee);\n', '        require(_to1 != address(0));\n', '        require(_to2 != address(0));\n', '        require(_sale != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value1 + _value2 + _fee);\n', '        balances[_to1] = balances[_to1].add(_value1);\n', '        balances[_to2] = balances[_to2].add(_value2);\n', '        balances[_sale] = balances[_sale].add(_fee);\n', '\n', '        emit ReferralDrop(msg.sender, _to1, _value1, _to2, _value2);\n', '\n', '        return true;\n', '    }\n', '}']