['pragma solidity ^0.4.24;\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract RegularToken is Token,SafeMath {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', "        if (_to == 0x0) revert('Address cannot be 0x0'); // Prevent transfer to 0x0 address. Use burn() instead\n", "        if (_value <= 0) revert('_value must be greater than 0');\n", "        if (balances[msg.sender] < _value) revert('Insufficient balance');// Check if the sender has enough\n", "        if (balances[_to] + _value < balances[_to]) revert('has overflows'); // Check for overflows\n", '        balances[msg.sender] = SafeMath.safeSub(balances[msg.sender], _value);                     // Subtract from the sender\n', '        balances[_to] = SafeMath.safeAdd(balances[_to], _value);                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', "        if (_to == 0x0) revert('Address cannot be 0x0'); // Prevent transfer to 0x0 address. Use burn() instead\n", "        if (_value <= 0) revert('_value must be greater than 0');\n", "        if (balances[_from] < _value) revert('Insufficient balance');// Check if the sender has enough\n", "        if (balances[_to] + _value < balances[_to]) revert('has overflows');  // Check for overflows\n", "        if (_value > allowed[_from][msg.sender]) revert('not allowed');     // Check allowed\n", '        balances[_from] = SafeMath.safeSub(balances[_from], _value);                           // Subtract from the sender\n', '        balances[_to] = SafeMath.safeAdd(balances[_to], _value);                             // Add the same to the recipient\n', '        allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', "        if (_value <= 0) revert('_value must be greater than 0');\n", '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract MSAToken is RegularToken {\n', '\n', '    uint256 public totalSupply = 96*10**26;\n', '    uint256 constant public decimals = 18;\n', '    string constant public name = "MSA";\n', '    string constant public symbol = "MSA";\n', '\n', '    constructor() public{\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '}']