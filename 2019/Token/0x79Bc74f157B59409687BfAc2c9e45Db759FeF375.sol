['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', '// File: contracts/interfaces/CERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface CERC20 {\n', '  function mint(uint256 mintAmount) external returns (uint256);\n', '  function redeem(uint256 redeemTokens) external returns (uint256);\n', '  function exchangeRateStored() external view returns (uint256);\n', '  function supplyRatePerBlock() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/iERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface iERC20 {\n', '  function mint(\n', '    address receiver,\n', '    uint256 depositAmount)\n', '    external\n', '    returns (uint256 mintAmount);\n', '\n', '  function burn(\n', '    address receiver,\n', '    uint256 burnAmount)\n', '    external\n', '    returns (uint256 loanAmountPaid);\n', '\n', '  function tokenPrice()\n', '    external\n', '    view\n', '    returns (uint256 price);\n', '\n', '  function supplyInterestRate()\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function claimLoanToken()\n', '    external\n', '    returns (uint256 claimedAmount);\n', '\n', '  /* function burnToEther(\n', '    address receiver,\n', '    uint256 burnAmount)\n', '    external\n', '    returns (uint256 loanAmountPaid);\n', '\n', '\n', '  function supplyInterestRate()\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function assetBalanceOf(\n', '    address _owner)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function claimLoanToken()\n', '    external\n', '    returns (uint256 claimedAmount); */\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from the caller&#39;s account to `recipient`.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the caller&#39;s tokens.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', '     * condition is to first reduce the spender&#39;s allowance to 0 and set the\n', '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', '     * allowance mechanism. `amount` is then deducted from the caller&#39;s\n', '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Wrappers over Solidity&#39;s arithmetic operations with added overflow\n', ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', ' * class of bugs, so it&#39;s recommended to use it always.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `+` operator.\n', '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * Counterpart to Solidity&#39;s `-` operator.\n', '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `*` operator.\n', '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `/` operator. Note: this function uses a\n', '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `%` operator. This function uses a `revert`\n', '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/IdleHelp.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', 'library IdleHelp {\n', '  using SafeMath for uint256;\n', '\n', '  function getPriceInToken(address cToken, address iToken, address bestToken, uint256 totalSupply, uint256 poolSupply)\n', '    public view\n', '    returns (uint256 tokenPrice) {\n', '      // 1Token = net_asset_value / total_Token_liquidity\n', '      // net_asset_value = (rate of 1(cToken || iToken) in underlying_Token) * balanceOf((cToken || iToken))\n', '      uint256 navPool;\n', '      uint256 price;\n', '\n', '      // rate\n', '      if (bestToken == cToken) {\n', '        // exchangeRateStored is the rate (in wei, 8 decimals) of 1cDAI in DAI * 10**18\n', '        price = CERC20(cToken).exchangeRateStored(); // 202487304197710837666727644 ->\n', '      } else {\n', '        price = iERC20(iToken).tokenPrice(); // eg 1001495070730287403 -> 1iToken in wei = 1001495070730287403 Token\n', '      }\n', '      navPool = price.mul(poolSupply); // eg 43388429749999990000 in DAI\n', '      tokenPrice = navPool.div(totalSupply); // idleToken price in token wei\n', '  }\n', '  function getAPRs(address cToken, address iToken, uint256 blocksInAYear)\n', '    public view\n', '    returns (uint256 cApr, uint256 iApr) {\n', '      uint256 cRate = CERC20(cToken).supplyRatePerBlock(); // interest % per block\n', '      cApr = cRate.mul(blocksInAYear).mul(100);\n', '      iApr = iERC20(iToken).supplyInterestRate(); // APR in wei 18 decimals\n', '  }\n', '  function getBestRateToken(address cToken, address iToken, uint256 blocksInAYear)\n', '    public view\n', '    returns (address bestRateToken, uint256 bestRate, uint256 worstRate) {\n', '      (uint256 cApr, uint256 iApr) = getAPRs(cToken, iToken, blocksInAYear);\n', '      bestRateToken = cToken;\n', '      bestRate = cApr;\n', '      worstRate = iApr;\n', '      if (iApr > cApr) {\n', '        worstRate = cApr;\n', '        bestRate = iApr;\n', '        bestRateToken = iToken;\n', '      }\n', '  }\n', '  function rebalanceCheck(address cToken, address iToken, address bestToken, uint256 blocksInAYear, uint256 minRateDifference)\n', '    public view\n', '    returns (bool shouldRebalance, address bestTokenAddr) {\n', '      shouldRebalance = false;\n', '\n', '      uint256 _bestRate;\n', '      uint256 _worstRate;\n', '      (bestTokenAddr, _bestRate, _worstRate) = getBestRateToken(cToken, iToken, blocksInAYear);\n', '      if (\n', '          bestToken == address(0) ||\n', '          (bestTokenAddr != bestToken && (_worstRate.add(minRateDifference) < _bestRate))) {\n', '        shouldRebalance = true;\n', '        return (shouldRebalance, bestTokenAddr);\n', '      }\n', '\n', '      return (shouldRebalance, bestTokenAddr);\n', '  }\n', '}']