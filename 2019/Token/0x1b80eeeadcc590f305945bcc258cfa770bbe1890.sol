['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @return the address of the owner.\n', '    */\n', '    function owner() public view returns(address) {\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return true if `msg.sender` is the owner of the contract.\n', '    */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '    * @dev give an account access to this role\n', '    */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "    * @dev remove an account's access to this role\n", '    */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev check if an account has this role\n', '    * @return bool\n', '    */\n', '    function has(Role storage role, address account)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', 'contract MinterRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private minters;\n', '\n', '    constructor() public {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyOwner {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '\n', 'contract PauserRole is Ownable{\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private pausers;\n', '\n', '    constructor() public {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed_[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param spender The address which will spend the funds.\n', '    * @param addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        allowed[msg.sender][spender] = (\n', '        allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed_[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param spender The address which will spend the funds.\n', '    * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        allowed[msg.sender][spender] = (\n', '        allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that mints an amount of the token and assigns it to\n', '    * an account. This encapsulates the modification of balances such that the\n', '    * proper events are emitted.\n', '    * @param account The account that will receive the created tokens.\n', '    * @param amount The amount that will be created.\n', '    */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != 0);\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[account] = balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', '    * account.\n', '    * @param account The account whose tokens will be burnt.\n', '    * @param amount The amount that will be burnt.\n', '    */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != 0);\n', '        require(amount <= balances[account]);\n', '\n', '        totalSupply = totalSupply.sub(amount);\n', '        balances[account] = balances[account].sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', "    * account, deducting from the sender's allowance for said account. Uses the\n", '    * internal burn function.\n', '    * @param account The account whose tokens will be burnt.\n', '    * @param amount The amount that will be burnt.\n', '    */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        require(amount <= allowed[account][msg.sender]);\n', '\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[account][msg.sender] = allowed[account][msg.sender].sub(\n', '        amount);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    bool private _paused = false;\n', '\n', '    /**\n', '    * @return true if the contract is paused, false otherwise.\n', '    */\n', '    function paused() public view returns(bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused();\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param from address The address which you want to send tokens from\n', '    * @param value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n', '    * an additional Burn event.\n', '    */\n', '    function _burn(address who, uint256 value) internal {\n', '        super._burn(who, value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20CappedMintable is ERC20, MinterRole {\n', '\n', '    uint256 private _cap;\n', '\n', '    constructor(uint256 cap)\n', '        public\n', '    {\n', '        require(cap > 0,"Maximum supply has reached.");\n', '        _cap = cap;\n', '    }\n', '\n', '    /**\n', '    * @return the cap for the token minting.\n', '    */\n', '    function cap() public view returns(uint256) {\n', '        return _cap;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        public\n', '        onlyMinter\n', '        returns (bool)\n', '    {   \n', '        require(totalSupply.add(amount) <= _cap);\n', '        _mint(to, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ERC20Releasable is ERC20, Ownable {\n', '\n', '    /* The finalizer contract that allows unlift the transfer limits on this token */\n', '    address public releaseAgent;\n', '\n', '    /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '    bool public released = false;\n', '\n', '    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '    mapping (address => bool) public transferAgents;\n', '\n', '    /**\n', '    * Limit token transfer until the crowdsale is over.\n', '    *\n', '    */\n', '    modifier canTransfer(address _sender) {\n', '\n', '        if(!released) {\n', '            require(transferAgents[_sender]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * Set the contract that can call release and make the token transferable.\n', '    *\n', '    * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '    */\n', '    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', "      // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '        releaseAgent = addr;\n', '    }\n', '\n', '    /**\n', '    * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '    */\n', '    function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '        transferAgents[addr] = state;\n', '    }\n', '\n', '    /**\n', '    * One way function to release the tokens to the wild.\n', '    *\n', '    * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '    */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    /** The function can be called only before or after the tokens have been releasesd */\n', '    modifier inReleaseState(bool releaseState) {\n', '        require(releaseState == released);\n', '        _;\n', '    }\n', '\n', '    /** The function can be called only by a whitelisted release agent. */\n', '    modifier onlyReleaseAgent() {\n', '        require(msg.sender == releaseAgent);\n', '        _;\n', '    }\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        canTransfer(msg.sender)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        canTransfer(from)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        public\n', '        canTransfer(spender)\n', '        returns (bool)\n', '    {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        public\n', '        canTransfer(spender)\n', '        returns (bool success)\n', '    {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        public\n', '        canTransfer(spender)\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BXBCoin is ERC20Burnable, ERC20CappedMintable, ERC20Pausable, ERC20Releasable {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    /**\n', '    * Construct the token.\n', '    *\n', '    * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '    *\n', '    * @param _tokenName Token name\n', '    * @param _tokenSymbol Token symbol - should be all caps\n', '    * @param _initialSupply How many tokens we start with\n', '    * @param _tokenDecimals Number of decimal places\n', '    * @param _tokenCap Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '    */\n', '    constructor (string _tokenName, string _tokenSymbol, uint _initialSupply, uint8 _tokenDecimals,uint256 _tokenCap)\n', '        ERC20CappedMintable(_tokenCap)\n', '        public\n', '    {\n', '        owner = msg.sender;\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        totalSupply = _initialSupply;\n', '        decimals = _tokenDecimals;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '    * When token is released to be transferable, enforce no new tokens can be created.\n', '    */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        super.releaseTokenTransfer();\n', '    }\n', '}']