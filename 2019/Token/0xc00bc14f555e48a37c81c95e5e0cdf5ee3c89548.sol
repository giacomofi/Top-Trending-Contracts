['pragma solidity ^0.5.7;\n', '\n', 'library SafeMath \n', '{\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        if (a == 0) \n', '\t\t{\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 \n', '{\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 \n', '{\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) \n', '    {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) \n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) \n', '    {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferBulk(address[] memory _toAccounts, uint256[] memory _tokenAmount) public returns (bool)\n', '    {\n', '        require(_toAccounts.length == _tokenAmount.length);\n', '        for(uint i=0; i<_toAccounts.length; i++) \n', '        {\n', '            _transfer(msg.sender, _toAccounts[i], _tokenAmount[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) \n', '    {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal \n', '    {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal \n', '    {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        \n', '        require(_balances[account].add(value) <= 11111111111000000000000000000, "Cant mint > then 11†111†111†111");\n', '        \n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal \n', '    {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        \n', '        require(_totalSupply.sub(value) > _totalSupply.div(2), "Cant burn > 50% of total supply");\n', '        \n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 value) internal \n', '    {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', 'library Roles \n', '{\n', '    struct Role \n', '    {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal \n', '    {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal \n', '    {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) \n', '    {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '    address private _owner;\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        _addMinter(msg.sender);\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '    \n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyOwner {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter(address account) public onlyOwner {\n', '        _removeMinter(account);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 \n', '{\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public \n', '    {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns (string memory) \n', '    {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) \n', '    {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) \n', '    {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'contract ERC20Burnable is ERC20, MinterRole \n', '{\n', '    function burn(uint256 value) public onlyMinter\n', '    {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public onlyMinter\n', '    {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole \n', '{\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) \n', '    {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Token is ERC20, MinterRole, ERC20Detailed, ERC20Mintable, ERC20Burnable \n', '{\n', '    address payable private _wallet;\n', '    uint256 private _weiRaised;\n', '    \n', '    constructor (address payable wallet) public ERC20Detailed("CryptoWars Token", "CWT", 18) \n', '    {\n', '        _wallet = wallet;\n', '\t}\n', '\t\n', '\tfunction () external payable \n', '    {\n', '        uint256 weiAmount = msg.value;\n', '        require(msg.sender != address(0));\n', '        require(weiAmount != 0);\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '        _wallet.transfer(msg.value);\n', '    }\n', '    \n', '    function wallet() public view returns (address payable) \n', '    {\n', '        return _wallet;\n', '    }\n', '    \n', '    function weiRaised() public view returns (uint256) \n', '    {\n', '        return _weiRaised;\n', '    }\n', '}']