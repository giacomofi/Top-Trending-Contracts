['//---------------------------------------------------------\n', '//      _  _____    ____ ___ ___ _   _\n', '//     / \\|_   _|  / ___/ _ \\_ _| \\ | |\n', '//    / _ \\ | |   | |  | | | | ||  \\| |\n', '//   / ___ \\| |   | |__| |_| | || |\\  |\n', '//  /_/   \\_\\_|    \\____\\___/___|_| \\_|\n', '//\n', '//---------------------------------------------------------\n', '//  新增  1、setCtrlToken\n', '//        2、approveAuto\n', '//  用于BANCOR自动批准代币的转账限额\n', '//---------------------------------------------------------\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', 'contract ERC20ext\n', '{\n', '    // stand\n', '    function totalSupply() public constant returns (uint supply);\n', '    function balanceOf(address who) public constant returns (uint value);\n', '    function allowance(address owner, address spender) public constant returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    // extand\n', '    function setCtrlToken(address newToken) public returns (bool ok);\n', '    function approveAuto(address spender, uint value ) public returns (bool ok);\n', '\n', '    function appointNewCFO(address newCFO) public returns (bool ok);\n', '    function melt(address dst, uint256 wad) public returns (bool ok);\n', '    function mint(address dst, uint256 wad) public returns (bool ok);\n', '    function freeze(address dst, bool flag) public returns (bool ok);\n', '\n', '    event MeltEvent(address indexed dst, uint256 wad);\n', '    event MintEvent(address indexed dst, uint256 wad);\n', '    event FreezeEvent(address indexed dst, bool flag);\n', '}\n', '\n', '//---------------------------------------------------------\n', '// SafeMath 是一个安全数字运算的合约\n', '//---------------------------------------------------------\n', 'contract SafeMath\n', '{\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c)\n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '//---------------------------------------------------------\n', '// atToken 是一个增强版ERC20合约\n', '//---------------------------------------------------------\n', 'contract atToken is ERC20ext,SafeMath\n', '{\n', '    string public name;\n', '    string public symbol;\n', '    uint8  public decimals = 18;\n', '\n', '    // 用于设置批准的TOKEN地址\n', '    address _token;\n', '\n', '    address _cfo;\n', '    uint256 _supply;\n', '\n', '    //帐户的余额列表\n', '    mapping (address => uint256) _balances;\n', '\n', '    //帐户的转账限额\n', '    mapping (address => mapping (address => uint256)) _allowance;\n', '\n', '    //帐户的资金冻结\n', '    mapping (address => bool) public _frozen;\n', '\n', '    //-----------------------------------------------\n', '    // 初始化合约，并把所有代币都给CFO\n', '    //-----------------------------------------------\n', '    //   @param initialSupply 发行总量\n', '    //   @param tokenName     代币名称\n', '    //   @param tokenSymbol   代币符号\n', '    //-----------------------------------------------\n', '    constructor(uint256 initialSupply,string tokenName,string tokenSymbol) public\n', '    {\n', '        // validate input\n', '        require(bytes(tokenName).length > 0 && bytes(tokenSymbol).length > 0);\n', '\n', '        _token  = msg.sender;\n', '        _cfo    = msg.sender;\n', '\n', '        _supply = initialSupply * 10 ** uint256(decimals);\n', '        _balances[_cfo] = _supply;\n', '\n', '        name   = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 判断合约调用者是否 CFO\n', '    //-----------------------------------------------\n', '    modifier onlyCFO()\n', '    {\n', '        require(msg.sender == _cfo);\n', '        _;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 判断合约调用者是否 Ctrl Token\n', '    //-----------------------------------------------\n', '    modifier onlyCtrlToken()\n', '    {\n', '        require(msg.sender == _token);\n', '        _;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 获取货币供应量\n', '    //-----------------------------------------------\n', '    function totalSupply() public constant returns (uint256)\n', '    {\n', '        return _supply;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 查询账户余额\n', '    //-----------------------------------------------\n', '    // @param  src 帐户地址\n', '    //-----------------------------------------------\n', '    function balanceOf(address src) public constant returns (uint256)\n', '    {\n', '        return _balances[src];\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 查询账户转账限额\n', '    //-----------------------------------------------\n', '    // @param  src 来源帐户地址\n', '    // @param  dst 目标帐户地址\n', '    //-----------------------------------------------\n', '    function allowance(address src, address dst) public constant returns (uint256)\n', '    {\n', '        return _allowance[src][dst];\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 账户转账\n', '    //-----------------------------------------------\n', '    // @param  dst 目标帐户地址\n', '    // @param  wad 转账金额\n', '    //-----------------------------------------------\n', '    function transfer(address dst, uint wad) public returns (bool)\n', '    {\n', '        //检查冻结帐户\n', '        require(!_frozen[msg.sender]);\n', '        require(!_frozen[dst]);\n', '\n', '        //检查帐户余额\n', '        require(_balances[msg.sender] >= wad);\n', '\n', '        _balances[msg.sender] = sub(_balances[msg.sender],wad);\n', '        _balances[dst]        = add(_balances[dst], wad);\n', '\n', '        emit Transfer(msg.sender, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    //-----------------------------------------------\n', '    // 账户转账带检查限额\n', '    //-----------------------------------------------\n', '    // @param  src 来源帐户地址\n', '    // @param  dst 目标帐户地址\n', '    // @param  wad 转账金额\n', '    //-----------------------------------------------\n', '    function transferFrom(address src, address dst, uint wad) public returns (bool)\n', '    {\n', '        //检查冻结帐户\n', '        require(!_frozen[msg.sender]);\n', '        require(!_frozen[dst]);\n', '\n', '        //检查帐户余额\n', '        require(_balances[src] >= wad);\n', '\n', '        //检查帐户限额\n', '        require(_allowance[src][msg.sender] >= wad);\n', '\n', '        _allowance[src][msg.sender] = sub(_allowance[src][msg.sender],wad);\n', '\n', '        _balances[src] = sub(_balances[src],wad);\n', '        _balances[dst] = add(_balances[dst],wad);\n', '\n', '        //转账事件\n', '        emit Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 设置转账限额\n', '    //-----------------------------------------------\n', '    // @param  dst 目标帐户地址\n', '    // @param  wad 限制金额\n', '    //-----------------------------------------------\n', '    function approve(address dst, uint256 wad) public returns (bool)\n', '    {\n', '        _allowance[msg.sender][dst] = wad;\n', '\n', '        //设置事件\n', '        emit Approval(msg.sender, dst, wad);\n', '        return true;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 设置自动累计转账限额\n', '    //-----------------------------------------------\n', '    // @param  dst 目标帐户地址\n', '    // @param  wad 限制金额\n', '    //-----------------------------------------------\n', '    function approveAuto(address src, uint256 wad) onlyCtrlToken public returns (bool)\n', '    {\n', '        _allowance[src][msg.sender] = wad;\n', '        return true;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 设置 CTRL TOKEN 地址\n', '    //-----------------------------------------------\n', '    // @param  token 新的CTRL TOKEN地址\n', '    //-----------------------------------------------\n', '    function setCtrlToken(address NewToken) onlyCFO public returns (bool)\n', '    {\n', '        if (NewToken != _token)\n', '        {\n', '            _token = NewToken;\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 任命新的CFO\n', '    //-----------------------------------------------\n', '    // @param  newCFO 新的CFO帐户地址\n', '    //-----------------------------------------------\n', '    function appointNewCFO(address newCFO) onlyCFO public returns (bool)\n', '    {\n', '        if (newCFO != _cfo)\n', '        {\n', '            _cfo = newCFO;\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 冻结帐户\n', '    //-----------------------------------------------\n', '    // @param  dst  目标帐户地址\n', '    // @param  flag 冻结\n', '    //-----------------------------------------------\n', '    function freeze(address dst, bool flag) onlyCFO public returns (bool)\n', '    {\n', '        _frozen[dst] = flag;\n', '\n', '        //冻结帐户事件\n', '        emit FreezeEvent(dst, flag);\n', '        return true;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 铸造代币\n', '    //-----------------------------------------------\n', '    // @param  dst  目标帐户地址\n', '    // @param  wad  铸造金额\n', '    //-----------------------------------------------\n', '    function mint(address dst, uint256 wad) onlyCFO public returns (bool)\n', '    {\n', '        //目标帐户地址铸造代币,同时更新总量\n', '        _balances[dst] = add(_balances[dst],wad);\n', '        _supply        = add(_supply,wad);\n', '\n', '        //铸造代币事件\n', '        emit MintEvent(dst, wad);\n', '        return true;\n', '    }\n', '\n', '    //-----------------------------------------------\n', '    // 销毁代币\n', '    //-----------------------------------------------\n', '    // @param  dst  目标帐户地址\n', '    // @param  wad  销毁金额\n', '    //-----------------------------------------------\n', '    function melt(address dst, uint256 wad) onlyCFO public returns (bool)\n', '    {\n', '        //检查帐户余额\n', '        require(_balances[dst] >= wad);\n', '\n', '        //销毁目标帐户地址代币,同时更新总量\n', '        _balances[dst] = sub(_balances[dst],wad);\n', '        _supply        = sub(_supply,wad);\n', '\n', '        //销毁代币事件\n', '        emit MeltEvent(dst, wad);\n', '        return true;\n', '    }\n', '}']