['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// File: ERC20Interface.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @dev Wrappers over Solidity&#39;s arithmetic operations with added overflow\n', ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', ' * class of bugs, so it&#39;s recommended to use it always.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `+` operator.\n', '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * Counterpart to Solidity&#39;s `-` operator.\n', '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `*` operator.\n', '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `/` operator. Note: this function uses a\n', '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `%` operator. This function uses a `revert`\n', '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: BVATeamMembers.sol\n', '\n', 'contract BVATeamMembers {\n', '    using SafeMath for uint;\n', '\n', '    ERC20Interface erc20Contract;\n', '    address payable owner;\n', '\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == owner, "must be contract owner");\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(ERC20Interface ctr) public {\n', '        erc20Contract = ctr;\n', '        owner         = msg.sender;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Unlock Tokens\n', '    // ------------------------------------------------------------------------\n', '    function unlockTokens(address to) external isOwner {\n', '        // Total Allocation : 1,260,000 BVA (4.5% of total supply)\n', '        // 1. 25% - 2020/01/01 (315,000 BVA) - timestamp 1577808000\n', '        // 2. 25% - 2021/01/01 (315,000 BVA) - timestamp 1609430400\n', '        // 3. 40% - 2022/01/01 (504,000 BVA) - timestamp 1640966400\n', '        // 4. 10% - 2022/12/01 (126,000 BVA) - timestamp 1669824000\n', '\n', '        require(now >= 1577808000, "locked");\n', '\n', '        uint balance = erc20Contract.balanceOf(address(this));\n', '        uint amount;\n', '        uint remain;\n', '\n', '        if (now < 1609430400) {\n', '            // 1st unlock : before balance must have at least 1,260,000 BVA\n', '            require(balance >= 1260000e18, "checkpoint 1 balance error");\n', '            remain = 945000e18;\n', '            amount = balance.sub(remain);\n', '        } else if (now < 1640966400) {\n', '            // 2nd unlock : before balance must have at least 945,000 BVA\n', '            require(balance >= 945000e18, "checkpoint 2 balance error");\n', '            remain = 630000e18;\n', '            amount = balance.sub(remain);\n', '        } else if (now < 1669824000) {\n', '            // 3rd unlock : before balance must have at least 630,000 BVA\n', '            require(balance >= 630000e18, "checkpoint 3 balance error");\n', '            remain = 126000e18;\n', '            amount = balance.sub(remain);\n', '        } else {\n', '            // 6th unlock : before balance must have at least 126,000 BVA\n', '            amount = balance;\n', '        }\n', '\n', '        if (amount > 0) {\n', '            erc20Contract.transfer(to, amount);\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Withdraw ETH from this contract to `owner`\n', '    // ------------------------------------------------------------------------\n', '    function withdrawEther(uint _amount) external isOwner {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '    }\n', '}']