['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '  modifier onlyOwner() {\n', '    require(\n', '      msg.sender == owner,\n', '      "msg.sender is not owner"\n', '    );\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address newOwner)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    if (newOwner != address(0) && newOwner != owner) {\n', '      owner = newOwner;\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public _totalSupply;\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address who) public view returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(\n', '    address owner,\n', '    address spender) public view returns (uint);\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint value\n', '  )\n', '    public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title WhiteList\n', ' * @dev All the addresses whitelisted will not pay the fee for transfer and transferFrom.\n', ' */\n', '\n', 'contract WhiteList is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  function addToWhitelist (address _address) public onlyOwner returns (bool) {\n', '    whitelist[_address] = true;\n', '    return true;\n', '  }\n', '\n', '  function removeFromWhitelist (address _address)\n', '    public onlyOwner returns (bool) \n', '  {\n', '    whitelist[_address] = false;\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is WhiteList, ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) public balances;\n', '\n', '  /**\n', '  * @dev additional variables for use if transaction fees ever became necessary\n', '  */\n', '  uint public basisPointsRate = 0;\n', '  uint public maximumFee = 0;\n', '\n', '  /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(\n', '      !(msg.data.length < size + 4),\n', '      "msg.data length is wrong"\n', '    );\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value)\n', '    public\n', '    onlyPayloadSize(2 * 32)\n', '    returns (bool)\n', '  {\n', '    uint fee = whitelist[msg.sender]\n', '      ? 0\n', '      : (_value.mul(basisPointsRate)).div(10000);\n', '\n', '    if (fee > maximumFee) {\n', '      fee = maximumFee;\n', '    }\n', '    uint sendAmount = _value.sub(fee);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    if (fee > 0) {\n', '      balances[owner] = balances[owner].add(fee);\n', '      emit Transfer(msg.sender, owner, fee);\n', '      return true;\n', '    }\n', '    emit Transfer(msg.sender, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 { \n', '\n', '  mapping (address => mapping (address => uint)) public allowed;\n', '\n', '  uint public constant MAX_UINT = 2**256 - 1;\n', '\n', '  /**\n', '  * @dev Transfer tokens from one address to another\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _value uint the amount of tokens to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint\n', '    _value\n', '  )\n', '    public\n', '    onlyPayloadSize(3 * 32)\n', '    returns (bool)\n', '  {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    uint fee = whitelist[msg.sender]\n', '      ? 0\n', '      : (_value.mul(basisPointsRate)).div(10000);\n', '    if (fee > maximumFee) {\n', '      fee = maximumFee;\n', '    }\n', '    if (_allowance < MAX_UINT) {\n', '      allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    }\n', '    uint sendAmount = _value.sub(fee);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    if (fee > 0) {\n', '      balances[owner] = balances[owner].add(fee);\n', '      emit Transfer(_from, owner, fee);\n', '      return true;\n', '    }\n', '    emit Transfer(_from, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _value The amount of tokens to be spent.\n', '  */\n', '  function approve(\n', '    address _spender,\n', '    uint _value\n', '  )\n', '    public\n', '    onlyPayloadSize(2 * 32)\n', '    returns (bool)\n', '  {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require(\n', '      !((_value != 0) && (allowed[msg.sender][_spender] != 0)),\n', '      "Canont approve 0 as amount"\n', '    );\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '  * @param _owner address The address which owns the funds.\n', '  * @param _spender address The address which will spend the funds.\n', '  * @return A uint specifying the amount of tokens still available for the spender.\n', '  */\n', '  function allowance(address _owner, address _spender)\n', '    public\n', '    view\n', '    returns (uint remaining) \n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' *\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused, "paused is true");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused, "paused is false");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Called by the owner to pause, triggers stopped state\n', '   * @return Operation succeeded.\n', '   */\n', '  function pause()\n', '    public\n', '    onlyOwner\n', '    whenNotPaused\n', '    returns (bool) \n', '  {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause()\n', '    public\n', '    onlyOwner\n', '    whenPaused\n', '    returns (bool)\n', '  {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title BlackList\n', ' *\n', ' * @dev Base contract which allows the owner to blacklist a stakeholder and destroy its tokens.\n', ' */\n', 'contract BlackList is Ownable, BasicToken {\n', '\n', '  mapping (address => bool) public isBlackListed;\n', '\n', '  event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '  event AddedBlackList(address _user);\n', '  event RemovedBlackList(address _user);\n', '\n', '  /**\n', '   * @dev Add address to blacklist.\n', '   * @param _evilUser Address to be blacklisted.\n', '   * @return Operation succeeded.\n', '   */\n', '  function addBlackList (address _evilUser)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    isBlackListed[_evilUser] = true;\n', '    emit AddedBlackList(_evilUser);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove address from blacklist.\n', '   * @param _clearedUser Address to removed from blacklist.\n', '   * @return Operation succeeded.\n', '   */\n', '  function removeBlackList (address _clearedUser)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    isBlackListed[_clearedUser] = false;\n', '    emit RemovedBlackList(_clearedUser);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Destroy funds of the blacklisted user.\n', '   * @param _blackListedUser Address of whom to destroy the funds.\n', '   * @return Operation succeeded.\n', '   */\n', '  function destroyBlackFunds (address _blackListedUser)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(isBlackListed[_blackListedUser], "User is not blacklisted");\n', '    uint dirtyFunds = balanceOf(_blackListedUser);\n', '    balances[_blackListedUser] = 0;\n', '    _totalSupply -= dirtyFunds;\n', '    emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title UpgradedStandardToken\n', ' *\n', ' * @dev Interface to submit calls from the current SC to a new one.\n', ' */\n', 'contract UpgradedStandardToken is StandardToken{\n', '  /**\n', '   * @dev Methods called by the legacy contract\n', '   * and they must ensure msg.sender to be the contract address.\n', '   */\n', '  function transferByLegacy(\n', '    address from,\n', '    address to,\n', '    uint value) public returns (bool);\n', '  function transferFromByLegacy(\n', '    address sender,\n', '    address from,\n', '    address spender,\n', '    uint value) public returns (bool);\n', '\n', '  function approveByLegacy(\n', '    address from,\n', '    address spender,\n', '    uint value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title BackedToken\n', ' *\n', ' * @dev ERC20 token backed by some asset periodically audited reserve.\n', ' */\n', 'contract BackedToken is Pausable, StandardToken, BlackList {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '  address public upgradedAddress;\n', '  bool public deprecated;\n', '\n', '  // Called when new token are issued\n', '  event Issue(uint amount);\n', '  // Called when tokens are redeemed\n', '  event Redeem(uint amount);\n', '  // Called when contract is deprecated\n', '  event Deprecate(address newAddress);\n', '  // Called if contract ever adds fees\n', '  event Params(uint feeBasisPoints, uint maxFee);\n', '\n', '  /**\n', '   * @dev Constructor.\n', '   * @param _initialSupply Initial total supply.\n', '   * @param _name Token name.\n', '   * @param _symbol Token symbol.\n', '   * @param _decimals Token decimals.\n', '   */\n', '  constructor (\n', '    uint _initialSupply,\n', '    string _name,\n', '    string _symbol,\n', '    uint _decimals\n', '  ) public {\n', '    _totalSupply = _initialSupply;\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    balances[owner] = _initialSupply;\n', '    deprecated = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Revert whatever no named function is called.\n', '   */\n', '  function() public payable {\n', '    revert("No specific function has been called");\n', '  }\n', '\n', '  /**\n', '   * @dev ERC20 overwritten functions.\n', '   */\n', '\n', '  function transfer(address _to, uint _value)\n', '    public whenNotPaused returns (bool) \n', '  {\n', '    require(\n', '      !isBlackListed[msg.sender],\n', '      "Transaction recipient is blacklisted"\n', '    );\n', '    if (deprecated) {\n', '      return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n', '    } else {\n', '      return super.transfer(_to, _value);\n', '    }\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(!isBlackListed[_from], "Tokens owner is blacklisted");\n', '    if (deprecated) {\n', '      return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(\n', '        msg.sender,\n', '        _from,\n', '        _to,\n', '        _value\n', '      );\n', '    } else {\n', '      return super.transferFrom(_from, _to, _value);\n', '    }\n', '  }\n', '\n', '  function balanceOf(address who) public view returns (uint) {\n', '    if (deprecated) {\n', '      return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n', '    } else {\n', '      return super.balanceOf(who);\n', '    }\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint _value\n', '  ) \n', '    public\n', '    onlyPayloadSize(2 * 32)\n', '    returns (bool)\n', '  {\n', '    if (deprecated) {\n', '      return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n', '    } else {\n', '      return super.approve(_spender, _value);\n', '    }\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '  )\n', '    public\n', '    view\n', '    returns (uint remaining) \n', '  {\n', '    if (deprecated) {\n', '      return StandardToken(upgradedAddress).allowance(_owner, _spender);\n', '    } else {\n', '      return super.allowance(_owner, _spender);\n', '    }\n', '  }\n', '\n', '  function totalSupply() public view returns (uint) {\n', '    if (deprecated) {\n', '      return StandardToken(upgradedAddress).totalSupply();\n', '    } else {\n', '      return _totalSupply;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Issue tokens. These tokens are added to the Owner address and to the _totalSupply.\n', '   * @param amount Amount of the token to be issued to the owner balance adding it to the _totalSupply.\n', '   * @return Operation succeeded.\n', '   */\n', '  function issue(uint amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(\n', '      _totalSupply + amount > _totalSupply,\n', '      "Wrong amount to be issued referring to _totalSupply"\n', '    );\n', '\n', '    require(\n', '      balances[owner] + amount > balances[owner],\n', '      "Wrong amount to be issued referring to owner balance"\n', '    );\n', '\n', '    balances[owner] += amount;\n', '    _totalSupply += amount;\n', '    emit Issue(amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Redeem tokens. These tokens are withdrawn from the Owner address.\n', '   * The balance must be enough to cover the redeem or the call will fail.\n', '   * @param amount Amount of the token to be subtracted from the _totalSupply and the Owner balance.\n', '   * @return Operation succeeded.\n', '   */\n', '  function redeem(uint amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(\n', '      _totalSupply >= amount,\n', '      "Wrong amount to be redeemed referring to _totalSupply"\n', '    );\n', '    require(\n', '      balances[owner] >= amount,\n', '      "Wrong amount to be redeemed referring to owner balance"\n', '    );\n', '    _totalSupply -= amount;\n', '    balances[owner] -= amount;\n', '    emit Redeem(amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the current SC as deprecated.\n', '   * @param _upgradedAddress The new SC address to be pointed from this SC.\n', '   * @return Operation succeeded.\n', '   */\n', '  function deprecate(address _upgradedAddress)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    deprecated = true;\n', '    upgradedAddress = _upgradedAddress;\n', '    emit Deprecate(_upgradedAddress);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set fee params. The params has an hardcoded limit.\n', '   * @param newBasisPoints The maker order object.\n', '   * @param newMaxFee The amount of tokens going to the taker.\n', '   * @return Operation succeeded.\n', '   */\n', '  function setParams(\n', '    uint newBasisPoints,\n', '    uint newMaxFee\n', '  ) \n', '    public\n', '    onlyOwner \n', '    returns (bool) \n', '  {\n', '    // Ensure transparency by hardcoding limit beyond which fees can never be added\n', '    require(\n', '      newBasisPoints < 20,\n', '      "newBasisPoints amount bigger than hardcoded limit"\n', '    );\n', '    require(\n', '      newMaxFee < 50,\n', '      "newMaxFee amount bigger than hardcoded limit"\n', '    );\n', '    basisPointsRate = newBasisPoints;\n', '    maximumFee = newMaxFee.mul(10**decimals);\n', '    emit Params(basisPointsRate, maximumFee);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Selfdestruct the contract. Callable only from the owner.\n', '   */\n', '  function kill()\n', '    public\n', '    onlyOwner \n', '  {\n', '    selfdestruct(owner);\n', '  }\n', '}']