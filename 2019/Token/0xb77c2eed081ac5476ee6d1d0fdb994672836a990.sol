['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '    /* The finalizer contract that allows unlift the transfer limits on this token */\n', '    address public releaseAgent;\n', '\n', '    /** A crowdsale contract can release us to the wild if the sale is a success. If false we are are in transfer lock up period.*/\n', '    bool public released = false;\n', '\n', '    /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '    mapping(address => bool) public transferAgents;\n', '\n', '    /**\n', '     * Limit token transfer until the crowdsale is over.\n', '     *\n', '     */\n', '    modifier canTransfer(address _sender) {\n', '        require(released || transferAgents[_sender], "For the token to be able to transfer: it\'s required that the crowdsale is in released state; or the sender is a transfer agent.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set the contract that can call release and make the token transferable.\n', '     *\n', '     * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '     */\n', '    function setReleaseAgent(address addr) public onlyOwner inReleaseState(false) {\n', '\n', "        // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '        releaseAgent = addr;\n', '    }\n', '\n', '    /**\n', '     * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '     */\n', '    function setTransferAgent(address addr, bool state) public onlyOwner inReleaseState(false) {\n', '        transferAgents[addr] = state;\n', '    }\n', '\n', '    /**\n', '     * One way function to release the tokens to the wild.\n', '     *\n', '     * Can be called only from the release agent that is the final sale contract. It is only called if the crowdsale has been success (first milestone reached).\n', '     */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    /** The function can be called only before or after the tokens have been released */\n', '    modifier inReleaseState(bool releaseState) {\n', '        require(releaseState == released, "It\'s required that the state to check aligns with the released flag.");\n', '        _;\n', '    }\n', '\n', '    /** The function can be called only by a whitelisted release agent. */\n', '    modifier onlyReleaseAgent() {\n', '        require(msg.sender == releaseAgent, "Message sender is required to be a release agent.");\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\n', '        // Call StandardToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) returns (bool success) {\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '    address public upgradeMaster;\n', '\n', '    /** The next contract where the tokens will be migrated. */\n', '    UpgradeAgent public upgradeAgent;\n', '\n', '    /** How many tokens we have upgraded by now. */\n', '    uint256 public totalUpgraded;\n', '\n', '    /**\n', '     * Upgrade states.\n', '     *\n', '     * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n', "     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '     * - ReadyToUpgrade: The agent is set and the balance holders can upgrade their tokens\n', '     *\n', '     */\n', '    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade}\n', '\n', '    /**\n', '     * Somebody has upgraded some of his tokens.\n', '     */\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '     * New upgrade agent available.\n', '     */\n', '    event UpgradeAgentSet(address agent);\n', '\n', '    /**\n', '     * Do not allow construction without upgrade master set.\n', '     */\n', '    constructor(address _upgradeMaster) public {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    /**\n', '     * Allow the token holder to upgrade some of their tokens to a new contract.\n', '     */\n', '    function upgrade(uint256 value) public {\n', '\n', '        UpgradeState state = getUpgradeState();\n', '\n', '        require(state == UpgradeState.ReadyToUpgrade, "It\'s required that the upgrade state is ready.");\n', '\n', '        // Validate input value.\n', '        require(value > 0, "The upgrade value is required to be above 0.");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        totalUpgraded = totalUpgraded.add(value);\n', '\n', '        // Upgrade agent reissues the tokens\n', '        upgradeAgent.upgradeFrom(msg.sender, value);\n', '        emit Upgrade(msg.sender, upgradeAgent, value);\n', '    }\n', '\n', '    /**\n', '     * Set an upgrade agent that handles\n', '     */\n', '    function setUpgradeAgent(address agent) external {\n', '\n', '        require(canUpgrade(), "It\'s required to be in canUpgrade() condition when setting upgrade agent.");\n', '\n', '        require(agent != address(0), "Agent is required to be an non-empty address when setting upgrade agent.");\n', '\n', '        // Only a master can designate the next agent\n', '        require(msg.sender == upgradeMaster, "Message sender is required to be the upgradeMaster when setting upgrade agent.");\n', '\n', '        // Upgrade has already begun for an agent\n', '        require(getUpgradeState() != UpgradeState.ReadyToUpgrade, "Upgrade state is required to not be upgrading when setting upgrade agent.");\n', '\n', '        require(address(upgradeAgent) == address(0), "upgradeAgent once set, cannot be reset");\n', '\n', '        upgradeAgent = UpgradeAgent(agent);\n', '\n', '        // Bad interface\n', '        require(upgradeAgent.isUpgradeAgent(), "The provided updateAgent contract is required to be compliant to the UpgradeAgent interface method when setting upgrade agent.");\n', '\n', '        // Make sure that token supplies match in source and target\n', '        require(upgradeAgent.originalSupply() == totalSupply_, "The provided upgradeAgent contract\'s originalSupply is required to be equivalent to existing contract\'s totalSupply_ when setting upgrade agent.");\n', '\n', '        emit UpgradeAgentSet(upgradeAgent);\n', '    }\n', '\n', '    /**\n', '     * Get the state of the token upgrade.\n', '     */\n', '    function getUpgradeState() public view returns (UpgradeState) {\n', '        if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if (address(upgradeAgent) == address(0)) return UpgradeState.WaitingForAgent;\n', '        else return UpgradeState.ReadyToUpgrade;\n', '    }\n', '\n', '    /**\n', '     * Change the upgrade master.\n', '     *\n', '     * This allows us to set a new owner for the upgrade mechanism.\n', '     */\n', '    function setUpgradeMaster(address master) public {\n', '        require(master != address(0), "The provided upgradeMaster is required to be a non-empty address when setting upgrade master.");\n', '\n', '        require(msg.sender == upgradeMaster, "Message sender is required to be the original upgradeMaster when setting (new) upgrade master.");\n', '\n', '        upgradeMaster = master;\n', '    }\n', '\n', '    bool canUpgrade_ = true;\n', '\n', '    /**\n', '     * Child contract can enable to provide the condition when the upgrade can begin.\n', '     */\n', '    function canUpgrade() public view returns (bool) {\n', '        return canUpgrade_;\n', '    }\n', '}\n', '\n', 'contract JobToken is ReleasableToken, MintableToken, UpgradeableToken {\n', '\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    address public VerificationNodesWallet;\n', '    address public LaunchIncentiveWallet;\n', '    address public capitalReserveWallet;\n', '    address public ecosystemdevelopmentWallet;\n', '    address public InitialFundingWallet;\n', '\n', '    /**\n', '     * Construct the token.\n', '     *\n', '     * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '     *\n', '     * @param _name Token name\n', '     * @param _symbol Token symbol - should be all caps\n', '     * @param _initialSupply How many tokens we start with\n', '     * @param _decimals Number of decimal places\n', '     * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '     */\n', '    constructor(string _name, string _symbol, uint256 _initialSupply, uint8 _decimals, bool _mintable,\n', '        address _VerificationNodesWallet,\n', '        address _LaunchIncentiveWallet,\n', '        address _capitalReserveWallet,\n', '        address _ecosystemdevelopmentWallet,\n', '        address _InitialFundingWallet)\n', '    public UpgradeableToken(msg.sender) {\n', '\n', '        // Create any address, can be transferred\n', '        // to team multisig via changeOwner(),\n', '        // also remember to call setUpgradeMaster()\n', '        owner = msg.sender;\n', '        releaseAgent = owner;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        decimals = _decimals;\n', '\n', '        VerificationNodesWallet = _VerificationNodesWallet;\n', '        LaunchIncentiveWallet = _LaunchIncentiveWallet;\n', '        capitalReserveWallet = _capitalReserveWallet;\n', '        ecosystemdevelopmentWallet = _ecosystemdevelopmentWallet;\n', '        InitialFundingWallet = _InitialFundingWallet;\n', '\n', '        if (_initialSupply > 0) {\n', '            require((_initialSupply % 10) == 0, "_initialSupply has to be a mulitple of 10");\n', '            uint256 twentyfivePerCent = _initialSupply.mul(25).div(100);\n', '            uint256 twentyPerCent = _initialSupply.mul(2).div(10);\n', '            uint256 tenPerCent = _initialSupply.div(10);\n', '\n', '            mint(VerificationNodesWallet, twentyPerCent);\n', '\n', '            mint(LaunchIncentiveWallet, twentyfivePerCent);\n', '\n', '            mint(capitalReserveWallet, twentyfivePerCent);\n', '\n', '            mint(ecosystemdevelopmentWallet, twentyPerCent);\n', '\n', '            mint(InitialFundingWallet, tenPerCent);\n', '\n', '        }\n', '\n', '        // No more new supply allowed after the token creation\n', '        if (!_mintable) {\n', '            finishMinting();\n', '            require(totalSupply_ > 0, "Total supply is required to be above 0 if the token is not mintable.");\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * When token is released to be transferable, enforce no new tokens can be created.\n', '     */\n', '    function releaseTokenTransfer() public onlyReleaseAgent {\n', '        mintingFinished = true;\n', '        super.releaseTokenTransfer();\n', '    }\n', '\n', '    /**\n', '     * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '     */\n', '    function canUpgrade() public view returns (bool) {\n', '        return released && super.canUpgrade();\n', '    }\n', '\n', '    // Total supply\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupply_.sub(balances[address(0)]);\n', '    }\n', '\n', '}\n', '\n', 'contract UpgradeAgent {\n', '\n', '    uint public originalSupply;\n', '\n', '    /** Interface marker */\n', '    function isUpgradeAgent() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}']