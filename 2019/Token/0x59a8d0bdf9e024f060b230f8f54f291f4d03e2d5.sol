['/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract CHXSwap is Ownable {\n', '    event AddressMapped(address indexed ethAddress, string chxAddress);\n', '    event AddressMappingRemoved(address indexed ethAddress, string chxAddress);\n', '\n', '    mapping (address => string) public mappedAddresses;\n', '\n', '    function CHXSwap()\n', '        public\n', '    {\n', '    }\n', '\n', '    function mapAddress(string _chxAddress)\n', '        external\n', '    {\n', '        address ethAddress = msg.sender;\n', '        require(bytes(mappedAddresses[ethAddress]).length == 0);\n', '        mappedAddresses[ethAddress] = _chxAddress;\n', '        AddressMapped(ethAddress, _chxAddress);\n', '    }\n', '\n', '    function removeMappedAddress(address _ethAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(bytes(mappedAddresses[_ethAddress]).length != 0);\n', '        string memory chxAddress = mappedAddresses[_ethAddress];\n', '        delete mappedAddresses[_ethAddress];\n', '        AddressMappingRemoved(_ethAddress, chxAddress);\n', '    }\n', '\n', "    // Enable recovery of ether sent by mistake to this contract's address.\n", '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        owner.transfer(_amount);\n', '        return true;\n', '    }\n', '\n', "    // Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\n", '    function drainStrayTokens(ERC20Basic _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return _token.transfer(owner, _amount);\n', '    }\n', '}']