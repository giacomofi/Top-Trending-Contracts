['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-08\n', '*/\n', '\n', 'pragma solidity "0.4.24";\n', '\n', 'interface Icollectible {\n', '\n', '  function timeofcontract() external view returns (uint256);\n', '  \n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '   \n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Collectible is Icollectible {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '\n', 'contract WhalePhal is Collectible, Ownable {\n', '\n', '    string   constant TOKEN_NAME = "Whale Phal";\n', '    string   constant TOKEN_SYMBOL = "PHAL";\n', '    uint8    constant TOKEN_DECIMALS = 5;\n', '    uint256 timenow = now;\n', '    uint256 sandclock;\n', '    uint256 thefinalclock = 0;\n', '    uint256 shifter = 0;\n', '    \n', '\n', '    uint256  TOTAL_SUPPLY = 300000 * (10 ** uint256(TOKEN_DECIMALS));\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint256) timesheet;\n', '\n', '    constructor() public payable\n', '        Collectible(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\n', '        Ownable() {\n', '\n', '        _mint(owner(), TOTAL_SUPPLY);\n', '    }\n', '    \n', '    using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '  \n', '  mapping(address => uint256) private _timesheet;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '  \n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function timeofcontract() public view returns (uint256) {\n', '      return timenow;\n', '  }\n', '  \n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '  \n', '  function timesheetNumber(address owner) public view returns (uint256) {\n', '      return _timesheet[owner];\n', '  }\n', '  \n', '  function timesheetCheck(address owner) public view returns (bool) {\n', '      if (now >= _timesheet[owner] + (1 * 180 days)) {\n', '          return true;\n', '      } else if (_timesheet[owner] == 0) {\n', '          return true;\n', '      } else {\n', '          return false;\n', '      }\n', '  }\n', '\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '  \n', '  function calculatetimepercentage() public returns (uint256) {\n', '      if (now >= timenow + (1 * 365 days) && _totalSupply >= 26000000000 && now <= timenow + (1 * 1460 days)) {\n', '          sandclock = 1;\n', '          shifter = 1;\n', '          return sandclock;\n', '      } else if (now >= timenow + (1 * 730 days) && _totalSupply >= 22000000000 && shifter == 1  && now <= timenow + (1 * 1825 days)) {\n', '          sandclock = 2;\n', '          shifter = 2;\n', '          return sandclock; }\n', '        else if (now >= timenow + (1 * 1095 days) && _totalSupply >= 20000000000 && shifter == 2)  {\n', '            sandclock = 0;\n', '            thefinalclock = 1;\n', '            return thefinalclock;\n', '      } else {\n', '          sandclock = 0;\n', '          return sandclock;\n', '      }\n', '      \n', '  }\n', '  \n', '    function findPercentage() public returns (uint256)  {\n', '        uint256 percentage;\n', '        calculatetimepercentage();\n', '        if (sandclock == 1) {\n', '            percentage = 7;\n', '            return percentage;\n', '        } else if (sandclock == 2) {\n', '             percentage = 10;\n', '            return percentage;\n', '        } else if (thefinalclock == 1) {\n', '            percentage = 0;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 365 days)) {\n', '            percentage = 4;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 730 days)) {\n', '            percentage = 5;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1095 days)) {\n', '            percentage = 7;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1460 days)){\n', '            percentage = 8;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1825 days)) {\n', '            percentage = 10;\n', '            return percentage;\n', '        } else {\n', '            percentage = 0;\n', '            return percentage;\n', '        }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    require(value <= 1000000 || msg.sender == owner());\n', '    require(balanceOf(to) <= (_totalSupply / 10));\n', '   \n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    uint256 fee = findPercentage();\n', '    uint256 receivedTokens = value;\n', '    uint256 take;\n', '    \n', '    if (timesheetCheck(msg.sender) == true) {\n', '        take = 0;\n', '    } else if (fee == 0) {\n', '        take = 0;\n', '    } else if (msg.sender == owner()) {\n', '        take = 0;\n', '    } else {\n', '    take = value / fee;\n', '    receivedTokens = value - take;\n', '    }\n', '    \n', '    _balances[to] = _balances[to].add(receivedTokens);\n', '    \n', '    if(_totalSupply > 0){\n', '        _totalSupply = _totalSupply - take;\n', '    } \n', '    \n', '    emit Transfer(msg.sender, to, receivedTokens);\n', '    _timesheet[msg.sender] = now;\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '    require(value <= 1000000 || msg.sender == owner());\n', '    require(balanceOf(to) <= (_totalSupply / 10));\n', '   \n', '   _balances[from] = _balances[from].sub(value);\n', '   uint256 fee = findPercentage();\n', '    uint256 receivedTokens = value;\n', '    uint256 take;\n', '    \n', '    if (timesheetCheck(msg.sender) == true) {\n', '        take = 0;\n', '    } else if (fee == 0) {\n', '        take = 0;\n', '    } else if (msg.sender == owner()) {\n', '        take = 0;\n', '    } else {\n', '    take = value / fee;\n', '    receivedTokens = value - take;\n', '    }\n', '    _balances[to] = _balances[to].add(receivedTokens);\n', '    _totalSupply = _totalSupply - take;\n', '    \n', '    \n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, receivedTokens);\n', '    _timesheet[msg.sender] = now;\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}']
['pragma solidity "0.4.24";\n', '\n', 'interface Icollectible {\n', '\n', '  function timeofcontract() external view returns (uint256);\n', '  \n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '   \n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Collectible is Icollectible {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '\n', 'contract WhalePhal is Collectible, Ownable {\n', '\n', '    string   constant TOKEN_NAME = "Whale Phal";\n', '    string   constant TOKEN_SYMBOL = "PHAL";\n', '    uint8    constant TOKEN_DECIMALS = 5;\n', '    uint256 timenow = now;\n', '    uint256 sandclock;\n', '    uint256 thefinalclock = 0;\n', '    uint256 shifter = 0;\n', '    \n', '\n', '    uint256  TOTAL_SUPPLY = 300000 * (10 ** uint256(TOKEN_DECIMALS));\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint256) timesheet;\n', '\n', '    constructor() public payable\n', '        Collectible(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\n', '        Ownable() {\n', '\n', '        _mint(owner(), TOTAL_SUPPLY);\n', '    }\n', '    \n', '    using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '  \n', '  mapping(address => uint256) private _timesheet;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '  \n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function timeofcontract() public view returns (uint256) {\n', '      return timenow;\n', '  }\n', '  \n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '  \n', '  function timesheetNumber(address owner) public view returns (uint256) {\n', '      return _timesheet[owner];\n', '  }\n', '  \n', '  function timesheetCheck(address owner) public view returns (bool) {\n', '      if (now >= _timesheet[owner] + (1 * 180 days)) {\n', '          return true;\n', '      } else if (_timesheet[owner] == 0) {\n', '          return true;\n', '      } else {\n', '          return false;\n', '      }\n', '  }\n', '\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '  \n', '  function calculatetimepercentage() public returns (uint256) {\n', '      if (now >= timenow + (1 * 365 days) && _totalSupply >= 26000000000 && now <= timenow + (1 * 1460 days)) {\n', '          sandclock = 1;\n', '          shifter = 1;\n', '          return sandclock;\n', '      } else if (now >= timenow + (1 * 730 days) && _totalSupply >= 22000000000 && shifter == 1  && now <= timenow + (1 * 1825 days)) {\n', '          sandclock = 2;\n', '          shifter = 2;\n', '          return sandclock; }\n', '        else if (now >= timenow + (1 * 1095 days) && _totalSupply >= 20000000000 && shifter == 2)  {\n', '            sandclock = 0;\n', '            thefinalclock = 1;\n', '            return thefinalclock;\n', '      } else {\n', '          sandclock = 0;\n', '          return sandclock;\n', '      }\n', '      \n', '  }\n', '  \n', '    function findPercentage() public returns (uint256)  {\n', '        uint256 percentage;\n', '        calculatetimepercentage();\n', '        if (sandclock == 1) {\n', '            percentage = 7;\n', '            return percentage;\n', '        } else if (sandclock == 2) {\n', '             percentage = 10;\n', '            return percentage;\n', '        } else if (thefinalclock == 1) {\n', '            percentage = 0;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 365 days)) {\n', '            percentage = 4;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 730 days)) {\n', '            percentage = 5;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1095 days)) {\n', '            percentage = 7;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1460 days)){\n', '            percentage = 8;\n', '            return percentage;\n', '        } else if (now <= timenow + (1 * 1825 days)) {\n', '            percentage = 10;\n', '            return percentage;\n', '        } else {\n', '            percentage = 0;\n', '            return percentage;\n', '        }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    require(value <= 1000000 || msg.sender == owner());\n', '    require(balanceOf(to) <= (_totalSupply / 10));\n', '   \n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    uint256 fee = findPercentage();\n', '    uint256 receivedTokens = value;\n', '    uint256 take;\n', '    \n', '    if (timesheetCheck(msg.sender) == true) {\n', '        take = 0;\n', '    } else if (fee == 0) {\n', '        take = 0;\n', '    } else if (msg.sender == owner()) {\n', '        take = 0;\n', '    } else {\n', '    take = value / fee;\n', '    receivedTokens = value - take;\n', '    }\n', '    \n', '    _balances[to] = _balances[to].add(receivedTokens);\n', '    \n', '    if(_totalSupply > 0){\n', '        _totalSupply = _totalSupply - take;\n', '    } \n', '    \n', '    emit Transfer(msg.sender, to, receivedTokens);\n', '    _timesheet[msg.sender] = now;\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '    require(value <= 1000000 || msg.sender == owner());\n', '    require(balanceOf(to) <= (_totalSupply / 10));\n', '   \n', '   _balances[from] = _balances[from].sub(value);\n', '   uint256 fee = findPercentage();\n', '    uint256 receivedTokens = value;\n', '    uint256 take;\n', '    \n', '    if (timesheetCheck(msg.sender) == true) {\n', '        take = 0;\n', '    } else if (fee == 0) {\n', '        take = 0;\n', '    } else if (msg.sender == owner()) {\n', '        take = 0;\n', '    } else {\n', '    take = value / fee;\n', '    receivedTokens = value - take;\n', '    }\n', '    _balances[to] = _balances[to].add(receivedTokens);\n', '    _totalSupply = _totalSupply - take;\n', '    \n', '    \n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, receivedTokens);\n', '    _timesheet[msg.sender] = now;\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}']
