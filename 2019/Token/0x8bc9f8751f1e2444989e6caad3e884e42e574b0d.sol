['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        \n', '    return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20Standard {\n', '    using SafeMath for uint256;\n', '    uint public totalSupply;\n', '    uint public totalETH;\n', '    \n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    string public version;\n', '    \n', '    address public admin;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    //Fix for short address attack against ERC20\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length == size + 4);\n', '        _;\n', '    } \n', '    \n', '    modifier onlyAdmin() {\n', '        assert(msg.sender == admin);\n', '        _;\n', '    } \n', '    \n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function payout(uint _amount, address payable _address) public onlyAdmin {\n', '        _address.transfer(_amount);\n', '        totalETH = totalETH - _amount;\n', '    }\n', '    \n', '    function transfer(address _recipient, uint _value) public onlyPayloadSize(2*32) {\n', '        require(balances[msg.sender] >= _value && _value > 0);\n', '        balances[msg.sender].sub(_value);\n', '        balances[_recipient].add(_value);\n', '        emit Transfer(msg.sender, _recipient, _value);        \n', '    }\n', '\n', '    //Event which is triggered to log all transfers to this contract&#39;s event log\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint _value\n', '    );\n', '        \n', '    function () external payable{\n', '        balances[msg.sender] = balances[msg.sender] + msg.value;\n', '        totalSupply = totalSupply + msg.value;\n', '        totalETH = totalETH + msg.value;\n', '        emit Transfer(address(0), msg.sender, msg.value);\n', '    }\n', '    \n', '}\n', '\n', 'contract SOSToken is ERC20Standard {\n', '    constructor () public {\n', '        totalSupply = 0;\n', '        name = "SOSToken";\n', '        decimals = 18;\n', '        symbol = "SOS";\n', '        version = "1.0";\n', '        balances[msg.sender] = totalSupply;\n', '        admin = 0x62bB779577668377D5C08d7F9999611E7086B3c5;\n', '    }\n', '}']