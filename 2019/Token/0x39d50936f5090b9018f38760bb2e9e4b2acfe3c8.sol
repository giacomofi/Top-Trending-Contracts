['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin- solidity/pull/522\n', '        if (a == 0) {\n', '            return 0; \n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient. \n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b; \n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '           assert(b <= a);\n', '           return a - b; \n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '           c = a + b;\n', '           assert(c >= a);\n', '           return c; \n', '    }\n', '}\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public constant returns (uint supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public  returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value)  public  returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public  returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public  constant returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract RegularToken is Token {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    function transfer(address _to, uint _value)  public   returns (bool) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] =  balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)  public  returns (bool) {\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        \n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner)  public  constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public  returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public  constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '\n', '    function totalSupply() public constant returns (uint supply) { \n', '        return totalSupply;\n', '    }\n', '}\n', '\n', 'contract UnboundedRegularToken is RegularToken {\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '    \n', '    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n', '    /// @param _from Address to transfer from.\n', '    /// @param _to Address to transfer to.\n', '    /// @param _value Amount to transfer.\n', '    /// @return Success of transfer.\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        \n', '        require(balances[_from] >= _value);\n', '        require(allowance >= _value);\n', '        \n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        if (allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Lend0xDefiToken is UnboundedRegularToken {\n', '    \n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "Lend0xDefiToken";\n', '    string constant public symbol = "LDF";\n', '\n', '    function Lend0xDefiToken() public  {\n', '        totalSupply = 40*10**26;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '}']