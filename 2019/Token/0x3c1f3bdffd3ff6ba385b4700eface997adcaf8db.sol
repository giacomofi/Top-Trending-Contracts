['pragma solidity 0.5.1;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'HIPHOP' token contract\n", '\n', '// Symbol      : HIPHOP\n', '// Name        : 4hiphop\n', '// Total supply: 10000000000 // 100 billion\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '    function remainder(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a % b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract HIPHOP is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint256 public _totalSupply;\n', '    bool    internal Open;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    \n', '    uint256 public hardCap;\n', '    uint256 public softCap;\n', '    uint256 public fundsRaised;\n', '    uint256 internal firststageopeningTime;\n', '    uint256 internal firststageclosingTime;\n', '    uint256 internal secondstageopeningTime;\n', '    uint256 internal secondstageclosingTime;\n', '    uint256 internal laststageopeningTime;\n', '    uint256 internal laststageclosingTime;\n', '    uint256 internal purchasers;\n', '    address payable wallet;\n', '    uint256 internal minTx;\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    modifier onlyWhileOpen {\n', '        require(Open);\n', '        _;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address _owner, address payable _wallet) public {\n', '        symbol = "HIPHOP";\n', '        name = "4hiphop";\n', '        decimals = 18;\n', '        _totalSupply = 1e11 ; // 100 billion\n', '        owner = _owner;\n', '        wallet = _wallet;\n', '        balances[owner] = totalSupply();\n', '        Open = true;\n', '        \n', '        emit Transfer(address(0),owner, totalSupply());\n', '        \n', '        hardCap = 1e7; // 10 million\n', '        softCap = 0;   // 0\n', '        _setTimes();\n', '        minTx = 1 ether;\n', '    }\n', '    \n', '    \n', "    /** ERC20Interface function's implementation **/\n", '    \n', '    function totalSupply() public view returns (uint){\n', '       return _totalSupply * 1e18; // 100 billion \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function _setTimes() internal {\n', '        firststageopeningTime    = 1548979200; // 1st FEB 2019      00:00:00 GMT\n', '        firststageclosingTime    = 1551398400; // 1st MARCH 2019    00:00:00 GMT\n', '        secondstageopeningTime   = 1554076800; // 1st APR 2019      00:00:00 GMT \n', '        secondstageclosingTime   = 1556668800; // 1st MAY 2019      00:00:00 GMT\n', '        laststageopeningTime     = 1559347200; // 1st JUN 2019      00:00:00 GMT\n', '        laststageclosingTime     = 1561939200; // 1st JULY 2019     00:00:00 GMT\n', '        \n', '    }\n', '    \n', '    function burnTokens(address account, uint256 value) public onlyOwner {\n', '        _burn(account, value);\n', '    }\n', '    \n', '    function pause() public onlyOwner {\n', '        Open = false;\n', '    }\n', '    \n', '    function unPause() public onlyOwner {\n', '        Open = true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '    \n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\n', '        require(msg.value >= minTx);\n', '    \n', '        uint256 weiAmount = msg.value;\n', '    \n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '        \n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        \n', '        tokens = _getBonus(tokens);\n', '        \n', '        fundsRaised = fundsRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(address(this), _beneficiary, weiAmount, tokens);\n', '        purchasers++;\n', '        if(tokens != 0){\n', '            _forwardFunds(msg.value);\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure{\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '  \n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 rate = _getRate(); //per wei \n', '        return _weiAmount.mul(rate);\n', '    }\n', '    \n', '    function _getRate() internal view returns (uint256) {\n', '        uint256 rate;\n', '        // DURING FIRST STAGE\n', '        if(now >= firststageopeningTime && now <= firststageclosingTime) { \n', '            rate = 1205; // 10 CENTS = USD 120\n', '        } \n', '        // DURING SECOND STAGE\n', '        else if (now >= secondstageopeningTime && now <= secondstageclosingTime) {\n', '            rate = 240; // 50 CENTS = usd 120\n', '        } \n', '        // DURING LAST STAGE\n', '        else if (now >= laststageopeningTime && now <= laststageclosingTime) {\n', '            rate = 120; // 1 dollar = usd 120\n', '        }\n', '        \n', '        return rate;\n', '    }\n', '    \n', '    function _getBonus(uint256 tokens) internal view returns (uint256) {\n', '        if(purchasers <= 1000){\n', '            // give 50% bonus\n', '            tokens = tokens.add((tokens.mul(50)).div(100));\n', '        }\n', '        return tokens;\n', '    }\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _transfer(_beneficiary, _tokenAmount);\n', '    }\n', '        function _transfer(address to, uint tokens) internal returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(to != address(0));\n', '        require(balances[address(this)] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(address(this),to,tokens);\n', '        return true;\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '    \n', '    function _forwardFunds(uint256 _amount) internal {\n', '        wallet.transfer(_amount);\n', '    }\n', '    \n', '}']