['pragma solidity 0.5.7;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ApproveAndCall Interface.\n', ' * @dev ApproveAndCall system allows to communicate with smart-contracts.\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\n', '}\n', '\n', '/**\n', ' * @dev Extension of `ERC20` that allows onwer to destroy his own\n', ' * tokens.\n', ' */\n', 'contract BurnableToken is ERC20, Ownable {\n', '\n', '     /**\n', '      * @dev Allows to burn a specific amount of tokens to the owner.\n', '      * @param value The amount of token to be burned.\n', '      */\n', '     function burn(uint256 value) public onlyOwner {\n', '         _burn(msg.sender, value);\n', '     }\n', '\n', '}\n', '\n', '/**\n', ' * @title LockableToken.\n', ' * @dev Extension of `ERC20` that allows to lock an amount of tokens of specific\n', ' * addresses for specific time.\n', ' * @author https://grox.solutions\n', ' */\n', 'contract LockableToken is BurnableToken {\n', '\n', '    // stopped state to allow to lock tokens\n', '    bool private _started;\n', '\n', '    // variables to store info about locked addresses\n', '    mapping(address => Lock) private _locked;\n', '    struct Lock {\n', '        bool locked;\n', '        Batch[] batches;\n', '    }\n', '    struct Batch {\n', '        uint256 amount;\n', '        uint256 time;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to lock an amount of tokens of specific addresses.\n', '     * Available only to the owner.\n', '     * Can be called once.\n', '     * @param addresses array of addresses.\n', '     * @param values array of amounts of tokens.\n', '     * @param times array of Unix times.\n', '     */\n', '    function lock(address[] calldata addresses, uint256[] calldata values, uint256[] calldata times) external onlyOwner {\n', '        require(!_started);\n', '        require(addresses.length == values.length && values.length == times.length);\n', '\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            require(balanceOf(addresses[i]) >= values[i]);\n', '\n', '            if (!_locked[addresses[i]].locked) {\n', '                _locked[addresses[i]].locked = true;\n', '            }\n', '\n', '            _locked[addresses[i]].batches.push(Batch(values[i], block.timestamp + times[i]));\n', '\n', '            if (_locked[addresses[i]].batches.length > 1) {\n', '                assert(\n', '                    _locked[addresses[i]].batches[_locked[addresses[i]].batches.length - 1].amount\n', '                    < _locked[addresses[i]].batches[_locked[addresses[i]].batches.length - 2].amount\n', '                    &&\n', '                    _locked[addresses[i]].batches[_locked[addresses[i]].batches.length - 1].time\n', '                    > _locked[addresses[i]].batches[_locked[addresses[i]].batches.length - 2].time\n', '                );\n', '            }\n', '        }\n', '\n', '        _started = true;\n', '    }\n', '\n', '    /**\n', '     * @dev modified internal transfer function that prevents any transfer of locked tokens.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        if (_locked[from].locked) {\n', '            for (uint256 i = 0; i < _locked[from].batches.length; i++) {\n', '                if (block.timestamp <= _locked[from].batches[i].time) {\n', '                    require(value <= balanceOf(from).sub(_locked[from].batches[i].amount));\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '        super._transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @return true if locking is done.\n', '     */\n', '    function started() external view returns(bool) {\n', '        return _started;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title The main project contract.\n', ' * @author https://grox.solutions\n', ' */\n', 'contract DOMToken is LockableToken {\n', '\n', '    // name of the token\n', '    string private _name = "Diamond Open Market";\n', '    // symbol of the token\n', '    string private _symbol = "DOM";\n', '    // decimals of the token\n', '    uint8 private _decimals = 18;\n', '\n', '    // initial supply\n', '    uint256 public constant INITIAL_SUPPLY = 6000000000  * (10 ** 18);\n', '\n', '    /**\n', '      * @dev constructor function that is called once at deployment of the contract.\n', '      * @param recipient Address to receive initial supply.\n', '      */\n', '    constructor(address recipient) public {\n', '\n', '        _mint(recipient, INITIAL_SUPPLY);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart contract.\n', '    * @param spender Address of smart contracts to work with.\n', '    * @param amount Amount of tokens to send.\n', '    * @param extraData Any extra data.\n', '    */\n', '    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\n', '        require(approve(spender, amount));\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to any owner of the contract withdraw needed ERC20 token\n', '    * from this contract (promo or bounties for example).\n', '    * @param ERC20Token Address of ERC20 token.\n', '    * @param recipient Account to receive tokens.\n', '    */\n', '    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '}']