['// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IModerator.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', 'interface IModerator {\n', '    function verifyIssue(address _tokenHolder, uint256 _value, bytes calldata _data) external view\n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '\n', '    function verifyTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external view \n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '\n', '    function verifyTransferFrom(address _from, address _to, address _forwarder, uint256 _amount, bytes calldata _data) external view \n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '\n', '    function verifyRedeem(address _sender, uint256 _amount, bytes calldata _data) external view \n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '\n', '    function verifyRedeemFrom(address _sender, address _tokenHolder, uint256 _amount, bytes calldata _data) external view\n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);        \n', '\n', '    function verifyControllerTransfer(address _controller, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '\n', '    function verifyControllerRedeem(address _controller, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\n', '        returns (bool allowed, byte statusCode, bytes32 applicationCode);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IRewardsUpdatable.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', 'interface IRewardsUpdatable {\n', '    event NotifierUpdated(address implementation);\n', '\n', '    function updateOnTransfer(address from, address to, uint amount) external returns (bool);\n', '    function updateOnBurn(address account, uint amount) external returns (bool);\n', '    function setRewardsNotifier(address notifier) external;\n', '}\n', '\n', '// File: contracts/interfaces/IRewardable.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', 'interface IRewardable {\n', '    event RewardsUpdated(address implementation);\n', '\n', '    function setRewards(IRewardsUpdatable rewards) external;\n', '}\n', '\n', '// File: contracts/rewards/Rewardable.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice A contract with an associated Rewards contract to calculate rewards during token movements.\n', ' */\n', 'contract Rewardable is IRewardable, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    IRewardsUpdatable public rewards; // The rewards contract\n', '\n', '    event RewardsUpdated(address implementation);\n', '\n', '    /**\n', '    * @notice Calculates and updates _dampings[address] based on the token movement.\n', '    * @notice This modifier is applied to mint(), transfer(), and transferFrom().\n', '    * @param _from Address of sender\n', '    * @param _to Address of recipient\n', '    * @param _value Amount of tokens\n', '    */\n', '    modifier updatesRewardsOnTransfer(address _from, address _to, uint _value) {\n', '        _;\n', '        require(rewards.updateOnTransfer(_from, _to, _value), "Rewards updateOnTransfer failed."); // [External contract call]\n', '    }\n', '\n', '    /**\n', '    * @notice Calculates and updates _dampings[address] based on the token burning.\n', '    * @notice This modifier is applied to burn()\n', '    * @param _account Address of owner\n', '    * @param _value Amount of tokens\n', '    */\n', '    modifier updatesRewardsOnBurn(address _account, uint _value) {\n', '        _;\n', '        require(rewards.updateOnBurn(_account, _value), "Rewards updateOnBurn failed."); // [External contract call]\n', '    }\n', '\n', '    /**\n', '    * @notice Links a Rewards contract to this contract.\n', '    * @param _rewards Rewards contract address.\n', '    */\n', '    function setRewards(IRewardsUpdatable _rewards) external onlyOwner {\n', '        require(address(_rewards) != address(0), "Rewards address must not be a zero address.");\n', '        require(Address.isContract(address(_rewards)), "Address must point to a contract.");\n', '        rewards = _rewards;\n', '        emit RewardsUpdated(address(_rewards));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20Redeemable.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', 'contract ERC20Redeemable is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public totalRedeemed;\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account. Overriden to track totalRedeemed.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        totalRedeemed = totalRedeemed.add(value); // Keep track of total for Rewards calculation\n', '        super._burn(account, value);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC1594.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '/// @title IERC1594 Security Token Standard\n', '/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\n', 'interface IERC1594 {\n', '    // Issuance / Redemption Events\n', '    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\n', '    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\n', '\n', '    // Transfers\n', '    function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\n', '    function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\n', '\n', '    // Token Redemption\n', '    function redeem(uint256 _value, bytes calldata _data) external;\n', '    function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\n', '\n', '    // Token Issuance\n', '    function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\n', '    function isIssuable() external view returns (bool);\n', '\n', '    // Transfer Validity\n', '    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (bool, byte, bytes32);\n', '    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (bool, byte, bytes32);\n', '}\n', '\n', '// File: contracts/interfaces/IHasIssuership.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', 'interface IHasIssuership {\n', '    event IssuershipTransferred(address indexed from, address indexed to);\n', '\n', '    function transferIssuership(address newIssuer) external;\n', '}\n', '\n', '// File: contracts/roles/IssuerRole.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '// @notice Issuers are capable of issuing new TENX tokens from the TENXToken contract.\n', 'contract IssuerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event IssuerAdded(address indexed account);\n', '    event IssuerRemoved(address indexed account);\n', '\n', '    Roles.Role internal _issuers;\n', '\n', '    modifier onlyIssuer() {\n', '        require(isIssuer(msg.sender), "Only Issuers can execute this function.");\n', '        _;\n', '    }\n', '\n', '    constructor() internal {\n', '        _addIssuer(msg.sender);\n', '    }\n', '\n', '    function isIssuer(address account) public view returns (bool) {\n', '        return _issuers.has(account);\n', '    }\n', '\n', '    function addIssuer(address account) public onlyIssuer {\n', '        _addIssuer(account);\n', '    }\n', '\n', '    function renounceIssuer() public {\n', '        _removeIssuer(msg.sender);\n', '    }\n', '\n', '    function _addIssuer(address account) internal {\n', '        _issuers.add(account);\n', '        emit IssuerAdded(account);\n', '    }\n', '\n', '    function _removeIssuer(address account) internal {\n', '        _issuers.remove(account);\n', '        emit IssuerRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/roles/ControllerRole.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '// @notice Controllers are capable of performing ERC1644 forced transfers.\n', 'contract ControllerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event ControllerAdded(address indexed account);\n', '    event ControllerRemoved(address indexed account);\n', '\n', '    Roles.Role internal _controllers;\n', '\n', '    modifier onlyController() {\n', '        require(isController(msg.sender), "Only Controllers can execute this function.");\n', '        _;\n', '    }\n', '\n', '    constructor() internal {\n', '        _addController(msg.sender);\n', '    }\n', '\n', '    function isController(address account) public view returns (bool) {\n', '        return _controllers.has(account);\n', '    }\n', '\n', '    function addController(address account) public onlyController {\n', '        _addController(account);\n', '    }\n', '\n', '    function renounceController() public {\n', '        _removeController(msg.sender);\n', '    }\n', '\n', '    function _addController(address account) internal {\n', '        _controllers.add(account);\n', '        emit ControllerAdded(account);\n', '    }    \n', '\n', '    function _removeController(address account) internal {\n', '        _controllers.remove(account);\n', '        emit ControllerRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/compliance/Moderated.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', 'contract Moderated is ControllerRole {\n', '    IModerator public moderator; // External moderator contract\n', '\n', '    event ModeratorUpdated(address moderator);\n', '\n', '    constructor(IModerator _moderator) public {\n', '        moderator = _moderator;\n', '    }\n', '\n', '    /**\n', '    * @notice Links a Moderator contract to this contract.\n', '    * @param _moderator Moderator contract address.\n', '    */\n', '    function setModerator(IModerator _moderator) external onlyController {\n', '        require(address(moderator) != address(0), "Moderator address must not be a zero address.");\n', '        require(Address.isContract(address(_moderator)), "Address must point to a contract.");\n', '        moderator = _moderator;\n', '        emit ModeratorUpdated(address(_moderator));\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC1594.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC1594 is IERC1594, IHasIssuership, Moderated, ERC20Redeemable, IssuerRole {\n', '    bool public isIssuable = true;\n', '\n', '    event Issued(address indexed operator, address indexed to, uint256 value, bytes data);\n', '    event Redeemed(address indexed operator, address indexed from, uint256 value, bytes data);\n', '    event IssuershipTransferred(address indexed from, address indexed to);\n', '    event IssuanceFinished();\n', '\n', '    /**\n', '    * @notice Modifier to check token issuance status\n', '    */\n', '    modifier whenIssuable() {\n', '        require(isIssuable, "Issuance period has ended.");\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * @notice Transfer the token's singleton Issuer role to another address.\n", '     */\n', '    function transferIssuership(address _newIssuer) public whenIssuable onlyIssuer {\n', '        require(_newIssuer != address(0), "New Issuer cannot be zero address.");\n', '        require(msg.sender != _newIssuer, "New Issuer cannot have the same address as the old issuer.");\n', '        _addIssuer(_newIssuer);\n', '        _removeIssuer(msg.sender);\n', '        emit IssuershipTransferred(msg.sender, _newIssuer);\n', '    }\n', '\n', '    /**\n', '     * @notice End token issuance period permanently.\n', '     */\n', '    function finishIssuance() public whenIssuable onlyIssuer {\n', '        isIssuable = false;\n', '        emit IssuanceFinished();\n', '    }\n', '\n', '    function issue(address _tokenHolder, uint256 _value, bytes memory _data) public whenIssuable onlyIssuer {\n', '        bool allowed;\n', '        (allowed, , ) = moderator.verifyIssue(_tokenHolder, _value, _data);\n', '        require(allowed, "Issue is not allowed.");\n', '        _mint(_tokenHolder, _value);\n', '        emit Issued(msg.sender, _tokenHolder, _value, _data);\n', '    }\n', '\n', '    function redeem(uint256 _value, bytes memory _data) public {\n', '        bool allowed;\n', '        (allowed, , ) = moderator.verifyRedeem(msg.sender, _value, _data);\n', '        require(allowed, "Redeem is not allowed.");\n', '\n', '        _burn(msg.sender, _value);\n', '        emit Redeemed(msg.sender, msg.sender, _value, _data);\n', '    }\n', '\n', '    function redeemFrom(address _tokenHolder, uint256 _value, bytes memory _data) public {\n', '        bool allowed;\n', '        (allowed, , ) = moderator.verifyRedeemFrom(msg.sender, _tokenHolder, _value, _data);\n', '        require(allowed, "RedeemFrom is not allowed.");\n', '\n', '        _burnFrom(_tokenHolder, _value);\n', '        emit Redeemed(msg.sender, _tokenHolder, _value, _data);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        bool allowed;\n', '        (allowed, , ) = canTransfer(_to, _value, "");\n', '        require(allowed, "Transfer is not allowed.");\n', '\n', '        success = super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferWithData(address _to, uint256 _value, bytes memory _data) public {\n', '        bool allowed;\n', '        (allowed, , ) = canTransfer(_to, _value, _data);\n', '        require(allowed, "Transfer is not allowed.");\n', '\n', '        require(super.transfer(_to, _value), "Transfer failed.");\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        bool allowed;\n', '        (allowed, , ) = canTransferFrom(_from, _to, _value, "");\n', '        require(allowed, "TransferFrom is not allowed.");\n', '\n', '        success = super.transferFrom(_from, _to, _value);\n', '    }    \n', '\n', '    function transferFromWithData(address _from, address _to, uint256 _value, bytes memory _data) public {\n', '        bool allowed;\n', '        (allowed, , ) = canTransferFrom(_from, _to, _value, _data);\n', '        require(allowed, "TransferFrom is not allowed.");\n', '\n', '        require(super.transferFrom(_from, _to, _value), "TransferFrom failed.");\n', '    }\n', '\n', '    function canTransfer(address _to, uint256 _value, bytes memory _data) public view \n', '        returns (bool success, byte statusCode, bytes32 applicationCode) \n', '    {\n', '        return moderator.verifyTransfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function canTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public view \n', '        returns (bool success, byte statusCode, bytes32 applicationCode) \n', '    {\n', '        return moderator.verifyTransferFrom(_from, _to, msg.sender, _value, _data);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IERC1644.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '/// @title IERC1644 Controller Token Operation (part of the ERC1400 Security Token Standards)\n', '/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\n', 'interface IERC1644 {\n', '    // Controller Events\n', '    event ControllerTransfer(\n', '        address _controller,\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value,\n', '        bytes _data,\n', '        bytes _operatorData\n', '    );\n', '\n', '    event ControllerRedemption(\n', '        address _controller,\n', '        address indexed _tokenHolder,\n', '        uint256 _value,\n', '        bytes _data,\n', '        bytes _operatorData\n', '    );\n', '\n', '    // Controller Operation\n', '    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n', '    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n', '    function isControllable() external view returns (bool);\n', '}\n', '\n', '// File: contracts/token/ERC1644.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC1644 is IERC1644, Moderated, ERC20Redeemable {\n', '    event ControllerTransfer(\n', '        address controller,\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        bytes data,\n', '        bytes operatorData\n', '    );\n', '\n', '    event ControllerRedemption(\n', '        address controller,\n', '        address indexed tokenHolder,\n', '        uint256 value,\n', '        bytes data,\n', '        bytes operatorData\n', '    );\n', '\n', '    function controllerTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        bytes memory _data,\n', '        bytes memory _operatorData\n', '    ) public onlyController {\n', '        bool allowed;\n', '        (allowed, , ) = moderator.verifyControllerTransfer(\n', '            msg.sender,\n', '            _from,\n', '            _to,\n', '            _value,\n', '            _data,\n', '            _operatorData\n', '        );\n', '        require(allowed, "controllerTransfer is not allowed.");\n', '        require(_value <= balanceOf(_from), "Insufficient balance.");\n', '        _transfer(_from, _to, _value);\n', '        emit ControllerTransfer(msg.sender, _from, _to, _value, _data, _operatorData);\n', '    }\n', '\n', '    function controllerRedeem(\n', '        address _tokenHolder,\n', '        uint256 _value,\n', '        bytes memory _data,\n', '        bytes memory _operatorData\n', '    ) public onlyController {\n', '        bool allowed;\n', '        (allowed, , ) = moderator.verifyControllerRedeem(\n', '            msg.sender,\n', '            _tokenHolder,\n', '            _value,\n', '            _data,\n', '            _operatorData\n', '        );\n', '        require(allowed, "controllerRedeem is not allowed.");\n', '        require(_value <= balanceOf(_tokenHolder), "Insufficient balance.");\n', '        _burn(_tokenHolder, _value);\n', '        emit ControllerRedemption(msg.sender, _tokenHolder, _value, _data, _operatorData);\n', '    }\n', '\n', '    function isControllable() public view returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC1400.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC1400 is ERC1594, ERC1644 {\n', '    constructor(IModerator _moderator) public Moderated(_moderator) {}\n', '}\n', '\n', '// File: contracts/token/ERC20Capped.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice Capped ERC20 token\n', ' * @dev ERC20 token with a token cap on mints, to ensure a 1:1 mint ratio of TENX to PAY.\n', ' */\n', 'contract ERC20Capped is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint public cap;\n', '    uint public totalMinted;\n', '\n', '    constructor (uint _cap) public {\n', '        require(_cap > 0, "Cap must be above zero.");\n', '        cap = _cap;\n', '        totalMinted = 0;\n', '    }\n', '\n', '    /**\n', '    * @notice Modifier to check that an operation does not exceed the token cap.\n', '    * @param _newValue Token mint amount\n', '    */\n', '    modifier capped(uint _newValue) {\n', '        require(totalMinted.add(_newValue) <= cap, "Cannot mint beyond cap.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Cannot _mint beyond cap.\n', '    */\n', '    function _mint(address _account, uint _value) internal capped(_value) {\n', '        totalMinted = totalMinted.add(_value);\n', '        super._mint(_account, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/token/RewardableToken.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice RewardableToken\n', " * @dev ERC1400 token with a token cap and amortized rewards calculations. It's pausable for contract migrations.\n", ' */\n', 'contract RewardableToken is ERC1400, ERC20Capped, Rewardable, Pausable {\n', '    constructor(IModerator _moderator, uint _cap) public ERC1400(_moderator) ERC20Capped(_cap) {}\n', '\n', '    // ERC20\n', '    function transfer(address _to, uint _value) \n', '        public \n', '        whenNotPaused\n', '        updatesRewardsOnTransfer(msg.sender, _to, _value) returns (bool success) \n', '    {\n', '        success = super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) \n', '        public \n', '        whenNotPaused\n', '        updatesRewardsOnTransfer(_from, _to, _value) returns (bool success) \n', '    {\n', '        success = super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // ERC1400: ERC1594\n', '    function issue(address _tokenHolder, uint256 _value, bytes memory _data) \n', '        public \n', '        whenNotPaused\n', '        // No damping updates, uses unallocated rewards\n', '    {\n', '        super.issue(_tokenHolder, _value, _data);\n', '    }\n', '\n', '    function redeem(uint256 _value, bytes memory _data) \n', '        public \n', '        whenNotPaused\n', '        updatesRewardsOnBurn(msg.sender, _value)\n', '    {\n', '        super.redeem(_value, _data);\n', '    }\n', '\n', '    function redeemFrom(address _tokenHolder, uint256 _value, bytes memory _data) \n', '        public\n', '        whenNotPaused\n', '        updatesRewardsOnBurn(_tokenHolder, _value)\n', '    {\n', '        super.redeemFrom(_tokenHolder, _value, _data);\n', '    }\n', '\n', '    // ERC1400: ERC1644\n', '    function controllerTransfer(address _from, address _to, uint256 _value, bytes memory _data, bytes memory _operatorData) \n', '        public\n', '        updatesRewardsOnTransfer(_from, _to, _value) \n', '    {\n', '        super.controllerTransfer(_from, _to, _value, _data, _operatorData);\n', '    }\n', '\n', '    function controllerRedeem(address _tokenHolder, uint256 _value, bytes memory _data, bytes memory _operatorData) \n', '        public\n', '        updatesRewardsOnBurn(_tokenHolder, _value)\n', '    {\n', '        super.controllerRedeem(_tokenHolder, _value, _data, _operatorData);\n', '    }\n', '}\n', '\n', '// File: contracts/token/TENXToken.sol\n', '\n', 'pragma solidity 0.5.4;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice TENXToken\n', ' */\n', 'contract TENXToken is RewardableToken, ERC20Detailed("TenX Token", "TENX", 18) {\n', '    constructor(IModerator _moderator, uint _cap) public RewardableToken(_moderator, _cap) {}\n', '}']