['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Interface {\n', '\n', '    string public constant name = "CWC-ER";\n', '    string public constant symbol = "CWC-ER";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract CWCToken is ERC20Interface, SafeMath {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  mapping (address => mapping (address => uint256)) public allowanceOf;\n', '\n', '   constructor() public {\n', '      name = "CWC-ER";\n', '      symbol = "CWC-ER";\n', '      decimals = 18;\n', '      totalSupply = 100000000 * 10 ** uint256(decimals);\n', '      balanceOf[msg.sender] = totalSupply;\n', '   }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '       require(_to != 0x0);\n', '       require(balanceOf[_from] >= _value);\n', '       require(balanceOf[_to] + _value > balanceOf[_to]);\n', '       uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '       balanceOf[_from] -= _value;\n', '       balanceOf[_to] += _value;\n', '      emit Transfer(_from, _to, _value);\n', '       assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '       _transfer(msg.sender, _to, _value);\n', '       return true;\n', '   }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '       require(allowanceOf[_from][msg.sender] >= _value);\n', '       allowanceOf[_from][msg.sender] -= _value;\n', '       _transfer(_from, _to, _value);\n', '       return true;\n', '   }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '       allowanceOf[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '       return true;\n', '   }\n', '\n', '   function allowance(address _owner, address _spender) view public returns (uint remaining){\n', '     return allowanceOf[_owner][_spender];\n', '   }\n', '\n', '  function totalSupply() public constant returns (uint totalsupply){\n', '      return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) public constant returns(uint balance){\n', '      return balanceOf[tokenOwner];\n', '  }\n', '\n', '}']