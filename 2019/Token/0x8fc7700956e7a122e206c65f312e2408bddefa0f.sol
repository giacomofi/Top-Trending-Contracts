['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-20\n', '*/\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  /* This notifies clients about the amount burnt */\n', '  event Burn(address indexed from, uint256 value);\n', '  /* This notifies clients about the amount frozen */\n', '  event Freeze(address indexed from, uint256 value);\n', '  /* This notifies clients about the amount unfrozen */\n', '  event Unfreeze(address indexed from, uint256 value);\n', '}\n', '\n', 'contract Owned{\n', '    address public owner;\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner{\n', '        if(msg.sender != owner){\n', '            revert();\n', '        }else{\n', '            _;\n', '        }\n', '    }\n', '\t\n', '    function transferOwner(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/* Math operations with safety checks */\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', 'contract BUS is ERC20, Owned, SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function BUS(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public{\n', '        balanceOf[msg.sender] = initialSupply;\n', '        totalSupply = initialSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        require(_to != 0x0);\n', '\t\trequire(_value > 0); \n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '    \n', '\t/* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != 0x0);\n', '\t\trequire(_value > 0); \n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t\n', '\t/* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\trequire(_value > 0); \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function burn(address _target, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(_value > 0); \n', '\t\trequire(_target != 0x0); \n', '        require(balanceOf[_target] >= _value);\n', '        balanceOf[_target] = SafeMath.safeSub(balanceOf[_target], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);\n', '        Burn(_target, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(address _target, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(_value > 0); \n', '\t\trequire(_target != 0x0); \n', '        require(balanceOf[_target] >= _value);\n', '        balanceOf[_target] = SafeMath.safeSub(balanceOf[_target], _value);\n', '        freezeOf[_target] = SafeMath.safeAdd(freezeOf[_target], _value);\n', '        Freeze(_target, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(address _target, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(_value > 0); \n', '\t\trequire(_target != 0x0); \n', '        require(freezeOf[_target] >= _value);\n', '        freezeOf[_target] = SafeMath.safeSub(freezeOf[_target], _value);\n', '\t\tbalanceOf[_target] = SafeMath.safeAdd(balanceOf[_target], _value);\n', '        Unfreeze(_target, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction withdrawEther(uint256 amount) onlyOwner public{\n', '\t\towner.transfer(amount);\n', '\t}\n', '\t\n', '\tfunction() payable public{\n', '    }\n', '}']