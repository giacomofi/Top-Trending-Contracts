['/**\n', ' *Submitted for verification at Etherscan.io on 2019-06-20\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint256);\n', '\n', '    function balanceOf(address who) external view returns(uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns(uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns(bool);\n', '\n', '    function approve(address spender, uint256 value) external returns(bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns(bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function ceil(uint256 a, uint256 m) internal pure returns(uint256) {\n', '        uint256 c = add(a, m);\n', '        uint256 d = sub(c, 1);\n', '        return mul(div(d, m), m);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns(string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns(string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'contract Blockburn is ERC20Detailed {\n', '\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => mapping(address => uint256)) private _allowed;\n', '\n', '    string constant tokenName = "Blockburn";\n', '    string constant tokenSymbol = "BURN";\n', '    uint8 constant tokenDecimals = 18;\n', '    uint256 _totalSupply;\n', '    uint256 public basePercent = 200;\n', '    address admin;\n', '    address developers;\n', '    uint256 public _startTime;\n', '    uint256 public _burnStopAmount;\n', '    uint256 public _lastTokenSupply;\n', '    uint256 public _releaseAmountAfterTwoYears;\n', '    bool public _timeLockReleased;\n', '\n', '    constructor(address _developers, address bank) public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '        admin = msg.sender;\n', '        developers = _developers;\n', '        // give 1m tokens to admin\n', '        _mint(bank, 1000000 * 10**18);\n', '        // give 800k tokens to contract\n', '        _mint(address(this), 800000 * 10**18);\n', '        \n', '        _totalSupply = 2000000 * 10**18;\n', '\n', '        _startTime = now;\n', '        _burnStopAmount = 0;\n', '        _lastTokenSupply = 1200000 * 10**18;\n', '        _releaseAmountAfterTwoYears = 200000 * 10**18;\n', '        \n', '        _timeLockReleased = false;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "Only admin can do this");\n', '        _;\n', '    }\n', '\n', '    function transferAdmin(address _newAdmin) public onlyAdmin {\n', '        require(_newAdmin != admin && _newAdmin != address(0), "Error");\n', '        admin = _newAdmin;\n', '    }\n', '\n', '    function totalSupply() public view returns(uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns(uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns(uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function findTwoPercent(uint256 value) internal view returns(uint256) {\n', '        uint256 roundValue = value.ceil(basePercent);\n', '        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n', '        return onePercent;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns(bool) {\n', '        require(value <= _balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        uint256 tokensToBurn = findTwoPercent(value);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '\n', '        uint contractBalance = _balances[address(this)];\n', '\n', '        if(contractBalance > 0) {\n', '            if (tokensToBurn > contractBalance)\n', '                tokensToBurn = contractBalance; \n', '\n', '            _burn(address(this), tokensToBurn);\n', '        }\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyAdmin {\n', '        address contractAddr = address(this);\n', '        require(amount <= _balances[contractAddr]);\n', '\n', '        _balances[contractAddr] = _balances[contractAddr].sub(amount);\n', '        _balances[admin] = _balances[admin].add(amount);\n', '        emit Transfer(contractAddr, admin, amount);\n', '    }\n', '\n', '    function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n', '        for (uint256 i = 0; i < receivers.length; i++) {\n', '            transfer(receivers[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool) {\n', '        require(value <= _balances[from]);\n', '        require(value <= _allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '\n', '        uint256 tokensToBurn = findTwoPercent(value);\n', '\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '        uint contractBalance = _balances[address(this)];\n', '\n', '        if(contractBalance > 0) {\n', '            if (tokensToBurn > contractBalance)\n', '                tokensToBurn = contractBalance; \n', '\n', '            _burn(address(this), tokensToBurn);\n', '        }\n', '\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(amount != 0);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(amount != 0);\n', '        require(amount <= _balances[account]);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[account] = _balances[account].sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) external {\n', '        require(amount <= _allowed[account][msg.sender]);\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '        _burn(account, amount);\n', '    }\n', '\n', '    function release() public {\n', '        require(now >= _startTime + 102 weeks, "Early for release");\n', '        require(!_timeLockReleased, "Timelock already released");\n', '        \n', '        _mint(developers, _releaseAmountAfterTwoYears);\n', '        _timeLockReleased = true;\n', '    }\n', '}']