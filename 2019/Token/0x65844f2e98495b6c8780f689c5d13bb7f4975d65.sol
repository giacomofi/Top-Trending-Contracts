['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    function mint(address _to,uint256 _amount) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Mint(address indexed to, uint256 amount);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '  \n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', 'interface Estate{\n', '    function newContracts(uint _index) external view returns(address);\n', '    function box_contract_amount()external view returns(uint);\n', '}\n', '\n', '\n', 'interface Test{\n', '  function mint(address _to,uint256 _amount) external;\n', '  function burn(address _to,uint256 _amount) external;\n', '  function setName(string _name, string _symbol) external;\n', '  function balanceOf(address tokenOwner) external view returns (uint);\n', '} \n', '\n', 'contract Factory is Owned{\n', '    \n', '    mapping(uint8 => mapping(uint8 => address)) public MaterialTokens;\n', '    address mix_address;\n', '    address boxFactory_address;\n', '    \n', '    function control(uint8 boxIndex, uint8 materialIndex, address _addr, uint _value) public{  \n', '        require(checkBox());\n', '        Test test = Test(MaterialTokens[boxIndex][materialIndex]); \n', '        test.mint(_addr, _value); \n', '    }\n', '    \n', '    function control_burn(uint8 boxIndex, uint8 materialIndex, address _addr, uint _value) public{ \n', '        require(msg.sender == mix_address);\n', '        Test test = Test(MaterialTokens[boxIndex][materialIndex]); \n', '        test.burn(_addr, _value); \n', '    }\n', '      \n', '    function createContract(uint8 boxIndex, uint8 materialIndex, string _name, string _symbol) public onlyOwner{\n', '        address newContract = new MaterialToken(_name, _symbol);\n', '        \n', '        MaterialTokens[boxIndex][materialIndex] = newContract;\n', '    }  \n', '    \n', '    function controlSetName(uint8 boxIndex, uint8 materialIndex, string _name, string _symbol) public onlyOwner{\n', '        Test test = Test(MaterialTokens[boxIndex][materialIndex]);\n', '        test.setName(_name,_symbol);\n', '    }\n', '    \n', '    function controlSearchCount(uint8 boxIndex, uint8 materialIndex,address target)public view returns (uint) {\n', '         Test test = Test(MaterialTokens[boxIndex][materialIndex]);\n', '         return test.balanceOf(target);\n', '    }\n', '    \n', '    function set_mix_contract(address _mix_address) public onlyOwner{\n', '        mix_address = _mix_address;\n', '    }\n', '    \n', '    function checkBox() public view returns(bool){\n', '        uint length = Estate(boxFactory_address).box_contract_amount();\n', '        for(uint i=0;i<length;i++){\n', '             address box_address = Estate(boxFactory_address).newContracts(i);\n', '             if(msg.sender == box_address){\n', '                 return true;\n', '             }\n', '        }\n', '        return false;\n', '         \n', '    }\n', '    \n', '    function set_boxFactory_addressl(address _boxFactory_address) public onlyOwner {\n', '        boxFactory_address = _boxFactory_address;\n', '    }\n', '    \n', '\n', '}\n', '\n', 'contract MaterialToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '\n', '    constructor(string _name, string _symbol) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        _totalSupply = 0;\n', '        balances[owner] = _totalSupply;\n', '\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function mint(address _to,uint256 _amount)public onlyOwner returns (bool) {\n', '        \n', '        _totalSupply = _totalSupply.add(_amount);\n', '        \n', '        balances[_to] = balances[_to].add(_amount);\n', '        \n', '        emit Mint(_to, _amount);\n', '        \n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function burn(address _to,uint256 _amount)public onlyOwner returns (bool)  {\n', '        require(balances[_to] >= _amount);\n', '        \n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        \n', '        balances[_to] = balances[_to].sub(_amount);\n', '        \n', '        emit Mint(_to, _amount);\n', '        \n', '        emit Transfer(_to, address(0), _amount);\n', '        return true;\n', '    }\n', '   \n', '    \n', '    function setName(string _name, string _symbol)public onlyOwner{\n', '        symbol = _symbol;\n', '        name = _name;\n', '    }\n', '\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']