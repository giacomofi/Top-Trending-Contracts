['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract EthmoMinter {\n', '    address[] newContracts;\n', '    address constant private Admin = 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\n', '    address constant private addr=0x6536eF439c4507a49F54eaBEB0127a3Bca9Def89;\n', '    address constant private addrs=0xE80cBfDA1b8D0212C4b79D6d6162dc377C96876e;\n', '    address constant private Tummy=0x820090F4D39a9585a327cc39ba483f8fE7a9DA84;\n', '    address constant private Willy=0xA4757a60d41Ff94652104e4BCdB2936591c74d1D;\n', '    address constant private Nicky=0x89473CD97F49E6d991B68e880f4162e2CBaC3561;\n', '    address constant private Artem=0xA7e8AFa092FAa27F06942480D28edE6fE73E5F88;\n', '    uint FIWDeploy;\n', '    uint FIWMint;\n', '    uint mult;\n', '    \n', '    function createContract (bytes32 EthmojiName,bytes32 EthmojiNicknameOrSymbol,uint Amount) public payable{\n', '        if (msg.sender==Admin || msg.sender==Tummy || msg.sender==Willy || msg.sender==Nicky || msg.sender==Artem){\n', '        }else{\n', '            VIPs Mult=VIPs(addrs);\n', '            mult=Mult.IsVIP(msg.sender);\n', '            EthmoFees fee=EthmoFees(addr);\n', '            FIWDeploy=fee.GetFeeEthmoDeploy();\n', '            FIWMint=fee.GetFeeEthmoMint();\n', '            require(msg.value >= (FIWDeploy+FIWMint*Amount)*mult);\n', '        }\n', '        Admin.transfer(msg.value);\n', '        address Sender=msg.sender;\n', '        address newContract = new Contract(EthmojiName,EthmojiNicknameOrSymbol,Amount,Sender);\n', '\n', '        newContracts.push(newContract);\n', '\n', '    } \n', '    \n', '    function MintMoreEthmojis (address EthmojiAddress,uint Amount) public payable{\n', '        if (msg.sender==Admin || msg.sender==Tummy || msg.sender==Willy || msg.sender==Nicky || msg.sender==Artem){\n', '        }else{\n', '            VIPs Mult=VIPs(addrs);\n', '            mult=Mult.IsVIP(msg.sender);\n', '            EthmoFees fee=EthmoFees(addr);\n', '            FIWMint=fee.GetFeeEthmoMint();\n', '            require(msg.value >= FIWMint*Amount*mult);\n', '        }\n', '        Admin.transfer(msg.value);\n', '        address Sender=msg.sender;\n', '        address Legit=address(this);\n', '        Contract mints=Contract(EthmojiAddress);\n', '        mints.MintMore(Sender,Amount,Legit);\n', '    }\n', '    \n', '    \n', '    function () public payable{\n', '        Admin.transfer(msg.value);\n', '    }\n', '        \n', '   \n', '\n', '}\n', '\n', '\n', 'contract VIPs {\n', '    function IsVIP(address Address)returns(uint Multiplier);\n', '}\n', '    \n', '\n', 'contract EthmoFees {\n', '    function GetFeeEthmoDeploy()returns(uint);\n', '    function GetFeeEthmoMint()returns(uint);\n', '}\n', '\n', '\n', 'contract Contract is ERC20Interface, Owned, SafeMath {\n', '    address constant private Admin = 0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\n', '\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '\n', '    function Contract (bytes32 EthmojiName,bytes32 EthmojiNicknameOrSymbol,uint Amount,address Sender) public {\n', '        \n', '    bytes memory bytesString = new bytes(32);\n', '    uint charCount = 0;\n', '    for (uint j = 0; j < 32; j++) {\n', '        byte char = byte(bytes32(uint(EthmojiName) * 2 ** (8 * j)));\n', '        if (char != 0) {\n', '            bytesString[charCount] = char;\n', '            charCount++;\n', '        }\n', '    }\n', '    bytes memory bytesStringTrimmed = new bytes(charCount);\n', '    for (j = 0; j < charCount; j++) {\n', '        bytesStringTrimmed[j] = bytesString[j];\n', '    }\n', '    \n', '\n', '    bytes memory bytesStringsw = new bytes(32);\n', '    uint charCountsw = 0;\n', '    for (uint k = 0; k < 32; k++) {\n', '        byte charsw = byte(bytes32(uint(EthmojiNicknameOrSymbol) * 2 ** (8 * k)));\n', '        if (charsw != 0) {\n', '            bytesStringsw[charCountsw] = charsw;\n', '            charCountsw++;\n', '        }\n', '    }\n', '    bytes memory bytesStringTrimmedsw = new bytes(charCountsw);\n', '    for (k = 0; k < charCountsw; k++) {\n', '        bytesStringTrimmedsw[k] = bytesStringsw[k];\n', '    }\n', '\n', '        symbol = string(bytesStringTrimmedsw);\n', '        name = string(bytesStringTrimmed);\n', '        decimals = 0;\n', '        _totalSupply = Amount;\n', '        balances[Sender] = _totalSupply;\n', '        emit Transfer(address(0), Sender, _totalSupply);\n', '    }\n', '\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '   \n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '  \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    function MintMore(address Sender,uint Amount,address Legit) public payable {\n', '        require(msg.sender==Legit);\n', '        uint tokens=Amount;\n', '        balances[Sender] = safeAdd(balances[Sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), Sender, tokens);\n', '    }\n', '    \n', '    \n', '\n', '    function () public payable{\n', '        Admin.transfer(msg.value);\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']