['pragma solidity 0.5.8;\n', '//import "https://raw.githubusercontent.com/KevK0/solidity-type-casting/master/contracts/stringCasting.sol";\n', '//import "https://raw.githubusercontent.com/Arachnid/solidity-stringutils/master/src/strings.sol";\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event transferOwner(address indexed existingOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '      emit transferOwner(msg.sender, owner);\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC865 {\n', '\n', '    function transferPreSigned(\n', '        bytes memory _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function approvePreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function increaseApprovalPreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function decreaseApprovalPreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', 'contract ERC865Token is ERC865, StandardToken, Ownable {\n', '\n', '    /* Nonces of transfers performed */\n', '    mapping(bytes => bool) signatures;\n', '    /* mapping of nonces of each user */\n', '    mapping (address => uint256) nonces;\n', '\n', '    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '\n', '    bytes4 internal constant transferSig = 0x48664c16;\n', '    bytes4 internal constant approvalSig = 0xf7ac9c2e;\n', '    bytes4 internal constant increaseApprovalSig = 0xa45f71ff;\n', '    bytes4 internal constant decreaseApprovalSig = 0x59388d78;\n', '    //bytes memory vvv=0x1d915567e2b192cd7a09915020b24a7980e1705003e97b8774af4aa53d9886176fe4e09916f4d865cfbec913a36030534d9e04c9b0293346743bdcdc0020408f1b;\n', '\n', '    //return nonce using function\n', '    function getNonce(address _owner) public view returns (uint256 nonce){\n', '      return nonces[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Submit a presigned transfer\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSigned(\n', '        bytes memory _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(signatures[_signature] == false);\n', '\n', '        bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _to, _value, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '        require(_nonce == nonces[from].add(1));\n', '        require(_value.add(_fee) <= balances[from]);\n', '\n', '        nonces[from] = _nonce;\n', '        signatures[_signature] = true;\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned approval\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(signatures[_signature] == false);\n', '\n', '        bytes32 hashedTx = recoverPreSignedHash(address(this), approvalSig, _spender, _value, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '        require(_nonce == nonces[from].add(1));\n', '        require(_value.add(_fee) <= balances[from]);\n', '\n', '        nonces[from] = _nonce;\n', '        signatures[_signature] = true;\n', '        allowed[from][_spender] =_value;\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(signatures[_signature] == false);\n', '\n', '//bytes32 bb=0x59e737eebff4522155b125a11dbd8d225c1a7f047ce93747b103b197e116c224;\n', '//bytes storage nbh=0x7e4362ae61ed93458b1921df843e72570c7f1e11713e6883c0b93ce95e40a1f939daf972b192cff66721f62382c3e3ad423c5d312c2c5c5ac6d00a6d187729861b;\n', '        bytes32 hashedTx = recoverPreSignedHash(address(this), increaseApprovalSig, _spender, _addedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '        require(_nonce == nonces[from].add(1));\n', '        require(allowed[from][_spender].add(_addedValue).add(_fee) <= balances[from]);\n', '        //require(_addedValue <= allowed[from][_spender]);\n', '\n', '        nonces[from] = _nonce;\n', '        signatures[_signature] = true;\n', '        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, allowed[from][_spender]);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function decreaseApprovalPreSigned(\n', '        bytes memory _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(signatures[_signature] == false);\n', '\n', '        bytes32 hashedTx = recoverPreSignedHash(address(this), decreaseApprovalSig, _spender, _subtractedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '        require(_nonce == nonces[from].add(1));\n', '        //require(_subtractedValue <= balances[from]);\n', '        //require(_subtractedValue <= allowed[from][_spender]);\n', '        //require(_subtractedValue <= allowed[from][_spender]);\n', '        require(_fee <= balances[from]);\n', '\n', '        nonces[from] = _nonce;\n', '        signatures[_signature] = true;\n', '        uint oldValue = allowed[from][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[from][_spender] = 0;\n', '        } else {\n', '            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _subtractedValue);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another\n', '     * @param _signature bytes The signature, issued by the spender.\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    /*function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(signatures[_signature] == false);\n', '        signatures[_signature] = true;\n', '\n', '        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n', '\n', '        address spender = recover(hashedTx, _signature);\n', '        require(spender != address(0));\n', '        require(_value.add(_fee) <= balances[_from])?;\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n', '\n', '        balances[spender] = balances[spender].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(spender, msg.sender, _fee);\n', '        return true;\n', '    }*/\n', '\n', '     /**\n', '      * @notice Hash (keccak256) of the payload used by recoverPreSignedHash\n', '      * @param _token address The address of the token\n', '      * @param _spender address The address which will spend the funds.\n', '      * @param _value uint256 The amount of tokens.\n', '      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '      * @param _nonce uint256 Presigned transaction number.\n', '      */    \n', '    function recoverPreSignedHash(\n', '        address _token,\n', '        bytes4 _functionSig,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '        )\n', '      public pure returns (bytes32)\n', '      {\n', '        //return keccak256(_token, _functionSig, _spender, _value, _fee, _nonce);\n', '        return keccak256(abi.encodePacked(_token, _functionSig, _spender, _value, _fee,_nonce));\n', '    }\n', '\n', '    /**\n', '     * @notice Recover signer address from a message by using his signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes memory sig) public pure returns (address) {\n', '      bytes32 r;\n', '      bytes32 s;\n', '      uint8 v;\n', '\n', '      //Check the signature length\n', '      if (sig.length != 65) {\n', '        return (address(0));\n', '      }\n', '\n', '      // Divide the signature in r, s and v variables\n', '      assembly {\n', '        r := mload(add(sig, 32))\n', '        s := mload(add(sig, 64))\n', '        v := byte(0, mload(add(sig, 96)))\n', '      }\n', '\n', '      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '      if (v < 27) {\n', '        v += 27;\n', '      }\n', '\n', '      // If the version is correct return the signer address\n', '      if (v != 27 && v != 28) {\n', '        return (address(0));\n', '      } else {\n', '        return ecrecover(hash, v, r, s);\n', '      }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract SampleERC865Token is ERC865Token {\n', '  //using strings for *;\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant _tokenSupply = 42000000;\n', '  string public constant name = "GCH Token";\n', '  string public constant symbol = "GCH";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant decimalValue = 10 ** uint256(decimals);\n', ' \n', '  \n', '  bytes32 internal constant digest = 0x618e860eefb172f655b56aad9bdc5685c037efba70b9c34a8e303b19778efd2c;//=""\n', '  \n', '  uint256 public sellPrice;\n', '  uint256 public buyPrice;\n', '    \n', '  \n', '  constructor() public {\n', '    //require(_tokenSupply > 0);\n', '    totalSupply_ = _tokenSupply.mul(decimalValue);\n', '    balances[msg.sender] = totalSupply_;\n', '    owner = msg.sender;\n', '    emit Transfer(address(this), msg.sender, totalSupply_);\n', '  }\n', '  /*\n', '  function transferMul(address[] froms,\n', '    address[] _toes,\n', '    uint256[] _values,\n', '    uint256[] _fees) public returns (bool[]) {\n', '        require(msg.sender == owner);\n', '        \n', '        bool[] storage isSuccess;\n', '        //uint256 fee=0;\n', '            \n', '        for (uint i=0; i < _toes.length; i++) {\n', '        \n', '            if(_values[i].add(_fees[i]) <= balances[froms[i]]){\n', '                balances[froms[i]] = balances[froms[i]].sub(_values[i]).sub(_fees[i]);\n', '                balances[_toes[i]] = balances[_toes[i]].add(_values[i]);\n', '                \n', '                balances[msg.sender] = balances[msg.sender].add(_fees[i]);\n', '                \n', '                emit Transfer(froms[i], _toes[i], _values[i]);\n', '                if(froms[i] != msg.sender){\n', '                emit Transfer(froms[i], msg.sender, _fees[i]);\n', '                    \n', '                }\n', '                isSuccess.push(true);\n', '            }else{\n', '                isSuccess.push(false);}\n', '        \n', '    }\n', '    //emit Transfer(msg.sender, _to, _value);\n', '    \n', '    return isSuccess;\n', '  }\n', '  */\n', '  /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;                 // calculates the amount\n', '        emit Transfer(address(this), msg.sender, amount);       // makes the transfers\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        address myAddress = address(this);\n', '        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy\n', '        emit Transfer(msg.sender, address(this), amount);       // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '/*\n', '  using stringcast for string;\n', '  function transferArray(string signs,address[] _toes,\n', '        uint256[] _values,\n', '        uint256[] _fees,\n', '        uint256[] _nonces) public returns (bool) {\n', '            require(msg.sender == owner);\n', '         \n', '            var s = signs.toSlice();\n', '            var delim = ".".toSlice();\n', '            var parts = new string[](s.count(delim) + 1);\n', '            for(uint i = 0; i < parts.length; i++) {\n', '                parts[i] = s.split(delim).toString();\n', '                \n', '                bytes32 hashedTx = recoverPreSignedHash(address(this), transferSig, _toes[i], _values[i], _fees[i], _nonces[i]);\n', '                address from = recover(hashedTx,parts[i].toBytes());\n', '                \n', '                if(_values[i].add(_fees[i]) <= balances[from]){\n', '                balances[from] = balances[from].sub(_values[i]).sub(_fees[i]);\n', '                balances[_toes[i]] = balances[_toes[i]].add(_values[i]);\n', '                \n', '                balances[msg.sender] = balances[msg.sender].add(_fees[i]);\n', '                \n', '                emit Transfer(from, _toes[i], _values[i]);\n', '                if(_fees[i] != 0){\n', '                    emit Transfer(from, msg.sender, _fees[i]);\n', '                    \n', '                }\n', '            }\n', '        }\n', '    return true;\n', '  }\n', '  */\n', '  \n', '    \n', '  function transferArray(uint8[] memory v,bytes32[] memory r,bytes32[] memory s,address[] memory _toes,\n', '        uint256[] memory _values,\n', '        uint256[] memory _fees) public returns (bool) {\n', '            require(msg.sender == owner);\n', '            uint totalFee = 0;\n', '         \n', '            for(uint i = 0; i < _toes.length; i++) {\n', '                //bytes32 messageDigest = keccak256(hashes[i]);\n', '                address from = ecrecover(digest, v[i], r[i], s[i]);\n', '                \n', '                uint256 value=_values[i];\n', '                uint256 fee=_fees[i];\n', '                \n', '                uint fromBalance = balances[from];\n', '                \n', '                \n', '                if(value.add(fee) <= fromBalance){\n', '                    address to = _toes[i];\n', '                    uint toBalance = balances[to];\n', '                    \n', '                    balances[from] = fromBalance.sub(value).sub(fee);\n', '                    balances[to] = toBalance.add(value);\n', '                    \n', '                    //balances[msg.sender] = balances[msg.sender].add(_fees[i]);\n', '                    \n', '                    emit Transfer(from, to, value);\n', '                   \n', '                    totalFee=totalFee.add(fee);\n', '                    \n', '                    if(fee != 0){\n', '                        \n', '                        emit Transfer(from, msg.sender, fee);\n', '                    \n', '                    }\n', '                    \n', '                    \n', '                \n', '                }\n', '            \n', '            }\n', '            balances[msg.sender] = balances[msg.sender].add(totalFee);\n', '            \n', '        return true;\n', '  }\n', '  \n', '  \n', '  \n', '  \n', '    function sendBatchCS(address[] calldata _recipients, uint[] calldata _values) external returns (bool) {\n', '            require(_recipients.length == _values.length);\n', '    \n', '            uint senderBalance = balances[msg.sender];\n', '            for (uint i = 0; i < _values.length; i++) {\n', '                uint value = _values[i];\n', '                address to = _recipients[i];\n', '                require(senderBalance >= value);\n', '                if(msg.sender != to){\n', '                    senderBalance = senderBalance - value;\n', '                    balances[to] += value;\n', '                }\n', '    \t\t\temit Transfer(msg.sender, to, value);\n', '            }\n', '            balances[msg.sender] = senderBalance;\n', '            return true;\n', '    }\n', '  \n', '}']