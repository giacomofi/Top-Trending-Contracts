['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant public returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\tbalances[_to] = balances[_to].add(_value);\n', '\temit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', ' \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract Doli is MintableToken {\n', '    \n', '    string public constant name = "DOLI Token";\n', '    \n', '    string public constant symbol = "DOLI";\n', '    \n', '    uint32 public constant decimals = 18;\n', '\n', '}\n', '\n', '\n', 'contract DoliCrowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    uint restrictedPercent;\n', '\n', '    address restrictedAccount;\n', '\n', '    Doli public token = new Doli();\n', '\n', '    uint startDate;\n', '\t\n', '\tuint endDate;\n', '    \n', '    uint period2;\n', '\t\n', '\tuint period3;\n', '\t\n', '\tuint period4;\n', '\t\n', '    uint rate;\n', '   \n', '    uint hardcap;\n', '    \n', '   \n', '\n', '    constructor() public payable {\n', '\t\n', '        restrictedAccount = 0x023770c61B9372be44bDAB41f396f8129C14c377;\n', '        restrictedPercent = 40;\n', '        rate = 100000000000000000000;\n', '        startDate = 1553385600;\n', '\t    period2 = 1557446400;\n', '\t\tperiod3 = 1561420800;\n', '\t\tperiod4 = 1565395200;\n', '\t\tendDate = 1569369600;\n', '\n', '        hardcap = 500000000000000000000000000;\n', '       \n', '    }\n', '    modifier saleIsOn() {\n', '    \trequire(now > startDate && now < endDate);\n', '    \t_;\n', '    }\n', '\t\n', '\tmodifier isUnderHardCap() {\n', '        require(token.totalSupply() <= hardcap);\n', '        _;\n', '    }\n', '    \n', '    function finishMinting() public onlyOwner {\n', '        uint issuedTokenSupply = token.totalSupply();\n', '        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\n', '        token.mint(restrictedAccount, restrictedTokens);\n', '        token.finishMinting();\n', '    }\n', '        \n', '    /** value - amount in EURO! */\n', '    function createTokens(address customer, uint256 value) onlyOwner saleIsOn public {\n', '        \n', '        uint256 tokens;\n', '        uint bonusRate = 10;\n', '        if (customer==owner) {\n', '          revert();  \n', '        }\n', '        if(now >= startDate &&  now < period2) {\n', '          bonusRate = 7;\n', '        } else \n', '\t\tif(now >= period2 &&  now < period3) {\n', '          bonusRate = 8;\n', '        } else \n', '\t\tif(now >= period3 &&  now < period4) {\n', '          bonusRate = 9;\n', '        } if(now >= period4 &&  now < endDate) {\n', '          bonusRate = 10;\n', '        }\n', '\t\ttokens = value.mul(1 ether).mul(10).div(bonusRate); \n', '\t\ttoken.mint(owner, tokens);\n', '\t\ttoken.transferFrom(owner, customer, tokens); \n', '    }\n', '    \n', '    function getTokensCount() public constant returns(uint256){\n', '       return token.totalSupply().div(1 ether); }\n', '\n', '    function getBalance(address customer) onlyOwner public constant returns(uint256){\n', '       return token.balanceOf(customer).div(1 ether); }\n', '\t   \n', '     function() external payable  onlyOwner {\n', '       revert();}\n', '}']