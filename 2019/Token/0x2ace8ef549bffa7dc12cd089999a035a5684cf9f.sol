['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2018-11-13\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', 'contract Token{\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', 'function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns   \n', '    (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns \n', '    (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns \n', '    (bool success) {\n', '      \n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract smctoken is StandardToken { \n', '\n', '    /* Public variables of the token */\n', '    string public name;                   \n', '    uint8 public decimals;               \n', '    string public symbol;               //token\n', '    string public version = &#39;v2.1&#39;;    \n', '\n', '\n', '    function smctoken() {\n', '        balances[msg.sender] = 100000000000000000000000000; // 初始token数量给予消息发送者\n', '        totalSupply = 100000000000000000000000000;         // 设置初始总量\n', '        name = "YSBTOKEN";                   // token名称\n', '        decimals = 18;           // 小数位数\n', '        symbol = "YSB";             // token简称\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '}']
['/**\n', ' *Submitted for verification at Etherscan.io on 2018-11-13\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', 'contract Token{\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', 'function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns   \n', '    (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns \n', '    (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns \n', '    (bool success) {\n', '      \n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract smctoken is StandardToken { \n', '\n', '    /* Public variables of the token */\n', '    string public name;                   \n', '    uint8 public decimals;               \n', '    string public symbol;               //token\n', "    string public version = 'v2.1';    \n", '\n', '\n', '    function smctoken() {\n', '        balances[msg.sender] = 100000000000000000000000000; // 初始token数量给予消息发送者\n', '        totalSupply = 100000000000000000000000000;         // 设置初始总量\n', '        name = "YSBTOKEN";                   // token名称\n', '        decimals = 18;           // 小数位数\n', '        symbol = "YSB";             // token简称\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '}']
