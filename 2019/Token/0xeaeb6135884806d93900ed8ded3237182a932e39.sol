['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'contract StandardTokenInterface {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is StandardTokenInterface{\n', '    \n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        \n', '        balance = balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        require(_to != address(0x0));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        \n', '        uint256 previous = balances[msg.sender] + balances[_to];\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        assert(balances[msg.sender] + balances[_to] == previous);\n', '        emit Transfer(msg.sender,_to,_value);\n', '        \n', '        success = true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        require(_from != address(0x0));\n', '        require(_to != address(0x0));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        \n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(_from,_to,_value);\n', '        \n', '        success = true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '        require(_spender != address(0x0));\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender,_spender,_value);\n', '        success = true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\n', '        \n', '        remaining = allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract CustomToken is StandardToken{\n', '    constructor(string memory _name,string memory _symbol,uint8 _decimals,uint256 _totalSupply) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '}']