['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title NeuralTrade Network Tokensale Contract\n', ' * @dev Symbol: Network\n', ' * @dev Name: NeuralTrade Token\n', ' * @dev Total Supply: 10000000\n', ' * @dev Decimals: 2\n', ' * @dev (c) by NeuralTrade Network\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b; assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' /**\n', '  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _value The amount of tokens to be spent.\n', '  */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', ' /**\n', '  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '  * @param _owner address The address which owns the funds.\n', '  * @param _spender address The address which will spend the funds.\n', '  * @return A uint256 specifying the amount of tokens still available for the spender.\n', '  */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', ' /**\n', '  * approve should be called when allowed[_spender] == 0. To increment\n', '  * allowed value is better to use this function to avoid 2 calls (and wait until\n', '  * the first transaction is mined)\n', '  */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Owned\n', ' */\n', 'contract Owned {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', '\n', 'contract BurnableToken is StandardToken, Owned {\n', '\n', '  /**\n', '  * @dev Burns a specific amount of tokens.\n', '  * @param _value The amount of token to be burned.\n', '  */\n', '\n', '  function burn(uint _value) public {\n', '    require(_value > 0);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '\n', '  event Burn(address indexed burner, uint indexed value);\n', '\n', '}\n', '\n', 'contract NeuralTradeToken is BurnableToken {\n', '\n', '    string public constant name = "Neural Trade Token";\n', '\n', '    string public constant symbol = "NET";\n', '\n', '    uint32 public constant decimals = 2;\n', '\n', '    uint256 public INITIAL_SUPPLY = 10000000 * 1 ether;\n', '\n', '    constructor() public {\n', '      totalSupply = INITIAL_SUPPLY;\n', '      balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '\n', '}\n', '\n', 'contract NETCrowdsale is Owned {\n', '   using SafeMath for uint;\n', '\n', '    address vaulted;\n', '\n', '    uint restrictedPercent;\n', '\n', '    address restricted;\n', '\n', '    NeuralTradeToken public token = new NeuralTradeToken();\n', '\n', '    uint start;\n', '\n', '    uint period = 140;\n', '\n', '    uint hardcap;\n', '\n', '    uint rate;\n', '\n', '    uint minPurchase;\n', '\n', '    uint earlyBirdBonus;\n', '\n', '    constructor() public payable {\n', '        owner = msg.sender;\n', '        vaulted = 0xD1eA8ACE84C56BF21a1b481Ca492b6aA65D95830;\n', '        restricted = 0xBbC18b0824709Fd3E0fA3aF49b812E5B6efAC3c1;\n', '        restrictedPercent = 50;\n', '        rate = 100000000000000000000;\n', '        start = 1549843200;\n', '        period = 140;\n', '        minPurchase = 0.1 ether;\n', '        earlyBirdBonus = 1 ether;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '    \trequire(now > start && now < start + period * 1 days);\n', '    \t_;\n', '    }\n', '\n', '    modifier purchaseAllowed() {\n', '        require(msg.value >= minPurchase);\n', '        _;\n', '    }\n', '\n', '    function createTokens() saleIsOn purchaseAllowed public payable {\n', '        vaulted.transfer(msg.value);\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        uint bonusTokens = 0;\n', '        if(now < start + (period * 1 days).div(10) && msg.value >= earlyBirdBonus) {\n', '          bonusTokens = tokens.div(1);\n', '        } else if(now < start + (period * 1 days).div(10).mul(2)) {\n', '          bonusTokens = tokens.div(2);\n', '        } else if(now >= start + (period * 1 days).div(10).mul(2) && now < start + (period * 1 days).div(10).mul(4)) {\n', '          bonusTokens = tokens.div(4);\n', '        } else if(now >= start + (period * 1 days).div(10).mul(4) && now < start + (period * 1 days).div(10).mul(8)) {\n', '          bonusTokens = tokens.div(5);\n', '        }\n', '        uint tokensWithBonus = tokens.add(bonusTokens);\n', '        token.transfer(msg.sender, tokensWithBonus);\n', '\n', '        uint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\n', '        token.transfer(restricted, restrictedTokens);\n', '\n', '        if(msg.data.length == 20) {\n', '          address referer = bytesToAddress(bytes(msg.data));\n', '          require(referer != msg.sender);\n', '          uint refererTokens = tokens.mul(10).div(100);\n', '          token.transfer(referer, refererTokens);\n', '        }\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal pure returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '          result += uint8(source[i-1])*mul;\n', '          mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}']