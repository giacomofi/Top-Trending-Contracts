['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external; \n', '}\n', '\n', 'contract WaConfig {\n', '    using SafeMath for uint;\n', '\n', '    string internal constant TOKEN_NAME     = "Wa Token";\n', '    string internal constant TOKEN_SYMBOL   = "WA";\n', '    uint8  internal constant TOKEN_DECIMALS = 18;\n', '    uint   internal constant INITIAL_SUPPLY = 100*1e8 * 10 ** uint(TOKEN_DECIMALS);\n', '}\n', '\n', 'contract Ownable is WaConfig {\n', '    address public ceo;\n', '    \n', '    event LogChangeCEO(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == ceo);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        ceo = msg.sender;\n', '    }\n', '    \n', '    function changeCEO(address _owner) onlyOwner public returns (bool) {\n', '        require(_owner != address(0));\n', '        \n', '        emit LogChangeCEO(ceo, _owner);\n', '        ceo = _owner;\n', '        \n', '        return true;\n', '    }\n', '\n', '    function isOwner(address _owner) internal view returns (bool) {\n', '        return ceo == _owner;\n', '    }\n', '}\n', '\n', 'contract Lockable is Ownable {\n', '    mapping (address => bool) public locked;\n', '    \n', '    event LogLockup(address indexed target);\n', '    \n', '    function lockup(address _target) onlyOwner public returns (bool) {\n', '\t    require( !isOwner(_target) );\n', '\n', '        locked[_target] = true;\n', '        emit LogLockup(_target);\n', '        return true;\n', '    }\n', '    \n', '    function isLockup(address _target) internal view returns (bool) {\n', '        if(true == locked[_target])\n', '            return true;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    \n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    event ERC20Token(address indexed owner, string name, string symbol, uint8 decimals, uint supply);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event TransferFrom(address indexed from, address indexed to, address indexed spender, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    \n', '    constructor(\n', '        string _tokenName,\n', '        string _tokenSymbol,\n', '        uint8 _tokenDecimals,\n', '        uint _initialSupply\n', '    ) public {\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        decimals = _tokenDecimals;\n', '        totalSupply = _initialSupply;\n', '        \n', '        balanceOf[msg.sender] = totalSupply;\n', '        \n', '        emit ERC20Token(msg.sender, name, symbol, decimals, totalSupply);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(SafeMath.add(balanceOf[_to], _value) > balanceOf[_to]);\n', '        \n', '        uint previousBalances = SafeMath.add(balanceOf[_from], balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(SafeMath.add(balanceOf[_from], balanceOf[_to]) == previousBalances);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        \n', '        emit TransferFrom(_from, _to, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract WaToken is Lockable, TokenERC20 {\n', '    string public version = "v1.0.2";\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event LogFrozenAccount(address indexed target, bool frozen);\n', '    event LogBurn(address indexed owner, uint value);\n', '    event LogMining(address indexed recipient, uint value);\n', '    event LogWithdrawContractToken(address indexed owner, uint value);\n', '    \n', '    constructor() TokenERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, INITIAL_SUPPLY) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool) {\n', '        require(!frozenAccount[_from]); \n', '        require(!frozenAccount[_to]);\n', '        require(!isLockup(_from));\n', '        require(!isLockup(_to));\n', '\n', '        return super._transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!isLockup(msg.sender));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function freezeAccount(address _target) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(!isOwner(_target));\n', '        require(!frozenAccount[_target]);\n', '\n', '        frozenAccount[_target] = true;\n', '\n', '        emit LogFrozenAccount(_target, true);\n', '        return true;\n', '    }\n', '    \n', '    function unfreezeAccount(address _target) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(frozenAccount[_target]);\n', '\n', '        frozenAccount[_target] = false;\n', '\n', '        emit LogFrozenAccount(_target, false);\n', '        return true;\n', '    }\n', '    \n', '    function () payable public { revert(); }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external; \n', '}\n', '\n', 'contract WaConfig {\n', '    using SafeMath for uint;\n', '\n', '    string internal constant TOKEN_NAME     = "Wa Token";\n', '    string internal constant TOKEN_SYMBOL   = "WA";\n', '    uint8  internal constant TOKEN_DECIMALS = 18;\n', '    uint   internal constant INITIAL_SUPPLY = 100*1e8 * 10 ** uint(TOKEN_DECIMALS);\n', '}\n', '\n', 'contract Ownable is WaConfig {\n', '    address public ceo;\n', '    \n', '    event LogChangeCEO(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == ceo);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        ceo = msg.sender;\n', '    }\n', '    \n', '    function changeCEO(address _owner) onlyOwner public returns (bool) {\n', '        require(_owner != address(0));\n', '        \n', '        emit LogChangeCEO(ceo, _owner);\n', '        ceo = _owner;\n', '        \n', '        return true;\n', '    }\n', '\n', '    function isOwner(address _owner) internal view returns (bool) {\n', '        return ceo == _owner;\n', '    }\n', '}\n', '\n', 'contract Lockable is Ownable {\n', '    mapping (address => bool) public locked;\n', '    \n', '    event LogLockup(address indexed target);\n', '    \n', '    function lockup(address _target) onlyOwner public returns (bool) {\n', '\t    require( !isOwner(_target) );\n', '\n', '        locked[_target] = true;\n', '        emit LogLockup(_target);\n', '        return true;\n', '    }\n', '    \n', '    function isLockup(address _target) internal view returns (bool) {\n', '        if(true == locked[_target])\n', '            return true;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    \n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    event ERC20Token(address indexed owner, string name, string symbol, uint8 decimals, uint supply);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event TransferFrom(address indexed from, address indexed to, address indexed spender, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    \n', '    constructor(\n', '        string _tokenName,\n', '        string _tokenSymbol,\n', '        uint8 _tokenDecimals,\n', '        uint _initialSupply\n', '    ) public {\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        decimals = _tokenDecimals;\n', '        totalSupply = _initialSupply;\n', '        \n', '        balanceOf[msg.sender] = totalSupply;\n', '        \n', '        emit ERC20Token(msg.sender, name, symbol, decimals, totalSupply);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(SafeMath.add(balanceOf[_to], _value) > balanceOf[_to]);\n', '        \n', '        uint previousBalances = SafeMath.add(balanceOf[_from], balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(SafeMath.add(balanceOf[_from], balanceOf[_to]) == previousBalances);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        \n', '        emit TransferFrom(_from, _to, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract WaToken is Lockable, TokenERC20 {\n', '    string public version = "v1.0.2";\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event LogFrozenAccount(address indexed target, bool frozen);\n', '    event LogBurn(address indexed owner, uint value);\n', '    event LogMining(address indexed recipient, uint value);\n', '    event LogWithdrawContractToken(address indexed owner, uint value);\n', '    \n', '    constructor() TokenERC20(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, INITIAL_SUPPLY) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool) {\n', '        require(!frozenAccount[_from]); \n', '        require(!frozenAccount[_to]);\n', '        require(!isLockup(_from));\n', '        require(!isLockup(_to));\n', '\n', '        return super._transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!isLockup(msg.sender));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function freezeAccount(address _target) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(!isOwner(_target));\n', '        require(!frozenAccount[_target]);\n', '\n', '        frozenAccount[_target] = true;\n', '\n', '        emit LogFrozenAccount(_target, true);\n', '        return true;\n', '    }\n', '    \n', '    function unfreezeAccount(address _target) onlyOwner public returns (bool) {\n', '        require(_target != address(0));\n', '        require(frozenAccount[_target]);\n', '\n', '        frozenAccount[_target] = false;\n', '\n', '        emit LogFrozenAccount(_target, false);\n', '        return true;\n', '    }\n', '    \n', '    function () payable public { revert(); }\n', '}']
