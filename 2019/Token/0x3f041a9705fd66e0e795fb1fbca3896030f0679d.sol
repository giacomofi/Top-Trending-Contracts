['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity ^0.5.1;\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function Smul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '      uint256 z = a * b;\n', '      assert((a == 0)||(z/a == b));\n', '      return z;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function Sdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      if (a == 0) {\n', '          return 0;\n', '      }\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function Ssub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(a >= b, &#39;First parameter must be greater than second&#39;);\n', '      assert(a >= b);\n', '      uint256 z = a - b;\n', '      return z;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function Sadd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      uint256 z = a + b;\n', '      require((z >= a) && (z >= b),&#39;Result must be greater than parameters&#39;);\n', '      assert((z >= a) && (z >= b));\n', '      return z;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public payable returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  bool internal pause = false;\n', '  modifier chk_paused(){\n', '      require(pause == false,&#39;Sorry, contract paused by the administrator&#39;);\n', '      _;\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', 'function totalSupply() public view returns (uint);\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public  payable returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) internal balances;\n', '  struct partners{\n', '      uint256 seq;\n', '      address owner;\n', '  }\n', '  mapping(uint => partners) internal store;\n', '  uint256 internal totalPartners_;\n', '  uint256 internal div_bal_;\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public payable  returns (bool) {\n', '    require(_to != address(0),&#39;Address need to be different of zero&#39;);\n', '    require(_value <= balances[msg.sender],&#39;Value is greater than balance&#39;);\n', '    require(pause == false,&#39;Contract paused to pay dividends or other reason especified in polidatacompressor.com&#39;);\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] = balances[msg.sender].Ssub(_value);\n', '        //looking for partner informed into _to\n', '        bool exists_ = false;\n', '        for (uint i = 1 ; i <= totalPartners_ ; i++) {\n', '            if (store[i].owner == _to){\n', '                exists_ = true;\n', '            }\n', '        }\n', '        if (exists_ == false){\n', '           totalPartners_ = totalPartners_.Sadd(1);\n', '           store[totalPartners_].seq = totalPartners_;\n', '           store[totalPartners_].owner = _to;\n', '        }\n', '        balances[_to] = balances[_to].Sadd(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  address internal owner;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public  payable  chk_paused()\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0),&#39;Address need to be different of zero&#39;);\n', '    require(_value <= balances[_from],&#39;Value is greater than balance&#39;);\n', '    require(_value <= allowed[_from][msg.sender],&#39;Value is greater than allowed&#39;);\n', '\n', '    balances[_from] = balances[_from].Ssub(_value);\n', '    balances[_to] = balances[_to].Sadd(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].Ssub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public chk_paused() returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   ) public view returns (uint256){\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public chk_paused()\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].Sadd(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  ) public chk_paused() returns (bool){\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.Ssub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PoliToken is StandardToken {\n', '  string public constant name = "PoliToken";\n', '  string public constant symbol = "POLI";\n', '  uint256 public constant INITIAL_SUPPLY = 10000000;\n', '  \n', '  constructor() public  {\n', '    totalPartners_ = 1;\n', '    store[totalPartners_].seq = totalPartners_;\n', '    store[totalPartners_].owner = msg.sender;\n', '    owner = msg.sender;\n', '    div_bal_ = address(this).balance;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '  }\n', '      function totalSupply() public view returns (uint) {\n', '        return INITIAL_SUPPLY;\n', '    }\n', '   function paying_dividends(uint _seq_ini, uint _seq_fim) external onlyOwner() onlyPaused() {\n', '      require(_seq_fim >= _seq_ini, &#39;first parameter must be greater than second&#39;);\n', '      uint256 tot_;\n', '      uint256 div_;\n', '      uint256 max_partners_;\n', '      uint gas_;\n', '      tot_ = div_bal_;\n', '      max_partners_ = totalPartners_;\n', '      if (max_partners_ > _seq_fim){\n', '          max_partners_ = _seq_fim;\n', '      }\n', '      for (uint i = _seq_ini; i <= max_partners_; i++){\n', '          div_ = balances[store[i].owner].Smul(tot_).Sdiv(INITIAL_SUPPLY);\n', '          gas_ = gasleft();\n', '          store[i].owner.call.value(div_).gas(gas_)("");\n', '      }\n', '      if (max_partners_ == totalPartners_){\n', '          div_bal_ = 0;\n', '      }\n', '  }\n', '  function deposits_and_donations() external payable noZero() returns(bool){\n', '      if (pause != true){\n', '         div_bal_ = address(this).balance;\n', '      }\n', '      return true;\n', '  }\n', '  function change_pause(bool _pause) external onlyOwner returns(bool){\n', '      pause = _pause;\n', '      div_bal_ = address(this).balance;\n', '      return true;\n', '  }\n', '  function chk_pause() external view returns(bool){\n', '      return pause;\n', '  }\n', '  function chk_balance() external view returns(uint){\n', '      return address(this).balance;\n', '  }\n', '  function chk_balance_dividends() external view returns(uint){\n', '      return div_bal_;\n', '  }\n', '  function transfer_owner(address _owner) external onlyOwner returns(bool){\n', '      owner = _owner;\n', '      return true;\n', '  }\n', '  function chk_active_owner() external view returns(address){\n', '      return owner;\n', '  }\n', '  function chk_total_partners() external view returns(uint){\n', '      return totalPartners_;\n', '  }\n', '  function chk_partner_address(uint i) external view returns(address){\n', '      return store[i].owner;\n', '  }\n', '  modifier onlyOwner(){\n', '      require(msg.sender == owner, &#39;Sorry, you must be owner&#39;);\n', '      _;\n', '  }\n', '  modifier onlyPaused(){\n', '      require(pause == true,&#39;You need pause transactions to execute this&#39;);\n', '      _;\n', '  }\n', '  modifier noZero(){\n', '      require(msg.value > 0,&#39;Value must be greater than zero&#39;);\n', '      _;\n', '  }\n', '}']