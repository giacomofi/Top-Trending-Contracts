['pragma solidity ^0.5.1;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '    function rise() public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '\n', 'contract ERC20Proxy {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n', '    function transfer(address sender, address to, uint256 tokens) public returns (bool success);\n', '    function approve(address sender, address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address sender, address from, address to, uint256 tokens) public returns (bool success);\n', '    function rise(address to) public returns (bool success);\n', '}\n', '\n', 'contract SlaveEmitter {\n', '    function emitTransfer(address _from, address _to, uint256 _value) public;\n', '    function rememberMe(ERC20Proxy _multiAsset) public returns(bool success) ;\n', '    function emitApprove(address _from, address _spender, uint256 _value) public;\n', '    function emitTransfers(address _from, address[] memory dests, uint256[] memory values) public;\n', '}\n', '\n', 'contract TorrentShares is ERC20Interface, SlaveEmitter {\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    string public name = "Torrent Shares";\n', '    string public symbol = "TOR";\n', '    uint256 public decimals = 18;\n', '\n', '    ERC20Proxy master = ERC20Proxy(address(0x0));\n', '    address owner;\n', '\n', '    modifier onlyMaster {\n', '        assert( msg.sender == address(master) || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function emitTransfer(address _from, address _to, uint256 _value) public onlyMaster() {\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns (bool success) {\n', '        return master.transfer(msg.sender, _to, _tokens);\n', '    }\n', '\n', '    function totalSupply() public view returns(uint256) {\n', '        return master.totalSupply();\n', '    }\n', '\n', '    function rememberMe(ERC20Proxy _master) public returns(bool success) {\n', '        require(msg.sender == owner || master == ERC20Proxy(0x0));\n', '        master = _master;\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _from, address _spender) public view returns(uint256) {\n', '        return master.allowance(_from, _spender);\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _tokens) public returns (bool success) {\n', '        return master.approve(msg.sender, _spender, _tokens);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokens) public returns (bool success) {\n', '        return master.transferFrom(msg.sender, _from, _to, _tokens);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns(uint256) {\n', '        return master.balanceOf(_owner);\n', '    }\n', '\n', '\n', '    function emitApprove(address _from, address _spender, uint256 _value) public onlyMaster() {\n', '        emit Approval(_from, _spender, _value);\n', '    }\n', '\n', '    function emitTransfers(address _from, address[] memory dests, uint256[] memory values) public onlyMaster() {\n', '        for (uint i = 0; i < values.length; i++)\n', '            emit Transfer(_from, dests[i], values[i]);\n', '    }\n', '\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '    function rise() public onlyMaster() returns (bool success) {\n', '        return master.rise(msg.sender);\n', '    }\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyMaster() returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']