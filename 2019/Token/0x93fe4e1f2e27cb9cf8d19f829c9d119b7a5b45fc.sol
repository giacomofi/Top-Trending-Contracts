['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '//Safe math\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool Yes) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _address) constant returns (uint balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract RBRToken is StandardToken {\n', '\n', '    string public name = "Rebero Token";\n', '    string public symbol = "RBR";\n', '    uint8 public decimals = 18;\n', '    uint public totalSupply = 500000000 * (10 ** uint(decimals));//Crowdsale supply\n', '    uint public poolEcosystem = 50000000 * (10 ** uint(decimals));//Ecosystem pool\n', '    uint public poolTeam = 25000000 * (10 ** uint(decimals));//Team pool\n', '    uint public poolBounty = 50000000 * (10 ** uint(decimals));//Bounty pool\n', '    uint public poolSale = 375000000 * (10 ** uint(decimals));//Sale pool\n', '\tuint public ownerInitialBalance = 125000000 * (10 ** uint(decimals));//Add reserved pool tokens to the owner address\n', '\tuint public sellPrice = 1000000000000000 wei;//Tokens are sold for this manual price, rather than predefined price.\n', '    \n', '    //Addresses that are allowed to transfer tokens\n', '    mapping (address => bool) public allowedTransfer;\n', '\t\n', '    //Bonuses for selected addresses\n', '    mapping (address => uint) public specialBonus;\n', '    \n', '\t//Technical variables to store states\n', '\tbool public TransferAllowed = true;//Token transfers are blocked\n', '    bool public CrowdsalePaused = false; //Whether the Crowdsale is now suspended (true or false)\n', '    uint public currentBonus = 0;//Current bonus to tokens purchases\n', '\t\n', '    //Technical variables to store statistical data\n', '\tuint public StatsEthereumRaised = 0 wei;//Total Ethereum raised\n', '\tuint public StatsSold = 0;//Sold tokens amount\n', '\tuint public StatsMinted = 0;//Minted tokens amount\n', '\tuint public StatsReserved = 0;//Reserved tokens amount\n', '\tuint public StatsTotal = 0;//Overall tokens amount\n', '\n', '    //Event logs\n', '    event Buy(address indexed sender, uint eth, uint tokens, uint bonus);//Tokens purchased\n', '    event Mint(address indexed from, uint tokens);// This notifies clients about the amount minted\n', '    event Burn(address indexed from, uint tokens);// This notifies clients about the amount burnt\n', '    event PriceChanged(string _text, uint _tokenPrice);//Manual token price\n', '    event BonusChanged(string _text, uint _percent);//Crowdsale bonus percent for each purchase\n', '    \n', '    address public owner = 0x0;//Admin actions\n', '    address public minter = 0x0;//Minter tokens\n', '    address public wallet = 0x0;//Wallet to receive ETH\n', ' \n', 'function RBRToken() payable {\n', '    \n', '      address owner = 0xB61E51D10C09b91b1Ff12eFAa1baF4B149fF87d6;\n', '      address minter = 0x39c98ce5F3e9a3960C1Bc1BaF258f4E160210d21;\n', '      address wallet = 0xD9E5F5d2595068E8865454A370Fa79A6eE122e6b;\n', '    \n', '      balances[owner] = 0;\n', '      balances[minter] = 0;\n', '      balances[wallet] = 0;\n', '    \n', '      //Add reserved pool tokens to the owner address\n', '      balances[owner] = safeAdd(balances[owner], ownerInitialBalance);\n', '      StatsReserved = safeAdd(StatsReserved, ownerInitialBalance);//Update number of tokens reserved\n', '      StatsTotal = safeAdd(StatsTotal, ownerInitialBalance);//Update total number of tokens\n', '      Transfer(0, this, ownerInitialBalance);\n', '      Transfer(this, owner, ownerInitialBalance);\n', '    \n', '      allowedTransfer[owner] = true;\n', '      allowedTransfer[minter] = true;\n', '      allowedTransfer[wallet] = true;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyMinter() {\n', '        require(msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    //Transaction received - run the purchase function\n', '    function() payable {\n', '        buy();\n', '    }\n', '    \n', '    //See the current token price in wei (https://etherconverter.online to convert to other units, such as ETH)\n', '    function price() constant returns (uint) {\n', '        return sellPrice;\n', '    }\n', '    \n', '    //Manually set the token price (in wei - https://etherconverter.online)\n', '    function setTokenPrice(uint _tokenPrice) external {\n', '        require(msg.sender == owner || msg.sender == minter);\n', '        sellPrice = _tokenPrice;\n', '        PriceChanged("New price is ", _tokenPrice);\n', '    }\n', '    \n', '    //Set the crowdsale bonus percent for each purchase\n', '    function setBonus(uint _percent) external {\n', '        require(msg.sender == owner || msg.sender == minter);\n', '        require(_percent >=0);\n', '        currentBonus = safeAdd(100,_percent);\n', '        BonusChanged("New crowdsale bonus is ", _percent);\n', '    }\n', '    \n', '    //Set the bonus percent for selected address\n', '    function setSpecialBonus(address _target, uint _percent) external {\n', '        require(msg.sender == owner || msg.sender == minter);\n', '        require(_percent >=0);\n', '        specialBonus[_target] = safeAdd(100,_percent);\n', '    }\n', '     \n', '    //Allow or prohibit token transfers\n', '    function setTransferAllowance(bool _allowance) external onlyOwner {\n', '        TransferAllowed = _allowance;\n', '    }\n', '    \n', '    //Temporarily suspend token sale\n', '    function eventPause(bool _pause) external onlyOwner {\n', '        CrowdsalePaused = _pause;\n', '    }\n', '    \n', '    // Send `_amount` of tokens to `_target`\n', '    function mintTokens(address _target, uint _amount) external returns (bool) {\n', '        require(msg.sender == owner || msg.sender == minter);\n', '        require(_amount > 0);//Number of tokens must be greater than 0\n', '        uint amount=_amount * (10 ** uint256(decimals));\n', '        require(safeAdd(StatsTotal, amount) <= totalSupply);//The amount of tokens cannot be greater than Total supply\n', '        balances[_target] = safeAdd(balances[_target], amount);\n', '        StatsMinted = safeAdd(StatsMinted, amount);//Update number of tokens minted\n', '        StatsTotal = safeAdd(StatsTotal, amount);//Update total number of tokens\n', '        Transfer(0, this, amount);\n', '        Transfer(this, _target, amount);\n', '        Mint(_target, amount);\n', '        return true;\n', '    }\n', '    \n', '    // Decrease user balance\n', '    function decreaseTokens(address _target, uint _amount) external returns (bool) {\n', '        require(msg.sender == owner || msg.sender == minter);\n', '        require(_amount > 0);//Number of tokens must be greater than 0\n', '        uint amount=_amount * (10 ** uint256(decimals));\n', '        balances[_target] = safeSub(balances[_target], amount);\n', '        StatsMinted = safeSub(StatsMinted, amount);//Update number of tokens minted\n', '        StatsTotal = safeSub(StatsTotal, amount);//Update total number of tokens\n', '        Transfer(_target, 0, amount);\n', '        Burn(_target, amount);\n', '        return true;\n', '    }\n', '    \n', '    // Allow `_target` make token tranfers\n', '    function allowTransfer(address _target, bool _allow) external onlyOwner {\n', '        allowedTransfer[_target] = _allow;\n', '    }\n', '\n', '    //The function of buying tokens on Crowdsale\n', '    function buy() public payable returns(bool) {\n', '\n', '        require(msg.sender != owner);//The founder cannot buy tokens\n', '        require(msg.sender != minter);//The minter cannot buy tokens\n', '        require(msg.sender != wallet);//The wallet address cannot buy tokens\n', '        require(!CrowdsalePaused);//Purchase permitted if Crowdsale is paused\n', '        require(msg.value >= price());//The amount received in wei must be greater than the cost of 1 token\n', '\n', '        uint tokens = msg.value/price();//Number of tokens to be received by the buyer\n', '        require(tokens > 0);//Number of tokens must be greater than 0\n', '        \n', '        //Add bonus tokens\n', '        if(currentBonus > 0){\n', '        uint bonus = safeMul(tokens, currentBonus);\n', '        bonus = safeDiv(bonus, 100);\n', '        tokens = safeAdd(bonus, tokens);\n', '        }\n', '        \n', '        //Add bonus tokens if this buyer have special bonus\n', '        if(specialBonus[msg.sender] > 0){\n', '        uint addressBonus = safeMul(tokens, specialBonus[msg.sender]);\n', '        addressBonus = safeDiv(addressBonus, 100);\n', '        tokens = safeAdd(addressBonus, tokens);\n', '        }\n', '        \n', '        uint tokensToAdd=tokens * (10 ** uint256(decimals));\n', '        \n', '        require(safeAdd(StatsSold, tokensToAdd) <= poolSale);//The amount of sold tokens cannot be greater than the Sale supply\n', '        \n', '        wallet.transfer(msg.value);//Send received ETH to the fundraising purse\n', '        \n', '        //Crediting of tokens to the buyer\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokensToAdd);\n', '        StatsSold = safeAdd(StatsSold, tokensToAdd);//Update number of tokens sold\n', '        StatsTotal = safeAdd(StatsTotal, tokensToAdd);//Update total number of tokens\n', '        Transfer(0, this, tokensToAdd);\n', '        Transfer(this, msg.sender, tokensToAdd);\n', '        \n', '        StatsEthereumRaised = safeAdd(StatsEthereumRaised, msg.value);//Update total ETH collected\n', '        \n', '        //Record event logs to the blockchain\n', '        Buy(msg.sender, msg.value, tokensToAdd, currentBonus);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        \n', '        //Forbid token transfers\n', '        if(!TransferAllowed){\n', '            require(allowedTransfer[msg.sender]);\n', '        }\n', '        \n', '    return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        \n', '        //Forbid token transfers\n', '        if(!TransferAllowed){\n', '            require(allowedTransfer[msg.sender]);\n', '        }\n', '        \n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    //Change owner\n', '    function changeOwner(address _to) external onlyOwner() {\n', '        balances[_to] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _to;\n', '    }\n', '\n', '    //Change minter\n', '    function changeMinter(address _to) external onlyOwner() {\n', '        balances[_to] = balances[minter];\n', '        balances[minter] = 0;\n', '        minter = _to;\n', '    }\n', '\n', '    //Change wallet\n', '    function changeWallet(address _to) external onlyOwner() {\n', '        balances[_to] = balances[wallet];\n', '        balances[wallet] = 0;\n', '        wallet = _to;\n', '    }\n', '}']