['pragma solidity 0.5.4;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed owner,uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 vaule);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        totalSupply = totalSupply.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '        emit Burn(account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(spender, addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(spender, subtractedValue);\n', '    }\n', '}\n', '\n', 'contract Token is PausableToken, BurnableToken {\n', '    string public constant name = "Global Trading System"; // name of Token \n', '    string public constant symbol = "GTS"; // symbol of Token \n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 internal constant INIT_TOTALSUPPLY = 1000000000; // Total amount of tokens\n', '\n', '    constructor() public {\n', '        totalSupply = INIT_TOTALSUPPLY * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of Pair contract\n', ' */\n', 'interface PairContract {\n', '    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint8);\n', '}\n', '\n', 'contract GTS is Token {\n', '    // The address of Pair contract\n', '    PairContract public pairInstance;\n', '    /// @notice revoking rate precise\n', '    /// @notice for example: RATE_PRECISE is 3, meaning that the revoking fee ratio is 3/10000\n', '    uint public rate = 10000;  // default rate is 1:1\n', '    uint public constant RATE_PRECISE = 10000;\n', '\n', '    // events\n', '    event ExchangePair(address indexed from, uint256 value);\n', '    event SetPairContract(address PairToken);\n', '    event RateChanged(uint256 previousOwner,uint256 newRate);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the Pair contract\n', '     */\n', '    modifier onlyPairContract() {\n', '        require(msg.sender == address(pairInstance));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of pair contract\n', '     */\n', '    function setPairContract(address pairAddress) public onlyOwner {\n', '        require(pairAddress != address(0));\n', '        pairInstance = PairContract(pairAddress);\n', '        emit SetPairContract(pairAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Function Set the exchange rate of pair token.\n', '     * for example: RATE_PRECISE is 300, means that the rate is 300/10000: 1 PT = 0.003 GTS\n', '     * for example: RATE_PRECISE is 30000, means that the rate is 30000/10000: 1 PT = 3 GTS\n', '     */\n', '     function setRate(uint256 _newRate) public onlyOwner {\n', '        require(_newRate > 0);\n', '        emit RateChanged(rate,_newRate);\n', '        rate = _newRate;\n', '     }\n', '\n', '    /**\n', '     * @dev Transfers token to a specified address.\n', '     *      If the target address of transferring is Pair contract, the operation of changing Pair tokens will be executed.\n', '     * @param to The target address of transfer, which may be the  contract\n', '     * @param value The amount of tokens transferred\n', '     */\n', '    function transfer(address to, uint value) public returns (bool) {\n', "        super.transfer(to, value); // Transfers tokens to address 'to'\n", '        if(to == address(pairInstance)) {\n', '            pairInstance.tokenFallback(msg.sender, value, bytes("")); // Calls \'tokenFallback\' function in Pair contract to exchange tokens\n', '            emit ExchangePair(msg.sender, value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another.\n', '     *      If the target address of transferring is  Pair contract, the operation of changing Pair tokens will be executed.\n', '     * @param from The address which you want to send tokens from\n', '     * @param to The address which you want to transfer to\n', '     * @param value The amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint value) public returns (bool) {\n', "        super.transferFrom(from, to, value); // Transfers token to address 'to'\n", '        if(to == address(pairInstance)) {\n', '            pairInstance.tokenFallback(from, value, bytes("")); // Calls \'tokenFallback\' function in Pair contract to exchange tokens\n', '            emit ExchangePair(from, value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev Function that is called by the Pair contract to exchange 'GTS' tokens\n", '     */\n', '    function tokenFallback(address from, uint256 value, bytes calldata) external onlyPairContract {\n', '        require(from != address(0));\n', '        require(value != uint256(0));\n', "        require(pairInstance.transfer(owner,value)); // Transfers Pair tokens belonging to this contract to 'owner'\n", "        uint256 GTSValue = value.mul(10**uint256(decimals)).mul(rate).div(RATE_PRECISE).div(10**uint256(pairInstance.decimals())); // Calculates the number of 'GTS' tokens that can be exchanged\n", '        require(GTSValue <= balances[owner]);\n', '        balances[owner] = balances[owner].sub(GTSValue);\n', '        balances[from] = balances[from].add(GTSValue); \n', '        emit Transfer(owner, from, GTSValue);\n', '    }\n', '    \n', '    /**\n', "     * @dev Function that is used to withdraw the 'Pair' tokens in this contract\n", '     */\n', '    function withdrawToken(uint256 value) public onlyOwner {\n', '        require(pairInstance.transfer(owner,value));\n', '    }    \n', '}']