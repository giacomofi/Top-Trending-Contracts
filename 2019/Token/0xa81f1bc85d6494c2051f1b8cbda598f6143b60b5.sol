['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Interface{ //제 3자 송금기능은 빠진 컨트랙트로 기본적인 인터페이스를 선언하는것!\n', '  function totalSupply() public view returns (uint);\n', '  //발행한 전체 토큰의 자산이 얼마인가?, 리턴값 : 전체 토큰 발행량\n', '  function balanceOf(address who) public view returns (uint);\n', '  //who 주소의 계정에 자산이 얼마 있는가?, 리턴값 : 계정에 보유한 토큰 수\n', '  function transfer(address to, uint value) public returns (bool);\n', '  //내가 가진 토큰 value 개를 to 에게 보내라. 여기서 &#39;나&#39; 는 가스를 소모하여 transfer 함수를 호출한 계정입니다. , 리턴값 : 성공/실패\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  //이벤트는 외부에서 호출하는 함수가 아닌 소스 내부에서 호출되는 이벤트 함수입니다.\n', '  //ERC20 에 따르면 &#39;토큰이 이동할 때에는 반드시 Transfer 이벤트를 발생시켜라.&#39; 라고 규정 짓고 있습니다.\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Interface{\n', '  // 제3자의 송금기능을 추가한 컨트랙트를 선언 하는 것!\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  // owner 가 spender 에게 인출을 허락한 토큰의 개수는 몇개인가? , 리턴값 : 허용된 토큰의 개수\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  // from 의 계좌에서 value 개의 토큰을 to 에게 보내라. 단, 이 함수는 approve 함수를 통해 인출할 권리를 받은 spender 만 실행할 수 있다. , 리턴값: 성공/실패\n', '  function approve (address spender, uint value) public returns (bool);\n', '  // spender 에게 value 만큼의 토큰을 인출할 권리를 부여한다. 이 함수를 이용할 때는 반드시 Approval 이벤트 함수를 호출해야 한다. , 리턴값: 성공/실패\n', '  event Approval (address indexed owner, address indexed spender, uint value);\n', '  // owner가 spender에게 인출을 용한 value개수를 블록체인상에 영구적으로 기록한다. => 검색가능.\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '//해당 컨트랙트는 인터페이스에서 선언한 함수들의 기능을 구현해준다.\n', 'contract BasicToken is ERC20Interface{\n', '  using SafeMath for uint256;\n', '//using A for B : B 자료형에 A 라이브러리 함수를 붙여라.\n', '//dot(.)으로 호출 할수 있게됨.\n', '//ex) using SafeMath for uint256 이면 uint256자료형에 SafeMath 라이브러리 함수를 .을 이용해 사용가능하다는 뜻 => a.add(1) ,b.sub(2)를 사용가능하게 함.\n', '\n', '  mapping (address => uint256) balances;\n', '\n', '\n', '  uint totalSupply_;\n', '\n', '// 토큰의 총 발행량을 구하는 함수.\n', '  function totalSupply() public view returns (uint){\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public returns (bool){\n', '    require (_to != address(0));\n', '    // address(0)은 값이 없다는 것.\n', '    // require란 참이면 실행하는 것.\n', '    require (_value <= balances[msg.sender]);\n', '    // 함수를 호출한 &#39;나&#39;의 토큰 잔고가 보내는 토큰의 개수보다 크거나 같을때 실행.\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    //sub는 뺄셈. , 보낸 토큰개수만큼 뺀다.\n', '    balances[_to] = balances[_to].add(_value);\n', '    //add는 덧셈. , 받은 토큰개수 만큼 더한다.\n', '\n', '    emit Transfer(msg.sender,_to,_value);\n', '    // Transfer라는 이벤트를 실행하여 이더리움 블록체인상에 거래내역을 기록한다. 물론, 등록됬으므로 검색 가능.\n', '    return true; //모든것이 실행되면 참을 출력.\n', '\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns(uint balance){\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken{\n', '  //ERC20에 선언된 인터페이스를 구현하는 컨트랙트.\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '  // allowed 매핑은 &#39;누가&#39;,&#39;누구에게&#39;,&#39;얼마의&#39; 인출권한을 줄지를 저장하는 것. ex) allowed[누가][누구에게] = 얼마;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool){\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    //보내려는 토큰개수가 계좌주인 _from이 돈을 빼려는 msg.sender에게 허용한 개수보다 작거나 같으면 참.\n', '    //_fromr에게 인출권한을 받은 msg.sender가 가스비를 소모함.\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from,_to,_value);\n', '    return true;\n', '\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns (bool){\n', '    allowed[msg.sender][_spender] = _value;\n', '    //msg.sender의 계좌에서 _value 만큼 인출해 갈 수 있는 권리를 _spender 에게 부여한다.\n', '    emit Approval(msg.sender,_spender,_value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint){\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  // 권한을 부여하는사람이 권한을 받는사람에게 허용하는 값을 바꾸려고할때,\n', '  // 채굴순서에의해 코드의 실행순서가 뒤바뀔 수 있다.\n', '  // 그렇게 되면 허용값을 10을줬다가 생각이 바껴서 1을 주게되면\n', '  // 권한을 받은사람은 그것을 눈치채고, 11을 지불할 수 있다.\n', '  // 그런 문제점을 보안하기 위해서 밑의 함수를 추가하였다.\n', '  /* function increaseApproval(address _spender, uint _addedValue) public returns(bool){\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender,_spender,allowed[msg.sender][_spender]);\n', '    return true;\n', '\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _substractedValue) public returns (bool){\n', '    oldValue = allowed[msg.sender][_spender];\n', '    if (_substractedValue > oldValue){\n', '      allowed[msg.sender][_spender] = 0;\n', '    }\n', '    else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_substractedValue);\n', '    }\n', '\n', '\n', '    Approval(msg.sender,_spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '\n', '  } */\n', '\n', '}\n', '\n', '\n', 'contract CreateToken is StandardToken{\n', '\n', '  string public constant name = "JHT";\n', '  string public constant symbol = "JHT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  //uint256 public constant INITIAL_SUPPLY =            10000000000 * (10**uint(decimals));\n', '  uint256 public constant INITIAL_SUPPLY =  4000000000 * (10**uint(decimals));\n', '  \n', '  constructor() public{\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(0x0,msg.sender,INITIAL_SUPPLY);\n', '\n', '  }\n', '}\n', '// 이더스캔에 코드배포시 optimization,컨트랙트네임,컴파일버전등 리믹스와 똑같이 해줄것! , 버전2.0에서 할것.']
['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Interface{ //제 3자 송금기능은 빠진 컨트랙트로 기본적인 인터페이스를 선언하는것!\n', '  function totalSupply() public view returns (uint);\n', '  //발행한 전체 토큰의 자산이 얼마인가?, 리턴값 : 전체 토큰 발행량\n', '  function balanceOf(address who) public view returns (uint);\n', '  //who 주소의 계정에 자산이 얼마 있는가?, 리턴값 : 계정에 보유한 토큰 수\n', '  function transfer(address to, uint value) public returns (bool);\n', "  //내가 가진 토큰 value 개를 to 에게 보내라. 여기서 '나' 는 가스를 소모하여 transfer 함수를 호출한 계정입니다. , 리턴값 : 성공/실패\n", '  event Transfer(address indexed from, address indexed to, uint value);\n', '  //이벤트는 외부에서 호출하는 함수가 아닌 소스 내부에서 호출되는 이벤트 함수입니다.\n', "  //ERC20 에 따르면 '토큰이 이동할 때에는 반드시 Transfer 이벤트를 발생시켜라.' 라고 규정 짓고 있습니다.\n", '}\n', '\n', '\n', 'contract ERC20 is ERC20Interface{\n', '  // 제3자의 송금기능을 추가한 컨트랙트를 선언 하는 것!\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  // owner 가 spender 에게 인출을 허락한 토큰의 개수는 몇개인가? , 리턴값 : 허용된 토큰의 개수\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  // from 의 계좌에서 value 개의 토큰을 to 에게 보내라. 단, 이 함수는 approve 함수를 통해 인출할 권리를 받은 spender 만 실행할 수 있다. , 리턴값: 성공/실패\n', '  function approve (address spender, uint value) public returns (bool);\n', '  // spender 에게 value 만큼의 토큰을 인출할 권리를 부여한다. 이 함수를 이용할 때는 반드시 Approval 이벤트 함수를 호출해야 한다. , 리턴값: 성공/실패\n', '  event Approval (address indexed owner, address indexed spender, uint value);\n', '  // owner가 spender에게 인출을 용한 value개수를 블록체인상에 영구적으로 기록한다. => 검색가능.\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '//해당 컨트랙트는 인터페이스에서 선언한 함수들의 기능을 구현해준다.\n', 'contract BasicToken is ERC20Interface{\n', '  using SafeMath for uint256;\n', '//using A for B : B 자료형에 A 라이브러리 함수를 붙여라.\n', '//dot(.)으로 호출 할수 있게됨.\n', '//ex) using SafeMath for uint256 이면 uint256자료형에 SafeMath 라이브러리 함수를 .을 이용해 사용가능하다는 뜻 => a.add(1) ,b.sub(2)를 사용가능하게 함.\n', '\n', '  mapping (address => uint256) balances;\n', '\n', '\n', '  uint totalSupply_;\n', '\n', '// 토큰의 총 발행량을 구하는 함수.\n', '  function totalSupply() public view returns (uint){\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public returns (bool){\n', '    require (_to != address(0));\n', '    // address(0)은 값이 없다는 것.\n', '    // require란 참이면 실행하는 것.\n', '    require (_value <= balances[msg.sender]);\n', "    // 함수를 호출한 '나'의 토큰 잔고가 보내는 토큰의 개수보다 크거나 같을때 실행.\n", '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    //sub는 뺄셈. , 보낸 토큰개수만큼 뺀다.\n', '    balances[_to] = balances[_to].add(_value);\n', '    //add는 덧셈. , 받은 토큰개수 만큼 더한다.\n', '\n', '    emit Transfer(msg.sender,_to,_value);\n', '    // Transfer라는 이벤트를 실행하여 이더리움 블록체인상에 거래내역을 기록한다. 물론, 등록됬으므로 검색 가능.\n', '    return true; //모든것이 실행되면 참을 출력.\n', '\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns(uint balance){\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken{\n', '  //ERC20에 선언된 인터페이스를 구현하는 컨트랙트.\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', "  // allowed 매핑은 '누가','누구에게','얼마의' 인출권한을 줄지를 저장하는 것. ex) allowed[누가][누구에게] = 얼마;\n", '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool){\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    //보내려는 토큰개수가 계좌주인 _from이 돈을 빼려는 msg.sender에게 허용한 개수보다 작거나 같으면 참.\n', '    //_fromr에게 인출권한을 받은 msg.sender가 가스비를 소모함.\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from,_to,_value);\n', '    return true;\n', '\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns (bool){\n', '    allowed[msg.sender][_spender] = _value;\n', '    //msg.sender의 계좌에서 _value 만큼 인출해 갈 수 있는 권리를 _spender 에게 부여한다.\n', '    emit Approval(msg.sender,_spender,_value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint){\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  // 권한을 부여하는사람이 권한을 받는사람에게 허용하는 값을 바꾸려고할때,\n', '  // 채굴순서에의해 코드의 실행순서가 뒤바뀔 수 있다.\n', '  // 그렇게 되면 허용값을 10을줬다가 생각이 바껴서 1을 주게되면\n', '  // 권한을 받은사람은 그것을 눈치채고, 11을 지불할 수 있다.\n', '  // 그런 문제점을 보안하기 위해서 밑의 함수를 추가하였다.\n', '  /* function increaseApproval(address _spender, uint _addedValue) public returns(bool){\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender,_spender,allowed[msg.sender][_spender]);\n', '    return true;\n', '\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _substractedValue) public returns (bool){\n', '    oldValue = allowed[msg.sender][_spender];\n', '    if (_substractedValue > oldValue){\n', '      allowed[msg.sender][_spender] = 0;\n', '    }\n', '    else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_substractedValue);\n', '    }\n', '\n', '\n', '    Approval(msg.sender,_spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '\n', '  } */\n', '\n', '}\n', '\n', '\n', 'contract CreateToken is StandardToken{\n', '\n', '  string public constant name = "JHT";\n', '  string public constant symbol = "JHT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  //uint256 public constant INITIAL_SUPPLY =            10000000000 * (10**uint(decimals));\n', '  uint256 public constant INITIAL_SUPPLY =  4000000000 * (10**uint(decimals));\n', '  \n', '  constructor() public{\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(0x0,msg.sender,INITIAL_SUPPLY);\n', '\n', '  }\n', '}\n', '// 이더스캔에 코드배포시 optimization,컨트랙트네임,컴파일버전등 리믹스와 똑같이 해줄것! , 버전2.0에서 할것.']
