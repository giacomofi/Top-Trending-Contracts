['/**\n', ' * Invictus Capital - CRYPTO10 Hedged\n', ' * https://invictuscapital.com\n', ' * MIT License - https://github.com/invictuscapital/smartcontracts/\n', ' * Uses code from the OpenZeppelin project\n', ' */\n', '\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    constructor () internal {\n', '        _addWhitelistAdmin(msg.sender);\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(msg.sender);\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n', ' * it), and not Whitelisteds themselves.\n', ' */\n', 'contract WhitelistedRole is WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(msg.sender);\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/InvictusWhitelist.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * Manages whitelisted addresses.\n', ' *\n', ' */\n', 'contract InvictusWhitelist is Ownable, WhitelistedRole {\n', '    constructor ()\n', '        WhitelistedRole() public {\n', '    }\n', '\n', '    /// @dev override to support legacy name\n', '    function verifyParticipant(address participant) public onlyWhitelistAdmin {\n', '        if (!isWhitelisted(participant)) {\n', '            addWhitelisted(participant);\n', '        }\n', '    }\n', '\n', '    /// Allow the owner to remove a whitelistAdmin\n', '    function removeWhitelistAdmin(address account) public onlyOwner {\n', '        require(account != msg.sender, "Use renounceWhitelistAdmin");\n', '        _removeWhitelistAdmin(account);\n', '    }\n', '}\n', '\n', '// File: contracts/C10Token.sol\n', '\n', 'pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * Contract for CRYPTO10 Hedged (C10) fund.\n', ' *\n', ' */\n', 'contract C10Token is ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\n', '\n', '    // Maps participant addresses to the eth balance pending token issuance\n', '    mapping(address => uint256) public pendingBuys;\n', '    // The participant accounts waiting for token issuance\n', '    address[] public participantAddresses;\n', '\n', '    // Maps participant addresses to the withdrawal request\n', '    mapping (address => uint256) public pendingWithdrawals;\n', '    address payable[] public withdrawals;\n', '\n', '    uint256 public minimumWei = 50 finney;\n', '    uint256 public entryFee = 50;  // 0.5% , or 50 bips\n', '    uint256 public exitFee = 50;  // 0.5% , or 50 bips\n', '    uint256 public minTokenRedemption = 1 ether;\n', '    uint256 public maxAllocationsPerTx = 50;\n', '    uint256 public maxWithdrawalsPerTx = 50;\n', '    Price public price;\n', '\n', '    address public whitelistContract;\n', '\n', '    struct Price {\n', '        uint256 numerator;\n', '        uint256 denominator;\n', '    }\n', '\n', '    event PriceUpdate(uint256 numerator, uint256 denominator);\n', '    event AddLiquidity(uint256 value);\n', '    event RemoveLiquidity(uint256 value);\n', '    event DepositReceived(address indexed participant, uint256 value);\n', '    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n', '    event WithdrawRequest(address indexed participant, uint256 amountTokens);\n', '    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n', '    event WithdrawInvalidAddress(address indexed participant, uint256 amountTokens);\n', '    event WithdrawFailed(address indexed participant, uint256 amountTokens);\n', '    event TokensClaimed(address indexed token, uint256 balance);\n', '\n', '    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\n', '        ERC20Detailed("CRYPTO10 Hedged", "C10", 18)\n', '        ERC20Burnable()\n', '        Pausable() public {\n', '            price = Price(priceNumeratorInput, 1000);\n', '            require(priceNumeratorInput > 0, "Invalid price numerator");\n', '            require(whitelistContractInput != address(0), "Invalid whitelist address");\n', '            whitelistContract = whitelistContractInput;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function that buys tokens if the sender is whitelisted.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Explicitly buy via contract.\n', '     */\n', '    function buy() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Sets the maximum number of allocations in a single transaction.\n', '     * @dev Allows us to configure batch sizes and avoid running out of gas.\n', '     */\n', '    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\n', '        require(newMaxAllocationsPerTx > 0, "Must be greater than 0");\n', '        maxAllocationsPerTx = newMaxAllocationsPerTx;\n', '    }\n', '\n', '    /**\n', '     * Sets the maximum number of withdrawals in a single transaction.\n', '     * @dev Allows us to configure batch sizes and avoid running out of gas.\n', '     */\n', '    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\n', '        require(newMaxWithdrawalsPerTx > 0, "Must be greater than 0");\n', '        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\n', '    }\n', '\n', '    function setEntryFee(uint256 newFee) external onlyOwner {\n', '        require(newFee < 10000, "Must be less than 100 percent");\n', '        entryFee = newFee;\n', '    }\n', '\n', '    function setExitFee(uint256 newFee) external onlyOwner {\n', '        require(newFee < 10000, "Must be less than 100 percent");\n', '        exitFee = newFee;\n', '    }\n', '\n', '    /// Sets the minimum wei when buying tokens.\n', '    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\n', '        require(newMinimumWei > 0, "Minimum must be greater than 0");\n', '        minimumWei = newMinimumWei;\n', '    }\n', '\n', '    /// Sets the minimum number of tokens to redeem.\n', '    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\n', '        require(newMinTokenRedemption > 0, "Minimum must be greater than 0");\n', '        minTokenRedemption = newMinTokenRedemption;\n', '    }\n', '\n', '    /// Updates the price numerator.\n', '    function updatePrice(uint256 newNumerator) external onlyMinter {\n', '        require(newNumerator > 0, "Must be positive value");\n', '\n', '        price.numerator = newNumerator;\n', '\n', '        allocateTokens();\n', '        processWithdrawals();\n', '        emit PriceUpdate(price.numerator, price.denominator);\n', '    }\n', '\n', '    /// Updates the price denominator.\n', '    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\n', '        require(newDenominator > 0, "Must be positive value");\n', '\n', '        price.denominator = newDenominator;\n', '    }\n', '\n', '    /**\n', '     * Whitelisted token holders can request token redemption, and withdraw ETH.\n', '     * @param amountTokensToWithdraw The number of tokens to withdraw.\n', '     * @dev withdrawn tokens are burnt.\n', '     */\n', '    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \n', '        onlyWhitelisted {\n', '\n', '        address payable participant = msg.sender;\n', '        require(balanceOf(participant) >= amountTokensToWithdraw, \n', '            "Cannot withdraw more than balance held");\n', '        require(amountTokensToWithdraw >= minTokenRedemption, "Too few tokens");\n', '\n', '        burn(amountTokensToWithdraw);\n', '\n', '        uint256 pendingAmount = pendingWithdrawals[participant];\n', '        if (pendingAmount == 0) {\n', '            withdrawals.push(participant);\n', '        }\n', '        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\n', '        emit WithdrawRequest(participant, amountTokensToWithdraw);\n', '    }\n', '\n', '    /// Allows owner to claim any ERC20 tokens.\n', '    function claimTokens(ERC20 token) external onlyOwner {\n', '        require(address(token) != address(0), "Invalid address");\n', '        uint256 balance = token.balanceOf(address(this));\n', '        token.transfer(owner(), token.balanceOf(address(this)));\n', '        emit TokensClaimed(address(token), balance);\n', '    }\n', '    \n', '    /**\n', "     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\n", '     * @param value The amount of tokens to be burned.\n', '     */\n', '    function burnForParticipant(address account, uint256 value) external onlyOwner {\n', '        _burn(account, value);\n', '    }\n', '\n', '\n', '    /// Adds liquidity to the contract, allowing anyone to deposit ETH\n', '    function addLiquidity() external payable {\n', '        require(msg.value > 0, "Must be positive value");\n', '        emit AddLiquidity(msg.value);\n', '    }\n', '\n', '    /// Removes liquidity, allowing owner to transfer eth to the owner.\n', '    function removeLiquidity(uint256 amount) external onlyOwner {\n', '        require(amount <= address(this).balance, "Insufficient balance");\n', '\n', '        msg.sender.transfer(amount);\n', '        emit RemoveLiquidity(amount);\n', '    }\n', '\n', '    /// Allow the owner to remove a minter\n', '    function removeMinter(address account) external onlyOwner {\n', '        require(account != msg.sender, "Use renounceMinter");\n', '        _removeMinter(account);\n', '    }\n', '\n', '    /// Allow the owner to remove a pauser\n', '    function removePauser(address account) external onlyOwner {\n', '        require(account != msg.sender, "Use renouncePauser");\n', '        _removePauser(account);\n', '    }\n', '\n', '    /// returns the number of withdrawals pending.\n', '    function numberWithdrawalsPending() external view returns (uint256) {\n', '        return withdrawals.length;\n', '    }\n', '\n', '    /// returns the number of pending buys, waiting for token issuance.\n', '    function numberBuysPending() external view returns (uint256) {\n', '        return participantAddresses.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens when not paused.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * First phase of the 2-part buy, the participant deposits eth and waits\n', '     * for a price to be set so the tokens can be minted.\n', '     * @param participant whitelisted buyer.\n', '     */\n', '    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\n', '        assert(participant != address(0));\n', '\n', '        // Ensure minimum investment is met\n', '        require(msg.value >= minimumWei, "Minimum wei not met");\n', '\n', '        uint256 pendingAmount = pendingBuys[participant];\n', '        if (pendingAmount == 0) {\n', '            participantAddresses.push(participant);\n', '        }\n', '\n', '        // Increase the pending balance and wait for the price update\n', '        pendingBuys[participant] = pendingAmount.add(msg.value);\n', '\n', '        emit DepositReceived(participant, msg.value);\n', '    }\n', '\n', '    /// Internal function to allocate token.\n', '    function allocateTokens() internal {\n', '        uint256 numberOfAllocations = min(participantAddresses.length, maxAllocationsPerTx);\n', '        uint256 startingIndex = participantAddresses.length;\n', '        uint256 endingIndex = participantAddresses.length.sub(numberOfAllocations);\n', '\n', '        for (uint256 i = startingIndex; i > endingIndex; i--) {\n', '            handleAllocation(i - 1);\n', '        }\n', '    }\n', '\n', '    function handleAllocation(uint256 index) internal {\n', '        address participant = participantAddresses[index];\n', '        uint256 deposit = pendingBuys[participant];\n', '        uint256 feeAmount = deposit.mul(entryFee) / 10000;\n', '        uint256 balance = deposit.sub(feeAmount);\n', '\n', '        uint256 newTokens = balance.mul(price.numerator) / price.denominator;\n', '        pendingBuys[participant] = 0;\n', '        participantAddresses.pop();\n', '\n', '        if (feeAmount > 0) {\n', '            address(uint160(owner())).transfer(feeAmount);\n', '        }\n', '\n', '        mint(participant, newTokens);\n', '        emit TokensIssued(participant, newTokens, balance);\n', '    }\n', '\n', '    /// Internal function to process withdrawals.\n', '    function processWithdrawals() internal {\n', '        uint256 numberOfWithdrawals = min(withdrawals.length, maxWithdrawalsPerTx);\n', '        uint256 startingIndex = withdrawals.length;\n', '        uint256 endingIndex = withdrawals.length.sub(numberOfWithdrawals);\n', '\n', '        for (uint256 i = startingIndex; i > endingIndex; i--) {\n', '            handleWithdrawal(i - 1);\n', '        }\n', '    }\n', '\n', '    function handleWithdrawal(uint256 index) internal {\n', '        address payable participant = withdrawals[index];\n', '        uint256 tokens = pendingWithdrawals[participant];\n', '        uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\n', '        pendingWithdrawals[participant] = 0;\n', '        withdrawals.pop();\n', '\n', '        if (address(this).balance < withdrawValue) {\n', '            mint(participant, tokens);\n', '            emit WithdrawFailed(participant, tokens);\n', '            return;\n', '        }\n', '\n', '        uint256 feeAmount = withdrawValue.mul(exitFee) / 10000;\n', '        uint256 balance = withdrawValue.sub(feeAmount);\n', '        if (participant.send(balance)) {\n', '            if (feeAmount > 0) {\n', '                address(uint160(owner())).transfer(feeAmount);\n', '            }\n', '            emit Withdraw(participant, tokens, balance);\n', '        } else {\n', '            mint(participant, tokens);\n', '            emit WithdrawInvalidAddress(participant, tokens);\n', '        }\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), "Must be whitelisted");\n', '        _;\n', '    }\n', '}']