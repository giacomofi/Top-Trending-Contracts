['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '      if (_a == 0) {\n', '          return 0;\n', '        }\n', '      uint256 c = _a * _b;\n', '      assert(c / _a == _b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '      require(_b > 0);\n', '      uint256 c = _a / _b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '      assert(_b <= _a);\n', '      uint256 c = _a - _b;\n', '      return c;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '      uint256 c = _a + _b;\n', '      assert(c >= _a);\n', '      return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract AIPEToken is StandardToken{\n', '    using SafeMath for uint256;\n', '    \n', '    string public name="AIPEToken";\n', '    string public symbol="AIPE";\n', '    uint256 public decimals=18;\n', '    address owner;\n', '    \n', '    event Burn(uint256 amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 initialSupply) public {\n', '        totalSupply_ = initialSupply * (10 ** decimals);\n', '        balances[msg.sender]=totalSupply_;\n', '        owner=msg.sender;\n', '    }\n', '    \n', '    function burn(uint256 _amount) onlyOwner public returns (bool) {\n', '        require(0 < _amount && _amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Burn(_amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        owner = newOwner;\n', '    }\n', '}']