['pragma solidity ^0.5.3;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "Only the Contract owner can perform this action");\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0), "New owner cannot be current owner");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\n', '  /// Total amount of tokens\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '  function transfer(address _to, uint256 _amount) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n', '\n', '  function approve(address _spender, uint256 _amount) public returns (bool success);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '  uint balanceOfParticipant;\n', '  uint lockedAmount;\n', '  uint allowedAmount;\n', '  bool lockupIsActive = false;\n', '  uint256 lockupStartTime;\n', '\n', '  // balances for each address\n', '  mapping(address => uint256) balances;\n', '\n', '  struct Lockup {\n', '    uint256 lockupAmount;\n', '  }\n', '  Lockup lockup;\n', '  mapping(address => Lockup) lockupParticipants;\n', '  event LockupStarted(uint256 indexed lockupStartTime);\n', '\n', '  function requireWithinLockupRange(address _spender, uint256 _amount) internal {\n', '    if (lockupIsActive) {\n', '      uint timePassed = now - lockupStartTime;\n', '      balanceOfParticipant = balances[_spender];\n', '      lockedAmount = lockupParticipants[_spender].lockupAmount;\n', '      allowedAmount = lockedAmount;\n', '      if (timePassed < 92 days) {\n', '        allowedAmount = lockedAmount.mul(5).div(100);\n', '      } else if (timePassed >= 92 days && timePassed < 183 days) {\n', '        allowedAmount = lockedAmount.mul(30).div(100);\n', '      } else if (timePassed >= 183 days && timePassed < 365 days) {\n', '        allowedAmount = lockedAmount.mul(55).div(100);\n', '      }\n', '      require(\n', '        balanceOfParticipant.sub(_amount) >= lockedAmount.sub(allowedAmount),\n', '        "Must maintain correct % of PVC during lockup periods"\n', '      );\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _amount The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(_to != msg.sender, "Cannot transfer to self");\n', '    require(_to != address(this), "Cannot transfer to Contract");\n', '    require(_to != address(0), "Cannot transfer to 0x0");\n', '    require(\n', '      balances[msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to],\n', '      "Cannot transfer (Not enough balance)"\n', '    );\n', '\n', '    requireWithinLockupRange(msg.sender, _amount);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev Transfer tokens from one address to another\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _amount uint256 the amount of tokens to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '    require(_from != msg.sender, "Cannot transfer from self, use transfer function instead");\n', '    require(_from != address(this) && _to != address(this), "Cannot transfer from or to Contract");\n', '    require(_to != address(0), "Cannot transfer to 0x0");\n', '    require(balances[_from] >= _amount, "Not enough balance to transfer from");\n', '    require(allowed[_from][msg.sender] >= _amount, "Not enough allowance to transfer from");\n', '    require(_amount > 0 && balances[_to].add(_amount) > balances[_to], "Amount must be > 0 to transfer from");\n', '\n', '    requireWithinLockupRange(_from, _amount);\n', '\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    emit Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '  *\n', '  * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _amount The amount of tokens to be spent.\n', '  */\n', '  function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '    require(_spender != msg.sender, "Cannot approve an allowance to self");\n', '    require(_spender != address(this), "Cannot approve contract an allowance");\n', '    require(_spender != address(0), "Cannot approve 0x0 an allowance");\n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '  * @param _owner address The address which owns the funds.\n', '  * @param _spender address The address which will spend the funds.\n', '  * @return A uint256 specifying the amount of tokens still available for the spender.\n', '  */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '  function burn(uint256 _value) public onlyOwner {\n', '    require(_value <= balances[msg.sender], "Not enough balance to burn");\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PVC Token\n', ' * @dev Token representing PVC.\n', ' */\n', 'contract PryvateCoin is BurnableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals = 18;\n', '  \n', '  /**\n', '  * @dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n', '  */\n', '  function() external payable {\n', '    revert("Cannot send Ether to this contract");\n', '  }\n', '    \n', '  /**\n', '  * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n', '  */\n', '  constructor(address wallet) public {\n', '    owner = wallet;\n', '    totalSupply = uint(50000000).mul(10 ** uint256(decimals)); //Update total supply with the decimal amount\n', '    name = "PryvateCoin";\n', '    symbol = "PVC";\n', '    balances[wallet] = totalSupply;\n', '    \n', '    //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n', '    emit Transfer(address(0), msg.sender, totalSupply);\n', '  }\n', '    \n', '  /**\n', '  * @dev helper method to get token details, name, symbol and totalSupply in one go\n', '  */\n', '  function getTokenDetail() public view returns (string memory, string memory, uint256) {\n', '    return (name, symbol, totalSupply);\n', '  }\n', '\n', '  function vest(address[] memory _owners, uint[] memory _amounts) public onlyOwner {\n', '    require(_owners.length == _amounts.length, "Length of addresses & token amounts are not the same");\n', '    for (uint i = 0; i < _owners.length; i++) {\n', '      _amounts[i] = _amounts[i].mul(10 ** 18);\n', '      require(_owners[i] != address(0), "Vesting funds cannot be sent to 0x0");\n', '      require(_amounts[i] > 0, "Amount must be > 0");\n', '      require(balances[owner] > _amounts[i], "Not enough balance to vest");\n', '      require(balances[_owners[i]].add(_amounts[i]) > balances[_owners[i]], "Internal vesting error");\n', '\n', '      // SafeMath.sub will throw if there is not enough balance.\n', '      balances[owner] = balances[owner].sub(_amounts[i]);\n', '      balances[_owners[i]] = balances[_owners[i]].add(_amounts[i]);\n', '      emit Transfer(owner, _owners[i], _amounts[i]);\n', '      lockup = Lockup({ lockupAmount: _amounts[i] });\n', '      lockupParticipants[_owners[i]] = lockup;\n', '    }\n', '  }\n', '\n', '  function initiateLockup() public onlyOwner {\n', '    uint256 currentTime = now;\n', '    lockupIsActive = true;\n', '    lockupStartTime = currentTime;\n', '    emit LockupStarted(currentTime);\n', '  }\n', '\n', '  function lockupActive() public view returns (bool) {\n', '    return lockupIsActive;\n', '  }\n', '\n', '  function lockupAmountOf(address _owner) public view returns (uint256) {\n', '    return lockupParticipants[_owner].lockupAmount;\n', '  }\n', '\n', '}']