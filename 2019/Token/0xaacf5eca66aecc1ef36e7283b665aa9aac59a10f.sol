['// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/promocode/PromoCode.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract PromoCode is Ownable {\n', '  ERC20 public token;\n', '  mapping(bytes32 => bool) public used;\n', '  uint256 public amount;\n', '\n', '  event Redeem(address user, uint256 amount, string code);\n', '\n', '  constructor(ERC20 _token, uint256 _amount) public {\n', '    amount = _amount;\n', '    token = _token;\n', '  }\n', '\n', '  function setAmount(uint256 _amount) public onlyOwner {\n', '    amount = _amount;\n', '  }\n', '\n', '  function extractSignature(bytes memory signature) private pure returns (uint8 v, bytes32 r, bytes32 s) {\n', '    assembly {\n', '      r := mload(add(signature, 32))\n', '      s := mload(add(signature, 64))\n', '      v := and(mload(add(signature, 65)), 255)\n', '    }\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '    return (v, r, s);\n', '  }\n', '\n', '  function redeem(address redeemer, string promoCode, bytes redeemSignature) public {\n', '    bytes32 promoCodeHash = keccak256(abi.encodePacked(address(this), redeemer, promoCode));\n', '    bytes32 hash = keccak256(abi.encodePacked(promoCode));\n', '    (uint8 v, bytes32 r, bytes32 s) = extractSignature(redeemSignature);\n', '    require(!used[hash]);\n', '    used[hash] = true;\n', '    require(ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", promoCodeHash)), v, r, s) == owner);\n', '    require(token.transferFrom(owner, redeemer, amount));\n', '    emit Redeem(redeemer, amount, promoCode);\n', '  }\n', '}']