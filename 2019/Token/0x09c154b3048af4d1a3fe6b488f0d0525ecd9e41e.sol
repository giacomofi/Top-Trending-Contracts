['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function add(uint a,uint b) internal pure returns(uint c){\n', '        c = a + b;\n', '        require(c>=a);\n', '    }\n', '    function sub(uint a,uint b) internal pure returns(uint c){\n', '        require(b<=a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a,uint b) internal pure returns(uint c){\n', '        c = a * b;\n', '        require (a ==0 || c / a ==b);\n', '    }\n', '    function div(uint a,uint b) internal pure returns(uint c){\n', '        require(b>0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'interface ERC20Interface{\n', '    //总发行量\n', '    function totalSupply() external returns(uint);\n', '    //查询数量\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '    //查询授权数量\n', '    function allowance(address tokenOwner,address spender) external returns(uint remaining);\n', '    //转账\n', '    function transfer(address to,uint tokens) external returns(bool success);\n', '    //授权\n', '    function approve(address spender,uint tokens) external returns(bool success);\n', '    //授权转账\n', '    function transferFrom(address from,address to,uint tokens) external returns(bool success);\n', '    \n', '    event Transfer(address indexed from,address indexed to,uint tokens);\n', '    event Approval(address indexed tokenOwner,address indexed spender,uint tokens);\n', '}\n', '\n', 'contract ContractRecevier{\n', '    function tokenFallback(address _from,uint _value,bytes _data) public returns(bool ok);\n', '}\n', '\n', '\n', 'interface ERC223{\n', '    function transfer(address to,uint value,bytes data) public returns (bool ok);\n', '    event Transfer(address indexed from,address indexed to,uint value,bytes indexed data);\n', '}\n', '\n', 'contract Owned{\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '    event OwnershipTransferred(address indexed _from,address indexed _to);\n', '    \n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public  {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner,newOwner);\n', '        owner = newOwner ;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract SeahighToken is ERC20Interface,ERC223,Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    \n', '    mapping(address => uint ) balances;\n', '    mapping(address =>mapping(address =>uint)) allowed;\n', '    \n', '    constructor() public{\n', '        symbol = "SEAH";\n', '        name = "Seahigh Token";\n', '        decimals = 18;\n', '        _totalSupply = 100000000 * 10 **18;\n', '        balances[owner] = _totalSupply;\n', '        \n', '        emit Transfer(address(0),owner,_totalSupply);\n', '    }\n', '    \n', '    function isContract(address _addr)public view returns(bool is_contract){\n', '        uint length;\n', '        assembly{\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '    \n', '    \n', '    function totalSupply() public view returns(uint){\n', '//        return _totalSupply;\n', '          return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view  returns(uint balance){\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address to,uint tokens) public returns(bool success){\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '         balances[to] = balances[to].add(tokens);\n', '         emit Transfer(msg.sender,to,tokens);\n', '         return true;\n', '         \n', '    }\n', '    \n', '    function transfer(address to,uint value,bytes data) public returns(bool ok){\n', '        if(isContract(to)){\n', '         balances[msg.sender] = balances[msg.sender].sub(value);\n', '         balances[to] = balances[to].add(value);\n', '         ContractRecevier c = ContractRecevier(to);\n', '         c.tokenFallback(msg.sender,value,data);\n', '         emit Transfer(msg.sender,to,value,data);\n', '         return true; \n', '        }\n', '    }\n', '    \n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from,address to,uint tokens) public returns(bool success){\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', '        \n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner,address spender) public view  returns(uint remaining){\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function add(uint a,uint b) internal pure returns(uint c){\n', '        c = a + b;\n', '        require(c>=a);\n', '    }\n', '    function sub(uint a,uint b) internal pure returns(uint c){\n', '        require(b<=a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a,uint b) internal pure returns(uint c){\n', '        c = a * b;\n', '        require (a ==0 || c / a ==b);\n', '    }\n', '    function div(uint a,uint b) internal pure returns(uint c){\n', '        require(b>0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'interface ERC20Interface{\n', '    //总发行量\n', '    function totalSupply() external returns(uint);\n', '    //查询数量\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '    //查询授权数量\n', '    function allowance(address tokenOwner,address spender) external returns(uint remaining);\n', '    //转账\n', '    function transfer(address to,uint tokens) external returns(bool success);\n', '    //授权\n', '    function approve(address spender,uint tokens) external returns(bool success);\n', '    //授权转账\n', '    function transferFrom(address from,address to,uint tokens) external returns(bool success);\n', '    \n', '    event Transfer(address indexed from,address indexed to,uint tokens);\n', '    event Approval(address indexed tokenOwner,address indexed spender,uint tokens);\n', '}\n', '\n', 'contract ContractRecevier{\n', '    function tokenFallback(address _from,uint _value,bytes _data) public returns(bool ok);\n', '}\n', '\n', '\n', 'interface ERC223{\n', '    function transfer(address to,uint value,bytes data) public returns (bool ok);\n', '    event Transfer(address indexed from,address indexed to,uint value,bytes indexed data);\n', '}\n', '\n', 'contract Owned{\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '    event OwnershipTransferred(address indexed _from,address indexed _to);\n', '    \n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public  {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner,newOwner);\n', '        owner = newOwner ;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract SeahighToken is ERC20Interface,ERC223,Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    \n', '    mapping(address => uint ) balances;\n', '    mapping(address =>mapping(address =>uint)) allowed;\n', '    \n', '    constructor() public{\n', '        symbol = "SEAH";\n', '        name = "Seahigh Token";\n', '        decimals = 18;\n', '        _totalSupply = 100000000 * 10 **18;\n', '        balances[owner] = _totalSupply;\n', '        \n', '        emit Transfer(address(0),owner,_totalSupply);\n', '    }\n', '    \n', '    function isContract(address _addr)public view returns(bool is_contract){\n', '        uint length;\n', '        assembly{\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '    \n', '    \n', '    function totalSupply() public view returns(uint){\n', '//        return _totalSupply;\n', '          return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view  returns(uint balance){\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address to,uint tokens) public returns(bool success){\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '         balances[to] = balances[to].add(tokens);\n', '         emit Transfer(msg.sender,to,tokens);\n', '         return true;\n', '         \n', '    }\n', '    \n', '    function transfer(address to,uint value,bytes data) public returns(bool ok){\n', '        if(isContract(to)){\n', '         balances[msg.sender] = balances[msg.sender].sub(value);\n', '         balances[to] = balances[to].add(value);\n', '         ContractRecevier c = ContractRecevier(to);\n', '         c.tokenFallback(msg.sender,value,data);\n', '         emit Transfer(msg.sender,to,value,data);\n', '         return true; \n', '        }\n', '    }\n', '    \n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from,address to,uint tokens) public returns(bool success){\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        \n', '        balances[to] = balances[to].add(tokens);\n', '        \n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner,address spender) public view  returns(uint remaining){\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '}']
