['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-06\n', '*/\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '/*\n', '    IdeaFeX Token multi-send contract\n', '\n', '    Deployed to     : 0xB9eB8c42Cfc7fD61F7036202c305598E22419c1F\n', '    IFX token       : 0x2CF588136b15E47b555331d2f5258063AE6D01ed\n', '*/\n', '\n', '\n', '/* ERC20 standard interface */\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    event Transfer(address indexed sender, address indexed recipient, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '/* Owned contract */\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Only the owner can use this contract");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '}\n', '\n', '\n', '/* Multi send */\n', '\n', 'contract IFXmulti is Ownable {\n', '    ERC20Interface private _IFX = ERC20Interface(0x2CF588136b15E47b555331d2f5258063AE6D01ed);\n', '\n', '    function multisend(address[] memory addresses, uint[] memory values) public onlyOwner {\n', '        uint i = 0;\n', '        while (i < addresses.length) {\n', '           _IFX.transfer(addresses[i], values[i]);\n', '           i += 1;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.5.8;\n', '\n', '/*\n', '    IdeaFeX Token multi-send contract\n', '\n', '    Deployed to     : 0xB9eB8c42Cfc7fD61F7036202c305598E22419c1F\n', '    IFX token       : 0x2CF588136b15E47b555331d2f5258063AE6D01ed\n', '*/\n', '\n', '\n', '/* ERC20 standard interface */\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    event Transfer(address indexed sender, address indexed recipient, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '/* Owned contract */\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Only the owner can use this contract");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '}\n', '\n', '\n', '/* Multi send */\n', '\n', 'contract IFXmulti is Ownable {\n', '    ERC20Interface private _IFX = ERC20Interface(0x2CF588136b15E47b555331d2f5258063AE6D01ed);\n', '\n', '    function multisend(address[] memory addresses, uint[] memory values) public onlyOwner {\n', '        uint i = 0;\n', '        while (i < addresses.length) {\n', '           _IFX.transfer(addresses[i], values[i]);\n', '           i += 1;\n', '        }\n', '    }\n', '}']
