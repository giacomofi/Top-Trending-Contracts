['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-08\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract Controller is MintableToken, PausableToken, BurnableToken {\n', '    address public thisAddr; // matches delegation slot in proxy\n', '    uint256 public cap;      // the max cap of this token\n', '\n', '    string public constant name = "Crypto Price Index"; // solium-disable-line uppercase\n', '    string public constant symbol = "CPI"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    constructor() public {}\n', '\n', '    /**\n', '    * @dev Function to initialize storage, only callable from proxy.\n', '    * @param _controller The address where code is loaded from through delegatecall\n', '    * @param _cap The cap that should be set for the token\n', '    */\n', '    function initialize(address _controller, uint256 _cap) public onlyOwner {\n', '        require(cap == 0, "Cap is already set");\n', '        require(_cap > 0, "Trying to set an invalid cap");\n', '        require(thisAddr == _controller, "Not calling from proxy");\n', '        cap = _cap;\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        require(cap > 0, "Cap not set, not initialized");\n', '        require(totalSupply_.add(_amount) <= cap, "Trying to mint over the cap");\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to burn tokens\n', '    * @param _amount The amount of tokens to burn.\n', '    */\n', '    function burn(uint256 _amount) public onlyOwner {\n', '        require(cap > 0, "Cap not set, not initialized");\n', '        super.burn(_amount);\n', '    }\n', '}\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    view\n', '    public\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', 'contract NAdmin is RBAC{\n', '    string constant ADMIN_ROLE = "admin";\n', '\n', '    constructor() public {}\n', '\n', '    modifier onlyAdmins() {\n', '        require(isAdmin(msg.sender), "Admin rights required.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows admins to add people to the admin list.\n', '     * @param _toAdd The address to be added to admin list.\n', '     */\n', '    function addToAdmins(address _toAdd) public {\n', '        require(!isAdmin(_toAdd), "Address is admin already");\n', '        addRole(_toAdd,ADMIN_ROLE);\n', '    }\n', '\n', '    function addListToAdmins(address[] _toAdd) public {\n', '        for(uint256 i = 0; i<_toAdd.length; i++){\n', '            addToAdmins(_toAdd[i]);\n', '        }\n', '    }\n', '\n', '    function removeFromAdmins(address _toRemove) public {\n', '        require(isAdmin(_toRemove), "Address is not admin already");\n', '        removeRole(_toRemove,ADMIN_ROLE);\n', '    }\n', '\n', '    function removeListFromAdmins(address[] _toRemove) public {\n', '        for(uint256 i = 0; i<_toRemove.length; i++){\n', '            removeFromAdmins(_toRemove[i]);\n', '        }\n', '    }\n', '\n', '    function isAdmin(address _address) public view returns(bool) {\n', '        return hasRole(_address,ADMIN_ROLE);\n', '    }\n', '}\n', '\n', 'contract Whitelisted is RBAC {\n', '    string constant WLST_ROLE = "whitelist";\n', '    bool public whitelistUnlocked;\n', '\n', '    constructor() public {}\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(whitelistUnlocked || isWhitelisted(msg.sender), "Whitelist rights required.");\n', '        _;\n', '    }\n', '\n', '    function setWhitelistUnlock(bool _newStatus) public {\n', '        require(whitelistUnlocked!=_newStatus, "You are trying to set current status again");\n', '        whitelistUnlocked = _newStatus;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows admins to add people to the whitelist.\n', '     * @param _toAdd The address to be added to whitelist.\n', '     */\n', '    function addToWhitelist(address _toAdd) public {\n', '        require(!isWhitelisted(_toAdd), "Address is whitelisted already");\n', '        addRole(_toAdd,WLST_ROLE);\n', '    }\n', '\n', '    function addListToWhitelist(address[] _toAdd) public {\n', '        for(uint256 i = 0; i<_toAdd.length; i++){\n', '            addToWhitelist(_toAdd[i]);\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address _toRemove) public {\n', '        require(isWhitelisted(_toRemove), "Address is not whitelisted already");\n', '        removeRole(_toRemove,WLST_ROLE);\n', '    }\n', '\n', '    function removeListFromWhitelist(address[] _toRemove) public {\n', '        for(uint256 i = 0; i<_toRemove.length; i++){\n', '            removeFromWhitelist(_toRemove[i]);\n', '        }\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns(bool) {\n', '        return hasRole(_address,WLST_ROLE);\n', '    }\n', '}\n', '\n', 'contract TILM is Controller {\n', '\n', '    /**\n', '    * Defining locked balance data structure\n', '    **/\n', '    struct tlBalance {\n', '        uint256 timestamp;\n', '        uint256 balance;\n', '    }\n', '\n', '    mapping(address => tlBalance[]) lockedBalances;\n', '\n', '    event Locked(address indexed to, uint256 amount, uint256 timestamp);\n', '\n', '    /**\n', '    * @dev Returns the amount of locked balances of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    * @return An uint256 representing the length of the array of locked balances owned by the passed address.\n', '    */\n', '    function lockedBalanceLength(address _owner) public view returns (uint256) {\n', '        return lockedBalances[_owner].length;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the locked balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function lockedBalanceOf(address _owner) public view returns (uint256) {\n', '        uint256 lockedBalance = 0;\n', '        for(uint256 i = 0; i < lockedBalanceLength(_owner); i++){\n', '            if(lockedBalances[_owner][i].timestamp>now) {\n', '                lockedBalance += lockedBalances[_owner][i].balance;\n', '            }\n', '        }\n', '        return lockedBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the unlocked balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function unlockedBalanceOf(address _owner) public view returns (uint256) {\n', '        return super.balanceOf(_owner)-lockedBalanceOf(_owner);\n', '    }\n', '\n', '    /**\n', '    * @dev Removes the already unlocked tokens from the lockedBalances array for the specified address.\n', '    * @param _owner The address to consolidate the balance of.\n', '    */\n', '    function consolidateBalance(address _owner) public returns (bool) {\n', '        tlBalance[] storage auxBalances = lockedBalances[_owner];\n', '        delete lockedBalances[_owner];\n', '        for(uint256 i = 0; i<auxBalances.length; i++){\n', '            if(auxBalances[i].timestamp > now) {\n', '                lockedBalances[_owner].push(auxBalances[i]);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _amount The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        require(_to != address(0), "You can not transfer to address(0).");\n', '        require(_amount <= unlockedBalanceOf(msg.sender), "There is not enough unlocked balance.");\n', '        consolidateBalance(msg.sender);\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _amount uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool) {\n', '        require(_to != address(0), "You can not transfer to address(0).");\n', '        require(_amount <= unlockedBalanceOf(_from), "There is not enough unlocked balance.");\n', '        require(_amount <= allowed[_from][msg.sender], "There is not enough allowance.");\n', '        consolidateBalance(_from);\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Unlocks balance of the specified address, only callable by owner\n', '    * @param _owner The address to query the the balance of.\n', '    */\n', '    function unlockAllFunds(address _owner) public onlyOwner returns (bool){\n', '        delete lockedBalances[_owner];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _amount The amount to be transferred.\n', '    * @param _timestamp Unlock timestamp.\n', '    */\n', '    function transferLockedFunds(address _to, uint256 _amount, uint256 _timestamp) public returns (bool){\n', '        transfer(_to, _amount);\n', '        lockedBalances[_to].push(tlBalance(_timestamp,_amount));\n', '        emit Locked(_to, _amount, _timestamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _amount uint256 the amount of tokens to be transferred\n', '    * @param _timestamp Unlock timestamp.\n', '    */\n', '    function transferLockedFundsFrom(address _from, address _to, uint256 _amount, uint256 _timestamp) public returns (bool) {\n', '        transferFrom(_from, _to, _amount);\n', '        lockedBalances[_to].push(tlBalance(_timestamp,_amount));\n', '        emit Locked(_to, _amount, _timestamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _amounts The amounts to be transferred.\n', '    * @param _timestamps Unlock timestamps.\n', '    */\n', '    function transferListOfLockedFunds(address _to, uint256[] _amounts, uint256[] _timestamps) public returns (bool) {\n', '        require(_amounts.length==_timestamps.length, "There is not the same number of amounts and timestamps.");\n', '        uint256 _amount = 0;\n', '        for(uint256 i = 0; i<_amounts.length; i++){\n', '            _amount += _amounts[i];\n', '        }\n', '        transfer(_to, _amount);\n', '        for(i = 0; i<_amounts.length; i++){\n', '            lockedBalances[_to].push(tlBalance(_timestamps[i],_amounts[i]));\n', '            emit Locked(_to, _amounts[i], _timestamps[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _amounts uint256 the amount of tokens to be transferred\n', '    * @param _timestamps Unlock timestamps.\n', '    */\n', '    function transferListOfLockedFundsFrom(address _from, address _to, uint256[] _amounts, uint256[] _timestamps) public returns (bool) {\n', '        require(_amounts.length==_timestamps.length, "There is not the same number of amounts and timestamps.");\n', '        uint256 _amount = 0;\n', '        for(uint256 i = 0; i<_amounts.length; i++){\n', '            _amount += _amounts[i];\n', '        }\n', '        transferFrom(_from, _to, _amount);\n', '        for(i = 0; i<_amounts.length; i++){\n', '            lockedBalances[_to].push(tlBalance(_timestamps[i],_amounts[i]));\n', '            emit Locked(_to, _amounts[i], _timestamps[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint locked tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @param _timestamp When the tokens will be unlocked\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintLockedBalance(address _to, uint256 _amount, uint256 _timestamp) public onlyOwner canMint returns (bool) {\n', '        require(_timestamp > now, "You can not add a token to unlock in the past.");\n', '        super.mint(_to, _amount);\n', '        lockedBalances[_to].push(tlBalance(_timestamp,_amount));\n', '        emit Locked(_to, _amount, _timestamp);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract WATILM is TILM, Whitelisted, NAdmin {\n', '\n', '    constructor() public {}\n', '\n', '    modifier onlyAdmins() {\n', '        require(msg.sender==owner || isAdmin(msg.sender), "Owner or Admin rights required.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(msg.sender==owner || whitelistUnlocked || isWhitelisted(msg.sender), "Owner or Whitelist rights required.");\n', '        _;\n', '    }\n', '\n', '    function setWhitelistUnlock(bool _newStatus) public onlyAdmins {\n', '        super.setWhitelistUnlock(_newStatus);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows admins to add people to the whitelist.\n', '     * @param _toAdd The address to be added to whitelist.\n', '     */\n', '    function addToWhitelist(address _toAdd) public onlyAdmins {\n', '        super.addToWhitelist(_toAdd);\n', '    }\n', '\n', '    function addListToWhitelist(address[] _toAdd) public onlyAdmins {\n', '        super.addListToWhitelist(_toAdd);\n', '    }\n', '\n', '    function removeFromWhitelist(address _toRemove) public onlyAdmins {\n', '        super.removeFromWhitelist(_toRemove);\n', '    }\n', '\n', '    function removeListFromWhitelist(address[] _toRemove) public onlyAdmins {\n', '        super.removeListFromWhitelist(_toRemove);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows admins to add people to the admin list.\n', '     * @param _toAdd The address to be added to admin list.\n', '     */\n', '    function addToAdmins(address _toAdd) public onlyAdmins {\n', '        super.addToAdmins(_toAdd);\n', '    }\n', '\n', '    function addListToAdmins(address[] _toAdd) public onlyAdmins {\n', '        super.addListToAdmins(_toAdd);\n', '    }\n', '\n', '    function removeFromAdmins(address _toRemove) public onlyAdmins {\n', '        super.removeFromAdmins(_toRemove);\n', '    }\n', '\n', '    function removeListFromAdmins(address[] _toRemove) public onlyAdmins {\n', '        super.removeListFromAdmins(_toRemove);\n', '    }\n', '\n', '    /**\n', '     * @dev Only whitelisted can transfer tokens, and only to whitelisted addresses\n', '     * @param _to The address where tokens will be sent to\n', '     * @param _value The amount of tokens to be sent\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyWhitelisted returns(bool) {\n', '        //If the destination is not whitelisted, try to add it (only admins modifier)\n', '        if(!isWhitelisted(_to) && !whitelistUnlocked) addToWhitelist(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Only whitelisted can transfer tokens, and only to whitelisted addresses. Also, the msg.sender will need to be approved to do it\n', '     * @param _from The address where tokens will be sent from\n', '     * @param _to The address where tokens will be sent to\n', '     * @param _value The amount of tokens to be sent\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyWhitelisted returns (bool) {\n', '        //If the source is not whitelisted, try to add it (only admins modifier)\n', '        if(!isWhitelisted(_from) && !whitelistUnlocked) addToWhitelist(_from);\n', '        //If the destination is not whitelisted, try to add it (only admins modifier)\n', '        if(!isWhitelisted(_to) && !whitelistUnlocked) addToWhitelist(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow others to spend tokens from the msg.sender address. The spender should be whitelisted\n', '     * @param _spender The address to be approved\n', '     * @param _value The amount of tokens to be approved\n', '     */\n', '    function approve(address _spender, uint256 _value) public onlyWhitelisted returns (bool) {\n', '        //If the approve spender is not whitelisted, try to add it (only admins modifier)\n', '        if(!isWhitelisted(_spender) && !whitelistUnlocked) addToWhitelist(_spender);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']