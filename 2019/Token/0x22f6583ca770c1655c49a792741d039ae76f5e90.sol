['pragma solidity ^0.5.3;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public view returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public  returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Stoppable is Ownable {\n', '    bool public stopped;\n', '    \n', '    constructor() public {\n', '        stopped = false;\n', '    }\n', '    \n', '    modifier stoppable() {\n', '        if (stopped) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    \n', '    function stop() public onlyOwner {\n', '        stopped = true;\n', '    }\n', '    \n', '    function start() public onlyOwner {\n', '        stopped = false;\n', '    }\n', '}\n', '\n', 'contract StandardToken is Token, Stoppable {\n', '\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        if (_value > 0 && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0) {\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public stoppable returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public stoppable view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public _totalSupply;\n', '}\n', '\n', '\n', 'contract CCCToken is StandardToken {\n', '\n', '    function () external {\n', '        /// If ether is sent to this address, send it back.\n', '        revert();\n', '    }\n', '\n', '\n', "    string public name = 'Coinchat Game';\n", '    uint8 public decimals = 18;\n', "    string public symbol = 'CCG';\n", "    string public version = 'v201901311510';\n", '\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = 10000000000000000000000000000;\n', '        _totalSupply = 10000000000000000000000000000;\n', '        name = "Coinchat Game";\n', '        decimals = 18;\n', '        symbol = "CCG";\n', '    }\n', '}']