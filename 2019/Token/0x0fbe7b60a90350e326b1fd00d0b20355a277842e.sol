['pragma solidity 0.5.7;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * FUNCTIONS, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    // MODIFIERS\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Only Owner");\n', '        _;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the new owner.\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender == newOwner, "Only New Owner");\n', '        _;\n', '    }\n', '\n', '    modifier notNull(address _address) {\n', '        require(_address != address(0), "Address is Null");\n', '        _;\n', '    }\n', '\n', '    // CONSTRUCTOR\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    /// @param _newOwner The address to transfer ownership to.\n', '    \n', '    function transferOwnership(address _newOwner) public notNull(_newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /// @dev Allow the new owner to claim ownership and so proving that the newOwner is valid.\n', '    function acceptOwnership() public onlyNewOwner {\n', '        address oldOwner = owner;\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(oldOwner, owner);\n', '    }\n', '\n', '    // EVENTS\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '    bool public paused = false;\n', '\n', '    // MODIFIERS\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "only when not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "only when paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    // EVENTS\n', '\n', '    event Pause();\n', '\n', '    event Unpause();\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', 'contract ERC20Interface {\n', '    /// total amount of tokens\n', '    function totalSupply() public view returns(uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // EVENTS\n', '    \n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // require(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20Token is Ownable, ERC20Interface {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 internal _totalSupply;\n', '    \n', '    // CONSTRUCTOR\n', '\n', '    constructor(uint256 initialAmount) public {\n', '        if (initialAmount == 0)\n', '            return;\n', '        balances[msg.sender] = initialAmount;\n', '        _totalSupply = initialAmount;\n', '        emit Transfer(address(0), msg.sender, initialAmount);\n', '    }\n', '\n', '    // EXTERNAL FUNCTIONS\n', '\n', '    // PUBLIC FUNCTIONS\n', '\n', '    function totalSupply() public view returns(uint256 supply)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        return transferInternal(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* ALLOW FUNCTIONS */\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    */\n', '   \n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens   \n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public notNull(_spender) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender], "insufficient tokens");\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return transferInternal(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // INTERNAL FUNCTIONS\n', '\n', '    /// @notice internal send `_value` token to `_to` from `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) notNull(_to) returns (bool) {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }   \n', '\n', '    // PRIVATE FUNCTIONS\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is ERC20Token, Pausable {\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '}\n', '\n', '\n', '// module handling minting and burning of tokens and administration of minters\n', '\n', 'contract MintableToken is PausableToken\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => bool) internal minters; // list of allowed minters\n', '\n', '    // MODIFIERS\n', '\n', '    modifier onlyMinter {\n', '        require(minters[msg.sender], "Caller not minter");\n', '        _; \n', '    }\n', '\n', '    // CONSTRUCTOR\n', '\n', '    constructor() public {\n', '        addMinter(msg.sender);   // Set the owner as minter\n', '    }\n', '\n', '    // EXTERNAL FUNCTIONS\n', '\n', '    // PUBLIC FUNCTIONS\n', '\n', '    /// @dev  mint tokens to address\n', '    /// @notice mint `_value` token to `_to`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be minted\n', '    function mint(address _to, uint256 _value) public onlyMinter {\n', '        mintInternal(_to, _value);\n', '    }\n', '\n', '    /// @dev add minter\n', '    /// @notice add minter address `_newMinter`\n', '    /// @param _newMinter The address of the minter to add\n', '    function addMinter(address _newMinter) public notNull(_newMinter) onlyOwner {\n', '        if (minters[_newMinter])\n', '            return;\n', '        minters[_newMinter] = true;\n', '        emit AddMinter(_newMinter);\n', '    }\n', '\n', '    /// @dev remove minter \n', '    /// @notice remove minter address  `_oldMinter`\n', '    /// @param _oldMinter The address of the minter to remove\n', '    function removeMinter(address _oldMinter) public notNull(_oldMinter) onlyOwner {\n', '        if (!minters[_oldMinter])\n', '            return;\n', '        minters[_oldMinter] = false;\n', '        emit RemoveMinter(_oldMinter);\n', '    }\n', '\n', '    /// @dev check minter\n', '    /// @notice is address `_minter` a inter\n', '    /// @param _minter The address of the minter to check\n', '    function isMinter(address _minter) public notNull(_minter) view returns(bool)  {\n', '        return minters[_minter];\n', '    }\n', '\n', '    // INTERNAL FUNCTIONS\n', '\n', '    /// @dev  mint tokens to address\n', '    /// @notice mint `_value` token to `_to`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be _totalSupply\n', '    function mintInternal(address _to, uint256 _value) internal notNull(_to) {\n', '        balances[_to] = balances[_to].add(_value);\n', '        _totalSupply = _totalSupply.add(_value);\n', '        emit Transfer(address(0), _to, _value);\n', '    }\n', '\n', '    /// @dev burn tokens, e.g. when migrating\n', '    /// @notice burn `_value` token from `_from`\n', '    /// @param _from The address of the recipient\n', '    /// @param _value The amount of token to be _totalSupply from the callers account\n', '    function burn(address _from, uint256 _value) internal notNull(_from) {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '\n', '    // PRIVATE FUNCTIONS\n', '\n', '    // EVENTS\n', '    \n', '    event AddMinter(address indexed newMinter);\n', '    \n', '    event RemoveMinter(address indexed oldMinter);\n', '}\n', '\n', '/// @dev Migration Agent Base\n', 'contract MigrationAgent is Ownable, Pausable {\n', '\n', '    address public migrationToContract; // the contract to migrate to\n', '    address public migrationFromContract; // the conttactto migate from\n', '\n', '    // MODIFIERS\n', '    \n', '    modifier onlyMigrationFromContract() {\n', '        require(msg.sender == migrationFromContract, "Only from migration contract");\n', '        _;\n', '    }\n', '    // EXTERNAL FUNCTIONS\n', '\n', '    // PUBLIC FUNCTIONS\n', '\n', '    /// @dev set contract to migrate to \n', '    /// @param _toContract Then contract address to migrate to\n', '    function startMigrateToContract(address _toContract) public onlyOwner whenPaused {\n', '        migrationToContract = _toContract;\n', '        require(MigrationAgent(migrationToContract).isMigrationAgent(), "not a migratable contract");\n', '        emit StartMigrateToContract(address(this), _toContract);\n', '    }\n', '\n', '    /// @dev set contract to migrate from\n', '    /// @param _fromContract Then contract address to migrate from\n', '    function startMigrateFromContract(address _fromContract) public onlyOwner whenPaused {\n', '        migrationFromContract = _fromContract;\n', '        require(MigrationAgent(migrationFromContract).isMigrationAgent(), "not a migratable contract");\n', '        emit StartMigrateFromContract(_fromContract, address(this));\n', '    }\n', '\n', '    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n', '    function migrate() public;   \n', '\n', '    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n', '    /// @param _from The account to be migrated into new contract\n', '    /// @param _value The token balance to be migrated\n', '    function migrateFrom(address _from, uint256 _value) public returns(bool);\n', '\n', '    /// @dev is a valid migration agent\n', '    /// @return true if contract is a migratable contract\n', '    function isMigrationAgent() public pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    // INTERNAL FUNCTIONS\n', '\n', '    // PRIVATE FUNCTIONS\n', '\n', '    // EVENTS\n', '\n', '    event StartMigrateToContract(address indexed fromContract, address indexed toContract);\n', '\n', '    event StartMigrateFromContract(address indexed fromContract, address indexed toContract);\n', '\n', '    event MigratedTo(address indexed owner, address indexed _contract, uint256 value);\n', '\n', '    event MigratedFrom(address indexed owner, address indexed _contract, uint256 value);\n', '}\n', '\n', '\n', 'contract ActiveBitcoinEtherCertificate is MintableToken, MigrationAgent {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string constant public name = "Active Bitcoin Ether Certificate";\n', '    string constant public symbol = "ABEC";\n', '    uint8 constant public decimals = 5;\n', '    string constant public version = "1.0.0.0";\n', '\n', '    address public redeemAddress;\n', '    string public description;\n', '\n', '    // CONSTRUCTOR\n', '\n', '    constructor(address _redeemAddress) ERC20Token(0) notNull(_redeemAddress) public {\n', '        redeemAddress = _redeemAddress;\n', '    }\n', '\n', '    // EXTERNAL FUNCTIONS\n', '\n', '    /// @notice update contract description to  `_text` \n', '    /// @param _text The new description\n', '    function updateDescription(string calldata _text) external onlyMinter {\n', '        description = _text;\n', '    }\n', '\n', '    // PUBLIC FUNCTIONS\n', '\n', '    /*\n', '        MIGRATE FUNCTIONS\n', '     */\n', '    // safe migrate function\n', '    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\n', '    /// @param _from The account to be migrated into new contract\n', '    /// @param _value The token balance to be migrated\n', '    function migrateFrom(address _from, uint256 _value) public onlyMigrationFromContract whenNotPaused returns(bool) {\n', '        mintInternal(_from, _value);\n', '\n', '        emit MigratedFrom(_from, migrationFromContract, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Each user calls the migrate function on the original contract to migrate the users’ tokens to the migration agent migrateFrom on the `migrationToContract` contract\n', '    function migrate() public whenNotPaused {\n', '        require(migrationToContract != address(0), "not in migration mode"); // revert if not in migrate mode\n', '        uint256 value = balanceOf(msg.sender);\n', '        require (value > 0, "no balance"); // revert if not value left to transfer\n', '        burn(msg.sender, value);\n', '        require(MigrationAgent(migrationToContract).migrateFrom(msg.sender, value)==true, "migrateFrom must return true");\n', '        emit MigratedTo(msg.sender, migrationToContract, value);\n', '    }\n', '\n', '    /*\n', '        Helper FUNCTIONS\n', '    */\n', '\n', '    /// @dev helper function to return foreign tokens accidental send to contract address\n', '    /// @param _tokenaddress Address of foreign ERC20 contract\n', '    /// @param _to Address to send foreign tokens to\n', '    function refundForeignTokens(address _tokenaddress,address _to) public notNull(_to) onlyMinter {\n', '        require(_tokenaddress != address(this), "Must not be self");\n', '        ERC20Interface token = ERC20Interface(_tokenaddress);\n', '\n', '        // transfer current balance for this contract to _to  in token contract\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.transfer.selector, _to, token.balanceOf(address(this))));\n', '        require(success);\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            require(abi.decode(returndata, (bool)));\n', '        }        \n', '    }\n', '\n', '    /// @notice minter transfer account tokens from one address `_from` to new token owner address `_to`. If `_to` is the redeem address then tokens will be burned \n', '    /// @param _from The address of the original token owner\n', '    /// @param _to The address of the new token owner\n', '    /// @return Whether the transfer was successful or not\n', '    function transferAccount(address _from, address _to) public onlyMinter returns (bool result) {\n', '        uint256 balance = balanceOf(_from);\n', '        if(_to == redeemAddress) {\n', '            result = transferInternal(_from, _to, balance);\n', '        } else {\n', '            result = super.transferInternal(_from, _to, balance);\n', '        }\n', '        emit TransferAccount(_from, _to);\n', '    }\n', '\n', '    // INTERNAL FUNCTIONS\n', '\n', '    /// @notice internal send `_value` token to `_to` from `_from` \n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred \n', '    /// @return Whether the transfer was successful or not\n', '    function transferInternal(address _from, address _to, uint256 _value) internal notNull(_from) returns (bool) {\n', '        require(_to == redeemAddress, "Wrong destination address");\n', '        // burn _value\n', '        balances[_from] = balances[_from].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        // report as transfer + burn \n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(_to, address(0), _value);\n', '        return true;\n', '    }\n', '\n', '    // PRIVATE FUNCTIONS\n', '\n', '    event TransferAccount(address indexed _from, address indexed _to);\n', '}']