['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two signed integers, reverts on overflow.\n', '    */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0); // Solidity only automatically asserts when dividing by 0\n', '        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two signed integers, reverts on overflow.\n', '    */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two signed integers, reverts on overflow.\n', '    */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DetailedToken {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract KeyValueStorage {\n', '\n', '  mapping(address => mapping(bytes32 => uint256)) _uintStorage;\n', '  mapping(address => mapping(bytes32 => address)) _addressStorage;\n', '  mapping(address => mapping(bytes32 => bool)) _boolStorage;\n', '\n', '  /**** Get Methods ***********/\n', '\n', '  function getAddress(bytes32 key) public view returns (address) {\n', '      return _addressStorage[msg.sender][key];\n', '  }\n', '\n', '  function getUint(bytes32 key) public view returns (uint) {\n', '      return _uintStorage[msg.sender][key];\n', '  }\n', '\n', '  function getBool(bytes32 key) public view returns (bool) {\n', '      return _boolStorage[msg.sender][key];\n', '  }\n', '\n', '  /**** Set Methods ***********/\n', '\n', '  function setAddress(bytes32 key, address value) public {\n', '    _addressStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  function setUint(bytes32 key, uint value) public {\n', '      _uintStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  function setBool(bytes32 key, bool value) public {\n', '      _boolStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  /**** Delete Methods ***********/\n', '\n', '  function deleteAddress(bytes32 key) public {\n', '      delete _addressStorage[msg.sender][key];\n', '  }\n', '\n', '  function deleteUint(bytes32 key) public {\n', '      delete _uintStorage[msg.sender][key];\n', '  }\n', '\n', '  function deleteBool(bytes32 key) public {\n', '      delete _boolStorage[msg.sender][key];\n', '  }\n', '\n', '}\n', '\n', 'contract Proxy is Ownable {\n', '\n', '  event Upgraded(address indexed implementation);\n', '\n', '  address internal _implementation;\n', '\n', '  function implementation() public view returns (address) {\n', '    return _implementation;\n', '  }\n', '\n', '  function upgradeTo(address impl) public onlyOwner {\n', '    require(_implementation != impl);\n', '    _implementation = impl;\n', '    emit Upgraded(impl);\n', '  }\n', '\n', '  function () payable public {\n', '    address _impl = implementation();\n', '    require(_impl != address(0));\n', '    bytes memory data = msg.data;\n', '\n', '    assembly {\n', '      let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\n', '      let size := returndatasize\n', '      let ptr := mload(0x40)\n', '      returndatacopy(ptr, 0, size)\n', '      switch result\n', '      case 0 { revert(ptr, size) }\n', '      default { return(ptr, size) }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract StorageStateful {\n', '\n', '  KeyValueStorage _storage;\n', '\n', '}\n', '\n', 'contract StorageConsumer is StorageStateful {\n', '\n', '  constructor(KeyValueStorage storage_) public {\n', '    _storage = storage_;\n', '  }\n', '\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', 'contract TokenVersion1 is StorageConsumer, Proxy, DetailedToken {\n', '\n', '  constructor(KeyValueStorage storage_)\n', '    public\n', '    StorageConsumer(storage_)\n', '  {\n', '    // set some immutable state\n', '    name = "Influence";\n', '    symbol = "INFLU";\n', '    decimals = 18;\n', '    totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '    \n', '    // set token owner in the key-value store\n', '    storage_.setAddress("owner", msg.sender);\n', '    _storage.setUint(keccak256("balances", msg.sender), totalSupply);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenDelegate is StorageStateful {\n', '  using SafeMath for uint256;\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance) {\n', '    return getBalance(owner);\n', '  }\n', '\n', '  function getBalance(address balanceHolder) public view returns (uint256) {\n', '    return _storage.getUint(keccak256("balances", balanceHolder));\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _storage.getUint("totalSupply");\n', '  }\n', '\n', '  function addSupply(uint256 amount) internal {\n', '    _storage.setUint("totalSupply", totalSupply().add(amount));\n', '  }\n', '  \n', '  function subSupply(uint256 amount) internal {\n', '      _storage.setUint("totalSupply", totalSupply().sub(amount));\n', '  }\n', '\n', '  function addBalance(address balanceHolder, uint256 amount) internal {\n', '    setBalance(balanceHolder, getBalance(balanceHolder).add(amount));\n', '  }\n', '\n', '  function subBalance(address balanceHolder, uint256 amount) internal {\n', '    setBalance(balanceHolder, getBalance(balanceHolder).sub(amount));\n', '  }\n', '\n', '  function setBalance(address balanceHolder, uint256 amount) internal {\n', '    _storage.setUint(keccak256("balances", balanceHolder), amount);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVersion2 is TokenDelegate {\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '  \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '  /**\n', '   * Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '      require(_to != address(0x0));\n', '      require(getBalance(_from) >= _value);\n', '      require(getBalance(_to) + _value > getBalance(_to));\n', '      uint previousBalances = getBalance(_from) + getBalance(_to);\n', '      subBalance(_from, _value);\n', '      addBalance(_to, _value);\n', '      emit Transfer(_from, _to, _value);\n', '      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens\n', '   *\n', '   * Send `_value` tokens to `_to` from your account\n', '   *\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from other address\n', '   *\n', '   * Send `_value` tokens to `_to` in behalf of `_from`\n', '   *\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public\n', '      returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address and notify\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '      public\n', '      returns (bool success) {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly\n', '   *\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) public returns (bool success) {\n', '      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '      subBalance(msg.sender, _value);              // Subtract from the sender\n', '      subSupply(_value);                           // Updates totalSupply\n', '      emit Burn(msg.sender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens from other account\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '   *\n', '   * @param _from the address of the sender\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n', '      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '      subBalance(_from, _value);                          // Subtract from the targeted balance\n', '      allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '      \n', '      subSupply(_value);                                  // Update totalSupply\n', '      emit Burn(_from, _value);\n', '      return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract TokenVersion3 is TokenDelegate {\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == _storage.getAddress("owner"));\n', '    _;\n', '  }\n', '\n', '  \n', '    // This creates an array with all balances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '  \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '  /**\n', '   * Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '      require(_to != address(0x0));\n', '      require(getBalance(_from) >= _value);\n', '      require(getBalance(_to) + _value > getBalance(_to));\n', '      uint previousBalances = getBalance(_from) + getBalance(_to);\n', '      subBalance(_from, _value);\n', '      addBalance(_to, _value);\n', '      emit Transfer(_from, _to, _value);\n', '      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens\n', '   *\n', '   * Send `_value` tokens to `_to` from your account\n', '   *\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from other address\n', '   *\n', '   * Send `_value` tokens to `_to` in behalf of `_from`\n', '   *\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public\n', '      returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address and notify\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '      public\n', '      returns (bool success) {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly\n', '   *\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) public returns (bool success) {\n', '      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '      subBalance(msg.sender, _value);              // Subtract from the sender\n', '      subSupply(_value);                           // Updates totalSupply\n', '      emit Burn(msg.sender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens from other account\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '   *\n', '   * @param _from the address of the sender\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n', '      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '      subBalance(_from, _value);                          // Subtract from the targeted balance\n', '      allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '      \n', '      subSupply(_value);                                  // Update totalSupply\n', '      emit Burn(_from, _value);\n', '      return true;\n', '  }\n', '  \n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        addBalance(target, mintedAmount);\n', '        addSupply(mintedAmount);\n', '        emit Transfer(address(0), address(this), mintedAmount);\n', '        emit Transfer(address(this), target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two signed integers, reverts on overflow.\n', '    */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0); // Solidity only automatically asserts when dividing by 0\n', '        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two signed integers, reverts on overflow.\n', '    */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two signed integers, reverts on overflow.\n', '    */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DetailedToken {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract KeyValueStorage {\n', '\n', '  mapping(address => mapping(bytes32 => uint256)) _uintStorage;\n', '  mapping(address => mapping(bytes32 => address)) _addressStorage;\n', '  mapping(address => mapping(bytes32 => bool)) _boolStorage;\n', '\n', '  /**** Get Methods ***********/\n', '\n', '  function getAddress(bytes32 key) public view returns (address) {\n', '      return _addressStorage[msg.sender][key];\n', '  }\n', '\n', '  function getUint(bytes32 key) public view returns (uint) {\n', '      return _uintStorage[msg.sender][key];\n', '  }\n', '\n', '  function getBool(bytes32 key) public view returns (bool) {\n', '      return _boolStorage[msg.sender][key];\n', '  }\n', '\n', '  /**** Set Methods ***********/\n', '\n', '  function setAddress(bytes32 key, address value) public {\n', '    _addressStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  function setUint(bytes32 key, uint value) public {\n', '      _uintStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  function setBool(bytes32 key, bool value) public {\n', '      _boolStorage[msg.sender][key] = value;\n', '  }\n', '\n', '  /**** Delete Methods ***********/\n', '\n', '  function deleteAddress(bytes32 key) public {\n', '      delete _addressStorage[msg.sender][key];\n', '  }\n', '\n', '  function deleteUint(bytes32 key) public {\n', '      delete _uintStorage[msg.sender][key];\n', '  }\n', '\n', '  function deleteBool(bytes32 key) public {\n', '      delete _boolStorage[msg.sender][key];\n', '  }\n', '\n', '}\n', '\n', 'contract Proxy is Ownable {\n', '\n', '  event Upgraded(address indexed implementation);\n', '\n', '  address internal _implementation;\n', '\n', '  function implementation() public view returns (address) {\n', '    return _implementation;\n', '  }\n', '\n', '  function upgradeTo(address impl) public onlyOwner {\n', '    require(_implementation != impl);\n', '    _implementation = impl;\n', '    emit Upgraded(impl);\n', '  }\n', '\n', '  function () payable public {\n', '    address _impl = implementation();\n', '    require(_impl != address(0));\n', '    bytes memory data = msg.data;\n', '\n', '    assembly {\n', '      let result := delegatecall(gas, _impl, add(data, 0x20), mload(data), 0, 0)\n', '      let size := returndatasize\n', '      let ptr := mload(0x40)\n', '      returndatacopy(ptr, 0, size)\n', '      switch result\n', '      case 0 { revert(ptr, size) }\n', '      default { return(ptr, size) }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract StorageStateful {\n', '\n', '  KeyValueStorage _storage;\n', '\n', '}\n', '\n', 'contract StorageConsumer is StorageStateful {\n', '\n', '  constructor(KeyValueStorage storage_) public {\n', '    _storage = storage_;\n', '  }\n', '\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', 'contract TokenVersion1 is StorageConsumer, Proxy, DetailedToken {\n', '\n', '  constructor(KeyValueStorage storage_)\n', '    public\n', '    StorageConsumer(storage_)\n', '  {\n', '    // set some immutable state\n', '    name = "Influence";\n', '    symbol = "INFLU";\n', '    decimals = 18;\n', '    totalSupply = 10000000000 * 10 ** uint256(decimals);\n', '    \n', '    // set token owner in the key-value store\n', '    storage_.setAddress("owner", msg.sender);\n', '    _storage.setUint(keccak256("balances", msg.sender), totalSupply);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenDelegate is StorageStateful {\n', '  using SafeMath for uint256;\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance) {\n', '    return getBalance(owner);\n', '  }\n', '\n', '  function getBalance(address balanceHolder) public view returns (uint256) {\n', '    return _storage.getUint(keccak256("balances", balanceHolder));\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _storage.getUint("totalSupply");\n', '  }\n', '\n', '  function addSupply(uint256 amount) internal {\n', '    _storage.setUint("totalSupply", totalSupply().add(amount));\n', '  }\n', '  \n', '  function subSupply(uint256 amount) internal {\n', '      _storage.setUint("totalSupply", totalSupply().sub(amount));\n', '  }\n', '\n', '  function addBalance(address balanceHolder, uint256 amount) internal {\n', '    setBalance(balanceHolder, getBalance(balanceHolder).add(amount));\n', '  }\n', '\n', '  function subBalance(address balanceHolder, uint256 amount) internal {\n', '    setBalance(balanceHolder, getBalance(balanceHolder).sub(amount));\n', '  }\n', '\n', '  function setBalance(address balanceHolder, uint256 amount) internal {\n', '    _storage.setUint(keccak256("balances", balanceHolder), amount);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVersion2 is TokenDelegate {\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '  \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '  /**\n', '   * Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '      require(_to != address(0x0));\n', '      require(getBalance(_from) >= _value);\n', '      require(getBalance(_to) + _value > getBalance(_to));\n', '      uint previousBalances = getBalance(_from) + getBalance(_to);\n', '      subBalance(_from, _value);\n', '      addBalance(_to, _value);\n', '      emit Transfer(_from, _to, _value);\n', '      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens\n', '   *\n', '   * Send `_value` tokens to `_to` from your account\n', '   *\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from other address\n', '   *\n', '   * Send `_value` tokens to `_to` in behalf of `_from`\n', '   *\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public\n', '      returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address and notify\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '      public\n', '      returns (bool success) {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly\n', '   *\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) public returns (bool success) {\n', '      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '      subBalance(msg.sender, _value);              // Subtract from the sender\n', '      subSupply(_value);                           // Updates totalSupply\n', '      emit Burn(msg.sender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens from other account\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '   *\n', '   * @param _from the address of the sender\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n', '      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '      subBalance(_from, _value);                          // Subtract from the targeted balance\n', "      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '      \n', '      subSupply(_value);                                  // Update totalSupply\n', '      emit Burn(_from, _value);\n', '      return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract TokenVersion3 is TokenDelegate {\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == _storage.getAddress("owner"));\n', '    _;\n', '  }\n', '\n', '  \n', '    // This creates an array with all balances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '  \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '  /**\n', '   * Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '      require(_to != address(0x0));\n', '      require(getBalance(_from) >= _value);\n', '      require(getBalance(_to) + _value > getBalance(_to));\n', '      uint previousBalances = getBalance(_from) + getBalance(_to);\n', '      subBalance(_from, _value);\n', '      addBalance(_to, _value);\n', '      emit Transfer(_from, _to, _value);\n', '      assert(getBalance(_from) + getBalance(_to) == previousBalances);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens\n', '   *\n', '   * Send `_value` tokens to `_to` from your account\n', '   *\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from other address\n', '   *\n', '   * Send `_value` tokens to `_to` in behalf of `_from`\n', '   *\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public\n', '      returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Set allowance for other address and notify\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '      public\n', '      returns (bool success) {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly\n', '   *\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) public returns (bool success) {\n', '      require(getBalance(msg.sender) >= _value);   // Check if the sender has enough\n', '      subBalance(msg.sender, _value);              // Subtract from the sender\n', '      subSupply(_value);                           // Updates totalSupply\n', '      emit Burn(msg.sender, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Destroy tokens from other account\n', '   *\n', '   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '   *\n', '   * @param _from the address of the sender\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '      require(getBalance(_from) >= _value);                // Check if the targeted balance is enough\n', '      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '      subBalance(_from, _value);                          // Subtract from the targeted balance\n', "      allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '      \n', '      subSupply(_value);                                  // Update totalSupply\n', '      emit Burn(_from, _value);\n', '      return true;\n', '  }\n', '  \n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        addBalance(target, mintedAmount);\n', '        addSupply(mintedAmount);\n', '        emit Transfer(address(0), address(this), mintedAmount);\n', '        emit Transfer(address(this), target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '}']
