['pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    //Variables\n', '    address public owner;\n', '\n', '    address public newOwner;\n', '\n', '    //    Modifiers\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood:\n', '        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract OCGERC20 is StandardToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* Public variables of the token */\n', '    uint256 public creationBlock;\n', '\n', '    uint8 public decimals;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    string public standard;\n', '\n', '    bool public locked;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function OCGERC20(\n', '        uint256 _totalSupply,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    ) public {\n', '        standard = "ERC20 0.1";\n', '        locked = _locked;\n', '        totalSupply = _totalSupply;\n', '\n', '        if (_transferAllSupplyToOwner) {\n', '            balances[msg.sender] = totalSupply;\n', '        } else {\n', '            balances[this] = totalSupply;\n', '        }\n', '        name = _tokenName;\n', '        // Set the name for display purposes\n', '        symbol = _tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = _decimalUnits;\n', '        // Amount of decimals for display purposes\n', '        creationBlock = block.number;\n', '    }\n', '\n', '    /* public methods */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(locked == false);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transferFee(address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burnInternal(address _address, uint256 _value) internal returns (bool) {\n', '        balances[_address] = balances[_address].sub(_value);\n', '        Transfer(_address, address(0), _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/*\n', 'This contract manages the minters and the modifier to allow mint to happen only if called by minters\n', 'This contract contains basic minting functionality though\n', '*/\n', 'contract MintingERC20 is OCGERC20 {\n', '\n', '    // Variables\n', '    mapping (address => bool) public minters;\n', '\n', '    // Modifiers\n', '    modifier onlyMinters() {\n', '        require(true == minters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function MintingERC20(\n', '        uint256 _initialSupply,\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _symbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    )\n', '    public OCGERC20(\n', '        _initialSupply,\n', '        _tokenName,\n', '        _decimals,\n', '        _symbol,\n', '        _transferAllSupplyToOwner,\n', '        _locked\n', '    )\n', '    {\n', '        standard = "MintingERC20 0.1";\n', '        minters[msg.sender] = true;\n', '    }\n', '\n', '    function addMinter(address _newMinter) public onlyOwner {\n', '        minters[_newMinter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public onlyOwner {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        if (_amount == uint256(0)) {\n', '            return uint256(0);\n', '        }\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_addr] = balances[_addr].add(_amount);\n', '        Transfer(address(0), _addr, _amount);\n', '\n', '        return _amount;\n', '    }\n', '}\n', '\n', 'contract OCG is MintingERC20 {\n', '\n', '    OCGFee public fees;\n', '\n', '    SellableToken public sellableToken;\n', '\n', '    uint256 public deployedAt;\n', '\n', '    address public burnAddress;\n', '\n', '    bool public isInitialValuesFetched;\n', '\n', '    mapping (address => uint256) public burnAmount;\n', '\n', '    mapping (address => uint256) public lastCharge;\n', '\n', '    event TransferFee(address indexed from, uint256 value);\n', '\n', '    event StorageFee(address indexed from, uint256 value);\n', '\n', '    modifier onlySellableContract() {\n', '        require(msg.sender == address(sellableToken));\n', '        _;\n', '    }\n', '\n', '    function OCG(\n', '        string _tokenName,\n', '        string _tokenSymbol,\n', '        uint8 _decimalUnits,\n', '        address _burnAddress,\n', '        bool _locked\n', '    ) public MintingERC20(\n', '        0,\n', '        _tokenName,\n', '        _decimalUnits,\n', '        _tokenSymbol,\n', '        false,\n', '        _locked\n', '    ) {\n', '        standard = "OCG 0.1";\n', '        deployedAt = now;\n', '        require(_burnAddress != address(0));\n', '        burnAddress = _burnAddress;\n', '    }\n', '\n', '    function fetchInitialValues(OCG _sourceAddress, address[7] _holders) public onlyOwner {\n', '        require(isInitialValuesFetched == false);\n', '        isInitialValuesFetched = true;\n', '\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            mint(_holders[i], _sourceAddress.balanceOf(_holders[i]));\n', '        }\n', '    }\n', '\n', '    function setLocked(bool _locked) public onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    function setOCGFee(address _fees) public onlyOwner {\n', '        require(_fees != address(0));\n', '        fees = OCGFee(_fees);\n', '    }\n', '\n', '    function setSellableToken(address _sellable) public onlyOwner {\n', '        require(_sellable != address(0));\n', '        sellableToken = SellableToken(_sellable);\n', '    }\n', '\n', '    function setBurnAddress(address _burnAddress) public onlyOwner {\n', '        require(_burnAddress != address(0));\n', '        burnAddress = _burnAddress;\n', '    }\n', '\n', '    function burn(address _address) public onlyOwner {\n', '        if (burnAmount[_address] > 0) {\n', '            super.burnInternal(burnAddress, burnAmount[_address]);\n', '            burnAmount[_address] = 0;\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool status) {\n', '        require(locked == false && msg.sender != burnAddress);\n', '\n', '        uint256 valueToTransfer = _value;\n', '\n', '        if (_to == burnAddress) {\n', '            burnAmount[msg.sender] = burnAmount[msg.sender].add(valueToTransfer);\n', '        } else {\n', '            uint256 feeValue = transferFees(msg.sender, _to, _value);\n', '\n', '            valueToTransfer = _value.sub(feeValue);\n', '            if (valueToTransfer > balanceOf(msg.sender)) {\n', '                valueToTransfer = balanceOf(msg.sender);\n', '            }\n', '        }\n', '\n', '        status = super.transfer(_to, valueToTransfer);\n', '\n', '        sellableToken.updateFreeStorage(msg.sender, balanceOf(msg.sender));\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool status) {\n', '        require(locked == false && _from != burnAddress);\n', '\n', '        uint256 valueToTransfer = _value;\n', '\n', '        if (_to == burnAddress) {\n', '            burnAmount[_from] = burnAmount[_from].add(valueToTransfer);\n', '        } else {\n', '            uint256 feeValue = transferFees(_from, _to, _value);\n', '\n', '            valueToTransfer = _value.sub(feeValue);\n', '            if (valueToTransfer > balanceOf(_from)) {\n', '                valueToTransfer = balanceOf(_from);\n', '            }\n', '        }\n', '\n', '        status = super.transferFrom(_from, _to, valueToTransfer);\n', '        require(status == true);\n', '\n', '        sellableToken.updateFreeStorage(_from, balanceOf(_from));\n', '    }\n', '\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        uint256 mintedAmount = super.mint(_addr, _amount);\n', '\n', '        if (mintedAmount == _amount && lastCharge[_addr] == 0 && _amount > 0) {\n', '            lastCharge[_addr] = now;\n', '        }\n', '\n', '        return mintedAmount;\n', '    }\n', '\n', '    function payStorageFee(address _from) internal returns (bool) {\n', '        require(_from != address(0) && address(fees) != address(0) && address(sellableToken) != address(0));\n', '        uint256 _value = balanceOf(_from);\n', '        require(sellableToken.freeStorage(_from) <= _value);\n', '\n', '        bool status = true;\n', '        uint256 additionalAmount = 0;\n', '\n', '        if (sellableToken.freeStorage(_from) != 0) {\n', '            if (deployedAt.add(fees.offPeriod()) >= now) {\n', '                _value = _value.sub(sellableToken.freeStorage(_from));\n', '            } else if (lastCharge[_from] < deployedAt.add(fees.offPeriod())) {\n', '                additionalAmount = calculateStorageFee(\n', '                    _value.sub(sellableToken.freeStorage(_from)),\n', '                    deployedAt.add(fees.offPeriod()).sub(lastCharge[_from])\n', '                );\n', '                lastCharge[_from] = deployedAt.add(fees.offPeriod());\n', '            }\n', '        }\n', '\n', '        uint256 amount = calculateStorageFee(_value, now.sub(lastCharge[_from])).add(additionalAmount);\n', '        if (amount != 0 && balanceOf(_from) >= amount) {\n', '            status = super.transferFee(_from, fees.feeAddress(), amount);\n', '            StorageFee(_from, amount);\n', '        }\n', '\n', '        require(status == true);\n', '        lastCharge[_from] = now;\n', '\n', '        return status;\n', '    }\n', '\n', '    function calculateStorageFee(uint256 _value, uint256 _period) internal view returns (uint256) {\n', '        uint256 amount = 0;\n', '        if (_period.div(1 days) > 0 && _value > 0) {\n', '            amount = _value.mul(fees.feeAmount()).mul(_period).div(1 years).div(1000);\n', '        }\n', '\n', '        return amount;\n', '    }\n', '\n', '    function transferFees(address _from, address _to, uint256 _value) internal returns (uint256) {\n', '        require(address(fees) != address(0) && address(sellableToken) != address(0));\n', '\n', '        bool status = false;\n', '\n', '        if (fees.feeAmount() > 0) {\n', '            status = payStorageFee(_from);\n', '            if (status) {\n', '                status = payStorageFee(_to);\n', '            }\n', '        }\n', '\n', '        uint256 feeValue = 0;\n', '        if (fees.transferFee() > 0) {\n', '            feeValue = _value.mul(fees.transferFee()).div(uint(10) ** decimals);\n', '        }\n', '        if (status && feeValue > 0) {\n', '            status = super.transferFee(_from, fees.transferFeeAddress(), feeValue);\n', '            TransferFee(_from, feeValue);\n', '        }\n', '\n', '        require(status == true);\n', '\n', '        return feeValue;\n', '    }\n', '\n', '}\n', '\n', 'contract OCGFee is Ownable {\n', '\n', '    SellableToken public sellableToken;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public offPeriod = 3 years;\n', '\n', '    uint256 public offThreshold;\n', '\n', '    uint256 public feeAmount;\n', '\n', '    address public feeAddress;\n', '\n', '    address public transferFeeAddress;\n', '\n', '    uint256 public transferFee;\n', '\n', '    modifier onlySellableContract() {\n', '        require(msg.sender == address(sellableToken));\n', '        _;\n', '    }\n', '\n', '    function OCGFee(\n', '        uint256 _offThreshold,\n', '        address _feeAddress,\n', '        uint256 _feeAmount,//0.5% -> 5\n', '        address _transferFeeAddress,\n', '        uint256 _transferFee //0.04% -> 0.04 * 10 ^ decimals\n', '    )\n', '        public\n', '    {\n', '        require(_feeAddress != address(0) && _feeAmount >= 0 && _offThreshold > 0);\n', '        offThreshold = _offThreshold;\n', '        feeAddress = _feeAddress;\n', '        feeAmount = _feeAmount;\n', '\n', '        require(_transferFeeAddress != address(0) && _transferFee >= 0);\n', '        transferFeeAddress = _transferFeeAddress;\n', '        transferFee = _transferFee;\n', '    }\n', '\n', '    function setSellableToken(address _sellable) public onlyOwner {\n', '        require(_sellable != address(0));\n', '        sellableToken = SellableToken(_sellable);\n', '    }\n', '\n', '    function setStorageFee(\n', '        uint256 _offThreshold,\n', '        address _feeAddress,\n', '        uint256 _feeAmount //0.5% -> 5\n', '    ) public onlyOwner {\n', '        require(_feeAddress != address(0));\n', '\n', '        offThreshold = _offThreshold;\n', '        feeAddress = _feeAddress;\n', '        feeAmount = _feeAmount;\n', '    }\n', '\n', '    function decreaseThreshold(uint256 _value) public onlySellableContract {\n', '        if (offThreshold < _value) {\n', '            offThreshold = 0;\n', '        } else {\n', '            offThreshold = offThreshold.sub(_value);\n', '        }\n', '    }\n', '\n', '    function setTransferFee(address _transferFeeAddress, uint256 _transferFee) public onlyOwner returns (bool) {\n', '        if (_transferFeeAddress != address(0) && _transferFee >= 0) {\n', '            transferFeeAddress = _transferFeeAddress;\n', '            transferFee = _transferFee;\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '}\n', '\n', 'contract Multivest is Ownable {\n', '    /* public variables */\n', '    mapping (address => bool) public allowedMultivests;\n', '\n', '    /* events */\n', '    event MultivestSet(address multivest);\n', '\n', '    event MultivestUnset(address multivest);\n', '\n', '    event Contribution(address _holder, uint256 tokens);\n', '\n', '    modifier onlyAllowedMultivests(address _address) {\n', '        require(true == allowedMultivests[_address]);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    function Multivest(address _multivest) public {\n', '        allowedMultivests[_multivest] = true;\n', '    }\n', '\n', '    /* public methods */\n', '    function setAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = true;\n', '    }\n', '\n', '    function unsetAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = false;\n', '    }\n', '\n', '    function multivestBuy(\n', '        address _address,\n', '        uint256 _amount,\n', '        uint256 _value\n', '    ) public onlyAllowedMultivests(msg.sender) {\n', '        bool status = buy(_address, _amount, _value);\n', '\n', '        require(status == true);\n', '    }\n', '\n', '    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool);\n', '\n', '}\n', '\n', 'contract SellableToken is Multivest {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    OCG public ocg;\n', '\n', '    OCGFee public fees;\n', '\n', '    // amount of sold tokens\n', '    uint256 public soldTokens;\n', '\n', '    uint256 public minInvest;\n', '\n', '    mapping (address => uint256) public freeStorage;\n', '\n', '    modifier onlyOCGContract() {\n', '        require(msg.sender == address(ocg));\n', '        _;\n', '    }\n', '\n', '    function SellableToken(\n', '        address _ocg,\n', '        uint256 _minInvest //0.1 tokens -> 0.1 * 10 ^ decimals\n', '    )\n', '        public Multivest(msg.sender)\n', '    {\n', '        require(_minInvest > 0);\n', '        ocg = OCG(_ocg);\n', '\n', '        minInvest = _minInvest;\n', '    }\n', '\n', '    function setOCG(address _ocg) public onlyOwner {\n', '        require(_ocg != address(0));\n', '        ocg = OCG(_ocg);\n', '    }\n', '\n', '    function setOCGFee(address _fees) public onlyOwner {\n', '        require(_fees != address(0));\n', '        fees = OCGFee(_fees);\n', '    }\n', '\n', '    function updateFreeStorage(address _address, uint256 _value) public onlyOCGContract {\n', '        if (freeStorage[_address] > _value) {\n', '            freeStorage[_address] = _value;\n', '        }\n', '    }\n', '\n', '    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\n', '        require(_address != address(0) && address(ocg) != address(0));\n', '\n', '        if (_amount == 0 || _amount < minInvest || _value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 mintedAmount = ocg.mint(_address, _amount);\n', '\n', '        require(mintedAmount == _amount);\n', '\n', '        onSuccessfulBuy(_address, _value, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function onSuccessfulBuy(address _address, uint256 _value, uint256 _amount) internal {\n', '        soldTokens = soldTokens.add(_amount);\n', '        if (fees.offThreshold() > 0) {\n', '            uint256 freeAmount = _amount;\n', '            if (fees.offThreshold() < _value) {\n', '                freeAmount = _amount.sub(_value.sub(fees.offThreshold()).mul(_amount).div(_value));\n', '            }\n', '\n', '            freeStorage[_address] = freeStorage[_address].add(freeAmount);\n', '        }\n', '\n', '        fees.decreaseThreshold(_value);\n', '    }\n', '\n', '}\n', '\n', 'contract Deposit is Multivest {\n', '\n', '    address public etherHolder;\n', '\n', '    function Deposit(\n', '        address _etherHolder\n', '    )\n', '        public Multivest(msg.sender)\n', '    {\n', '        require(_etherHolder != address(0));\n', '        etherHolder = _etherHolder;\n', '    }\n', '\n', '    function setEtherHolder(address _etherHolder) public onlyOwner {\n', '        require(_etherHolder != address(0));\n', '        etherHolder = _etherHolder;\n', '    }\n', '\n', '    function deposit(\n', '        address _address,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n', '        require(_address == msg.sender);\n', '        Contribution(msg.sender, msg.value);\n', '        etherHolder.transfer(msg.value);\n', '    }\n', '\n', '    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '\n', '        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n', '    }\n', '\n', '    function buy(address _address, uint256 _amount, uint256 _value) internal returns (bool) {\n', '        _address = _address;\n', '        _amount = _amount;\n', '        _value = _value;\n', '        return true;\n', '    }\n', '\n', '}']