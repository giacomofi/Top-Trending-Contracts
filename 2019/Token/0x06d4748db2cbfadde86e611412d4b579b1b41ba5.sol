['pragma solidity ^0.5.10;\n', '\n', '// GOA TOKEN \n', '\n', '/* \n', '\n', 'Deflationary token to be used in the Eggoa game (name TBD) to be released on Ethereum by mid-2020.\n', '\n', 'When the Eggoa game releases, token holders will be able to mint unique NFTs by destroying Goa tokens.\n', '(1 GOA = 1 NFT)\n', 'Additionally, Goa tokens may be used as voting rights, as well as other game advantages.\n', '\n', 'Goa tokens can be bought directly from the contract, for a rising price proportional to the number of tokens sold.\n', 'Each Goa token costs +0.0000002 ETH.\n', 'Token #10000 will cost 0.002 ETH, token #30000 will cost 0.006 ETH, token #180000 will cost 0.036 ETH, and so on.\n', 'Goa tokens can only be bought as integers. Secondary markets between owners can take care of decimal trades.\n', '\n', '----------------------------------------------------------------------------\n', 'Goa Token URL = https://eggforce.github.io/goatoken (subject to change)\n', 'Discord link = https://discord.gg/JU8P4Ru (probably permanent)\n', 'Tweet @ me and take credit for being the one guy who reads smart contracts = @eskaroy\n', '----------------------------------------------------------------------------\n', '\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address payable public owner;\n', '    address payable public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        \n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Standard ERC20 Token contract, with extra functions for minting new tokens\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract GoaToken is ERC20Interface, Owned {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string constant public symbol       = "GOA";\n', '    string constant public name         = "Goa Token";\n', '    uint constant public decimals       = 18;\n', '    uint constant public MAX_SUPPLY     = 1000000 * 10 ** decimals;\n', '    uint constant public ETH_PER_TOKEN  = 0.0000002 ether;\n', '    \n', '    uint _totalSupply; //initially set to 0, tokens are minted through buying from the contract\n', '\n', '    mapping(address => uint) balances; // token balance\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    event Minted(address indexed newHolder, uint eth, uint tokens);\n', '\n', '    //-- constructor\n', '    constructor() public {\n', '    }\n', '\n', '    //-- totalSupply\n', '    // Return current total supply (which can change but never exceed 1M)\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    //-- balanceOf\n', '    // Get token balance for account "tokenOwner"\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    //-- transfer\n', '    // Transfer "tokens" from token owner\'s account to "to" account\n', "    // Owner's account must have sufficient balance to transfer\n", '    // 0 value transfers are allowed\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    //-- approve\n', '    // Token owner can approve for "spender" to transferFrom(...) "tokens" tokens\n', "    // from the token owner's account\n", '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    //-- transferFrom\n', '    // Transfer "tokens" tokens from the "from" account to the "to" account\n', '    // From account must have sufficient balance to transfer\n', '    // Spender must have sufficient allowance to transfer\n', '    // 0 value transfers are allowed\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    //-- allowance\n', '    // Return the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    //-- approveAndCall\n', '    // Token owner can approve for "spender" to transferFrom(...) "tokens" tokens\n', '    // from the token owner\'s account. The "spender" contract function\n', '    // "receiveApproval(...)"" is then executed\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '\n', '        return true;\n', '    }\n', '\n', '    //-- mint\n', '    // Transfer ETH to receive a given amount of tokens in exchange\n', '    // Token amount must be integers, no decimals\n', '    // Current token cost is determined through computeCost, frontend sets the proper ETH amount to send\n', '\n', '    function mint(uint fullToken) public payable {\n', '        uint _token = fullToken.mul(10 ** decimals);\n', '        uint _newSupply = _totalSupply.add(_token);\n', '        require(_newSupply <= MAX_SUPPLY, "supply cannot go over 1M");\n', '\n', '        uint _ethCost = computeCost(fullToken);\n', '        require(msg.value == _ethCost, "wrong ETH amount for tokens");\n', '        \n', '        owner.transfer(msg.value);\n', '        _totalSupply = _newSupply;\n', '        balances[msg.sender] = balances[msg.sender].add(_token);\n', '        \n', '        emit Minted(msg.sender, msg.value, fullToken);\n', '    }\n', '    \n', '    //-- computeSum\n', '    // Return (n * n+1) / 2 sum starting at a and ending at b, excluding a\n', '    \n', '    function computeSum(uint256 a, uint256 b) public pure returns(uint256) {\n', '        uint256 _sumA = a.mul(a.add(1)).div(2);\n', '        uint256 _sumB = b.mul(b.add(1)).div(2);\n', '        return _sumB.sub(_sumA);\n', '    }\n', '    \n', '    //-- computeCost\n', '    // Return ETH cost to buy given amount of full tokens (no decimals)\n', '    \n', '    function computeCost(uint256 fullToken) public view returns(uint256) {\n', '        uint256 _intSupply = _totalSupply.div(10 ** decimals);\n', '        uint256 _current = fullToken.add(_intSupply);\n', '        uint256 _sum = computeSum(_intSupply, _current);\n', '        return ETH_PER_TOKEN.mul(_sum);\n', '    }\n', '        \n', '    //-- transferAnyERC20Token\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']