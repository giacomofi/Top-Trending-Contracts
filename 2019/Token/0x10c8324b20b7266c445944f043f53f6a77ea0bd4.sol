['pragma solidity 0.4.18;\n', '\n', '// File: contracts/util/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', 'contract ERC20 {\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/token/MEGAWAVE.sol\n', '\n', 'contract MEGAWAVE is ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    address public admin;\n', '    string public constant name = "MEGAWAVE";\n', '    string public constant symbol = "MGWV";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '\n', '    mapping(address => bool) internal blacklist;\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // Disables/enables token transfers, for migration to platform mainnet\n', '    // true = Can not transfers\n', '    // false = Can transfer\n', '    bool public checkTokenLock = false;\n', '\n', '    // Allows execution by the ico only\n', '    modifier adminOnly {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier transferable {\n', '        require(msg.sender == admin || !checkTokenLock);\n', '        _;\n', '    }\n', '\n', '    function MEGAWAVE(uint256 _initialSupply) public {\n', '        balances[msg.sender] = _initialSupply.mul(1e18);\n', '        totalSupply = _initialSupply.mul(1e18);\n', '        admin = msg.sender;\n', '    }\n', '\n', '    \n', '    // _block\n', '    // True : Can not Transfer\n', '    // false : Can Transfer\n', '    function blockTransfer(bool _block) external adminOnly {\n', '        checkTokenLock = _block;\n', '    }\n', '\n', '\n', '    // _inBlackList\n', '    // True : Can not Transfer\n', '    // false : Can Transfer\n', '    function updateBlackList(address _addr, bool _inBlackList) external adminOnly{\n', '        blacklist[_addr] = _inBlackList;\n', '    }\n', '    \n', '\n', '    function isInBlackList(address _addr) public view returns(bool){\n', '        return blacklist[_addr];\n', '    }\n', '    \n', '    function balanceOf(address _who) public view returns(uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public transferable returns(bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_amount > 0);\n', '        require(_amount <= balances[msg.sender]);\n', '        require(blacklist[msg.sender] == false);\n', '        require(blacklist[_to] == false);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) public transferable returns(bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        require(blacklist[_from] == false);\n', '        require(blacklist[_to] == false);\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns(bool) {\n', "        // reduce spender's allowance to 0 then set desired value after to avoid race condition\n", '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _amount) public transferable returns (bool) {\n', '        require(_amount > 0);\n', '        require(balances[msg.sender] >= _amount);\n', '        \n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        Burn(msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _amount)public transferable returns (bool) {\n', '        require(_amount > 0);\n', '        require(balances[_from] >= _amount);\n', '        require(allowed[_from][msg.sender]  >= _amount);\n', '        \n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Burn(_from, _amount);\n', '        return true;\n', '    }\n', '\n', '}']