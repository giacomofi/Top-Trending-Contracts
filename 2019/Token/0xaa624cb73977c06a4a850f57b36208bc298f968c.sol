['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '      \t\treturn 0;\n', '    \t}\n', '\n', '    \tc = a * b;\n', '    \tassert(c / a == b);\n', '    \treturn c;\n', '  \t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \treturn a / b;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    \tc = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '\t}\n', '\t\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal _owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "you are not the owner!");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "cannot transfer ownership to ZERO address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', '    TokenLogic\n', '*/\n', 'interface ITokenLogic {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address from, address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value, address owner) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value, address spender) external returns (bool);\n', '    function increaseAllowance(address spender, uint256 addedValue, address owner) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external returns (bool);\n', '}\n', '\n', '/*\n', '    TokenFront\n', '*/\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenFront is Ownable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    ITokenLogic private _tokenLogic;\n', '    \n', '    constructor(string name, string symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    \n', '    // detail info\n', '    function name() external view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() external view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    // tokenLogic\n', '    event ChangeTokenLogic(address newTokenLogic); \n', '    \n', '    function tokenLogic() external view returns (address) {\n', '        return _tokenLogic;\n', '    }\n', '    \n', '    function setTokenLogic(ITokenLogic newTokenLogic) external onlyOwner {\n', '        _tokenLogic = newTokenLogic;\n', '        emit ChangeTokenLogic(newTokenLogic);\n', '    }\n', '    \n', '    // ERC20\n', '    function totalSupply() external view returns (uint256) {\n', '        return _tokenLogic.totalSupply();\n', '    }\n', '    \n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return _tokenLogic.balanceOf(account);\n', '    }\n', '    \n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return _tokenLogic.allowance(owner, spender);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.transfer(msg.sender, to, value));\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.transferFrom(from, to, value, msg.sender));\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.approve(spender, value, msg.sender));\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '        require(_tokenLogic.increaseAllowance(spender, addedValue, msg.sender));\n', '        emit Approval(msg.sender, spender, _tokenLogic.allowance(msg.sender, spender));\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '        require(_tokenLogic.decreaseAllowance(spender, subtractedValue, msg.sender));\n', '        emit Approval(msg.sender, spender, _tokenLogic.allowance(msg.sender, spender));\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '      \t\treturn 0;\n', '    \t}\n', '\n', '    \tc = a * b;\n', '    \tassert(c / a == b);\n', '    \treturn c;\n', '  \t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \treturn a / b;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    \tc = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '\t}\n', '\t\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal _owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "you are not the owner!");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "cannot transfer ownership to ZERO address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', '    TokenLogic\n', '*/\n', 'interface ITokenLogic {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address from, address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value, address owner) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value, address spender) external returns (bool);\n', '    function increaseAllowance(address spender, uint256 addedValue, address owner) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external returns (bool);\n', '}\n', '\n', '/*\n', '    TokenFront\n', '*/\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenFront is Ownable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    ITokenLogic private _tokenLogic;\n', '    \n', '    constructor(string name, string symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    \n', '    // detail info\n', '    function name() external view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() external view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    // tokenLogic\n', '    event ChangeTokenLogic(address newTokenLogic); \n', '    \n', '    function tokenLogic() external view returns (address) {\n', '        return _tokenLogic;\n', '    }\n', '    \n', '    function setTokenLogic(ITokenLogic newTokenLogic) external onlyOwner {\n', '        _tokenLogic = newTokenLogic;\n', '        emit ChangeTokenLogic(newTokenLogic);\n', '    }\n', '    \n', '    // ERC20\n', '    function totalSupply() external view returns (uint256) {\n', '        return _tokenLogic.totalSupply();\n', '    }\n', '    \n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return _tokenLogic.balanceOf(account);\n', '    }\n', '    \n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return _tokenLogic.allowance(owner, spender);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.transfer(msg.sender, to, value));\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.transferFrom(from, to, value, msg.sender));\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) external returns (bool) {\n', '        require(_tokenLogic.approve(spender, value, msg.sender));\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '        require(_tokenLogic.increaseAllowance(spender, addedValue, msg.sender));\n', '        emit Approval(msg.sender, spender, _tokenLogic.allowance(msg.sender, spender));\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '        require(_tokenLogic.decreaseAllowance(spender, subtractedValue, msg.sender));\n', '        emit Approval(msg.sender, spender, _tokenLogic.allowance(msg.sender, spender));\n', '        return true;\n', '    }\n', '}']
