['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  // events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address addr) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  // events\n', '  event Approval(address indexed owner, address indexed agent, uint256 value);\n', '\n', '  // public functions\n', '  function allowance(address owner, address agent) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address agent, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', 'library SafeERC20 {\n', '  \n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  // public variables\n', '  address public owner;\n', '\n', '  // internal variables\n', '\n', '  // events\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // public functions\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // internal functions\n', '}\n', '\n', '\n', 'contract TokenBatchTransfer is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '  using SafeMath for uint256;\n', '\n', '  // public variables\n', '  ERC20Basic public token;\n', '  // events\n', '  // public functions\n', '  constructor (ERC20Basic tokenAddr) public {\n', '    token = ERC20Basic(tokenAddr);\n', '  }\n', '\n', '  function changeToken(ERC20Basic tokenAddr) public onlyOwner {\n', '    token = ERC20Basic(tokenAddr);\n', '  }\n', '\n', '  function balanceOfToken() public view returns (uint256 amount) {\n', '    return token.balanceOf(address(this));\n', '  }\n', '\n', '  function safeTransfer(address funder, uint256 amount) public onlyOwner {\n', '    token.safeTransfer(funder, amount);\n', '  }\n', '\n', '  function batchTransfer(address[] funders, uint256[] amounts) public onlyOwner {\n', '    require(funders.length > 0 && funders.length == amounts.length);\n', '\n', '    uint256 total = token.balanceOf(this);\n', '    require(total > 0);\n', '\n', '    uint256 fundersTotal = 0;\n', '    for (uint i = 0; i < amounts.length; i++) {\n', '      fundersTotal = fundersTotal.add(amounts[i]);\n', '    }\n', '    require(total >= fundersTotal);\n', '\n', '    for (uint j = 0; j < funders.length; j++) {\n', '      token.safeTransfer(funders[j], amounts[j]);\n', '    }\n', '  }\n', '}']