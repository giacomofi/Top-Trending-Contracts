['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * \n', ' * World War Goo - Competitive Idle Game\n', ' * \n', ' * https://ethergoo.io\n', ' * \n', ' */\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external constant returns (uint);\n', '    function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract PremiumUnit {\n', '    function mintUnit(address player, uint256 amount) external;\n', '    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external;\n', '    uint256 public unitId;\n', '    uint256 public unitProductionSeconds;\n', '}\n', '\n', 'contract MechanicKittyUnit is ERC20, PremiumUnit {\n', '    using SafeMath for uint;\n', '    \n', '    string public constant name = "WWG Premium Unit - MECHANIC";\n', '    string public constant symbol = "MECHANIC";\n', '    uint256 public constant unitId = 3;\n', '    uint256 public unitProductionSeconds = 43200; // Num seconds for factory to produce a single unit\n', '    uint8 public constant decimals = 0;\n', '    \n', '    Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e);\n', '    address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) lastEquipTime;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    function totalSupply() external view returns (uint) {\n', '        return totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) external view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address to, uint tokens) external returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) external returns (bool) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) external returns (bool) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) external view returns (uint256) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function mintUnit(address player, uint256 amount) external {\n', '        require(msg.sender == factories);\n', '        balances[player] += amount;\n', '        totalSupply += amount;\n', '        emit Transfer(address(0), player, amount);\n', '    }\n', '    \n', '    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external {\n', '        require(msg.sender == player || msg.sender == factories);\n', '        units.mintUnitExternal(unitId, amount, player, chosenPosition);\n', '        \n', '        // Burn token\n', '        balances[player] = balances[player].sub(amount);\n', '        //lastEquipTime[player] = now; // Only for army premium units\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(player, address(0), amount);\n', '    }\n', '    \n', '    function unequipUnit(uint80 amount) external {\n', '        (uint80 unitsOwned,) = units.unitsOwned(msg.sender, unitId);\n', '        require(unitsOwned >= amount);\n', '        //require(lastEquipTime[msg.sender] + 24 hours < now); // To reduce unequip abuse (only for army premium units)\n', '        units.deleteUnitExternal(amount, unitId, msg.sender);\n', '        \n', '        // Mint token\n', '        balances[msg.sender] += amount;\n', '        totalSupply += amount;\n', '        emit Transfer(address(0), msg.sender, amount);\n', '    }\n', '    \n', '}\n', '\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\n', '}\n', '\n', 'contract Units {\n', '    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\n', '    function mintUnitExternal(uint256 unit, uint80 amount, address player, uint8 chosenPosition) external;\n', '    function deleteUnitExternal(uint80 amount, uint256 unit, address player) external;\n', '    \n', '    struct UnitsOwned {\n', '        uint80 units;\n', '        uint8 factoryBuiltFlag;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']