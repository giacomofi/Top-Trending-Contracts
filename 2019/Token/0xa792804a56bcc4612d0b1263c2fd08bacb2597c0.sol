['pragma solidity ^0.4.23;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  address master;\n', '\n', '  bool public paused;\n', '\n', '\n', '  modifier isMaster {\n', '      require(msg.sender == master);\n', '      _;\n', '  }\n', '\n', '  modifier isPause {\n', '   require(paused == true);\n', '   _;\n', ' }\n', '\n', '  modifier isNotPause {\n', '   require(paused == false);\n', '   _;\n', '  }\n', '\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public isNotPause returns (bool) {\n', '    require(_spender != address(0));\n', '    require(balanceOf(msg.sender) >= _value);\n', '    require (balanceOf(_spender) + _value > balanceOf(_spender));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public isNotPause\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    require(balanceOf(msg.sender) >= _addedValue);\n', '    require (allowed[msg.sender][_spender] + _addedValue > allowed[msg.sender][_spender]);\n', '    allowed[msg.sender][_spender] = (\n', '    allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public isNotPause\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract NToken is StandardToken {\n', '\n', '  string public constant name = "NToken";\n', '  string public constant symbol = "NT";\n', '  uint8 public constant decimals = 8;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 660000000 * (10 ** uint256(decimals));\n', '  address coinbase;\n', '\n', '  address private constant project_foundation_address     = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\n', '  uint8   private constant project_foundation_percent     = 10;\n', '  uint256 private constant project_foundation_starttime   = 1558627200;\n', '  uint256 private constant project_foundation_interval    = 94608000;\n', '  uint256 private constant project_foundation_periods     = 1;\n', '\n', '\n', '\n', '  address private constant community_reward_address       = 0x9F9bed103cCa9352C7a69A05f7b789a9fC32f5C7;\n', '  uint8   private constant community_reward_percent       = 90;\n', '\n', '\n', '\n', '\n', '\n', '  struct Vesting {\n', '    uint256 startTime;\n', '    uint256 initReleaseAmount;\n', '    uint256 amount;\n', '    uint256 interval;\n', '    uint256 periods;\n', '    uint256 withdrawed;\n', '  }\n', '\n', '  mapping (address => Vesting[]) vestings;\n', '\n', '  event AssetLock(address indexed to,uint256 startTime,uint256 initReleaseAmount,uint256 amount,uint256 interval,uint256 periods);\n', '  /**\n', '  * @dev Constructor that gives msg.sender all of existing tokens.\n', '  */\n', '  constructor(address _master) public {\n', '   require(_master != address(0));\n', '   totalSupply_ = INITIAL_SUPPLY;\n', '   master = _master;\n', '   paused = false;\n', '   coinbase = _master;\n', '   balances[coinbase] = INITIAL_SUPPLY;\n', '\n', '  \n', '   uint256 balance_project = INITIAL_SUPPLY * project_foundation_percent / 100;\n', '   assetLock(project_foundation_address,project_foundation_starttime,0,balance_project,project_foundation_interval,project_foundation_periods);\n', '\n', '   uint256 balance_community_reward = INITIAL_SUPPLY * community_reward_percent / 100;\n', '   balances[community_reward_address] = balance_community_reward;\n', '   balances[coinbase] =  balances[coinbase].sub(balance_community_reward);\n', '\n', '\n', ' }\n', '\n', '\n', '  function assetLock(address _to,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) internal {\n', '      require(balances[coinbase] >= _amount);\n', '      require(_initReleaseAmount <= _amount);\n', '      vestings[_to].push(Vesting(_startTime, _initReleaseAmount, _amount, _interval, _periods, 0));\n', '      balances[coinbase] = balances[coinbase].sub(_amount);\n', '      emit AssetLock(_to,_startTime,_initReleaseAmount,_amount,_interval,_periods);\n', ' }\n', '\n', '  function batchTransfer(address[] _to, uint256[] _amount) public isNotPause returns (bool) {\n', '     for (uint i = 0; i < _to.length; i++) {\n', '       getVesting(msg.sender);\n', '       transfer(_to[i] , _amount[i]);\n', '     }\n', '     return true;\n', '   }\n', '\n', '   /**\n', '   * @dev Transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '   function transfer(address _to, uint256 _value) public isNotPause returns (bool) {\n', '     require(_to != address(0));\n', '     uint256 remain = availableBalance(msg.sender);\n', '     require(_value <= remain);\n', '     getVesting(msg.sender);\n', '     balances[msg.sender] = balances[msg.sender].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     emit Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '\n', '   /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '   function transferFrom(\n', '     address _from,\n', '     address _to,\n', '     uint256 _value\n', '   )\n', '     public isNotPause\n', '     returns (bool)\n', '   {\n', '     require(_to != address(0));\n', '     require(_from != address(0));\n', '     require(_value <= allowed[_from][msg.sender]);\n', '     uint256 remain = availableBalance(_from);\n', '     require(_value <= remain);\n', '     getVesting(_from);\n', '     balances[_from] = balances[_from].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '     emit Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '\n', '   function setPause() public isMaster isNotPause{\n', '     paused = true;\n', '   }\n', '\n', '   function setResume() public isMaster isPause{\n', '     paused = false;\n', '   }\n', '\n', '   function pauseStatus() public view isMaster returns (bool){\n', '     return paused;\n', '   }\n', '\n', '\n', '   function vestingBalance(address _owner) internal view returns (uint256) {\n', '     uint256 sum = 0;\n', '      for(uint i = 0 ;i < vestings[_owner].length;i++){\n', '        sum = sum.add(vestings[_owner][i].amount.sub(vestings[_owner][i].withdrawed));\n', '      }\n', '      return sum;\n', '   }\n', '\n', '  /*\n', '  Current available balance\n', '  */\n', '   function availableBalance(address _owner) public view returns (uint256) {\n', '     uint256 sum = 0;\n', '      for(uint i = 0 ;i < vestings[_owner].length;i++){\n', '        Vesting memory vs = vestings[_owner][i];\n', '        uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\n', '        uint256 keep = release.sub(vs.withdrawed);\n', '        if(keep >= 0){\n', '          sum = sum.add(keep);\n', '        }\n', '      }\n', '      return sum.add(balances[_owner]);\n', '   }\n', '\n', '   /*\n', '   Get all the assets of the user\n', '   */\n', '   function allBalance(address _owner)public view returns (uint256){\n', '     uint256 allbalance = vestingBalance(_owner);\n', '     return allbalance.add(balances[_owner]);\n', '   }\n', '    /*\n', '    Calculate the current time release\n', '    */\n', '   function vestingRelease(uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public view returns (uint256) {\n', '    return vestingReleaseFunc(now,_startTime,_initReleaseAmount,_amount,_interval,_periods);\n', '   }\n', '\n', '   /*\n', '   Calculate the current time release\n', '   */\n', '  function vestingReleaseFunc(uint256 _endTime,uint256 _startTime,uint256 _initReleaseAmount,uint256 _amount,uint256 _interval,uint256 _periods) public pure  returns (uint256) {\n', '    if (_endTime < _startTime) {\n', '      return 0;\n', '    }\n', '    uint256 last = _endTime.sub(_startTime);\n', '    uint256 allTime =  _periods.mul(_interval);\n', '    if (last >= allTime) {\n', '      return _amount;\n', '    }\n', '    uint256 eachPeriodAmount = _amount.sub(_initReleaseAmount).div(_periods);\n', '    uint256 lastTime = last.div(_interval);\n', '    uint256 vestingAmount = eachPeriodAmount.mul(lastTime).add(_initReleaseAmount);\n', '    return vestingAmount;\n', '  }\n', '\n', '\n', '\n', '   /*\n', '   Get vesting funds\n', '   */\n', '   function getVesting(address _to) internal {\n', '     uint256 sum = 0;\n', '     for(uint i=0;i< vestings[_to].length;i++){\n', '       if(vestings[_to][i].amount == vestings[_to][i].withdrawed){\n', '         continue;\n', '       }else{\n', '         Vesting  memory vs = vestings[_to][i];\n', '         uint256 release = vestingRelease(vs.startTime,vs.initReleaseAmount, vs.amount, vs.interval, vs.periods);\n', '         uint256 keep = release.sub(vs.withdrawed);\n', '         if(keep >= 0){\n', '           vestings[_to][i].withdrawed = release;\n', '           sum = sum.add(keep);\n', '         }\n', '       }\n', '     }\n', '     if(sum > 0 ){\n', '       balances[_to] = balances[_to].add(sum);\n', '     }\n', '   }\n', '\n', '   /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '   function balanceOf(address _owner) public view returns (uint256) {\n', '     return availableBalance(_owner);\n', '   }\n', '}']