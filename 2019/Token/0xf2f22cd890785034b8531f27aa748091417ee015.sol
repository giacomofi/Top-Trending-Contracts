['pragma solidity 0.5.8;\n', '\n', '/**\n', ' * @title SafeMath \n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplie two unsigned integers, revert on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, revert on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Add two unsigned integers, revert on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool); \n', '\n', '    function approve(address spender, uint256 value) external returns (bool); \n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool); \n', '\n', '    function totalSupply() external view returns (uint256); \n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256); \n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value); \n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value); \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address internal _owner; \n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Revert if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "The caller must be owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner); \n', '    }\n', '\n', '    /**\n', '     * @dev Transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Cannot transfer control of the contract to the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner); \n', '        _owner = newOwner; \n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is IERC20 {\n', '    using SafeMath for uint256; \n', '    \n', '    mapping (address => uint256) internal _balances; \n', '    mapping (address => mapping (address => uint256)) internal _allowed; \n', '    \n', '    uint256 internal _totalSupply; \n', '    \n', '    /**\n', '     * @dev Total number of tokens in existence.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply; \n', '    }\n', '\n', '    /**\n', '     * @dev Get the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value); \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from The address which you want to send tokens from.\n', '     * @param to The address which you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value); \n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value)); \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue)); \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens for a specified address.\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0), "Cannot transfer to the zero address"); \n', '        _balances[from] = _balances[from].sub(value); \n', '        _balances[to] = _balances[to].add(value); \n', '        emit Transfer(from, to, value); \n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0), "Cannot approve to the zero address"); \n', '        require(owner != address(0), "Setter cannot be the zero address"); \n', '\t    _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value); \n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause(); \n', '    event Unpause(); \n', '    \n', '    bool public paused = false; \n', '    \n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Only when the contract is not paused"); \n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused, "Only when the contract is paused"); \n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner to pause, trigger stopped state.\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true; \n', '        emit Pause(); \n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner to unpause, return to normal state.\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false; \n', '        emit Unpause(); \n', '    }\n', '}\n', '\n', '/**\n', ' * @title PausableToken\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract PausableToken is StandardToken, Pausable {\n', '    \n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value); \n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value); \n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value); \n', '    }\n', '    \n', '    function increaseAllowance(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(_spender, _addedValue); \n', '    }\n', '    \n', '    function decreaseAllowance(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(_spender, _subtractedValue); \n', '    }\n', '}\n', '\n', '/**\n', ' * @title BurnableToken\n', ' * @dev Implement the function of ERC20 token burning.\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        _approve(_from, msg.sender, _allowed[_from][msg.sender].sub(_value));\n', '        _burn(_from, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= _balances[_who], "Not enough token balance");\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        _balances[_who] = _balances[_who].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract VFDToken is BurnableToken, PausableToken {\n', '    string public constant name = "Micro Payment Shield";  \n', '    string public constant symbol = "VFD";  \n', '    uint8 public constant decimals = 18;\n', '    uint256 internal constant INIT_TOTALSUPPLY = 65000000; \n', '    \n', '    /**\n', '     * @dev Constructor, initialize the basic information of contract.\n', '     */\n', '    constructor() public {\n', '        _owner = 0x2CcaFDD16aA603Bbc8026711dd2E838616c010c3;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '        _totalSupply = INIT_TOTALSUPPLY * 10 ** uint256(decimals);\n', '        _balances[_owner] = _totalSupply;\n', '        emit Transfer(address(0), _owner, _totalSupply);\n', '    }\n', '}']