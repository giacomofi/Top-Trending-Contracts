['/**\n', ' * Source Code first verified at https://etherscan.io on Wednesday, March 13, 2019\n', ' (UTC) */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract OHiWE is ERC20 { \n', '    using SafeMath for uint256;\n', '    //--- Token configurations ----// \n', '    string private constant _name = "OHiWE";\n', '    string private constant _symbol = "OHC";\n', '    uint8 private constant _decimals = 18;\n', '    uint256 private constant _maxCap = 3300000000 ether;\n', '    \n', '    //--- Token allocations -------//\n', '    uint256 private _totalsupply;\n', '\n', '    //--- Address -----------------//\n', '    address private _owner;\n', '    address payable private _ethFundMain;\n', '    \n', '    //--- Variables ---------------//\n', '    bool private _lockToken = false;\n', '    \n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping(address => uint256)) private allowed;\n', '    mapping(address => bool) private locked;\n', '    \n', '    event Mint(address indexed from, address indexed to, uint256 amount);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event ChangeReceiveWallet(address indexed newAddress);\n', '    event ChangeOwnerShip(address indexed newOwner);\n', '    event ChangeLockStatusFrom(address indexed investor, bool locked);\n', '    event ChangeTokenLockStatus(bool locked);\n', '    event ChangeAllowICOStatus(bool allow);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Only owner is allowed");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyUnlockToken() {\n', '        require(!_lockToken, "Token locked");\n', '        _;\n', '    }\n', '\n', '    constructor() public\n', '    {\n', '        _owner = msg.sender;\n', '    }\n', '    \n', '    function name() public pure returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function maxCap() public pure returns (uint256) {\n', '        return _maxCap;\n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function ethFundMain() public view returns (address) {\n', '        return _ethFundMain;\n', '    }\n', '   \n', '    function lockToken() public view returns (bool) {\n', '        return _lockToken;\n', '    }\n', '   \n', '    function lockStatusOf(address investor) public view returns (bool) {\n', '        return locked[investor];\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalsupply;\n', '    }\n', '    \n', '    function balanceOf(address investor) public view returns (uint256) {\n', '        return balances[investor];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount) public onlyUnlockToken returns (bool)  {\n', '        require( _spender != address(0), "Address can not be 0x0");\n', '        require(balances[msg.sender] > _amount, "Balance does not have enough tokens");\n', '        require(!locked[msg.sender], "Sender address is locked");\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function allowance(address _from, address _spender) public view returns (uint256) {\n', '        return allowed[_from][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public onlyUnlockToken returns (bool) {\n', '        require( _to != address(0), "Receiver can not be 0x0");\n', '        require(balances[msg.sender] > _amount, "Balance does not have enough tokens");\n', '        require(!locked[msg.sender], "Sender address is locked");\n', '        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom( address _from, address _to, uint256 _amount ) public onlyUnlockToken returns (bool)  {\n', '        require( _to != address(0), "Receiver can not be 0x0");\n', '        require(balances[_from] > _amount, "Source&#39;s balance is not enough");\n', '        require(allowed[_from][msg.sender] > _amount, "Allowance is not enough");\n', '        require(!locked[_from], "From address is locked");\n', '        balances[_from] = (balances[_from]).sub(_amount);\n', '        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public onlyOwner returns (bool) {\n', '        require(balances[msg.sender] > _value, "Balance does not have enough tokens");   \n', '        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \n', '        _totalsupply = _totalsupply.sub(_value);                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stopTransferToken() external onlyOwner {\n', '        _lockToken = true;\n', '        emit ChangeTokenLockStatus(true);\n', '    }\n', '\n', '    function startTransferToken() external onlyOwner {\n', '        _lockToken = false;\n', '        emit ChangeTokenLockStatus(false);\n', '    }\n', '\n', '    function () external payable {\n', '\n', '    }\n', '\n', '    function manualMint(address receiver, uint256 _value) public onlyOwner{\n', '        mint(_owner, receiver, _value);\n', '    }\n', '\n', '    function mint(address from, address receiver, uint256 value) internal {\n', '        require(receiver != address(0), "Address can not be 0x0");\n', '        require(value > 0, "Value should larger than 0");\n', '        balances[receiver] = balances[receiver].add(value);\n', '        _totalsupply = _totalsupply.add(value);\n', '        require(_totalsupply <= _maxCap, "CrowdSale hit max cap");\n', '        emit Mint(from, receiver, value);\n', '        emit Transfer(address(0), receiver, value);\n', '    }\n', ' \n', '\tfunction assignOwnership(address newOwner) external onlyOwner {\n', '\t    require(newOwner != address(0), "Address can not be 0x0");\n', '\t    _owner = newOwner;\n', '\t    emit ChangeOwnerShip(newOwner);\n', '\t}\n', '\n', '    function changeReceiveWallet(address payable newAddress) external onlyOwner {\n', '        require(newAddress != address(0), "Address can not be 0x0");\n', '        _ethFundMain = newAddress;\n', '        emit ChangeReceiveWallet(newAddress);\n', '    }\n', '\n', '    function forwardFunds() external onlyOwner {\n', '        require(_ethFundMain != address(0));\n', '        _ethFundMain.transfer(address(this).balance);\n', '    }\n', '\n', '    function haltTokenTransferFromAddress(address investor) external onlyOwner {\n', '        locked[investor] = true;\n', '        emit ChangeLockStatusFrom(investor, true);\n', '    }\n', '\n', '    function resumeTokenTransferFromAddress(address investor) external onlyOwner {\n', '        locked[investor] = false;\n', '        emit ChangeLockStatusFrom(investor, false);\n', '    }\n', '}']