['/**\n', ' *Submitted for verification at Etherscan.io on 2019-05-08\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20BasicInterface {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    uint8 public decimals;\n', '}\n', '\n', 'contract Bussiness is Ownable {\n', '    address payable public ceoAddress = address(0x2BebE5B81844151212DE3c7ea2e2C07616f7801B);\n', '    address public technical = address(0x2076A228E6eB670fd1C604DE574d555476520DB7);\n', '    ERC20BasicInterface public nagemonToken = ERC20BasicInterface(0xF63C5639786E7ce7C35B3D2b97E74bf7af63eEEA);\n', '    uint256 public NagemonExchange = 297;\n', '    constructor() public {}\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the ceo address.\n', '     */\n', '    modifier onlyCeoAddress() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '    modifier onlyTechnicalAddress() {\n', '        require(msg.sender == technical);\n', '        _;\n', '    }\n', '    event received(address _from, uint256 _amount);\n', '    event receivedErc20(address _from, uint256 _amount);\n', '    struct ticket {\n', '        address owner;\n', '        uint256 amount;\n', '    }\n', '    mapping(address => ticket) public tickets;\n', '    // @dev fallback function to exchange the ether for Monster fossil\n', '    function buyMonsterFossilByEth() public payable {\n', '        ceoAddress.transfer(msg.value);\n', '        // calc token amount\n', '        uint256 amount = getTokenAmount(msg.value);\n', '        tickets[msg.sender] = ticket(msg.sender, amount);\n', '        emit received(msg.sender, msg.value);\n', '    }\n', '    function buyMonsterFossilByNagemon(uint256 _amount) public {\n', '        require(nagemonToken.transferFrom(msg.sender, ceoAddress, _amount));\n', '        tickets[msg.sender] = ticket(msg.sender, _amount);\n', '        emit receivedErc20(msg.sender, _amount);\n', '    }\n', '    function resetTiket(address _ticketOwner) public onlyTechnicalAddress returns (bool) {\n', '        tickets[_ticketOwner] = ticket(address(0), 0);\n', '        return true;\n', '    }\n', '    // @dev return the amount of token that msg.sender can receive based on the amount of ether that msg.sender sent\n', '    function getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokenDecimal = 18 - nagemonToken.decimals();\n', '        return _weiAmount * NagemonExchange / (10 ** tokenDecimal);\n', '    }\n', '    \n', '    function config(uint256 _NagemonExchange, address _technical) public onlyOwner returns (uint256, address){\n', '        NagemonExchange = _NagemonExchange;\n', '        technical = _technical;\n', '        return (NagemonExchange, technical);\n', '    }\n', '    function changeCeo(address payable _address) public onlyCeoAddress {\n', '        require(_address != address(0));\n', '        ceoAddress = _address;\n', '\n', '    }\n', '}']