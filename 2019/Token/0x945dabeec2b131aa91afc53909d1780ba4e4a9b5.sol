['pragma solidity ^0.5.9;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnerShip(address newOwer) public onlyOwner {\n', '        owner = newOwer;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n', '}\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '\tuint256 public totalSupply;\n', '\t\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '    /*\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor (uint256 _initialSupply, string memory _tokenName, string memory _tokenSymbol) public {\n', '        totalSupply = _initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                \t // Give the creator all initial tokens\n', '        name = _tokenName;                                   \t // Set the name for display purposes\n', '        symbol = _tokenSymbol;                               \t // Set the symbol for display purposes\n', '    }\n', '\t\n', '    /*\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0x0));\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\t\n', '    /*\n', '     * Transfer tokens\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /*\n', '     * Transfer tokens from other address\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Set allowance for other address and notify\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 {\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\t\n', '\t// Whether to freeze the list of accounts\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '\t// This generates a public event on the blockchain that will notify clients\n', '    event FrozenFunds(address target, bool frozen);\n', '\t\n', '    /*\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     * @param initialSupply\n', '     * @param tokenName\n', '     * @param tokenSymbol\n', '     */\n', '\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) TokenERC20(initialSupply, tokenName, tokenSymbol) payable public {}\n', '\n', '   \t/*\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\t\n', '   \t/*\n', '     * @notice Create `mintedAmount` tokens and send it to `target`\n', '     * @param target Address to receive the tokens\n', '     * @param mintedAmount the amount of tokens it will receive\n', '     */\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(address(0), address(this), mintedAmount);\n', '        emit Transfer(address(this), target, mintedAmount);\n', '    }\n', '\t\n', '    /*\n', '     * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '     * @param target Address to be frozen\n', '     * @param freeze either to freeze it or not\n', '     */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /*\n', '     * @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '     * @param newSellPrice Price the users can sell to the contract\n', '     * @param newBuyPrice Price users can buy from the contract\n', '     */\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\t\n', '    /*\n', '     * @notice Buy tokens from contract by sending ether\n', '     */\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;            // calculates the amount\n', '        _transfer(address(this), msg.sender, amount);  // makes the transfers\n', '    }\n', '\t\n', '    /*\n', '     * @notice Sell `amount` tokens to contract\n', '     * @param amount amount of tokens to be sold\n', '     */\n', '    function sell(uint256 amount) public {\n', '        require(address(this).balance >= amount * sellPrice);  // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, address(this), amount);          // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);          \t   // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']