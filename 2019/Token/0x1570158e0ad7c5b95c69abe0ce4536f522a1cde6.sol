['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) { \n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '  \n', 'contract owned {\n', '\n', '    address public manager;\n', '\n', '    constructor() public{\n', '        manager = msg.sender;\n', '    }\n', ' \n', '    modifier onlymanager{\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    function transferownership(address _new_manager) public onlymanager {\n', '        manager = _new_manager;\n', '    }\n', '}\n', '\n', 'interface master{\n', '     function owner_slave(uint _index) external view returns(address);\n', '     function owner_slave_amount()external view returns(uint);\n', '}\n', ' \n', '\n', '\n', 'interface controller{\n', '    function controlMintoken(uint8 _index, address target, uint mintedAmount) external;\n', '    function controlBurntoken(uint8 _index, address target, uint burnedAmount) external;\n', '    function controlSearchBoxCount(uint8 _boxIndex, address target)external view returns (uint);\n', '    function controlSearchCount(uint8 _boxIndex, uint8 _materialIndex, address target)external view returns (uint);\n', '    function controlPetCount(uint8 _boxIndex, uint8 _materialIndex, address target)external view returns (uint);\n', '}\n', '\n', 'contract personCall is owned{ \n', '    \n', '    address public master_address;\n', '    address public BoxFactory_address =0x8842511f9eaaa75904017ff8ca26ba03ee2ddfa0;\n', '    address public MaterialFactory_address =0x65844f2e98495b6c8780f689c5d13bb7f4975d65;\n', '    address public PetFactory_address;\n', '    \n', '    address[] public dungeons; \n', '\n', '    function checkSlave() public view returns(bool){ \n', '        uint length = master(master_address).owner_slave_amount();\n', '        for(uint i=1;i<=length;i++){\n', '             address slave = master(master_address).owner_slave(i);\n', '             if(msg.sender == slave){\n', '                 return true;\n', '             }\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function checkDungeons() public view returns(bool){ \n', '        for(uint i=0;i<dungeons.length;i++){\n', '             if(msg.sender == dungeons[i]){\n', '                 return true;\n', '             }\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    \n', '    \n', '    function callTreasureMin(uint8 index,address target, uint mintedAmount) public {    \n', '         require(checkSlave() || checkDungeons());\n', '         controller mintokener = controller(BoxFactory_address);\n', '   \n', '         mintokener.controlMintoken(index, target, mintedAmount);\n', '    }\n', '\n', ' \n', '    function callTreasureBurn(uint8 index, uint burnedAmount) public{       \n', '        controller burnTokenr = controller(BoxFactory_address);\n', '        burnTokenr.controlBurntoken(index, msg.sender, burnedAmount);\n', '    }\n', '    \n', '    \n', '    function showBoxAmount(uint8 _boxIndex) public view returns (uint){         \n', '        controller showBoxer = controller(BoxFactory_address);\n', '        return showBoxer.controlSearchBoxCount(_boxIndex,msg.sender);\n', '    }\n', '    \n', '    function showMaterialAmount(uint8 _boxIndex, uint8 _materialIndex) public view returns (uint){   \n', '        controller showMaterialer = controller(MaterialFactory_address);\n', '        return showMaterialer.controlSearchCount(_boxIndex,_materialIndex,msg.sender);\n', '    }\n', '    \n', '    function showPetAmount(uint8 _boxIndex, uint8 _materialIndex) public view returns (uint){   \n', '        controller showPeter = controller(PetFactory_address);\n', '        return showPeter.controlPetCount(_boxIndex,_materialIndex,msg.sender);\n', '    }\n', '    \n', '    \n', '    \n', '    function push_dungeons(address _dungeons_address) public onlymanager{               \n', '        dungeons.push(_dungeons_address);\n', '    }\n', '    \n', '    function change_dungeons_address(uint index,address _dungeons_address) public onlymanager{    \n', '        dungeons[index] = _dungeons_address;\n', '    }\n', '    \n', '    function set_master_address(address _master_address) public onlymanager{        \n', '        master_address = _master_address;\n', '    }\n', '    \n', '    function set_BoxFactory_address(address _BoxFactory_address) public onlymanager{        \n', '        BoxFactory_address = _BoxFactory_address;\n', '    }\n', '    \n', '    function set_MatFactory_address(address _MaterialFactory_address) public onlymanager{        \n', '        MaterialFactory_address = _MaterialFactory_address;\n', '    }\n', '    \n', '    function set_PetFactory_address(address _PetFactory_address) public onlymanager{        \n', '        PetFactory_address = _PetFactory_address;\n', '    }\n', '    \n', '\n', '}']