['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\t\n', '\n', '}\n', '\n', 'contract VoteToken is HasNoEther, BurnableToken {\n', '\t\n', '    struct stSuggestion {\n', '\t\tstring  text;\t//suggestion text (question)\n', '\t\tuint256 total_yes;\t//votes score\n', '\t\tuint256 total_no;\t//votes score\n', '\t\tuint256 timeStop; //timestamp\n', '\t\tbool \tfinished;\n', '\t\tuint\tvoters_count;\n', '\t\tmapping(uint \t => address) voters_addrs; //Voted addresses\n', '\t\tmapping(address  => uint256) voters_value; //Voted values\n', '    }\n', '\t\n', '\t// List of all suggestions\n', '\tuint lastID;\n', '    mapping (uint => stSuggestion) suggestions;\n', '\t\n', '\t// Price per Suggestion\n', '    uint256 public Price;\n', '\t\n', '\tfunction setSuggPrice( uint256 newPrice ) public onlyOwner \n', '    {\n', '        Price = newPrice;\n', '    }\n', '\n', '\tfunction getListSize() public view returns (uint count) \n', '    {\n', '        return lastID;\n', '    }\n', '\t\n', '\tfunction addSuggestion(string s, uint  forDays) public returns (uint newID)\n', '    {\n', '        require ( Price <= balances[msg.sender] );\n', '       \n', '\t\tnewID = lastID++;\n', '        suggestions[newID].text = s;\n', '        suggestions[newID].total_yes = 0;\n', '        suggestions[newID].total_no  = 0;\n', '        suggestions[newID].timeStop =  now + forDays * 1 days;\n', '        suggestions[newID].finished = false;\n', '        suggestions[newID].voters_count = 0;\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(Price);\n', '        totalSupply = totalSupply.sub(Price);\n', '    }\n', '\t\n', '\tfunction getSuggestion(uint id) public constant returns(string, uint256, uint256, uint256, bool, uint )\n', '    {\n', '\t\trequire ( id <= lastID );\n', '        return (\n', '            suggestions[id].text,\n', '            suggestions[id].total_yes,\n', '            suggestions[id].total_no,\n', '            suggestions[id].timeStop,\n', '            suggestions[id].finished,\n', '            suggestions[id].voters_count\n', '            );\n', '    } \n', '\t\n', '\tfunction isSuggestionNeedToFinish(uint id) public view returns ( bool ) \n', '    {\n', '\t\tif ( id > lastID ) return false;\n', '\t\tif ( suggestions[id].finished ) return false;\n', '\t\tif ( now <= suggestions[id].timeStop ) return false;\n', '\t\t\n', '        return true;\n', '    } \n', '\t\n', '\tfunction finishSuggestion( uint id ) public returns (bool)\n', '\t{\n', '\t    \n', '\t\tif ( !isSuggestionNeedToFinish(id) ) return false;\n', '\t\t\n', '\t\tuint i;\n', '\t\taddress addr;\n', '\t\tuint256 val;\n', '\t\tfor ( i = 1; i <= suggestions[id].voters_count; i++){\n', '\t\t\taddr = suggestions[id].voters_addrs[i];\n', '\t\t\tval  = suggestions[id].voters_value[addr];\n', '\t\t\t\n', '\t\t\tbalances[addr] = balances[addr].add( val );\n', '\t\t\ttotalSupply = totalSupply.add( val );\n', '\t\t}\n', '\t\tsuggestions[id].finished = true;\n', '\t\t\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction Vote( uint id, bool MyVote, uint256 Value ) public returns (bool)\n', '\t{\n', '\t\tif ( id > lastID ) return false;\n', '\t\tif ( Value > balances[msg.sender] ) return false;\n', '\t\tif ( suggestions[id].finished ) return false;\n', '\t\n', '\t\tif (MyVote)\n', '\t\t\tsuggestions[id].total_yes += Value;\n', '\t\telse\n', '\t\t\tsuggestions[id].total_no  += Value;\n', '\t\t\n', '\t\tsuggestions[id].voters_count++;\n', '\t\tsuggestions[id].voters_addrs[ suggestions[id].voters_count ] = msg.sender;\n', '\t\tsuggestions[id].voters_value[msg.sender] = suggestions[id].voters_value[msg.sender].add(Value);\n', '\t\t\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(Value);\n', '\t\t\n', '\t\ttotalSupply = totalSupply.sub(Value);\n', '\t\t\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\t\n', '}\n', '\n', '\n', '\n', 'contract YourVoteMatters is VoteToken {\n', '\n', '    string public constant name = "YourVoteMatters";\n', '    string public constant symbol = "YVM";\n', '    uint8 public constant decimals = 18;\n', '    uint256 constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function YourVoteMatters() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function multiTransfer(address[] recipients, uint256[] amounts) public {\n', '        require(recipients.length == amounts.length);\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            transfer(recipients[i], amounts[i]);\n', '        }\n', '    }\n', '\t\n', '\t/**\n', '\t* @dev Create `mintedAmount` tokens\n', '    * @param mintedAmount The amount of tokens it will minted\n', '\t**/\n', '    function mintToken(uint256 mintedAmount) public onlyOwner {\n', '\t\t\ttotalSupply += mintedAmount;\n', '\t\t\tbalances[owner] += mintedAmount;\n', '\t\t\tTransfer(address(0), owner, mintedAmount);\n', '    }\n', '}']