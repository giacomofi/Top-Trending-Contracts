['pragma solidity ^0.4.25;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '  modifier onlyOwner {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != owner, "Cannot transfer to yourself");\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'interface BurnableERC20 {\n', '    function burn(uint256 amount) external;\n', '    function balanceOf(address target) external returns (uint256);\n', '}\n', '\n', 'interface Marketplace {\n', '    function transferOwnership(address) external;\n', '    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) external;\n', '    function pause() external;\n', '    function unpause() external;\n', '}\n', '\n', 'contract MANABurner is Ownable {\n', '\n', '    Marketplace public marketplace;\n', '    BurnableERC20 public mana;\n', '\n', '    constructor(address manaAddress, address marketAddress) public {\n', '        mana = BurnableERC20(manaAddress);\n', '        marketplace = Marketplace(marketAddress);\n', '    }\n', '\n', '    function burn() public {\n', '        mana.burn(mana.balanceOf(this));\n', '    }\n', '\n', '    function transferMarketplaceOwnership(address target) public onlyOwner {\n', '        marketplace.transferOwnership(target);\n', '    }\n', '\n', '    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) public onlyOwner {\n', '        marketplace.setOwnerCutPerMillion(_ownerCutPerMillion);\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        marketplace.pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        marketplace.unpause();\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '  modifier onlyOwner {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != owner, "Cannot transfer to yourself");\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'interface BurnableERC20 {\n', '    function burn(uint256 amount) external;\n', '    function balanceOf(address target) external returns (uint256);\n', '}\n', '\n', 'interface Marketplace {\n', '    function transferOwnership(address) external;\n', '    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) external;\n', '    function pause() external;\n', '    function unpause() external;\n', '}\n', '\n', 'contract MANABurner is Ownable {\n', '\n', '    Marketplace public marketplace;\n', '    BurnableERC20 public mana;\n', '\n', '    constructor(address manaAddress, address marketAddress) public {\n', '        mana = BurnableERC20(manaAddress);\n', '        marketplace = Marketplace(marketAddress);\n', '    }\n', '\n', '    function burn() public {\n', '        mana.burn(mana.balanceOf(this));\n', '    }\n', '\n', '    function transferMarketplaceOwnership(address target) public onlyOwner {\n', '        marketplace.transferOwnership(target);\n', '    }\n', '\n', '    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) public onlyOwner {\n', '        marketplace.setOwnerCutPerMillion(_ownerCutPerMillion);\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        marketplace.pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        marketplace.unpause();\n', '    }\n', '}']
