['pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a * _b;\n', '        require(_a == 0 || c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a / _b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '\t\trequire(_newOwner != address(0), "New owner cannot be address(0)");\n', '\t\temit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Administator\n', ' * @dev  This contract has a group of administrators who can add/remove any account to/from blacklist. \n', '*/\n', 'contract Administrator is Ownable {\n', '    mapping (address=>bool) public admin;\n', '    \n', '    // Current number of members of the administrator group\n', '    uint    public   adminLength;   \n', '    // The maximum number of members of the administrator group, which is specified in the constructor\n', '    uint    public   adminMaxLength;      \n', '    \n', '    event   AddAdmin(address indexed _address);\n', '    event   RemoveAdmin(address indexed _address);\n', '    \n', '    constructor (uint _len) public {        \n', '        adminMaxLength = _len;\n', '    }\n', '    \n', '    modifier isAdmin(address _addr) {\n', '        require(admin[_addr], "Not administrator");\n', '        _;\n', '    }\n', '    \n', '    modifier isNotAdmin(address _addr) {\n', '        require(!admin[_addr], "Is administrator");\n', '        _;        \n', '    }\n', '    \n', '    /**\n', '     * @dev Modifier: Limit that only the contract owner or administrator can execute the function\n', '    */\n', '\tmodifier onlyOwnerOrAdmin() {\n', '\t\trequire(msg.sender == owner || admin[msg.sender], "msg.sender is nether owner nor administator");\n', '\t\t_;\n', '\t}\n', '    \n', '    /**\n', '     * @dev Add a member to the Administrators group\n', '    */\n', '    function addAdmin(address _addr) onlyOwner isNotAdmin(_addr) public returns (bool) {\n', '        require(_addr != address(0), "Administrator cannot be address(0)");\n', '        require(_addr != owner, "Administrator cannot be owner");\n', '        require(adminLength < adminMaxLength, "Exceeded the maximum number of administrators");\n', '        \n', '        admin[_addr] = true;\n', '        adminLength++; \n', '        \n', '        emit AddAdmin(_addr);\n', '        return true;\n', '    } \n', '    \n', '    /**\n', '     * @dev Remove a member from the Administrators group\n', '    */\n', '    function removeAdmin(address _addr) onlyOwner isAdmin(_addr) public returns (bool) {\n', '        delete admin[_addr];\n', '        adminLength--;\n', '        \n', '        emit RemoveAdmin(_addr);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Blacklisted\n', '* @dev allow contract owner or administator to add/remove address to/from the blacklist\n', '*/\n', 'contract Blacklisted is Administrator {\n', '\tmapping (address => bool) public blacklist;\n', '\n', '\tevent SetBlacklist(address indexed _address, bool _bool);\n', '\n', '\t/**\n', '\t* @dev Modifier: throw if _address is in the blacklist\n', '\t*/\n', '\tmodifier notInBlacklist(address _address) {\n', '\t\trequire(!blacklist[_address], "Is in Blacklist");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev call by the owner, set/unset single _address into the blacklist\n', '\t*/\n', '\tfunction setBlacklist(address _address, bool _bool) public onlyOwnerOrAdmin {\n', '\t\trequire(_address != address(0));\n', '\t\t\n', '\t\tif(_bool) {\n', '\t\t    require(!blacklist[_address], "Already in blacklist");\n', '\t\t} else {\n', '\t\t    require(blacklist[_address], "Not in blacklist yet");\n', '\t\t}\n', '\t\t\n', '\t\tblacklist[_address] = _bool;\n', '\t\temit SetBlacklist(_address, _bool);\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, Pausable, Blacklisted {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused notInBlacklist(msg.sender) notInBlacklist(_to) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notInBlacklist(msg.sender) notInBlacklist(_from) notInBlacklist(_to) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {\n', '\t\trequire(_value == 0 || allowed[msg.sender][_spender] == 0 );\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint256 _addedValue) whenNotPaused public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) whenNotPaused public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title GomicsToken\n', '* @dev\tGomicsToken main contract \n', '*/\n', 'contract GomicsToken is StandardToken {\n', '    string public constant name = "Gomics";\n', '    string public constant symbol = "GOM";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 75000000;\n', '    \n', '    constructor() Administrator(3) public {\n', '        totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply_;\n', '        emit Transfer(address(0), msg.sender, totalSupply_);\n', '    }\n', '}']