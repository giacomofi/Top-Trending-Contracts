['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-08\n', '*/\n', '\n', 'pragma solidity >=0.4.22 <0.6.0;\n', '\n', '/**\n', '  interface :\n', ' */\n', 'interface tokenRecipient{\n', '  function receiveApproval(address _from, uint256 _value,  address _token,   bytes calldata _extraData) external;\n', '}\n', '\n', '\n', 'contract owned{\n', '  //the token owner\n', '  address public owner;\n', '  \n', '  constructor() public{\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '//   function transferOwnerShip(address newOwner) onlyOwner public  {\n', '//     owner = newOwner;\n', '//   }\n', '}\n', '\n', '\n', 'contract BNB is owned {\n', '    string public name;  //token name\n', '    string public symbol; //token symbol\n', '    uint8 public decimals = 18; //Tokens to support the number of decimal digits\n', '    uint256 public totalSupply; //token total nums\n', '\n', '    mapping (address => uint256) public balanceOf;//mapping address balance\n', '    mapping (address => mapping(address => uint256)) public allowance;//\n', '    mapping (address => bool) public frozenAccount;//\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value); //transfer event\n', '    event Approval(address indexed _owner,address indexed _spender,uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '   \n', '    constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {\n', '       totalSupply = initialSupply * 10 ** uint256(decimals);\n', '       balanceOf[msg.sender] = totalSupply;\n', '       name = tokenName;\n', '       symbol = tokenSymbol; \n', '    }\n', '\n', '    /**\n', '      freeze or unfreeze account\n', '     */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '      frozenAccount[target] = freeze;\n', '      emit FrozenFunds(target,freeze);\n', '    }\n', '\n', '    /**\n', '       Internal transfer,only can be called by this contract \n', '     */\n', '    function _transfer(address _from,address _to, uint _value) internal{\n', '      require(_to != address(0x0));\n', '      require(_from != address(0x0));\n', '      require(balanceOf[_from] >= _value); //check if the sender has enough\n', '      require(balanceOf[_to] + _value >= balanceOf[_to]);//check for overflows\n', '      require(!frozenAccount[_from]);\n', '      require(!frozenAccount[_to]);\n', '\n', '      uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '      balanceOf[_from] -= _value;\n', '      balanceOf[_to] += _value;\n', '      emit Transfer(_from, _to, _value); //send transfer event\n', '      // the  num mast equals after transfer\n', '      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '      send &#39;_value&#39; tokens to &#39;_to&#39; from your account\n', '     */\n', '    function transfer(address _to , uint256 _value) public  returns(bool success){\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    \n', '    /**\n', '        send &#39;_value&#39; tokens to &#39;_to&#39; on behalf to &#39;_from&#39;\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){\n', '      require(_value <= allowance[_from][msg.sender]);\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value); \n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * \n', '      set allowance for other address\n', '      allows &#39;_spender&#39; to spend no more than &#39;_value&#39; tokens on you behalf\n', '     */\n', '    function approve(address _spender, uint256 _value)  public returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);     \n', '      return true;\n', '    }\n', '\n', '    /**\n', '     set allowance for other address and nofity\n', '\n', '     allows &#39;_spender&#39; to spend no more than &#39;_value&#39; tokens on you behalf,and then ping the contract about it\n', '     */\n', '    function approveAndCall(address _spender,uint256 _value, bytes memory _extraData) public returns (bool success) {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if(approve(_spender,_value)){\n', '        spender.receiveApproval(msg.sender, _value, address(this),_extraData);\n', '        return true;\n', '      }\n', '    }\n', '    \n', '    /**\n', '      Destroy tokens\n', '      remove &#39;_value&#39; tokens from the system irreversibly\n', '     */\n', '    function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '      require(balanceOf[msg.sender] >= _value);\n', '      balanceOf[msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      emit Burn(msg.sender, _value);\n', '      return true;\n', '    }\n', '    \n', '    /**\n', '     destroy tokens from other account\n', '     remove &#39;_value&#39; tokens from the system irreversibly or &#39;_from&#39; \n', '    */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public returns(bool success){\n', '      require(balanceOf[_from] >= _value);\n', '      require(_value <= allowance[_from][msg.sender]);\n', '      balanceOf[_from] -= _value;\n', '      allowance[_from][msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      emit Burn(_from, _value);\n', '      return true;\n', '    }\n', '    \n', '    /**\n', '      Increase the total tokens\n', '    */\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '      uint256 number = mintedAmount * 10 * uint256(decimals);    \n', '      balanceOf[target] += number;\n', '      totalSupply += number;\n', '      emit Transfer(address(0x0),owner,mintedAmount);\n', '      emit Transfer(owner,target,mintedAmount);\n', '    }\n', '}']