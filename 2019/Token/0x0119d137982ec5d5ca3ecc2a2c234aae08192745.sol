['pragma solidity ^0.5.2;\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', 'contract EtherReserve {\n', '    using SafeMath for uint;\n', '    address public owner = address(0);\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals = 18;\n', '    string public descriptions;\n', '    uint _totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    constructor (string memory _name, string memory _symbol, string memory _description) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        descriptions = _description;\n', '        emit Transfer(address(this), owner, 1e26);\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        if (to == address(this)) {\n', '            msg.sender.transfer(tokens);\n', '            _totalSupply = _totalSupply.sub(tokens);\n', '            emit Transfer(msg.sender, address(0), tokens);\n', '        } else {\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(msg.sender, to, tokens);\n', '        }\n', '        return true;\n', '    }\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        if (spender == address(this)) revert();\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '    function () external payable {\n', '        if (msg.value > 0) tokenize();\n', '    }\n', '    function tokenize() public payable {\n', '        require(msg.value > 0);\n', '        _totalSupply = _totalSupply.add(msg.value);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        emit Transfer(address(0), msg.sender, msg.value);\n', '    }\n', '}']