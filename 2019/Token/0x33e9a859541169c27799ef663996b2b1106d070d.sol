['pragma solidity ^0.4.6;\n', ' \n', 'contract SafeMath {\n', '  //internals\n', ' \n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', ' \n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', ' \n', 'contract VOISE is SafeMath {\n', '    /* Public variables of the token */\n', "    string public standard = 'ERC20';\n", "    string public name = 'VOISE';\n", "    string public symbol = 'VOISE';\n", '    uint8  public decimals = 8;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    uint256 public startTime = 1492560000;\n', '    /* tells if tokens have been burned already */\n', '    bool burned;\n', ' \n', '    /* This creates an array with all the balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', ' \n', ' \n', '    /* This generates a public event on the blockchain that will notify all clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burned(uint amount);\n', ' \n', '    /* Initializes contract with initial supply tokens and gives them to the voise team adress */\n', '    function VOISE() {\n', '        \n', '        owner = msg.sender;\n', '        \n', '        balanceOf[owner] = 85557800000000000;   // All of them are stored in the voise team adress until they are bought\n', '        totalSupply = 85557800000000000; // total supply of tokens\n', '    }\n', ' \n', '    /* Send some of your tokens to a given address (Press bounties) */\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        if (now < startTime) throw; //check if the crowdsale is already over\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);                     // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', ' \n', '    /* Allow another contract or person to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', ' \n', '    /* A contract or  person attempts to get the tokens of somebody else. */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (now < startTime && _from!=owner) throw; //check if the crowdsale is already over\n', '        var _allowance = allowance[_from][msg.sender];\n', '        balanceOf[_from] = safeSub(balanceOf[_from],_value); // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);     // Add the same to the recipient\n', '        allowance[_from][msg.sender] = safeSub(_allowance,_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', ' \n', '}']