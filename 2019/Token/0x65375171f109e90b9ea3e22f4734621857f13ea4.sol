['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private minters;\n', '\n', '    constructor() internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', 'contract StandardERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string name, string symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns(string) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns(string) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '    }\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(value <= _allowed[from][msg.sender]);\n', '\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(value <= _balances[from]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is StandardERC20, MinterRole {\n', '\n', '    constructor(string name, string symbol, uint8 decimals)\n', '    public\n', '    StandardERC20(name,symbol,decimals)\n', '    {\n', '    }\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '    {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract ERC20Capped is ERC20Mintable {\n', '\n', '    uint256 private _cap;\n', '\n', '    constructor(string name, string symbol, uint8 decimals,uint256 cap)\n', '    public\n', '    ERC20Mintable(name,symbol,decimals)\n', '    {\n', '        require(cap > 0);\n', '        _cap =  cap.mul(uint(10) **decimals);\n', '    }\n', '\n', '    /**\n', '     * @return the cap for the token minting.\n', '     */\n', '    function cap() public view returns(uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(totalSupply().add(value) <= _cap);\n', '        super._mint(account, value);\n', '    }\n', '}\n', '\n', 'contract FSTToken is ERC20Capped {\n', '\n', '    constructor(string name, string symbol, uint8 decimals,uint256 cap)\n', '    public\n', '    ERC20Capped(name,symbol,decimals,cap)\n', '    {\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract FSTTokenAgentHolder is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    FSTToken private token ;\n', '\n', '    uint256 public totalLockTokens;\n', '\n', '    uint256 public totalUNLockTokens;\n', '    uint256 public globalLockPeriod;\n', '\n', '    uint256 public totalUnlockNum=4;\n', '    mapping (address => HolderSchedule) public holderList;\n', '    address[] public holderAccountList=[0x0];\n', '\n', '    uint256 private singleNodeTime;\n', '\n', '    event ReleaseTokens(address indexed who,uint256 value);\n', '    event HolderToken(address indexed who,uint256 value,uint256 totalValue);\n', '\n', '    struct HolderSchedule {\n', '        uint256 startAt;\n', '        uint256 lockAmount;\n', '        uint256 releasedAmount;\n', '        uint256 totalReleasedAmount;\n', '        uint256 lastUnlocktime;\n', '        bool isReleased;\n', '        bool isInvested;\n', '        uint256 unlockNumed;\n', '    }\n', '\n', '    constructor(address _tokenAddress ,uint256 _globalLockPeriod,uint256 _totalUnlockNum) public{\n', '        token = FSTToken(_tokenAddress);\n', '        globalLockPeriod=_globalLockPeriod;\n', '        totalUnlockNum=_totalUnlockNum;\n', '        singleNodeTime=globalLockPeriod.div(totalUnlockNum);\n', '    }\n', '\n', '    function addHolderToken(address _adr,uint256 _lockAmount) public onlyOwner {\n', '        HolderSchedule storage holderSchedule = holderList[_adr];\n', '        require(_lockAmount > 0);\n', '        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\n', '        if(holderSchedule.isInvested==false||holderSchedule.isReleased==true){\n', '            holderSchedule.isInvested=true;\n', '            holderSchedule.startAt = block.timestamp;\n', '            holderSchedule.lastUnlocktime=holderSchedule.startAt;\n', '            if(holderSchedule.isReleased==false){\n', '                holderSchedule.releasedAmount=0;\n', '                if(holderAccountList[0]==0x0){\n', '                    holderAccountList[0]=_adr;\n', '                }else{\n', '                    holderAccountList.push(_adr);\n', '                }\n', '            }\n', '        }\n', '        holderSchedule.isReleased = false;\n', '        holderSchedule.lockAmount=holderSchedule.lockAmount.add(_lockAmount);\n', '        totalLockTokens=totalLockTokens.add(_lockAmount);\n', '        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\n', '    }\n', '\n', '    function subHolderToken(address _adr,uint256 _lockAmount)public onlyOwner{\n', '        HolderSchedule storage holderSchedule = holderList[_adr];\n', '        require(_lockAmount > 0);\n', '        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\n', '        require(holderSchedule.lockAmount>=_lockAmount);\n', '        holderSchedule.lockAmount=holderSchedule.lockAmount.sub(_lockAmount);\n', '        totalLockTokens=totalLockTokens.sub(_lockAmount);\n', '        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\n', '    }\n', '\n', '    function accessToken(address rec,uint256 value) private {\n', '        totalUNLockTokens=totalUNLockTokens.add(value);\n', '        token.mint(rec,value);\n', '    }\n', '    function releaseMyTokens() public{\n', '        releaseTokens(msg.sender);\n', '    }\n', '\n', '    function releaseTokens(address _adr) public{\n', '        require(_adr!=address(0));\n', '        HolderSchedule storage holderSchedule = holderList[_adr];\n', '        if(holderSchedule.isReleased==false&&holderSchedule.lockAmount>0){\n', '            uint256 unlockAmount=lockStrategy(_adr);\n', '            if(unlockAmount>0&&holderSchedule.lockAmount>=unlockAmount){\n', '                holderSchedule.lockAmount=holderSchedule.lockAmount.sub(unlockAmount);\n', '                holderSchedule.releasedAmount=holderSchedule.releasedAmount.add(unlockAmount);\n', '                holderSchedule.totalReleasedAmount=holderSchedule.totalReleasedAmount.add(unlockAmount);\n', '                holderSchedule.lastUnlocktime=block.timestamp;\n', '                if(holderSchedule.lockAmount==0){\n', '                    holderSchedule.isReleased=true;\n', '                    holderSchedule.releasedAmount=0;\n', '                    holderSchedule.unlockNumed=0;\n', '                }\n', '                accessToken(_adr,unlockAmount);\n', '                emit ReleaseTokens(_adr,unlockAmount);\n', '            }\n', '        }\n', '    }\n', '    function releaseEachTokens() public {\n', '        require(holderAccountList.length>0);\n', '        for(uint i=0;i<holderAccountList.length;i++){\n', '            HolderSchedule storage holderSchedule = holderList[holderAccountList[i]];\n', '            if(holderSchedule.lockAmount>0&&holderSchedule.isReleased==false){\n', '                uint256 unlockAmount=lockStrategy(holderAccountList[i]);\n', '                if(unlockAmount>0){\n', '                    holderSchedule.lockAmount=holderSchedule.lockAmount.sub(unlockAmount);\n', '                    holderSchedule.releasedAmount=holderSchedule.releasedAmount.add(unlockAmount);\n', '                    holderSchedule.totalReleasedAmount=holderSchedule.totalReleasedAmount.add(unlockAmount);\n', '                    holderSchedule.lastUnlocktime=block.timestamp;\n', '                    if(holderSchedule.lockAmount==0){\n', '                        holderSchedule.isReleased=true;\n', '                        holderSchedule.releasedAmount=0;\n', '                        holderSchedule.unlockNumed=0;\n', '                    }\n', '                    accessToken(holderAccountList[i],unlockAmount);\n', '                }\n', '            }\n', '        }\n', '    }\n', '    function lockStrategy(address _adr) private returns(uint256){\n', '        HolderSchedule storage holderSchedule = holderList[_adr];\n', '        uint256 interval=block.timestamp.sub(holderSchedule.startAt);\n', '        uint256 unlockAmount=0;\n', '        if(interval>=singleNodeTime){\n', '            uint256 unlockNum=interval.div(singleNodeTime);\n', '            uint256 nextUnlockNum=unlockNum.sub(holderSchedule.unlockNumed);\n', '            if(nextUnlockNum>0){\n', '                holderSchedule.unlockNumed=unlockNum;\n', '                uint totalAmount=holderSchedule.lockAmount.add(holderSchedule.releasedAmount);\n', '                uint singleAmount=totalAmount.div(totalUnlockNum);\n', '                unlockAmount=singleAmount.mul(nextUnlockNum);\n', '                if(unlockAmount>holderSchedule.lockAmount){\n', '                    unlockAmount=holderSchedule.lockAmount;\n', '                }\n', '            }\n', '        }\n', '        return unlockAmount;\n', '    }\n', '}']