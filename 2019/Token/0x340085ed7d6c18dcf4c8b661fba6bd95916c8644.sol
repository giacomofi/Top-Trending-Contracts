['pragma solidity >=0.4.22 <0.6.0;\n', '\t\n', '\n', '\tcontract owned {\n', '\t    address public owner;\n', '\t\n', '\n', '\t    constructor() public {\n', '\t        owner = msg.sender;\n', '\t    }\n', '\t\n', '\n', '\t    modifier onlyOwner {\n', '\t        require(msg.sender == owner);\n', '\t        _;\n', '\t    }\n', '\t\n', '\n', '\t    function transferOwnership(address newOwner) onlyOwner public {\n', '\t        owner = newOwner;\n', '\t    }\n', '\t}\n', '\t\n', '\n', '\tinterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n', '\t\n', '\n', '\t}\n', '\tcontract BoostPax {\n', '\t    // Public variables of the token\n', '\t    string public name;\n', '\t    string public symbol;\n', '\t    uint8 public decimals = 18;\n', '\t    // 18 decimals is the strongly suggested default, avoid changing it\n', '\t    uint256 public totalSupply;\n', '\t\n', '\n', '\t    // This creates an array with all balances\n', '\t    mapping (address => uint256) public balanceOf;\n', '\t    mapping (address => mapping (address => uint256)) public allowance;\n', '\t    mapping (address => bool) public frozenAccount;\n', '\t\n', '\n', '\t    // This generates a public event on the blockchain that will notify clients\n', '\t    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\t    \n', '\t    // This generates a public event on the blockchain that will notify clients\n', '\t    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\t\n', '\n', '\t    // This notifies clients about the amount burnt\n', '\t    event Burn(address indexed from, uint256 value);\n', '\t\n', '\n', '\t    /**\n', '\t     * Constructor function\n', '\t     *\n', '\t     * Initializes contract with initial supply tokens to the creator of the contract\n', '\t     */\n', '\t    constructor(\n', '\t\n', '\n', '\t    ) public {\n', '\t        totalSupply = 100000000 * 10 ** uint256(18);  // Update total supply with the decimal amount\n', '\t        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n', '\t        name = "BoostPax";                                       // Set the name for display purposes\n', '\t        symbol = "BPX";                                   // Set the symbol for display purposes\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Internal transfer, only can be called by this contract\n', '\t     */\n', '\t    function _transfer(address _from, address _to, uint _value) internal {\n', '\t        // Prevent transfer to 0x0 address. Use burn() instead\n', '\t        require(_to != address(0x0));\n', '\t        // Check if the sender has enough\n', '\t        require(balanceOf[_from] >= _value);\n', '\t        // Check for overflows\n', '\t        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\t        // Save this for an assertion in the future\n', '\t        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\t        // Subtract from the sender\n', '\t        balanceOf[_from] -= _value;\n', '\t        // Add the same to the recipient\n', '\t        balanceOf[_to] += _value;\n', '\t        emit Transfer(_from, _to, _value);\n', '\t        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '\t        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Transfer tokens\n', '\t     *\n', '\t     * Send `_value` tokens to `_to` from your account\n', '\t     *\n', '\t     * @param _to The address of the recipient\n', '\t     * @param _value the amount to send\n', '\t     */\n', '\t    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\t        _transfer(msg.sender, _to, _value);\n', '\t        return true;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Transfer tokens from other address\n', '\t     *\n', '\t     * Send `_value` tokens to `_to` in behalf of `_from`\n', '\t     *\n', '\t     * @param _from The address of the sender\n', '\t     * @param _to The address of the recipient\n', '\t     * @param _value the amount to send\n', '\t     */\n', '\t    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\t        allowance[_from][msg.sender] -= _value;\n', '\t        _transfer(_from, _to, _value);\n', '\t        return true;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Set allowance for other address\n', '\t     *\n', '\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '\t     *\n', '\t     * @param _spender The address authorized to spend\n', '\t     * @param _value the max amount they can spend\n', '\t     */\n', '\t    function approve(address _spender, uint256 _value) public\n', '\t        returns (bool success) {\n', '\t        allowance[msg.sender][_spender] = _value;\n', '\t        emit Approval(msg.sender, _spender, _value);\n', '\t        return true;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Set allowance for other address and notify\n', '\t     *\n', '\t     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '\t     *\n', '\t     * @param _spender The address authorized to spend\n', '\t     * @param _value the max amount they can spend\n', '\t     * @param _extraData some extra information to send to the approved contract\n', '\t     */\n', '\t    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '\t        public\n', '\t        returns (bool success) {\n', '\t        tokenRecipient spender = tokenRecipient(_spender);\n', '\t        if (approve(_spender, _value)) {\n', '\t            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '\t            return true;\n', '\t        }\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Destroy tokens\n', '\t     *\n', '\t     * Remove `_value` tokens from the system irreversibly\n', '\t     *\n', '\t     * @param _value the amount of money to burn\n', '\t     */\n', '\t    function burn(uint256 _value) public returns (bool success) {\n', '\t        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '\t        totalSupply -= _value;                      // Updates totalSupply\n', '\t        emit Burn(msg.sender, _value);\n', '\t        return true;\n', '\t    }\n', '\t\n', '\t    /**\n', '\t     * Destroy tokens from other account\n', '\t     *\n', '\t     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '\t     *\n', '\t     * @param _from the address of the sender\n', '\t     * @param _value the amount of money to burn\n', '\t     */\n', '\t    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\t        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '\t        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '\t        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "\t        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '\t        totalSupply -= _value;                              // Update totalSupply\n', '\t        emit Burn(_from, _value);\n', '\t        return true;\n', '\t    }\n', '\t}']