['pragma solidity ^0.4.24;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address Owner) public constant returns (uint256 balance);\n', '    function allowance(address Owner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed Owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 value, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Vioscoin is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    constructor() public {\n', '        symbol = "VIS";\n', '        name = "Vioscoin";\n', '        decimals = 18;\n', '        _totalSupply = 5000000000000000000000000;\n', '        balances[0x67e9911D9275389dB0599BE60b1Be5C8850Df7b1] = _totalSupply;\n', '        emit Transfer(address(0), 0x67e9911D9275389dB0599BE60b1Be5C8850Df7b1, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address _Owner) public constant returns (uint256 balance) {\n', '        return balances[_Owner];\n', '    }\n', '\n', '    function transfer(address to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[to] = safeAdd(balances[to], _value);\n', '        emit Transfer(msg.sender, to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][spender] = _value;\n', '        emit Approval(msg.sender, spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256  _value) public returns (bool success) {\n', '        balances[_from] = safeSub(balances[_from],  _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to],  _value);\n', '        emit Transfer(_from, _to,  _value);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function allowance(address Owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[Owner][_spender];\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, data);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    function transferAnyERC20Token(address Address, uint256 _value) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(Address).transfer(owner, _value);\n', '    }\n', '}']