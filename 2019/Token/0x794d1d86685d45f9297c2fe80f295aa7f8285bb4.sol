['pragma solidity ^0.5.0;\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// Sample fixed supply token contract\n', '// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------------------------\n', '\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface {\n', '    // Get the total token supply\n', '    function totalSupply() view public returns (uint256);\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) view public returns (uint256);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract PALSToken is ERC20Interface {\n', '   \n', '    using SafeMath for uint256;\n', '    string public constant symbol = "PALS";\n', '    string public constant name = "PALS";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 500000000000000000000000000;\n', ' \n', '     struct LockAccount{\n', '        uint status;\n', '    }\n', '\n', '     mapping (address => LockAccount) lockAccount;\n', '     address[] public AllLockAccounts;\n', '    \n', '    \n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    //Constructor\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '    \n', '\n', '    function totalSupply() view public returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    \n', '       function setLockAccount(address _addr) public{\n', '        require(msg.sender == owner);\n', '       \n', '        lockAccount[_addr].status = 1;\n', '        AllLockAccounts.push(_addr) -1;\n', '    }\n', '    \n', '      function getLockAccounts() view public returns (address[] memory){\n', '        return AllLockAccounts;\n', '    }\n', '      function unLockAccount(address _addr) public {\n', '        require(msg.sender == owner);\n', '       lockAccount[_addr].status = 0;\n', '       \n', '    }\n', '    \n', '    function isLock (address _addr) view private returns(bool){\n', '        uint lS = lockAccount[_addr].status;\n', '        \n', '        if(lS == 1){\n', '            return true;\n', '        }\n', '        \n', '        return false;\n', '    }\n', '\n', '   \n', '     function getLockAccount(address _addr) view public returns (uint){\n', '        return lockAccount[_addr].status;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) view public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '    ) public returns (bool) {\n', '        if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}']