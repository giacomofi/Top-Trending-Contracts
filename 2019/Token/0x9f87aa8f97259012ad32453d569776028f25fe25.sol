['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-08\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', 'interface Interfacemc {\n', '  \n', '  function balanceOf(address who) external view returns (uint256);\n', '  \n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  \n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '  \n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  \n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '  \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract LibraFacebook is Interfacemc{\n', '    using SafeMath for uint256;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 public totalSupply;\n', '    string public name = "Libra Facebook"; \n', '    uint8 public decimals = 8; \n', '    string public symbol = "LBA";\n', '    address private _owner;\n', '    \n', '    mapping (address => bool) public _notransferible;\n', '    mapping (address => bool) private _administradores; \n', '    \n', '    constructor() public{\n', '        _owner = msg.sender;\n', '        totalSupply = 1000000000000000000;\n', '        _balances[_owner] = totalSupply;\n', '        _administradores[_owner] = true;\n', '    }\n', '\n', '    function isAdmin(address dir) public view returns(bool){\n', '        return _administradores[dir];\n', '    }\n', '    \n', '    modifier OnlyOwner(){\n', '        require(msg.sender == _owner, "Not an admin");\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '    \n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '      public\n', '      view\n', '      returns (uint256)\n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(!_notransferible[from], "No authorized ejecutor");\n', '        require(value <= _balances[from], "Not enough balance");\n', '        require(to != address(0), "Invalid account");\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {   \n', '        require(value <= _allowed[from][msg.sender], "Not enough approved ammount");\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != 0, "Invalid account");\n', '        require(value <= _balances[account], "Not enough balance");\n', '\n', '        totalSupply = totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowed[account][msg.sender], "No enough approved ammount");\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '    }\n', '\n', '    function setTransferible(address admin, address sujeto, bool state) public returns (bool) {\n', '        require(_administradores[admin], "Not an admin");\n', '        _notransferible[sujeto] = state;\n', '        return true;\n', '    }\n', '\n', '    function setNewAdmin(address admin)public OnlyOwner returns(bool){\n', '        _administradores[admin] = true;\n', '        return true;\n', '    }  \n', '\n', '}']
['pragma solidity ^0.4.24;\n', 'interface Interfacemc {\n', '  \n', '  function balanceOf(address who) external view returns (uint256);\n', '  \n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  \n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '  \n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  \n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '  \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract LibraFacebook is Interfacemc{\n', '    using SafeMath for uint256;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 public totalSupply;\n', '    string public name = "Libra Facebook"; \n', '    uint8 public decimals = 8; \n', '    string public symbol = "LBA";\n', '    address private _owner;\n', '    \n', '    mapping (address => bool) public _notransferible;\n', '    mapping (address => bool) private _administradores; \n', '    \n', '    constructor() public{\n', '        _owner = msg.sender;\n', '        totalSupply = 1000000000000000000;\n', '        _balances[_owner] = totalSupply;\n', '        _administradores[_owner] = true;\n', '    }\n', '\n', '    function isAdmin(address dir) public view returns(bool){\n', '        return _administradores[dir];\n', '    }\n', '    \n', '    modifier OnlyOwner(){\n', '        require(msg.sender == _owner, "Not an admin");\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '    \n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '      public\n', '      view\n', '      returns (uint256)\n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(!_notransferible[from], "No authorized ejecutor");\n', '        require(value <= _balances[from], "Not enough balance");\n', '        require(to != address(0), "Invalid account");\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {   \n', '        require(value <= _allowed[from][msg.sender], "Not enough approved ammount");\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(spender != address(0), "Invalid account");\n', '\n', '        _allowed[msg.sender][spender] = (\n', '        _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != 0, "Invalid account");\n', '        require(value <= _balances[account], "Not enough balance");\n', '\n', '        totalSupply = totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowed[account][msg.sender], "No enough approved ammount");\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '    }\n', '\n', '    function setTransferible(address admin, address sujeto, bool state) public returns (bool) {\n', '        require(_administradores[admin], "Not an admin");\n', '        _notransferible[sujeto] = state;\n', '        return true;\n', '    }\n', '\n', '    function setNewAdmin(address admin)public OnlyOwner returns(bool){\n', '        _administradores[admin] = true;\n', '        return true;\n', '    }  \n', '\n', '}']
