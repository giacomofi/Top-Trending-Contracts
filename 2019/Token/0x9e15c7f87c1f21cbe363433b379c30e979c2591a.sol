['/**\n', ' * Source Code first verified at https://etherscan.io on Wednesday, December 12, 2018\n', ' (UTC) */\n', '\n', 'pragma solidity ^0.5.1;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    /// Total amount of tokens\n', '  uint256 public totalSupply;\n', '  \n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  \n', '  function transfer(address _to, uint256 _amount) public returns (bool success);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n', '  \n', '  function approve(address _spender, uint256 _amount) public returns (bool success);\n', '  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  //balance in each address account\n', '  mapping(address => uint256) balances;\n', '  address ownerWallet;\n', '  bool released = false;\n', '\n', '  enum LockupType {NOLOCK, FOUNDATION, TEAM, CONSORTIUM, PARTNER, BLACK}\n', '\n', '  struct Lockup\n', '  {\n', '      uint256 lockupTime;\n', '      uint256 lockupAmount;\n', '      LockupType lockType;\n', '  }\n', '  Lockup lockup;\n', '  mapping(address=>Lockup) lockupParticipants;  \n', '  \n', '  \n', '  uint256 startTime;\n', '  function release() public {\n', '      require(ownerWallet == msg.sender);\n', '      require(!released);\n', '      released = true;\n', '  }\n', '\n', '  function lock() public {\n', '      require(ownerWallet == msg.sender);\n', '      require(released);\n', '      released = false;\n', '  }\n', '\n', '  function get_Release() view public returns (bool) {\n', '      return released;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _amount The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(balances[msg.sender] >= _amount && _amount > 0\n', '        && balances[_to].add(_amount) > balances[_to]);\n', '\n', '\n', '    if (!released) { // before exchanged\n', '      if ( (lockupParticipants[msg.sender].lockType == LockupType.PARTNER) || (msg.sender == ownerWallet) ) {\n', '        // do something to the partner or ownerthing\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '      //} else if (lockupParticipants[msg.sender].lockType == LockupType.BLACK ) {\n', '      } else {\n', '        // do something to the banned\n', '        return false;\n', '      } \n', '    } else { // after changed\n', '      if (lockupParticipants[msg.sender].lockType == LockupType.BLACK ) {\n', '        // do something to the banned\n', '        return false;\n', '      } else \n', '        if (lockupParticipants[msg.sender].lockupAmount>0) {\n', '            uint timePassed = now - startTime;\n', '            if (timePassed < lockupParticipants[msg.sender].lockupTime)\n', '            {\n', '                require(balances[msg.sender].sub(_amount) >= lockupParticipants[msg.sender].lockupAmount);\n', '            }\n', '            // do transfer\n', '            // SafeMath.sub will throw if there is not enough balance.\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '      } else {\n', '\t\t// do transfer\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\temit Transfer(msg.sender, _to, _amount);\n', '\t\treturn true;\n', '\t  }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  \n', '  \n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _amount uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(balances[_from] >= _amount);\n', '    require(allowed[_from][msg.sender] >= _amount);\n', '    require(_amount > 0 && balances[_to].add(_amount) > balances[_to]);\n', '    \n', '    if (lockupParticipants[_from].lockupAmount>0)\n', '    {\n', '        uint timePassed = now - startTime;\n', '        if (timePassed < lockupParticipants[_from].lockupTime)\n', '        {\n', '            require(balances[msg.sender].sub(_amount) >= lockupParticipants[_from].lockupAmount);\n', '        }\n', '    }\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    emit Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _amount The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyOwner{\n', '        require(_value <= balances[ownerWallet]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[ownerWallet] = balances[ownerWallet].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '}\n', '/**\n', ' * @title LineageCode Token\n', ' * @dev Token representing LineageCode.\n', ' */\n', ' contract LineageCode is BurnableToken {\n', '     string public name ;\n', '     string public symbol ;\n', '     uint8 public decimals;\n', '\n', '   \n', '     /**\n', '     *@dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n', '     */\n', '      function () external payable {\n', '         revert();\n', '     }\n', '     \n', '     /**\n', '     * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n', '     */\n', '     //constructor(address wallet) public \n', '     constructor() public \n', '     {\n', '         owner = msg.sender;\n', '         ownerWallet = owner;\n', '         totalSupply = 10000000000;\n', '         decimals = 6;\n', '         totalSupply = totalSupply.mul(10 ** uint256(decimals)); //Update total supply with the decimal amount\n', '         name = "SOSOSOSOSO";\n', '         symbol = "SOSO";\n', '         balances[owner] = totalSupply;\n', '         startTime = now;\n', '         \n', '         //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n', '         emit Transfer(address(0), msg.sender, totalSupply);\n', '     }\n', '     \n', '    function lockTokensForFoundation(address foundation, uint256 daysafter) public onlyOwner\n', '    {\n', '        lockup = Lockup({\n', '                          lockupTime:daysafter * 1 days,\n', '                          lockupAmount:10000000000 * 10 ** uint256(decimals), \n', '                          lockType:LockupType.FOUNDATION\n', '                          });\n', '        lockupParticipants[foundation] = lockup;\n', '    }\n', '\n', '    function lockTokensForConsortium(address consortium, uint256 daysafter, uint256 amount) public onlyOwner\n', '    {\n', '        lockup = Lockup({\n', '                          lockupTime:daysafter * 1 days,\n', '                          lockupAmount:amount * 10 ** uint256(decimals), \n', '                          lockType:LockupType.CONSORTIUM\n', '                          });\n', '        lockupParticipants[consortium] = lockup;\n', '    }\n', '\n', '    function lockTokensForTeam(address team, uint256 daysafter, uint256 amount) public onlyOwner\n', '    {\n', '        lockup = Lockup({\n', '                          lockupTime:daysafter * 1 days,\n', '                          lockupAmount:amount * 10 ** uint256(decimals), \n', '                          lockType:LockupType.TEAM\n', '                          });\n', '        lockupParticipants[team] = lockup;\n', '    }\n', '\n', '    function lockTokensForBlack(address black) public onlyOwner\n', '    {\n', '        lockup = Lockup({\n', '                          lockupTime:9999999999 days,\n', '                          lockupAmount:20000000000 * 10 ** uint256(decimals), \n', '                          lockType:LockupType.BLACK\n', '                          });\n', '        lockupParticipants[black] = lockup;\n', '    }\n', '\n', '    function registerPartner(address partner) public onlyOwner\n', '    {\n', '        lockup = Lockup({\n', '                          lockupTime:0 days,\n', '                          lockupAmount:0 * 10 ** uint256(decimals), \n', '                          lockType:LockupType.PARTNER\n', '                          });\n', '        lockupParticipants[partner] = lockup;\n', '    }\n', '\n', '    function lockTokensUpdate(address addr, uint daysafter, uint256 amount, uint256 l_type) public onlyOwner\n', '    {\n', '        \n', '        lockup = Lockup({\n', '                          lockupTime:daysafter *  1 days,\n', '                          lockupAmount:amount * 10 ** uint256(decimals), \n', '                          lockType: BasicToken.LockupType(l_type)\n', '                          });\n', '        lockupParticipants[addr] = lockup;\n', '    }\n', ' }']