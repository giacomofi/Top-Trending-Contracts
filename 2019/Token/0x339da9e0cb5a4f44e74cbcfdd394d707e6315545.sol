['pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization\n', ' *      control functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the\n', '     *      sender account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223 {\n', '    using SafeMath for uint256;\n', '\n', '    // ERC223 and ERC20 functions and events\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '    function transfer(address to, uint value) public returns (bool);\n', '    function transfer(address to, uint value, bytes memory data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    // ERC223 functions\n', '    function name() public view returns (string memory);\n', '    function symbol() public view returns (string memory);\n', '    function decimals() public view returns (uint8);\n', '\n', '    // ERC20 functions and events\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title ContractReceiver\n', ' * @dev Contract that is working with ERC223 tokens\n', ' */\n', 'contract ContractReceiver {\n', '    /**\n', '    * @dev Standard ERC223 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint _value, bytes memory _data) public;\n', '}\n', '\n', '/**\n', ' * @title ZENI\n', ' * @author ZENI\n', ' * @dev ZENI is an ERC223 Token with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' */\n', 'contract ZENI is ERC223, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string private _name = "ZENI";\n', '    string private _symbol = "ZENI";\n', '    uint8 private _decimals = 8;\n', '    uint256 private _initialSupply = 60e9 * 1e8;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint private _totalSupply;\n', '\n', '    bool public mintingFinished = false;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public unlockUnixTime;\n', '\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event LockedFunds(address indexed target, uint256 locked);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    /**\n', '     * @dev Constructor is called only once and can not be called again\n', '     */\n', '    constructor() public {\n', '        _totalSupply = _initialSupply;\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens\n', '     * @param targets Addresses to be frozen\n', '     * @param isFrozen either to freeze it or not\n', '     */\n', '    function freezeAccounts(address[] memory targets, bool isFrozen) public onlyOwner {\n', '        require(targets.length > 0);\n', '\n', '        for (uint j = 0; j < targets.length; j++) {\n', '            require(targets[j] != address(0));\n', '            frozenAccount[targets[j]] = isFrozen;\n', '            emit FrozenFunds(targets[j], isFrozen);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens by setting Unix times\n', '     * @param targets Addresses to be locked funds\n', '     * @param unixTimes Unix times when locking up will be finished\n', '     */\n', '    function lockupAccounts(address[] memory targets, uint[] memory unixTimes) public onlyOwner {\n', '        require(\n', '            targets.length > 0 &&\n', '            targets.length == unixTimes.length\n', '        );\n', '\n', '        for(uint i = 0; i < targets.length; i++){\n', '            require(unlockUnixTime[targets[i]] < unixTimes[i]);\n', '            unlockUnixTime[targets[i]] = unixTimes[i];\n', '            emit LockedFunds(targets[i], unixTimes[i]);\n', '        }\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n', '        require(\n', '            _value > 0 &&\n', '            frozenAccount[msg.sender] == false &&\n', '            frozenAccount[_to] == false &&\n', '            now > unlockUnixTime[msg.sender] &&\n', '            now > unlockUnixTime[_to]\n', '        );\n', '\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Standard function transfer similar to ERC20 transfer with no _data\n', '     *      Added due to backwards compatibility reasons\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(\n', '            _value > 0 &&\n', '            frozenAccount[msg.sender] == false &&\n', '            frozenAccount[_to] == false &&\n', '            now > unlockUnixTime[msg.sender] &&\n', '            now > unlockUnixTime[_to]\n', '        );\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool) {\n', '        require(balanceOf(msg.sender) >= _value);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\n', '        require(balanceOf(msg.sender) >= _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(\n', '            _to != address(0) &&\n', '            _value > 0 &&\n', '            _balances[_from] >= _value &&\n', '            _allowed[_from][msg.sender] >= _value &&\n', '            frozenAccount[_from] == false &&\n', '            frozenAccount[_to] == false &&\n', '            now > unlockUnixTime[_from] &&\n', '            now > unlockUnixTime[_to]\n', '        );\n', '\n', '        _balances[_from] = _balances[_from].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to spend no more than _value tokens in your behalf\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        _allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _owner address The address which owns the funds\n', '     * @param _spender address The address which will spend the funds\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return _allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _from The address that will burn the tokens.\n', '     * @param _unitAmount The amount of token to be burned.\n', '     */\n', '    function burn(address _from, uint256 _unitAmount) public onlyOwner {\n', '        require(\n', '            _unitAmount > 0 &&\n', '            balanceOf(_from) >= _unitAmount\n', '        );\n', '\n', '        _balances[_from] = _balances[_from].sub(_unitAmount);\n', '        _totalSupply = _totalSupply.sub(_unitAmount);\n', '        emit Burn(_from, _unitAmount);\n', '    }\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _unitAmount The amount of tokens to mint.\n', '     */\n', '    function mint(address _to, uint256 _unitAmount) public onlyOwner canMint returns (bool) {\n', '        require(_unitAmount > 0);\n', '\n', '        _totalSupply = _totalSupply.add(_unitAmount);\n', '        _balances[_to] = _balances[_to].add(_unitAmount);\n', '        emit Mint(_to, _unitAmount);\n', '        emit Transfer(address(0), _to, _unitAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '     */\n', '    function distributeAirdrop(address[] memory addresses, uint256 amount) public returns (bool) {\n', '        require(\n', '            amount > 0 &&\n', '            addresses.length > 0 &&\n', '            frozenAccount[msg.sender] == false &&\n', '            now > unlockUnixTime[msg.sender]\n', '        );\n', '\n', '        uint256 mulAmount = amount.mul(1e8);\n', '        uint256 totalAmount = mulAmount.mul(addresses.length);\n', '        require(_balances[msg.sender] >= totalAmount);\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(\n', '                addresses[i] != address(0) &&\n', '                frozenAccount[addresses[i]] == false &&\n', '                now > unlockUnixTime[addresses[i]]\n', '            );\n', '\n', '            _balances[addresses[i]] = _balances[addresses[i]].add(mulAmount);\n', '            emit Transfer(msg.sender, addresses[i], mulAmount);\n', '        }\n', '        _balances[msg.sender] = _balances[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function distributeAirdrop(address[] memory addresses, uint[] memory amounts) public returns (bool) {\n', '        require(\n', '            addresses.length > 0 &&\n', '            addresses.length == amounts.length &&\n', '            frozenAccount[msg.sender] == false &&\n', '            now > unlockUnixTime[msg.sender]\n', '        );\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for(uint i = 0; i < addresses.length; i++){\n', '            require(\n', '                amounts[i] > 0 &&\n', '                addresses[i] != address(0) &&\n', '                frozenAccount[addresses[i]] == false &&\n', '                now > unlockUnixTime[addresses[i]]\n', '            );\n', '\n', '            amounts[i] = amounts[i].mul(1e8);\n', '            totalAmount = totalAmount.add(amounts[i]);\n', '        }\n', '        require(_balances[msg.sender] >= totalAmount);\n', '\n', '        for (uint j = 0; j < addresses.length; j++) {\n', '            _balances[addresses[j]] = _balances[addresses[j]].add(amounts[j]);\n', '            emit Transfer(msg.sender, addresses[j], amounts[j]);\n', '        }\n', '        _balances[msg.sender] = _balances[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to collect tokens from the list of addresses\n', '     */\n', '    function collectTokens(address[] memory addresses, uint[] memory amounts) public onlyOwner returns (bool) {\n', '        require(\n', '            addresses.length > 0 &&\n', '            addresses.length == amounts.length\n', '        );\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(\n', '                amounts[i] > 0 &&\n', '                addresses[i] != address(0) &&\n', '                frozenAccount[addresses[i]] == false &&\n', '                now > unlockUnixTime[addresses[i]]\n', '            );\n', '\n', '            amounts[i] = amounts[i].mul(1e8);\n', '            require(_balances[addresses[i]] >= amounts[i]);\n', '            _balances[addresses[i]] = _balances[addresses[i]].sub(amounts[i]);\n', '            totalAmount = totalAmount.add(amounts[i]);\n', '            emit Transfer(addresses[i], msg.sender, amounts[i]);\n', '        }\n', '        _balances[msg.sender] = _balances[msg.sender].add(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() external {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * @dev Reject all ERC223 compatible tokens\n', '     * @param from_ address The address that is transferring the tokens\n', '     * @param value_ uint256 the amount of the specified token\n', '     * @param data_ Bytes The data passed from the caller.\n', '     */\n', '    function tokenFallback(address from_, uint256 value_, bytes memory data_) public pure {\n', '        from_;\n', '        value_;\n', '        data_;\n', '        revert();\n', '    }\n', '}']