['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Interface\n', ' * @dev Standard version of ERC20 interface\n', ' */\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner`\n', '     * of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the current owner\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner\n', '     * @param newOwner The address to transfer ownership to\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SNGT\n', ' * @dev Implemantation of the SNGT token\n', ' */\n', 'contract SNGTContract is Ownable, ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant symbol = "SNGT";\n', '    string public constant name = "SNGT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 private _unmintedTokens = 500000000 * uint(10) ** decimals;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed _address, uint256 _value);\n', '    event Mint(address indexed _address, uint256 _value);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query the the balance of\n', '     * @return An uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param _to The address to transfer to\n', '     * @param _value The amount to be transferred\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        assert(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        assert(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub( _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '     * @param _spender The address which will spend the funds\n', '     * @param _value The amount of tokens to be spent\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens than an owner allowed to a spender\n', '     * @param _owner The address which owns the funds\n', '     * @param _spender The address which will spend the funds\n', '     * @return A uint specifing the amount of tokens still avaible for the spender\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Mint SNGT tokens. No more than 500,000,000 SNGT can be minted\n', '     * @param _account The address to which new tokens will be minted\n', '     * @param _mintedAmount The amout of tokens to be minted\n', '     */\n', '    function mintTokens(address _account, uint256 _mintedAmount) public onlyOwner returns (bool success){\n', '        require(_mintedAmount <= _unmintedTokens);\n', '\n', '        balances[_account] = balances[_account].add(_mintedAmount);\n', '        _unmintedTokens = _unmintedTokens.sub(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        emit Mint(_account, _mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0.\n', '     * Emits an Approval event.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_subtractedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint SNGT tokens and aproves the passed address to spend the minted amount of tokens\n', '     * No more than 500,000,000 SNGT can be minted\n', '     * @param _target The address to which new tokens will be minted\n', '     * @param _mintedAmount The amout of tokens to be minted\n', '     * @param _spender The address which will spend minted funds\n', '     */\n', '    function mintTokensWithApproval(address _target, uint256 _mintedAmount, address _spender) public onlyOwner returns (bool success){\n', '        require(_mintedAmount <= _unmintedTokens);\n', '\n', '        balances[_target] = balances[_target].add(_mintedAmount);\n', '        _unmintedTokens = _unmintedTokens.sub(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        allowed[_target][_spender] = allowed[_target][_spender].add(_mintedAmount);\n', '        emit Mint(_target, _mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease amount of SNGT tokens that can be minted\n', '     * @param _burnedAmount The amount of unminted tokens to be burned\n', '     */\n', '    function burnUnmintedTokens(uint256 _burnedAmount) public onlyOwner returns (bool success){\n', '        require(_burnedAmount <= _unmintedTokens);\n', '        _unmintedTokens = _unmintedTokens.sub(_burnedAmount);\n', '        emit Burn(msg.sender, _burnedAmount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function that burns an amount of the token of a given\n', '     * account.\n', '     * @param _account The account whose tokens will be burnt.\n', '     * @param _value The amount that will be burnt.\n', '     */\n', '    function burn(address _account, uint256 _value) onlyOwner public {\n', '        require(_account != address(0));\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '        balances[_account] = balances[_account].sub(_value);\n', '\n', '        emit Burn(_account, _value);\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param _account The account whose tokens will be burnt.\n', '     * @param _value The amount that will be burnt.\n', '     */\n', '    function burnFrom(address _account, uint256 _value) onlyOwner public {\n', '        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_value);\n', '        burn(_account, _value);\n', '\n', '        emit Burn(_account, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the number of unminted token\n', '     */\n', '    function unmintedTokens() onlyOwner view public returns (uint256 tokens){\n', '        return _unmintedTokens;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    assert(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    assert(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}']