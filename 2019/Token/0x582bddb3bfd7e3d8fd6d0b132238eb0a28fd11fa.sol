['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-05\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title tokenRecipient\n', ' * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n', ' */\n', 'interface tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) external; }\n', '\n', '/**\n', ' * @title TokenERC20\n', ' * @dev A simple ERC20 standard token with burnable function\n', ' */\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Total number of tokens in existence\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    // This notifies clients about the amount burnt/transferred/approved\n', '    event Burn(address indexed from, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query\n', '     * @return Token balance of `_owner`\n', '     */\n', '    function balanceOf(address _owner) view public returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a spender&#39;s allowance from a token holder\n', '     * @param _owner The address which allows spender to spend\n', '     * @param _spender The address being allowed\n', '     * @return Approved amount for `spender` to spend from `_owner`\n', '     */\n', '    function allowance(address _owner, address _spender) view public returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Basic transfer of all transfer-related functions\n', '     * @param _from The address of sender\n', '     * @param _to The address of recipient\n', '     * @param _value The amount sender want to transfer to recipient\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer( _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens\n', '     * @dev Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from other address\n', '     * @dev Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address\n', '     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @return True if the approval is done without error\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address and notify\n', '     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     * @param _spender The contract address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     * @return True if it is done without error\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens\n', '     * @dev Remove `_value` tokens from the system irreversibly\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burn(uint256 _value) public returns(bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens from other account\n', '     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from The address of the burner\n', '     * @param _value The amount of token will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens to multiple account\n', '     * @dev Send `_value` tokens to corresponding `_to` from your account\n', '     * @param _to The array of ddress of the recipients\n', '     * @param _value The array of amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferMultiple(address[] _to, uint256[] _value) external returns(bool) {\n', '        require(_to.length == _value.length);\n', '        uint256 i = 0;\n', '        while (i < _to.length) {\n', '           _transfer(msg.sender, _to[i], _value[i]);\n', '           i += 1;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EventSponsorshipToken\n', ' * @author Ping Chen\n', ' */\n', 'contract EventSponsorshipToken is TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Info.\n', '    string public constant name = "EventSponsorshipToken";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev contract constructor\n', '     * @param _wallet The address where initial supply goes to\n', '     * @param _totalSupply initial supply\n', '     */\n', '    constructor(address _wallet, uint256 _totalSupply) public {\n', '        totalSupply = _totalSupply;\n', '        balances[_wallet] = _totalSupply;\n', '    }\n', '\n', '}\n', '\n', 'contract ESTVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct vault {\n', '        uint256 amount;\n', '        uint256 unlockTime;\n', '        bool claimed;\n', '    }\n', '\n', '    mapping(address => vault[]) public vaults;\n', '\n', '    EventSponsorshipToken EST = EventSponsorshipToken(0xD427c628C5f72852965fADAf1231b618c0C82395);\n', '\n', '    event Lock(address to, uint256 value, uint256 time);\n', '    event Revoke(address to, uint256 index);\n', '    event Redeem(address to, uint256 index);\n', '\n', '    function lock(address to, uint256 value, uint256 time) external {\n', '        _lock(to, value, time);\n', '    }\n', '\n', '    function lockMultiple(address[] to, uint256[] value, uint256[] time) external {\n', '        require(to.length == value.length && to.length == time.length);\n', '        for(uint256 i = 0 ; i < to.length ; i++)\n', '            _lock(to[i], value[i], time[i]);\n', '    }\n', '\n', '    function revoke(address to, uint256 index) public onlyOwner {\n', '        vault storage v = vaults[to][index];\n', '        require(now >= v.unlockTime);\n', '        require(!v.claimed);\n', '        v.claimed = true;\n', '        require(EST.transfer(msg.sender, v.amount));\n', '        emit Revoke(to, index);\n', '    }\n', '\n', '    function _lock(address to, uint256 value, uint256 time) internal {\n', '        require(EST.transferFrom(msg.sender, address(this), value));\n', '        vault memory v;\n', '        v.amount = value;\n', '        v.unlockTime = time;\n', '        vaults[to].push(v);\n', '        emit Lock(to, value, time);\n', '    }\n', '\n', '    function redeem(uint256 index) external {\n', '        vault storage v = vaults[msg.sender][index];\n', '        require(now >= v.unlockTime);\n', '        require(!v.claimed);\n', '        v.claimed = true;\n', '        require(EST.transfer(msg.sender, v.amount));\n', '        emit Redeem(msg.sender, index);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title tokenRecipient\n', ' * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n', ' */\n', 'interface tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) external; }\n', '\n', '/**\n', ' * @title TokenERC20\n', ' * @dev A simple ERC20 standard token with burnable function\n', ' */\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Total number of tokens in existence\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    // This notifies clients about the amount burnt/transferred/approved\n', '    event Burn(address indexed from, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner The address to query\n', '     * @return Token balance of `_owner`\n', '     */\n', '    function balanceOf(address _owner) view public returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', "     * @dev Gets a spender's allowance from a token holder\n", '     * @param _owner The address which allows spender to spend\n', '     * @param _spender The address being allowed\n', '     * @return Approved amount for `spender` to spend from `_owner`\n', '     */\n', '    function allowance(address _owner, address _spender) view public returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Basic transfer of all transfer-related functions\n', '     * @param _from The address of sender\n', '     * @param _to The address of recipient\n', '     * @param _value The amount sender want to transfer to recipient\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer( _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens\n', '     * @dev Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from other address\n', '     * @dev Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address\n', '     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @return True if the approval is done without error\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address and notify\n', '     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     * @param _spender The contract address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     * @return True if it is done without error\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens\n', '     * @dev Remove `_value` tokens from the system irreversibly\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burn(uint256 _value) public returns(bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens from other account\n', '     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from The address of the burner\n', '     * @param _value The amount of token will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens to multiple account\n', '     * @dev Send `_value` tokens to corresponding `_to` from your account\n', '     * @param _to The array of ddress of the recipients\n', '     * @param _value The array of amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferMultiple(address[] _to, uint256[] _value) external returns(bool) {\n', '        require(_to.length == _value.length);\n', '        uint256 i = 0;\n', '        while (i < _to.length) {\n', '           _transfer(msg.sender, _to[i], _value[i]);\n', '           i += 1;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EventSponsorshipToken\n', ' * @author Ping Chen\n', ' */\n', 'contract EventSponsorshipToken is TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Info.\n', '    string public constant name = "EventSponsorshipToken";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev contract constructor\n', '     * @param _wallet The address where initial supply goes to\n', '     * @param _totalSupply initial supply\n', '     */\n', '    constructor(address _wallet, uint256 _totalSupply) public {\n', '        totalSupply = _totalSupply;\n', '        balances[_wallet] = _totalSupply;\n', '    }\n', '\n', '}\n', '\n', 'contract ESTVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct vault {\n', '        uint256 amount;\n', '        uint256 unlockTime;\n', '        bool claimed;\n', '    }\n', '\n', '    mapping(address => vault[]) public vaults;\n', '\n', '    EventSponsorshipToken EST = EventSponsorshipToken(0xD427c628C5f72852965fADAf1231b618c0C82395);\n', '\n', '    event Lock(address to, uint256 value, uint256 time);\n', '    event Revoke(address to, uint256 index);\n', '    event Redeem(address to, uint256 index);\n', '\n', '    function lock(address to, uint256 value, uint256 time) external {\n', '        _lock(to, value, time);\n', '    }\n', '\n', '    function lockMultiple(address[] to, uint256[] value, uint256[] time) external {\n', '        require(to.length == value.length && to.length == time.length);\n', '        for(uint256 i = 0 ; i < to.length ; i++)\n', '            _lock(to[i], value[i], time[i]);\n', '    }\n', '\n', '    function revoke(address to, uint256 index) public onlyOwner {\n', '        vault storage v = vaults[to][index];\n', '        require(now >= v.unlockTime);\n', '        require(!v.claimed);\n', '        v.claimed = true;\n', '        require(EST.transfer(msg.sender, v.amount));\n', '        emit Revoke(to, index);\n', '    }\n', '\n', '    function _lock(address to, uint256 value, uint256 time) internal {\n', '        require(EST.transferFrom(msg.sender, address(this), value));\n', '        vault memory v;\n', '        v.amount = value;\n', '        v.unlockTime = time;\n', '        vaults[to].push(v);\n', '        emit Lock(to, value, time);\n', '    }\n', '\n', '    function redeem(uint256 index) external {\n', '        vault storage v = vaults[msg.sender][index];\n', '        require(now >= v.unlockTime);\n', '        require(!v.claimed);\n', '        v.claimed = true;\n', '        require(EST.transfer(msg.sender, v.amount));\n', '        emit Redeem(msg.sender, index);\n', '    }\n', '\n', '}']
