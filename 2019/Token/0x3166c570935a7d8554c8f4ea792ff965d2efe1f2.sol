['pragma solidity ^0.4.24;\n', '\n', 'contract Multiownable {\n', '\n', '    bool public paused = false;\n', '    uint256 public howManyOwnersDecide;\n', '    address[] public owners;\n', '    bytes32[] public allOperations;\n', '    address internal insideCallSender;\n', '    uint256 internal insideCallCount;\n', '\n', '    mapping(address => uint) public ownersIndices; // Starts from 1\n', '    mapping(bytes32 => uint) public allOperationsIndicies;\n', '\n', '    mapping(bytes32 => uint256) public votesMaskByOperation;\n', '    mapping(bytes32 => uint256) public votesCountByOperation;\n', '\n', '    event OperationCreated(bytes32 operation, uint howMany, uint ownersCount, address proposer);\n', '    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint ownersCount, address upvoter);\n', '    event OperationPerformed(bytes32 operation, uint howMany, uint ownersCount, address performer);\n', '    event OperationDownvoted(bytes32 operation, uint votes, uint ownersCount,  address downvoter);\n', '    event OperationCancelled(bytes32 operation, address lastCanceller);\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    function isOwner(address wallet) public constant returns(bool) {\n', '        return ownersIndices[wallet] > 0;\n', '    }\n', '\n', '    function ownersCount() public view returns(uint) {\n', '        return owners.length;\n', '    }\n', '\n', '    function allOperationsCount() public  view returns(uint) {\n', '        return allOperations.length;\n', '    }\n', '\n', '    modifier onlyAnyOwner {\n', '        if (checkHowManyOwners(1)) {\n', '            bool update = (insideCallSender == address(0));\n', '            if (update) {\n', '                insideCallSender = msg.sender;\n', '                insideCallCount = 1;\n', '            }\n', '            _;\n', '            if (update) {\n', '                insideCallSender = address(0);\n', '                insideCallCount = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    modifier onlyManyOwners {\n', '        if (checkHowManyOwners(howManyOwnersDecide)) {\n', '            bool update = (insideCallSender == address(0));\n', '            if (update) {\n', '                insideCallSender = msg.sender;\n', '                insideCallCount = howManyOwnersDecide;\n', '            }\n', '            _;\n', '            if (update) {\n', '                insideCallSender = address(0);\n', '                insideCallCount = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    constructor() public {  }\n', '\n', '    function checkHowManyOwners(uint howMany) internal returns(bool) {\n', '        if (insideCallSender == msg.sender) {\n', '            require(howMany <= insideCallCount, "checkHowManyOwners: nested owners modifier check require more owners");\n', '            return true;\n', '        }\n', '\n', '        uint ownerIndex = ownersIndices[msg.sender] - 1;\n', '        require(ownerIndex < owners.length, "checkHowManyOwners: msg.sender is not an owner");\n', '        bytes32 operation = keccak256(abi.encodePacked(msg.data));\n', '\n', '        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0, "checkHowManyOwners: owner already voted for the operation");\n', '        votesMaskByOperation[operation] |= (2 ** ownerIndex);\n', '        uint operationVotesCount = votesCountByOperation[operation] + 1;\n', '        votesCountByOperation[operation] = operationVotesCount;\n', '        if (operationVotesCount == 1) {\n', '            allOperationsIndicies[operation] = allOperations.length;\n', '            allOperations.push(operation);\n', '            emit OperationCreated(operation, howMany, owners.length, msg.sender);\n', '        }\n', '        emit OperationUpvoted(operation, operationVotesCount, howMany, owners.length, msg.sender);\n', '\n', '        // If enough owners confirmed the same operation\n', '        if (votesCountByOperation[operation] == howMany) {\n', '            deleteOperation(operation);\n', '            emit OperationPerformed(operation, howMany, owners.length, msg.sender);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function deleteOperation(bytes32 operation) internal {\n', '        uint index = allOperationsIndicies[operation];\n', '        if (index < allOperations.length - 1) { // Not last\n', '            allOperations[index] = allOperations[allOperations.length - 1];\n', '            allOperationsIndicies[allOperations[index]] = index;\n', '        }\n', '        allOperations.length--;\n', '\n', '        delete votesMaskByOperation[operation];\n', '        delete votesCountByOperation[operation];\n', '        delete allOperationsIndicies[operation];\n', '    }\n', '\n', '    function cancelPending(bytes32 operation) public onlyAnyOwner {\n', '        uint ownerIndex = ownersIndices[msg.sender] - 1;\n', '        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) != 0, "cancelPending: operation not found for this user");\n', '        votesMaskByOperation[operation] &= ~(2 ** ownerIndex);\n', '        uint operationVotesCount = votesCountByOperation[operation] - 1;\n', '        votesCountByOperation[operation] = operationVotesCount;\n', '        emit OperationDownvoted(operation, operationVotesCount, owners.length, msg.sender);\n', '        if (operationVotesCount == 0) {\n', '            deleteOperation(operation);\n', '            emit OperationCancelled(operation, msg.sender);\n', '        }\n', '    }\n', '\n', '    function transferOwnership(address _newOwner, address _oldOwner) public onlyManyOwners {\n', '        _transferOwnership(_newOwner, _oldOwner);\n', '    }\n', '\n', '    function _transferOwnership(address _newOwner, address _oldOwner) internal {\n', '        require(_newOwner != address(0));\n', '\n', '        for(uint256 i = 0; i < owners.length; i++) {\n', '            if (_oldOwner == owners[i]) {\n', '                owners[i] = _newOwner;\n', '                ownersIndices[_newOwner] = ownersIndices[_oldOwner];\n', '                ownersIndices[_oldOwner] = 0;\n', '                break;\n', '            }\n', '        }\n', '        emit OwnershipTransferred(_oldOwner, _newOwner);\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyManyOwners whenNotPaused {\n', '\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() public onlyManyOwners whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract GovernanceMigratable is Multiownable {\n', '    mapping(address => bool) public governanceContracts;\n', '\n', '    event GovernanceContractAdded(address addr);\n', '    event GovernanceContractRemoved(address addr);\n', '\n', '    modifier onlyGovernanceContracts() {\n', '        require(governanceContracts[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addAddressToGovernanceContract(address addr) onlyManyOwners public returns(bool success) {\n', '        if (!governanceContracts[addr]) {\n', '            governanceContracts[addr] = true;\n', '            emit GovernanceContractAdded(addr);\n', '            success = true;\n', '        }\n', '    }\n', '\n', '    function removeAddressFromGovernanceContract(address addr) onlyManyOwners public returns(bool success) {\n', '        if (governanceContracts[addr]) {\n', '            governanceContracts[addr] = false;\n', '            emit GovernanceContractRemoved(addr);\n', '            success = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '\n', '\n', '        return _a / _b;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '    uint256 internal totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '}\n', '\n', 'contract QDAOBurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract QDAOPausableToken is StandardToken, GovernanceMigratable {\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract QDAO is StandardToken, QDAOBurnableToken, DetailedERC20, QDAOPausableToken  {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    uint8 constant DECIMALS = 18;\n', '\n', '    constructor(address _firstOwner,\n', '        address _secondOwner,\n', '        address _thirdOwner,\n', '        address _fourthOwner,\n', '        address _fifthOwner) DetailedERC20("Q DAO Governance token v1.0", "QDAO", DECIMALS) public {\n', '\n', '        owners.push(_firstOwner);\n', '        owners.push(_secondOwner);\n', '        owners.push(_thirdOwner);\n', '        owners.push(_fourthOwner);\n', '        owners.push(_fifthOwner);\n', '        owners.push(msg.sender);\n', '\n', '        ownersIndices[_firstOwner] = 1;\n', '        ownersIndices[_secondOwner] = 2;\n', '        ownersIndices[_thirdOwner] = 3;\n', '        ownersIndices[_fourthOwner] = 4;\n', '        ownersIndices[_fifthOwner] = 5;\n', '        ownersIndices[msg.sender] = 6;\n', '\n', '        howManyOwnersDecide = 4;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) external onlyGovernanceContracts() returns (bool){\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approveForOtherContracts(address _sender, address _spender, uint256 _value) external onlyGovernanceContracts() {\n', '        allowed[_sender][_spender] = _value;\n', '        emit Approval(_sender, _spender, _value);\n', '    }\n', '\n', '    function burnFrom(address _to, uint256 _amount) external onlyGovernanceContracts() returns (bool) {\n', '        allowed[_to][msg.sender] = _amount;\n', '        transferFrom(_to, msg.sender, _amount);\n', '        _burn(msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferMany(address[] _recipients, uint[] _values) public onlyGovernanceContracts() {\n', '        require(_recipients.length == _values.length);\n', '        require(_recipients.length > 0);\n', '\n', '        for(uint i = 0; i < _recipients.length; i++) {\n', '            address recipient = _recipients[i];\n', '            uint value = _values[i];\n', '\n', '            require(recipient != address(0) && value != 0);\n', '\n', '            balances[msg.sender] = balances[msg.sender].sub(value);\n', '            balances[recipient] = balances[recipient].add(value);\n', '            emit Transfer(msg.sender, recipient, value);\n', '        }\n', '    }\n', '}']