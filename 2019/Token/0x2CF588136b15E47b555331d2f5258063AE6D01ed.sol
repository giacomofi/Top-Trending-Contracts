['pragma solidity ^0.5.8;\n', '\n', '/*\n', '    IdeaFeX Token token contract\n', '\n', '    Deployed to     : 0x2CF588136b15E47b555331d2f5258063AE6D01ed\n', '    Symbol          : IFX\n', '    Name            : IdeaFeX Token\n', '    Total supply    : 1,000,000,000.000000000000000000\n', '    Decimals        : 18\n', '    Distribution    : 40% to tokenSale      0x6924E015c192C0f1839a432B49e1e96e06571227 (to be managed)\n', '                    : 30% to escrow         0xf9BF5e274323c5b9E23D3489f551F7525D8af1fa (cold storage)\n', '                    : 15% to communityFund  0x2f70F492d3734d8b747141b4b961301d68C12F62 (to be managed)\n', '                    : 15% to teamReserve    0xd0ceaB60dfbAc16afF8ebefbfDc1cD2AF53cE47e (cold storage)\n', '*/\n', '\n', '\n', '/* Safe maths */\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "Addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "Subtraction overflow");\n', '        uint c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a==0){\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, "Multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0,"Division by 0");\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b != 0, "Modulo by 0");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/* ERC20 standard interface */\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    event Transfer(address indexed sender, address indexed recipient, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '/* IdeaFeX Token */\n', '\n', 'contract IdeaFeXToken is ERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    string private _symbol;\n', '    string private _name;\n', '    uint8 private _decimals;\n', '    uint private _totalSupply;\n', '\n', '    mapping(address => uint) private _balances;\n', '    mapping(address => mapping(address => uint)) private _allowances;\n', '\n', '    address payable private tokenSale;\n', '    address payable private escrow;\n', '    address payable private communityFund;\n', '    address payable private teamReserve;\n', '\n', '\n', '    // Constructor\n', '\n', '    constructor() public {\n', '        _symbol = "IFX";\n', '        _name = "IdeaFeX Token";\n', '        _decimals = 18;\n', '        _totalSupply = 1000000000 * 10**uint(_decimals);\n', '\n', '        //IdeaFeX Token addresses (initial)\n', '        tokenSale = 0x6924E015c192C0f1839a432B49e1e96e06571227;\n', '        escrow = 0xf9BF5e274323c5b9E23D3489f551F7525D8af1fa;\n', '        communityFund = 0x2f70F492d3734d8b747141b4b961301d68C12F62;\n', '        teamReserve = 0xd0ceaB60dfbAc16afF8ebefbfDc1cD2AF53cE47e;\n', '\n', '        //Token sale = 40%\n', '        _balances[tokenSale] = _totalSupply*4/10;\n', '        emit Transfer(address(0), tokenSale, _totalSupply*4/10);\n', '\n', '        //Escrow = 30%\n', '        _balances[escrow] = _totalSupply*3/10;\n', '        emit Transfer(address(0), escrow, _totalSupply*3/10);\n', '\n', '        //Community = 15%\n', '        _balances[communityFund] = _totalSupply*15/100;\n', '        emit Transfer(address(0), communityFund, _totalSupply*15/100);\n', '\n', '        //Team = 15%\n', '        _balances[teamReserve] = _totalSupply*15/100;\n', '        emit Transfer(address(0), teamReserve, _totalSupply*15/100);\n', '    }\n', '\n', '\n', '    // Basics\n', '\n', '    function name() public view returns (string memory){\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory){\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '\n', '    // Basics II\n', '\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '\n', '    // Burn Function\n', '\n', '    function burn(uint amount) public {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '\n', '    function _burn(address account, uint value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '\n', '    // Fallback\n', '\n', '    function () external payable {\n', '        communityFund.transfer(msg.value);\n', '    }\n', '}']