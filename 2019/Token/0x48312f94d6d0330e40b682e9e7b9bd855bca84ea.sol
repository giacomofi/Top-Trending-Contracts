['pragma solidity ^0.5.10;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "Add error");\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a, "Sub error");\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "Mul error");\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0, "Div error");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() external returns (uint);\n', '    function balanceOf(address tokenOwner) external returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) external returns (uint remaining);\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Airdropper contract\n', '// ----------------------------------------------------------------------------\n', 'contract Airdropper is Owned {\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public token;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param tokenAddress Address of the token contract.\n', '     */\n', '    constructor(address tokenAddress) public {\n', '        token = ERC20(tokenAddress);\n', '    }\n', '    \n', '     /**\n', '      * @dev Airdrop.\n', '      * @ !important Before using, send needed token amount to this contract\n', '      */\n', '    function airdrop(address[] memory dests, uint[] memory values) public onlyOwner {\n', '        // This simple validation will catch most mistakes without consuming\n', '        // too much gas.\n', '        require(dests.length == values.length);\n', '\n', '        for (uint256 i = 0; i < dests.length; i++) {\n', '            token.transfer(dests[i], values[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return all tokens back to owner, in case any were accidentally\n', '     *   transferred to this contract.\n', '     */\n', '    function returnTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy this contract and recover any ether to the owner.\n', '     */\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(msg.sender);\n', '    }\n', '}']