['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    \n', '    function multiplication(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '  // integer division of two numbers, truncating the quotient\n', '  function division(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  // subtracts two numbers , throws an overflow\n', '  function subtraction(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function addition(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', 'ownable contract has an owner address & provides basic authorization control\n', 'functions, this simplifies the implementation of the user permission\n', '**/\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // constructor sets the original owner of the contract to the sender account\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // throws if called by any account other than the owner\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  allows the current owner to transfer control of the contract to a new owner\n', '  newOwner: the address to transfer ownership to\n', '  **/\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// ERC20 basic interface\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// basic version of standard token with no allowances\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '\n', '  // total numbers of tokens in existence\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  _to: address to transfer to\n', '  _value: amoutn to be transferred\n', '  **/\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].subtraction(_value);\n', '    balances[_to] = balances[_to].addition(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  gets the balance of the specified address\n', '  _owner: address to query the balance of\n', '  return: uint256 representing the amount owned by the passed address\n', '  **/\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '  transfers tokens from one address to another\n', '  _from address: address which you want to send tokens from\n', '  _to address: address which you want to transfer to\n', '  _value uint256: amount of tokens to be transferred\n', '  **/\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].subtraction(_value);\n', '    balances[_to] = balances[_to].addition(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].subtraction(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  approve the passed address to spend the specific amount of tokens on behalf of msg.sender\n', '  _spender: address which will spend the funds\n', '  _value: amount of tokens to be spent\n', '  **/\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  to check the amount of tokens that an owner allowed to a _spender\n', '  _owner address: address which owns the funds\n', '  _spender address: address which will spend the funds\n', '  return: specifying the amount of tokens still available for the spender\n', '  **/\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  increase amount of tokens that an owner allowed to a _spender\n', '  _spender: address which will spend the funds\n', '  _addedValue:  amount of tokens to increase the allowance by\n', '  **/\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].addition(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.subtraction(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Configurable {\n', '  uint256 public constant cap = 1000000*10**18;\n', '  uint256 public constant basePrice = 100*10**18; // tokens per 1 ETH\n', '  uint256 public tokensSold = 0;\n', '\n', '  uint256 public constant tokenReserve = 1000000*10**18;\n', '  uint256 public remainingTokens = 0;\n', '}\n', '\n', 'contract CrowdSaleToken is StandardToken, Configurable, Ownable {\n', '  // enum of current crowdSale state\n', '  enum Stages {\n', '    none,\n', '    icoStart,\n', '    icoEnd\n', '  }\n', '\n', '  Stages currentStage;\n', '\n', '  // constructor of CrowdSaleToken\n', '  constructor() public {\n', '    currentStage = Stages.none;\n', '    balances[owner] = balances[owner].addition(tokenReserve);\n', '    totalSupply_ = totalSupply_.addition(tokenReserve);\n', '    remainingTokens = cap;\n', '    emit Transfer(address(this), owner, tokenReserve);\n', '  }\n', '\n', '  // fallback function to send ether too for CrowdSale\n', '  function() public payable {\n', '    require(currentStage == Stages.icoStart);\n', '    require(msg.value > 0);\n', '    require(remainingTokens > 0);\n', '\n', '    uint256 weiAmount = msg.value; // calculate tokens to sell\n', '    uint256 tokens = weiAmount.multiplication(basePrice).division(1 ether);\n', '    uint256 returnWei = 0;\n', '\n', '    if(tokensSold.addition(tokens) > cap) {\n', '      uint256 newTokens = cap.subtraction(tokensSold);\n', '      uint256 newWei = newTokens.division(basePrice).multiplication(1 ether);\n', '      returnWei = weiAmount.subtraction(newWei);\n', '      weiAmount = newWei;\n', '      tokens = newTokens;\n', '    }\n', '\n', '    tokensSold = tokensSold.addition(tokens); // increment raised amount\n', '    remainingTokens = cap.subtraction(tokensSold);\n', '\n', '    if(returnWei > 0) {\n', '      msg.sender.transfer(returnWei);\n', '      emit Transfer(address(this), msg.sender, returnWei);\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].addition(tokens);\n', '    emit Transfer(address(this), msg.sender, tokens);\n', '    totalSupply_ = totalSupply_.addition(tokens);\n', '    owner.transfer(weiAmount); // send money to owner\n', '    }\n', '\n', '    // starts the ICO\n', '    function startIco() public onlyOwner {\n', '      require(currentStage != Stages.icoEnd);\n', '      currentStage = Stages.icoStart;\n', '    }\n', '\n', '    // ends the ICO\n', '    function endIco() internal {\n', '      currentStage = Stages.icoEnd;\n', '      // transfer any remaining tokens\n', '      if(remainingTokens > 0) {\n', '        balances[owner] = balances[owner].addition(remainingTokens);\n', '      }\n', '      // transfer any remaining ETH to the owner\n', '      owner.transfer(address(this).balance);\n', '    }\n', '\n', '    // finishes the ICO\n', '    function finalizeIco() public onlyOwner {\n', '      require(currentStage != Stages.icoEnd);\n', '      endIco();\n', '    }\n', '}\n', '// Contract to create the token\n', 'contract MementoToken is CrowdSaleToken {\n', '  string public constant name = "Memento";\n', '  string public constant symbol = "MTX";\n', '  uint32 public constant decimals = 18;\n', '}']