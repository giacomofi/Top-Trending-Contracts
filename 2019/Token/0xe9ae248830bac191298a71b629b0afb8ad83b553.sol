['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Luxury Goods Exchange' contract\n", '//\n', '// Deployed to : 0x219690C50d3489D6a279362a920dC67120545fac\n', '// Symbol      : LUX\n', '// Name        : Luxury Goods Coin\n', '// Total supply: 5000000000\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);   // Update total supply with the decimal amount -- wei\n', '        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n', '        name = tokenName;                                       // Set the name for display purposes\n', '        symbol = tokenSymbol;                                  // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/*************************************************/\n', '/**  Author   : HqAD07                          **/\n', '/**  Contents : LuxuryGoods Crypto Currency     **/\n', '/**  Date     : 2019. 05 ~                      **/\n', '/*************************************************/\n', '\n', 'contract LuxuryGoodsCoin is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice = 20180418134311;        // Initialization with default value\n', '    uint256 public buyPrice = 1000000000000000000;    // Initialization with default value\n', '\tuint256 public limitAMT = 0;\n', '\tbool public isPreSales = false;\n', '\n', '\n', '     mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function LuxuryGoodsCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '\t/// @notice Start presales with initializing presales amount\n', '\t/// @param amtPreSales The amount of presales\n', '    function startPreSales(uint256 amtPreSales) onlyOwner public returns (uint256) {\n', '\t    require (balanceOf[owner] - amtPreSales > 0);\n', '        limitAMT = balanceOf[owner] - amtPreSales;\n', '\t\tisPreSales = true;\n', '\t\treturn limitAMT;\n', '\t}\n', '\n', '\t/// @notice Stop presales with setting state variable\n', '    function stopPreSales() onlyOwner public {\n', '\t    isPreSales = false;\n', '\t}\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '/*************************************************************\n', '//////////////////////////////////////////////////////////////\n', '///    function buy() payable public {\n', '///        uint amount = msg.value / buyPrice;               // calculates the amount\n', '///        _transfer(this, msg.sender, amount);              // makes the transfers\n', '///    }\n', '//////////////////////////////////////////////////////////////\n', '*************************************************************/\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '/*************************************************************\n', '//////////////////////////////////////////////////////////////\n', '///    function sell(uint256 amount) public {\n', '///        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '///        _transfer(msg.sender, this, amount);              // makes the transfers\n', "///        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '///    }\n', '//////////////////////////////////////////////////////////////\n', '*************************************************************/\n', '\n', '    /// @notice Get LuxuryGoodsCoin transaction amount\n', '\t/// @param amtETH The amount of ether to convert with LuxuryGoodsCoin\n', '\tfunction getLuxAMT(uint256 amtETH) public constant returns (uint256) {\n', '        uint256 amount = amtETH / buyPrice;                    \n', '        amount = amount * 10 ** uint256(decimals);             \n', '\t\treturn amount;\n', '\t}\n', '\n', '\t/// @notice Get the balance of LuxuryGoodsCoin\n', '\tfunction getBalanceLux() public constant returns (uint256) {\n', '\t    uint256 balLUX;\n', '\t\tbalLUX = balanceOf[msg.sender];\n', '\t\treturn balLUX;\n', '\t}\n', '\n', '\tfunction getSalesPrice() public constant returns (uint256) {\n', '\t\treturn buyPrice;\n', '\t}\n', '\n', '\tfunction getLeftPreSalesAMT() public constant returns (uint256) {\n', '\t    uint256 leftPSAMT;\n', '\t\tleftPSAMT = balanceOf[owner] - limitAMT;\n', '\t\treturn leftPSAMT;\n', '\t}\n', '\n', '    /// @notice Process presales transactions\n', '    function procPreSales() payable public returns (uint256) {\n', '        require (isPreSales == true);\n', '        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n', '        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n', '\t    if ( balanceOf[owner] - amount <= limitAMT ){\n', '\t\t    isPreSales = false;\n', '\t\t}\n', '        _transfer(owner, msg.sender, amount);\n', '\t\towner.transfer(msg.value);\n', '\t\treturn amount;\n', '    }\n', '\n', '\t/// @notice Process normal sales transactions\n', '    function procNormalSales() payable public returns (uint256) {\n', '        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n', '        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n', '        _transfer(owner, msg.sender, amount);\n', '\t\towner.transfer(msg.value);\n', '\t\treturn amount;\n', '    }\n', '\n', "\t/// @notice Process owner's buyback\n", "\t/// @param seller Seller's EOA account address\n", '    function procNormalBuyBack(address seller) onlyOwner payable public returns (uint256) {\n', '        uint256 amount = msg.value / buyPrice;                 // calculates the amount\n', '        amount = amount * 10 ** uint256(decimals);             // calculates the amount\n', '        _transfer(seller, msg.sender, amount);\n', '\t\tseller.transfer(msg.value);\n', '\t\treturn amount;\n', '    }\n', '\n', '}']