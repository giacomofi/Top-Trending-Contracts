['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '    uint256 internal totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '        return _a / _b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', 'library ArrayUtils {\n', '    function findUpperBound(uint256[] storage _array, uint256 _element) internal view returns (uint256) {\n', '        uint256 low = 0;\n', '        uint256 high = _array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            if (_array[mid] > _element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '        // At this point at `low` is the exclusive upper bound. We will return the inclusive upper bound.\n', '\n', '        if (low > 0 && _array[low - 1] == _element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '    struct WhitelistInfo {\n', '        bool inWhitelist;\n', '        uint256 index;  //index in whitelistAddress\n', '        uint256 time;   //timestamp when added to whitelist\n', '    }\n', '\n', '    mapping (address => WhitelistInfo) public whitelist;\n', '    address[] public whitelistAddresses;\n', '\n', '    event AddWhitelist(address indexed operator, uint256 indexInWhitelist);\n', '    event RemoveWhitelist(address indexed operator, uint256 indexInWhitelist);\n', '\n', '    /**\n', '    * @dev Throws if operator is not whitelisted.\n', '    * @param _operator address\n', '    */\n', '    modifier onlyIfWhitelisted(address _operator) {\n', '        require(inWhitelist(_operator) == true, "not whitelisted.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev add an address to the whitelist\n', '     * @param _operator address\n', '     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '     */\n', '    function addAddressToWhitelist(address _operator)\n', '        public\n', '        onlyOwner\n', '        returns(bool)\n', '    {\n', '        WhitelistInfo storage whitelistInfo_ = whitelist[_operator];\n', '\n', '        if (inWhitelist(_operator) == false) {\n', '            whitelistAddresses.push(_operator);\n', '\n', '            whitelistInfo_.inWhitelist = true;\n', '            whitelistInfo_.time = block.timestamp;\n', '            whitelistInfo_.index = whitelistAddresses.length-1;\n', '\n', '            emit AddWhitelist(_operator, whitelistAddresses.length-1);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev add addresses to the whitelist\n', '     * @param _operators addresses\n', '     */\n', '    function addAddressesToWhitelist(address[] _operators)\n', '        public\n', '        onlyOwner\n', '    {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            addAddressToWhitelist(_operators[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address from the whitelist\n', '    * @param _operator address\n', '    * @return true if the address was removed from the whitelist,\n', "    * false if the address wasn't in the whitelist in the first place\n", '    */\n', '    function removeAddressFromWhitelist(address _operator)\n', '        public\n', '        onlyOwner\n', '        returns(bool)\n', '    {\n', '        if (inWhitelist(_operator) == true) {\n', '            uint256 whitelistIndex_ = whitelist[_operator].index;\n', '            removeItemFromWhitelistAddresses(whitelistIndex_);\n', '            whitelist[_operator] = WhitelistInfo(false, 0, 0);\n', '\n', '            emit RemoveWhitelist(_operator, whitelistIndex_);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function removeItemFromWhitelistAddresses(uint256 _index) private {\n', '        address lastWhitelistAddr = whitelistAddresses[whitelistAddresses.length-1];\n', '        WhitelistInfo storage lastWhitelistInfo = whitelist[lastWhitelistAddr];\n', '\n', '        //move last whitelist to the deleted slot\n', '        whitelistAddresses[_index] = whitelistAddresses[whitelistAddresses.length-1];\n', '        lastWhitelistInfo.index = _index;\n', '        delete whitelistAddresses[whitelistAddresses.length-1];\n', '        whitelistAddresses.length--;\n', '    }\n', '\n', '    /**\n', '     * @dev remove addresses from the whitelist\n', '     * @param _operators addresses\n', '     */\n', '    function removeAddressesFromWhitelist(address[] _operators)\n', '        public\n', '        onlyOwner\n', '    {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            removeAddressFromWhitelist(_operators[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev check if the given address already in whitelist.\n', '    * @return return true if in whitelist.\n', '    */\n', '    function inWhitelist(address _operator)\n', '        public\n', '        view\n', '        returns(bool)\n', '    {\n', '        return whitelist[_operator].inWhitelist;\n', '    }\n', '\n', '    function getWhitelistCount() public view returns(uint256) {\n', '        return whitelistAddresses.length;\n', '    }\n', '\n', '    function getAllWhitelist() public view returns(address[]) {\n', '        address[] memory allWhitelist = new address[](whitelistAddresses.length);\n', '        for (uint256 i = 0; i < whitelistAddresses.length; i++) {\n', '            allWhitelist[i] = whitelistAddresses[i];\n', '        }\n', '        return allWhitelist;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SnapshotToken\n', ' *\n', " * @dev An ERC20 token which enables taking snapshots of accounts' balances.\n", ' * @dev This can be useful to safely implement voting weighed by balance.\n', ' */\n', 'contract SnapshotToken is StandardToken {\n', '    using ArrayUtils for uint256[];\n', '\n', '    // The 0 id represents no snapshot was taken yet.\n', '    uint256 public currSnapshotId;\n', '\n', '    mapping (address => uint256[]) internal snapshotIds;\n', '    mapping (address => uint256[]) internal snapshotBalances;\n', '\n', '    event Snapshot(uint256 id);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _updateSnapshot(msg.sender);\n', '        _updateSnapshot(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        _updateSnapshot(_from);\n', '        _updateSnapshot(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function snapshot() public returns (uint256) {\n', '        currSnapshotId += 1;\n', '        emit Snapshot(currSnapshotId);\n', '        return currSnapshotId;\n', '    }\n', '\n', '    function balanceOfAt(address _account, uint256 _snapshotId) public view returns (uint256) {\n', '        require(_snapshotId > 0 && _snapshotId <= currSnapshotId);\n', '\n', '        uint256 idx = snapshotIds[_account].findUpperBound(_snapshotId);\n', '\n', '        if (idx == snapshotIds[_account].length) {\n', '            return balanceOf(_account);\n', '        } else {\n', '            return snapshotBalances[_account][idx];\n', '        }\n', '    }\n', '\n', '    function _updateSnapshot(address _account) internal {\n', '        if (_lastSnapshotId(_account) < currSnapshotId) {\n', '            snapshotIds[_account].push(currSnapshotId);\n', '            snapshotBalances[_account].push(balanceOf(_account));\n', '        }\n', '    }\n', '\n', '    function _lastSnapshotId(address _account) internal view returns (uint256) {\n', '        uint256[] storage snapshots = snapshotIds[_account];\n', '\n', '        if (snapshots.length == 0) {\n', '            return 0;\n', '        } else {\n', '            return snapshots[snapshots.length - 1];\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract BBT is BurnableToken, PausableToken, SnapshotToken, Whitelist {\n', '    string public constant symbol = "BBT";\n', '    string public constant name = "BonBon Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 private overrideTotalSupply_ = 10 * 1e9 * 1e18; //10 billion\n', '\n', '    uint256 public circulation;\n', '    uint256 public minedAmount;\n', '    address public teamWallet;\n', '    uint256 public constant gameDistributionRatio = 35; //35%\n', '    uint256 public constant teamReservedRatio = 15;     //15%\n', '\n', '    mapping (uint256 => uint256) private snapshotCirculations_;   //snapshotId => circulation\n', '\n', '    event Mine(address indexed from, address indexed to, uint256 amount);\n', '    event Release(address indexed from, address indexed to, uint256 amount);\n', '    event SetTeamWallet(address indexed from, address indexed teamWallet);\n', '    event UnlockTeamBBT(address indexed teamWallet, uint256 amount, string source);\n', '\n', '    /**\n', '     * @dev make sure unreleased BBT is enough.\n', '     */\n', '    modifier hasEnoughUnreleasedBBT(uint256 _amount) {\n', '        require(circulation.add(_amount) <= totalSupply_, "Unreleased BBT not enough.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev make sure dev team wallet is set.\n', '     */\n', '    modifier hasTeamWallet() {\n', '        require(teamWallet != address(0), "Team wallet not set.");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        totalSupply_ = overrideTotalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev make snapshot.\n', '     */\n', '    function snapshot()\n', '        onlyIfWhitelisted(msg.sender)\n', '        whenNotPaused\n', '        public\n', '        returns(uint256)\n', '    {\n', '        currSnapshotId += 1;\n', '        snapshotCirculations_[currSnapshotId] = circulation;\n', '        emit Snapshot(currSnapshotId);\n', '        return currSnapshotId;\n', '    }\n', '\n', '    /**\n', '     * @dev get BBT circulation by snapshot id.\n', '     * @param _snapshotId snapshot id.\n', '     */\n', '    function circulationAt(uint256 _snapshotId)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_snapshotId > 0 && _snapshotId <= currSnapshotId, "invalid snapshot id.");\n', '        return snapshotCirculations_[_snapshotId];\n', '    }\n', '\n', '    /**\n', '     * @dev setup team wallet.\n', '     * @param _address address of team wallet.\n', '     */\n', '    function setTeamWallet(address _address)\n', '        onlyOwner\n', '        whenNotPaused\n', '        public\n', '        returns (bool)\n', '    {\n', '        teamWallet = _address;\n', '        emit SetTeamWallet(msg.sender, _address);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev for authorized dapp mining BBT.\n', '     * @param _to to which address BBT send to.\n', '     * @param _amount how many BBT send.\n', '     */\n', '    function mine(address _to, uint256 _amount)\n', '        onlyIfWhitelisted(msg.sender)\n', '        whenNotPaused\n', '        public\n', '        returns (bool)\n', '    {\n', '        //use return instead of require. avoid blocking game\n', '        if (circulation.add(_amount) > totalSupply_)\n', '            return true;\n', '\n', '        if (minedAmount.add(_amount) > (totalSupply_.mul(gameDistributionRatio)).div(100))\n', '            return true;\n', '\n', '        releaseBBT(_to, _amount);\n', '        minedAmount = minedAmount.add(_amount);\n', '\n', '        //unlock dev team bbt\n', "        unlockTeamBBT(getTeamUnlockAmountHelper(_amount), 'mine');\n", '\n', '        emit Mine(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev owner release BBT to specified address.\n', '     * @param _to which address release to.\n', '     * @param _amount how many BBT release to.\n', '     */\n', '    function release(address _to, uint256 _amount)\n', '        onlyOwner\n', '        hasEnoughUnreleasedBBT(_amount)\n', '        whenNotPaused\n', '        public\n', '        returns(bool)\n', '    {\n', '        releaseBBT(_to, _amount);\n', '        emit Release(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev owner release BBT and unlock corresponding ratio to dev team wallet.\n', '     * @param _to which address release to.\n', '     * @param _amount how many BBT release to.\n', '     */\n', '    function releaseAndUnlock(address _to, uint256 _amount)\n', '        onlyOwner\n', '        hasEnoughUnreleasedBBT(_amount)\n', '        whenNotPaused\n', '        public\n', '        returns(bool)\n', '    {\n', '        release(_to, _amount);\n', '\n', '        //unlock dev team bbt\n', "        unlockTeamBBT(getTeamUnlockAmountHelper(_amount), 'release');\n", '\n', '        return true;\n', '    }\n', '\n', '    function getTeamUnlockAmountHelper(uint256 _amount)\n', '        private\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return _amount.mul(teamReservedRatio).div(100 - teamReservedRatio);\n', '    }\n', '\n', '    function unlockTeamBBT(uint256 _unlockAmount, string _source)\n', '        hasTeamWallet\n', '        hasEnoughUnreleasedBBT(_unlockAmount)\n', '        private\n', '        returns(bool)\n', '    {\n', '        releaseBBT(teamWallet, _unlockAmount);\n', '        emit UnlockTeamBBT(teamWallet, _unlockAmount, _source);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev update balance and circulation.\n', '     */\n', '    function releaseBBT(address _to, uint256 _amount)\n', '        hasEnoughUnreleasedBBT(_amount)\n', '        private\n', '        returns(bool)\n', '    {\n', '        super._updateSnapshot(msg.sender);\n', '        super._updateSnapshot(_to);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        circulation = circulation.add(_amount);\n', '    }\n', '}']