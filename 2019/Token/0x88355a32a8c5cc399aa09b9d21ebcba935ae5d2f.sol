['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeSub(int a, int b) internal pure returns (int) {\n', '        if (b < 0) assert(a - b > a);\n', '        else assert(a - b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '    function transfer(address receiver, uint amount) public returns (bool) {\n', '        (receiver);\n', '        (amount);\n', '        return false;\n', '    }\n', '\n', '    function balanceOf(address holder) public view returns (uint) {\n', '        (holder);\n', '        return 0;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        (_spender);\n', '        (_value);\n', '        return false;\n', '    }\n', '}\n', '\n', '\n', 'contract Casino {\n', '    function deposit(address _receiver, uint _amount, bool _chargeGas) public;\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public receiver;\n', '    mapping (address => bool) public moderator;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyModerator {\n', '        require(moderator[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(moderator[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '        receiver = msg.sender;\n', '    }\n', '\n', '    function setOwner(address _address) public onlyOwner {\n', '        owner = _address;\n', '    }\n', '\n', '    function setReceiver(address _address) public onlyAdmin {\n', '        receiver = _address;\n', '    }\n', '\n', '    function addModerator(address _address) public onlyOwner {\n', '        moderator[_address] = true;\n', '    }\n', '\n', '    function removeModerator(address _address) public onlyOwner {\n', '        moderator[_address] = false;\n', '    }\n', '}\n', '\n', '\n', 'contract RequiringAuthorization is Owned {\n', '    mapping(address => bool) public authorized;\n', '\n', '    modifier onlyAuthorized {\n', '        require(authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    constructor() internal {\n', '        authorized[msg.sender] = true;\n', '    }\n', '\n', '    function authorize(address _address) public onlyAdmin {\n', '        authorized[_address] = true;\n', '    }\n', '\n', '    function deauthorize(address _address) public onlyAdmin {\n', '        authorized[_address] = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Owned {\n', '    bool public paused = false;\n', '\n', '    event Paused(bool _paused);\n', '\n', '    modifier onlyPaused {\n', '        require(paused == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyActive {\n', '        require(paused == false);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyActive onlyAdmin {\n', '        paused = true;\n', '    }\n', '\n', '    function activate() public onlyPaused onlyOwner {\n', '        paused = false;\n', '    }\n', '}\n', '\n', '\n', 'contract BankWallet is Pausable, RequiringAuthorization, SafeMath {\n', '    address public edgelessToken;\n', '    address public edgelessCasino;\n', '\n', '    uint public maxFundAmount = 0.22 ether;\n', '\n', '    event Withdrawal(address _token, uint _amount);\n', '    event Deposit(address _receiver, uint _amount);\n', '    event Fund(address _receiver, uint _amount);\n', '\n', '    constructor(address _token, address _casino) public {\n', '        edgelessToken = _token;\n', '        edgelessCasino = _casino;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function () public payable {}\n', '\n', '    function withdraw(address _token, uint _amount) public onlyAdmin returns (bool _success) {\n', '        _success = false;\n', '        if (_token == address (0)) {\n', '            uint weiAmount = _amount;\n', '            if (weiAmount > address(this).balance) {\n', '                return false;\n', '            }\n', '            _success = receiver.send(weiAmount);\n', '        } else {\n', '            Token __token = Token(_token);\n', '            uint amount = _amount;\n', '            if (amount > __token.balanceOf(this)) {\n', '                return false;\n', '            }\n', '            _success = __token.transfer(receiver, amount);\n', '        }\n', '\n', '        if (_success) {\n', '            emit Withdrawal(_token, _amount);\n', '        }\n', '    }\n', '\n', '    function approve(uint _amount) public onlyAuthorized {\n', '        _approveForCasino(edgelessCasino, _amount);\n', '    }\n', '\n', '    function deposit(address _address, uint _amount, bool _chargeGas) public onlyAuthorized {\n', '        Casino __casino = Casino(edgelessCasino);\n', '        __casino.deposit(_address, _amount, _chargeGas);\n', '        emit Deposit(_address, _amount);\n', '    }\n', '\n', '    function fund(address _address, uint _amount) public onlyAuthorized returns (bool _success) {\n', '        require(_amount <= maxFundAmount);\n', '        _success = _address.send(_amount);\n', '        if (_success) {\n', '            emit Fund(_address, _amount);\n', '        }\n', '    }\n', '\n', '    function setCasinoContract(address _casino) public onlyAdmin {\n', '        edgelessCasino = _casino;\n', '        _approveForCasino(_casino, 1000000000);\n', '    }\n', '\n', '    function setMaxFundAmount(uint _amount) public onlyAdmin {\n', '        maxFundAmount = _amount;\n', '    }\n', '\n', '    function _approveForCasino(address _address, uint _amount) internal returns (bool _success) {\n', '        Token __token = Token(edgelessToken);\n', '        _success = __token.approve(_address, _amount);\n', '    }\n', '\n', '}']