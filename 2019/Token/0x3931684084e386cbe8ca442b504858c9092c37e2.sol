['pragma solidity^0.5.1;\n', '\n', 'contract CoshToken {\n', '    string public name = "CoshToken";\n', '    string public symbol = "COSH";\n', '    uint8 public decimals = 18;\n', '    string public standard = "Cosh Token v1.0";\n', '    address public tokenOwner = 0x01dd2A4C633380C335eed15E54FAD96ae4DD9058;\n', '    uint256 public tokenPrice = 680000000000000; // in wei = $0.1\n', '    uint256 public totalSupply;\n', '    \n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '    \n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => mapping(address =>uint256)) public allowance;\n', '\n', '    constructor (uint256 _totalSupply) public {\n', '        totalSupply = _totalSupply;\n', '        balanceOf[tokenOwner] = totalSupply;\n', '    }\n', '\n', '    // Transfer\n', '    function transfer(address _to, uint256 _value) public returns (bool _success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    // approve\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // allowence\n', '        allowance[msg.sender][_spender] = _value;\n', '        // Approve event\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // Transferfrom\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        allowance[_from][msg.sender] -= _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    } \n', '}']