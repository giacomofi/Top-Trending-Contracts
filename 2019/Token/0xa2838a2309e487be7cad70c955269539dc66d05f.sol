['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address internal owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == owner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title   Token\n', '/// @author  Jose Perez - <jose.perez@diginex.com>\n', '/// @notice  ERC20 token\n', '/// @dev     The contract allows to perform a number of token sales in different periods in time.\n', '///          allowing participants in previous token sales to transfer tokens to other accounts.\n', '///          Additionally, token locking logic for KYC/AML compliance checking is supported.\n', '\n', 'contract Token is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "TSX";\n', '    string public constant symbol = "TSX";\n', '    uint256 public constant decimals = 9;\n', '\n', '    // Using same number of decimal figures as ETH (i.e. 18).\n', '    uint256 public constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '\n', '    // Maximum number of tokens in circulation\n', '    uint256 public constant MAX_TOKEN_SUPPLY = 10000000000 * TOKEN_UNIT;\n', '\n', '    // Maximum size of the batch functions input arrays.\n', '    uint256 public constant MAX_BATCH_SIZE = 400;\n', '\n', '//    address public assigner;    // The address allowed to assign or mint tokens during token sale.\n', '    address public locker;      // The address allowed to lock/unlock addresses.\n', '\n', "    mapping(address => bool) public locked;        // If true, address' tokens cannot be transferred.\n", '    mapping(address => bool) public alwLockTx;\n', '\n', '    mapping(address => TxRecord[]) public txRecordPerAddress;\n', '\n', '    mapping(address => uint) public chainStartIdxPerAddress;\n', '    mapping(address => uint) public chainEndIdxPerAddress;\n', '\n', '    struct TxRecord {\n', '        uint amount;\n', '        uint releaseTime;\n', '        uint nextIdx;\n', '        uint prevIdx;\n', '    }\n', '\n', '    event Lock(address indexed addr);\n', '    event Unlock(address indexed addr);\n', '    event Assign(address indexed to, uint256 amount);\n', '    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\n', '//    event AssignerTransferred(address indexed previousAssigner, address indexed newAssigner);\n', '\n', '    /// @dev Constructor that initializes the contract.\n', '    constructor() public {\n', '        locker = owner;\n', '        balances[owner] = balances[owner].add(MAX_TOKEN_SUPPLY);\n', '        recop(owner, MAX_TOKEN_SUPPLY, 0);\n', '        totalSupply_ = MAX_TOKEN_SUPPLY;\n', '        alwLT(owner, true);\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the locker.\n', '    modifier onlyLocker() {\n', '        require(msg.sender == locker);\n', '        _;\n', '    }\n', '\n', '    function isLocker() public view returns (bool) {\n', '        return msg.sender == locker;\n', '    }\n', '\n', '\n', '    /// @dev Allows the current owner to change the locker.\n', '    /// @param _newLocker The address of the new locker.\n', '    /// @return True if the operation was successful.\n', '    function transferLocker(address _newLocker) external onlyOwner returns (bool) {\n', '        require(_newLocker != address(0));\n', '\n', '        emit LockerTransferred(locker, _newLocker);\n', '        locker = _newLocker;\n', '        return true;\n', '    }\n', '\n', '    function alwLT(address _address, bool _enable) public onlyLocker returns (bool) {\n', '        alwLockTx[_address] = _enable;\n', '        return true;\n', '    }\n', '\n', '    function alwLTBatches(address[] _addresses, bool _enable) external onlyLocker returns (bool) {\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            alwLT(_addresses[i], _enable);\n', '        }\n', '        return true;\n', '    }\n', '\n', "    /// @dev Locks an address. A locked address cannot transfer its tokens or other addresses' tokens out.\n", '    ///      Only addresses participating in the current token sale can be locked.\n', '    ///      Only the locker account can lock addresses and only during the token sale.\n', '    /// @param _address address The address to lock.\n', '    /// @return True if the operation was successful.\n', '    function lockAddress(address _address) public onlyLocker returns (bool) {\n', '        require(!locked[_address]);\n', '\n', '        locked[_address] = true;\n', '        emit Lock(_address);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Unlocks an address so that its owner can transfer tokens out again.\n', '    ///      Addresses can be unlocked any time. Only the locker account can unlock addresses\n', '    /// @param _address address The address to unlock.\n', '    /// @return True if the operation was successful.\n', '    function unlockAddress(address _address) public onlyLocker returns (bool) {\n', '        require(locked[_address]);\n', '\n', '        locked[_address] = false;\n', '        emit Unlock(_address);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Locks several addresses in one single call.\n', '    /// @param _addresses address[] The addresses to lock.\n', '    /// @return True if the operation was successful.\n', '    function lockInBatches(address[] _addresses) external onlyLocker returns (bool) {\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            lockAddress(_addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Unlocks several addresses in one single call.\n', '    /// @param _addresses address[] The addresses to unlock.\n', '    /// @return True if the operation was successful.\n', '    function unlockInBatches(address[] _addresses) external onlyLocker returns (bool) {\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length <= MAX_BATCH_SIZE);\n', '\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            unlockAddress(_addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Checks whether or not the given address is locked.\n', '    /// @param _address address The address to be checked.\n', '    /// @return Boolean indicating whether or not the address is locked.\n', '    function isLocked(address _address) external view returns (bool) {\n', '        return locked[_address];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!locked[msg.sender]);\n', '        require(_to != address(0));\n', '        return transferFT(msg.sender, _to, _value, 0);\n', '    }\n', '\n', '    function transferL(address _to, uint256 _value, uint256 lTime) public returns (bool) {\n', '        require(alwLockTx[msg.sender]);\n', '        require(!locked[msg.sender]);\n', '        require(_to != address(0));\n', '        return transferFT(msg.sender, _to, _value, lTime);\n', '    }\n', '\n', '    function getRecordInfo(address addr, uint256 index) external onlyOwner view returns (uint, uint, uint, uint) {\n', '        TxRecord memory tr = txRecordPerAddress[addr][index];\n', '        return (tr.amount, tr.prevIdx, tr.nextIdx, tr.releaseTime);\n', '    }\n', '\n', '    function delr(address _address, uint256 index) public onlyOwner returns (bool) {\n', '        require(index < txRecordPerAddress[_address].length);\n', '        TxRecord memory tr = txRecordPerAddress[_address][index];\n', '        if (index == chainStartIdxPerAddress[_address]) {\n', '            chainStartIdxPerAddress[_address] = tr.nextIdx;\n', '        } else if (index == chainEndIdxPerAddress[_address]) {\n', '            chainEndIdxPerAddress[_address] = tr.prevIdx;\n', '        } else {\n', '            txRecordPerAddress[_address][tr.prevIdx].nextIdx = tr.nextIdx;\n', '            txRecordPerAddress[_address][tr.nextIdx].prevIdx = tr.prevIdx;\n', '        }\n', '        delete txRecordPerAddress[_address][index];\n', '        balances[_address] = balances[_address].sub(tr.amount);\n', '        return true;\n', '    }\n', '\n', '    function resetTime(address _address, uint256 index, uint256 lTime) external onlyOwner returns (bool) {\n', '        require(index < txRecordPerAddress[_address].length);\n', '        TxRecord memory tr = txRecordPerAddress[_address][index];\n', '        delr(_address, index);\n', '        recop(_address, tr.amount, lTime);\n', '        balances[_address] = balances[_address].add(tr.amount);\n', '        return true;\n', '    }\n', '\n', '    function payop(address _from, uint needTakeout) private {\n', '        TxRecord memory txRecord;\n', '        for (uint idx = chainEndIdxPerAddress[_from]; true; idx = txRecord.prevIdx) {\n', '            txRecord = txRecordPerAddress[_from][idx];\n', '            if (now < txRecord.releaseTime)\n', '                break;\n', '            if (txRecord.amount <= needTakeout) {\n', '                chainEndIdxPerAddress[_from] = txRecord.prevIdx;\n', '                delete txRecordPerAddress[_from][idx];\n', '                needTakeout = needTakeout.sub(txRecord.amount);\n', '            } else {\n', '                txRecordPerAddress[_from][idx].amount = txRecord.amount.sub(needTakeout);\n', '                needTakeout = 0;\n', '                break;\n', '            }\n', '            if (idx == chainStartIdxPerAddress[_from]) {\n', '                break;\n', '            }\n', '        }\n', '        require(needTakeout == 0);\n', '    }\n', '\n', '    function recop(address _to, uint256 _value, uint256 lTime) private {\n', '        if (txRecordPerAddress[_to].length < 1) {\n', '            txRecordPerAddress[_to].push(TxRecord({amount : _value, releaseTime : now.add(lTime), nextIdx : 0, prevIdx : 0}));\n', '            chainStartIdxPerAddress[_to] = 0;\n', '            chainEndIdxPerAddress[_to] = 0;\n', '            return;\n', '        }\n', '        uint startIndex = chainStartIdxPerAddress[_to];\n', '        uint endIndex = chainEndIdxPerAddress[_to];\n', '        if (lTime == 0 && txRecordPerAddress[_to][endIndex].releaseTime < now) {\n', '            txRecordPerAddress[_to][endIndex].amount = txRecordPerAddress[_to][endIndex].amount.add(_value);\n', '            return;\n', '        }\n', '        TxRecord memory utxo = TxRecord({amount : _value, releaseTime : now.add(lTime), nextIdx : 0, prevIdx : 0});\n', '        for (uint idx = startIndex; true; idx = txRecordPerAddress[_to][idx].nextIdx) {\n', '            if (utxo.releaseTime < txRecordPerAddress[_to][idx].releaseTime) {\n', '                if (idx == chainEndIdxPerAddress[_to]) {\n', '                    utxo.prevIdx = idx;\n', '                    txRecordPerAddress[_to].push(utxo);\n', '                    txRecordPerAddress[_to][idx].nextIdx = txRecordPerAddress[_to].length - 1;\n', '                    chainEndIdxPerAddress[_to] = txRecordPerAddress[_to].length - 1;\n', '                    return;\n', '                } else if (utxo.releaseTime >= txRecordPerAddress[_to][txRecordPerAddress[_to][idx].nextIdx].releaseTime) {\n', '                    utxo.prevIdx = idx;\n', '                    utxo.nextIdx = txRecordPerAddress[_to][idx].nextIdx;\n', '                    txRecordPerAddress[_to].push(utxo);\n', '                    txRecordPerAddress[_to][txRecordPerAddress[_to][idx].nextIdx].prevIdx = txRecordPerAddress[_to].length - 1;\n', '                    txRecordPerAddress[_to][idx].nextIdx = txRecordPerAddress[_to].length - 1;\n', '                    return;\n', '                }\n', '            } else {\n', '                if (idx == startIndex) {\n', '                    utxo.nextIdx = idx;\n', '                    txRecordPerAddress[_to].push(utxo);\n', '                    txRecordPerAddress[_to][idx].prevIdx = txRecordPerAddress[_to].length - 1;\n', '                    chainStartIdxPerAddress[_to] = txRecordPerAddress[_to].length - 1;\n', '                    return;\n', '                }\n', '            }\n', '            if (idx == chainEndIdxPerAddress[_to]) {\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferFT(address _from, address _to, uint256 _value, uint256 lTime) private returns (bool) {\n', '        payop(_from, _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        recop(_to, _value, lTime);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function txRecordCount(address add) public onlyOwner view returns (uint){\n', '        return txRecordPerAddress[add].length;\n', '    }\n', '\n', '\n', '    /// @dev Transfers tokens from one address to another. It prevents transferring tokens if the caller is locked or\n', '    ///      if the allowed address is locked.\n', '    ///      Locked addresses can receive tokens.\n', "    ///      Current token sale's addresses cannot receive or send tokens until the token sale ends.\n", '    /// @param _from address The address to transfer tokens from.\n', '    /// @param _to address The address to transfer tokens to.\n', '    /// @param _value The number of tokens to be transferred.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!locked[msg.sender]);\n', '        require(!locked[_from]);\n', '        require(_to != address(0));\n', '        require(_from != _to);\n', '        super.transferFrom(_from, _to, _value);\n', '        return transferFT(_from, _to, _value, 0);\n', '    }\n', '\n', '    function kill() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']