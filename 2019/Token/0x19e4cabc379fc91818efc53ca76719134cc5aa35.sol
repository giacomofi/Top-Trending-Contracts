['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '      \t\treturn 0;\n', '    \t}\n', '\n', '    \tc = a * b;\n', '    \tassert(c / a == b);\n', '    \treturn c;\n', '  \t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \treturn a / b;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    \tc = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '\t}\n', '\t\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal _owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "you are not the owner!");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "cannot transfer ownership to ZERO address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 private _totalSupply;\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= _allowed[from][msg.sender], "the balance is not enough");\n', '    \n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(value <= _balances[from], "the balance is not enough");\n', '        require(to != address(0), "cannot transfer to ZERO address");\n', '        \n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    \n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0), "cannot mint to ZERO address");\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '    \n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "cannot burn from ZERO address");\n', '        require(value <= _balances[account], "the balance is not enough");\n', '        \n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '    \n', '    function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowed[account][msg.sender], "the allowance is not enough");\n', '        \n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '    }\n', '}\n', '\n', 'contract GFToken is ERC20, Ownable {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    \n', '    mapping(address => bool) private _whiteList;\n', '    uint256[] private _tradingOpenTime;\n', '    mapping(address => bool) private _quitLock;\n', '    mapping(bytes32 => bool) private _batchRecord;\n', '    \n', '    constructor(string name, string symbol, uint8 decimals, uint256 _total) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        \n', '        _mint(msg.sender, _total.mul(10 ** uint256(_decimals)));\n', '        _whiteList[msg.sender] = true;\n', '    }\n', '    \n', '    // detail info\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    // transfer ownership and balance\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _whiteList[newOwner] = true;\n', '        super.transfer(newOwner, balanceOf(msg.sender));\n', '        _whiteList[msg.sender] = false;\n', '        super.transferOwnership(newOwner);\n', '    }\n', '    \n', '    // whiteList\n', '    function inWhiteList(address addr) public view returns (bool) {\n', '        return _whiteList[addr];\n', '    }\n', '    \n', '    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\n', '        require(addressArr.length == statusArr.length, "The length of address array is not equal to the length of status array!");\n', '        \n', '        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n', '            _whiteList[addressArr[idx]] = statusArr[idx];\n', '        }\n', '    }\n', '    \n', '    // trading open time\n', '    function setTradingTime(uint256[] times) public onlyOwner {\n', '        require(times.length.mod(2) == 0, "the length of times must be even number");\n', '        \n', '        for(uint256 idx = 0; idx < times.length; idx = idx+2) {\n', '            require(times[idx] < times[idx+1], "end time must be greater than start time");\n', '        }\n', '        _tradingOpenTime = times;\n', '    }\n', '    \n', '    function getTradingTime() public view returns (uint256[]) {\n', '        return _tradingOpenTime;\n', '    }\n', '    \n', '    function inTradingTime() public view returns (bool) {\n', '        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\n', '            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    // quit\n', '    function inQuitLock(address account) public view returns (bool) {\n', '        return _quitLock[account];\n', '    }\n', '    \n', '    function setQuitLock(address account) public onlyOwner {\n', '        require(inWhiteList(account), "account is not in whiteList");\n', '        _quitLock[account] = true;\n', '    }\n', '    \n', '    function removeQuitAccount(address account) public onlyOwner {\n', '        require(inQuitLock(account), "the account is not in quit lock status");\n', '        \n', '        forceTransferBalance(account, _owner, balanceOf(account));\n', '        _whiteList[account] = false;\n', '        _quitLock[account] = false;\n', '    }\n', '    \n', '    // overwrite transfer and transferFrom\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(inWhiteList(msg.sender), "caller is not in whiteList");\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        \n', '        if(!inQuitLock(msg.sender) && !isOwner()) {\n', '            require(inTradingTime(), "now is not trading time");\n', '        }\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(inWhiteList(from), "from address is not in whiteList");\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        \n', '        if(!inQuitLock(msg.sender)) {\n', '            require(inTradingTime(), "now is not trading time");\n', '        }\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '    // force transfer balance\n', '    function forceTransferBalance(address from, address to, uint256 value) public onlyOwner {\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        _transfer(from, to, value);\n', '    }\n', '    \n', '    // repalce account\n', '    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\n', '        require(inWhiteList(oldAccount), "old account is not in whiteList");\n', '        _whiteList[newAccount] = true;\n', '        forceTransferBalance(oldAccount, newAccount, balanceOf(oldAccount));\n', '        _whiteList[oldAccount] = false;\n', '    }\n', '    \n', '    // batch transfer\n', '    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\n', '        require(addressArr.length == valueArr.length, "The length of address array is not equal to the length of value array!");\n', '        require(_batchRecord[batch] == false, "This batch number has already been used!");\n', '        \n', '        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n', '            require(transfer(addressArr[idx], valueArr[idx]));\n', '        }\n', '        \n', '        _batchRecord[batch] = true;\n', '    }\n', '    \n', '    // mint and burn\n', '    function mint(address account, uint256 value) public onlyOwner returns (bool) {\n', '        require(inWhiteList(account), "account is not in whiteList");\n', '        _mint(account, value);\n', '    }\n', '    \n', '    function burn(address account, uint256 value) public onlyOwner returns (bool) {\n', '        _burn(account, value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '      \t\treturn 0;\n', '    \t}\n', '\n', '    \tc = a * b;\n', '    \tassert(c / a == b);\n', '    \treturn c;\n', '  \t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \treturn a / b;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    \tc = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '\t}\n', '\t\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal _owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "you are not the owner!");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "cannot transfer ownership to ZERO address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 private _totalSupply;\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= _allowed[from][msg.sender], "the balance is not enough");\n', '    \n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0), "cannot approve to ZERO address");\n', '    \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(value <= _balances[from], "the balance is not enough");\n', '        require(to != address(0), "cannot transfer to ZERO address");\n', '        \n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    \n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0), "cannot mint to ZERO address");\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '    \n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "cannot burn from ZERO address");\n', '        require(value <= _balances[account], "the balance is not enough");\n', '        \n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '    \n', '    function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowed[account][msg.sender], "the allowance is not enough");\n', '        \n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '    }\n', '}\n', '\n', 'contract GFToken is ERC20, Ownable {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    \n', '    mapping(address => bool) private _whiteList;\n', '    uint256[] private _tradingOpenTime;\n', '    mapping(address => bool) private _quitLock;\n', '    mapping(bytes32 => bool) private _batchRecord;\n', '    \n', '    constructor(string name, string symbol, uint8 decimals, uint256 _total) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        \n', '        _mint(msg.sender, _total.mul(10 ** uint256(_decimals)));\n', '        _whiteList[msg.sender] = true;\n', '    }\n', '    \n', '    // detail info\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    // transfer ownership and balance\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _whiteList[newOwner] = true;\n', '        super.transfer(newOwner, balanceOf(msg.sender));\n', '        _whiteList[msg.sender] = false;\n', '        super.transferOwnership(newOwner);\n', '    }\n', '    \n', '    // whiteList\n', '    function inWhiteList(address addr) public view returns (bool) {\n', '        return _whiteList[addr];\n', '    }\n', '    \n', '    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\n', '        require(addressArr.length == statusArr.length, "The length of address array is not equal to the length of status array!");\n', '        \n', '        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n', '            _whiteList[addressArr[idx]] = statusArr[idx];\n', '        }\n', '    }\n', '    \n', '    // trading open time\n', '    function setTradingTime(uint256[] times) public onlyOwner {\n', '        require(times.length.mod(2) == 0, "the length of times must be even number");\n', '        \n', '        for(uint256 idx = 0; idx < times.length; idx = idx+2) {\n', '            require(times[idx] < times[idx+1], "end time must be greater than start time");\n', '        }\n', '        _tradingOpenTime = times;\n', '    }\n', '    \n', '    function getTradingTime() public view returns (uint256[]) {\n', '        return _tradingOpenTime;\n', '    }\n', '    \n', '    function inTradingTime() public view returns (bool) {\n', '        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\n', '            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    // quit\n', '    function inQuitLock(address account) public view returns (bool) {\n', '        return _quitLock[account];\n', '    }\n', '    \n', '    function setQuitLock(address account) public onlyOwner {\n', '        require(inWhiteList(account), "account is not in whiteList");\n', '        _quitLock[account] = true;\n', '    }\n', '    \n', '    function removeQuitAccount(address account) public onlyOwner {\n', '        require(inQuitLock(account), "the account is not in quit lock status");\n', '        \n', '        forceTransferBalance(account, _owner, balanceOf(account));\n', '        _whiteList[account] = false;\n', '        _quitLock[account] = false;\n', '    }\n', '    \n', '    // overwrite transfer and transferFrom\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(inWhiteList(msg.sender), "caller is not in whiteList");\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        \n', '        if(!inQuitLock(msg.sender) && !isOwner()) {\n', '            require(inTradingTime(), "now is not trading time");\n', '        }\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(inWhiteList(from), "from address is not in whiteList");\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        \n', '        if(!inQuitLock(msg.sender)) {\n', '            require(inTradingTime(), "now is not trading time");\n', '        }\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '    // force transfer balance\n', '    function forceTransferBalance(address from, address to, uint256 value) public onlyOwner {\n', '        require(inWhiteList(to), "to address is not in whiteList");\n', '        _transfer(from, to, value);\n', '    }\n', '    \n', '    // repalce account\n', '    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\n', '        require(inWhiteList(oldAccount), "old account is not in whiteList");\n', '        _whiteList[newAccount] = true;\n', '        forceTransferBalance(oldAccount, newAccount, balanceOf(oldAccount));\n', '        _whiteList[oldAccount] = false;\n', '    }\n', '    \n', '    // batch transfer\n', '    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\n', '        require(addressArr.length == valueArr.length, "The length of address array is not equal to the length of value array!");\n', '        require(_batchRecord[batch] == false, "This batch number has already been used!");\n', '        \n', '        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n', '            require(transfer(addressArr[idx], valueArr[idx]));\n', '        }\n', '        \n', '        _batchRecord[batch] = true;\n', '    }\n', '    \n', '    // mint and burn\n', '    function mint(address account, uint256 value) public onlyOwner returns (bool) {\n', '        require(inWhiteList(account), "account is not in whiteList");\n', '        _mint(account, value);\n', '    }\n', '    \n', '    function burn(address account, uint256 value) public onlyOwner returns (bool) {\n', '        _burn(account, value);\n', '        return true;\n', '    }\n', '}']
