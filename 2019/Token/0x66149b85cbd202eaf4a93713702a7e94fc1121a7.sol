['pragma solidity 0.5.2;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    bool public stopped = false;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /** \n', '    * Stop ICO contract\n', '    */\n', '    function stop() onlyOwner public{\n', '        stopped = true;\n', '    }\n', '\n', '    /** \n', '    * Start ICO contract\n', '    */\n', '    function start() onlyOwner public{\n', '        stopped = false;\n', '    }\n', '\n', '    /** \n', '    Validate if ICO running\n', '    */\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != address(0));\n', '    totalSupply_ = totalSupply_.add(value);\n', '    balances[account] = balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyOwner{\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is BasicToken, Ownable {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint( address to, uint256 value ) public onlyOwner returns (bool){\n', '      _mint(to, value);\n', '      return true;\n', '    }\n', '  }\n', '\n', 'contract CryptoxygenToken is StandardToken, BurnableToken, ERC20Mintable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string constant public symbol = "OXY2";\n', '    string constant public name = "Cryptoxygen";\n', '\n', '    uint8 constant public decimals = 5;\n', '    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '    uint256 public constant INITIAL_SUPPLY = 250000000 * decimalFactor;\n', '\n', '    uint constant ITSStartTime = 1547553600;  // Tuesday, 15 January 2019 12:00:00\n', '    uint constant ITSEndTime = 1553256000;    // Friday, 22 March 2019 12:00:00\n', '    uint constant unlockTimeF1 = 1558440000; // Tuesday, 21 May 2019 12:00:00\n', '    uint constant unlockTimeF2 = 1561118400;  // Friday, 21 June 2019 12:00:00\n', '\n', '    uint256 constant publicTokens  = 150000000 * decimalFactor;\n', '    uint256 constant devTokens = 45000000 * decimalFactor;\n', '    uint256 constant investorTokens= 15000000 * decimalFactor;\n', '    uint256 constant founderTokens1 = 20000000 * decimalFactor;\n', '    uint256 constant founderTokens2 = 10000000 * decimalFactor;\n', '    uint256 constant founderTokens3 = 10000000 * decimalFactor;\n', '\n', '    address constant adrDev = 0xF14Eb018a5cAa6b22B67FFFfA61c9B78aB3957d2;\n', '    address constant adrInvestor = 0x2A7B09b90f8bDD22a9d66c83aDa49961827C1Dbe;\n', '    address constant adrFounder1 = 0x68293d5F4826E200A33055d183E73F4227ecEd99;\n', '    address constant adrFounder2 = 0xaE4dA48373f8CD3d54Dd3a8AAAa9aEc568ef29C6;\n', '    address constant adrFounder3 = 0x77264564D740245E377E263675bdDA2D23baaC97;\n', '\n', '    constructor(address ownerAdrs) public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        //InitialDistribution\n', '        preSale(ownerAdrs,publicTokens);\n', '        \n', '        preSale(adrDev,devTokens);\n', '        preSale(adrInvestor,investorTokens);\n', '        preSale(adrFounder1,founderTokens1);\n', '        preSale(adrFounder2,founderTokens2);\n', '        preSale(adrFounder3,founderTokens3);\n', '    }\n', '\n', '    function preSale(address _address, uint _amount) internal returns (bool) {\n', '        balances[_address] = _amount;\n', '        emit Transfer(address(0x0), _address, _amount);\n', '    }\n', '\n', '    function checkPermissions(address _address) internal view returns (bool) {\n', '\n', '        if( ( block.timestamp < unlockTimeF1 ) && ( _address == adrFounder1 || _address == adrFounder2 || _address == adrFounder3 ) ){\n', '            return false;\n', '        }else if( ( block.timestamp < unlockTimeF2 ) && ( _address == adrDev || _address == adrInvestor ) ){\n', '            return false;\n', '        }else if ( _address == owner ){\n', '            return true;\n', '        }else if( block.timestamp < ITSEndTime ){\n', '            return false;\n', '        }else{\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) isRunning public returns (bool) {\n', '        require(checkPermissions(msg.sender));\n', '        super.transfer(_to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning public returns (bool) {\n', '        require(checkPermissions(_from));\n', '        super.transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
['pragma solidity 0.5.2;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    bool public stopped = false;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /** \n', '    * Stop ICO contract\n', '    */\n', '    function stop() onlyOwner public{\n', '        stopped = true;\n', '    }\n', '\n', '    /** \n', '    * Start ICO contract\n', '    */\n', '    function start() onlyOwner public{\n', '        stopped = false;\n', '    }\n', '\n', '    /** \n', '    Validate if ICO running\n', '    */\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != address(0));\n', '    totalSupply_ = totalSupply_.add(value);\n', '    balances[account] = balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyOwner{\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is BasicToken, Ownable {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint( address to, uint256 value ) public onlyOwner returns (bool){\n', '      _mint(to, value);\n', '      return true;\n', '    }\n', '  }\n', '\n', 'contract CryptoxygenToken is StandardToken, BurnableToken, ERC20Mintable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string constant public symbol = "OXY2";\n', '    string constant public name = "Cryptoxygen";\n', '\n', '    uint8 constant public decimals = 5;\n', '    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '    uint256 public constant INITIAL_SUPPLY = 250000000 * decimalFactor;\n', '\n', '    uint constant ITSStartTime = 1547553600;  // Tuesday, 15 January 2019 12:00:00\n', '    uint constant ITSEndTime = 1553256000;    // Friday, 22 March 2019 12:00:00\n', '    uint constant unlockTimeF1 = 1558440000; // Tuesday, 21 May 2019 12:00:00\n', '    uint constant unlockTimeF2 = 1561118400;  // Friday, 21 June 2019 12:00:00\n', '\n', '    uint256 constant publicTokens  = 150000000 * decimalFactor;\n', '    uint256 constant devTokens = 45000000 * decimalFactor;\n', '    uint256 constant investorTokens= 15000000 * decimalFactor;\n', '    uint256 constant founderTokens1 = 20000000 * decimalFactor;\n', '    uint256 constant founderTokens2 = 10000000 * decimalFactor;\n', '    uint256 constant founderTokens3 = 10000000 * decimalFactor;\n', '\n', '    address constant adrDev = 0xF14Eb018a5cAa6b22B67FFFfA61c9B78aB3957d2;\n', '    address constant adrInvestor = 0x2A7B09b90f8bDD22a9d66c83aDa49961827C1Dbe;\n', '    address constant adrFounder1 = 0x68293d5F4826E200A33055d183E73F4227ecEd99;\n', '    address constant adrFounder2 = 0xaE4dA48373f8CD3d54Dd3a8AAAa9aEc568ef29C6;\n', '    address constant adrFounder3 = 0x77264564D740245E377E263675bdDA2D23baaC97;\n', '\n', '    constructor(address ownerAdrs) public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        //InitialDistribution\n', '        preSale(ownerAdrs,publicTokens);\n', '        \n', '        preSale(adrDev,devTokens);\n', '        preSale(adrInvestor,investorTokens);\n', '        preSale(adrFounder1,founderTokens1);\n', '        preSale(adrFounder2,founderTokens2);\n', '        preSale(adrFounder3,founderTokens3);\n', '    }\n', '\n', '    function preSale(address _address, uint _amount) internal returns (bool) {\n', '        balances[_address] = _amount;\n', '        emit Transfer(address(0x0), _address, _amount);\n', '    }\n', '\n', '    function checkPermissions(address _address) internal view returns (bool) {\n', '\n', '        if( ( block.timestamp < unlockTimeF1 ) && ( _address == adrFounder1 || _address == adrFounder2 || _address == adrFounder3 ) ){\n', '            return false;\n', '        }else if( ( block.timestamp < unlockTimeF2 ) && ( _address == adrDev || _address == adrInvestor ) ){\n', '            return false;\n', '        }else if ( _address == owner ){\n', '            return true;\n', '        }else if( block.timestamp < ITSEndTime ){\n', '            return false;\n', '        }else{\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) isRunning public returns (bool) {\n', '        require(checkPermissions(msg.sender));\n', '        super.transfer(_to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning public returns (bool) {\n', '        require(checkPermissions(_from));\n', '        super.transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
