['pragma solidity ^0.4.24;\n', '//pragma experimental ABIEncoderV2;\n', '/**\n', '  * @title Luckybar\n', '  * @author Joshua Choi\n', '  * @dev\n', '  *\n', '  */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() public {\n', '    pausers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    pausers.remove(msg.sender);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', 'contract Pausable is PauserRole {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(_balances[to].add(value) > _balances[to]);\n', '    require(to != address(0));\n', '\n', '    uint previousBalances = _balances[from].add(_balances[to]);\n', '    assert(_balances[from].add(_balances[to]) == previousBalances);\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Retrieve tokens from one address to owner\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function retrieveFrom(\n', '    address from,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(_balances[msg.sender].add(value) > _balances[msg.sender]);\n', '\n', '    uint previousBalances = _balances[from].add(_balances[msg.sender]);\n', '    assert(_balances[from].add(_balances[msg.sender]) == previousBalances);\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[msg.sender] = _balances[msg.sender].add(value);\n', '    emit Transfer(from, msg.sender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '  \n', '    /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    _allowed[msg.sender][_spender] = (\n', '    _allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = _allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      _allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      _allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, _allowed[msg.sender][_spender]);\n', '    return true;\n', '   }\n', '}\n', '\n', '\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function sudoBurnFrom(address from, uint256 value) public {\n', '    _burn(from, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n', '   * an additional Burn event.\n', '   */\n', '  function _burn(address who, uint256 value) internal {\n', '    super._burn(who, value);\n', '  }\n', '}\n', '\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '  Roles.Role private minters;\n', '  constructor() internal {\n', '    _addMinter(msg.sender);\n', '  }\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '  function addMinter(address account) public onlyMinter {\n', '    _addMinter(account);\n', '  }\n', '  function renounceMinter() public {\n', '    _removeMinter(msg.sender);\n', '  }\n', '  function _addMinter(address account) internal {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param value The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '  {\n', '    _mint(to, value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '  function transfer(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  function approve(\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(spender, value);\n', '  }\n', '\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseAllowance(spender, addedValue);\n', '  }\n', '\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseAllowance(spender, subtractedValue);\n', '  }\n', '}\n', '\n', 'contract StandardTokenERC20Custom is ERC20Detailed, ERC20Burnable, ERC20Pausable, ERC20Mintable {\n', '\n', '  using SafeERC20 for ERC20;\n', '\n', '  //   string public name = "TOKA CHIP";\n', '  //   string public symbol = "CHIP";\n', '  //   uint8 public decimals = 18;\n', '  //   uint256 private _totalSupply = 4600000000 * (10 ** uint256(decimals));\n', '  //   4600000000000000000000000000\n', '\n', '  constructor(string name, string symbol, uint8 decimals, uint256 _totalSupply)\n', '    ERC20Pausable()\n', '    ERC20Burnable()\n', '    ERC20Detailed(name, symbol, decimals)\n', '    ERC20()\n', '    public\n', '  {\n', '    _mint(msg.sender, _totalSupply * (10 ** uint256(decimals)));\n', '    addPauser(msg.sender);\n', '    addMinter(msg.sender);\n', '  }\n', '\n', '  function approveAndPlayFunc(address _spender, uint _value, string _func) public returns(bool success){\n', '    require(_spender != address(this));\n', '    require(super.approve(_spender, _value));\n', '    require(_spender.call(bytes4(keccak256(string(abi.encodePacked(_func, "(address,uint256)")))), msg.sender, _value));\n', '    return true;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownership\n', ' * @dev Ownership contract establishes ownership (via owner address) and provides basic authorization control\n', ' * functions (transferring of ownership and ownership modifier).\n', ' */\n', ' \n', 'contract Ownership {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    /**\n', '     * @dev The establishOwnership constructor sets original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function estalishOwnership() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows current owner to transfer control/ownership of contract to a newOwner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Termination contract for terminating the smart contract.\n', ' * Terminate function can only be called by the current owner,\n', ' * returns all funds in contract to owner and then terminates.\n', ' */\n', 'contract Bank is Ownership {\n', '\n', '    function terminate() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function withdraw(uint amount) payable public onlyOwner {\n', '        if(!owner.send(amount)) revert();\n', '    }\n', '\n', '    function depositSpecificAmount(uint _deposit) payable public onlyOwner {\n', '        require(msg.value == _deposit);\n', '    }\n', '\n', '    function deposit() payable public onlyOwner {\n', '        require(msg.value > 0);\n', '    }\n', '\n', ' /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '}\n', '\n', '/**\n', ' * @dev contract that sets terms of the minBet, houseEdge,\n', ' * & contains betting and fallback function.\n', ' */\n', 'contract LuckyBar is Bank {\n', '\n', '    struct record {\n', '        uint[5] date;\n', '        uint[5] amount;\n', '        address[5] account;\n', '    }\n', '    \n', '    struct pair {\n', '        uint256 maxBet;\n', '        uint256 minBet;\n', '        uint256 houseEdge; // in %\n', '        uint256 reward;\n', '        bool bEnabled;\n', '        record ranking;\n', '        record latest;\n', '    }\n', '\n', '    pair public sE2E;\n', '    pair public sE2C;\n', '    pair public sC2E;\n', '    pair public sC2C;\n', '\n', '    uint256 public E2C_Ratio;\n', '    uint256 private salt;\n', '    IERC20 private token;\n', '    StandardTokenERC20Custom private chip;\n', '    address public manager;\n', '\n', '    // Either True or False + amount\n', '    //event Won(bool _status, string _rewardType, uint _amount, record[5], record[5]); // it does not work maybe because of its size is too big\n', '    event Won(bool _status, string _rewardType, uint _amount);\n', '    event Swapped(string _target, uint _amount);\n', '\n', '    // sets the stakes of the bet\n', '    constructor() payable public {\n', '        estalishOwnership();\n', '        setProperties("thisissaltIneedtomakearandomnumber", 100000);\n', '        setToken(0x0bfd1945683489253e401485c6bbb2cfaedca313); // toka mainnet\n', '        setChip(0x27a88bfb581d4c68b0fb830ee4a493da94dcc86c); // chip mainnet\n', '        setGameMinBet(100e18, 0.1 ether, 100e18, 0.1 ether);\n', '        setGameMaxBet(10000000e18, 1 ether, 100000e18, 1 ether);\n', '        setGameFee(1,0,5,5);\n', '        enableGame(true, true, false, true);\n', '        setReward(0,5000,0,5000);\n', '        manager = owner;\n', '    }\n', '    \n', '    function getRecordsE2E() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\n', '        return (sE2E.ranking.date,sE2E.ranking.amount,sE2E.ranking.account, sE2E.latest.date,sE2E.latest.amount,sE2E.latest.account);\n', '    }\n', '    function getRecordsE2C() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\n', '        return (sE2C.ranking.date,sE2C.ranking.amount,sE2C.ranking.account, sE2C.latest.date,sE2C.latest.amount,sE2C.latest.account);\n', '    }\n', '    function getRecordsC2E() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\n', '        return (sC2E.ranking.date,sC2E.ranking.amount,sC2E.ranking.account, sC2E.latest.date,sC2E.latest.amount,sC2E.latest.account);\n', '    }\n', '    function getRecordsC2C() public view returns(uint[5], uint[5], address[5],uint[5], uint[5], address[5]) {\n', '        return (sC2C.ranking.date,sC2C.ranking.amount,sC2C.ranking.account, sC2C.latest.date,sC2C.latest.amount,sC2C\n', '        .latest.account);\n', '    }\n', '\n', '    function emptyRecordsE2E() public onlyOwner {\n', '        for(uint i=0;i<5;i++) {\n', '            sE2E.ranking.amount[i] = 0;\n', '            sE2E.ranking.date[i] = 0;\n', '            sE2E.ranking.account[i] = 0x0;\n', '            sE2E.latest.amount[i] = 0;\n', '            sE2E.latest.date[i] = 0;\n', '            sE2E.latest.account[i] = 0x0;\n', '        }\n', '    }\n', '\n', '    function emptyRecordsE2C() public onlyOwner {\n', '        for(uint i=0;i<5;i++) {\n', '            sE2C.ranking.amount[i] = 0;\n', '            sE2C.ranking.date[i] = 0;\n', '            sE2C.ranking.account[i] = 0x0;\n', '            sE2C.latest.amount[i] = 0;\n', '            sE2C.latest.date[i] = 0;\n', '            sE2C.latest.account[i] = 0x0;\n', '        }\n', '    }\n', '\n', '    function emptyRecordsC2E() public onlyOwner {\n', '        for(uint i=0;i<5;i++) {\n', '            sC2E.ranking.amount[i] = 0;\n', '            sC2E.ranking.date[i] = 0;\n', '            sC2E.ranking.account[i] = 0x0;\n', '            sC2E.latest.amount[i] = 0;\n', '            sC2E.latest.date[i] = 0;\n', '            sC2E.latest.account[i] = 0x0;     \n', '        }\n', '    }\n', '\n', '    function emptyRecordsC2C() public onlyOwner {\n', '        for(uint i=0;i<5;i++) {\n', '            sC2C.ranking.amount[i] = 0;\n', '            sC2C.ranking.date[i] = 0;\n', '            sC2C.ranking.account[i] = 0x0;\n', '            sC2C.latest.amount[i] = 0;\n', '            sC2C.latest.date[i] = 0;\n', '            sC2C.latest.account[i] = 0x0;\n', '        }\n', '    }\n', '\n', '\n', '    function setReward(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\n', '        sC2C.reward = C2C;\n', '        sE2C.reward = E2C;\n', '        sC2E.reward = C2E;\n', '        sE2E.reward = E2E;\n', '    }\n', '    \n', '    function enableGame(bool C2C, bool E2C, bool C2E, bool E2E) public onlyOwner {\n', '        sC2C.bEnabled = C2C;\n', '        sE2C.bEnabled = E2C;\n', '        sC2E.bEnabled = C2E;\n', '        sE2E.bEnabled = E2E;\n', '    }\n', '\n', '    function setGameFee(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\n', '        sC2C.houseEdge = C2C;\n', '        sE2C.houseEdge = E2C;\n', '        sC2E.houseEdge = C2E;\n', '        sE2E.houseEdge = E2E;\n', '    }\n', '    \n', '    function setGameMaxBet(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\n', '        sC2C.maxBet = C2C;\n', '        sE2C.maxBet = E2C;\n', '        sC2E.maxBet = C2E;\n', '        sE2E.maxBet = E2E;\n', '    }\n', '\n', '    function setGameMinBet(uint256 C2C, uint256 E2C, uint256 C2E, uint256 E2E) public onlyOwner {\n', '        sC2C.minBet = C2C;\n', '        sE2C.minBet = E2C;\n', '        sC2E.minBet = C2E;\n', '        sE2E.minBet = E2E;\n', '    }\n', '\n', '    function setToken(address _token) public onlyOwner {\n', '        token = IERC20(_token);\n', '    }\n', '\n', '    function setChip(address _chip) public onlyOwner {\n', '        chip = StandardTokenERC20Custom(_chip);\n', '    }\n', '\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    function setProperties(string _salt, uint _E2C_Ratio) public onlyOwner {\n', '        require(_E2C_Ratio > 0);\n', '        salt = uint(keccak256(_salt));\n', '        E2C_Ratio = _E2C_Ratio;\n', '    }\n', '\n', '    function() public { //fallback\n', '        revert();\n', '    }\n', '\n', '    function swapC2T(address _from, uint256 _value) payable public {\n', '        require(chip.transferFrom(_from, manager, _value));\n', '        require(token.transferFrom(manager, _from, _value));\n', '\n', '        emit Swapped("TOKA", _value);\n', '    }\n', '\n', '    function swapT2C(address _from, uint256 _value) payable public {\n', '        require(token.transferFrom(_from, manager, _value));\n', '        require(chip.transferFrom(manager, _from, _value));\n', '\n', '        emit Swapped("CHIP", _value);\n', '    }\n', '\n', '    function playC2C(address _from, uint256 _value) payable public {\n', '        require(sC2C.bEnabled);\n', '        require(_value >= sC2C.minBet && _value <= sC2C.maxBet);\n', '        require(chip.transferFrom(_from, manager, _value));\n', '\n', '        uint256 amountWon = _value * (50 + uint256(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sC2C.houseEdge) / 100;\n', '        require(chip.transferFrom(manager, _from, amountWon + _value * sC2C.reward)); // reward. but set to be zero.\n', '        \n', '        // ranking\n', '        for(uint i=0;i<5;i++) {\n', '            if(sC2C.ranking.amount[i] < amountWon) {\n', '                for(uint j=4;j>i;j--) {\n', '                    sC2C.ranking.amount[j] = sC2C.ranking.amount[j-1];\n', '                    sC2C.ranking.date[j] = sC2C.ranking.date[j-1];\n', '                    sC2C.ranking.account[j] = sC2C.ranking.account[j-1];\n', '                }\n', '                sC2C.ranking.amount[i] = amountWon;\n', '                sC2C.ranking.date[i] = now;\n', '                sC2C.ranking.account[i] = _from;\n', '                break;\n', '            }\n', '        }\n', '        // latest\n', '        for(i=4;i>0;i--) {\n', '            sC2C.latest.amount[i] = sC2C.latest.amount[i-1];\n', '            sC2C.latest.date[i] = sC2C.latest.date[i-1];\n', '            sC2C.latest.account[i] = sC2C.latest.account[i-1];\n', '        }\n', '        sC2C.latest.amount[0] = amountWon;\n', '        sC2C.latest.date[0] = now;\n', '        sC2C.latest.account[0] = _from;\n', '\n', '        emit Won(amountWon > _value, "CHIP", amountWon);//, sC2C.ranking, sC2C.latest);\n', '    }\n', '\n', '    function playC2E(address _from, uint256 _value) payable public {\n', '        require(sC2E.bEnabled);\n', '        require(_value >= sC2E.minBet && _value <= sC2E.maxBet);\n', '        require(chip.transferFrom(_from, manager, _value));\n', '\n', '        uint256 amountWon = _value * (50 + uint256(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sC2E.houseEdge) / 100 / E2C_Ratio;\n', '        require(_from.send(amountWon));\n', '        \n', '        // ranking\n', '        for(uint i=0;i<5;i++) {\n', '            if(sC2E.ranking.amount[i] < amountWon) {\n', '                for(uint j=4;j>i;j--) {\n', '                    sC2E.ranking.amount[j] = sC2E.ranking.amount[j-1];\n', '                    sC2E.ranking.date[j] = sC2E.ranking.date[j-1];\n', '                    sC2E.ranking.account[j] = sC2E.ranking.account[j-1];\n', '                }\n', '                sC2E.ranking.amount[i] = amountWon;\n', '                sC2E.ranking.date[i] = now;\n', '                sC2E.ranking.account[i] = _from;\n', '                break;\n', '            }\n', '        }\n', '        // latest\n', '        for(i=4;i>0;i--) {\n', '            sC2E.latest.amount[i] = sC2E.latest.amount[i-1];\n', '            sC2E.latest.date[i] = sC2E.latest.date[i-1];\n', '            sC2E.latest.account[i] = sC2E.latest.account[i-1];\n', '        }\n', '        sC2E.latest.amount[0] = amountWon;\n', '        sC2E.latest.date[0] = now;\n', '        sC2E.latest.account[0] = _from;\n', '\n', '        emit Won(amountWon > (_value / E2C_Ratio), "ETH", amountWon);//, sC2E.ranking, sC2E.latest);\n', '    }\n', '\n', '    function playE2E() payable public {\n', '        require(sE2E.bEnabled);\n', '        require(msg.value >= sE2E.minBet && msg.value <= sE2E.maxBet);\n', '\n', '        uint amountWon = msg.value * (50 + uint(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sE2E.houseEdge) / 100;\n', '        require(msg.sender.send(amountWon));\n', '        require(chip.transferFrom(manager, msg.sender, msg.value * sE2E.reward)); // reward!!\n', '\n', '        // ranking\n', '        for(uint i=0;i<5;i++) {\n', '            if(sE2E.ranking.amount[i] < amountWon) {\n', '                for(uint j=4;j>i;j--) {\n', '                    sE2E.ranking.amount[j] = sE2E.ranking.amount[j-1];\n', '                    sE2E.ranking.date[j] = sE2E.ranking.date[j-1];\n', '                    sE2E.ranking.account[j] = sE2E.ranking.account[j-1];\n', '                }\n', '                sE2E.ranking.amount[i] = amountWon;\n', '                sE2E.ranking.date[i] = now;\n', '                sE2E.ranking.account[i] = msg.sender;\n', '                break;\n', '            }\n', '        }\n', '        // latest\n', '        for(i=4;i>0;i--) {\n', '            sE2E.latest.amount[i] = sE2E.latest.amount[i-1];\n', '            sE2E.latest.date[i] = sE2E.latest.date[i-1];\n', '            sE2E.latest.account[i] = sE2E.latest.account[i-1];\n', '        }\n', '        sE2E.latest.amount[0] = amountWon;\n', '        sE2E.latest.date[0] = now;\n', '        sE2E.latest.account[0] = msg.sender;\n', '\n', '        emit Won(amountWon > msg.value, "ETH", amountWon);//, sE2E.ranking, sE2E.latest);\n', '    }\n', '\n', '    function playE2C() payable public {\n', '        require(sE2C.bEnabled);\n', '        require(msg.value >= sE2C.minBet && msg.value <= sE2C.maxBet);\n', '\n', '        uint amountWon = msg.value * (50 + uint(keccak256(block.timestamp, block.difficulty, salt++)) % 100 - sE2C.houseEdge) / 100 * E2C_Ratio;\n', '        require(chip.transferFrom(manager, msg.sender, amountWon));\n', '        require(chip.transferFrom(manager, msg.sender, msg.value * sE2C.reward)); // reward!!\n', '        \n', '        // ranking\n', '        for(uint i=0;i<5;i++) {\n', '            if(sE2C.ranking.amount[i] < amountWon) {\n', '                for(uint j=4;j>i;j--) {\n', '                    sE2C.ranking.amount[j] = sE2C.ranking.amount[j-1];\n', '                    sE2C.ranking.date[j] = sE2C.ranking.date[j-1];\n', '                    sE2C.ranking.account[j] = sE2C.ranking.account[j-1];\n', '                }\n', '                sE2C.ranking.amount[i] = amountWon;\n', '                sE2C.ranking.date[i] = now;\n', '                sE2C.ranking.account[i] = msg.sender;\n', '                break;\n', '            }\n', '        }\n', '        // latest\n', '        for(i=4;i>0;i--) {\n', '            sE2C.latest.amount[i] = sE2C.latest.amount[i-1];\n', '            sE2C.latest.date[i] = sE2C.latest.date[i-1];\n', '            sE2C.latest.account[i] = sE2C.latest.account[i-1];\n', '        }\n', '        sE2C.latest.amount[0] = amountWon;\n', '        sE2C.latest.date[0] = now;\n', '        sE2C.latest.account[0] = msg.sender;\n', '\n', '        emit Won(amountWon > (msg.value * E2C_Ratio), "CHIP", amountWon);//, sE2C.ranking, sE2C.latest);\n', '    }\n', '\n', '    // function for owner to check contract balance\n', '    function checkContractBalance() onlyOwner public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '    function checkContractBalanceToka() onlyOwner public view returns(uint) {\n', '        return token.balanceOf(manager);\n', '    }\n', '    function checkContractBalanceChip() onlyOwner public view returns(uint) {\n', '        return chip.balanceOf(manager);\n', '    }\n', '}']