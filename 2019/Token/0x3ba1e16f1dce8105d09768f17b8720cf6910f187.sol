['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity >=0.5.10;\n', '\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'interface KNCLock {\n', '    function lock(uint qty, string calldata eosAddr, uint64 eosRecipientName) external;\n', '}\n', '\n', 'contract TriggerKNCLock {\n', '    \n', '    KNCLock public KNCLockContract = KNCLock(0x980358360409b1cc913A916bC0Bf6f52F775242A);\n', '    IERC20 public KNC = IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '    \n', '    constructor(IERC20 knc) public {\n', '        \n', '        KNC = knc;\n', '    }\n', '    \n', '    function triggerLock(string memory eosAddr, uint64 eosRecipientName) public {\n', '        \n', '        uint qty = KNC.balanceOf(address(this)); \n', '        \n', '        KNC.approve(address(KNCLockContract), qty);\n', '        \n', '        KNCLockContract.lock(qty, eosAddr, eosRecipientName);\n', '    }\n', '    \n', '    function setKNCLockAddress(KNCLock lockContract) public {\n', '        KNCLockContract = lockContract;\n', '    }\n', '}']
['pragma solidity >=0.5.10;\n', '\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'interface KNCLock {\n', '    function lock(uint qty, string calldata eosAddr, uint64 eosRecipientName) external;\n', '}\n', '\n', 'contract TriggerKNCLock {\n', '    \n', '    KNCLock public KNCLockContract = KNCLock(0x980358360409b1cc913A916bC0Bf6f52F775242A);\n', '    IERC20 public KNC = IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '    \n', '    constructor(IERC20 knc) public {\n', '        \n', '        KNC = knc;\n', '    }\n', '    \n', '    function triggerLock(string memory eosAddr, uint64 eosRecipientName) public {\n', '        \n', '        uint qty = KNC.balanceOf(address(this)); \n', '        \n', '        KNC.approve(address(KNCLockContract), qty);\n', '        \n', '        KNCLockContract.lock(qty, eosAddr, eosRecipientName);\n', '    }\n', '    \n', '    function setKNCLockAddress(KNCLock lockContract) public {\n', '        KNCLockContract = lockContract;\n', '    }\n', '}']
