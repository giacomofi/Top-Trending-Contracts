['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from the caller&#39;s account to `recipient`.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the caller&#39;s tokens.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', '     * condition is to first reduce the spender&#39;s allowance to 0 and set the\n', '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', '     * allowance mechanism. `amount` is then deducted from the caller&#39;s\n', '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Wrappers over Solidity&#39;s arithmetic operations with added overflow\n', ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', ' * class of bugs, so it&#39;s recommended to use it always.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `+` operator.\n', '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * Counterpart to Solidity&#39;s `-` operator.\n', '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `*` operator.\n', '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `/` operator. Note: this function uses a\n', '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `%` operator. This function uses a `revert`\n', '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', ' * these events, as it isn&#39;t required by the specification.\n', ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', '     * - the caller must have allowance for `sender`&#39;s tokens of at least\n', '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', '     * from the caller&#39;s allowance.\n', '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * > Note that this information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * `IERC20.balanceOf` and `IERC20.transfer`.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n', ' * available, which can be aplied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', '     * execution of a contract&#39;s constructor, its address will be reported as\n', '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', '        // &#39;safeIncreaseAllowance&#39; and &#39;safeDecreaseAllowance&#39;\n', '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        // We need to perform a low level call here, to bypass Solidity&#39;s return data size checking mechanism, since\n', '        // we&#39;re implementing it ourselves.\n', '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/CERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface CERC20 {\n', '  function mint(uint256 mintAmount) external returns (uint256);\n', '  function redeem(uint256 redeemTokens) external returns (uint256);\n', '  function exchangeRateStored() external view returns (uint256);\n', '  function supplyRatePerBlock() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/iERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface iERC20 {\n', '  function mint(\n', '    address receiver,\n', '    uint256 depositAmount)\n', '    external\n', '    returns (uint256 mintAmount);\n', '\n', '  function burn(\n', '    address receiver,\n', '    uint256 burnAmount)\n', '    external\n', '    returns (uint256 loanAmountPaid);\n', '\n', '  function tokenPrice()\n', '    external\n', '    view\n', '    returns (uint256 price);\n', '\n', '  function supplyInterestRate()\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function claimLoanToken()\n', '    external\n', '    returns (uint256 claimedAmount);\n', '\n', '  /* function burnToEther(\n', '    address receiver,\n', '    uint256 burnAmount)\n', '    external\n', '    returns (uint256 loanAmountPaid);\n', '\n', '\n', '  function supplyInterestRate()\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function assetBalanceOf(\n', '    address _owner)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function claimLoanToken()\n', '    external\n', '    returns (uint256 claimedAmount); */\n', '}\n', '\n', '// File: contracts/IdleHelp.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', 'library IdleHelp {\n', '  using SafeMath for uint256;\n', '\n', '  function getPriceInToken(address cToken, address iToken, address bestToken, uint256 totalSupply, uint256 poolSupply)\n', '    public view\n', '    returns (uint256 tokenPrice) {\n', '      // 1Token = net_asset_value / total_Token_liquidity\n', '      // net_asset_value = (rate of 1(cToken || iToken) in underlying_Token) * balanceOf((cToken || iToken))\n', '      uint256 navPool;\n', '      uint256 price;\n', '\n', '      // rate\n', '      if (bestToken == cToken) {\n', '        // exchangeRateStored is the rate (in wei, 8 decimals) of 1cDAI in DAI * 10**18\n', '        price = CERC20(cToken).exchangeRateStored(); // 202487304197710837666727644 ->\n', '      } else {\n', '        price = iERC20(iToken).tokenPrice(); // eg 1001495070730287403 -> 1iToken in wei = 1001495070730287403 Token\n', '      }\n', '      navPool = price.mul(poolSupply); // eg 43388429749999990000 in DAI\n', '      tokenPrice = navPool.div(totalSupply); // idleToken price in token wei\n', '  }\n', '  function getAPRs(address cToken, address iToken, uint256 blocksInAYear)\n', '    public view\n', '    returns (uint256 cApr, uint256 iApr) {\n', '      uint256 cRate = CERC20(cToken).supplyRatePerBlock(); // interest % per block\n', '      cApr = cRate.mul(blocksInAYear).mul(100);\n', '      iApr = iERC20(iToken).supplyInterestRate(); // APR in wei 18 decimals\n', '  }\n', '  function getBestRateToken(address cToken, address iToken, uint256 blocksInAYear)\n', '    public view\n', '    returns (address bestRateToken, uint256 bestRate, uint256 worstRate) {\n', '      (uint256 cApr, uint256 iApr) = getAPRs(cToken, iToken, blocksInAYear);\n', '      bestRateToken = cToken;\n', '      bestRate = cApr;\n', '      worstRate = iApr;\n', '      if (iApr > cApr) {\n', '        worstRate = cApr;\n', '        bestRate = iApr;\n', '        bestRateToken = iToken;\n', '      }\n', '  }\n', '  function rebalanceCheck(address cToken, address iToken, address bestToken, uint256 blocksInAYear, uint256 minRateDifference)\n', '    public view\n', '    returns (bool shouldRebalance, address bestTokenAddr) {\n', '      shouldRebalance = false;\n', '\n', '      uint256 _bestRate;\n', '      uint256 _worstRate;\n', '      (bestTokenAddr, _bestRate, _worstRate) = getBestRateToken(cToken, iToken, blocksInAYear);\n', '      if (\n', '          bestToken == address(0) ||\n', '          (bestTokenAddr != bestToken && (_worstRate.add(minRateDifference) < _bestRate))) {\n', '        shouldRebalance = true;\n', '        return (shouldRebalance, bestTokenAddr);\n', '      }\n', '\n', '      return (shouldRebalance, bestTokenAddr);\n', '  }\n', '}\n', '\n', '// File: contracts/IdleDAI.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IdleDAI is ERC20, ERC20Detailed, ReentrancyGuard, Ownable {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  address public cToken; // cTokens have 8 decimals\n', '  address public iToken; // iTokens have 18 decimals\n', '  address public token;\n', '  address public bestToken;\n', '\n', '  uint256 public blocksInAYear;\n', '  uint256 public minRateDifference;\n', '\n', '  /**\n', '   * @dev constructor\n', '   */\n', '  constructor(address _cToken, address _iToken, address _token)\n', '    public\n', '    ERC20Detailed("IdleDAI", "IDLEDAI", 18) {\n', '      cToken = _cToken;\n', '      iToken = _iToken;\n', '      token = _token;\n', '      blocksInAYear = 2102400; // ~15 sec per block\n', '      minRateDifference = 300000000000000000; // 0.3% min\n', '  }\n', '\n', '  // onlyOwner\n', '  function setMinRateDifference(uint256 _rate)\n', '    external onlyOwner {\n', '      minRateDifference = _rate;\n', '  }\n', '  function setBlocksInAYear(uint256 _blocks)\n', '    external onlyOwner {\n', '      blocksInAYear = _blocks;\n', '  }\n', '  function setToken(address _token)\n', '    external onlyOwner {\n', '      token = _token;\n', '  }\n', '  function setIToken(address _iToken)\n', '    external onlyOwner {\n', '      iToken = _iToken;\n', '  }\n', '  function setCToken(address _cToken)\n', '    external onlyOwner {\n', '      cToken = _cToken;\n', '  }\n', '  // This should never be called, only in case of contract failure\n', '  // after an audit this should be removed\n', '  function emergencyWithdraw(address _token, uint256 _value)\n', '    external onlyOwner {\n', '      IERC20 underlying = IERC20(_token);\n', '      if (_value != 0) {\n', '        underlying.safeTransfer(msg.sender, _value);\n', '      } else {\n', '        underlying.safeTransfer(msg.sender, underlying.balanceOf(address(this)));\n', '      }\n', '  }\n', '\n', '  // view\n', '  function tokenPrice()\n', '    public view\n', '    returns (uint256 price) {\n', '      uint256 poolSupply = IERC20(cToken).balanceOf(address(this));\n', '      if (bestToken == iToken) {\n', '        poolSupply = IERC20(iToken).balanceOf(address(this));\n', '      }\n', '\n', '      price = IdleHelp.getPriceInToken(\n', '        cToken,\n', '        iToken,\n', '        bestToken,\n', '        this.totalSupply(),\n', '        poolSupply\n', '      );\n', '  }\n', '  function rebalanceCheck()\n', '    public view\n', '    returns (bool, address) {\n', '      return IdleHelp.rebalanceCheck(cToken, iToken, bestToken, blocksInAYear, minRateDifference);\n', '  }\n', '  function getAPRs()\n', '    external view\n', '    returns (uint256, uint256) {\n', '      return IdleHelp.getAPRs(cToken, iToken, blocksInAYear);\n', '  }\n', '\n', '  // public\n', '  /**\n', '   * @dev User should &#39;approve&#39; _amount tokens before calling mintIdleToken\n', '   */\n', '  function mintIdleToken(uint256 _amount)\n', '    external nonReentrant\n', '    returns (uint256 mintedTokens) {\n', '      require(_amount > 0, "Amount is not > 0");\n', '      // get a handle for the underlying asset contract\n', '      IERC20 underlying = IERC20(token);\n', '      // transfer to this contract\n', '      underlying.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '      rebalance();\n', '\n', '      uint256 idlePrice = 10**18;\n', '      uint256 totalSupply = this.totalSupply();\n', '      if (totalSupply != 0) {\n', '        idlePrice = tokenPrice();\n', '      }\n', '\n', '      if (bestToken == cToken) {\n', '        _mintCTokens(_amount);\n', '      } else {\n', '        _mintITokens(_amount);\n', '      }\n', '      if (totalSupply == 0) {\n', '        mintedTokens = _amount; // 1:1\n', '      } else {\n', '        mintedTokens = _amount.mul(10**18).div(idlePrice);\n', '      }\n', '      _mint(msg.sender, mintedTokens);\n', '  }\n', '\n', '  /**\n', '   * @dev here we calc the pool share of the cTokens | iTokens one can withdraw\n', '   */\n', '  function redeemIdleToken(uint256 _amount)\n', '    external nonReentrant\n', '    returns (uint256 tokensRedeemed) {\n', '    uint256 idleSupply = this.totalSupply();\n', '    require(idleSupply > 0, &#39;No IDLEDAI have been issued&#39;);\n', '\n', '    if (bestToken == cToken) {\n', '      uint256 cPoolBalance = IERC20(cToken).balanceOf(address(this));\n', '      uint256 cDAItoRedeem = _amount.mul(cPoolBalance).div(idleSupply);\n', '      tokensRedeemed = _redeemCTokens(cDAItoRedeem, msg.sender);\n', '    } else {\n', '      uint256 iPoolBalance = IERC20(iToken).balanceOf(address(this));\n', '      uint256 iDAItoRedeem = _amount.mul(iPoolBalance).div(idleSupply);\n', '      // TODO we should inform the user of the eventual excess of token that can be redeemed directly in Fulcrum\n', '      tokensRedeemed = _redeemITokens(iDAItoRedeem, msg.sender);\n', '    }\n', '    _burn(msg.sender, _amount);\n', '    rebalance();\n', '  }\n', '\n', '  /**\n', '   * @dev Convert cToken pool in iToken pool (or the contrary) if needed\n', '   * Everyone should be incentivized in calling this method\n', '   */\n', '  function rebalance()\n', '    public {\n', '      (bool shouldRebalance, address newBestTokenAddr) = rebalanceCheck();\n', '      if (!shouldRebalance) {\n', '        return;\n', '      }\n', '\n', '      if (bestToken != address(0)) {\n', '        // bestToken here is the &#39;old&#39; best token\n', '        if (bestToken == cToken) {\n', '          _redeemCTokens(IERC20(cToken).balanceOf(address(this)), address(this)); // token are now in this contract\n', '          _mintITokens(IERC20(token).balanceOf(address(this)));\n', '        } else {\n', '          _redeemITokens(IERC20(iToken).balanceOf(address(this)), address(this));\n', '          _mintCTokens(IERC20(token).balanceOf(address(this)));\n', '        }\n', '      }\n', '\n', '      // Update best token address\n', '      bestToken = newBestTokenAddr;\n', '  }\n', '  /**\n', '   * @dev here we are redeeming unclaimed token (from iToken contract) to this contracts\n', '   * then converting the claimedTokens in the bestToken after rebalancing\n', '   * Everyone should be incentivized in calling this method\n', '   */\n', '  function claimITokens()\n', '    external\n', '    returns (uint256 claimedTokens) {\n', '      claimedTokens = iERC20(iToken).claimLoanToken();\n', '      if (claimedTokens == 0) {\n', '        return claimedTokens;\n', '      }\n', '\n', '      rebalance();\n', '      if (bestToken == cToken) {\n', '        _mintCTokens(claimedTokens);\n', '      } else {\n', '        _mintITokens(claimedTokens);\n', '      }\n', '\n', '      return claimedTokens;\n', '  }\n', '\n', '  // internal\n', '  function _mintCTokens(uint256 _amount)\n', '    internal\n', '    returns (uint256 cTokens) {\n', '      if (IERC20(token).balanceOf(address(this)) == 0) {\n', '        return cTokens;\n', '      }\n', '      // approve the transfer to cToken contract\n', '      IERC20(token).safeIncreaseAllowance(cToken, _amount);\n', '\n', '      // get a handle for the corresponding cToken contract\n', '      CERC20 _cToken = CERC20(cToken);\n', '      // mint the cTokens and assert there is no error\n', '      require(_cToken.mint(_amount) == 0, "Error minting");\n', '      // cTokens are now in this contract\n', '\n', '      // generic solidity formula is exchangeRateMantissa = (underlying / cTokens) * 1e18\n', '      uint256 exchangeRateMantissa = _cToken.exchangeRateStored(); // (exchange_rate * 1e18)\n', '      // so cTokens = (underlying * 1e18) / exchangeRateMantissa\n', '      cTokens = _amount.mul(10**18).div(exchangeRateMantissa);\n', '  }\n', '  function _mintITokens(uint256 _amount)\n', '    internal\n', '    returns (uint256 iTokens) {\n', '      if (IERC20(token).balanceOf(address(this)) == 0) {\n', '        return iTokens;\n', '      }\n', '      // approve the transfer to iToken contract\n', '      IERC20(token).safeIncreaseAllowance(iToken, _amount);\n', '      // get a handle for the corresponding iToken contract\n', '      iERC20 _iToken = iERC20(iToken);\n', '      // mint the iTokens\n', '      iTokens = _iToken.mint(address(this), _amount);\n', '  }\n', '\n', '  function _redeemCTokens(uint256 _amount, address _account)\n', '    internal\n', '    returns (uint256 tokens) {\n', '      CERC20 _cToken = CERC20(cToken);\n', '      // redeem all user&#39;s underlying\n', '      require(_cToken.redeem(_amount) == 0, "Something went wrong when redeeming in cTokens");\n', '\n', '      // generic solidity formula is exchangeRateMantissa = (underlying / cTokens) * 1e18\n', '      uint256 exchangeRateMantissa = _cToken.exchangeRateStored(); // exchange_rate * 1e18\n', '      // so underlying = (exchangeRateMantissa * cTokens) / 1e18\n', '      tokens = _amount.mul(exchangeRateMantissa).div(10**18);\n', '\n', '      if (_account != address(this)) {\n', '        IERC20(token).safeTransfer(_account, tokens);\n', '      }\n', '  }\n', '  function _redeemITokens(uint256 _amount, address _account)\n', '    internal\n', '    returns (uint256 tokens) {\n', '      tokens = iERC20(iToken).burn(_account, _amount);\n', '  }\n', '}']