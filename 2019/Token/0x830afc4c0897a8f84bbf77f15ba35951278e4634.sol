['pragma solidity ^0.5.1;\n', '\n', 'contract Ownable {\n', '    address payable public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    address payable public newOwner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable otherOwner) onlyOwner public {\n', '        require(otherOwner != address(0));\n', '        newOwner = otherOwner;\n', '    }\n', '\n', '    function approveOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address payable to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address payable from, address payable to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract SunRichConfig is Ownable {\n', '    mapping(string => uint256) private data;\n', '\n', '    function set(string memory _key, uint256 _value) onlyOwner public {\n', '        data[_key] = _value;\n', '    }\n', '\n', '    function get(string memory _key) public view returns (uint256 _value){\n', '        return data[_key];\n', '    }\n', '\n', '    constructor() public {\n', '        // Fees (in percent x100)\n', "        set('fee.a2a_sender',   200); // 2.00\n", "        set('fee.a2a_receiver', 0);\n", "        set('fee.a2b_sender',   0);\n", "        set('fee.a2b_receiver', 200); // 2.00\n", "        set('fee.b2a_sender',   200); // 2.00\n", "        set('fee.b2a_receiver', 0);\n", "        set('fee.b2b_sender',   200); // 2.00\n", "        set('fee.b2b_receiver', 200); // 2.00\n", '\n', '        // Address for fee collection\n', "        set('fee.collector', uint256(msg.sender));\n", '\n', '        // ETH topup enabled\n', "        set('eth.topup', 1);\n", '        // Minimum balance in finney for auto topup\n', "        set('eth.minBalance', 5);\n", '    }\n', '}\n', '\n', 'contract SunRichAccounts is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 totalSupply;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) systemAccounts;\n', '    mapping(address => bool) businessAccounts;\n', '    mapping(address => uint256) premiumAccounts;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => bool) frozen;\n', '\n', '    SunRichController ctrl;\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == address(ctrl));\n', '        _;\n', '    }\n', ' \n', '    function setController(address payable _ctrl) public onlyOwner {\n', '        ctrl = SunRichController(_ctrl);\n', '    }\n', '\n', '    function getBalance(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function addTo(address _to, uint256 _value) public onlyController returns (uint256) {\n', '        require(_to != address(0));\n', '        balances[_to] = balances[_to].add(_value);\n', '        return balances[_to];\n', '    }\n', '\n', '    function subFrom(address _from, uint256 _value) public onlyController returns (uint256) {\n', '        require(_value <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        return balances[_from];\n', '    }\n', '\n', '    function getAllowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function addAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\n', '        allowed[_owner][_spender] = allowed[_owner][_spender].add(_value);\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function subAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {\n', '        require(_value <= allowed[_owner][_spender]);\n', '        allowed[_owner][_spender] = allowed[_owner][_spender].sub(_value);\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function getTotalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function addTotalSupply(uint256 _value) public onlyController returns (uint256) {\n', '        totalSupply = totalSupply.add(_value);\n', '        return totalSupply;\n', '    }\n', '\n', '    function subTotalSupply(uint256 _value) public onlyController returns (uint256) {\n', '        totalSupply = totalSupply.sub(_value);\n', '        return totalSupply;\n', '    }\n', '\n', '    function setBusiness(address _owner, bool _value) public onlyController {\n', '        businessAccounts[_owner] = _value;\n', '    }\n', '\n', '    function isBusiness(address _owner) public view returns (bool) {\n', '        return businessAccounts[_owner];\n', '    }\n', '\n', '    function setSystem(address _owner, bool _value) public onlyController {\n', '        systemAccounts[_owner] = _value;\n', '    }\n', '\n', '    function isSystem(address _owner) public view returns (bool) {\n', '        return systemAccounts[_owner];\n', '    }\n', '\n', '    function setPremium(address _owner, uint256 _value) public onlyController {\n', '        premiumAccounts[_owner] = _value;\n', '    }\n', '\n', '    function isPremium(address _owner) public view returns (bool) {\n', '        return (premiumAccounts[_owner] >= now);\n', '    }\n', '}\n', '\n', 'contract SunRichController is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    SunRich master;\n', '    SunRichConfig config;\n', '    SunRichAccounts accounts;\n', '\n', '    // Can receive ether\n', '    function() external payable {\n', '    }\n', '\n', '    modifier onlyMaster {\n', '        require(msg.sender == address(master));\n', '        _;\n', '    }\n', '\n', '    function setMaster(address _master) public onlyOwner {\n', '        if(_master == address(0x0)){\n', '            owner.transfer(address(this).balance);\n', '        }\n', '        master = SunRich(_master);\n', '    }\n', '\n', '    function setConfig(address _config) public onlyOwner {\n', '        config = SunRichConfig(_config);\n', '    }\n', '\n', '    function setAccounts(address _accounts) public onlyOwner {\n', '        accounts = SunRichAccounts(_accounts);\n', '    }\n', '\n', '    function totalSupply() public view onlyMaster returns (uint256) {\n', '        return accounts.getTotalSupply();\n', '    }\n', '\n', '    function balanceOf(address _owner) public view onlyMaster returns (uint256 balance) {\n', '        return accounts.getBalance(_owner);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view onlyMaster returns (uint256 remaining) {\n', '        return accounts.getAllowance(_owner, _spender);\n', '    }\n', '\n', '    function approve(address _owner, address _spender, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n', '        accounts.addAllowance(_owner, _spender, _value);\n', '        master.emitApproval(_owner, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferWithSender(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n', "        if(_from == address(config.get('eth.issuer'))){\n", '            _issue(_to, _value);\n', '        } else {\n', '            if((_from != owner) && (_to != owner)){\n', '                _value = _transferFee(_from, _to, _value);\n', '            }\n', '\n', '            _transfer(_from, _to, _value);\n', '            master.emitTransfer(_from, _to, _value);\n', '\n', '            _topup(_from);\n', '            _topup(_to);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address payable _from, address payable _to, uint256 _value) public onlyMaster whenNotPaused returns (bool) {\n', '        if((_from != owner) && (_to != owner)){\n', '            _value = _transferFee(_from, _to, _value);\n', '        }\n', '\n', '        _transfer(_from, _to, _value);\n', '        master.emitTransfer(_from, _to, _value);\n', '\n', '        accounts.subAllowance(_from, _to, _value);\n', '\n', '        _topup(_from);\n', '        _topup(_to);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setBusinessAccount(address _sender, address _owner, bool _value) public onlyMaster whenNotPaused {\n', '        require(accounts.isSystem(_sender));\n', '        accounts.setBusiness(_owner, _value);\n', '    }\n', '\n', '    function setSystemAccount(address _owner, bool _value) public onlyOwner {\n', '        accounts.setSystem(_owner, _value);\n', '    }\n', '\n', '    function setPremiumAccount(address _owner, uint256 _value) public onlyOwner {\n', '        accounts.setPremium(_owner, _value);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        accounts.subFrom(_from, _value);\n', '        accounts.addTo(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Fee collection logic goes here\n', '     */\n', '    function _transferFee(address _from, address _to, uint256 _value) internal returns (uint256){\n', '        uint256 feeSender = 0;\n', '        uint256 feeReceiver = 0;\n', '\n', '        if (!accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\n', "            feeSender = config.get('fee.a2a_sender');\n", "            feeReceiver = config.get('fee.a2a_receiver');\n", '        }\n', '        if (!accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\n', "            feeSender = config.get('fee.a2b_sender');\n", "            feeReceiver = config.get('fee.a2b_receiver');\n", '        }\n', '        if (accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {\n', "            feeSender = config.get('fee.b2a_sender');\n", "            feeReceiver = config.get('fee.b2a_receiver');\n", '        }\n', '        if (accounts.isBusiness(_from) && accounts.isBusiness(_to)) {\n', "            feeSender = config.get('fee.b2b_sender');\n", "            feeReceiver = config.get('fee.b2b_receiver');\n", '        }\n', '        if(accounts.isPremium(_from)){\n', '            feeSender = 0;\n', '        }\n', '        if(accounts.isPremium(_to)){\n', '            feeReceiver = 0;\n', '        }\n', '        if(accounts.isSystem(_from) || accounts.isSystem(_to)){\n', '            feeSender = 0;\n', '            feeReceiver = 0;\n', '        }\n', '\n', "        address feeCollector = address(config.get('fee.collector'));\n", '        address feeSpender = _from;\n', '        uint256 feeValue = 0;\n', '        if(feeSender > 0){\n', '            feeValue = _value.mul(feeSender).div(10000);\n', '            if(feeValue > 0) {\n', '                _transfer(feeSpender, feeCollector, feeValue);\n', '                master.emitTransfer(feeSpender, feeCollector, feeValue);\n', '            }\n', '        }\n', '        if(feeReceiver > 0){\n', '            feeValue = _value.mul(feeReceiver).div(10000);\n', '            if(feeValue > 0) {\n', '                _value = _value.sub(feeValue);\n', '                feeSpender = _to;\n', '                _transfer(feeSpender, feeCollector, feeValue);\n', '                master.emitTransfer(feeSpender, feeCollector, feeValue);\n', '            }\n', '        }\n', '        return _value;\n', '    }\n', '\n', '    function _topup(address payable _address) internal {\n', "        uint256 topupEnabled = config.get('eth.topup');\n", '        if(topupEnabled > 0){\n', "            uint256 minBalance = config.get('eth.minBalance') * 1 finney;\n", '            if(address(this).balance > minBalance){\n', '                if(_address.balance < minBalance){\n', '                    _address.transfer(minBalance.sub(_address.balance));\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function _issue(address payable _to, uint256 _value) internal returns (bool) {\n', '        accounts.addTo(_to, _value);\n', '        accounts.addTotalSupply(_value);\n', '        master.emitTransfer(address(0x0), _to, _value);\n', '        _topup(_to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * OWNER METHODS\n', '     */\n', '    function issue(address payable _to, uint256 _value) public onlyOwner returns (bool) {\n', '        return _issue(_to, _value);\n', '    }\n', '\n', '    function burn(address _from, uint256 _value) public onlyOwner returns (bool) {\n', '        accounts.subFrom(_from, _value);\n', '        accounts.subTotalSupply(_value);\n', '        // todo: emitBurn\n', '        return true;\n', '    }\n', '\n', '    function ownerTransferFrom(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        accounts.addTo(_to, _value);\n', '        accounts.subFrom(_from, _value);\n', '        master.emitTransfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SunRich is ERC20, Ownable {\n', '    string public constant version = "0.4";\n', '    string public name = "Sunrich (RUB)";\n', '    string public symbol = "SRT(R)";\n', '    uint256 public constant decimals = 2;\n', '\n', '    SunRichController public ctrl;\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == address(ctrl));\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function updateName(string memory _name) public onlyOwner {\n', '        name = _name;\n', '    }\n', '    \n', '    function updateSymbol(string memory _symbol) public onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setController(address payable _ctrl) public onlyOwner {\n', '        ctrl = SunRichController(_ctrl);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return ctrl.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns (uint256) {\n', '        return ctrl.balanceOf(_who);\n', '    }\n', '\n', '    function transfer(address payable _to, uint256 _value) public returns (bool) {\n', '        return ctrl.transferWithSender(msg.sender, _to, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return ctrl.allowance(_owner, _spender);\n', '    }\n', '\n', '    function transferFrom(address payable _from, address payable _to, uint256 _value) public returns (bool) {\n', '        return ctrl.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return ctrl.approve(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function emitTransfer(address _from, address _to, uint256 _value) public onlyController {\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function emitApproval(address _owner, address _spender, uint256 _value) public onlyController {\n', '        emit Approval(_owner, _spender, _value);\n', '    }\n', '\n', '    function setBusinessAccount(address _owner, bool _value) public {\n', '        ctrl.setBusinessAccount(msg.sender, _owner, _value);\n', '    }\n', '}']