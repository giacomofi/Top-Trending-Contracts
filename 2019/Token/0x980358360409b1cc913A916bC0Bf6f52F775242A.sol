['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity >=0.5.10;\n', '\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract KNCLock {\n', '    \n', '    IERC20 public KNC = IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\n', '    \n', '    uint public lockId;\n', '    mapping (address=>uint) lockedKNC;\n', '    \n', '    constructor(IERC20 knc) public {\n', '        \n', '        KNC = knc;\n', '    }\n', '    \n', '    event Lock (\n', '        uint indexed qty, \n', '        uint64 indexed eosRecipientName, \n', '        uint indexed lockId\n', '    );\n', '    \n', '    function lock(uint qty, string memory eosAddr, uint64 eosRecipientName) public {\n', '        \n', '        eosAddr;\n', '        \n', '        //Transfer the KNC\n', '        require(KNC.transferFrom(msg.sender, address(this), qty));\n', '        \n', '        lockedKNC[msg.sender] += qty;\n', '        \n', '        emit Lock(qty, eosRecipientName, lockId);\n', '        \n', '        ++lockId;\n', '    }\n', '    \n', '    function unLock(uint qty) public {\n', '        require(lockedKNC[msg.sender] >= qty);\n', '        \n', '        lockedKNC[msg.sender] -= qty;\n', '        \n', '        require(KNC.transfer(msg.sender, qty));\n', '    }\n', '}']