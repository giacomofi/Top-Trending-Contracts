['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address tokenOwner) external view returns (uint256);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 tokenAmount) external returns (bool);\n', '    function approve(address spender, uint256 tokenAmount) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool);\n', '    function burn(uint256 tokenAmount) external returns (bool success);\n', '    function burnFrom(address from, uint256 tokenAmount) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\n', '    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\n', '    event Burn(address indexed from, uint256 tokenAmount);\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address from, uint256 tokenAmount, address token, bytes extraData) external;\n', '}\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, reverts on overflow.\n', '     */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, "Multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, "Division by 0"); // Solidity only automatically requires when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // require(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, "Subtraction overflow");\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, reverts on overflow.\n', '     */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, "Addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Dividing by 0");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BrewerscoinToken is owned, IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private constant base = 1e18;\n', '    uint256 constant MAX_UINT = 2**256 - 1;\n', '\n', '    // Public variables of the token\n', '    string public constant name = "Brewer\'s coin";\n', '    string public constant symbol = "BREW";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply = 1e26;              // 100 million\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 tokenAmount);\n', '    event Approval(address indexed tokenHolder, address indexed spender, uint256 tokenAmount);\n', '    event Burn(address indexed from, uint256 tokenAmount);\n', '\n', '    // Error messages\n', '    string private constant NOT_ENOUGH_TOKENS = "Not enough tokens";\n', '    string private constant NOT_ENOUGH_ETHER = "Not enough ether";\n', '    string private constant NOT_ENOUGH_ALLOWANCE = "Not enough allowance";\n', '    string private constant ADDRESS_0_NOT_ALLOWED = "Address 0 not allowed";\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '\n', '        // put all tokens on owner balance\n', '        balances[msg.sender] = totalSupply;\n', '\n', '        // allow owner 2^256-1 tokens of this contract, the fee of buyBeer will be transfered to this contract\n', '        allowance[this][msg.sender] = MAX_UINT;\n', '    }\n', '\n', '    /**\n', '     * Total Supply\n', '     *\n', '     * Get the total supply of tokens\n', '     */\n', '    function totalSupply() external view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Function to check the amount of tokens that an tokenOwner allowed to a spender\n', '     *\n', '     * @param tokenOwner address The address which owns the funds\n', '     * @param spender address The address which will spend the funds\n', '     */\n', '    function allowance(address tokenOwner, address spender) external view returns (uint256) {\n', '        return allowance[tokenOwner][spender];\n', '    }\n', '\n', '    /**\n', '     * Function to get the amount of tokens that an address contains\n', '     *\n', '     * @param tokenOwner address The address which owns the funds\n', '     */\n', '    function balanceOf(address tokenOwner) external view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `tokenAmount` tokens to `to` from your account\n', '     *\n', '     * @param to the address of the recipient\n', '     * @param tokenAmount the amount to send\n', '     */\n', '    function transfer(address to, uint256 tokenAmount) external returns (bool) {\n', '        _transfer(msg.sender, to, tokenAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address if allowed\n', '     *\n', '     * Send `tokenAmount` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from The address of the sender\n', '     * @param to The address of the recipient\n', '     * @param tokenAmount the amount to send\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenAmount) external returns (bool) {\n', '\n', '        // Check allowance\n', '        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n', '\n', '        // transfer\n', '        _transfer(from, to, tokenAmount);\n', '\n', '        // Subtract allowance\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Internal method for transferring tokens from one address to the other\n', '     *\n', '     * Send `tokenAmount` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from the address of the sender\n', '     * @param to the address of the recipient\n', '     * @param tokenAmount the amount of tokens to transfer\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenAmount) internal {\n', '\n', '        // Check if the sender has enough tokens\n', '        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n', '\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(to != address(0), ADDRESS_0_NOT_ALLOWED);\n', '\n', '        // Subtract tokens from sender\n', '        balances[from] = balances[from].sub(tokenAmount);\n', '\n', '        // Add the tokens to the recipient\n', '        balances[to] = balances[to].add(tokenAmount);\n', '\n', '        // Trigger event\n', '        emit Transfer(from, to, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param tokenAmount the max amount they can spend\n', '     */\n', '    function approve(address spender, uint256 tokenAmount) external returns (bool success) {\n', '        return _approve(spender, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param spender the address authorised to spend\n', '     * @param tokenAmount the max amount they can spend\n', '     * @param extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address spender, uint256 tokenAmount, bytes extraData) external returns (bool success) {\n', '        tokenRecipient _spender = tokenRecipient(spender);\n', '        if (_approve(spender, tokenAmount)) {\n', '            _spender.receiveApproval(msg.sender, tokenAmount, this, extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `tokenAmount` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param tokenAmount the max amount they can spend\n', '     */\n', '    function _approve(address spender, uint256 tokenAmount) internal returns (bool success) {\n', '        allowance[msg.sender][spender] = tokenAmount;\n', '        emit Approval(msg.sender, spender, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `tokenAmount` tokens from the system irreversibly\n', '     *\n', '     * @param tokenAmount the amount of tokens to burn\n', '     */\n', '    function burn(uint256 tokenAmount) external returns (bool success) {\n', '\n', '        _burn(msg.sender, tokenAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `tokenAmount` tokens from the system irreversibly on behalf of `from`.\n', '     *\n', '     * @param from the address of the sender\n', '     * @param tokenAmount the amount of tokens to burn\n', '     */\n', '    function burnFrom(address from, uint256 tokenAmount) public returns (bool success) {\n', '\n', '        // Check allowance\n', '        require(tokenAmount <= allowance[from][msg.sender], NOT_ENOUGH_ALLOWANCE);\n', '\n', '        // Burn\n', '        _burn(from, tokenAmount);\n', '\n', "        // Subtract from the sender's allowance\n", '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(tokenAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `tokenAmount` tokens from the system irreversibly\n', '     *\n', '     * @param from the address to burn tokens from\n', '     * @param tokenAmount the amount of tokens to burn\n', '     */\n', '    function _burn(address from, uint256 tokenAmount) internal {\n', '\n', '        // Check if the sender has enough\n', '        require(tokenAmount <= balances[from], NOT_ENOUGH_TOKENS);\n', '\n', '        // Subtract from the sender\n', '        balances[from] = balances[from].sub(tokenAmount);\n', '\n', '        // Updates totalSupply\n', '        totalSupply = totalSupply.sub(tokenAmount);\n', '\n', '        // Burn tokens\n', '        emit Burn(from, tokenAmount);\n', '    }\n', '}']