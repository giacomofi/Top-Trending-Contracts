['pragma solidity ^0.5.0;\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes memory sig) public pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '    uint256 internal _totalSupply;\n', '    \n', '    constructor() internal {\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return _balances[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address to, uint256 value) internal {\n', '        require(_from != address(0), "ERC20: transfer from the zero address");\n', '        require(to != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[_from] = _balances[_from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(_from, to, value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    using SafeMath for uint256;\n', '    uint256 public startdate;\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '        startdate = now;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Ownerble: caller is not owner.");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public;\n', '\n', '    function _transferOwnership(address newOwner) internal onlyOwner {\n', '        require(newOwner != address(0), "Ownerble: address is zero.");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "MinterRole: caller does not have the Minter role.");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function renounceMinter() public;\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', 'contract Mintable is MinterRole{\n', '     uint256 private _cap;\n', '     event Mint(address indexed minter, address receiver, uint256 value);\n', '    \n', '    constructor (uint256 cap) internal {\n', '        require(cap > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap;\n', '    }\n', '\n', '    function renounceMinter() public;\n', '\n', '    function addMinter(address minter) public;\n', '\n', '    function removeMinter(address minter) public;\n', '\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '    \n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        emit Mint(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function _mint(address account, uint256 value) internal;\n', '}\n', '\n', 'contract Pausable {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function _pause() internal whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function _unpause() internal whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '    \n', '    function pause() public;\n', '    function unpause() public;\n', '}\n', '\n', 'contract Burnable {\n', '    event Burn(address burner, uint256 value);\n', '\n', '    constructor () internal {}\n', '    function burn(address account, uint256 value) public;\n', '\n', '    function _burn(address account, uint256 value) internal{\n', '        emit Burn(account, value);\n', '    }\n', '}\n', '\n', 'contract Lockable {\n', '    uint256 internal _totalLocked = 0;\n', '    event Lock(address beneficiary, uint256 amount, uint256 releaseTime);\n', '    \n', '    mapping(address => uint256) internal _lock_list_period;\n', '    mapping(address => bool) internal _lock_list;\n', '    mapping(address => uint256) internal _revocable;\n', '    \n', '    modifier notLocked() {\n', '        require(_lock_list[msg.sender] == true, "Lockable: sender address is locked.");\n', '        _;\n', '    }\n', '    \n', '    function totalLocked() public view returns (uint256){\n', '        return _totalLocked;\n', '    }\n', '    \n', '    function mintLockedToken(address addr, uint256 tokens, uint256 _duration) public;\n', '    \n', '    function releaseLockedToken() public returns (bool);\n', '    \n', '    function isLocked(address addr) public view returns (bool) {\n', '        return _lock_list[addr];\n', '    }\n', '    \n', '    function lockedPeriod(address addr) public view returns (uint256) {\n', '        return _lock_list_period[addr];\n', '    }\n', '    \n', '    function lockedBalance(address addr) public view returns (uint256) {\n', '        return _revocable[addr];\n', '    }\n', '}\n', '\n', 'contract DelegatorRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event DelegatorAdded(address indexed account);\n', '    event DelegatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _delegators;\n', '\n', '    constructor () internal {\n', '        _addDelegator(msg.sender);\n', '    }\n', '\n', '    modifier onlyDelegator() {\n', '        require(isDelegator(msg.sender), "DelegatorRole: caller does not have the Delegator role.");\n', '        _;\n', '    }\n', '\n', '    function isDelegator(address account) public view returns (bool) {\n', '        return _delegators.has(account);\n', '    }\n', '\n', '    function renounceDelegator() public;\n', '\n', '    function _addDelegator(address account) internal {\n', '        _delegators.add(account);\n', '        emit DelegatorAdded(account);\n', '    }\n', '\n', '    function _removeDelegator(address account) internal {\n', '        _delegators.remove(account);\n', '        emit DelegatorRemoved(account);\n', '    }\n', '}\n', '\n', 'contract Delegatable is DelegatorRole{\n', '    using ECRecovery for bytes32;\n', '    using SafeMath for uint;\n', '\n', '    uint16 private _feeRate;\n', '    address private _feeCollector;\n', '    mapping(address => uint256) internal _nonces;\n', '    event Delegated(address delegator, address sender, address receiver, uint256 value, uint256 nonce);\n', '\n', '    constructor () internal{\n', '        _feeRate = 10; //0.01%\n', '        _feeCollector = msg.sender;\n', '    }\n', '\n', '    function setFeeRate(uint16 _rate) public;\n', '\n', '    function setFeeCollector(address _collector) public;\n', '\n', '    function addDelegator(address minter) public;\n', '\n', '    function removeDelegator(address minter) public;\n', '\n', '    function renounceDelegator() public;\n', '\n', '    function _setFeeRate(uint16 _rate) internal{\n', '        _feeRate = _rate;\n', '    }\n', '\n', '    function _setFeeCollector(address _collector) internal{\n', '        _feeCollector = _collector;\n', '    }\n', '\n', '    function feeRate() public view returns (uint16){\n', '        return _feeRate;\n', '    }\n', '\n', '    function feeCollector() public view returns (address){\n', '        return _feeCollector;\n', '    }\n', '\n', '    function nonceOf(address _addr) public view returns (uint256 nonce){\n', '        return _nonces[_addr];\n', '    }\n', '\n', '    function _delegatedTransfer(address _from, address _to, uint256 _value, uint256 _fee) internal returns(bool success);\n', '\n', '    function delegatedTransfer(address _from, address _to, uint256 _value, uint256 _nonce, bytes calldata _signature) external onlyDelegator returns(bool success){\n', '        require(_nonce == nonceOf(_from), "Delegatable: nonce is not correct");\n', '\n', '        bytes32 hash = keccak256(abi.encodePacked(\n', '            "\\x19Ethereum Signed Message:\\n32",\n', '            keccak256(abi.encodePacked(_from, _to, _value, _nonce)))\n', '        );\n', '        address sender = hash.recover(_signature);\n', '\n', '        // fee\n', '        uint _fee = _value.mul(_feeRate).div(uint(100000));\n', '        \n', '        if(_from == sender){\n', '            if(_delegatedTransfer(_from, _to, _value, _fee)){\n', '                uint256 newNonce = nonceOf(_from).add(uint256(1));\n', '                _nonces[_from] = newNonce;\n', '                emit Delegated(msg.sender, _from, _to, _value, newNonce);\n', '                return true;\n', '            }\n', '            else{\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'contract TrancheToken is ERC20, Ownable, Mintable, Pausable, Burnable, Lockable, Delegatable{\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals = 18;\n', '\n', '    constructor (string memory name, string memory symbol, uint256 cap) public Mintable(cap){\n', '        _name = name;\n', '        _symbol = symbol;\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    //Override Mintable\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0), "Mintable: mint to the zero address.");\n', '        require(totalSupply().add(value).add(totalLocked()) <= cap(), "Mintable: cap exceeded.");\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '    \n', '    function renounceMinter() public {\n', '        require(msg.sender != owner, "Mintable: Owner cannot renounce. Transfer owner first.");\n', '        super._removeMinter(msg.sender);\n', '    }\n', ' \n', '    function addMinter(address minter) public onlyOwner{\n', '        super._addMinter(minter);\n', '\n', '    }\n', '    \n', '    function removeMinter(address minter) public onlyOwner{\n', '        super._removeMinter(minter);\n', '    }\n', '    \n', '    //Override Ownerble\n', '    function transferOwnership(address newOwner) public{\n', '        require(msg.sender == owner, "Ownerble: only owner transfer ownership");\n', '        addMinter(newOwner);\n', '        addDelegator(newOwner);\n', '        removeMinter(owner);\n', '        removeDelegator(owner);\n', '        super._transferOwnership(newOwner);\n', '    }\n', '\n', '    //Override Pausable\n', '    function pause() public onlyOwner {\n', '        require(!paused(), "Pausable: Already paused.");\n', '        super._pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        require(paused(), "Pausable: Not paused.");\n', '        super._unpause();\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(!paused(), "Pausable: token transfer is paused.");\n', '        super._transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(value > 0, "transferFrom: value is must be greater than zero.");\n', '        require(balanceOf(from) >= value, "transferFrom: balance of from address is not enough");\n', '        require(_allowances[from][msg.sender] >= value, "transferFrom: sender are not allowed to send.");\n', '        \n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    //Override Burnable\n', '    function burn(address account, uint256 value) public onlyOwner {\n', '        require(account != address(0), "Burnable: burn from the zero address");\n', '        require(_balances[account] >= value, "Burnable: not enought tokens");\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        super._burn(account, value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '    \n', '    //Apply SafeTransfer\n', '    function safeTransfer(address to, uint256 value) public {\n', '        require(!_isContract(to),"SafeTransfer: receiver is contreact");\n', '        transfer(to,value);\n', '    }\n', '\n', '    function safeTransferFrom(address from, address to, uint256 value) public {\n', '        require(!_isContract(from),"SafeTransfer: sender is contract");\n', '        require(!_isContract(to),"SafeTransfer: receiver is contract");\n', '        transferFrom(from, to, value);\n', '    }\n', '\n', '    function safeApprove(address spender, uint256 value) public {\n', '        require(value != 0, "SafeTransfer: approve from non-zero to non-zero allowance");\n', '        require(!_isContract(spender),"SafeTransfer: spender is contract");\n', '        approve(spender, value);\n', '    }\n', '\n', '    function _isContract(address _addr) private view returns (bool is_contract){\n', '        uint length;\n', '        assembly {\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '    //Override Lockable\n', '    function mintLockedToken(address addr, uint256 tokens, uint256 _duration) public {\n', '        require(msg.sender == owner, "Lockable: only owner can lock token ");\n', '        require(_totalSupply.add(totalLocked()).add(tokens) <= cap(), "Lockable: locked tokens can not exceed total cap.");\n', '        require(_lock_list[addr] == false, "Lockable: this address is already locked");\n', '        \n', '        uint256 releaseTime = block.timestamp.add(_duration.mul(1 minutes));\n', '        \n', '        //if(_lock_list[addr] == true) {\n', '        //    _totalLocked.sub(_revocable[addr]);\n', '        //}\n', '        \n', '        _lock_list_period[addr] = releaseTime;\n', '        _lock_list[addr] = true;\n', '        _revocable[addr] = tokens;\n', '        _totalLocked = _totalLocked.add(tokens);\n', '        \n', '        emit Lock(addr, tokens, releaseTime);\n', '    }\n', '    \n', '    function releaseLockedToken() public returns (bool) {\n', '        require(_lock_list[msg.sender] == true);\n', '        require(_revocable[msg.sender] > 0);\n', '        \n', '        uint256 releaseTime = _lock_list_period[msg.sender];\n', '        uint256 currentTime = block.timestamp;\n', '        \n', '        if(currentTime > releaseTime) {\n', '            uint256 tokens = _revocable[msg.sender];\n', '            \n', '            _lock_list_period[msg.sender] = 0;\n', '            _lock_list[msg.sender] = false;\n', '            _revocable[msg.sender] = 0;\n', '            _totalSupply = _totalSupply.add(tokens);\n', '            _balances[msg.sender] = _balances[msg.sender].add(tokens);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //Override Delegatable\n', '    function setFeeRate(uint16 _rate) public{\n', '        require(msg.sender == owner, "Delegatable: only owner change the fee rate");\n', '        _setFeeRate(_rate);\n', '    }\n', '\n', '    function setFeeCollector(address _collector) public{\n', '        require(msg.sender == owner, "Delegatable: only owner change the fee collector");\n', '        _setFeeCollector(_collector);\n', '    }\n', '\n', '    function renounceDelegator() public {\n', '        require(msg.sender != owner, "Delegatable : Owner cannot renounce. Transfer owner first.");\n', '        super._removeDelegator(msg.sender);\n', '    }\n', '\n', '    function _delegatedTransfer(address _from, address _to, uint256 _value, uint256 _fee) internal returns(bool success){\n', '        uint _amount = _value.add(_fee);\n', '\n', '        if (balanceOf(_from) < _amount)\n', '            return false;\n', '        _balances[_from] = balanceOf(_from).sub(_amount);\n', '        _balances[_to] = balanceOf(_to).add(_value);\n', '        _balances[feeCollector()] = balanceOf(feeCollector()).add(_fee);\n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(_from, feeCollector(), _fee);\n', '        return true;\n', '    }\n', '\n', '    function addDelegator(address delegator) public onlyOwner{\n', '        super._addDelegator(delegator);\n', '\n', '    }\n', '    \n', '    function removeDelegator(address delegator) public onlyOwner{\n', '        super._removeDelegator(delegator);\n', '    }\n', '}']