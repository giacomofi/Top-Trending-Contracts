['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner and manager address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public manager;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    event ManagerTransfer(address indexed oldaddr, address indexed newaddr);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == owner || msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    function transferManager(address _newManager) onlyAdmin public {\n', '        require(_newManager != address(0));\n', '        emit ManagerTransfer(manager, _newManager);\n', '        manager = _newManager;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public returns (bool) {\n', '        paused = true;\n', '        emit Pause();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public returns (bool) {\n', '        paused = false;\n', '        emit Unpause();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'library ContractLib {\n', '    /*\n', '    * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    */\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '}\n', '\n', '/*\n', '* Contract that is working with ERC223 tokens\n', '*/\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure;\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool);\n', '\n', '    function name() public constant returns (string);\n', '\n', '    function symbol() public constant returns (string);\n', '\n', '    function decimals() public constant returns (uint8);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', '\n', '/**\n', '* ERC223 token by Dexaran\n', '*\n', '* https://github.com/Dexaran/ERC223-token-standard\n', '*/\n', '\n', 'contract ERC223 is ERC20Interface {\n', '\n', '    function transfer(address to, uint value, bytes data) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '}\n', '\n', 'contract Lock is Ownable {\n', '    bool public useLock = true;\n', '    //accounts that is locked\n', '    mapping(address => bool) public lockedAccount;\n', '\n', '    event Locked(address indexed target, bool locked);\n', '    modifier tokenLock() {\n', '        if (useLock == true) {\n', '            require(!lockedAccount[msg.sender], "account is locked");\n', '        }\n', '        _;\n', '    }\n', '\n', '    function setLockToken(bool _lock) onlyAdmin public {\n', '        useLock = _lock;\n', '    }\n', '\n', '    function lockAccounts(address[] targets) onlyAdmin public returns (bool){\n', '        for (uint8 i = 0; i < targets.length; i++) {\n', '            lockedAccount[targets[i]] = true;\n', '            emit Locked(targets[i], true);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function unlockAccounts(address[] targets) onlyAdmin public returns (bool){\n', '        for (uint8 i = 0; i < targets.length; i++) {\n', '            lockedAccount[targets[i]] = false;\n', '            emit Locked(targets[i], false);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ACCToken is ERC223, Lock, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '    using ContractLib for address;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        symbol = "ACC";\n', '        name = "AlphaCityCoin";\n', '        decimals = 18;\n', '        totalSupply = 100000000000 * 1 ether;\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    // Function to access name of token .\n', '    function name() public constant returns (string) {\n', '        return name;\n', '    }\n', '\n', '    // Function to access symbol of token .\n', '    function symbol() public constant returns (string) {\n', '        return symbol;\n', '    }\n', '\n', '    // Function to access decimals of token .\n', '    function decimals() public constant returns (uint8) {\n', '        return decimals;\n', '    }\n', '\n', '    // Function to access total supply of tokens .\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data) public whenNotPaused tokenLock returns (bool) {\n', '        require(_to != 0x0);\n', '        if (_to.isContract()) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public whenNotPaused tokenLock returns (bool) {\n', '        require(_to != 0x0);\n', '\n', '        bytes memory empty;\n', '        if (_to.isContract()) {\n', '            return transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool) {\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    // get the address of balance\n', '    function balanceOf(address _owner) public constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function burn(uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_value > 0);\n', '        require(balanceOf(msg.sender) >= _value);\n', '        // Check if the sender has enough\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);\n', '        // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    ///@dev Token owner can approve for `spender` to transferFrom() `tokens`\n', "    ///from the token owner's account\n", '    function approve(address spender, uint tokens) public whenNotPaused returns (bool) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    ///@dev Transfer `tokens` from the `from` account to the `to` account\n', '    function transferFrom(address from, address to, uint tokens) public whenNotPaused tokenLock returns (bool) {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '}']