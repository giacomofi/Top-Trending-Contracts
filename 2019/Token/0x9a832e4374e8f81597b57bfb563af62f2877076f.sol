['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @dev Wrappers over Solidity&#39;s arithmetic operations with added overflow\n', ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', ' * class of bugs, so it&#39;s recommended to use it always.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `+` operator.\n', '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * Counterpart to Solidity&#39;s `-` operator.\n', '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', '     * Counterpart to Solidity&#39;s `*` operator.\n', '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `/` operator. Note: this function uses a\n', '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', '     * Counterpart to Solidity&#39;s `%` operator. This function uses a `revert`\n', '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from the caller&#39;s account to `recipient`.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the caller&#39;s tokens.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', '     * condition is to first reduce the spender&#39;s allowance to 0 and set the\n', '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', '     * allowance mechanism. `amount` is then deducted from the caller&#39;s\n', '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: eth-token-recover/contracts/TokenRecover.sol\n', '\n', '/**\n', ' * @title TokenRecover\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Allow to recover any ERC20 sent into the contract for error\n', ' */\n', 'contract TokenRecover is Ownable {\n', '\n', '    /**\n', '     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n', '     * @param tokenAddress The token contract address\n', '     * @param tokenAmount Number of tokens to be sent\n', '     */\n', '    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n', '        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '    }\n', '}\n', '\n', '// File: contracts/AirDrop.sol\n', '\n', '/**\n', ' * @title AirDrop\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Contract to distribute tokens by transferFrom function\n', ' */\n', 'contract AirDrop is TokenRecover {\n', '    using SafeMath for uint256;\n', '\n', '    // the token to distribute\n', '    IERC20 private _token;\n', '\n', '    // the max token cap to distribute\n', '    uint256 private _cap;\n', '\n', '    // wallet where to transfer the tokens from\n', '    address private _wallet;\n', '\n', '    // the sum of distributed tokens\n', '    uint256 private _distributedTokens;\n', '\n', '    // map of address and received token amount\n', '    mapping(address => uint256) private _receivedTokens;\n', '\n', '    /**\n', '     * @param token Address of the token being distributed\n', '     * @param cap Max amount of token to be distributed\n', '     * @param wallet Address where are tokens stored\n', '     */\n', '    constructor(IERC20 token, uint256 cap, address wallet) public {\n', '        require(address(token) != address(0));\n', '        require(cap > 0);\n', '        require(wallet != address(0));\n', '\n', '        _token = token;\n', '        _cap = cap;\n', '        _wallet = wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the token to distributed\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the max token cap to distribute\n', '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @return wallet where to transfer the tokens from\n', '     */\n', '    function wallet() public view returns (address) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the sum of distributed tokens\n', '     */\n', '    function distributedTokens() public view returns (uint256) {\n', '        return _distributedTokens;\n', '    }\n', '\n', '    /**\n', '     * @param account The address to check\n', '     * @return received token amount for the given address\n', '     */\n', '    function receivedTokens(address account) public view returns (uint256) {\n', '        return _receivedTokens[account];\n', '    }\n', '\n', '    /**\n', '     * @dev return the number of remaining tokens to distribute\n', '     * @return uint256\n', '     */\n', '    function remainingTokens() public view returns (uint256) {\n', '        return _cap.sub(_distributedTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev send tokens\n', '     * @param accounts Array of addresses being distributing\n', '     * @param amounts Array of amounts of token distributed\n', '     */\n', '    function multiSend(address[] memory accounts, uint256[] memory amounts) public onlyOwner {\n', '        require(accounts.length > 0);\n', '        require(amounts.length > 0);\n', '        require(accounts.length == amounts.length);\n', '\n', '        for (uint i = 0; i < accounts.length; i++) {\n', '            address account = accounts[i];\n', '            uint256 amount = amounts[i];\n', '\n', '            if (_receivedTokens[account] == 0) {\n', '                _receivedTokens[account] = _receivedTokens[account].add(amount);\n', '                _distributedTokens = _distributedTokens.add(amount);\n', '\n', '                require(_distributedTokens <= _cap);\n', '\n', '                _distributeTokens(account, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev distribute tokens\n', '     * @param account Address being distributing\n', '     * @param amount Amount of token distributed\n', '     */\n', '    function _distributeTokens(address account, uint256 amount) internal {\n', '        _token.transferFrom(_wallet, account, amount);\n', '    }\n', '}']