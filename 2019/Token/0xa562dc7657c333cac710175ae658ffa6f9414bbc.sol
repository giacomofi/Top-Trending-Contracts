['pragma solidity ^0.5.2;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BITFRIENDZ is IERC20, Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    // Constructor - Sets the token Owner\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        _balances[0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F] = 2000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F, 2000000000 * 10 ** decimals);\n', '        _balances[0xdA78d97Fb07d945691916798CFF57324770a6C34] = 2000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0xdA78d97Fb07d945691916798CFF57324770a6C34, 2000000000 * 10 ** decimals);\n', '        _balances[0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160] = 1000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160, 1000000000 * 10 ** decimals);\n', '        _balances[address(this)] = 15000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), address(this), 15000000000 * 10 ** decimals);\n', '    }\n', '    \n', '    // Events\n', '    event Error(string err);\n', '    \n', '    // Token Setup\n', '    string public constant name = "BITFRIENDZ";\n', '    string public constant symbol = "BFRN";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public supply = 20000000000 * 10 ** decimals;\n', '    \n', '    uint256 public tokenPrice = 50000000000;\n', '    \n', '    // Balances for each account\n', '    mapping(address => uint256) _balances;\n', ' \n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) public _allowed;\n', ' \n', '    // Get the total supply of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return supply;\n', '    }\n', ' \n', '    // Get the token balance for account `tokenOwner`\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', ' \n', '    // Get the allowance of funds beteen a token holder and a spender\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', ' \n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address to, uint value) public returns (bool success) {\n', '        require(_balances[msg.sender] >= value);\n', '        if (to == address(this) || to == address(0)) {\n', '            burn(value);\n', '            return true;\n', '        } else {\n', '            _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '            _balances[to] = _balances[to].add(value);\n', '            emit Transfer(msg.sender, to, value);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    // Sets how much a sender is allowed to use of an owners funds\n', '    function approve(address spender, uint value) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    // Transfer from function, pulls from allowance\n', '    function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '        require(value <= balanceOf(from));\n', '        require(value <= allowance(from, to));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][to] = _allowed[from][to].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function () external payable {\n', '        require(msg.value >= tokenPrice);\n', '        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n', '        uint256 bonus = 0;\n', '        if (msg.value >= 1 ether && msg.value < 2 ether) {\n', '            bonus = (((amount * 100) + (amount * 25)) / 100);\n', '        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n', '            bonus = (((amount * 100) + (amount * 50)) / 100);\n', '        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n', '            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n', '        } else if (msg.value >= 5 ether) {\n', '            bonus = (((amount * 100) + (amount * 75)) / 100);\n', '        }\n', '        if (_balances[address(this)] < amount + bonus) {\n', '            revert();\n', '        }\n', '        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n', '        emit Transfer(address(this), msg.sender, amount + bonus);\n', '    }\n', '    \n', '    function BuyTokens() public payable {\n', '        require(msg.value >= tokenPrice);\n', '        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n', '        uint256 bonus = 0;\n', '        if (msg.value >= 1 ether && msg.value < 2 ether) {\n', '            bonus = (((amount * 100) + (amount * 25)) / 100);\n', '        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n', '            bonus = (((amount * 100) + (amount * 50)) / 100);\n', '        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n', '            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n', '        } else if (msg.value >= 5 ether) {\n', '            bonus = (((amount * 100) + (amount * 75)) / 100);\n', '        }\n', '        if (_balances[address(this)] < amount + bonus) {\n', '            revert();\n', '        }\n', '        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n', '        emit Transfer(address(this), msg.sender, amount + bonus);\n', '    }\n', '    \n', '    function endICO() public onlyOwner {\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_balances[address(this)]);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    function burn(uint256 amount) public {\n', '        require(_balances[msg.sender] >= amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        supply = supply.sub(amount);\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '}']
['pragma solidity ^0.5.2;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BITFRIENDZ is IERC20, Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    // Constructor - Sets the token Owner\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        _balances[0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F] = 2000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0x14fBA4aa05AEeC42336CB75bc30bF78dbC6b3f9F, 2000000000 * 10 ** decimals);\n', '        _balances[0xdA78d97Fb07d945691916798CFF57324770a6C34] = 2000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0xdA78d97Fb07d945691916798CFF57324770a6C34, 2000000000 * 10 ** decimals);\n', '        _balances[0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160] = 1000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), 0xF07e6A0EAbF18A3D8bB10e6E63c2E9e2d101C160, 1000000000 * 10 ** decimals);\n', '        _balances[address(this)] = 15000000000 * 10 ** decimals;\n', '        emit Transfer(address(0), address(this), 15000000000 * 10 ** decimals);\n', '    }\n', '    \n', '    // Events\n', '    event Error(string err);\n', '    \n', '    // Token Setup\n', '    string public constant name = "BITFRIENDZ";\n', '    string public constant symbol = "BFRN";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public supply = 20000000000 * 10 ** decimals;\n', '    \n', '    uint256 public tokenPrice = 50000000000;\n', '    \n', '    // Balances for each account\n', '    mapping(address => uint256) _balances;\n', ' \n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) public _allowed;\n', ' \n', '    // Get the total supply of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return supply;\n', '    }\n', ' \n', '    // Get the token balance for account `tokenOwner`\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', ' \n', '    // Get the allowance of funds beteen a token holder and a spender\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', ' \n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address to, uint value) public returns (bool success) {\n', '        require(_balances[msg.sender] >= value);\n', '        if (to == address(this) || to == address(0)) {\n', '            burn(value);\n', '            return true;\n', '        } else {\n', '            _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '            _balances[to] = _balances[to].add(value);\n', '            emit Transfer(msg.sender, to, value);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    // Sets how much a sender is allowed to use of an owners funds\n', '    function approve(address spender, uint value) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    // Transfer from function, pulls from allowance\n', '    function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '        require(value <= balanceOf(from));\n', '        require(value <= allowance(from, to));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][to] = _allowed[from][to].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function () external payable {\n', '        require(msg.value >= tokenPrice);\n', '        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n', '        uint256 bonus = 0;\n', '        if (msg.value >= 1 ether && msg.value < 2 ether) {\n', '            bonus = (((amount * 100) + (amount * 25)) / 100);\n', '        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n', '            bonus = (((amount * 100) + (amount * 50)) / 100);\n', '        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n', '            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n', '        } else if (msg.value >= 5 ether) {\n', '            bonus = (((amount * 100) + (amount * 75)) / 100);\n', '        }\n', '        if (_balances[address(this)] < amount + bonus) {\n', '            revert();\n', '        }\n', '        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n', '        emit Transfer(address(this), msg.sender, amount + bonus);\n', '    }\n', '    \n', '    function BuyTokens() public payable {\n', '        require(msg.value >= tokenPrice);\n', '        uint256 amount = (msg.value * 10 ** decimals) / tokenPrice;\n', '        uint256 bonus = 0;\n', '        if (msg.value >= 1 ether && msg.value < 2 ether) {\n', '            bonus = (((amount * 100) + (amount * 25)) / 100);\n', '        } else if (msg.value >= 2 ether && msg.value < 4 ether) {\n', '            bonus = (((amount * 100) + (amount * 50)) / 100);\n', '        } else if (msg.value >= 4 ether && msg.value < 5 ether) {\n', '            bonus = (((amount * 10000) + (amount * 5625)) / 10000);\n', '        } else if (msg.value >= 5 ether) {\n', '            bonus = (((amount * 100) + (amount * 75)) / 100);\n', '        }\n', '        if (_balances[address(this)] < amount + bonus) {\n', '            revert();\n', '        }\n', '        _balances[address(this)] = _balances[address(this)].sub(amount + bonus);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount + bonus);\n', '        emit Transfer(address(this), msg.sender, amount + bonus);\n', '    }\n', '    \n', '    function endICO() public onlyOwner {\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_balances[address(this)]);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    function burn(uint256 amount) public {\n', '        require(_balances[msg.sender] >= amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        supply = supply.sub(amount);\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '}']
