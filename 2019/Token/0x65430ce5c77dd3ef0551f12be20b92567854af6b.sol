['pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \n', '}\n', '\n', 'contract Blackstone {\n', '    using SafeMath for uint256;\n', '   \n', '    // Defining Variables & Mapping \n', '    string public name = "Blackstone";\n', '    string public symbol = "BLST";\n', '    uint256 public decimals = 0;\n', '    uint256 public totalSupply = 40000000;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn (address indexed _from, uint256 _value);\n', '    \n', '    // Constructor to Deploy the ERC20 Token\n', '    constructor() public {\n', '            name;\n', '            symbol;\n', '            decimals;\n', '            balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    // Transfer Function\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '    \trequire(_from != address(0));\n', '    \trequire(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '        uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '        \n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        \n', '        emit Transfer (_from, _to, _value);\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    // Transfer delegated Tokens\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    // Delegate/Approve spender a certain amount of Tokens\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(allowance[msg.sender][_spender].add(_value) >= allowance[msg.sender][_spender]);\n', '        \n', '        allowance[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval (msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    // Increase delegated amount\n', '    function increaseAllowance(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[msg.sender] >= allowance[msg.sender][_spender].add(_value));\n', '        require(allowance[msg.sender][_spender].add(_value) >= allowance[msg.sender][_spender]);\n', '\n', '        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_value);\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    // Decrease delegated amount\n', '    function decreaseAllowance(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '        \n', '        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].sub(_value);\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // Ping the contract about approved spender spendings\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extradata) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if(approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extradata);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    // Tokenburn\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        \n', '        emit Burn (msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(_from != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        \n', '        emit Burn (msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '}']