['pragma solidity ^0.4.24;\n', '// We announced each .sol file and omitted the verbose comments.\n', '// Gas limit : 5,000,000\n', '\n', 'library SafeMath {                             //SafeMath.sol\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) { return 0; }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '  using SafeMath for uint256;\n', '  address public owner;                                              //Ownable.sol\n', '  string public name = "FDEX";                                      //DetailedERC20.sol\n', '  string public symbol = "DESIA";                                    //DetailedERC20.sol\n', '  string public version = "DESIA v1.1";              // new\n', '  uint256 public decimals = 18;                                        //DetailedERC20.sol  \n', '  uint256 totalSupply_ = 12e8 * (10**uint256(decimals));             //BasicToken.sol\n', '  uint256 public cap = totalSupply_;                                 //CappedToken.sol\n', '  bool public paused = false;                                         //Pausable.sol\n', '  bool public mintingFinished = true;                                //MintableToken.sol\n', '  mapping(address => uint256) balances;                              //BasicToken.sol\n', '  mapping(address => mapping (address => uint256)) internal allowed; //StandardToken.sol\n', '  mapping(address => uint256) internal locked;          // new\n', '  event Burn(address indexed burner, uint256 value);                               //BurnableToken.sol\n', '  event Approval(address indexed owner, address indexed spender,uint256 value);    //ERC20.sol\n', '  event Transfer(address indexed from, address indexed to, uint256 value);         //ERC20Basic.sol\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); //Ownable.sol\n', '  event Pause();                                                                   //Pausable.sol\n', '  event Unpause();                                                                 //Pausable.sol\n', '  event Mint(address indexed to, uint256 amount, string reason);                   //MintableToken.sol, "reason" added\n', '  event MintFinished();                                                            //MintableToken.sol\n', '  event MintStarted(string reason);                      // new\n', '  event Lock(address indexed LockedAddress, uint256 LockAmount);             // new. lock each address\n', '  event Unlock(address indexed LockedAddress);           // new\n', '  event CapChange(uint256 Cap, string reason);           // new\n', '\n', '  constructor() public { \n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply_ ;\n', '  }\n', '\n', '  modifier onlyOwner()         {require(msg.sender == owner); _;}  //Ownable.sol\n', '  modifier whenPaused()        {require(paused); _; }              //Pausable.sol\n', '  modifier whenNotPaused()     {require(!paused); _;}              //Pausable.sol\n', '  modifier canMint()           {require(!mintingFinished); _;}     //MintableToken.sol\n', '  modifier cannotMint()        {require(mintingFinished); _;}      // new\n', '  modifier hasMintPermission() {require(msg.sender == owner);  _;} //MintableToken.sol\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {  //BasicToken.sol\n', '    return balances[_owner];\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {  //BasicToken.sol\n', '    return totalSupply_;\n', '  }\n', '  \n', '  function burn(uint256 _value) public { //BurnableToken.sol\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {  //BurnableToken.sol\n', '    require(_value <= balances[_who]);\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '  \n', '  function burnFrom(address _from, uint256 _value) public {  //StandardBurnableToken.sol\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '  \n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '      //StandardToken.sol, PausableToken.sol\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) { //StandardToken.sol\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns(bool){\n', '      //StandardToken.sol, PausableToken.sol\n', '    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns(bool) {\n', '      //StandardToken.sol, PausableToken.sol\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) { allowed[msg.sender][_spender] = 0;\n', '    } else                           { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {//BasicToken.sol, PausableToken.sol\n', '    require(_to != address(0));\n', '    require(locked[msg.sender].add(_value) <= balances[msg.sender]);  //Added\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {  \n', '      //StandardToken.sol, PausableToken.sol\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(locked[_from].add(_value) <= balances[_from]); //Added\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {   //Ownable.sol\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address _newOwner) internal {   //Ownable.sol\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {   //Pausable.sol, stop whole transfer\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {   //Pausable.sol\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount, string _reason) hasMintPermission canMint public returns (bool)  { \n', '      //MintableToken.sol, CappedToken.sol\n', '    require(totalSupply_.add(_amount) <= cap);\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount, _reason);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) { //MintableToken.sol\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {   //Destructible.sol\n', '    selfdestruct(_recipient);\n', '  }\n', '  \n', '/* new functions */\n', '  function startMinting(string reason) onlyOwner cannotMint public returns (bool) {\n', '    mintingFinished = false;\n', '    emit MintStarted(reason);\n', '    return true;\n', '  }\n', '\n', '  function burnOf(address _who, uint256 _value) public onlyOwner { // burn by owner\n', '    _burn(_who, _value);\n', '  }\n', '\n', '  function setCap(uint256 _cap, string _reason) public onlyOwner {\n', '    _setCap(_cap, _reason);\n', '  }\n', '\n', '  function _setCap(uint256 _cap, string _reason) internal onlyOwner { // change the limit of cap\n', '    cap = _cap;\n', '    emit CapChange(_cap, _reason);\n', '  }\n', '  \n', '  function multiTransfer(address[] _to, uint256[] _amount) whenNotPaused public returns (bool) {\n', '    require(_to.length == _amount.length);\n', '    uint256 i;\n', '    uint256 amountSum = 0;\n', '    for (i=0; i < _amount.length; i++){\n', '      require(_amount[i] > 0);\n', '      require(_to[i] != address(0));\n', '      amountSum = amountSum.add(_amount[i]);\n', '    }\n', '    require(locked[msg.sender].add(amountSum) <= balances[msg.sender]);  //Added\n', '    require(amountSum <= balances[msg.sender]);\n', '    for (i=0; i < _to.length; i++){\n', '      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n', '      emit Transfer(msg.sender, _to[i], _amount[i]);\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].sub(amountSum);\n', '    return true;\n', '  }\n', '  \n', '  function multiMint(address[] _to, uint256[] _amount, string _reason) hasMintPermission canMint public returns (bool) {\n', '    require(_to.length == _amount.length);\n', '    uint16 i;              // less than 65536 at one time\n', '    uint256 amountSum = 0;\n', '    for (i=0; i < _amount.length; i++){\n', '      require(_amount[i] > 0);\n', '      require(_to[i] != address(0));\n', '      amountSum = amountSum.add(_amount[i]);\n', '    }\n', '    require(totalSupply_.add(amountSum) <= cap);\n', '    for (i=0; i < _to.length; i++){\n', '      mint(_to[i], _amount[i], _reason);\n', '    }\n', '    return true;\n', '  }\n', '  \n', "  function lock(address _lockAddress, uint256 _lockAmount) public onlyOwner returns (bool) {  // stop _lockAddress's transfer\n", '    require(_lockAddress != address(0));\n', '    require(_lockAddress != owner);\n', '    locked[_lockAddress] = _lockAmount; //Added\n', '    emit Lock(_lockAddress, _lockAmount);\n', '    return true;\n', '  }\n', '\n', '  function unlock(address _lockAddress) public onlyOwner returns (bool) {\n', '    require(_lockAddress != address(0));\n', '    require(_lockAddress != owner);\n', '    locked[_lockAddress] = 0; //Added\n', '    emit Unlock(_lockAddress);\n', '    return true;\n', '  }\n', '\n', '  function multiLock(address[] _lockAddress, uint256[] _lockAmount) public onlyOwner {\n', '    require(_lockAmount.length == _lockAddress.length);\n', '    for (uint i=0; i < _lockAddress.length; i++){\n', '      lock(_lockAddress[i], _lockAmount[i]);\n', '    }\n', '  }\n', '\n', '  function multiUnlock(address[] _lockAddress) public onlyOwner {\n', '    for (uint i=0; i < _lockAddress.length; i++){\n', '      unlock(_lockAddress[i]);\n', '    }\n', '  }\n', '\n', '  function checkLock(address _address) public view onlyOwner returns (uint256) { //Added\n', '    return locked[_address];\n', '  }\n', '\n', '}']