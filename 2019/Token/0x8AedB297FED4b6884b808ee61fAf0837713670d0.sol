['pragma solidity ^0.5.10;\n', '\n', '/// @title Interface for interacting with the MarbleCards Core contract created by the fine folks at Marble.Cards.\n', 'contract CardCore {\n', '    function approve(address _approved, uint256 _tokenId) external payable;\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor() public {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title Main contract for WrappedMarbleCards. Heavily inspired by the fine work of the WrappedKitties team\n', '///  (https://wrappedkitties.com/) This contract converts MarbleCards between the ERC721 standard and the\n', '///  ERC20 standard by locking marble.cards into the contract and minting 1:1 backed ERC20 tokens, that\n', '///  can then be redeemed for marble cards when desired.\n', '/// @notice When wrapping a marble card you get a generic WMC token. Since the WMC token is generic, it has no\n', '///  no information about what marble card you submitted, so you will most likely not receive the same card\n', "///  back when redeeming the token unless you specify that card's ID. The token only entitles you to receive\n", '///  *a* marble card in return, not necessarily the *same* marblecard in return. A different user can submit\n', '///  their own WMC tokens to the contract and withdraw the card that you originally deposited. WMC tokens have\n', '///  no information about which card was originally deposited to mint WMC - this is due to the very nature of\n', '///  the ERC20 standard being fungible, and the ERC721 standard being nonfungible.\n', 'contract WrappedMarbleCard is ERC20, Ownable, ReentrancyGuard {\n', '\n', "    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\n", '    using SafeMath for uint256;\n', '\n', '    /* ****** */\n', '    /* EVENTS */\n', '    /* ****** */\n', '\n', '    /// @dev This event is fired when a user deposits marblecards into the contract in exchange\n', '    ///  for an equal number of WMC ERC20 tokens.\n', '    /// @param cardId  The card id of the marble card that was deposited into the contract.\n', '    event DepositCardAndMintToken(\n', '        uint256 cardId\n', '    );\n', '\n', '    /// @dev This event is fired when a user deposits WMC ERC20 tokens into the contract in exchange\n', '    ///  for an equal number of locked marblecards.\n', '    /// @param cardId  The marblecard id of the card that was withdrawn from the contract.\n', '    event BurnTokenAndWithdrawCard(\n', '        uint256 cardId\n', '    );\n', '\n', '    /* ******* */\n', '    /* STORAGE */\n', '    /* ******* */\n', '\n', '    /// @dev An Array containing all of the marblecards that are locked in the contract, backing\n', '    ///  WMC ERC20 tokens 1:1\n', '    /// @notice Some of the cards in this array were indeed deposited to the contract, but they\n', '    ///  are no longer held by the contract. This is because withdrawSpecificCard() allows a\n', '    ///  user to withdraw a card "out of order". Since it would be prohibitively expensive to\n', "    ///  shift the entire array once we've withdrawn a single element, we instead maintain this\n", '    ///  mapping to determine whether an element is still contained in the contract or not.\n', '    uint256[] private depositedCardsArray;\n', '\n', "    /// @dev Mapping to track whether a card is in the contract and it's place in the index\n", '    mapping (uint256 => DepositedCard) private cardsInIndex;\n', '\n', "    /// A data structure for tracking whether a card is in the contract and it's location in the array.\n", '    struct DepositedCard {\n', '        bool inContract;\n', '        uint256 cardIndex;\n', '    }\n', '\n', '    /* ********* */\n', '    /* CONSTANTS */\n', '    /* ********* */\n', '\n', '    /// @dev The metadata details about the "Wrapped MarbleCards" WMC ERC20 token.\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "Wrapped MarbleCards";\n', '    string constant public symbol = "WMC";\n', '    uint256 constant internal cardInWei = uint256(10)**decimals;\n', '\n', '    /// @dev The address of official MarbleCards contract that stores the metadata about each card.\n', '    /// @notice The owner is not capable of changing the address of the MarbleCards Core contract\n', '    ///  once the contract has been deployed.\n', '    /// Ropsten Testnet\n', '    // address public cardCoreAddress = 0x5bb5Ce2EAa21375407F05FcA36b0b04F115efE7d;\n', '    /// Mainnet\n', '    address public cardCoreAddress = 0x1d963688FE2209A98dB35C67A041524822Cf04ff;\n', '    CardCore cardCore;\n', '\n', '    /* ********* */\n', '    /* FUNCTIONS */\n', '    /* ********* */\n', '\n', '\n', '    /// @notice Allows a user to lock marblecards in the contract in exchange for an equal number\n', '    ///  of WMC ERC20 tokens.\n', '    /// @param _cardIds  The ids of the marblecards that will be locked into the contract.\n', '    /// @notice The user must first call approve() in the MarbleCards Core contract on each card\n', '    ///  that they wish to deposit before calling depositCardsAndMintTokens(). There is no danger\n', "    ///  of this contract overreaching its approval, since the MarbleCards Core contract's approve()\n", '    ///  function only approves this contract for a single marble card. Calling approve() allows this\n', '    ///  contract to transfer the specified card in the depositCardsAndMintTokens() function.\n', '    function depositCardsAndMintTokens(uint256[] calldata _cardIds) external nonReentrant {\n', "        require(_cardIds.length > 0, 'you must submit an array with at least one element');\n", '        for(uint i = 0; i < _cardIds.length; i++){\n', '            uint256 cardToDeposit = _cardIds[i];\n', "            require(msg.sender == cardCore.ownerOf(cardToDeposit), 'you do not own this card');\n", "            require(cardCore.getApproved(cardToDeposit) == address(this), 'you must approve() this contract to give it permission to withdraw this card before you can deposit a card');\n", '            cardCore.transferFrom(msg.sender, address(this), cardToDeposit);\n', '            _pushCard(cardToDeposit);\n', '            emit DepositCardAndMintToken(cardToDeposit);\n', '        }\n', '        _mint(msg.sender, (_cardIds.length).mul(cardInWei));\n', '    }\n', '\n', '\n', '    /// @notice Allows a user to burn WMC ERC20 tokens in exchange for an equal number of locked\n', '    ///  marblecards.\n', '    /// @param _cardIds  The IDs of the cards that the user wishes to withdraw. If the user submits 0\n', '    ///  as the ID for any card, the contract uses the last card in the array for that card.\n', '    /// @param _destinationAddresses  The addresses that the withdrawn cards will be sent to (this allows\n', '    ///  anyone to "airdrop" cards to addresses that they do not own in a single transaction).\n', '    function burnTokensAndWithdrawCards(uint256[] calldata _cardIds, address[] calldata _destinationAddresses) external nonReentrant {\n', "        require(_cardIds.length == _destinationAddresses.length, 'you did not provide a destination address for each of the cards you wish to withdraw');\n", "        require(_cardIds.length > 0, 'you must submit an array with at least one element');\n", '\n', '        uint256 numTokensToBurn = _cardIds.length;\n', "        require(balanceOf(msg.sender) >= numTokensToBurn.mul(cardInWei), 'you do not own enough tokens to withdraw this many ERC721 cards');\n", '        _burn(msg.sender, numTokensToBurn.mul(cardInWei));\n', '\n', '        for(uint i = 0; i < numTokensToBurn; i++){\n', '            uint256 cardToWithdraw = _cardIds[i];\n', '            if(cardToWithdraw == 0){\n', '                cardToWithdraw = _popCard();\n', '            } else {\n', "                require(isCardInDeck(cardToWithdraw), 'this card is not in the deck');\n", "                require(address(this) == cardCore.ownerOf(cardToWithdraw), 'the contract does not own this card');\n", '                _removeFromDeck(cardToWithdraw);\n', '            }\n', '            cardCore.transferFrom(address(this), _destinationAddresses[i], cardToWithdraw);\n', '            emit BurnTokenAndWithdrawCard(cardToWithdraw);\n', '        }\n', '    }\n', '\n', '    /// @notice Adds a locked marblecard to the end of the array\n', '    /// @param _cardId  The id of the marblecard that will be locked into the contract.\n', '    function _pushCard(uint256 _cardId) internal {\n', '        // push() returns the new array length, sub 1 to get the index\n', '        uint256 index = depositedCardsArray.push(_cardId) - 1;\n', '        DepositedCard memory _card = DepositedCard(true, index);\n', '        cardsInIndex[_cardId] = _card;\n', '    }\n', '\n', '    /// @notice Removes an unlocked marblecard from the end of the array\n', '    /// @return  The id of the marblecard that will be unlocked from the contract.\n', '    function _popCard() internal returns(uint256) {\n', "        require(depositedCardsArray.length > 0, 'there are no cards in the array');\n", '        uint256 cardId = depositedCardsArray[depositedCardsArray.length - 1];\n', '        _removeFromDeck(cardId);\n', '        return cardId;\n', '    }\n', '\n', '    /// @notice The owner is not capable of changing the address of the MarbleCards Core\n', '    ///  contract once the contract has been deployed.\n', '    constructor() public {\n', '        cardCore = CardCore(cardCoreAddress);\n', '    }\n', '\n', '    /// @dev We leave the fallback function payable in case the current State Rent proposals require\n', '    ///  us to send funds to this contract to keep it alive on mainnet.\n', '    function() external payable {}\n', '\n', '    /// @dev If any eth is accidentally sent to this contract it can be withdrawn by the owner rather than letting\n', "    ///   it get locked up forever. Don't send ETH to the contract, but if you do, the developer will consider it a tip.\n", '    function extractAccidentalPayableEth() public onlyOwner returns (bool) {\n', '        require(address(this).balance > 0);\n', '        address(uint160(owner())).transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Gets the index of the card in the deck\n', '    function _getCardIndex(uint256 _cardId) internal view returns (uint256) {\n', '        require(isCardInDeck(_cardId));\n', '        return cardsInIndex[_cardId].cardIndex;\n', '    }\n', '\n', '    /// @dev Will return true if the cardId is a card that is in the deck.\n', '    function isCardInDeck(uint256 _cardId) public view returns (bool) {\n', '        return cardsInIndex[_cardId].inContract;\n', '    }\n', '\n', '    /// @dev Remove a card by switching the place in the array\n', '    function _removeFromDeck(uint256 _cardId) internal {\n', '        // Get the index of the card passed above\n', '        uint256 index = _getCardIndex(_cardId);\n', '        // Get the last element of the existing array\n', '        uint256 cardToMove = depositedCardsArray[depositedCardsArray.length - 1];\n', '        // Move the card at the end of the array to the location\n', '        //   of the card we want to void.\n', '        depositedCardsArray[index] = cardToMove;\n', '        // Move the card we are voiding to the end of the index\n', '        cardsInIndex[cardToMove].cardIndex = index;\n', '        // Trim the last card from the index\n', '        delete cardsInIndex[_cardId];\n', '        depositedCardsArray.length--;\n', '    }\n', '\n', '}']