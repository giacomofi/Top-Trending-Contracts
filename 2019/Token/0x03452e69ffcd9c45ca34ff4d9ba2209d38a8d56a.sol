['pragma solidity 0.5.1; \n', '\n', '\n', 'library SafeMath {\n', '\n', '    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, reverts on overflow.\n', '     */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        require(MAX_UINT / _a >= _b);\n', '        return _a * _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(_b != 0);\n', '        return _a / _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, reverts on overflow.\n', '     */\n', '    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(MAX_UINT - _a >= _b);\n', '        return _a + _b;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    uint256 internal totalSupply_;\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns(bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed account, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        require(balances[msg.sender] >= value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        emit Burn(msg.sender, value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens which belong to appointed address of account.\n', '     * @param account The address of appointed account.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burnFrom(address account, uint256 value) public {\n', '        require(account != address(0)); \n', '        require(balances[account] >= value);\n', '        require(allowed[account][msg.sender] >= value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n', '        emit Burn(account, value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Rewrite the key functions, add the modifier &#39;whenNotPaused&#39;,owner can stop the transaction.\n', ' */\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VESTELLAToken token contract\n', ' * @dev Initialize the basic information of VESTELLAToken.\n', ' */\n', 'contract VESTELLAToken is PausableToken, BurnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "VESTELLA"; // name of Token\n', '    string public constant symbol = "VES"; // symbol of Token\n', '    uint8 public constant decimals = 18; // decimals of Token\n', '    uint256 constant _INIT_TOTALSUPPLY = 15000000000; \n', '\n', '    mapping (address => uint256[]) internal locktime;\n', '    mapping (address => uint256[]) internal lockamount;\n', '\n', '    event AddLockPosition(address indexed account, uint256 amount, uint256 time);\n', '\n', '    /**\n', '     * @dev constructor Initialize the basic information.\n', '     */\n', '    constructor() public {\n', '        totalSupply_ = _INIT_TOTALSUPPLY * 10 ** uint256(decimals); \n', '        owner = 0x0F1b590cD3155571C8680B363867e20b8E4303bE;\n', '        balances[owner] = totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev addLockPosition function that only owner can add lock position for appointed address of account.\n', '     * one address can participate more than one lock position plan.\n', '     * @param account The address of account will participate lock position plan.\n', '     * @param amount The array of token amount that will be locked.\n', '     * @param time The timestamp of token will be released.\n', '     */\n', '    function addLockPosition(address account, uint256[] memory amount, uint256[] memory time) public onlyOwner returns(bool) { \n', '        require(account != address(0));\n', '        require(amount.length == time.length);\n', '        uint256 _lockamount = 0;\n', '        for(uint i = 0; i < amount.length; i++) {\n', '            uint256 _amount = amount[i] * 10 ** uint256(decimals);\n', '            require(time[i] > now);\n', '            locktime[account].push(time[i]);\n', '            lockamount[account].push(_amount);\n', '            emit AddLockPosition(account, _amount, time[i]);\n', '            _lockamount = _lockamount.add(_amount);\n', '        }\n', '        require(balances[msg.sender] >= _lockamount);\n', '        balances[account] = balances[account].add(_lockamount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_lockamount);\n', '        emit Transfer(msg.sender, account, _lockamount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev getLockPosition function get the detail information of an appointed account.\n', '     * @param account The address of appointed account.\n', '     */\n', '    function getLockPosition(address account) public view returns(uint256[] memory _locktime, uint256[] memory _lockamount) {\n', '        return (locktime[account], lockamount[account]);\n', '    }\n', '\n', '    /**\n', '     * @dev getLockedAmount function get the amount of locked token which belong to appointed address at the current time.\n', '     * @param account The address of appointed account.\n', '     */\n', '    function getLockedAmount(address account) public view returns(uint256 _lockedAmount) {\n', '        uint256 _Amount = 0;\n', '        uint256 _lockAmount = 0;\n', '        for(uint i = 0; i < locktime[account].length; i++) {\n', '            if(now < locktime[account][i]) {\n', '                _Amount = lockamount[account][i]; \n', '                _lockAmount = _lockAmount.add(_Amount);\n', '            }\n', '        }\n', '        return _lockAmount;   \n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the transfer functions, call the getLockedAmount to validate the balances after transaction is more than lock-amount.\n', '     */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(balances[msg.sender].sub(_value) >= getLockedAmount(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the transferFrom functions, call the getLockedAmount to validate the balances after transaction is more than lock-amount.\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(balances[_from].sub(_value) >= getLockedAmount(_from));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the burn functions, call the getLockedAmount to validate the balances after burning is more than lock-amount.\n', '     */\n', '    function burn(uint256 value) public {\n', '        require(balances[msg.sender].sub(value) >= getLockedAmount(msg.sender));\n', '        super.burn(value);\n', '    }  \n', '\n', '    /**\n', '     * @dev Rewrite the burnFrom functions, call the getLockedAmount to validate the balances after burning is more than lock-amount.\n', '     */\n', '    function burnFrom(address account, uint256 value) public {\n', '        require(balances[account].sub(value) >= getLockedAmount(account));\n', '        super.burnFrom(account, value);\n', '    } \n', '\n', '    /**\n', '     * @dev _batchTransfer internal function for airdropping candy to target address.\n', '     * @param _to target address\n', '     * @param _amount amount of token\n', '     */\n', '    function _batchTransfer(address[] memory _to, uint256[] memory _amount) internal whenNotPaused {\n', '        require(_to.length == _amount.length);\n', '        uint256 sum = 0; \n', '        for(uint i = 0;i < _to.length;i += 1){\n', '            require(_to[i] != address(0));  \n', '            sum = sum.add(_amount[i]);\n', '            require(sum <= balances[msg.sender]);  \n', '            balances[_to[i]] = balances[_to[i]].add(_amount[i]); \n', '            emit Transfer(msg.sender, _to[i], _amount[i]);\n', '        } \n', '        balances[msg.sender] = balances[msg.sender].sub(sum); \n', '    }\n', '\n', '    /**\n', '     * @dev airdrop function for airdropping candy to target address.\n', '     * @param _to target address\n', '     * @param _amount amount of token\n', '     */\n', '    function airdrop(address[] memory _to, uint256[] memory _amount) public onlyOwner returns(bool){\n', '        _batchTransfer(_to, _amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity 0.5.1; \n', '\n', '\n', 'library SafeMath {\n', '\n', '    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, reverts on overflow.\n', '     */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        require(MAX_UINT / _a >= _b);\n', '        return _a * _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(_b != 0);\n', '        return _a / _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, reverts on overflow.\n', '     */\n', '    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n', '        require(MAX_UINT - _a >= _b);\n', '        return _a + _b;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    uint256 internal totalSupply_;\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns(bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed account, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        require(balances[msg.sender] >= value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        emit Burn(msg.sender, value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens which belong to appointed address of account.\n', '     * @param account The address of appointed account.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burnFrom(address account, uint256 value) public {\n', '        require(account != address(0)); \n', '        require(balances[account] >= value);\n', '        require(allowed[account][msg.sender] >= value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n', '        emit Burn(account, value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Rewrite the key functions, add the modifier 'whenNotPaused',owner can stop the transaction.\n", ' */\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '    public\n', '    whenNotPaused\n', '    returns(bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VESTELLAToken token contract\n', ' * @dev Initialize the basic information of VESTELLAToken.\n', ' */\n', 'contract VESTELLAToken is PausableToken, BurnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "VESTELLA"; // name of Token\n', '    string public constant symbol = "VES"; // symbol of Token\n', '    uint8 public constant decimals = 18; // decimals of Token\n', '    uint256 constant _INIT_TOTALSUPPLY = 15000000000; \n', '\n', '    mapping (address => uint256[]) internal locktime;\n', '    mapping (address => uint256[]) internal lockamount;\n', '\n', '    event AddLockPosition(address indexed account, uint256 amount, uint256 time);\n', '\n', '    /**\n', '     * @dev constructor Initialize the basic information.\n', '     */\n', '    constructor() public {\n', '        totalSupply_ = _INIT_TOTALSUPPLY * 10 ** uint256(decimals); \n', '        owner = 0x0F1b590cD3155571C8680B363867e20b8E4303bE;\n', '        balances[owner] = totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev addLockPosition function that only owner can add lock position for appointed address of account.\n', '     * one address can participate more than one lock position plan.\n', '     * @param account The address of account will participate lock position plan.\n', '     * @param amount The array of token amount that will be locked.\n', '     * @param time The timestamp of token will be released.\n', '     */\n', '    function addLockPosition(address account, uint256[] memory amount, uint256[] memory time) public onlyOwner returns(bool) { \n', '        require(account != address(0));\n', '        require(amount.length == time.length);\n', '        uint256 _lockamount = 0;\n', '        for(uint i = 0; i < amount.length; i++) {\n', '            uint256 _amount = amount[i] * 10 ** uint256(decimals);\n', '            require(time[i] > now);\n', '            locktime[account].push(time[i]);\n', '            lockamount[account].push(_amount);\n', '            emit AddLockPosition(account, _amount, time[i]);\n', '            _lockamount = _lockamount.add(_amount);\n', '        }\n', '        require(balances[msg.sender] >= _lockamount);\n', '        balances[account] = balances[account].add(_lockamount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_lockamount);\n', '        emit Transfer(msg.sender, account, _lockamount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev getLockPosition function get the detail information of an appointed account.\n', '     * @param account The address of appointed account.\n', '     */\n', '    function getLockPosition(address account) public view returns(uint256[] memory _locktime, uint256[] memory _lockamount) {\n', '        return (locktime[account], lockamount[account]);\n', '    }\n', '\n', '    /**\n', '     * @dev getLockedAmount function get the amount of locked token which belong to appointed address at the current time.\n', '     * @param account The address of appointed account.\n', '     */\n', '    function getLockedAmount(address account) public view returns(uint256 _lockedAmount) {\n', '        uint256 _Amount = 0;\n', '        uint256 _lockAmount = 0;\n', '        for(uint i = 0; i < locktime[account].length; i++) {\n', '            if(now < locktime[account][i]) {\n', '                _Amount = lockamount[account][i]; \n', '                _lockAmount = _lockAmount.add(_Amount);\n', '            }\n', '        }\n', '        return _lockAmount;   \n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the transfer functions, call the getLockedAmount to validate the balances after transaction is more than lock-amount.\n', '     */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(balances[msg.sender].sub(_value) >= getLockedAmount(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the transferFrom functions, call the getLockedAmount to validate the balances after transaction is more than lock-amount.\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns(bool) {\n', '        require(balances[_from].sub(_value) >= getLockedAmount(_from));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Rewrite the burn functions, call the getLockedAmount to validate the balances after burning is more than lock-amount.\n', '     */\n', '    function burn(uint256 value) public {\n', '        require(balances[msg.sender].sub(value) >= getLockedAmount(msg.sender));\n', '        super.burn(value);\n', '    }  \n', '\n', '    /**\n', '     * @dev Rewrite the burnFrom functions, call the getLockedAmount to validate the balances after burning is more than lock-amount.\n', '     */\n', '    function burnFrom(address account, uint256 value) public {\n', '        require(balances[account].sub(value) >= getLockedAmount(account));\n', '        super.burnFrom(account, value);\n', '    } \n', '\n', '    /**\n', '     * @dev _batchTransfer internal function for airdropping candy to target address.\n', '     * @param _to target address\n', '     * @param _amount amount of token\n', '     */\n', '    function _batchTransfer(address[] memory _to, uint256[] memory _amount) internal whenNotPaused {\n', '        require(_to.length == _amount.length);\n', '        uint256 sum = 0; \n', '        for(uint i = 0;i < _to.length;i += 1){\n', '            require(_to[i] != address(0));  \n', '            sum = sum.add(_amount[i]);\n', '            require(sum <= balances[msg.sender]);  \n', '            balances[_to[i]] = balances[_to[i]].add(_amount[i]); \n', '            emit Transfer(msg.sender, _to[i], _amount[i]);\n', '        } \n', '        balances[msg.sender] = balances[msg.sender].sub(sum); \n', '    }\n', '\n', '    /**\n', '     * @dev airdrop function for airdropping candy to target address.\n', '     * @param _to target address\n', '     * @param _amount amount of token\n', '     */\n', '    function airdrop(address[] memory _to, uint256[] memory _amount) public onlyOwner returns(bool){\n', '        _batchTransfer(_to, _amount);\n', '        return true;\n', '    }\n', '}']
