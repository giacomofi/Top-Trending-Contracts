['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-04\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed _to);\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '      require(!paused);\n', '      _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '      require(paused);\n', '      _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '      paused = true;\n', '      emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '      paused = false;\n', '      emit Unpause();\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', ' // modifiers\n', '\n', ' // mitigate short address attack\n', ' // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\n', ' // TODO: doublecheck implication of >= compared to ==\n', '    modifier onlyPayloadSize(uint numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    uint256 public totalSupply;\n', '    /*\n', '      *  Public functions\n', '      */\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    /*\n', '      *  Events\n', '      */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event SaleContractActivation(address saleContract, uint256 tokensForSale);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '  /// @dev Returns number of tokens owned by given address\n', '  /// @param _owner Address of token owner\n', '  /// @return Balance of owner\n', '\n', '  // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '  /// @dev Transfers sender&#39;s tokens to a given address. Returns success\n', '  /// @param _to Address of token receiver\n', '  /// @param _value Number of tokens to transfer\n', '  /// @return Was transfer successful?\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param _from Address from where tokens are withdrawn\n', '    /// @param _to Address to where tokens are sent\n', '    /// @param _value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n', '      // To change the approve amount you first have to reduce the addresses`\n', '      //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '      //  already 0 to mitigate the race condition described here:\n', '      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '        require(_value == 0 || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\n', '        require(allowed[msg.sender][_spender] == _oldValue);\n', '        allowed[msg.sender][_spender] = _newValue;\n', '        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', ' /**\n', '  * @dev Burns a specific amount of tokens.\n', '  * @param _value The amount of token to be burned.\n', '  */\n', '    function burn(uint256 _value) public returns (bool burnSuccess) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '}\n', '\n', ' /**\n', ' * @title Synapse\n', ' */\n', 'contract Synapse is StandardToken, Owned, Pausable {\n', '    \n', '    using SafeMath for uint256;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '\n', '    uint256 public tokensForSale = 495000000 * 1 ether;//50% total of Supply for crowdsale   \n', '    uint256 public vestingTokens = 227700000 * 1 ether;//23% of total Supply will be freeze(10% team, 8% reserve and 5% others) \n', '    uint256 public managementTokens = 267300000 * 1 ether;//27% total Supply(12% Marketing, 9% Expansion, 3% Bounty, 3% Advisor)\n', '\n', '    mapping(address => bool) public investorIsVested; \n', '    uint256 public vestingTime = 15552000;// 6 months  \n', '\n', '    uint256 public bountyTokens = 29700000 * 1 ether;\n', '    uint256 public marketingTokens = 118800000 * 1 ether;\n', '    uint256 public expansionTokens = 89100000 * 1 ether;\n', '    uint256 public advisorTokens = 29700000 * 1 ether;    \n', '\n', '    uint256 public icoStartTime;\n', '    uint256 public icoFinalizedTime;\n', '\n', '    address public tokenOwner;\n', '    address public crowdSaleOwner;\n', '    address public vestingOwner;\n', '\n', '    address public saleContract;\n', '    address public vestingContract;\n', '    bool public fundraising = true;\n', '\n', '    mapping (address => bool) public frozenAccounts;\n', '    event FrozenFund(address target, bool frozen);\n', '\n', '\n', '    modifier onlyPayloadSize(uint numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    modifier manageTransfer() {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        } else {\n', '            require(fundraising == false);\n', '            _;\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev constructor of a token contract\n', '    * @param _tokenOwner address of the owner of contract.\n', '    */\n', '    constructor(address _tokenOwner,address _crowdSaleOwner, address _vestingOwner ) public Owned(_tokenOwner) {\n', '\n', '        symbol ="SYP";\n', '        name = "Synapsecoin";\n', '        decimals = 18;\n', '        tokenOwner = _tokenOwner; \n', '        crowdSaleOwner = _crowdSaleOwner;\n', '        vestingOwner = _vestingOwner;\n', '        totalSupply = 990000000 * 1 ether;\n', '        balances[_tokenOwner] = balances[_tokenOwner].add(managementTokens);\n', '        balances[_crowdSaleOwner] = balances[_crowdSaleOwner].add(tokensForSale);        \n', '        balances[_vestingOwner] = balances[_vestingOwner].add(vestingTokens);\n', '        emit Transfer(address(0), _tokenOwner, managementTokens);\n', '        emit Transfer(address(0), _crowdSaleOwner, tokensForSale);    \n', '        emit Transfer(address(0), _vestingOwner, vestingTokens);        \n', '    }\n', '\n', '    /**\n', '    * @dev  Investor can Transfer token from this method\n', '    * @param _to address of the reciever\n', '    * @param _value amount of tokens to transfer\n', '    */\n', '    function transfer(address _to, uint256 _value) public manageTransfer whenNotPaused onlyPayloadSize(2) returns (bool success) {\n', '        \n', '        require(_value>0);\n', '        require(_to != address(0));\n', '        require(!frozenAccounts[msg.sender]);\n', '        if(investorIsVested[msg.sender]==true )\n', '        {\n', '            require(now >= icoFinalizedTime.add(vestingTime)); \n', '            super.transfer(_to,_value);\n', '            return true;\n', '\n', '        }\n', '        else {\n', '            super.transfer(_to,_value);\n', '            return true;\n', '        }\n', '\n', '    }\n', '    \n', '    /**\n', '    * @dev  Transfer from allow to trasfer token \n', '    * @param _from address of sender \n', '    * @param _to address of the reciever\n', '    * @param _value amount of tokens to transfer\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public manageTransfer whenNotPaused onlyPayloadSize(3) returns (bool) {\n', '        require(_value>0);\n', '        require(_to != address(0));\n', '        require(_from != address(0));\n', '        require(!frozenAccounts[_from]);\n', '        if(investorIsVested[_from]==true )\n', '        {\n', '            require(now >= icoFinalizedTime.add(vestingTime));//15552000\n', '            super.transferFrom(_from,_to,_value);\n', '            return true;\n', '\n', '        }\n', '        else {\n', '            \n', '           super.transferFrom(_from,_to,_value);\n', '           return true;\n', '        }    }\n', '    \n', '\n', '    /**\n', '    * activates the sale contract (i.e. transfers saleable contracts)\n', '    * @param _saleContract ,address of crowdsale contract\n', '    */\n', '    function activateSaleContract(address _saleContract) public whenNotPaused {\n', '        require(msg.sender == crowdSaleOwner);\n', '        require(_saleContract != address(0));\n', '        require(saleContract == address(0));        \n', '        saleContract = _saleContract;\n', '        icoStartTime = now;\n', '\n', '    }\n', '     \n', '    /**\n', '    * activates the sale contract (i.e. transfers saleable contracts)\n', '    * @param _vestingContract ,address of crowdsale contract\n', '    */\n', '    function activateVestingContract(address _vestingContract) public whenNotPaused  {\n', '        require(msg.sender == vestingOwner);        \n', '        require(_vestingContract != address(0));\n', '        require(vestingContract == address(0));\n', '        vestingContract = _vestingContract;\n', '        \n', '    }\n', '    \n', '    /**\n', '    * @dev this function will send the bounty tokens to given address\n', '    * @param _to ,address of the bounty receiver.\n', '    * @param _value , number of tokens to be sent.\n', '    */\n', '    function sendBounty(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0 );        \n', '        require(bountyTokens >= _value);\n', '        bountyTokens = bountyTokens.sub(_value);\n', '        return super.transfer(_to, _value);  \n', '        }    \n', '\n', '    /**\n', '    * @dev this function will send the Marketing tokens to given address\n', '    * @param _to ,address of the bounty receiver.\n', '    * @param _value , number of tokens to be sent.\n', '    */\n', '    function sendMarketingTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0 );        \n', '        require(marketingTokens >= _value);\n', '        marketingTokens = marketingTokens.sub(_value);\n', '        return super.transfer(_to, _value);  \n', '   }    \n', '\n', '    /**\n', '    * @dev this function will send the expansion tokens to given address\n', '    * @param _to ,address of the bounty receiver.\n', '    * @param _value , number of tokens to be sent.\n', '    */\n', '    function sendExpansionTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0 );        \n', '        require(expansionTokens >= _value);\n', '        expansionTokens = expansionTokens.sub(_value);\n', '        return super.transfer(_to, _value);  \n', '   }    \n', '\n', '    /**\n', '    * @dev this function will send the expansion tokens to given address\n', '    * @param _to ,address of the bounty receiver.\n', '    * @param _value , number of tokens to be sent.\n', '    */\n', '    function sendAdvisorTokens(address _to, uint256 _value) public whenNotPaused onlyOwner returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0 );        \n', '        require(advisorTokens >= _value);\n', '        advisorTokens = advisorTokens.sub(_value);\n', '        return super.transfer(_to, _value);  \n', '   }    \n', '\n', '    /**\n', '    * @dev function to check whether passed address is a contract address\n', '    */\n', '    function isContract(address _address) private view returns (bool is_contract) {\n', '        uint256 length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_address)\n', '        }\n', '        return (length > 0);\n', '    }\n', '    \n', '    /**\n', '    * @dev this function can only be called by crowdsale contract to transfer tokens to investor\n', '    * @param _to address The address of the investor.\n', '    * @param _value uint256 The amount of tokens to be send\n', '    */\n', '    function saleTransfer(address _to, uint256 _value) external whenNotPaused returns (bool) {\n', '        require(saleContract != address(0),&#39;sale address is not activated&#39;);\n', '        require(msg.sender == saleContract,&#39;caller is not crowdsale contract&#39;);\n', '        require(!frozenAccounts[_to],&#39;account is freezed&#39;);\n', '        return super.transferFrom(crowdSaleOwner,_to, _value);\n', '            \n', '    }\n', '\n', '    /**\n', '    * @dev this function can only be called by  contract to transfer tokens to vesting beneficiary\n', '    * @param _to address The address of the beneficiary.\n', '    * @param _value uint256 The amount of tokens to be send\n', '    */\n', '    function vestingTransfer(address _to, uint256 _value) external whenNotPaused returns (bool) {\n', '        require(icoFinalizedTime == 0,&#39;ico is finalised&#39;);\n', '        require(vestingContract != address(0));\n', '        require(msg.sender == vestingContract,&#39;caller is not a vesting contract&#39;);\n', '        investorIsVested[_to] = true;\n', '        return super.transferFrom(vestingOwner,_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev this function will closes the sale ,after this anyone can transfer their tokens to others.\n', '    */\n', '    function finalize() external whenNotPaused returns(bool){\n', '        require(fundraising != false); \n', '        require(msg.sender == saleContract);\n', '        fundraising = false;\n', '        icoFinalizedTime = now;\n', '        return true;\n', '    }\n', '\n', '   /**\n', '   * @dev this function will freeze the any account so that the frozen account will not able to participate in crowdsale.\n', '   * @param target ,address of the target account \n', '   * @param freeze ,boolean value to freeze or unfreeze the account ,true to freeze and false to unfreeze\n', '   */\n', '   function freezeAccount (address target, bool freeze) public onlyOwner {\n', '        require(target != 0x0);\n', '        frozenAccounts[target] = freeze;\n', '        emit FrozenFund(target, freeze); // solhint-disable-line\n', '    }\n', '\n', '    /**\n', '    * @dev Function to transfer any ERC20 token  to owner address which gets accidentally transferred to this contract\n', '    * @param tokenAddress The address of the ERC20 contract\n', '    * @param tokens The amount of tokens to transfer.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public whenNotPaused onlyOwner returns (bool success) {\n', '        require(tokenAddress != address(0));\n', '        require(isContract(tokenAddress));\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    function () external payable {\n', '        revert();\n', '    }\n', '    \n', '}']