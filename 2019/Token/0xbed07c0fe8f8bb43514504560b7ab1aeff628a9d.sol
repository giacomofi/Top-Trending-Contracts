['// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\TaxLib.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2018 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '/**\n', ' * @title Taxation Library\n', ' *\n', ' * @dev Helpers for taxation\n', ' */\n', 'library TaxLib\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * Modifiable tax container\n', '     */\n', '    struct DynamicTax\n', '    {\n', '        /**\n', '         * Tax amount per each transaction (in %).\n', '         */\n', '        uint256 amount;\n', '\n', '        /**\n', '         * The shift value.\n', '         * Represents: 100 * 10 ** shift\n', '         */\n', '        uint256 shift;\n', '    }\n', '\n', '    /**\n', '     * @dev Apply percentage to the value.\n', '     *\n', '     * @param taxAmount The amount of tax\n', '     * @param shift The shift division amount\n', '     * @param value The total amount\n', '     * @return The tax amount to be payed (in WEI)\n', '     */\n', '    function applyTax(uint256 taxAmount, uint256 shift, uint256 value) internal pure returns (uint256)\n', '    {\n', '        uint256 temp = value.mul(taxAmount);\n', '\n', '        return temp.div(shift);\n', '    }\n', '\n', '    /**\n', '     * @dev Normalize the shift value\n', '     *\n', '     * @param shift The power chosen\n', '     */\n', '    function normalizeShiftAmount(uint256 shift) internal pure returns (uint256)\n', '    {\n', '        require(shift >= 0 && shift <= 2, "You can\'t set more than 2 decimal places");\n', '\n', '        uint256 value = 100;\n', '\n', '        return value.mul(10 ** shift);\n', '    }\n', '}\n', '\n', '// File: contracts\\VestingLib.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2019 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Vesting Library\n', ' *\n', ' * @dev Helpers for vesting\n', ' */\n', 'library VestingLib\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * Period to get tokens (bimester).\n', '     */\n', '    uint256 private constant _timeShiftPeriod = 60 days;\n', '\n', '    struct TeamMember\n', '    {\n', '        /**\n', "         * User's next token withdrawal\n", '         */\n', '        uint256 nextWithdrawal;\n', '\n', '        /**\n', '         * Remaining tokens to be released\n', '         */\n', '        uint256 totalRemainingAmount;\n', '\n', '        /**\n', '         * GAS Optimization.\n', '         * Calculates the transfer value for the first time (20%)\n', '         */\n', '        uint256 firstTransferValue;\n', '\n', '        /**\n', '         * GAS Optimization.\n', '         * Calculates the transfer value for each month (10%)\n', '         */\n', '        uint256 eachTransferValue;\n', '\n', '        /**\n', '         * Check if this member is active\n', '         */\n', '        bool active;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the member earnings according to the rules of the board.\n', '     *\n', '     * @param tokenAmount The total user token amount\n', '     * @return The first transfer amount and the other months amount.\n', '     */\n', '    function _calculateMemberEarnings(uint256 tokenAmount) internal pure returns (uint256, uint256)\n', '    {\n', '        // 20% on the first transfer (act)\n', '        uint256 firstTransfer = TaxLib.applyTax(20, 100, tokenAmount);\n', '\n', '        // 10% for the other months\n', '        uint256 eachMonthTransfer = TaxLib.applyTax(10, 100, tokenAmount.sub(firstTransfer));\n', '\n', '        return (firstTransfer, eachMonthTransfer);\n', '    }\n', '\n', '    /**\n', "     * @dev Updates the date to the next user's withdrawal.\n", '     *\n', "     * @param oldWithdrawal The last user's withdrawal\n", '     */\n', '    function _updateNextWithdrawalTime(uint256 oldWithdrawal) internal view returns (uint256)\n', '    {\n', '        uint currentTimestamp = block.timestamp;\n', '\n', '        require(oldWithdrawal <= currentTimestamp, "You need to wait the next withdrawal period");\n', '\n', '        /**\n', "         * If is the user's first withdrawal, get the time of the first transfer\n", '         * and adds plus the time shift period.\n', '         */\n', '        if (oldWithdrawal == 0)\n', '        {\n', '            return _timeShiftPeriod.add(currentTimestamp);\n', '        }\n', '\n', '        /**\n', '         * Otherwise adds the time shift period to the previous withdrawal date to avoid\n', '         * unnecessary waitings.\n', '         */\n', '        return oldWithdrawal.add(_timeShiftPeriod);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount to pay taking into account the first transfer rule.\n', '     *\n', '     * @param member The team member container\n', '     * @return The amount for pay\n', '     */\n', '    function _checkAmountForPay(TeamMember memory member) internal pure returns (uint256)\n', '    {\n', '        /**\n', '         * First user transference. It should be 20%.\n', '         */\n', '        if (member.nextWithdrawal == 0)\n', '        {\n', '            return member.firstTransferValue;\n', '        }\n', '\n', '        /**\n', '         * Check for avoid rounding errors.\n', '         */\n', '        return member.eachTransferValue >= member.totalRemainingAmount\n', '            ? member.totalRemainingAmount\n', '            : member.eachTransferValue;\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\access\\roles\\PauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Burnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\Taxable.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2018 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Taxable token\n', ' *\n', ' * @dev Manages dynamic taxes\n', ' */\n', 'contract Taxable is Ownable\n', '{\n', '    /**\n', '     * Tax recipient.\n', '     */\n', '    address internal _taxRecipientAddr;\n', '\n', '    /**\n', '     * Modifiable tax container.\n', '     */\n', '    TaxLib.DynamicTax private _taxContainer;\n', '\n', '    constructor(address taxRecipientAddr) public\n', '    {\n', '        _taxRecipientAddr = taxRecipientAddr;\n', '\n', '        /**\n', '         * Tax: Starting at 0.9%\n', '         */\n', '        changeTax(9, 1);\n', '    }\n', '\n', '    /**\n', '     * Returns the tax recipient account\n', '     */\n', '    function taxRecipientAddr() public view returns (address)\n', '    {\n', '        return _taxRecipientAddr;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current tax amount.\n', '     */\n', '    function currentTaxAmount() public view returns (uint256)\n', '    {\n', '        return _taxContainer.amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current tax shift.\n', '     */\n', '    function currentTaxShift() public view returns (uint256)\n', '    {\n', '        return _taxContainer.shift;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the dynamic tax.\n', '     *\n', '     * Just the contract admin can change the taxes.\n', '     * The possible tax range is 0% ~ 3% and cannot exceed it.\n', '     *\n', '     * Reference table:\n', '     * 3, 0 (3 / 100)   = 3%\n', '     * 3, 1 (3 / 1000)  = 0.3%\n', '     * 3, 2 (3 / 10000) = 0.03%\n', '     *\n', '     * @param amount The new tax amount chosen\n', '     */\n', '    function changeTax(uint256 amount, uint256 shift) public onlyOwner\n', '    {\n', '        if (shift == 0)\n', '        {\n', '            require(amount <= 3, "You can\'t set a tax greater than 3%");\n', '        }\n', '\n', '        _taxContainer = TaxLib.DynamicTax(\n', '            amount,\n', '\n', '            // The maximum decimal places value is checked here\n', '            TaxLib.normalizeShiftAmount(shift)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Apply the tax based on the dynamic tax container\n', '     *\n', '     * @param value The value of transaction\n', '     */\n', '    function _applyTax(uint256 value) internal view returns (uint256)\n', '    {\n', '        return TaxLib.applyTax(\n', '            _taxContainer.amount,\n', '            _taxContainer.shift,\n', '            value\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts\\BCHHandled.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2018 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '/**\n', ' * @title BCH Handled tokens contract\n', ' *\n', ' * @dev Addresses owned by BCH\n', ' */\n', 'contract BCHHandled\n', '{\n', '    /**\n', '     * The BCH module address.\n', '     */\n', '    address private _bchAddress;\n', '\n', '    /**\n', '     * Accounts managed by BCH.\n', '     */\n', '    mapping (address => bool) private _bchAllowed;\n', '\n', '    /**\n', '     * BCH Approval event\n', '     */\n', '    event BchApproval(address indexed to, bool state);\n', '\n', '    constructor(address bchAddress) public\n', '    {\n', '        _bchAddress = bchAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the address is handled by BCH.\n', '     *\n', '     * @param wallet The address to check\n', '     */\n', '    function isBchHandled(address wallet) public view returns (bool)\n', '    {\n', '        return _bchAllowed[wallet];\n', '    }\n', '\n', '    /**\n', '     * @dev Authorize the full control of BCH.\n', '     */\n', '    function bchAuthorize() public returns (bool)\n', '    {\n', '        return _changeState(true);\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke the BCH access.\n', '     */\n', '    function bchRevoke() public returns (bool)\n', '    {\n', '        return _changeState(false);\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the transaction can be handled by BCH and its authenticity.\n', '     *\n', '     * @param from The spender address\n', '     */\n', '    function canBchHandle(address from) internal view returns (bool)\n', '    {\n', '        return isBchHandled(from) && msg.sender == _bchAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the BCH ownership state\n', '     *\n', '     * @param state The new state\n', '     */\n', '    function _changeState(bool state) private returns (bool)\n', '    {\n', '        emit BchApproval(msg.sender, _bchAllowed[msg.sender] = state);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\WibxToken.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2018 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WiBX Utility Token\n', ' *\n', ' * @dev Implementation of the main WiBX token smart contract.\n', ' */\n', 'contract WibxToken is ERC20Pausable, ERC20Burnable, ERC20Detailed, Taxable, BCHHandled\n', '{\n', '    /**\n', '     * 12 billion tokens raised by 18 decimal places.\n', '     */\n', '    uint256 public constant INITIAL_SUPPLY = 12000000000 * (10 ** 18);\n', '\n', '    constructor(address bchAddress, address taxRecipientAddr) public ERC20Detailed("WiBX Utility Token", "WBX", 18)\n', '                                                                     BCHHandled(bchAddress)\n', '                                                                     Taxable(taxRecipientAddr)\n', '    {\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides the OpenZeppelin default transfer\n', '     *\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return If the operation was successful\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool)\n', '    {\n', '        return _fullTransfer(msg.sender, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Special WBX transfer tokens from one address to another checking the access for BCH\n', '     *\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     * @return If the operation was successful\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool)\n', '    {\n', '        if (canBchHandle(from))\n', '        {\n', '            return _fullTransfer(from, to, value);\n', '        }\n', '\n', '        /*\n', '         * Exempting the tax account to avoid an infinite loop in transferring values from this wallet.\n', '         */\n', '        if (from == taxRecipientAddr() || to == taxRecipientAddr())\n', '        {\n', '            super.transferFrom(from, to, value);\n', '\n', '            return true;\n', '        }\n', '\n', '        uint256 taxValue = _applyTax(value);\n', '\n', '        // Transfer the tax to the recipient\n', '        super.transferFrom(from, taxRecipientAddr(), taxValue);\n', '\n', "        // Transfer user's tokens\n", '        super.transferFrom(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Batch token transfer (maxium 100 transfers)\n', '     *\n', '     * @param recipients The recipients for transfer to\n', '     * @param values The values\n', '     * @param from Spender address\n', '     * @return If the operation was successful\n', '     */\n', '    function sendBatch(address[] memory recipients, uint256[] memory values, address from) public returns (bool)\n', '    {\n', '        /*\n', '         * The maximum batch send should be 100 transactions.\n', '         * Each transaction we recommend 65000 of GAS limit and the maximum block size is 6700000.\n', '         * 6700000 / 65000 = ~103.0769 ∴ 100 transacitons (safe rounded).\n', '         */\n', '        uint maxTransactionCount = 100;\n', '        uint transactionCount = recipients.length;\n', '\n', '        require(transactionCount <= maxTransactionCount, "Max transaction count violated");\n', '        require(transactionCount == values.length, "Wrong data");\n', '\n', '        if (msg.sender == from)\n', '        {\n', '            return _sendBatchSelf(recipients, values, transactionCount);\n', '        }\n', '\n', '        return _sendBatchFrom(recipients, values, from, transactionCount);\n', '    }\n', '\n', '    /**\n', '     * @dev Batch token transfer from MSG sender\n', '     *\n', '     * @param recipients The recipients for transfer to\n', '     * @param values The values\n', '     * @param transactionCount Total transaction count\n', '     * @return If the operation was successful\n', '     */\n', '    function _sendBatchSelf(address[] memory recipients, uint256[] memory values, uint transactionCount) private returns (bool)\n', '    {\n', '        for (uint i = 0; i < transactionCount; i++)\n', '        {\n', '            _fullTransfer(msg.sender, recipients[i], values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Batch token transfer from other sender\n', '     *\n', '     * @param recipients The recipients for transfer to\n', '     * @param values The values\n', '     * @param from Spender address\n', '     * @param transactionCount Total transaction count\n', '     * @return If the operation was successful\n', '     */\n', '    function _sendBatchFrom(address[] memory recipients, uint256[] memory values, address from, uint transactionCount) private returns (bool)\n', '    {\n', '        for (uint i = 0; i < transactionCount; i++)\n', '        {\n', '            transferFrom(from, recipients[i], values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Special WBX transfer token for a specified address.\n', '     *\n', '     * @param from The address of the spender\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return If the operation was successful\n', '     */\n', '    function _fullTransfer(address from, address to, uint256 value) private returns (bool)\n', '    {\n', '        /*\n', '         * Exempting the tax account to avoid an infinite loop in transferring values from this wallet.\n', '         */\n', '        if (from == taxRecipientAddr() || to == taxRecipientAddr())\n', '        {\n', '            _transfer(from, to, value);\n', '\n', '            return true;\n', '        }\n', '\n', '        uint256 taxValue = _applyTax(value);\n', '\n', '        // Transfer the tax to the recipient\n', '        _transfer(from, taxRecipientAddr(), taxValue);\n', '\n', "        // Transfer user's tokens\n", '        _transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\WibxTokenVesting.sol\n', '\n', '/**\n', ' * This smart contract code is Copyright 2019 WiBX. For more information see https://wibx.io\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/wibxcoin/Contracts/LICENSE.txt\n', ' */\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WiBX Token Vesting\n', ' *\n', ' * @dev Implementation of the team token vesting\n', ' */\n', 'contract WibxTokenVesting is Ownable\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * Wibx Token Instance\n', '     */\n', '    WibxToken private _wibxToken;\n', '\n', '    /**\n', '     * All team members\n', '     */\n', '    mapping (address => VestingLib.TeamMember) private _members;\n', '\n', '    /**\n', '     * Total Wibx tokens allocated in this vesting contract\n', '     */\n', '    uint256 private _alocatedWibxVestingTokens = 0;\n', '\n', '    constructor(address wibxTokenAddress) public\n', '    {\n', '        _wibxToken = WibxToken(wibxTokenAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new team member to withdrawal tokens.\n', '     *\n', '     * @param wallet The member wallet address\n', '     * @param tokenAmount The token amount desired by the team member\n', '     * @return If the transaction was successful\n', '     */\n', '    function addTeamMember(address wallet, uint256 tokenAmount) public onlyOwner returns (bool)\n', '    {\n', '        require(!_members[wallet].active, "Member already added");\n', '\n', '        uint256 firstTransfer;\n', '        uint256 eachMonthTransfer;\n', '\n', '        _alocatedWibxVestingTokens = _alocatedWibxVestingTokens.add(tokenAmount);\n', '        (firstTransfer, eachMonthTransfer) = VestingLib._calculateMemberEarnings(tokenAmount);\n', '\n', '        _members[wallet] = VestingLib.TeamMember({\n', '            totalRemainingAmount: tokenAmount,\n', '            firstTransferValue: firstTransfer,\n', '            eachTransferValue: eachMonthTransfer,\n', '            nextWithdrawal: 0,\n', '            active: true\n', '        });\n', '\n', '        return _members[wallet].active;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdrawal team tokens to the selected wallet\n', '     *\n', '     * @param wallet The team member wallet\n', '     * @return If the transaction was successful\n', '     */\n', '    function withdrawal(address wallet) public returns (bool)\n', '    {\n', '        VestingLib.TeamMember storage member = _members[wallet];\n', '\n', '        require(member.active, "The team member is not found");\n', '        require(member.totalRemainingAmount > 0, "There is no more tokens to transfer to this wallet");\n', '\n', '        uint256 amountToTransfer = VestingLib._checkAmountForPay(member);\n', '        require(totalWibxVestingSupply() >= amountToTransfer, "The contract doesnt have founds to pay");\n', '\n', '        uint256 nextWithdrawalTime = VestingLib._updateNextWithdrawalTime(member.nextWithdrawal);\n', '\n', '        _wibxToken.transfer(wallet, amountToTransfer);\n', '\n', '        member.nextWithdrawal = nextWithdrawalTime;\n', '        member.totalRemainingAmount = member.totalRemainingAmount.sub(amountToTransfer);\n', '        _alocatedWibxVestingTokens = _alocatedWibxVestingTokens.sub(amountToTransfer);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Clean everything and terminate this token vesting\n', '     */\n', '    function terminateTokenVesting() public onlyOwner\n', '    {\n', '        require(_alocatedWibxVestingTokens == 0, "All withdrawals have yet to take place");\n', '\n', '        if (totalWibxVestingSupply() > 0)\n', '        {\n', '            _wibxToken.transfer(_wibxToken.taxRecipientAddr(), totalWibxVestingSupply());\n', '        }\n', '\n', '        /**\n', "         * Due to the Owner's Ownable (from OpenZeppelin) is not flagged as payable,\n", '         * we need to cast it here.\n', '         */\n', '        selfdestruct(address(uint160(owner())));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the token supply in this contract to be delivered to team members.\n', '     */\n', '    function totalWibxVestingSupply() public view returns (uint256)\n', '    {\n', '        return _wibxToken.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns all tokens allocated to users.\n', '     */\n', '    function totalAlocatedWibxVestingTokens() public view returns (uint256)\n', '    {\n', '        return _alocatedWibxVestingTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the remaining token for some member.\n', '     *\n', "     * @param wallet The member's wallet address.\n", '     */\n', '    function remainingTokenAmount(address wallet) public view returns (uint256)\n', '    {\n', '        return _members[wallet].totalRemainingAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the next withdrawal day of the user.\n', '     *\n', "     * @param wallet The member's wallet address.\n", '     */\n', '    function nextWithdrawalTime(address wallet) public view returns (uint256)\n', '    {\n', '        return _members[wallet].nextWithdrawal;\n', '    }\n', '}']