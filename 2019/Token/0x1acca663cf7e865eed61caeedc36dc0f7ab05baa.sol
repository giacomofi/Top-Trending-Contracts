['// solium-disable linebreak-style\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// NOTE replaced Mint -> Destroy, mint -> destroy\n', '\n', 'contract DestroyerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event DestroyerAdded(address indexed account);\n', '    event DestroyerRemoved(address indexed account);\n', '\n', '    Roles.Role private destroyers;\n', '\n', '    constructor() internal {\n', '        _addDestroyer(msg.sender);\n', '    }\n', '\n', '    modifier onlyDestroyer() {\n', '        require(isDestroyer(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isDestroyer(address account) public view returns (bool) {\n', '        return destroyers.has(account);\n', '    }\n', '\n', '    function addDestroyer(address account) public onlyDestroyer {\n', '        _addDestroyer(account);\n', '    }\n', '\n', '    function renounceDestroyer() public {\n', '        _removeDestroyer(msg.sender);\n', '    }\n', '\n', '    function _addDestroyer(address account) internal {\n', '        destroyers.add(account);\n', '        emit DestroyerAdded(account);\n', '    }\n', '\n', '    function _removeDestroyer(address account) internal {\n', '        destroyers.remove(account);\n', '        emit DestroyerRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Destroyable\n', ' * @dev ERC20 destroying logic\n', ' */\n', 'contract ERC20Destroyable is ERC20, DestroyerRole {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param from The address that will have the tokens destroyed.\n', '     * @param value The amount of tokens to destroy.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function destroy(address from, uint256 value) public onlyDestroyer returns (bool) {\n', '        _burn(from, value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PrzToken is ERC20Detailed, ERC20Mintable, ERC20Destroyable, ERC20Pausable, Ownable {\n', '\n', '    // Stores the address of the entry credit contract\n', '    address private _entryCreditContract;\n', '\n', '    // Stores the address of contract with burned tokens (basis for BME minting)\n', '    address private _balanceSheetContract;\n', '\n', '    // Stores the amount of addresses to mint for\n', '    uint256 private _bmeClaimBatchSize;\n', '    uint256 private _bmeMintBatchSize;\n', '\n', '    // Stores phase state (default value for bool is false,\n', '    // https://solidity.readthedocs.io/en/v0.5.3/control-structures.html#default-value)\n', '    // Contract will be initialized in "initPhase", i.e. not in bmePhase\n', '    bool private _isInBmePhase;\n', '\n', '    modifier whenNotInBME() {\n', '        require(!_isInBmePhase, "Function may no longer be called once BME starts");\n', '        _;\n', '    }\n', '\n', '    modifier whenInBME() {\n', '        require(_isInBmePhase, "Function may only be called once BME starts");\n', '        _;\n', '    }\n', '\n', '    event EntryCreditContractChanged(\n', '        address indexed previousEntryCreditContract,\n', '        address indexed newEntryCreditContract\n', '    );\n', '\n', '    event BalanceSheetContractChanged(\n', '        address indexed previousBalanceSheetContract,\n', '        address indexed newBalanceSheetContract\n', '    );\n', '\n', '    event BmeMintBatchSizeChanged(\n', '        uint256 indexed previousSize,\n', '        uint256 indexed newSize\n', '    );\n', '\n', '    event BmeClaimBatchSizeChanged(\n', '        uint256 indexed previousSize,\n', '        uint256 indexed newSize\n', '    );\n', '\n', '    event PhaseChangedToBME(address account);\n', '\n', '\n', '    /**\n', '     * @dev Constructor that initializes the PRZToken contract.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals)\n', '        ERC20Detailed(name, symbol, decimals)\n', '        ERC20Mintable()\n', '        ERC20Destroyable()\n', '        ERC20Pausable()\n', '        Ownable()\n', '        public\n', '    {\n', '        _isInBmePhase = false;\n', '        pause();\n', '        setEntryCreditContract(address(0));\n', '        setBalanceSheetContract(address(0));\n', '        setBmeMintBatchSize(200);\n', '        setBmeClaimBatchSize(200);\n', '    }\n', '\n', '    // Returns _entryCreditContract\n', '    function entryCreditContract() public view returns (address) {\n', '        return _entryCreditContract;\n', '    }\n', '\n', '    // Set _entryCreditContract\n', '    function setEntryCreditContract(address contractAddress) public onlyOwner {\n', '        emit EntryCreditContractChanged(_entryCreditContract, contractAddress);\n', '        _entryCreditContract = contractAddress;\n', '    }\n', '\n', '    // Returns _balanceSheetContract\n', '    function balanceSheetContract() public view returns (address) {\n', '        return _balanceSheetContract;\n', '    }\n', '\n', '    // Set _balanceSheetContract\n', '    function setBalanceSheetContract(address contractAddress) public onlyOwner {\n', '        emit BalanceSheetContractChanged(_balanceSheetContract, contractAddress);\n', '        _balanceSheetContract = contractAddress;\n', '    }\n', '\n', '    // Returns _bmeMintBatchSize\n', '    function bmeMintBatchSize() public view returns (uint256) {\n', '        return _bmeMintBatchSize;\n', '    }\n', '\n', '    // Set _bmeMintBatchSize\n', '    function setBmeMintBatchSize(uint256 batchSize) public onlyMinter {\n', '        emit BmeMintBatchSizeChanged(_bmeMintBatchSize, batchSize);\n', '        _bmeMintBatchSize = batchSize;\n', '    }\n', '\n', '    // Returns _bmeClaimBatchSize\n', '    function bmeClaimBatchSize() public view returns (uint256) {\n', '        return _bmeClaimBatchSize;\n', '    }\n', '\n', '    // Set _bmeClaimBatchSize\n', '    function setBmeClaimBatchSize(uint256 batchSize) public onlyMinter {\n', '        emit BmeClaimBatchSizeChanged(_bmeClaimBatchSize, batchSize);\n', '        _bmeClaimBatchSize = batchSize;\n', '    }\n', '\n', '    // Overwrites ERC20._transfer.\n', '    // If to = _entryCreditContract, sends tokens to the credit contract according to the\n', '    // exchange rate in credit contract, destroys tokens locally\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '\n', '        if (to == _entryCreditContract) {\n', '\n', '            _burn(from, value);\n', '            IEntryCreditContract entryCreditContractInstance = IEntryCreditContract(to);\n', '            require(entryCreditContractInstance.mint(from, value), "Failed to mint entry credits");\n', '\n', '            IBalanceSheetContract balanceSheetContractInstance = IBalanceSheetContract(_balanceSheetContract);\n', '            require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");\n', '\n', '        } else {\n', '\n', '            super._transfer(from, to, value);\n', '        }\n', '    }\n', '\n', '    // Call ERC20._burn(from, value)\n', '    function destroy(address from, uint256 value)\n', '        public whenPaused whenNotInBME\n', '        returns (bool)\n', '    {\n', '        return super.destroy(from, value);\n', '    }\n', '\n', '    // Run destroy for all entries\n', '    function batchDestroy(address[] calldata from, uint256[] calldata values)\n', '        external onlyDestroyer whenPaused whenNotInBME\n', '        returns (bool)\n', '    {\n', '        uint fromLength = from.length;\n', '\n', '        require(fromLength == values.length, "Input arrays must have the same length");\n', '\n', '        for (uint256 i = 0; i < fromLength; i++) {\n', '            _burn(from[i], values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    // Call ERC20._mint(to, value)\n', '    function mint(address to, uint256 value)\n', '        public whenPaused whenNotInBME\n', '        returns (bool)\n', '    {\n', '        return super.mint(to, value);\n', '    }\n', '\n', '    // Run mint for all entries\n', '    function batchMint(address[] calldata to, uint256[] calldata values)\n', '        external onlyMinter whenPaused whenNotInBME\n', '        returns (bool)\n', '    {\n', '        _batchMint(to, values);\n', '\n', '        return true;\n', '    }\n', '\n', '    // Uses the balance sheet in _balanceSheetContract as a basis for\n', '    // batchMint call for _bmeMintBatchSize addresses\n', '    function bmeMint()\n', '        public onlyMinter whenInBME whenNotPaused\n', '    {\n', '        IBalanceSheetContract balanceSheetContractInstance = IBalanceSheetContract(_balanceSheetContract);\n', '        (address[] memory receivers, uint256[] memory amounts) = balanceSheetContractInstance.popMintingInformation(_bmeMintBatchSize);\n', '\n', '        _batchMint(receivers, amounts);\n', '\n', '        require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");\n', '    }\n', '\n', '    // Uses the balance sheet in _balanceSheetContract to create\n', '    // tokens for all addresses in for, limits to _bmeMintBatchSize, emit Transfer\n', '    function _claimFor(address[] memory claimers)\n', '        private\n', '    {\n', '        IBalanceSheetContract balanceSheetContractInstance = IBalanceSheetContract(_balanceSheetContract);\n', '        uint256[] memory amounts = balanceSheetContractInstance.popClaimingInformation(claimers);\n', '\n', '        _batchMint(claimers, amounts);\n', '\n', '        require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");\n', '    }\n', '\n', '    function _batchMint(address[] memory to, uint256[] memory values)\n', '        private\n', '    {\n', '\n', '        // length should not be computed at each iteration\n', '        uint toLength = to.length;\n', '\n', '        require(toLength == values.length, "Input arrays must have the same length");\n', '\n', '        for (uint256 i = 0; i < toLength; i++) {\n', '            _mint(to[i], values[i]);\n', '        }\n', '    }\n', '\n', '    // Calls _claimFor with for = msg.sender\n', '    function claim()\n', '        public whenInBME whenNotPaused\n', '    {\n', '        address[] memory claimers = new address[](1);\n', '        claimers[0] = msg.sender;\n', '        _claimFor(claimers);\n', '    }\n', '\n', '    // Calls _claimFor with for as provided\n', '    function claimFor(address[] calldata claimers)\n', '        external whenInBME whenNotPaused\n', '    {\n', '        require(claimers.length <= _bmeClaimBatchSize, "Input array must be shorter than bme claim batch size.");\n', '        _claimFor(claimers);\n', '    }\n', '\n', '    // Change possible when in initPhase\n', '    function changePhaseToBME()\n', '        public onlyOwner whenNotPaused whenNotInBME\n', '    {\n', '        _isInBmePhase = true;\n', '        emit PhaseChangedToBME(msg.sender);\n', '    }\n', '}\n', '\n', 'interface IEntryCreditContract {\n', '\n', '    function mint(address receiver, uint256 amount) external returns (bool);\n', '}\n', '\n', '// NOTE the following interface imposes the minimum technically feasible\n', '// NOTE constraints on information that is to be exchanged between the\n', '// NOTE Peerz token contract and the balance sheet contract\n', '\n', '// NOTE in other words, in our opinion this interface is the one with the\n', '// NOTE highest probability of allowing for an implementation of the required\n', '// NOTE functionality in the balance sheet contract\n', '\n', '// NOTE an alternative approach to having popMintingInformation return two\n', '// NOTE arrays would be to have it return a single array that contains only\n', '// NOTE the receiving addresses for minting and using popClaimingInformation\n', '// NOTE to actually mint the tokens; this approach requires bmeMint to make\n', '// NOTE two external calls instead of a single one; and it imposes more\n', '// NOTE structure on the future implementation of the balance sheet contract\n', '// NOTE since its side of the BME mint functionality would have to be\n', '// NOTE implemented using two separate functions whereas it might also on its\n', '// NOTE side be more efficient to use a single function\n', '\n', 'interface IBalanceSheetContract {\n', '\n', '    function setPeerzTokenSupply(uint256 przTotalSupply) external returns (bool);\n', '\n', '    // NOTE the returned arrays need to have exactly the same length\n', '    function popMintingInformation(uint256 bmeMintBatchSize) external returns (address[] memory, uint256[] memory);\n', '\n', '    // NOTE the returned array needs to have exactly the same length as the claimers array\n', '    function popClaimingInformation(address[] calldata claimers) external returns (uint256[] memory);\n', '}']