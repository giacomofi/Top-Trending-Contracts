['pragma solidity 0.5.4;\n', '\n', '\n', '/**\n', '* @title interface of ERC 20 token\n', '* \n', '*/\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', ' \n', 'library SafeERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       \n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '       \n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Warning!!!! only be used when owner address is compromised\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Vesting token for specific period\n', ' */\n', 'contract TokenVesting is Ownable{\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    struct VestedToken{\n', '        uint256 cliff;\n', '        uint256 start;\n', '        uint256 duration;\n', '        uint256 releasedToken;\n', '        uint256 totalToken;\n', '        bool revoked;\n', '    }\n', '    \n', '    mapping (address => VestedToken) public vestedUser; \n', '    \n', '    // default Vesting parameter values\n', '    uint256 private _cliff = 2592000; // 30 days period\n', '    uint256 private _duration = 93312000; // for 3 years\n', '    bool private _revoked = false;\n', '    \n', '    IERC20 public LCXToken;\n', '    \n', '    event TokenReleased(address indexed account, uint256 amount);\n', '    event VestingRevoked(address indexed account);\n', '    \n', '    /**\n', '     * @dev Its a modifier in which we authenticate the caller is owner or LCXToken Smart Contract\n', '     */ \n', '    modifier onlyLCXTokenAndOwner() {\n', '        require(msg.sender==owner() || msg.sender == address(LCXToken));\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev First we have to set token address before doing any thing \n', '     * @param token LCX Smart contract Address\n', '     */\n', '     \n', '    function setTokenAddress(IERC20 token) public onlyOwner returns(bool){\n', '        LCXToken = token;\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev this will set the beneficiary with default vesting \n', '     * parameters ie, every month for 3 years\n', '     * @param account address of the beneficiary for vesting\n', '     * @param amount  totalToken to be vested\n', '     */\n', '     \n', '     function setDefaultVesting(address account, uint256 amount) public onlyLCXTokenAndOwner returns(bool){\n', '         _setDefaultVesting(account, amount);\n', '         return true;\n', '     }\n', '     \n', '     /**\n', '      *@dev Internal function to set default vesting parameters\n', '      */\n', '      \n', '     function _setDefaultVesting(address account, uint256 amount)  internal {\n', '         require(account!=address(0));\n', '         VestedToken storage vested = vestedUser[account];\n', '         vested.cliff = _cliff;\n', '         vested.start = block.timestamp;\n', '         vested.duration = _duration;\n', '         vested.totalToken = amount;\n', '         vested.releasedToken = 0;\n', '         vested.revoked = _revoked;\n', '     }\n', '     \n', '     \n', '     /**\n', '     * @dev this will set the beneficiary with vesting \n', '     * parameters provided\n', '     * @param account address of the beneficiary for vesting\n', '     * @param amount  totalToken to be vested\n', '     * @param cliff In seconds of one period in vesting\n', '     * @param duration In seconds of total vesting \n', '     * @param startAt UNIX timestamp in seconds from where vesting will start\n', '     */\n', '     \n', '     function setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt ) public onlyLCXTokenAndOwner  returns(bool){\n', '         _setVesting(account, amount, cliff, duration, startAt);\n', '         return true;\n', '     }\n', '     \n', '     /**\n', '      * @dev Internal function to set default vesting parameters\n', '      * @param account address of the beneficiary for vesting\n', '      * @param amount  totalToken to be vested\n', '      * @param cliff In seconds of one period in vestin\n', '      * @param duration In seconds of total vesting duration\n', '      * @param startAt UNIX timestamp in seconds from where vesting will start\n', '      *\n', '      */\n', '     \n', '     function _setVesting(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt) internal {\n', '         \n', '         require(account!=address(0));\n', '         require(cliff<=duration);\n', '         VestedToken storage vested = vestedUser[account];\n', '         vested.cliff = cliff;\n', '         vested.start = startAt;\n', '         vested.duration = duration;\n', '         vested.totalToken = amount;\n', '         vested.releasedToken = 0;\n', '         vested.revoked = false;\n', '     }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     * anyone can release their token \n', '     */\n', '     \n', '    function releaseMyToken() public returns(bool) {\n', '        releaseToken(msg.sender);\n', '        return true;\n', '    }\n', '    \n', '     /**\n', '     * @notice Transfers vested tokens to the given account.\n', '     * @param account address of the vested user\n', '     */\n', '    function releaseToken(address account) public {\n', '       require(account != address(0));\n', '       VestedToken storage vested = vestedUser[account];\n', '       uint256 unreleasedToken = _releasableAmount(account);  // total releasable token currently\n', '       require(unreleasedToken>0);\n', '       vested.releasedToken = vested.releasedToken.add(unreleasedToken);\n', '       LCXToken.safeTransfer(account,unreleasedToken);\n', '       emit TokenReleased(account, unreleasedToken);\n', '    }\n', '    \n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param account address of user\n', '     */\n', '    function _releasableAmount(address account) internal view returns (uint256) {\n', '        return _vestedAmount(account).sub(vestedUser[account].releasedToken);\n', '    }\n', '\n', '  \n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param account address of the user\n', '     */\n', '    function _vestedAmount(address account) internal view returns (uint256) {\n', '        VestedToken storage vested = vestedUser[account];\n', '        uint256 totalToken = vested.totalToken;\n', '        if(block.timestamp <  vested.start.add(vested.cliff)){\n', '            return 0;\n', '        }else if(block.timestamp >= vested.start.add(vested.duration) || vested.revoked){\n', '            return totalToken;\n', '        }else{\n', '            uint256 numberOfPeriods = (block.timestamp.sub(vested.start)).div(vested.cliff);\n', '            return totalToken.mul(numberOfPeriods.mul(vested.cliff)).div(vested.duration);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param account address in which the vesting is revoked\n', '     */\n', '    function revoke(address account) public onlyOwner {\n', '        VestedToken storage vested = vestedUser[account];\n', '        require(!vested.revoked);\n', '        uint256 balance = vested.totalToken;\n', '        uint256 unreleased = _releasableAmount(account);\n', '        uint256 refund = balance.sub(unreleased);\n', '        vested.revoked = true;\n', '        vested.totalToken = unreleased;\n', '        LCXToken.safeTransfer(owner(), refund);\n', '        emit VestingRevoked(account);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract lcxToken is IERC20, Ownable{\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '    \n', '    TokenVesting public vestingContractAddress;\n', '    \n', '    /**\n', '     * @dev name, symbol and decimals of LCX Token\n', '     */ \n', "    string public constant name = 'LCX';\n", "    string public constant symbol = 'LCX';\n", '    uint256 public constant decimals = 18;\n', '    \n', '    /**\n', '     * @dev Initializes the totalSupply of the token with decimal point 18\n', '     */\n', '    constructor(uint256 totalSupply) public{\n', '        _totalSupply = totalSupply.mul(10**decimals);\n', '        _balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '    \n', '    \n', '     /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The account whose tokens will be burned.\n', '     * @param value uint256 The amount of token to be burned.\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '   \n', '    /**\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Set Vesting Token Smart contract Address before starting vesting\n', '     * @param tokenVestingAddress Smart conract Address of the Vesting Smart contract\n', '     */ \n', '    function setTokenVestingAddress(TokenVesting tokenVestingAddress) public onlyOwner returns(bool){\n', '        vestingContractAddress = tokenVestingAddress;\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Vesting users token by default parameters\n', '     * @param account address of the user \n', '     * @param amount the amount to be vested\n', '     */\n', '     function setDefaultVestingToken(address account, uint256 amount) public onlyOwner returns(bool){\n', '         vestingContractAddress.setDefaultVesting(account, amount);\n', '         _transfer(msg.sender,address(vestingContractAddress), amount);\n', '         return true;\n', '     }\n', '     \n', '    /**\n', '     * @dev Vesting users token by given parameters\n', '     * @param account address of the beneficiary for vesting\n', '     * @param amount  totalToken to be vested\n', '     * @param cliff In seconds of one period in vestin\n', '     * @param duration In seconds of total vesting duration\n', '     * @param startAt UNIX timestamp in seconds from where vesting will start\n', '     */\n', '     function setVestingToken(address account, uint256 amount, uint256 cliff, uint256 duration, uint256 startAt) public onlyOwner returns(bool){\n', '         vestingContractAddress.setVesting(account, amount, cliff, duration, startAt);\n', '         _transfer(msg.sender ,address(vestingContractAddress), amount);\n', '         return true;\n', '     }\n', '    \n', '    /**\n', '     * @dev Batch Transfer Transactions\n', '     * @param accounts array of addresses\n', '     * @param values array of values to be transfer\n', '     */\n', '     function batchTransfer(address[] memory accounts, uint256[] memory values ) public onlyOwner returns(bool){\n', '        require(accounts.length == values.length);\n', '        for(uint256 i=0;i< accounts.length;i++){\n', '            _transfer(msg.sender, accounts[i], values[i]);\n', '        }\n', '        return true;\n', '     }\n', '}']