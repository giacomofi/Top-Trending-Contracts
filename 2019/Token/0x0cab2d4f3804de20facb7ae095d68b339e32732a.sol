['pragma solidity ^0.5.2;\n', '// ----------------------------------------------------------------------------\n', '// rev rbs eryk 190105.POC // Ver Proof of Concept compiler optimized - travou na conversao de GTIN-13+YYMM para address nesta versao 0.5---droga\n', '// &#39;IGR&#39; &#39;InGRedient Token with Fixed Supply Token&#39;  contract\n', '//\n', '// Symbol      : IGR\n', '// Name        : InGRedient Token -based on ER20 wiki- Example Fixed Supply Token\n', '// Total supply: 1,000,000.000000000000000000\n', '// Decimals    : 3\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '//\n', '// (c) <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4b0e3922282065322a262a2f2a0b2a273e2524653e2d2a2928652e2f3e652939">[email&#160;protected]</a>  & <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6b3902080a190f04452904190c0e182b1e0d0a0908450e0f1e450919">[email&#160;protected]</a>\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '}\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', 'function totalSupply() public view returns (uint);\n', 'function balanceOf(address tokenOwner) public view returns (uint balance);\n', 'function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', 'function transfer(address to, uint tokens) public returns (bool success);\n', 'function approve(address spender, uint tokens) public returns (bool success);\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', 'event Transfer(address indexed from, address indexed to, uint tokens);\n', 'event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', 'function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '    _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// fixed supply\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract InGRedientToken  is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "IGR";\n', '        name = "InGRedientToken";\n', '        decimals = 3;//kg is the official  unit but grams is mostly  used\n', '        _totalSupply = 1000000000000000000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '        revert();\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    // ==================================================================\n', '    // >>>>>>  IGR token specific functions <<<<<<\n', '    //===================================================================\n', '    \n', '    event  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 10- allows for sale of ingredients along with the respective IGR token transfer\n', '    // --------------------------------------------------------------------------------------------------\n', '    function farmerRequestCertificate(address _certAuth, uint _tokens, string memory  _product, string memory _IngValueProperty, string memory _localGPSProduction, string memory  _dateProduction ) public returns (bool success) {\n', '        // falta implementar uma verif se o end certAuth foi cadastrado anteriormente\n', '        allowed[owner][_certAuth] = _tokens;\n', '        emit Approval(owner, _certAuth, _tokens);\n', '        emit FarmerRequestedCertificate(owner, _certAuth, _tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy\n', '    // as well as qtty , published url, product, details of IGR value property, location , date of harvest )\n', '    // --------------------------------------------------------------------------------------------------\n', '    function certAuthIssuesCerticate(address owner, address farmer, uint tokens, string memory _url,string memory product,string memory IngValueProperty, string memory localGPSProduction, uint dateProduction ) public returns (bool success) {\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);//nao faz sentido\n', '        allowed[owner][msg.sender] = 0;\n', '        balances[farmer] = balances[farmer].add(tokens);\n', '        emit Transfer(owner, farmer, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 30- allows for simple sale of ingredients along with the respective IGR token transfer ( with url)\n', '    // --------------------------------------------------------------------------------------------------\n', '    function sellsIngrWithoutDepletion(address to, uint tokens,string memory _url) public returns (bool success) {\n', '        string memory url=_url; // keep the url of the InGRedient for later transfer\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 40- allows for sale of intermediate product made from certified ingredients along with\n', '    // the respective IGR token transfer ( with url)\n', '    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered\n', '    // --------------------------------------------------------------------------------------------------\n', '    function sellsIntermediateGoodWithDepletion(address to, uint tokens,string memory _url,uint out2inIngredientPercentage ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        require (out2inIngredientPercentage <= 100); // make sure the depletion percentage is not higher than  100(%)\n', '        balances[msg.sender] = balances[msg.sender].sub((tokens*(100-out2inIngredientPercentage))/100);// this will kill the tokens for the depleted part //\n', '        transfer(to, tokens*out2inIngredientPercentage/100);\n', '        return true;\n', '    }\n', '    \n', '    //--------------------------------------------------------------------------------------------------\n', '    // aux function to generate a ethereum address from the food item visible numbers ( GTIN-13 + date of validity\n', '    // is used by Routine 50- comminglerSellsProductSKUWithProRataIngred\n', '    // and can be used to query teh blockchain by a consumer App\n', '    //--------------------------------------------------------------------------------------------------\n', '    function genAddressFromGTIN13date(string memory _GTIN13,string memory _YYMMDD) public pure returns(address b){\n', '    //address b = bytes32(keccak256(abi.encodePacked(_GTIN13,_YYMMDD)));\n', '    // address b = address(a);\n', '        \n', '        bytes32 a = keccak256(abi.encodePacked(_GTIN13,_YYMMDD));\n', '        \n', '        assembly{\n', '        mstore(0,a)\n', '        b:= mload(0)\n', '        }\n', '        \n', '        return b;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    //  transferAndWriteUrl- aux routine -Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\n', '    // --------------------------------------------------------------------------------------------------\n', '    function transferAndWriteUrl(address to, uint tokens, string memory _url) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD )\n', '    // allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer  with url\n', '    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered to the consumer level package(SKU)\n', '    // --------------------------------------------------------------------------------------------------\n', '    function comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string memory _url,uint _qttyIGRinLLSKU, string memory _GTIN13, string memory _YYMMDD ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);\n', '        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero\n', '        //write IGR qtty in one SKU and url  to the blockchain address composed of GTIN-13+YYMMDD\n', '        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\n', '        //deduct IGRs sold by commingler  from its balances\n', '        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\n', '        return true;\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.5.2;\n', '// ----------------------------------------------------------------------------\n', '// rev rbs eryk 190105.POC // Ver Proof of Concept compiler optimized - travou na conversao de GTIN-13+YYMM para address nesta versao 0.5---droga\n', "// 'IGR' 'InGRedient Token with Fixed Supply Token'  contract\n", '//\n', '// Symbol      : IGR\n', '// Name        : InGRedient Token -based on ER20 wiki- Example Fixed Supply Token\n', '// Total supply: 1,000,000.000000000000000000\n', '// Decimals    : 3\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '//\n', '// (c) Erick.yamada@aluno.ufabc.edu.br  & Ricardo.Borges@ufabc.edu.br\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '}\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', 'function totalSupply() public view returns (uint);\n', 'function balanceOf(address tokenOwner) public view returns (uint balance);\n', 'function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', 'function transfer(address to, uint tokens) public returns (bool success);\n', 'function approve(address spender, uint tokens) public returns (bool success);\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', 'event Transfer(address indexed from, address indexed to, uint tokens);\n', 'event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', 'function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    \n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '    _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// fixed supply\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract InGRedientToken  is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "IGR";\n', '        name = "InGRedientToken";\n', '        decimals = 3;//kg is the official  unit but grams is mostly  used\n', '        _totalSupply = 1000000000000000000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () external payable {\n', '        revert();\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    // ==================================================================\n', '    // >>>>>>  IGR token specific functions <<<<<<\n', '    //===================================================================\n', '    \n', '    event  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 10- allows for sale of ingredients along with the respective IGR token transfer\n', '    // --------------------------------------------------------------------------------------------------\n', '    function farmerRequestCertificate(address _certAuth, uint _tokens, string memory  _product, string memory _IngValueProperty, string memory _localGPSProduction, string memory  _dateProduction ) public returns (bool success) {\n', '        // falta implementar uma verif se o end certAuth foi cadastrado anteriormente\n', '        allowed[owner][_certAuth] = _tokens;\n', '        emit Approval(owner, _certAuth, _tokens);\n', '        emit FarmerRequestedCertificate(owner, _certAuth, _tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy\n', '    // as well as qtty , published url, product, details of IGR value property, location , date of harvest )\n', '    // --------------------------------------------------------------------------------------------------\n', '    function certAuthIssuesCerticate(address owner, address farmer, uint tokens, string memory _url,string memory product,string memory IngValueProperty, string memory localGPSProduction, uint dateProduction ) public returns (bool success) {\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);//nao faz sentido\n', '        allowed[owner][msg.sender] = 0;\n', '        balances[farmer] = balances[farmer].add(tokens);\n', '        emit Transfer(owner, farmer, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 30- allows for simple sale of ingredients along with the respective IGR token transfer ( with url)\n', '    // --------------------------------------------------------------------------------------------------\n', '    function sellsIngrWithoutDepletion(address to, uint tokens,string memory _url) public returns (bool success) {\n', '        string memory url=_url; // keep the url of the InGRedient for later transfer\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 40- allows for sale of intermediate product made from certified ingredients along with\n', '    // the respective IGR token transfer ( with url)\n', '    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered\n', '    // --------------------------------------------------------------------------------------------------\n', '    function sellsIntermediateGoodWithDepletion(address to, uint tokens,string memory _url,uint out2inIngredientPercentage ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        require (out2inIngredientPercentage <= 100); // make sure the depletion percentage is not higher than  100(%)\n', '        balances[msg.sender] = balances[msg.sender].sub((tokens*(100-out2inIngredientPercentage))/100);// this will kill the tokens for the depleted part //\n', '        transfer(to, tokens*out2inIngredientPercentage/100);\n', '        return true;\n', '    }\n', '    \n', '    //--------------------------------------------------------------------------------------------------\n', '    // aux function to generate a ethereum address from the food item visible numbers ( GTIN-13 + date of validity\n', '    // is used by Routine 50- comminglerSellsProductSKUWithProRataIngred\n', '    // and can be used to query teh blockchain by a consumer App\n', '    //--------------------------------------------------------------------------------------------------\n', '    function genAddressFromGTIN13date(string memory _GTIN13,string memory _YYMMDD) public pure returns(address b){\n', '    //address b = bytes32(keccak256(abi.encodePacked(_GTIN13,_YYMMDD)));\n', '    // address b = address(a);\n', '        \n', '        bytes32 a = keccak256(abi.encodePacked(_GTIN13,_YYMMDD));\n', '        \n', '        assembly{\n', '        mstore(0,a)\n', '        b:= mload(0)\n', '        }\n', '        \n', '        return b;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', "    //  transferAndWriteUrl- aux routine -Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\n', '    // --------------------------------------------------------------------------------------------------\n', '    function transferAndWriteUrl(address to, uint tokens, string memory _url) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // --------------------------------------------------------------------------------------------------\n', '    // routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD )\n', '    // allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer  with url\n', '    // i.e.: allows only the pro-rata quantity of semi-processed  InGRedient tokens to be transfered to the consumer level package(SKU)\n', '    // --------------------------------------------------------------------------------------------------\n', '    function comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string memory _url,uint _qttyIGRinLLSKU, string memory _GTIN13, string memory _YYMMDD ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);\n', '        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero\n', '        //write IGR qtty in one SKU and url  to the blockchain address composed of GTIN-13+YYMMDD\n', '        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\n', '        //deduct IGRs sold by commingler  from its balances\n', '        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\n', '        return true;\n', '    }\n', '\n', '\n', '}']
