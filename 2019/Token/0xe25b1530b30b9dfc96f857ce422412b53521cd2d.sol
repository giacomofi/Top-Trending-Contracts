['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-09\n', '*/\n', '\n', 'pragma solidity >=0.4.25 <0.6.0;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "Only contract owner can call this method");\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0), "Owner can&#39;t be set to zero address");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0), "Address to can&#39;t be zero address");\n', '    require(_value <= balances[msg.sender], "Balance less than transfer value");\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/* 合约暂停功能 */\n', 'contract Pausable is Ownable {\n', '  event PausePublic(bool newState);\n', '  event PauseOwnerAdmin(bool newState);\n', '\n', '  bool public pausedPublic = false;\n', '  bool public pausedOwnerAdmin = false;\n', '\n', '  address public admin;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable based on pause states.\n', '   */\n', '  modifier whenNotPaused() {\n', '    if(pausedPublic) {\n', '      if(!pausedOwnerAdmin) {\n', '        require(msg.sender == admin || msg.sender == owner, "Only admin or owner can call with pausedPublic");\n', '      } else {\n', '        revert("all paused");\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to set new pause flags\n', '   * pausedPublic can&#39;t be false while pausedOwnerAdmin is true\n', '   * 当管理员被暂停 普通用户一定是被暂停的\n', '   */\n', '  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) public onlyOwner {\n', '    require(!(newPausedPublic == false && newPausedOwnerAdmin == true), "PausedPublic can&#39;t be false while pausedOwnerAdmin is true");\n', '\n', '    pausedPublic = newPausedPublic;\n', '    pausedOwnerAdmin = newPausedOwnerAdmin;\n', '\n', '    emit PausePublic(newPausedPublic);\n', '    emit PauseOwnerAdmin(newPausedOwnerAdmin);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0), "Address to can&#39;t be zero address");\n', '    require(_value <= balances[_from], "Balance less than transfer value");\n', '    require(_value <= allowed[_from][msg.sender], "Allowed balance less than transfer value");\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract PollToken is PausableToken {\n', '    uint8  private constant _decimals = 8;\n', '    uint private constant minDuration = 300;\n', '    uint constant fourYears = 4 * 365 days;\n', '\n', '    struct Poll {\n', '        // 初始每分钟产量\n', '        uint amountPerMinute;\n', '        // 上一次领取时间\n', '        uint lastMineTime;\n', '        // 当前衰减阶段 初始为 0\n', '        uint currentDecayPeriod;\n', '        // 已领取总量\n', '        uint totalMine;\n', '        // 矿池账户\n', '        address account;\n', '        // 开始释放时间\n', '        uint startTime;\n', '    }\n', '\n', '    Poll public businessPoll = Poll({\n', '        amountPerMinute: 23852740 * (10 ** uint(_decimals)) / (24 * 60),\n', '        lastMineTime: 0,\n', '        currentDecayPeriod: 0,\n', '        totalMine: 0,\n', '        account: address(0),\n', '        startTime: 0\n', '    });\n', '\n', '    Poll public communityPoll = Poll({\n', '        amountPerMinute: 6815068 * (10 ** uint(_decimals)) / (24 * 60),\n', '        lastMineTime: 0,\n', '        currentDecayPeriod: 0,\n', '        totalMine: 0,\n', '        account: address(0),\n', '        startTime: 0\n', '    });\n', '\n', '    Poll public techPoll = Poll({\n', '        amountPerMinute: 3407534 * (10 ** uint(_decimals)) / (24 * 60),\n', '        lastMineTime: 0,\n', '        currentDecayPeriod: 0,\n', '        totalMine: 0,\n', '        account: address(0),\n', '        startTime: 0\n', '    });\n', '\n', '    /* 设置矿池账户接口 */\n', '    function _setPollAccount(address account, Poll storage poll) private {\n', '        require(account != address(0), "Poll account can&#39;t be zero address");\n', '        poll.account = account;\n', '    }\n', '    function setBusinessAccount(address account) public onlyOwner {\n', '        _setPollAccount(account, businessPoll);\n', '    }\n', '    function setCommunityAccount(address account) public onlyOwner {\n', '        _setPollAccount(account, communityPoll);\n', '    }\n', '    function setTechAccount(address account) public onlyOwner {\n', '        _setPollAccount(account, techPoll);\n', '    }\n', '    function setAllAccount(address businessAcc, address communityAcc, address techAcc) public onlyOwner {\n', '        _setPollAccount(businessAcc, businessPoll);\n', '        _setPollAccount(communityAcc, communityPoll);\n', '        _setPollAccount(techAcc, techPoll);\n', '    }\n', '\n', '    /* 激活矿池接口 */\n', '    function _activePoll(Poll storage poll) private {\n', '        require(poll.startTime == 0, "Poll has actived");\n', '        poll.startTime = now;\n', '    }\n', '    function activeBusinessPoll() public onlyOwner {\n', '        _activePoll(businessPoll);\n', '    }\n', '    function activeCommunityPoll() public onlyOwner {\n', '        _activePoll(communityPoll);\n', '    }\n', '    function activeTechPoll() public onlyOwner {\n', '        _activePoll(techPoll);\n', '    }\n', '\n', '    /* 获取可提额度接口 */\n', '    function _getAvailablePoll(Poll memory poll) private view returns (uint) {\n', '        if (poll.startTime == 0) {\n', '            return 0;\n', '        }\n', '        uint duration = 0;\n', '        uint amount = 0;\n', '        uint curTime = now;\n', '        // 当前处于第几个衰减阶段\n', '        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\n', '        // 上一次处于第几个衰减阶段\n', '        uint lastDecayPeriod = 0;\n', '        if (poll.lastMineTime > 0) {\n', '            duration = curTime - poll.lastMineTime;\n', '            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\n', '        } else {\n', '            duration = curTime - poll.startTime;\n', '        }\n', '\n', '        if (currentDecayPeriod == lastDecayPeriod) {\n', '            // 没有跨阶段\n', '            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\n', '        }\n', '        else {\n', '            /**\n', '            * 跨阶段 先计算两头的量\n', '            * 再计算中间整阶段的量\n', '            * 考虑了包括在端点的极端情况\n', '            * |____|____|____|____|\n', '            *   ^    ^    ^    ^\n', '            *   0    1    2   3\n', '            */\n', '            uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\n', '            uint right_duration = (curTime - poll.startTime) % fourYears;\n', '\n', '            if (left_duration != fourYears && poll.lastMineTime > 0) {\n', '                amount = amount + poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\n', '            }\n', '            amount = amount + poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\n', '            for (uint i = lastDecayPeriod + 1; i < currentDecayPeriod; i++) {\n', '                amount = amount + poll.amountPerMinute * fourYears / (60 * 2 ** i);\n', '            }\n', '        }\n', '        return amount;\n', '    }\n', '    function getAvailableBPoll() public view returns (uint) {\n', '        return _getAvailablePoll(businessPoll);\n', '    }\n', '    function getAvailableCpoll() public view returns (uint) {\n', '        return _getAvailablePoll(communityPoll);\n', '    }\n', '    function getAvailableTpoll() public view returns (uint) {\n', '        return _getAvailablePoll(techPoll);\n', '    }\n', '\n', '    /* 提取矿代币池接口 */\n', '    function _minePoll(Poll storage poll) private {\n', '        require(poll.startTime > 0, "Poll not start");\n', '        require(poll.account != address(0), "businessAccount can&#39;t be zero address");\n', '\n', '        uint duration = 0;\n', '        uint amount = 0;\n', '        uint curTime = now;\n', '        // 当前处于第几个衰减阶段\n', '        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\n', '        // 上一次处于第几个衰减阶段\n', '        uint lastDecayPeriod = 0;\n', '        if (poll.lastMineTime > 0) {\n', '            duration = curTime - poll.lastMineTime;\n', '            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\n', '        } else {\n', '            duration = curTime - poll.startTime;\n', '        }\n', '\n', '        if (currentDecayPeriod == lastDecayPeriod) {\n', '            // 没有跨阶段\n', '            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\n', '        }\n', '        else {\n', '            uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\n', '            uint right_duration = (curTime - poll.startTime) % fourYears;\n', '\n', '            if (left_duration != fourYears && poll.lastMineTime > 0) {\n', '                amount = amount + poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\n', '            }\n', '            amount = amount + poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\n', '            for (uint i = lastDecayPeriod + 1; i < currentDecayPeriod; i++) {\n', '                amount = amount + poll.amountPerMinute * fourYears / (60 * 2 ** i);\n', '            }\n', '        }\n', '\n', '        balances[poll.account] = balances[poll.account] + amount;\n', '        poll.totalMine = poll.totalMine + amount;\n', '        poll.lastMineTime = curTime;\n', '        poll.currentDecayPeriod = currentDecayPeriod;\n', '        emit Transfer(address(0x0), poll.account, amount);\n', '    }\n', '    function mineBusinessPoll() public onlyOwner {\n', '        _minePoll(businessPoll);\n', '    }\n', '    function mineCommunityPoll() public onlyOwner {\n', '        _minePoll(communityPoll);\n', '    }\n', '    function mineTechPoll() public onlyOwner {\n', '        _minePoll(techPoll);\n', '    }\n', '}\n', '\n', 'contract BlockSeedToken is PollToken {\n', '    string  public  constant name = "BlockSeed Token";\n', '    string  public  constant symbol = "BKS";\n', '    uint8   public  constant decimals = 8;\n', '    uint    public  constant initLiquidity = 500000000 * 10 ** uint(decimals);\n', '    bool    private  changed;\n', '\n', '    modifier validDestination( address to )\n', '    {\n', '        require(to != address(0x0), "Address to can&#39;t be zero address");\n', '        require(to != address(this), "Address to can&#39;t be contract address");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        // assign the admin account\n', '        admin = msg.sender;\n', '        changed = false;\n', '\n', '        totalSupply = 100000000000 * 10**uint256(decimals);\n', '        balances[msg.sender] = initLiquidity;\n', '        emit Transfer(address(0x0), msg.sender, initLiquidity);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    /* 获取代币流通总量接口 */\n', '    function getLiquidity() public view returns (uint) {\n', '        return initLiquidity + businessPoll.totalMine + communityPoll.totalMine + techPoll.totalMine;\n', '    }\n', '\n', '    /* 销毁代币 */\n', '    function burn(uint _value) public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    // save some gas by making only one contract call\n', '    function burnFrom(address _from, uint256 _value) public returns (bool) {\n', '        assert(transferFrom(_from, msg.sender, _value));\n', '        return burn(_value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) public onlyOwner {\n', '        // owner can drain tokens that are sent here by mistake\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\n', '\n', '    function changeAdmin(address newAdmin) public onlyOwner {\n', '        // owner can re-assign the admin\n', '        emit AdminTransferred(admin, newAdmin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function changeAll(address newOwner) public onlyOwner{\n', '        if (!changed){\n', '            transfer(newOwner,totalSupply);\n', '            changeAdmin(newOwner);\n', '            transferOwnership(newOwner);\n', '            changed = true;\n', '        }\n', '    }\n', '}']