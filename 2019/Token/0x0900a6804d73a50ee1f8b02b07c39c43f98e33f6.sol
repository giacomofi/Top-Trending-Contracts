['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-04\n', '*/\n', '\n', '// File: contracts/Ownable.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/IERC20.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', ' * all accounts just by listening to said events. Note that this isn&#39;t required by the specification, and other\n', ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve an address to spend another addresses&#39; tokens.\n', '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20Burnable.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The account whose tokens will be burned.\n', '     * @param value uint256 The amount of token to be burned.\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20Mintable.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, Ownable {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/FTIToken.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', 'contract FTIToken is ERC20Burnable, ERC20Mintable {\n', '  string public constant name = "FTI NEWS Token";\n', '  string public constant symbol = "TECH";\n', '  uint8 public constant decimals = 10;\n', '\n', '  uint256 public constant initialSupply = 299540000 * (10 ** uint256(decimals)); \n', '\n', '  constructor () public {\n', '    _totalSupply = initialSupply;\n', '    _balances[0x8D44D27D2AF7BE632baA340eA52E443756ea1aD3] = initialSupply;\n', '  }\n', '}\n', '\n', '// File: contracts/FTICrowdsale.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', 'contract FTICrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public rate;\n', '  uint256 public minPurchase;\n', '  uint256 public maxSupply;\n', '\n', '  // Tokens, reserved for owners\n', '  uint256 public stage1ReleaseTime;\n', '  uint256 public stage2ReleaseTime;\n', '  uint256 public stage3ReleaseTime;\n', '\n', '  // Amount of reserved tokens\n', '  uint256 public stage1Amount;\n', '  uint256 public stage2Amount;\n', '  uint256 public stage3Amount;\n', '\n', '  bool public stage1Released;\n', '  bool public stage2Released;\n', '  bool public stage3Released;\n', '\n', '  /**\n', '   * @dev Money is sent to this wallet upon tokens purchase\n', '   */\n', '  address payable public wallet;\n', '\n', '  bool public isPaused;\n', '\n', '  FTIToken public token;\n', '\n', '  constructor () public {\n', '    token = new FTIToken();\n', '\n', '    minPurchase = 0.00000000000005 ether; // price of the minimum part of the token\n', '    rate = 0.000194 ether;\n', '\n', '    maxSupply = 2395600000 * (10 ** 10); // 2395600000 * (10^(decimals))\n', '    wallet = 0x8D44D27D2AF7BE632baA340eA52E443756ea1aD3;\n', '\n', '    stage1ReleaseTime = now + 180 days; // 6 months\n', '    stage2ReleaseTime = now + 270 days; // 9 months\n', '    stage3ReleaseTime = now + 365 days; // 12 months\n', '\n', '    stage1Amount = 299540000 * (10 ** uint256(token.decimals()));\n', '    stage2Amount = 299540000 * (10 ** uint256(token.decimals()));\n', '    stage3Amount = 299540000 * (10 ** uint256(token.decimals()));\n', '  }\n', '\n', '  /**\n', '   * @dev This function suspends the tokens purchase\n', '   */\n', '  function pause() public onlyOwner {\n', '    require(!isPaused, &#39;Sales must be not paused&#39;);\n', '    isPaused = true;\n', '  }\n', '\n', '  /**\n', '   * @dev This function resumes the purchase of tokens\n', '   */\n', '  function unpause() public onlyOwner {\n', '    require(isPaused, &#39;Sales must be paused&#39;);\n', '    isPaused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Function set new wallet address.\n', '   * @param newWallet Address of new wallet.\n', '   */\n', '  function changeWallet(address payable newWallet) public onlyOwner {\n', '    require(newWallet != address(0));\n', '    wallet = newWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev This function set new token owner.\n', '   */\n', '  function transferTokenOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    token.transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev This function burn all unsold tokens.\n', '   */\n', '  function burnUnsold() public onlyOwner {\n', '    token.burn(token.balanceOf(address(this)));\n', '  }\n', '\n', '  /**\n', '   * @dev This function releases tokens reserved for owners.\n', '   */\n', '  function releaseStage1() public onlyOwner {\n', '    require(now > stage1ReleaseTime, &#39;Release time has not come yet&#39;);\n', '    require(stage1Released != true, &#39;Tokens already released&#39;);\n', '\n', '    stage1Released = true;\n', '    token.mint(wallet, stage1Amount);\n', '  }\n', '\n', '  /**\n', '   * @dev This function releases tokens reserved for owners.\n', '   */\n', '  function releaseStage2() public onlyOwner {\n', '    require(now > stage2ReleaseTime, &#39;Release time has not come yet&#39;);\n', '    require(stage2Released != true, &#39;Tokens already released&#39;);\n', '\n', '    stage2Released = true;\n', '    token.mint(wallet, stage2Amount);\n', '  }\n', '\n', '  /**\n', '   * @dev This function releases tokens reserved for owners.\n', '   */\n', '  function releaseStage3() public onlyOwner {\n', '    require(now > stage3ReleaseTime, &#39;Release time has not come yet&#39;);\n', '    require(stage3Released != true, &#39;Tokens already released&#39;);\n', '\n', '    stage3Released = true;\n', '    token.mint(wallet, stage3Amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function\n', '   */\n', '  function() external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  function buyTokens() public payable {\n', '    require(!isPaused, &#39;Sales are temporarily paused&#39;);\n', '\n', '    address payable inv = msg.sender;\n', '    require(inv != address(0));\n', '\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount >= minPurchase, &#39;Amount of ether is not enough to buy even the smallest token part&#39;);\n', '\n', '    uint256 cleanWei; // amount of wei to use for purchase excluding change and max supply overflows\n', '    uint256 change;\n', '    uint256 tokens;\n', '    uint256 tokensNoBonuses;\n', '    uint256 totalSupply;\n', '    uint256 supply;\n', '\n', '    tokensNoBonuses = weiAmount.mul(1E10).div(rate);\n', '\n', '    if (weiAmount >= 10 ether) {\n', '      tokens = tokensNoBonuses.mul(112).div(100);\n', '    } else if (weiAmount >= 5 ether) {\n', '      tokens = tokensNoBonuses.mul(105).div(100);\n', '    } else {\n', '      tokens = tokensNoBonuses;\n', '    }\n', '\n', '    totalSupply = token.totalSupply();\n', '    supply = totalSupply.sub(token.balanceOf(address(this)));\n', '\n', '    if (supply.add(tokens) > maxSupply) {\n', '      tokens = maxSupply.sub(supply);\n', '      require(tokens > 0, &#39;There are currently no tokens for sale&#39;);\n', '      if (tokens >= tokensNoBonuses) {\n', '        cleanWei = weiAmount;\n', '      } else {\n', '        cleanWei = tokens.mul(rate).div(1E10);\n', '        change = weiAmount.sub(cleanWei);\n', '      }\n', '    } else {\n', '      cleanWei = weiAmount;\n', '    }\n', '\n', '    if (token.balanceOf(address(this)) >= tokens) {\n', '      token.transfer(inv, tokens);\n', '    } else if (token.balanceOf(address(this)) == 0) {\n', '      token.mint(inv, tokens);\n', '    } else {\n', '      uint256 mintAmount = tokens.sub(token.balanceOf(address(this)));\n', '\n', '      token.mint(address(this), mintAmount);\n', '      token.transfer(inv, tokens);\n', '    }\n', '\n', '    wallet.transfer(cleanWei);\n', '\n', '    if (change > 0) {\n', '      inv.transfer(change); \n', '    }\n', '  }\n', '}']