['pragma solidity ^0.4.17;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public proposedOwner;\n', '    event OwnershipTransferInitiated(address indexed _proposedOwner);\n', '    event OwnershipTransferCompleted(address indexed _newOwner);\n', '\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isOwner(address _address) internal view returns (bool) {\n', '        return (_address == owner);\n', '    }\n', '\n', '    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\n', '        proposedOwner = _proposedOwner;\n', '        OwnershipTransferInitiated(_proposedOwner);\n', '        return true;\n', '    }\n', '\n', '    function completeOwnershipTransfer() public returns (bool) {\n', '        require(msg.sender == proposedOwner);\n', '        owner = proposedOwner;\n', '        proposedOwner = address(0);\n', '        OwnershipTransferCompleted(owner);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SkipdayConfig {\n', '    string  public constant TOKEN_SYMBOL   = "SKIPDAY";\n', '    string  public constant TOKEN_NAME     = "Skipday";\n', '    uint8   public constant TOKEN_DECIMALS = 18;\n', '    uint256 public constant DECIMALSFACTOR = 10**uint256(TOKEN_DECIMALS);\n', '    uint256 public constant TOKENS_MAX     = 314159265 * DECIMALSFACTOR;\n', '}\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract ERC20Token is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string  private tokenName;\n', '    string  private tokenSymbol;\n', '    uint8   private tokenDecimals;\n', '    uint256 internal tokenTotalSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    function ERC20Token(string _symbol, string _name, uint8 _decimals, uint256 _totalSupply) public Owned(){\n', '        tokenSymbol      = _symbol;\n', '        tokenName        = _name;\n', '        tokenDecimals    = _decimals;\n', '        tokenTotalSupply = _totalSupply;\n', '        balances[owner]  = _totalSupply;\n', '        Transfer(0x0, owner, _totalSupply);\n', '    }\n', '\n', '\n', '    function name() public view returns (string) {\n', '        return tokenName;\n', '    }\n', '\n', '\n', '    function symbol() public view returns (string) {\n', '        return tokenSymbol;\n', '    }\n', '\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return tokenDecimals;\n', '    }\n', '\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return tokenTotalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract OpsManaged is Owned {\n', '    address public opsAddress;\n', '    address public adminAddress;\n', '    event AdminAddressChanged(address indexed _newAddress);\n', '    event OpsAddressChanged(address indexed _newAddress);\n', '\n', '\n', '    function OpsManaged() public Owned(){\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdminOrOps() {\n', '        require(isAdmin(msg.sender) || isOps(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(isOwner(msg.sender) || isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOps() {\n', '        require(isOps(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isAdmin(address _address) internal view returns (bool) {\n', '        return (adminAddress != address(0) && _address == adminAddress);\n', '    }\n', '\n', '    function isOps(address _address) internal view returns (bool) {\n', '        return (opsAddress != address(0) && _address == opsAddress);\n', '    }\n', '\n', '    function isOwnerOrOps(address _address) internal view returns (bool) {\n', '        return (isOwner(_address) || isOps(_address));\n', '    }\n', '\n', '    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_adminAddress != owner);\n', '        require(_adminAddress != address(this));\n', '        require(!isOps(_adminAddress));\n', '        adminAddress = _adminAddress;\n', '        AdminAddressChanged(_adminAddress);\n', '        return true;\n', '    }\n', '\n', '    function setOpsAddress(address _opsAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_opsAddress != owner);\n', '        require(_opsAddress != address(this));\n', '        require(!isAdmin(_opsAddress));\n', '        opsAddress = _opsAddress;\n', '        OpsAddressChanged(_opsAddress);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Skipday is ERC20Token, OpsManaged, SkipdayConfig {\n', '    bool public finalized;\n', '    event Burnt(address indexed _from, uint256 _amount);\n', '    event Finalized();\n', '\n', '    function Skipday() public ERC20Token(TOKEN_SYMBOL, TOKEN_NAME, TOKEN_DECIMALS, TOKENS_MAX) OpsManaged(){\n', '        finalized = false;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function checkTransferAllowed(address _sender, address _to) private view {\n', '        if (finalized) {\n', '            return;\n', '        }\n', '        require(isOwnerOrOps(_sender) || _to == owner);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        tokenTotalSupply = tokenTotalSupply.sub(_value);\n', '        Burnt(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function finalize() external onlyAdmin returns (bool success) {\n', '        require(!finalized);\n', '        finalized = true;\n', '        Finalized();\n', '        return true;\n', '    }\n', '}']