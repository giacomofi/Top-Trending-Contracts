['pragma solidity ^0.4.25;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: eth-token-recover/contracts/TokenRecover.sol\n', '\n', '/**\n', ' * @title TokenRecover\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Allow to recover any ERC20 sent into the contract for error\n', ' */\n', 'contract TokenRecover is Ownable {\n', '\n', '  /**\n', '   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n', '   * @param tokenAddress The token contract address\n', '   * @param tokenAmount Number of tokens to be sent\n', '   */\n', '  function recoverERC20(\n', '    address tokenAddress,\n', '    uint256 tokenAmount\n', '  )\n', '    public\n', '    onlyOwner\n', '  {\n', '    IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '  }\n', '}\n', '\n', '// File: contracts/faucet/TokenFaucet.sol\n', '\n', '/**\n', ' * @title TokenFaucet\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Implementation of a TokenFaucet\n', ' */\n', 'contract TokenFaucet is TokenRecover {\n', '  using SafeMath for uint256;\n', '\n', '  // struct representing the faucet status for an account\n', '  struct RecipientDetail {\n', '    bool exists;\n', '    uint256 tokens;\n', '    uint256 lastUpdate;\n', '    address referral;\n', '  }\n', '\n', '  // struct representing the referral status\n', '  struct ReferralDetail {\n', '    uint256 tokens;\n', '    address[] recipients;\n', '  }\n', '\n', '  // the time between two tokens claim\n', '  uint256 private _pauseTime = 1 days;\n', '\n', '  // the token to distribute\n', '  ERC20 private _token;\n', '\n', '  // the daily rate of tokens distributed\n', '  uint256 private _dailyRate;\n', '\n', '  // the value earned by referral per mille\n', '  uint256 private _referralPerMille;\n', '\n', '  // the sum of distributed tokens\n', '  uint256 private _totalDistributedTokens;\n', '\n', '  // map of address and received token amount\n', '  mapping (address => RecipientDetail) private _recipientList;\n', '\n', '  // list of addresses who received tokens\n', '  address[] private _recipients;\n', '\n', '  // map of address and referred addresses\n', '  mapping (address => ReferralDetail) private _referralList;\n', '\n', '  /**\n', '   * @param token Address of the token being distributed\n', '   * @param dailyRate Daily rate of tokens distributed\n', '   * @param referralPerMille The value earned by referral per mille\n', '   */\n', '  constructor(\n', '    address token,\n', '    uint256 dailyRate,\n', '    uint256 referralPerMille\n', '  )\n', '    public\n', '  {\n', '    require(token != address(0));\n', '    require(dailyRate > 0);\n', '    require(referralPerMille > 0);\n', '\n', '    _token = ERC20(token);\n', '    _dailyRate = dailyRate;\n', '    _referralPerMille = referralPerMille;\n', '  }\n', '\n', '  /**\n', '   * @dev fallback\n', '   */\n', '  function () external payable {\n', '    require(msg.value == 0);\n', '\n', '    getTokens();\n', '  }\n', '\n', '  /**\n', '   * @dev function to be called to receive tokens\n', '   */\n', '  function getTokens() public {\n', '    // distribute tokens\n', '    _distributeTokens(msg.sender, address(0));\n', '  }\n', '\n', '  /**\n', '   * @dev function to be called to receive tokens\n', '   * @param referral Address to an account that is referring\n', '   */\n', '  function getTokensWithReferral(address referral) public {\n', '    require(referral != msg.sender);\n', '\n', '    // distribute tokens\n', '    _distributeTokens(msg.sender, referral);\n', '  }\n', '\n', '  /**\n', '   * @return the token to distribute\n', '   */\n', '  function token() public view returns (ERC20) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @return the daily rate of tokens distributed\n', '   */\n', '  function dailyRate() public view returns (uint256) {\n', '    return _dailyRate;\n', '  }\n', '\n', '  /**\n', '   * @return the value earned by referral for each recipient\n', '   */\n', '  function referralTokens() public view returns (uint256) {\n', '    return _dailyRate.mul(_referralPerMille).div(1000);\n', '  }\n', '\n', '  /**\n', '   * @return the sum of distributed tokens\n', '   */\n', '  function totalDistributedTokens() public view returns (uint256) {\n', '    return _totalDistributedTokens;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return received token amount for the given address\n', '   */\n', '  function receivedTokens(address account) public view returns (uint256) {\n', '    return _recipientList[account].tokens;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return last tokens received timestamp\n', '   */\n', '  function lastUpdate(address account) public view returns (uint256) {\n', '    return _recipientList[account].lastUpdate;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return time of next available claim or zero\n', '   */\n', '  function nextClaimTime(address account) public view returns (uint256) {\n', '    return !_recipientList[account].exists ? 0 : _recipientList[account].lastUpdate + _pauseTime;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return referral for given address\n', '   */\n', '  function getReferral(address account) public view returns (address) {\n', '    return _recipientList[account].referral;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return earned tokens by referrals\n', '   */\n', '  function earnedByReferral(address account) public view returns (uint256) {\n', '    return _referralList[account].tokens;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return referred addresses for given address\n', '   */\n', '  function getReferredAddresses(address account) public view returns (address[]) {\n', '    return _referralList[account].recipients;\n', '  }\n', '\n', '  /**\n', '   * @param account The address to check\n', '   * @return referred addresses for given address\n', '   */\n', '  function getReferredAddressesLength(address account) public view returns (uint) {\n', '    return _referralList[account].recipients.length;\n', '  }\n', '\n', '  /**\n', '   * @dev return the number of remaining tokens to distribute\n', '   * @return uint256\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return _token.balanceOf(this);\n', '  }\n', '\n', '  /**\n', '   * @return address of a recipient by list index\n', '   */\n', '  function getRecipientAddress(uint256 index) public view returns (address) {\n', '    return _recipients[index];\n', '  }\n', '\n', '  /**\n', '   * @dev return the recipients length\n', '   * @return uint\n', '   */\n', '  function getRecipientsLength() public view returns (uint) {\n', '    return _recipients.length;\n', '  }\n', '\n', '  /**\n', '   * @dev change daily rate and referral per mille\n', '   * @param newDailyRate Daily rate of tokens distributed\n', '   * @param newReferralPerMille The value earned by referral per mille\n', '   */\n', '  function setRates(uint256 newDailyRate, uint256 newReferralPerMille) public onlyOwner {\n', '    require(newDailyRate > 0);\n', '    require(newReferralPerMille > 0);\n', '\n', '    _dailyRate = newDailyRate;\n', '    _referralPerMille = newReferralPerMille;\n', '  }\n', '\n', '  /**\n', '   * @dev distribute tokens\n', '   * @param account Address being distributing\n', '   * @param referral Address to an account that is referring\n', '   */\n', '  function _distributeTokens(address account, address referral) internal {\n', '    require(nextClaimTime(account) <= block.timestamp); // solium-disable-line security/no-block-members\n', '\n', '    // check if recipient exists\n', '    if (!_recipientList[account].exists) {\n', '      _recipients.push(account);\n', '      _recipientList[account].exists = true;\n', '\n', '      // check if valid referral\n', '      if (referral != address(0)) {\n', '        _recipientList[account].referral = referral;\n', '        _referralList[referral].recipients.push(account);\n', '      }\n', '    }\n', '\n', '    // update recipient status\n', '    _recipientList[account].lastUpdate = block.timestamp; // solium-disable-line security/no-block-members\n', '    _recipientList[account].tokens = _recipientList[account].tokens.add(_dailyRate);\n', '\n', '    // update faucet status\n', '    _totalDistributedTokens = _totalDistributedTokens.add(_dailyRate);\n', '\n', '    // transfer tokens to recipient\n', '    _token.transfer(account, _dailyRate);\n', '\n', '    // check referral\n', '    if (_recipientList[account].referral != address(0)) {\n', '      // referral is only the first one referring\n', '      address firstReferral = _recipientList[account].referral;\n', '\n', '      uint256 referralEarnedTokens = referralTokens();\n', '\n', '      // update referral status\n', '      _referralList[firstReferral].tokens = _referralList[firstReferral].tokens.add(referralEarnedTokens);\n', '\n', '      // update faucet status\n', '      _totalDistributedTokens = _totalDistributedTokens.add(referralEarnedTokens);\n', '\n', '      // transfer tokens to referral\n', '      _token.transfer(firstReferral, referralEarnedTokens);\n', '    }\n', '  }\n', '}']