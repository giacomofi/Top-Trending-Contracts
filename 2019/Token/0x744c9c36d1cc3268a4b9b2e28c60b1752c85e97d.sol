['pragma solidity ^0.5.1;\n', '\n', '// @title Alluva (ALV) Token Contract\n', '// @owner Alluva\n', '\n', '// @notice Safe Maths Contract to stop over/underflow errors\n', 'contract SafeMath {\n', '    // @dev safe addition, reverts if integer overflow\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    // @dev safe subtraction, reverts if integer underflow\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    // @dev safe multiplication, reverts if integer overflow\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    // @dev safe division, revert on division by zero\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// @title ERC Token Standard #20 Interface\n', '// @notice https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// @dev ERC20 contract framework with default function definitions\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// @title Contract ownership functionality\n', '// @notice based on OpenZeppelin Ownable.sol\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    // @dev sets msg.sender to contract owner on initial deployment\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // @dev modifier to check ownership before function execution\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // @notice transfer ownership from one address to another\n', '    // @param _newOwner The address of the new owner\n', '    // @dev can only be executed by contract owner\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    // @notice function for new owner to accept contract ownership\n', '    // @dev reverts if called before transferOwnership\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', '// @title Alluva ERC20 Token\n', '// @notice Inherits default interface, ownership and safe maths.\n', 'contract AlluvaToken is ERC20Interface, Owned, SafeMath {\n', '    address public owner = msg.sender;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // @dev Constructor function\n', '    constructor() public {\n', '        symbol = "ALV";\n', '        name = "Alluva";\n', '        decimals = 18;\n', '        totalSupply = 3000000000000000000000000000;\n', '        balances[owner] = totalSupply;\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    // @dev Returns the token balance for provided address\n', '    // @param _owner The address of token owner\n', '    // @return Balance of requested address\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // @dev Transfer tokens from sender to another address\n', '    // @param _to Address of recipient\n', '    // @param _value Number of tokens to transfer (in smallest divisible unit)\n', '    // @return True if transaction was successful\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Transfer _value tokens from address _from to address _to. Caller\n', '    // needs to be approved by _from, using approve method, prior to calling\n', '    // @param _from Address to transfer tokens from\n', '    // @param _to Address to transfer tokens to\n', '    // @param _value Number of tokens to transfer (in smallest divisible unit)\n', '    // @return True if transaction was successful\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Approves _spender to transfer _value tokens from message sender address\n', '    // @notice Frontend/Client should set allowance to 0 prior to updating to\n', '    // prevent approve/transferFrom attack vector as described here:\n', '    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    // @param _spender Address to allocate spending limit to\n', '    // @param _value Number of tokens to allow spender (in smallest divisible unit)\n', '    // @return True if transaction was successful\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Returns the number of tokens that can be transferred from _owner to\n', '    // _spender, set by approve method\n', '    // @param _owner Address of token owner\n', '    // @param _spender Address of approved spender\n', '    // @return Remaining approved spending\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // @dev Increase the amount of tokens that _spender can transfer from owner\n', '    // approve should be called when allowed[_spender] == 0. To increment\n', '    // allowed value use this function to avoid 2 calls (and wait until the\n', '    // first transaction is mined)\n', '    // From OpenZeppelin ERC20.sol\n', '    // Emits an Approval event\n', '    // @param _spender The address that is allowed to spend funds\n', '    // @param _addedValue The value to add to allowance\n', '    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '\n', '        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    // @dev Decrease the amount of tokens that _spender can transfer from owner\n', '    // approve should be called when allowed[_spender] == 0. To decrease\n', '    // allowed value use this function to avoid 2 calls (and wait until the\n', '    // first transaction is mined)\n', '    // From OpenZeppelin ERC20.sol\n', '    // Emits an Approval event\n', '    // @param _spender The address that is allowed to spend funds\n', '    // @param _subtractedValue The value to subtract from allowance\n', '    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        require(_spender != address(0));\n', '\n', '        allowed[msg.sender][_spender] = safeSub(allowed[msg.sender][_spender], _subtractedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    // @dev Fallback function to reject ether sent to contract\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '    // @dev Allow contract owner to transfer other tokens sent to contract\n', '    // @param _tokenAddress contract address of token to transfer\n', '    // @param _tokens number of tokens to transfer\n', '    // @return True if transaction was successful\n', '    function transferAnyERC20Token(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(_tokenAddress).transfer(owner, _tokens);\n', '    }\n', '\n', '}']