['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function setCrowdsale(address tokenWallet, uint256 amount) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract cDeployer {\n', '\tfunction deployCrowdsale(address _tWallet, address _token, address _eWallet, uint _maxETH, address reqBy) public returns (address);\n', '}\n', '\n', 'contract tDeployer {\n', '\tfunction deployToken(string _tName, string _tSymbol, uint _mint, address _owner) public returns (address);\n', '}\n', '\n', 'contract customTkn {\n', '    function multiTransfer(address[] _to, uint256[] _values) public;\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract contractDeployer is Ownable {\n', '\t\n', '\tevent ContractCreated(address newAddress);\n', '\t\n', '    address public tokenAddr;\n', '\tuint public tokenFee;\n', '\tuint public crowdsaleFee;\n', '\tuint public multisendFee;\n', '\n', '\tERC20 token;\n', '\tcDeployer cdep;\n', '\ttDeployer tdep;\n', '\n', '\tfunction setUp(address _token, address _cdep, address _tdep) public onlyOwner {\n', '\t\ttokenAddr = _token;\n', '\t\ttoken = ERC20(tokenAddr);\n', '\t\tcdep = cDeployer(_cdep);\n', '\t\ttdep = tDeployer(_tdep);\n', '\t}\n', '\tfunction changeTokenFee(uint _amount) public onlyOwner {\n', '\t\ttokenFee = _amount;\n', '\t}\n', '\tfunction changeCrowdsaleFee(uint _amount) public onlyOwner {\n', '\t\tcrowdsaleFee = _amount;\n', '\t}\n', '\tfunction changeMultisendFee(uint _amount) public onlyOwner {\n', '\t\tmultisendFee = _amount;\n', '\t}\n', '\n', '\tfunction deployToken(string _tName, string _tSymbol, uint _mint, address _owner) public returns (address) {\n', '\t\trequire(token.transferFrom(msg.sender, owner, tokenFee));\n', '\t\temit ContractCreated(tdep.deployToken(_tName, _tSymbol, _mint, _owner));\n', '\t}\n', '\t\n', '\tfunction deployCrowdsale(address _tWallet, address _token, address _eWallet, uint _maxETH) public returns (address) {\n', '\t\trequire(token.transferFrom(msg.sender, owner, crowdsaleFee));\n', '\t\temit ContractCreated(cdep.deployCrowdsale(_eWallet, _token, _tWallet, _maxETH, msg.sender));\n', '\t}\n', '\n', '\n', '\tfunction multiSender(address _token, uint _total, address[] _to, uint[] _amount) public {\n', '\t\trequire(token.transferFrom(msg.sender, owner, multisendFee));\n', '\t\tcustomTkn er2 = customTkn(_token);\n', '\t\trequire(er2.transferFrom(msg.sender, this, _total));\n', '\t\ter2.multiTransfer(_to, _amount);\n', '\t}\n', '\n', '}']