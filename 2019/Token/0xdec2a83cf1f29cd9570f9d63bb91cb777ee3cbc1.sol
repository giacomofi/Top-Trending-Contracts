['pragma solidity ^0.5.2;\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '/*\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '\n', 'contract ERC20 {\n', '    //function totalSupply() public view returns (uint supply) {}\n', '    function balanceOf(address _owner) public view returns (uint balance) {}\n', '    function transfer(address _to, uint _value) public returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {}\n', '    function approve(address _spender, uint _value) public returns (bool success) {}\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', 'contract ERC223ReceivingContract { \n', '    function tokenFallback (address _from, uint _value, bytes memory _data) public;\n', '}\n', '\n', '\n', 'contract UmbrellaToken is ERC20 {\n', '    using SafeMath for uint;\n', '    uint8 constant public decimals = 18;\n', '    uint public totalSupply = 10**27; // 1 billion tokens, 18 decimal places\n', '    string constant public name = "UmbrellaToken";\n', '    string constant public symbol = "RAIN";\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint amount) public returns (bool success) {\n', '        balances[from] = balances[from].sub(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    \n', '    function () external payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '\n', '\n', '//-------------------------==\n', 'library SafeMath {\n', '    function mul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) pure internal returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}']