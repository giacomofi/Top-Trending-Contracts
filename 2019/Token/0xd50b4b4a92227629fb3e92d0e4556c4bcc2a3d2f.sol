['pragma solidity 0.5.6; /*\n', '\n', '___________________________________________________________________\n', '  _      _                                        ______           \n', '  |  |  /          /                                /              \n', '--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n', "  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n", '__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n', '\n', '\n', '██████╗ ██╗     ██╗██╗  ██╗███████╗    ████████╗ ██████╗ ██╗  ██╗███████╗███╗   ██╗\n', '██╔══██╗██║     ██║██║ ██╔╝██╔════╝    ╚══██╔══╝██╔═══██╗██║ ██╔╝██╔════╝████╗  ██║\n', '██║  ██║██║     ██║█████╔╝ █████╗         ██║   ██║   ██║█████╔╝ █████╗  ██╔██╗ ██║\n', '██║  ██║██║     ██║██╔═██╗ ██╔══╝         ██║   ██║   ██║██╔═██╗ ██╔══╝  ██║╚██╗██║\n', '██████╔╝███████╗██║██║  ██╗███████╗       ██║   ╚██████╔╝██║  ██╗███████╗██║ ╚████║\n', '╚═════╝ ╚══════╝╚═╝╚═╝  ╚═╝╚══════╝       ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝\n', '                                                                                   \n', '                                                                                   \n', '// ----------------------------------------------------------------------------\n', "// 'DlikeToken' contract with following features\n", '//      => ERC20 Compliance\n', '//      => Higher degree of control by owner - safeguard functionality\n', '//      => SafeMath implementation \n', '//      => Burnable and minting \n', '//      => in-built buy/sell functions (owner can control buying/selling process)\n', '//\n', '// Name        : DlikeToken\n', '// Symbol      : DLIKE\n', '// Total supply: 800,000,000 (800 Million)\n', '// Decimals    : 18\n', '//\n', '// Copyright 2019 onwards - Dlike ( https://dlike.io )\n', '// Contract designed and audited by EtherAuthority ( https://EtherAuthority.io )\n', '// Special thanks to openzeppelin for inspiration:  ( https://github.com/OpenZeppelin )\n', '// ----------------------------------------------------------------------------\n', '*/ \n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', 'contract owned {\n', '    address payable internal owner;\n', '    \n', '     constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '    \n', '\n', '    \n', '//****************************************************************************//\n', '//---------------------        MAIN CODE STARTS HERE     ---------------------//\n', '//****************************************************************************//\n', '    \n', 'contract DlikeToken is owned {\n', '    \n', '\n', '    /*===============================\n', '    =         DATA STORAGE          =\n', '    ===============================*/\n', '\n', '    // Public variables of the token\n', '    using SafeMath for uint256;\n', '    string constant public name = "DlikeToken";\n', '    string constant public symbol = "DLIKE";\n', '    uint256 constant public decimals = 18;\n', '    uint256 public totalSupply = 800000000 * (10**decimals);   //800 million tokens\n', '    uint256 public maximumMinting;\n', '    bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '    // This creates a mapping with all data storage\n', '    mapping (address => uint256) internal _balanceOf;\n', '    mapping (address => mapping (address => uint256)) internal _allowance;\n', '    mapping (address => bool) internal _frozenAccount;\n', '\n', '\n', '    /*===============================\n', '    =         PUBLIC EVENTS         =\n', '    ===============================*/\n', '\n', '    // This generates a public event of token transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This will log approval of token Transfer\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '        \n', '    // This generates a public event for frozen (blacklisting) accounts\n', '    event FrozenFunds(address indexed target, bool indexed frozen);\n', '\n', '\n', '\n', '    /*======================================\n', '    =       STANDARD ERC20 FUNCTIONS       =\n', '    ======================================*/\n', '    \n', '    /**\n', '     * Check token balance of any user\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balanceOf[owner];\n', '    }\n', '    \n', '    /**\n', '     * Check allowance of any spender versus owner\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowance[owner][spender];\n', '    }\n', '    \n', '    /**\n', '     * Check if particular user address is frozen or not\n', '     */\n', '    function frozenAccount(address owner) public view returns (bool) {\n', '        return _frozenAccount[owner];\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        //checking conditions\n', '        require(!safeguard);\n', '        require (_to != address(0));                         // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(!_frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!_frozenAccount[_to]);                       // Check if recipient is frozen\n', '        \n', '        // overflow and undeflow checked by SafeMath Library\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);   // Subtract from the sender\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);       // Add the same to the recipient\n', '        \n', '        // emit Transfer event\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '        * Transfer tokens\n', '        *\n', '        * Send `_value` tokens to `_to` from your account\n', '        *\n', '        * @param _to The address of the recipient\n', '        * @param _value the amount to send\n', '        */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //no need to check for input validations, as that is ruled by SafeMath\n', '        _transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Transfer tokens from other address\n', '        *\n', '        * Send `_value` tokens to `_to` in behalf of `_from`\n', '        *\n', '        * @param _from The address of the sender\n', '        * @param _to The address of the recipient\n', '        * @param _value the amount to send\n', '        */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= _allowance[_from][msg.sender]);     // Check _allowance\n', '        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Set _allowance for other address\n', '        *\n', '        * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '        *\n', '        * @param _spender The address authorized to spend\n', '        * @param _value the max amount they can spend\n', '        */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        _allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to increase the _allowance by.\n', '     */\n', '    function increase_allowance(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(value);\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to decrease the _allowance by.\n', '     */\n', '    function decrease_allowance(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].sub(value);\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    /*=====================================\n', '    =       CUSTOM PUBLIC FUNCTIONS       =\n', '    ======================================*/\n', '    \n', '    constructor() public{\n', '        //sending all the tokens to Owner\n', '        _balanceOf[owner] = totalSupply;\n', '        \n', '        //maximum minting set to totalSupply\n', '        maximumMinting = totalSupply;\n', '        \n', '        //firing event which logs this transaction\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '    \n', '    /* No need for empty fallback function as contract without it will automatically rejects incoming ether */\n', '    //function () external payable { revert; }\n', '\n', '    /**\n', '        * Destroy tokens\n', '        *\n', '        * Remove `_value` tokens from the system irreversibly\n', '        *\n', '        * @param _value the amount of money to burn\n', '        */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        //checking of enough token balance is done by SafeMath\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Destroy tokens from other account\n', '        *\n', '        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '        *\n', '        * @param _from the address of the sender\n', '        * @param _value the amount of money to burn\n', '        */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        //checking of _allowance and token value is done by SafeMath\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value); // Subtract from the sender's _allowance\n", '        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\n', '        emit  Burn(_from, _value);\n', '        return true;\n', '    }\n', '        \n', '    \n', '    /** \n', '        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '        * @param target Address to be frozen\n', '        * @param freeze either to freeze it or not\n', '        */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '            _frozenAccount[target] = freeze;\n', '        emit  FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    /** \n', '        * @notice Create `mintedAmount` tokens and send it to `target`\n', '        * @param target Address to receive the tokens\n', '        * @param mintedAmount the amount of tokens it will receive\n', '        */\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        totalSupply = totalSupply.add(mintedAmount);\n', "        //owner can not mint more than max supply of tokens, to prevent 'Evil Mint' issue!!\n", "        require(totalSupply <= maximumMinting, 'Minting reached its maximum minting limit' );\n", '        _balanceOf[target] = _balanceOf[target].add(mintedAmount);\n', '        \n', '        emit Transfer(address(0), target, mintedAmount);\n', '    }\n', '\n', '        \n', '\n', '    /**\n', '        * Owner can transfer tokens from contract to owner address\n', '        *\n', '        * When safeguard is true, then all the non-owner functions will stop working.\n', '        * When safeguard is false, then all the functions will resume working back again!\n', '        */\n', '    \n', '    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\n', '        // no need for overflow checking as that will be done in transfer function\n', '        _transfer(address(this), owner, tokenAmount);\n', '    }\n', '    \n', '    //Just in rare case, owner wants to transfer Ether from contract to owner address\n', '    function manualWithdrawEther()onlyOwner public{\n', '        address(owner).transfer(address(this).balance);\n', '    }\n', '    \n', '    /**\n', '        * Change safeguard status on or off\n', '        *\n', '        * When safeguard is true, then all the non-owner functions will stop working.\n', '        * When safeguard is false, then all the functions will resume working back again!\n', '        */\n', '    function changeSafeguardStatus() onlyOwner public{\n', '        if (safeguard == false){\n', '            safeguard = true;\n', '        }\n', '        else{\n', '            safeguard = false;    \n', '        }\n', '    }\n', '\n', '}']