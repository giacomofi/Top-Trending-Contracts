['pragma solidity ^0.4.24;\n', '\n', 'import &#39;./StandardToken.sol&#39;;\n', '\n', 'contract TokenERC20 is StandardToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    address internal owner;\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(string _name, string _symbol, uint8 _decimals, uint256 _init_supply) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[msg.sender] = totalSupply_ = _init_supply * (10 ** uint(decimals));\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n', '        totalSupply_ = totalSupply_.sub(_value);                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * CENTRAL MINT\n', '     */\n', '    function mintToken(address _to, uint256 _mintedAmount) onlyOwner public {\n', '        balances[_to] = balances[_to].add(_mintedAmount);\n', '        totalSupply_ = totalSupply_.add(_mintedAmount);\n', '        emit Transfer(address(0), owner, _mintedAmount);\n', '        emit Transfer(owner, _to, _mintedAmount);\n', '    }\n', '\n', '    /**\n', '     * FREEZING OF ASSETS\n', '     */\n', '    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '}']