['pragma solidity ^0.4.25;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() internal {\n', '    _addMinter(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    _addMinter(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    _removeMinter(msg.sender);\n', '  }\n', '\n', '  function _addMinter(address account) internal {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param value The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '  {\n', '    _mint(to, value);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract ERC20Capped is ERC20Mintable {\n', '\n', '  uint256 private _cap;\n', '\n', '  constructor(uint256 cap)\n', '    public\n', '  {\n', '    require(cap > 0);\n', '    _cap = cap;\n', '  }\n', '\n', '  /**\n', '   * @return the cap for the token minting.\n', '   */\n', '  function cap() public view returns(uint256) {\n', '    return _cap;\n', '  }\n', '\n', '  function _mint(address account, uint256 value) internal {\n', '    require(totalSupply().add(value) <= _cap);\n', '    super._mint(account, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\n', '\n', '/**\n', ' * @title ERC165Checker\n', ' * @dev Use `using ERC165Checker for address`; to include this library\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'library ERC165Checker {\n', '  // As per the EIP-165 spec, no interface should ever match 0xffffffff\n', '  bytes4 private constant _InterfaceId_Invalid = 0xffffffff;\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', '   *   bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @notice Query if a contract supports ERC165\n', '   * @param account The address of the contract to query for support of ERC165\n', '   * @return true if the contract at account implements ERC165\n', '   */\n', '  function _supportsERC165(address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    // Any contract that implements ERC165 must explicitly indicate support of\n', '    // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n', '    return _supportsERC165Interface(account, _InterfaceId_ERC165) &&\n', '      !_supportsERC165Interface(account, _InterfaceId_Invalid);\n', '  }\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface, also checks support of ERC165\n', '   * @param account The address of the contract to query for support of an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @return true if the contract at account indicates support of the interface with\n', '   * identifier interfaceId, false otherwise\n', '   * @dev Interface identification is specified in ERC-165.\n', '   */\n', '  function _supportsInterface(address account, bytes4 interfaceId)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    // query support of both ERC165 as per the spec and support of _interfaceId\n', '    return _supportsERC165(account) &&\n', '      _supportsERC165Interface(account, interfaceId);\n', '  }\n', '\n', '  /**\n', '   * @notice Query if a contract implements interfaces, also checks support of ERC165\n', '   * @param account The address of the contract to query for support of an interface\n', '   * @param interfaceIds A list of interface identifiers, as specified in ERC-165\n', '   * @return true if the contract at account indicates support all interfaces in the\n', '   * interfaceIds list, false otherwise\n', '   * @dev Interface identification is specified in ERC-165.\n', '   */\n', '  function _supportsAllInterfaces(address account, bytes4[] interfaceIds)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    // query support of ERC165 itself\n', '    if (!_supportsERC165(account)) {\n', '      return false;\n', '    }\n', '\n', '    // query support of each interface in _interfaceIds\n', '    for (uint256 i = 0; i < interfaceIds.length; i++) {\n', '      if (!_supportsERC165Interface(account, interfaceIds[i])) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    // all interfaces supported\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface, does not check ERC165 support\n', '   * @param account The address of the contract to query for support of an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @return true if the contract at account indicates support of the interface with\n', '   * identifier interfaceId, false otherwise\n', '   * @dev Assumes that account contains a contract that supports ERC165, otherwise\n', '   * the behavior of this method is undefined. This precondition can be checked\n', '   * with the `supportsERC165` method in this library.\n', '   * Interface identification is specified in ERC-165.\n', '   */\n', '  function _supportsERC165Interface(address account, bytes4 interfaceId)\n', '    private\n', '    view\n', '    returns (bool)\n', '  {\n', '    // success determines whether the staticcall succeeded and result determines\n', '    // whether the contract at account indicates support of _interfaceId\n', '    (bool success, bool result) = _callERC165SupportsInterface(\n', '      account, interfaceId);\n', '\n', '    return (success && result);\n', '  }\n', '\n', '  /**\n', '   * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n', '   * @param account The address of the contract to query for support of an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @return success true if the STATICCALL succeeded, false otherwise\n', '   * @return result true if the STATICCALL succeeded and the contract at account\n', '   * indicates support of the interface with identifier interfaceId, false otherwise\n', '   */\n', '  function _callERC165SupportsInterface(\n', '    address account,\n', '    bytes4 interfaceId\n', '  )\n', '    private\n', '    view\n', '    returns (bool success, bool result)\n', '  {\n', '    bytes memory encodedParams = abi.encodeWithSelector(\n', '      _InterfaceId_ERC165,\n', '      interfaceId\n', '    );\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      let encodedParams_data := add(0x20, encodedParams)\n', '      let encodedParams_size := mload(encodedParams)\n', '\n', '      let output := mload(0x40)  // Find empty storage location using "free memory pointer"\n', '      mstore(output, 0x0)\n', '\n', '      success := staticcall(\n', '        30000,                 // 30k gas\n', '        account,              // To addr\n', '        encodedParams_data,\n', '        encodedParams_size,\n', '        output,\n', '        0x20                   // Outputs are 32 bytes long\n', '      )\n', '\n', '      result := mload(output)  // Load the result\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', '   *   bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev a mapping of interface id to whether or not it&#39;s supported\n', '   */\n', '  mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    internal\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev internal method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\n', '\n', '/**\n', ' * @title IERC1363 Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for a Payable Token contract as defined in\n', ' *  https://github.com/ethereum/EIPs/issues/1363\n', ' */\n', 'contract IERC1363 is IERC20, ERC165 {\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n', '   * 0x4bbee2df ===\n', '   *   bytes4(keccak256(&#39;transferAndCall(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferAndCall(address,uint256,bytes)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFromAndCall(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFromAndCall(address,address,uint256,bytes)&#39;))\n', '   */\n', '\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n', '   * 0xfb9ec8ce ===\n', '   *   bytes4(keccak256(&#39;approveAndCall(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;approveAndCall(address,uint256,bytes)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @notice Transfer tokens from `msg.sender` to another address\n', '   *  and then call `onTransferReceived` on receiver\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 The amount of tokens to be transferred\n', '   * @return true unless throwing\n', '   */\n', '  function transferAndCall(address to, uint256 value) public returns (bool);\n', '\n', '  /**\n', '   * @notice Transfer tokens from `msg.sender` to another address\n', '   *  and then call `onTransferReceived` on receiver\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 The amount of tokens to be transferred\n', '   * @param data bytes Additional data with no specified format, sent in call to `to`\n', '   * @return true unless throwing\n', '   */\n', '  function transferAndCall(address to, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len\n', '\n', '  /**\n', '   * @notice Transfer tokens from one address to another\n', '   *  and then call `onTransferReceived` on receiver\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 The amount of tokens to be transferred\n', '   * @return true unless throwing\n', '   */\n', '  function transferFromAndCall(address from, address to, uint256 value) public returns (bool); // solium-disable-line max-len\n', '\n', '\n', '  /**\n', '   * @notice Transfer tokens from one address to another\n', '   *  and then call `onTransferReceived` on receiver\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 The amount of tokens to be transferred\n', '   * @param data bytes Additional data with no specified format, sent in call to `to`\n', '   * @return true unless throwing\n', '   */\n', '  function transferFromAndCall(address from, address to, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len, arg-overflow\n', '\n', '  /**\n', '   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '   *  and then call `onApprovalReceived` on spender\n', '   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   *  race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender address The address which will spend the funds\n', '   * @param value uint256 The amount of tokens to be spent\n', '   */\n', '  function approveAndCall(address spender, uint256 value) public returns (bool); // solium-disable-line max-len\n', '\n', '  /**\n', '   * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '   *  and then call `onApprovalReceived` on spender\n', '   *  Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   *  and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   *  race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender address The address which will spend the funds\n', '   * @param value uint256 The amount of tokens to be spent\n', '   * @param data bytes Additional data with no specified format, sent in call to `spender`\n', '   */\n', '  function approveAndCall(address spender, uint256 value, bytes data) public returns (bool); // solium-disable-line max-len\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\n', '\n', '/**\n', ' * @title IERC1363Receiver Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n', ' *  from ERC1363 token contracts as defined in\n', ' *  https://github.com/ethereum/EIPs/issues/1363\n', ' */\n', 'contract IERC1363Receiver {\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n', '   * 0x88a7ca5c === bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))\n', '   */\n', '\n', '  /**\n', '   * @notice Handle the receipt of ERC1363 tokens\n', '   * @dev Any ERC1363 smart contract calls this function on the recipient\n', '   *  after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n', '   *  transfer. Return of other than the magic value MUST result in the\n', '   *  transaction being reverted.\n', '   *  Note: the token contract address is always the message sender.\n', '   * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n', '   * @param from address The address which are token transferred from\n', '   * @param value uint256 The amount of tokens transferred\n', '   * @param data bytes Additional data with no specified format\n', '   * @return `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`\n', '   *  unless throwing\n', '   */\n', '  function onTransferReceived(address operator, address from, uint256 value, bytes data) external returns (bytes4); // solium-disable-line max-len, arg-overflow\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\n', '\n', '/**\n', ' * @title IERC1363Spender Interface\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Interface for any contract that wants to support approveAndCall\n', ' *  from ERC1363 token contracts as defined in\n', ' *  https://github.com/ethereum/EIPs/issues/1363\n', ' */\n', 'contract IERC1363Spender {\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n', '   * 0x7b04a2d0 === bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))\n', '   */\n', '\n', '  /**\n', '   * @notice Handle the approval of ERC1363 tokens\n', '   * @dev Any ERC1363 smart contract calls this function on the recipient\n', '   *  after an `approve`. This function MAY throw to revert and reject the\n', '   *  approval. Return of other than the magic value MUST result in the\n', '   *  transaction being reverted.\n', '   *  Note: the token contract address is always the message sender.\n', '   * @param owner address The address which called `approveAndCall` function\n', '   * @param value uint256 The amount of tokens to be spent\n', '   * @param data bytes Additional data with no specified format\n', '   * @return `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`\n', '   *  unless throwing\n', '   */\n', '  function onApprovalReceived(address owner, uint256 value, bytes data) external returns (bytes4); // solium-disable-line max-len\n', '}\n', '\n', '// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n', '\n', '/**\n', ' * @title ERC1363\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Implementation of an ERC1363 interface\n', ' */\n', 'contract ERC1363 is ERC20, IERC1363 { // solium-disable-line max-len\n', '  using Address for address;\n', '\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n', '   * 0x4bbee2df ===\n', '   *   bytes4(keccak256(&#39;transferAndCall(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferAndCall(address,uint256,bytes)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFromAndCall(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFromAndCall(address,address,uint256,bytes)&#39;))\n', '   */\n', '  bytes4 internal constant _InterfaceId_ERC1363Transfer = 0x4bbee2df;\n', '\n', '  /*\n', '   * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n', '   * 0xfb9ec8ce ===\n', '   *   bytes4(keccak256(&#39;approveAndCall(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;approveAndCall(address,uint256,bytes)&#39;))\n', '   */\n', '  bytes4 internal constant _InterfaceId_ERC1363Approve = 0xfb9ec8ce;\n', '\n', '  // Equals to `bytes4(keccak256("onTransferReceived(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\n', '  bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\n', '\n', '  // Equals to `bytes4(keccak256("onApprovalReceived(address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\n', '  bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\n', '\n', '  constructor() public {\n', '    // register the supported interfaces to conform to ERC1363 via ERC165\n', '    _registerInterface(_InterfaceId_ERC1363Transfer);\n', '    _registerInterface(_InterfaceId_ERC1363Approve);\n', '  }\n', '\n', '  function transferAndCall(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    return transferAndCall(to, value, "");\n', '  }\n', '\n', '  function transferAndCall(\n', '    address to,\n', '    uint256 value,\n', '    bytes data\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(transfer(to, value));\n', '    require(\n', '      _checkAndCallTransfer(\n', '        msg.sender,\n', '        to,\n', '        value,\n', '        data\n', '      )\n', '    );\n', '    return true;\n', '  }\n', '\n', '  function transferFromAndCall(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    return transferFromAndCall(from, to, value, "");\n', '  }\n', '\n', '  function transferFromAndCall(\n', '    address from,\n', '    address to,\n', '    uint256 value,\n', '    bytes data\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(transferFrom(from, to, value));\n', '    require(\n', '      _checkAndCallTransfer(\n', '        from,\n', '        to,\n', '        value,\n', '        data\n', '      )\n', '    );\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    return approveAndCall(spender, value, "");\n', '  }\n', '\n', '  function approveAndCall(\n', '    address spender,\n', '    uint256 value,\n', '    bytes data\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    approve(spender, value);\n', '    require(\n', '      _checkAndCallApprove(\n', '        spender,\n', '        value,\n', '        data\n', '      )\n', '    );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onTransferReceived` on a target address\n', '   *  The call is not executed if the target address is not a contract\n', '   * @param from address Representing the previous owner of the given token value\n', '   * @param to address Target address that will receive the tokens\n', '   * @param value uint256 The amount mount of tokens to be transferred\n', '   * @param data bytes Optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 value,\n', '    bytes data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return false;\n', '    }\n', '    bytes4 retval = IERC1363Receiver(to).onTransferReceived(\n', '      msg.sender, from, value, data\n', '    );\n', '    return (retval == _ERC1363_RECEIVED);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onApprovalReceived` on a target address\n', '   *  The call is not executed if the target address is not a contract\n', '   * @param spender address The address which will spend the funds\n', '   * @param value uint256 The amount of tokens to be spent\n', '   * @param data bytes Optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallApprove(\n', '    address spender,\n', '    uint256 value,\n', '    bytes data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!spender.isContract()) {\n', '      return false;\n', '    }\n', '    bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\n', '      msg.sender, value, data\n', '    );\n', '    return (retval == _ERC1363_APPROVED);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: eth-token-recover/contracts/TokenRecover.sol\n', '\n', '/**\n', ' * @title TokenRecover\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Allow to recover any ERC20 sent into the contract for error\n', ' */\n', 'contract TokenRecover is Ownable {\n', '\n', '  /**\n', '   * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n', '   * @param tokenAddress The token contract address\n', '   * @param tokenAmount Number of tokens to be sent\n', '   */\n', '  function recoverERC20(\n', '    address tokenAddress,\n', '    uint256 tokenAmount\n', '  )\n', '    public\n', '    onlyOwner\n', '  {\n', '    IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '  }\n', '}\n', '\n', '// File: contracts/access/roles/OperatorRole.sol\n', '\n', 'contract OperatorRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event OperatorAdded(address indexed account);\n', '  event OperatorRemoved(address indexed account);\n', '\n', '  Roles.Role private _operators;\n', '\n', '  constructor() internal {\n', '    _addOperator(msg.sender);\n', '  }\n', '\n', '  modifier onlyOperator() {\n', '    require(isOperator(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isOperator(address account) public view returns (bool) {\n', '    return _operators.has(account);\n', '  }\n', '\n', '  function addOperator(address account) public onlyOperator {\n', '    _addOperator(account);\n', '  }\n', '\n', '  function renounceOperator() public {\n', '    _removeOperator(msg.sender);\n', '  }\n', '\n', '  function _addOperator(address account) internal {\n', '    _operators.add(account);\n', '    emit OperatorAdded(account);\n', '  }\n', '\n', '  function _removeOperator(address account) internal {\n', '    _operators.remove(account);\n', '    emit OperatorRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/token/BaseToken.sol\n', '\n', '/**\n', ' * @title BaseToken\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Implementation of the BaseToken\n', ' */\n', 'contract BaseToken is ERC20Detailed, ERC20Capped, ERC20Burnable, ERC1363, OperatorRole, TokenRecover {\n', '\n', '  event MintFinished();\n', '\n', '  // indicates if minting is finished\n', '  bool public _mintingFinished = false;\n', '\n', '  /**\n', '   * @dev Tokens can be minted only before minting finished\n', '   */\n', '  modifier canMint() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Tokens can be moved only after minting finished or if you are an approved operator\n', '   */\n', '  modifier canTransfer(address from) {\n', '    require(_mintingFinished || isOperator(from));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @param name Name of the token\n', '   * @param symbol A symbol to be used as ticker\n', '   * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\n', '   * @param cap Maximum number of tokens mintable\n', '   */\n', '  constructor(\n', '    string name,\n', '    string symbol,\n', '    uint8 decimals,\n', '    uint256 cap\n', '  )\n', '    ERC20Detailed(name, symbol, decimals)\n', '    ERC20Capped(cap)\n', '    public\n', '  {}\n', '\n', '  /**\n', '   * @return if minting is finished or not\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  function mint(address to, uint256 value) public canMint returns (bool) {\n', '    return super.mint(to, value);\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public canTransfer(msg.sender) returns (bool) {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public canTransfer(from) returns (bool) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   */\n', '  function finishMinting() public onlyOwner canMint {\n', '    _mintingFinished = true;\n', '    emit MintFinished();\n', '  }\n', '\n', '  /**\n', '   * @dev remove the `operator` role from address\n', '   * @param account Address you want to remove role\n', '   */\n', '  function removeOperator(address account) public onlyOwner {\n', '    _removeOperator(account);\n', '  }\n', '\n', '  /**\n', '   * @dev remove the `minter` role from address\n', '   * @param account Address you want to remove role\n', '   */\n', '  function removeMinter(address account) public onlyOwner {\n', '    _removeMinter(account);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ShakaToken.sol\n', '\n', '/**\n', ' * @title ShakaToken\n', ' * @author Vittorio Minacori (https://github.com/vittominacori)\n', ' * @dev Implementation of the Shaka Token\n', ' */\n', 'contract ShakaToken is BaseToken {\n', '\n', '  /**\n', '   * @param name Name of the token\n', '   * @param symbol A symbol to be used as ticker\n', '   * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\n', '   * @param cap Maximum number of tokens mintable\n', '   */\n', '  constructor(\n', '    string name,\n', '    string symbol,\n', '    uint8 decimals,\n', '    uint256 cap\n', '  )\n', '    BaseToken(name, symbol, decimals, cap)\n', '    public\n', '  {}\n', '}']