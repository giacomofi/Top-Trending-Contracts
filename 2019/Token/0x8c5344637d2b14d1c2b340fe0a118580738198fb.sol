['pragma solidity ^0.4.25;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '/**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}\n', '    uint256 c = a * b;require(c / a == b);return c;}\n', '/**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {require(b > 0); uint256 c = a / b;\n', '    // assert(a == b * c + a % b); \n', 'return c;}\n', '/**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {require(b <= a);uint256 c = a - b;return c;}\n', '/**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b;require(c >= a);\n', '  return c;}\n', '/**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {require(b != 0);return a % b;}}\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    modifier onlyOwner {require(msg.sender == owner);_;}\n', '    function transferOwnership(address _newOwner) public onlyOwner {newOwner = _newOwner;}\n', '    function acceptOwnership() public {require(msg.sender == newOwner);owner = newOwner;}}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', 'function totalSupply() external view returns (uint256);\n', 'function balanceOf(address who) external view returns (uint256);\n', 'function allowance(address owner, address spender)\n', 'external view returns (uint256);\n', 'function transfer(address to, uint256 value) external returns (bool);\n', 'function approve(address spender, uint256 value)\n', 'external returns (bool);\n', 'function transferFrom(address from, address to, uint256 value)\n', 'external returns (bool);\n', 'event Transfer(address indexed from,address indexed to,uint256 value);\n', 'event Approval(address indexed owner,address indexed spender,uint256 value);}\n', 'contract Seeflast is IERC20, Owned {\n', '    using SafeMath for uint256;\n', '    constructor() public {\n', '        owner = 0x947e40854A000a43Dad75E63caDA3E318f13277d;\n', '        contractAddress = this;\n', '        _balances[0x74dF2809598C8AfCf655d305e5D10C8Ab824F0Eb] = 260000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x74dF2809598C8AfCf655d305e5D10C8Ab824F0Eb, 260000000 * 10 ** decimals);\n', '        _balances[0x8ec5BD55f5CC10743E598194A769712043cCDD38] = 400000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x8ec5BD55f5CC10743E598194A769712043cCDD38, 400000000 * 10 ** decimals);\n', '        _balances[0x9d357507556a9FeD2115aAb6CFc6527968B1F9c9] = 50000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x9d357507556a9FeD2115aAb6CFc6527968B1F9c9, 50000000 * 10 ** decimals);\n', '        _balances[0x369760682f292584921f45F498cC525127Aa12a5] = 50000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x369760682f292584921f45F498cC525127Aa12a5, 50000000 * 10 ** decimals);\n', '        _balances[0x98046c6bee217B9A0d13507a47423F891E8Ef22A] = 50000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x98046c6bee217B9A0d13507a47423F891E8Ef22A, 50000000 * 10 ** decimals);\n', '        _balances[0xf0b8dBcaF8A89A49Fa2adf25b4CCC9234258A8E6] = 50000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0xf0b8dBcaF8A89A49Fa2adf25b4CCC9234258A8E6, 50000000 * 10 ** decimals);\n', '       _balances[0x8877e7974d6D708c403cB9C9A65873a3e57382E4] = 60000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x8877e7974d6D708c403cB9C9A65873a3e57382E4, 60000000 * 10 ** decimals);\n', '       _balances[0x0452453D9e32B80F024bf9D6Bb35A76A785ba6a2] = 20000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x0452453D9e32B80F024bf9D6Bb35A76A785ba6a2, 20000000 * 10 ** decimals);\n', '       _balances[0x1DBe051fDE7fBEE760A6ED7dfFc0fEC6c469dB77] = 1020000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, 0x1DBe051fDE7fBEE760A6ED7dfFc0fEC6c469dB77, 1020000000 * 10 ** decimals); \n', '       _balances[contractAddress] = 40000000 * 10 ** decimals;\n', '        emit Transfer(contractAddress, contractAddress, 40000000 * 10 ** decimals);}\n', '\n', '    event Error(string err);\n', '    event Mint(uint mintAmount, uint newSupply);\n', '    string public constant name = "Seeflast"; \n', '    string public constant symbol = "SFT"; \n', '    uint256 public constant decimals = 8;\n', '    uint256 public constant supply = 2000000000 * 10 ** decimals;\n', '    address public contractAddress;\n', '    mapping (address => bool) public claimed;\n', '    mapping(address => uint256) _balances;\n', ' mapping(address => mapping (address => uint256)) public _allowed;\n', ' function totalSupply() public constant returns (uint) {\n', '        return supply;}\n', ' function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return _balances[tokenOwner];}\n', ' function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];}\n', ' function transfer(address to, uint value) public returns (bool success) {\n', '        require(_balances[msg.sender] >= value);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;}\n', '  function approve(address spender, uint value) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;}\n', '  function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '        require(value <= balanceOf(from));\n', '        require(value <= allowance(from, to));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][to] = _allowed[from][to].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;}\n', '    function () public payable {\n', '        if (msg.value == 0 && claimed[msg.sender] == false) {\n', '            require(_balances[contractAddress] >= 500 * 10 ** decimals);\n', '            _balances[contractAddress] -= 500 * 10 ** decimals;\n', '            _balances[msg.sender] += 500 * 10 ** decimals;\n', '            claimed[msg.sender] = true;\n', '            emit Transfer(contractAddress, msg.sender, 500 * 10 ** decimals);} \n', '        else if (msg.value == 0.01 ether) {\n', '            require(_balances[contractAddress] >= 400 * 10 ** decimals);\n', '            _balances[contractAddress] -= 400 * 10 ** decimals;\n', '            _balances[msg.sender] += 400 * 10 ** decimals;\n', '            emit Transfer(contractAddress, msg.sender, 400 * 10 ** decimals);} \n', '        else if (msg.value == 0.1 ether) {\n', '            require(_balances[contractAddress] >= 4200 * 10 ** decimals);\n', '            _balances[contractAddress] -= 4200 * 10 ** decimals;\n', '            _balances[msg.sender] += 4200 * 10 ** decimals;\n', '            emit Transfer(contractAddress, msg.sender, 4200 * 10 ** decimals);} \n', '        else if (msg.value == 1 ether) {\n', '            require(_balances[contractAddress] >= 45000 * 10 ** decimals);\n', '            _balances[contractAddress] -= 45000 * 10 ** decimals;\n', '            _balances[msg.sender] += 45000 * 10 ** decimals;\n', '            emit Transfer(contractAddress, msg.sender, 45000 * 10 ** decimals);} \n', '        else {revert();}}\n', '    function collectETH() public onlyOwner {owner.transfer(contractAddress.balance);}\n', '    \n', '}']