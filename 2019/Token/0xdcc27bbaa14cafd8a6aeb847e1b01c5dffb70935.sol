['pragma solidity ^0.5.1;\n', '\n', '// Made By Tom Jung\n', '\n', 'library SafeMath\n', '{\n', '  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '    \t{\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\n', '\t\treturn c;\n', '  \t}\n', '\n', '  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a / b;\n', '\n', '\t\treturn c;\n', '  \t}\n', '\n', '  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tassert(b <= a);\n', '\n', '\t\treturn a - b;\n', '  \t}\n', '\n', '  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\n', '\t\treturn c;\n', '  \t}\n', '}\n', '\n', 'contract OwnerHelper\n', '{\n', '  \taddress public master;\n', '  \taddress public issuer;\n', '  \taddress public manager;\n', '\n', '  \tevent ChangeMaster(address indexed _from, address indexed _to);\n', '  \tevent ChangeIssuer(address indexed _from, address indexed _to);\n', '  \tevent ChangeManager(address indexed _from, address indexed _to);\n', '\n', '  \tmodifier onlyMaster\n', '\t{\n', '\t\trequire(msg.sender == master);\n', '\t\t_;\n', '  \t}\n', '  \t\n', '  \tmodifier onlyIssuer\n', '\t{\n', '\t\trequire(msg.sender == issuer);\n', '\t\t_;\n', '  \t}\n', '  \t\n', '  \tmodifier onlyManager\n', '\t{\n', '\t\trequire(msg.sender == manager);\n', '\t\t_;\n', '  \t}\n', '\n', '  \tconstructor() public\n', '\t{\n', '\t\tmaster = msg.sender;\n', '  \t}\n', '  \t\n', '  \tfunction transferMastership(address _to) onlyMaster public\n', '  \t{\n', '        \trequire(_to != master);\n', '        \trequire(_to != issuer);\n', '        \trequire(_to != manager);\n', '        \trequire(_to != address(0x0));\n', '\n', '\t\taddress from = master;\n', '  \t    \tmaster = _to;\n', '  \t    \n', '  \t    \temit ChangeMaster(from, _to);\n', '  \t}\n', '\n', '  \tfunction transferIssuer(address _to) onlyMaster public\n', '\t{\n', '\t        require(_to != master);\n', '        \trequire(_to != issuer);\n', '        \trequire(_to != manager);\n', '\t        require(_to != address(0x0));\n', '\n', '\t\taddress from = issuer;        \n', '\t    \tissuer = _to;\n', '        \n', '    \t\temit ChangeIssuer(from, _to);\n', '  \t}\n', '\n', '  \tfunction transferManager(address _to) onlyMaster public\n', '\t{\n', '\t        require(_to != master);\n', '\t        require(_to != issuer);\n', '        \trequire(_to != manager);\n', '\t        require(_to != address(0x0));\n', '        \t\n', '\t\taddress from = manager;\n', '    \t\tmanager = _to;\n', '        \n', '\t    \temit ChangeManager(from, _to);\n', '  \t}\n', '}\n', '\n', 'contract ERC20Interface\n', '{\n', '    event Transfer( address indexed _from, address indexed _to, uint _value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint _value);\n', '    \n', '    function totalSupply() view public returns (uint _supply);\n', '    function balanceOf( address _who ) public view returns (uint _value);\n', '    function transfer( address _to, uint _value) public returns (bool _success);\n', '    function approve( address _spender, uint _value ) public returns (bool _success);\n', '    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\n', '    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\n', '}\n', '\n', 'contract VantaToken is ERC20Interface, OwnerHelper\n', '{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    uint public decimals;\n', '    string public symbol;\n', '    \n', '    uint constant private E18 = 1000000000000000000;\n', '    uint constant private month = 2592000;\n', '    \n', '    uint constant public maxTotalSupply     = 56200000000 * E18;\n', '    \n', '    uint constant public maxSaleSupply      = 19670000000 * E18;\n', '    uint constant public maxBdevSupply      =  8430000000 * E18;\n', '    uint constant public maxMktSupply       =  8430000000 * E18;\n', '    uint constant public maxRndSupply       =  8430000000 * E18;\n', '    uint constant public maxTeamSupply      =  5620000000 * E18;\n', '    uint constant public maxReserveSupply   =  2810000000 * E18;\n', '    uint constant public maxAdvisorSupply   =  2810000000 * E18;\n', '    \n', '    uint constant public teamVestingSupplyPerTime       = 351250000 * E18;\n', '    uint constant public advisorVestingSupplyPerTime    = 702500000 * E18;\n', '    uint constant public teamVestingDate                = 2 * month;\n', '    uint constant public teamVestingTime                = 16;\n', '    uint constant public advisorVestingDate             = 3 * month;\n', '    uint constant public advisorVestingTime             = 4;\n', '    \n', '    uint public totalTokenSupply;\n', '    \n', '    uint public tokenIssuedSale;\n', '    uint public privateIssuedSale;\n', '    uint public publicIssuedSale;\n', '    uint public tokenIssuedBdev;\n', '    uint public tokenIssuedMkt;\n', '    uint public tokenIssuedRnd;\n', '    uint public tokenIssuedTeam;\n', '    uint public tokenIssuedReserve;\n', '    uint public tokenIssuedAdvisor;\n', '    \n', '    uint public burnTokenSupply;\n', '    \n', '    mapping (address => uint) public balances;\n', '    mapping (address => mapping ( address => uint )) public approvals;\n', '    \n', '    mapping (address => uint) public privateFirstWallet;\n', '    \n', '    mapping (address => uint) public privateSecondWallet;\n', '    \n', '    mapping (uint => uint) public teamVestingTimeAtSupply;\n', '    mapping (uint => uint) public advisorVestingTimeAtSupply;\n', '    \n', '    bool public tokenLock = true;\n', '    bool public saleTime = true;\n', '    uint public endSaleTime = 0;\n', '    \n', '    event Burn(address indexed _from, uint _value);\n', '    \n', '    event SaleIssue(address indexed _to, uint _tokens);\n', '    event BdevIssue(address indexed _to, uint _tokens);\n', '    event MktIssue(address indexed _to, uint _tokens);\n', '    event RndIssue(address indexed _to, uint _tokens);\n', '    event TeamIssue(address indexed _to, uint _tokens);\n', '    event ReserveIssue(address indexed _to, uint _tokens);\n', '    event AdvisorIssue(address indexed _to, uint _tokens);\n', '    \n', '    event TokenUnLock(address indexed _to, uint _tokens);\n', '    \n', '    constructor() public\n', '    {\n', '        name        = "VANTA Token";\n', '        decimals    = 18;\n', '        symbol      = "VNT";\n', '        \n', '        totalTokenSupply = 0;\n', '        \n', '        tokenIssuedSale     = 0;\n', '        tokenIssuedBdev     = 0;\n', '        tokenIssuedMkt      = 0;\n', '        tokenIssuedRnd      = 0;\n', '        tokenIssuedTeam     = 0;\n', '        tokenIssuedReserve  = 0;\n', '        tokenIssuedAdvisor  = 0;\n', '        \n', '        require(maxTotalSupply == maxSaleSupply + maxBdevSupply + maxMktSupply + maxRndSupply + maxTeamSupply + maxReserveSupply + maxAdvisorSupply);\n', '        \n', '        require(maxTeamSupply == teamVestingSupplyPerTime * teamVestingTime);\n', '        require(maxAdvisorSupply == advisorVestingSupplyPerTime * advisorVestingTime);\n', '    }\n', '    \n', '    // ERC - 20 Interface -----\n', '\n', '    function totalSupply() view public returns (uint) \n', '    {\n', '        return totalTokenSupply;\n', '    }\n', '    \n', '    function balanceOf(address _who) view public returns (uint) \n', '    {\n', '        uint balance = balances[_who];\n', '        balance = balance.add(privateFirstWallet[_who] + privateSecondWallet[_who]);\n', '        \n', '        return balance;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) \n', '    {\n', '        require(isTransferable() == true);\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool)\n', '    {\n', '        require(isTransferable() == true);\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        approvals[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true; \n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint) \n', '    {\n', '        return approvals[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) \n', '    {\n', '        require(isTransferable() == true);\n', '        require(balances[_from] >= _value);\n', '        require(approvals[_from][msg.sender] >= _value);\n', '        \n', '        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to]  = balances[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // -----\n', '    \n', '    // Issue Function -----\n', '    \n', '    function privateIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxSaleSupply >= tokenIssuedSale.add(tokens));\n', '        \n', '        balances[_to]                   = balances[_to].add( tokens.mul(435)/1000 );\n', '        privateFirstWallet[_to]         = privateFirstWallet[_to].add( tokens.mul(435)/1000 );\n', '        privateSecondWallet[_to]        = privateSecondWallet[_to].add( tokens.mul(130)/1000 );\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedSale = tokenIssuedSale.add(tokens);\n', '        privateIssuedSale = privateIssuedSale.add(tokens);\n', '        \n', '        emit SaleIssue(_to, tokens);\n', '    }\n', '    \n', '    function publicIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxSaleSupply >= tokenIssuedSale.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedSale = tokenIssuedSale.add(tokens);\n', '        publicIssuedSale = publicIssuedSale.add(tokens);\n', '        \n', '        emit SaleIssue(_to, tokens);\n', '    }\n', '    \n', '    function bdevIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxBdevSupply >= tokenIssuedBdev.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedBdev = tokenIssuedBdev.add(tokens);\n', '        \n', '        emit BdevIssue(_to, tokens);\n', '    }\n', '    \n', '    function mktIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxMktSupply >= tokenIssuedMkt.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedMkt = tokenIssuedMkt.add(tokens);\n', '        \n', '        emit MktIssue(_to, tokens);\n', '    }\n', '    \n', '    function rndIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxRndSupply >= tokenIssuedRnd.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedRnd = tokenIssuedRnd.add(tokens);\n', '        \n', '        emit RndIssue(_to, tokens);\n', '    }\n', '    \n', '    function reserveIssue(address _to, uint _value) onlyIssuer public\n', '    {\n', '        uint tokens = _value * E18;\n', '        require(maxReserveSupply >= tokenIssuedReserve.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedReserve = tokenIssuedReserve.add(tokens);\n', '        \n', '        emit ReserveIssue(_to, tokens);\n', '    }\n', '    \n', '    // ----\n', '    \n', '    // Vesting Issue Function -----\n', '    \n', '    function teamIssueVesting(address _to, uint _time) onlyIssuer public\n', '    {\n', '        require(saleTime == false);\n', '        require(teamVestingTime >= _time);\n', '        \n', '        uint time = now;\n', '        require( ( ( endSaleTime + (_time * teamVestingDate) ) < time ) && ( teamVestingTimeAtSupply[_time] > 0 ) );\n', '        \n', '        uint tokens = teamVestingTimeAtSupply[_time];\n', '\n', '        require(maxTeamSupply >= tokenIssuedTeam.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        teamVestingTimeAtSupply[_time] = 0;\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedTeam = tokenIssuedTeam.add(tokens);\n', '        \n', '        emit TeamIssue(_to, tokens);\n', '    }\n', '    \n', '    function advisorIssueVesting(address _to, uint _time) onlyIssuer public\n', '    {\n', '        require(saleTime == false);\n', '        require(advisorVestingTime >= _time);\n', '        \n', '        uint time = now;\n', '        require( ( ( endSaleTime + (_time * advisorVestingDate) ) < time ) && ( advisorVestingTimeAtSupply[_time] > 0 ) );\n', '        \n', '        uint tokens = advisorVestingTimeAtSupply[_time];\n', '        \n', '        require(maxAdvisorSupply >= tokenIssuedAdvisor.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        advisorVestingTimeAtSupply[_time] = 0;\n', '        \n', '        totalTokenSupply = totalTokenSupply.add(tokens);\n', '        tokenIssuedAdvisor = tokenIssuedAdvisor.add(tokens);\n', '        \n', '        emit AdvisorIssue(_to, tokens);\n', '    }\n', '    \n', '    // -----\n', '    \n', '    // Lock Function -----\n', '    \n', '    function isTransferable() private view returns (bool)\n', '    {\n', '        if(tokenLock == false)\n', '        {\n', '            return true;\n', '        }\n', '        else if(msg.sender == manager)\n', '        {\n', '            return true;\n', '        }\n', '        \n', '        return false;\n', '    }\n', '    \n', '    function setTokenUnlock() onlyManager public\n', '    {\n', '        require(tokenLock == true);\n', '        require(saleTime == false);\n', '        \n', '        tokenLock = false;\n', '    }\n', '    \n', '    function setTokenLock() onlyManager public\n', '    {\n', '        require(tokenLock == false);\n', '        \n', '        tokenLock = true;\n', '    }\n', '    \n', '    function privateUnlock(address _to) onlyManager public\n', '    {\n', '        require(tokenLock == false);\n', '        require(saleTime == false);\n', '        \n', '        uint time = now;\n', '        uint unlockTokens = 0;\n', '\n', '        if( (time >= endSaleTime.add(month)) && (privateFirstWallet[_to] > 0) )\n', '        {\n', '            balances[_to] = balances[_to].add(privateFirstWallet[_to]);\n', '            unlockTokens = unlockTokens.add(privateFirstWallet[_to]);\n', '            privateFirstWallet[_to] = 0;\n', '        }\n', '        \n', '        if( (time >= endSaleTime.add(month * 2)) && (privateSecondWallet[_to] > 0) )\n', '        {\n', '            balances[_to] = balances[_to].add(privateSecondWallet[_to]);\n', '            unlockTokens = unlockTokens.add(privateSecondWallet[_to]);\n', '            privateSecondWallet[_to] = 0;\n', '        }\n', '        \n', '        emit TokenUnLock(_to, unlockTokens);\n', '    }\n', '    \n', '    // -----\n', '    \n', '    // ETC / Burn Function -----\n', '    \n', '    function () payable external\n', '    {\n', '        revert();\n', '    }\n', '    \n', '    function endSale() onlyManager public\n', '    {\n', '        require(saleTime == true);\n', '        \n', '        saleTime = false;\n', '        \n', '        uint time = now;\n', '        \n', '        endSaleTime = time;\n', '        \n', '        for(uint i = 1; i <= teamVestingTime; i++)\n', '        {\n', '            teamVestingTimeAtSupply[i] = teamVestingTimeAtSupply[i].add(teamVestingSupplyPerTime);\n', '        }\n', '        \n', '        for(uint i = 1; i <= advisorVestingTime; i++)\n', '        {\n', '            advisorVestingTimeAtSupply[i] = advisorVestingTimeAtSupply[i].add(advisorVestingSupplyPerTime);\n', '        }\n', '    }\n', '    \n', '    function withdrawTokens(address _contract, uint _decimals, uint _value) onlyManager public\n', '    {\n', '\n', '        if(_contract == address(0x0))\n', '        {\n', '            uint eth = _value.mul(10 ** _decimals);\n', '            msg.sender.transfer(eth);\n', '        }\n', '        else\n', '        {\n', '            uint tokens = _value.mul(10 ** _decimals);\n', '            ERC20Interface(_contract).transfer(msg.sender, tokens);\n', '            \n', '            emit Transfer(address(0x0), msg.sender, tokens);\n', '        }\n', '    }\n', '    \n', '    function burnToken(uint _value) onlyManager public\n', '    {\n', '        uint tokens = _value * E18;\n', '        \n', '        require(balances[msg.sender] >= tokens);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        burnTokenSupply = burnTokenSupply.add(tokens);\n', '        totalTokenSupply = totalTokenSupply.sub(tokens);\n', '        \n', '        emit Burn(msg.sender, tokens);\n', '    }\n', '    \n', '    function close() onlyMaster public\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '    \n', '    // -----\n', '}']