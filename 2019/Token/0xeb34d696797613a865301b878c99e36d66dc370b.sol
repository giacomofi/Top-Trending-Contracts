['pragma solidity ^0.4.24;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        _assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        _assert(b > 0);\n', '        uint256 c = a / b;\n', '        _assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        _assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        _assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    function _assert(bool assertion) internal pure {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract RentalChain is SafeMath {\n', '    string public name = "Rental Chain";\n', '    string public symbol = "RENTAL";\n', '    uint8 constant public decimals = 2;\n', '    mapping(address => uint256)  _balances;\n', '    mapping(address => mapping(address => uint256)) public _allowed;\n', '\n', '    uint256  public totalSupply = 188 * 100000000 * 100;\n', '\n', '\n', '    constructor () public{\n', '        _balances[msg.sender] = totalSupply;\n', '        emit Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function balanceOf(address addr) public view returns (uint256) {\n', '        return _balances[addr];\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value)  public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_balances[msg.sender] >= _value && _value > 0);\n', '        require(_balances[_to] + _value >= _balances[_to]);\n', '\n', '        _balances[msg.sender] = safeSub(_balances[msg.sender], _value);\n', '        _balances[_to] = safeAdd(_balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_balances[_from] >= _value && _value > 0);\n', '        require(_balances[_to] + _value >= _balances[_to]);\n', '\n', '        require(_allowed[_from][msg.sender] >= _value);\n', '\n', '        _balances[_to] = safeAdd(_balances[_to], _value);\n', '        _balances[_from] = safeSub(_balances[_from], _value);\n', '        _allowed[_from][msg.sender] = safeSub(_allowed[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value)  public returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _master, address _spender) public view returns (uint256) {\n', '        return _allowed[_master][_spender];\n', '    }\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 value);\n', '}']