['pragma solidity ^0.4.24;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library Config {\n', '    address constant internal BANK = 0x3F7199913BF60aD8653fa611e0A0fc8167C36D0D;\n', '    uint constant internal INITIAL_SUPPLY = 50000000000000000000000000;\n', '\n', '    function bank() internal pure returns (address) {\n', '      return BANK;\n', '    }\n', '    \n', '    function initial_supply() internal pure returns (uint) {\n', '      return INITIAL_SUPPLY;\n', '    }\n', '}\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() internal {\n', '    _addMinter(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    _addMinter(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    _removeMinter(msg.sender);\n', '  }\n', '\n', '  function _addMinter(address account) internal {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', 'contract SuperInvestorRole {\n', '  using Roles for Roles.Role;\n', '  using Config for Config;\n', '    \n', '  address internal BANK = Config.bank();\n', '\n', '  event SuperInvestorAdded(address indexed account);\n', '  event SuperInvestorRemoved(address indexed account);\n', '\n', '  Roles.Role private superInvestors;\n', '\n', '  constructor() internal {\n', '  }\n', '\n', '  modifier onlyBank() {\n', '    require(msg.sender == BANK);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyBankOrSuperInvestor() {\n', '    require(msg.sender == BANK || isSuperInvestor(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isSuperInvestor(address account) public view returns (bool) {\n', '    return superInvestors.has(account);\n', '  }\n', '\n', '  function addSuperInvestor(address account) public onlyBank {\n', '    _addSuperInvestor(account);\n', '  }\n', '\n', '  function renounceSuperInvestor() public onlyBankOrSuperInvestor {\n', '    _removeSuperInvestor(msg.sender);\n', '  }\n', '\n', '  function _addSuperInvestor(address account) internal {\n', '    superInvestors.add(account);\n', '    emit SuperInvestorAdded(account);\n', '  }\n', '\n', '  function _removeSuperInvestor(address account) internal {\n', '    superInvestors.remove(account);\n', '    emit SuperInvestorRemoved(account);\n', '  }\n', '}\n', '\n', 'contract InvestorRole is SuperInvestorRole {\n', '  using Roles for Roles.Role;\n', '  using Config for Config;\n', '    \n', '  address internal BANK = Config.bank();\n', '\n', '  event InvestorAdded(address indexed account);\n', '  event InvestorRemoved(address indexed account);\n', '\n', '  Roles.Role private investors;\n', '\n', '  constructor() internal {\n', '  }\n', '  \n', '  modifier onlyInvestor() {\n', '    require(isInvestor(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isInvestor(address account) public view returns (bool) {\n', '    return investors.has(account);\n', '  }\n', '\n', '  function addInvestor(address account) public onlyBankOrSuperInvestor {\n', '    _addInvestor(account);\n', '  }\n', '\n', '  function renounceInvestor() public onlyInvestor() {\n', '    _removeInvestor(msg.sender);\n', '  }\n', '\n', '  function _addInvestor(address account) internal {\n', '    investors.add(account);\n', '    emit InvestorAdded(account);\n', '  }\n', '\n', '  function _removeInvestor(address account) internal {\n', '    investors.remove(account);\n', '    emit InvestorRemoved(account);\n', '  }\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  using Config for Config;\n', '  \n', '  address internal _bank = Config.bank();\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param value The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    uint256 value\n', '  )\n', '    public\n', '    onlyMinter\n', '    returns (bool)\n', '  {\n', '    _mint(_bank, value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20Burnable is ERC20 {\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '}\n', '\n', 'interface IVest {\n', '  function totalVested() external view returns (uint256);\n', '\n', '  function vestedOf(address who) external view returns (uint256);\n', '  \n', '  event Vest(\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Vest is IVest {\n', '  using SafeMath for uint256;\n', '  \n', '  struct Beneficiary {\n', '    address _address;\n', '    uint256 startTime;\n', '    uint256 _amount;\n', '    uint256 _percent;\n', '    bool monthly;\n', '  }\n', '\n', '  mapping (address => Beneficiary) beneficiaries;\n', '\n', '  mapping (address => uint256) private _vestedBalances;\n', '\n', '  uint256 private _totalVested;\n', '  uint256 private beneficiariesCount;\n', '\n', '  function totalVested() public view returns (uint256) {\n', '    return _totalVested;\n', '  }\n', '\n', '  function vestedOf(address owner) public view returns (uint256) {\n', '    return _vestedBalances[owner];\n', '  }\n', '\n', '  function _vest(address to, uint256 value, uint256 percent, bool monthly) internal {\n', '    require(to != address(0));\n', '\n', '    _totalVested = _totalVested.add(value);\n', '    _vestedBalances[to] = _vestedBalances[to].add(value);\n', '\n', '    addBeneficiary(to, now, value, percent, monthly);\n', '    emit Vest(to, value);\n', '  }\n', '\n', '  function totalBeneficiaries() public view returns (uint256) {\n', '    return beneficiariesCount;\n', '  }\n', '\n', '  function addBeneficiary (address to, uint256, uint256 value, uint256 percent, bool monthly) internal {\n', '    beneficiariesCount ++;\n', '    beneficiaries[to] = Beneficiary(to, now, value, percent, monthly);\n', '  }\n', '  \n', '  function isBeneficiary (address _address) public view returns (bool) {\n', '    if (beneficiaries[_address]._address != 0) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function getBeneficiary (address _address) public view returns (address, uint256, uint256, uint256, bool) {\n', '    Beneficiary storage b = beneficiaries[_address];\n', '    return (b._address, b.startTime, b._amount, b._percent, b.monthly);\n', '  }\n', '  \n', '  function _getLockedAmount(address _address) public view returns (uint256) {\n', '    Beneficiary memory b = beneficiaries[_address];\n', '    uint256 amount = b._amount;\n', '    uint256 percent = b._percent;\n', '    uint256 timeValue = _getTimeValue(_address);\n', '    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\n', '\n', '    if (calcAmount >= amount) {\n', '        return 0;\n', '    } else {\n', '        return amount.sub(calcAmount);\n', '    }\n', '  }\n', '  \n', '  function _getTimeValue(address _address) internal view returns (uint256) {\n', '    Beneficiary memory b = beneficiaries[_address];\n', '    uint256 startTime = b.startTime;\n', '    uint256 presentTime = now;\n', '    uint256 timeValue = presentTime.sub(startTime);\n', '    bool monthly = b.monthly;\n', '\n', '    if (monthly) {\n', '      return timeValue.div(10 minutes);\n', '    } else {\n', '      return timeValue.div(120 minutes);  \n', '    }\n', '  }\n', '}\n', '\n', 'contract SuperInvestable is SuperInvestorRole, InvestorRole {\n', '  using SafeMath for uint256;\n', '  using Config for Config;\n', '\n', '  address internal BANK = Config.bank();\n', '  uint256 public percent;\n', '  \n', '  struct Investor {\n', '    address _address;\n', '    uint256 _amount;\n', '    uint256 _initialAmount;\n', '    uint256 startTime;\n', '  }\n', '  \n', '  mapping (address => Investor) investorList;\n', '  \n', '  modifier onlyBank() {\n', '    require(msg.sender == BANK);\n', '    _;\n', '  }\n', '  \n', '  function setPercent (uint256 _percent) external onlyBank returns (bool) {\n', '    percent = _percent;\n', '    return true;\n', '  }\n', '  \n', '  function addToInvestorList (address to, uint256 _amount, uint256 _initialAmount, uint256) internal {\n', '    _addInvestor(to);\n', '    investorList[to] = Investor(to, _amount, _initialAmount, now);\n', '  }\n', '      \n', '  function getInvestor (address _address) internal view returns (address, uint256, uint256, uint256) {\n', '    Investor storage i = investorList[_address];\n', '    return (i._address, i._amount, i._initialAmount, i.startTime);\n', '  }\n', '  \n', '  function _getInvestorLockedAmount (address _address) public view returns (uint256) {\n', '    Investor memory i = investorList[_address];\n', '    uint256 amount = i._amount;\n', '    uint256 timeValue = _getTimeValue(_address);\n', '    uint256 calcAmount = amount.mul(timeValue.mul(percent)).div(100);\n', '\n', '    if (calcAmount >= amount) {\n', '        return 0;\n', '    } else {\n', '        return amount.sub(calcAmount);\n', '    }\n', '  }\n', '  \n', '  function _getTimeValue (address _address) internal view returns (uint256) {\n', '    Investor memory i = investorList[_address];\n', '    uint256 startTime = i.startTime;\n', '    uint256 presentTime = now;\n', '    uint256 timeValue = presentTime.sub(startTime);\n', '\n', '    return timeValue.div(1 minutes);\n', '  }\n', '}\n', '\n', 'contract ZipBit is ERC20Detailed, ERC20Mintable, ERC20Burnable, Vest, SuperInvestable {\n', '    using Config for Config;\n', '\n', '    uint internal INITIAL_SUPPLY = Config.initial_supply();\n', '    address internal BANK = Config.bank();\n', '\n', '    string internal _name = "ZipBit";\n', '    string internal _symbol = "ZBT";\n', '    uint8 internal _decimals = 18;\n', '\n', '    modifier onlyBank() {\n', '      require(msg.sender == BANK);\n', '      _;\n', '    }\n', '\n', '    constructor()\n', '      ERC20Detailed(_name, _symbol, _decimals)\n', '\n', '    public \n', '    {\n', '        _mint(BANK, INITIAL_SUPPLY);\n', '        _addMinter(BANK);\n', '        renounceMinter();\n', '    }\n', '\n', '    function vest(address _to, uint256 _amount, uint256 percent, bool monthly)\n', '      onlyBank external returns (bool) {\n', '      _vest(_to, _amount, percent, monthly);\n', '      transfer(_to, _amount);\n', '      return true;\n', '    }\n', '\n', '    /* Checks limit for the address \n', '    *  Checks if the address is a Beneficiary and checks the allowed transferrable first\n', '    *  Then checks if address is a Super Investor and converts the recipient into an Investor\n', '    *  Then checks if address is an Investor and checks the allowed transferrable\n', '    *  Then returns if remaining balance after the transfer is gte to value\n', '    */\n', '    function checkLimit(address _address, uint256 value) internal view returns (bool) {\n', '      uint256 remaining = balanceOf(_address).sub(value);\n', '      \n', '      if (isBeneficiary(_address) && isInvestor(_address)) {\n', '        uint256 ilocked = _getInvestorLockedAmount(_address);\n', '        uint256 locked = _getLockedAmount(_address);\n', '        return remaining >= locked.add(ilocked);\n', '      }\n', '      \n', '      if (isBeneficiary(_address)) {\n', '        return remaining >= _getLockedAmount(_address);\n', '      }\n', '      \n', '      if (isInvestor(_address)) {\n', '        return remaining >= _getInvestorLockedAmount(_address);\n', '      }\n', '    }\n', '\n', '    /* Checks if sender is a Beneficiary or an Investor then checks the limit\n', '    *  Then checks if the sender is a superInvestor then converts the recipient to an investor\n', '    *  Then proceeds to transfer the amount\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '      if (isBeneficiary(msg.sender) || isInvestor(msg.sender)) {\n', '        require(checkLimit(msg.sender, value));\n', '      }\n', '\n', '      if (isSuperInvestor(msg.sender)) {\n', '        addToInvestorList(to, value, value, now);\n', '      }\n', '\n', '      _transfer(msg.sender, to, value);\n', '      return true;\n', '    }\n', '    \n', '    function bankBurnFrom(address account, uint256 value) external onlyBank {\n', '      _burn(account, value);\n', '    }\n', '}']