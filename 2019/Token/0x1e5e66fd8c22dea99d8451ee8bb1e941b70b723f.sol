['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assertCheck(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assertCheck(b > 0);\n', '    uint256 c = a / b;\n', '    assertCheck(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assertCheck(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assertCheck(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assertCheck(bool assertion) internal pure {\n', '    require(assertion == true);\n', '  }\n', '}\n', 'contract SWAP is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function setName(string _name) onlyOwner public returns (string){\n', '         name = _name;\n', '         return name;\n', '    }\n', '    function setSymbol(string _symbol) onlyOwner public returns (string){\n', '         symbol = _symbol;\n', '         return symbol;\n', '     }\n', '    \n', '     function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\n', '         decimals = _decimals;\n', '         return decimals;\n', '     }\n', '    \n', '    \n', '     function getOwner() view public returns(address){\n', '        return owner;\n', '     }\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event Withdraw(address to, uint amount);\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public payable {\n', '        balanceOf[msg.sender] = 100000000000*10**18;\n', '        totalSupply = balanceOf[msg.sender];\n', '        name = &#39;SWAP&#39;; \n', '        symbol = &#39;SWAP&#39;; \n', '        decimals = 18; \n', '\t\towner = msg.sender;\n', '    }\n', '\n', '   \n', '    function _transfer(address _from, address _to, uint _value) internal{\n', '        require(_to != 0x0); \n', '\t\trequire(_value > 0); \n', '        require(balanceOf[_from] >= _value);   \n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);               \n', '        emit Transfer(_from, _to, _value);       \n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public payable returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success) {\n', '\t\trequire(_value > 0); \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '    public\n', '    payable  {\n', '        require (_to != 0x0) ;             \n', '\t\trequire (_value > 0); \n', '        require (balanceOf[_from] >= _value) ;       \n', '        require (balanceOf[_to] + _value >= balanceOf[_to]) ;\n', '        require (_value <= allowance[_from][msg.sender]) ;   \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);               \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);  \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);    \n', '\t\trequire (_value > 0) ; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value); // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    function create(uint256 _value) public onlyOwner returns (bool success) {\n', '        require (_value > 0) ; \n', '        totalSupply = SafeMath.safeAdd(totalSupply,_value);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        return true;\n', '    }\n', '    \n', '\t// transfer balance to owner\n', '\tfunction withdraw() external onlyOwner{\n', '\t\trequire(msg.sender == owner);\n', '\t\tmsg.sender.transfer(address(this).balance);\n', '        emit Withdraw(msg.sender,address(this).balance);\n', '\t}\n', '\t\n', '\t// can accept ether\n', '\tfunction() private payable {\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assertCheck(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assertCheck(b > 0);\n', '    uint256 c = a / b;\n', '    assertCheck(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assertCheck(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assertCheck(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assertCheck(bool assertion) internal pure {\n', '    require(assertion == true);\n', '  }\n', '}\n', 'contract SWAP is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function setName(string _name) onlyOwner public returns (string){\n', '         name = _name;\n', '         return name;\n', '    }\n', '    function setSymbol(string _symbol) onlyOwner public returns (string){\n', '         symbol = _symbol;\n', '         return symbol;\n', '     }\n', '    \n', '     function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\n', '         decimals = _decimals;\n', '         return decimals;\n', '     }\n', '    \n', '    \n', '     function getOwner() view public returns(address){\n', '        return owner;\n', '     }\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event Withdraw(address to, uint amount);\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public payable {\n', '        balanceOf[msg.sender] = 100000000000*10**18;\n', '        totalSupply = balanceOf[msg.sender];\n', "        name = 'SWAP'; \n", "        symbol = 'SWAP'; \n", '        decimals = 18; \n', '\t\towner = msg.sender;\n', '    }\n', '\n', '   \n', '    function _transfer(address _from, address _to, uint _value) internal{\n', '        require(_to != 0x0); \n', '\t\trequire(_value > 0); \n', '        require(balanceOf[_from] >= _value);   \n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);               \n', '        emit Transfer(_from, _to, _value);       \n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public payable returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success) {\n', '\t\trequire(_value > 0); \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '    public\n', '    payable  {\n', '        require (_to != 0x0) ;             \n', '\t\trequire (_value > 0); \n', '        require (balanceOf[_from] >= _value) ;       \n', '        require (balanceOf[_to] + _value >= balanceOf[_to]) ;\n', '        require (_value <= allowance[_from][msg.sender]) ;   \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);               \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);  \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);    \n', '\t\trequire (_value > 0) ; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value); // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    function create(uint256 _value) public onlyOwner returns (bool success) {\n', '        require (_value > 0) ; \n', '        totalSupply = SafeMath.safeAdd(totalSupply,_value);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        return true;\n', '    }\n', '    \n', '\t// transfer balance to owner\n', '\tfunction withdraw() external onlyOwner{\n', '\t\trequire(msg.sender == owner);\n', '\t\tmsg.sender.transfer(address(this).balance);\n', '        emit Withdraw(msg.sender,address(this).balance);\n', '\t}\n', '\t\n', '\t// can accept ether\n', '\tfunction() private payable {\n', '    }\n', '}']
