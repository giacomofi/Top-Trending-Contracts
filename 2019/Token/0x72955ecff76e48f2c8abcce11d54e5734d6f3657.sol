['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  //event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  //function renounceOwnership() public onlyOwner {\n', '  //  emit OwnershipRenounced(owner);\n', '  //  owner = address(0);\n', '  //}\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => uint256) bonusTokens;\n', '  mapping(address => uint256) bonusReleaseTime;\n', '  \n', '  mapping(address => bool) internal blacklist;\n', '  address[] internal blacklistHistory;\n', '  \n', '  bool public isTokenReleased = false;\n', '  \n', '  address addressSaleContract;\n', '  event BlacklistUpdated(address badUserAddress, bool registerStatus);\n', '  event TokenReleased(address tokenOwnerAddress, bool tokenStatus);\n', '\n', '  uint256 totalSupply_;\n', '\n', '  modifier onlyBonusSetter() {\n', '      require(msg.sender == owner || msg.sender == addressSaleContract);\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(isTokenReleased);\n', '    require(!blacklist[_to]);\n', '    require(!blacklist[msg.sender]);\n', '    \n', '    if (bonusReleaseTime[msg.sender] > block.timestamp) {\n', '        require(_value <= balances[msg.sender].sub(bonusTokens[msg.sender]));\n', '    }\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(msg.sender == owner || !blacklist[_owner]);\n', '    require(!blacklist[msg.sender]);\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Set the specified address to blacklist.\n', '  * @param _badUserAddress The address of bad user.\n', '  */\n', '  function registerToBlacklist(address _badUserAddress) onlyOwner public {\n', '      if (blacklist[_badUserAddress] != true) {\n', '\t  \t  blacklist[_badUserAddress] = true;\n', '          blacklistHistory.push(_badUserAddress);\n', '\t  }\n', '      emit BlacklistUpdated(_badUserAddress, blacklist[_badUserAddress]);   \n', '  }\n', '  \n', '  /**\n', '  * @dev Remove the specified address from blacklist.\n', '  * @param _badUserAddress The address of bad user.\n', '  */\n', '  function unregisterFromBlacklist(address _badUserAddress) onlyOwner public {\n', '      if (blacklist[_badUserAddress] == true) {\n', '\t  \t  blacklist[_badUserAddress] = false;\n', '\t  }\n', '      emit BlacklistUpdated(_badUserAddress, blacklist[_badUserAddress]);\n', '  }\n', '\n', '  /**\n', '  * @dev Check the address registered in blacklist.\n', '  * @param _address The address to check.\n', '  * @return a bool representing registration of the passed address.\n', '  */\n', '  function checkBlacklist (address _address) onlyOwner public view returns (bool) {\n', '      return blacklist[_address];\n', '  }\n', '\n', '  function getblacklistHistory() onlyOwner public view returns (address[]) {\n', '      return blacklistHistory;\n', '  }\n', '  \n', '  /**\n', '  * @dev Release the token (enable all token functions).\n', '  */\n', '  function releaseToken() onlyOwner public {\n', '      if (isTokenReleased == false) {\n', '\t\tisTokenReleased = true;\n', '\t  }\n', '      emit TokenReleased(msg.sender, isTokenReleased);\n', '  }\n', '  \n', '  /**\n', '  * @dev Withhold the token (disable all token functions).\n', '  */\n', '  function withholdToken() onlyOwner public {\n', '      if (isTokenReleased == true) {\n', '\t\tisTokenReleased = false;\n', '      }\n', '\t  emit TokenReleased(msg.sender, isTokenReleased);\n', '  }\n', '  \n', '  /**\n', '  * @dev Set bonus token amount and bonus token release time for the specified address.\n', '  * @param _tokenHolder The address of bonus token holder\n', '  *        _bonusTokens The bonus token amount\n', '  *        _holdingPeriodInDays Bonus token holding period (in days) \n', '  */  \n', '  function setBonusTokenInDays(address _tokenHolder, uint256 _bonusTokens, uint256 _holdingPeriodInDays) onlyBonusSetter public {\n', '      bonusTokens[_tokenHolder] = _bonusTokens;\n', '      bonusReleaseTime[_tokenHolder] = SafeMath.add(block.timestamp, _holdingPeriodInDays * 1 days);\n', '  }\n', '\n', '  /**\n', '  * @dev Set bonus token amount and bonus token release time for the specified address.\n', '  * @param _tokenHolder The address of bonus token holder\n', '  *        _bonusTokens The bonus token amount\n', '  *        _bonusReleaseTime Bonus token release time\n', '  */  \n', '  function setBonusToken(address _tokenHolder, uint256 _bonusTokens, uint256 _bonusReleaseTime) onlyBonusSetter public {\n', '      bonusTokens[_tokenHolder] = _bonusTokens;\n', '      bonusReleaseTime[_tokenHolder] = _bonusReleaseTime;\n', '  }\n', '  \n', '  /**\n', '  * @dev Set bonus token amount and bonus token release time for the specified address.\n', '  * @param _tokenHolders The address of bonus token holder ["0x...", "0x...", ...] \n', '  *        _bonusTokens The bonus token amount [0,0, ...] \n', '  *        _bonusReleaseTime Bonus token release time\n', '  */  \n', '  function setBonusTokens(address[] _tokenHolders, uint256[] _bonusTokens, uint256 _bonusReleaseTime) onlyBonusSetter public {\n', '      for (uint i = 0; i < _tokenHolders.length; i++) {\n', '        bonusTokens[_tokenHolders[i]] = _bonusTokens[i];\n', '        bonusReleaseTime[_tokenHolders[i]] = _bonusReleaseTime;\n', '      }\n', '  }\n', '\n', '  function setBonusTokensInDays(address[] _tokenHolders, uint256[] _bonusTokens, uint256 _holdingPeriodInDays) onlyBonusSetter public {\n', '      for (uint i = 0; i < _tokenHolders.length; i++) {\n', '        bonusTokens[_tokenHolders[i]] = _bonusTokens[i];\n', '        bonusReleaseTime[_tokenHolders[i]] = SafeMath.add(block.timestamp, _holdingPeriodInDays * 1 days);\n', '      }\n', '  }\n', '\n', '  /**\n', '  * @dev Set the address of the crowd sale contract which can call setBonusToken method.\n', '  * @param _addressSaleContract The address of the crowd sale contract.\n', '  */\n', '  function setBonusSetter(address _addressSaleContract) onlyOwner public {\n', '      addressSaleContract = _addressSaleContract;\n', '  }\n', '  \n', '  function getBonusSetter() public view returns (address) {\n', '      require(msg.sender == addressSaleContract || msg.sender == owner);\n', '      return addressSaleContract;\n', '  }\n', '  \n', '  /**\n', "  * @dev Display token holder's bonus token amount.\n", '  * @param _bonusHolderAddress The address of bonus token holder.\n', '  */\n', '  function checkBonusTokenAmount (address _bonusHolderAddress) public view returns (uint256) {\n', '      return bonusTokens[_bonusHolderAddress];\n', '  }\n', '  \n', '  /**\n', "  * @dev Display token holder's remaining bonus token holding period.\n", '  * @param _bonusHolderAddress The address of bonus token holder.\n', '  */\n', '  function checkBonusTokenHoldingPeriodRemained (address _bonusHolderAddress) public view returns (uint256) {\n', '      uint256 returnValue = 0;\n', '      if (bonusReleaseTime[_bonusHolderAddress] > now) {\n', '          returnValue = bonusReleaseTime[_bonusHolderAddress].sub(now);\n', '      }\n', '      return returnValue;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) onlyOwner internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(!blacklist[_from]);\n', '    require(!blacklist[_to]);\n', '\trequire(!blacklist[msg.sender]);\n', '    require(isTokenReleased);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(isTokenReleased);\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    require(!blacklist[_owner]);\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(!blacklist[_spender]);    \n', '\trequire(!blacklist[msg.sender]);\n', '\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TrustVerse Token\n', ' * @dev Burnable ERC20 standard Token\n', ' */\n', 'contract TrustVerseToken is BurnableToken, StandardToken {\n', '  string public constant name = "TrustVerse"; // solium-disable-line uppercase\n', '  string public constant symbol = "TRV"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '  mapping (address => mapping (address => uint256)) internal EffectiveDateOfAllowance; // Effective date of Lost-proof, Inheritance\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens to multiple addresses\n', '   * @param _to array of address The address which you want to transfer to\n', '   * @param _value array of uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferToMultiAddress(address[] _to, uint256[] _value) public {\n', '    require(_to.length == _value.length);\n', '\n', '    uint256 transferTokenAmount = 0;\n', '    uint256 i = 0;\n', '    for (i = 0; i < _to.length; i++) {\n', '        transferTokenAmount = transferTokenAmount.add(_value[i]);\n', '    }\n', '    require(transferTokenAmount <= balances[msg.sender]);\n', '\n', '    for (i = 0; i < _to.length; i++) {\n', '        transfer(_to[i], _value[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(EffectiveDateOfAllowance[_from][msg.sender] <= block.timestamp); \n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _effectiveDate Effective date of Lost-proof, Inheritance\n', '   */\n', '  function approveWithEffectiveDate(address _spender, uint256 _value, uint256 _effectiveDate) public returns (bool) {\n', '    require(isTokenReleased);\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '    \n', '    EffectiveDateOfAllowance[msg.sender][_spender] = _effectiveDate;\n', '    return approve(_spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _effectiveDateInDays Effective date of Lost-proof, Inheritance\n', '   */\n', '  function approveWithEffectiveDateInDays(address _spender, uint256 _value, uint256 _effectiveDateInDays) public returns (bool) {\n', '    require(isTokenReleased);\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '    \n', '    EffectiveDateOfAllowance[msg.sender][_spender] = SafeMath.add(block.timestamp, _effectiveDateInDays * 1 days);\n', '    return approve(_spender, _value);\n', '  }  \n', '\n', '  /**\n', '   * @dev Function to check the Effective date of Lost-proof, Inheritance of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowanceEffectiveDate(address _owner, address _spender) public view returns (uint256) {\n', '    require(!blacklist[_owner]);\n', '    require(!blacklist[_spender]);\n', '\trequire(!blacklist[msg.sender]);\n', '\n', '    return EffectiveDateOfAllowance[_owner][_spender];\n', '  }\n', '}']