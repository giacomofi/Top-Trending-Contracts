['/* file: openzeppelin-solidity/contracts/ownership/Ownable.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/ownership/Ownable.sol) */\n', '/* file: openzeppelin-solidity/contracts/math/SafeMath.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/math/SafeMath.sol) */\n', '/* file: ./contracts/utils/Utils.sol */\n', '/**\n', ' * @title Manageable Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', 'pragma solidity ^0.5.4;\n', '\n', '\n', 'contract Utils {\n', '    /** MODIFIERS **/\n', '    modifier onlyValidAddress(address _address) {\n', '        require(_address != address(0), "invalid address");\n', '        _;\n', '    }\n', '}\n', '\n', '/* eof (./contracts/utils/Utils.sol) */\n', '/* file: ./contracts/management/Manageable.sol */\n', '/**\n', ' * @title Manageable Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', ' pragma solidity ^0.5.4;\n', '\n', '\n', 'contract Manageable is Ownable, Utils {\n', '    mapping(address => bool) public isManager;     // manager accounts\n', '\n', '    /** EVENTS **/\n', '    event ChangedManager(address indexed manager, bool active);\n', '\n', '    /** MODIFIERS **/\n', '    modifier onlyManager() {\n', '        require(isManager[msg.sender], "is not manager");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice constructor sets the deployer as a manager\n', '    */\n', '    constructor() public {\n', '        setManager(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @notice enable/disable an account to be a manager\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n', '        isManager[_manager] = _active;\n', '        emit ChangedManager(_manager, _active);\n', '    }\n', '}\n', '\n', '/* eof (./contracts/management/Manageable.sol) */\n', '/* file: ./contracts/whitelist/GlobalWhitelist.sol */\n', '/**\n', ' * @title Global Whitelist Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;\n', '\n', '\n', '\n', 'contract GlobalWhitelist is Ownable, Manageable {\n', '    using SafeMath for uint256;\n', '    \n', "    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\n", '    bool public isWhitelisting = true;             // whitelisting enabled by default\n', '\n', '    /** EVENTS **/\n', '    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\n', '    event GlobalWhitelistDisabled(address indexed manager);\n', '    event GlobalWhitelistEnabled(address indexed manager);\n', '\n', '    /**\n', '    * @dev add an address to the whitelist\n', '    * @param _address address\n', '    */\n', '    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n', '        isWhitelisted[_address] = true;\n', '        emit ChangedWhitelisting(_address, true);\n', '    }\n', '\n', '    /**\n', '    * @dev add addresses to the whitelist\n', '    * @param _addresses addresses array\n', '    */\n', '    function addAddressesToWhitelist(address[] memory _addresses) public {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            addAddressToWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address from the whitelist\n', '    * @param _address address\n', '    */\n', '    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n', '        isWhitelisted[_address] = false;\n', '        emit ChangedWhitelisting(_address, false);\n', '    }\n', '\n', '    /**\n', '    * @dev remove addresses from the whitelist\n', '    * @param _addresses addresses\n', '    */\n', '    function removeAddressesFromWhitelist(address[] memory _addresses) public {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            removeAddressFromWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /** \n', '    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\n', '    */\n', '    function toggleWhitelist() public onlyOwner {\n', '        isWhitelisting ? isWhitelisting = false : isWhitelisting = true;\n', '        if (isWhitelisting) {\n', '            emit GlobalWhitelistEnabled(msg.sender);\n', '        } else {\n', '            emit GlobalWhitelistDisabled(msg.sender);\n', '        }\n', '    }\n', '}\n', '\n', '/* eof (./contracts/whitelist/GlobalWhitelist.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol) */\n', '/* file: openzeppelin-solidity/contracts/access/Roles.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/access/Roles.sol) */\n', '/* file: openzeppelin-solidity/contracts/access/roles/PauserRole.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/access/roles/PauserRole.sol) */\n', '/* file: openzeppelin-solidity/contracts/lifecycle/Pausable.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/lifecycle/Pausable.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol */\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol) */\n', '/* file: ./contracts/token/ERC20/IERC20Snapshot.sol */\n', '/**\n', ' * @title Interface ERC20 SnapshotToken (abstract contract)\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;  \n', '\n', '\n', '/* solhint-disable no-empty-blocks */\n', 'contract IERC20Snapshot {   \n', '    /**\n', '    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at `_blockNumber`\n', '    */\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {}\n', '\n', '    /**\n', '    * @notice Total amount of tokens at a specific `_blockNumber`.\n', '    * @param _blockNumber The block number when the totalSupply is queried\n', '    * @return The total amount of tokens at `_blockNumber`\n', '    */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {}\n', '}\n', '\n', '/* eof (./contracts/token/ERC20/IERC20Snapshot.sol) */\n', '/* file: ./contracts/token/ERC20/ERC20Snapshot.sol */\n', '/**\n', ' * @title ERC20 Snapshot Token\n', " * inspired by Jordi Baylina's MiniMeToken to record historical balances\n", ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;  \n', '\n', '\n', '\n', 'contract ERC20Snapshot is IERC20Snapshot, ERC20 {   \n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev `Snapshot` is the structure that attaches a block number to a\n', '    * given value. The block number attached is the one that last changed the value\n', '    */\n', '    struct Snapshot {\n', '        uint128 fromBlock;  // `fromBlock` is the block number at which the value was generated from\n', '        uint128 value;  // `value` is the amount of tokens at a specific block number\n', '    }\n', '\n', '    /**\n', '    * @dev `_snapshotBalances` is the map that tracks the balance of each address, in this\n', '    * contract when the balance changes the block number that the change\n', '    * occurred is also included in the map\n', '    */\n', '    mapping (address => Snapshot[]) private _snapshotBalances;\n', '\n', "    // Tracks the history of the `_totalSupply` & '_mintedSupply' of the token\n", '    Snapshot[] private _snapshotTotalSupply;\n', '\n', '    /*** FUNCTIONS ***/\n', '    /** OVERRIDE\n', '    * @dev Send `_value` tokens to `_to` from `msg.sender`\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool result) {\n', '        result = super.transfer(_to, _value);\n', '        createSnapshot(msg.sender, _to);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev Send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool result) {\n', '        result = super.transferFrom(_from, _to, _value);\n', '        createSnapshot(_from, _to);\n', '    }\n', '\n', '    /**\n', '    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at `_blockNumber`\n', '    */\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint256) {\n', '        return getValueAt(_snapshotBalances[_owner], _blockNumber);\n', '    }\n', '\n', '    /**\n', '    * @dev Total supply cap of tokens at a specific `_blockNumber`.\n', '    * @param _blockNumber The block number when the totalSupply is queried\n', '    * @return The total supply cap of tokens at `_blockNumber`\n', '    */\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint256) {\n', '        return getValueAt(_snapshotTotalSupply, _blockNumber);\n', '    }\n', '\n', '    /*** Internal functions ***/\n', '    /**\n', '    * @dev Updates snapshot mappings for _from and _to and emit an event\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @return True if the transfer was successful\n', '    */\n', '    function createSnapshot(address _from, address _to) internal {\n', '        updateValueAtNow(_snapshotBalances[_from], balanceOf(_from));\n', '        updateValueAtNow(_snapshotBalances[_to], balanceOf(_to));\n', '    }\n', '\n', '    /**\n', '    * @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    * @param checkpoints The history of values being queried\n', '    * @param _block The block number to retrieve the value at\n', '    * @return The number of tokens being queried\n', '    */\n', '    function getValueAt(Snapshot[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\n', '            return checkpoints[checkpoints.length.sub(1)].value;\n', '        }\n', '\n', '        if (_block < checkpoints[0].fromBlock) {\n', '            return 0;\n', '        } \n', '\n', '        // Binary search of the value in the array\n', '        uint min;\n', '        uint max = checkpoints.length.sub(1);\n', '\n', '        while (max > min) {\n', '            uint mid = (max.add(min).add(1)).div(2);\n', '            if (checkpoints[mid].fromBlock <= _block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /**\n', '    * @dev `updateValueAtNow` used to update the `_snapshotBalances` map and the `_snapshotTotalSupply`\n', '    * @param checkpoints The history of data being updated\n', '    * @param _value The new number of tokens\n', '    */\n', '    function updateValueAtNow(Snapshot[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n', '            checkpoints.push(Snapshot(uint128(block.number), uint128(_value)));\n', '        } else {\n', '            checkpoints[checkpoints.length.sub(1)].value = uint128(_value);\n', '        }\n', '    }\n', '}\n', '\n', '/* eof (./contracts/token/ERC20/ERC20Snapshot.sol) */\n', '/* file: ./contracts/token/ERC20/ERC20ForcedTransfer.sol */\n', '/**\n', ' * @title ERC20Confiscatable\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;  \n', '\n', '\n', '\n', 'contract ERC20ForcedTransfer is Ownable, ERC20 {\n', '    /*** EVENTS ***/\n', '    event ForcedTransfer(address indexed account, uint256 amount, address indexed receiver);\n', '\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @notice takes funds from _confiscatee and sends them to _receiver\n', "    * @param _confiscatee address who's funds are being confiscated\n", "    * @param _receiver address who's receiving the funds \n", '    */\n', '    function forceTransfer(address _confiscatee, address _receiver) public onlyOwner {\n', '        uint256 balance = balanceOf(_confiscatee);\n', '        _transfer(_confiscatee, _receiver, balance);\n', '        emit ForcedTransfer(_confiscatee, balance, _receiver);\n', '    }\n', '}\n', '\n', '/* eof (./contracts/token/ERC20/ERC20ForcedTransfer.sol) */\n', '/* file: ./contracts/token/ERC20/ERC20Whitelist.sol */\n', '/**\n', ' * @title ERC20Whitelist\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;  \n', '\n', '\n', '\n', 'contract ERC20Whitelist is Ownable, ERC20 {   \n', '    GlobalWhitelist public whitelist;\n', '    bool public isWhitelisting = true;  // default to true\n', '\n', '    /** EVENTS **/\n', '    event ESTWhitelistingEnabled();\n', '    event ESTWhitelistingDisabled();\n', '\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @notice disables whitelist per individual EST\n', '    * @dev parnent contract, ExporoTokenFactory, is owner\n', '    */\n', '    function toggleWhitelist() external onlyOwner {\n', '        isWhitelisting ? isWhitelisting = false : isWhitelisting = true;\n', '        if (isWhitelisting) {\n', '            emit ESTWhitelistingEnabled();\n', '        } else {\n', '            emit ESTWhitelistingDisabled();\n', '        }\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return bool\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (checkWhitelistEnabled()) {\n', '            checkIfWhitelisted(msg.sender);\n', '            checkIfWhitelisted(_to);\n', '        }\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    * @return bool\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (checkWhitelistEnabled()) {\n', '            checkIfWhitelisted(_from);\n', '            checkIfWhitelisted(_to);\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev check if whitelisting is in effect versus local and global bools\n', '    * @return bool\n', '    */\n', '    function checkWhitelistEnabled() public view returns (bool) {\n', '        // local whitelist\n', '        if (isWhitelisting) {\n', '            // global whitelist\n', '            if (whitelist.isWhitelisting()) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /*** INTERNAL/PRIVATE ***/\n', '    /**\n', '    * @dev check if the address has been whitelisted by the Whitelist contract\n', '    * @param _account address of the account to check\n', '    */\n', '    function checkIfWhitelisted(address _account) internal view {\n', '        require(whitelist.isWhitelisted(_account), "not whitelisted");\n', '    }\n', '}\n', '\n', '/* eof (./contracts/token/ERC20/ERC20Whitelist.sol) */\n', '/* file: ./contracts/token/ERC20/ERC20DocumentRegistry.sol */\n', '/**\n', ' * @title ERC20 Document Registry Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', ' pragma solidity ^0.5.4;\n', '\n', '\n', '\n', '/**\n', ' * @notice Prospectus and Quarterly Reports stored hashes via IPFS\n', ' * @dev read IAgreement for details under /contracts/neufund/standards\n', '*/\n', '// solhint-disable not-rely-on-time\n', 'contract ERC20DocumentRegistry is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct HashedDocument {\n', '        uint256 timestamp;\n', '        string documentUri;\n', '    }\n', '\n', '    // array of all documents \n', '    HashedDocument[] private _documents;\n', '\n', '    event LogDocumentedAdded(string documentUri, uint256 documentIndex);\n', '\n', '    /**\n', "    * @notice adds a document's uri from IPFS to the array\n", '    * @param documentUri string\n', '    */\n', '    function addDocument(string memory documentUri) public onlyOwner {\n', '        require(bytes(documentUri).length > 0, "invalid documentUri");\n', '\n', '        HashedDocument memory document = HashedDocument({\n', '            timestamp: block.timestamp,\n', '            documentUri: documentUri\n', '        });\n', '\n', '        _documents.push(document);\n', '\n', '        emit LogDocumentedAdded(documentUri, _documents.length.sub(1));\n', '    }\n', '\n', '    /**\n', '    * @notice fetch the latest document on the array\n', '    * @return uint256, string, uint256 \n', '    */\n', '    function currentDocument() public view \n', '        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n', '            require(_documents.length > 0, "no documents exist");\n', '            uint256 last = _documents.length.sub(1);\n', '\n', '            HashedDocument storage document = _documents[last];\n', '            return (document.timestamp, document.documentUri, last);\n', '        }\n', '\n', '    /**\n', "    * @notice adds a document's uri from IPFS to the array\n", '    * @param documentIndex uint256\n', '    * @return uint256, string, uint256 \n', '    */\n', '    function getDocument(uint256 documentIndex) public view\n', '        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n', '            require(documentIndex < _documents.length, "invalid index");\n', '\n', '            HashedDocument storage document = _documents[documentIndex];\n', '            return (document.timestamp, document.documentUri, documentIndex);\n', '        }\n', '\n', '    /**\n', '    * @notice return the total amount of documents in the array\n', '    * @return uint256\n', '    */\n', '    function documentCount() public view returns (uint256) {\n', '        return _documents.length;\n', '    }\n', '}\n', '\n', '/* eof (./contracts/token/ERC20/ERC20DocumentRegistry.sol) */\n', '/* file: ./contracts/exporo/ExporoToken.sol */\n', '/**\n', ' * @title Exporo Token Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;\n', '\n', '\n', '\n', 'contract SampleToken is Ownable, ERC20, ERC20Detailed {\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @dev constructor\n', '    * @param _name string\n', '    * @param _symbol string\n', '    * @param _decimal uint8\n', '    * @param _initialSupply uint256 initial total supply cap. can be 0\n', '    * @param _recipient address to recieve the tokens\n', '    */\n', '    /* solhint-disable */\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimal, uint256 _initialSupply, address _recipient)\n', '        public \n', '        ERC20Detailed(_name, _symbol, _decimal) {\n', '            _mint(_recipient, _initialSupply);\n', '        }\n', '    /* solhint-enable */\n', '}\n', '\n', '/* eof (./contracts/exporo/ExporoToken.sol) */\n', '/* file: ./contracts/exporo/ExporoTokenFactory.sol */\n', '/**\n', ' * @title Exporo Token Factory Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity ^0.5.4;\n', '\n', '\n', '\n', '/* solhint-disable max-line-length */\n', '/* solhint-disable separate-by-one-line-in-contract */\n', 'contract SampleTokenFactory is Ownable, Manageable {\n', '    address public whitelist;\n', '\n', '    /*** EVENTS ***/\n', '    event NewTokenDeployed(address indexed contractAddress, string name, string symbol, uint8 decimals);\n', '   \n', '\n', '    /**\n', '    * @dev allows owner to launch a new token with a new name, symbol, and decimals.\n', '    * Defaults to using whitelist stored in this contract. If _whitelist is address(0), else it will use\n', "    * _whitelist as the param to pass into the new token's constructor upon deployment \n", '    * @param _name string\n', '    * @param _symbol string\n', '    * @param _decimals uint8 \n', '    * @param _initialSupply uint256 initial total supply cap\n', '    * @param _recipient address to recieve the initial token supply\n', '    */\n', '    function newToken(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply, address _recipient) \n', '        public \n', '        onlyManager \n', '        onlyValidAddress(_recipient)\n', '        returns (address) {\n', '            require(bytes(_name).length > 0, "name cannot be blank");\n', '            require(bytes(_symbol).length > 0, "symbol cannot be blank");\n', '            require(_initialSupply > 0, "supply cannot be 0");\n', '\n', '            SampleToken token = new SampleToken(_name, _symbol, _decimals, _initialSupply, _recipient);\n', '\n', '            emit NewTokenDeployed(address(token), _name, _symbol, _decimals);\n', '            \n', '            return address(token);\n', '        }\n', '}\n', '\n', '/* eof (./contracts/exporo/ExporoTokenFactory.sol) */']