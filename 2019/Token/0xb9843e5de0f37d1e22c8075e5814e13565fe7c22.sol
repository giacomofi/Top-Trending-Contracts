['/**\n', ' * Lucky Block Network Project Smart-Contracts\n', ' * @authors https://grox.solutions\n', ' */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '\n', '    mapping (address => bool) _owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isOwner(address addr) public view returns (bool) {\n', '        return _owner[addr];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ApproveAndCall Interface.\n', ' * @dev ApproveAndCall system hepls to communicate with smart-contracts.\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\n', '}\n', '\n', '/**\n', ' * @title The main project contract.\n', ' * @author https://grox.solutions\n', ' */\n', 'contract LBNToken is ERC20Pausable, MultiOwnable {\n', '\n', '    // name of the token\n', '    string private _name = "Lucky Block Network";\n', '    // symbol of the token\n', '    string private _symbol = "LBN";\n', '    // decimals of the token\n', '    uint8 private _decimals = 18;\n', '\n', '    // initial supply\n', '    uint256 public constant INITIAL_SUPPLY = 99990000 * (10 ** 18);\n', '\n', '    // an amount of votes required to process an action\n', '    uint8 public consensusValue = 1;\n', '\n', '    // struct for proposals\n', '    struct Proposal {\n', '        // amount of votes\n', '        uint8 votes;\n', '        // count of proposals\n', '        uint256 count;\n', '        // double mapping to prevent the error of repeating the same proposal\n', '        mapping (uint256 => mapping (address => bool)) voted;\n', '    }\n', '\n', '    // mapping to implement muptiple owners\n', '    mapping (address => bool) _owner;\n', '\n', '    // boolean value if minting is finished of not\n', '    bool public mintingIsFinished;\n', '\n', '    /**\n', '     * @dev Throws if called while minting is finished.\n', '     */\n', '    modifier isNotFinished {\n', '        require(!mintingIsFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '    // events\n', '    event LogProposal(string indexed method, address param1, address param2, uint256 param3, string param4, address indexed voter, uint8 votes, uint8 consensusValue);\n', '    event LogAction(string indexed method, address param1, address param2, uint256 param3, string param4);\n', '\n', '    /**\n', '      * @dev constructor function that is called once at deployment of the contract.\n', '      * @param owners 5 initial owners to set.\n', '      * @param recipient Address to receive initial supply.\n', '      */\n', '    constructor(address[] memory owners, address recipient) public {\n', '\n', '        for (uint8 i = 0; i < 5; i++) {\n', '            _owner[owners[i]] = true;\n', '        }\n', '\n', '        _mint(recipient, INITIAL_SUPPLY);\n', '\n', '    }\n', '\n', '    /**\n', '      * @dev Internal function that process voting in a given proposal, returns `true` if the voting has succesfully ended.\n', '      * @param props The proposal storage.\n', '      * @notice Every next parameter is given only to emit events.\n', '      * @param method Name of the called method.\n', '      * @param param1 First address parameter.\n', '      * @param param2 Second address parameter.\n', '      * @param param3 uint256 parameter.\n', '      * @param param4 string parameter.\n', '      */\n', '    function _vote(Proposal storage props, string memory method, address param1, address param2, uint256 param3, string memory param4) internal returns(bool) {\n', '\n', '        // if that is the new proposal add a number to count to prevent the error of repeating the same proposal\n', '        if (props.votes == 0) {\n', '            props.count++;\n', '        }\n', '\n', "        // if msg.sender hasn't voted yet, do this\n", '        if (!props.voted[props.count][msg.sender]) {\n', '            props.votes++;\n', '            props.voted[props.count][msg.sender] = true;\n', '            emit LogProposal(method, param1, param2, param3, param4, msg.sender, props.votes, consensusValue);\n', '        }\n', '\n', '        // if an amount of votes is equal or more than consensusValue renew the proposal and return `true` to process the action\n', '        if (props.votes >= consensusValue) {\n', '            props.votes = 0;\n', '            emit LogAction(method, param1, param2, param3, param4);\n', '            return true;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for owner proposals.\n', '     */\n', '    mapping (address => mapping(address => Proposal)) public ownerProp;\n', '\n', '    /**\n', '     * @dev Vote to transfer control of the contract from one account to another.\n', '     * @param previousOwner The address to remove ownership from.\n', '     * @param newOwner The address to transfer ownership to.\n', '     * @notice There are only 5 owners of this contract\n', '     */\n', '    function changeOwner(address previousOwner, address newOwner) public onlyOwner {\n', '        require(isOwner(previousOwner) && !isOwner(newOwner));\n', '\n', '        if (_vote(ownerProp[previousOwner][newOwner], "changeOwner", previousOwner, newOwner, 0, "")) {\n', '            _owner[previousOwner] = false;\n', '            _owner[newOwner] = true;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for consensus proposals.\n', '     */\n', '    mapping (uint8 => Proposal) public consProp;\n', '\n', '    /**\n', '     * @dev Vote to change the consensusValue.\n', '     * @param newConsensusValue new value.\n', '     */\n', '    function setConsensusValue(uint8 newConsensusValue) public onlyOwner {\n', '\n', '        if (_vote(consProp[newConsensusValue], "setConsensusValue", address(0), address(0), newConsensusValue, "")) {\n', '            consensusValue = newConsensusValue;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for minting finalize proposal.\n', '     */\n', '    Proposal public finMintProp;\n', '\n', '    /**\n', '     * @dev Vote to stop minting of tokens forever.\n', '     */\n', '    function finalizeMinting() public onlyOwner {\n', '\n', '        if (_vote(finMintProp, "finalizeMinting", address(0), address(0), 0, "")) {\n', '            mintingIsFinished = true;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for mint proposals.\n', '     */\n', '    mapping (address => mapping (uint256 => mapping (string => Proposal))) public mintProp;\n', '\n', '    /**\n', '     * @dev Vote to mint an amount of the token and assigns it to\n', '     * an account.\n', '     * @param to The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function mint(address to, uint256 value) public isNotFinished onlyOwner returns (bool) {\n', '\n', '        if (_vote(mintProp[to][value]["mint"], "mint", to, address(0), value, "")) {\n', '            _mint(to, value);\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for burn proposals.\n', '     */\n', '    mapping (address => mapping (uint256 => mapping (string => Proposal))) public burnProp;\n', '\n', '\n', '    /**\n', '     * @dev Vote to burn an amount of the token of a given\n', '     * account.\n', '     * @param from The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function burnFrom(address from, uint256 value) public onlyOwner {\n', '\n', '        if (_vote(burnProp[from][value]["burnFrom"], "burnFrom", from, address(0), value, "")) {\n', '            _burn(from, value);\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for pause proposals.\n', '     */\n', '    Proposal public pauseProp;\n', '\n', '    /**\n', '     * @dev Vote to pause any transfer of tokens.\n', '     * Called by a owner to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyOwner {\n', '\n', '        if (_vote(pauseProp, "pause", address(0), address(0), 0, "")) {\n', '            super.pause();\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for unpause proposals.\n', '     */\n', '    Proposal public unpauseProp;\n', '\n', '    /**\n', '     * @dev Vote to pause any transfer of tokens.\n', '     * Called by a owner to unpause, triggers normal state.\n', '     */\n', '    function unpause() public onlyOwner {\n', '\n', '        if (_vote(unpauseProp, "unpause", address(0), address(0), 0, "")) {\n', '            super.unpause();\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for name proposals.\n', '     */\n', '    mapping (string => mapping (string => Proposal)) public nameProp;\n', '\n', '    /**\n', '    * @dev Change the name of the token.\n', '    * @param newName New name of the token.\n', '    */\n', '    function changeName(string memory newName) public onlyOwner {\n', '\n', '        if (_vote(nameProp[newName]["name"], "changeName", address(0), address(0), 0, newName)) {\n', '            _name = newName;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Storage for symbol proposals.\n', '     */\n', '    mapping (string => mapping (string => Proposal)) public symbolProp;\n', '\n', '    /**\n', '    * @dev Change the symbol of the token.\n', '    * @param newSymbol New symbol of the token.\n', '    */\n', '    function changeSymbol(string memory newSymbol) public onlyOwner {\n', '\n', '        if (_vote(symbolProp[newSymbol]["symbol"], "changeSymbol", address(0), address(0), 0, newSymbol)) {\n', '            _symbol = newSymbol;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart contract.\n', '    * @param spender Address of smart contracts to work with.\n', '    * @param amount Amount of tokens to send.\n', '    * @param extraData Any extra data.\n', '    */\n', '    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\n', '        require(approve(spender, amount));\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\n', '    * @param ERC20Token Address of ERC20 token.\n', '    * @param recipient Account to receive tokens.\n', '    */\n', '    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '    /**\n', '    * @return true if `addr` is the owner of the contract.\n', '    */\n', '    function isOwner(address addr) public view returns (bool) {\n', '        return _owner[addr];\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '}']