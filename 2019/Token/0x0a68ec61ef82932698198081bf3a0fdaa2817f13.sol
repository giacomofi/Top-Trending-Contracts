['pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract EthereumChain is ERC20Interface {\n', '    using SafeMath for uint256;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 _totalSupply;\n', '    address public owner;\n', '    bool public activeStatus = true;\n', '\n', '    event Active(address msgSender);\n', '    event Reset(address msgSender);\n', '    event Burn(address indexed from, uint256 value);\n', '    event Freeze(address indexed from, uint256 value);\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => uint256) public freezeOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    constructor() public {\n', '        symbol = "ETOL";\n', '        name = "EthereumChain";\n', '        decimals = 18;\n', '        _totalSupply = 100000000000 * 10**uint(decimals);\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function isOwner(address add) public view returns (bool) {\n', '      if (add == owner) {\n', '        return true;\n', '      } else return false;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '    if (!isOwner(msg.sender)) {\n', '            revert();\n', '         }\n', '    _;\n', '    }\n', '\n', '    modifier onlyActive {\n', '     if (!activeStatus) {\n', '            revert();\n', '        }\n', '    _;\n', '    }\n', '\n', '    function activeMode() public onlyOwner {\n', '        activeStatus = true;\n', '        emit Active(msg.sender);\n', '    }\n', '\n', '    function resetMode() public onlyOwner {\n', '        activeStatus = false;\n', '        emit Reset(msg.sender);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public onlyActive returns (bool success) {\n', '        if (to == address(0)) {\n', '            revert();\n', '        }\n', '    \tif (value <= 0) {\n', '    \t\trevert();\n', '        }\n', '        if (balances[msg.sender] < value) {\n', '            revert();\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public onlyActive returns (bool success) {\n', '        if (value <= 0) {\n', '            revert();\n', '        }\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public onlyActive returns (bool success) {\n', '        if (to == address(0)) {\n', '            revert();\n', '        }\n', '        if (value <= 0) {\n', '            revert();\n', '        }\n', '        if (balances[from] < value) {\n', '            revert();\n', '        }\n', '        if (value > allowed[from][msg.sender]) {\n', '            revert();\n', '        }\n', '        balances[from] = balances[from].sub(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 value) public onlyActive returns (bool success) {\n', '        if (balances[msg.sender] < value) {\n', '            revert();\n', '        }\n', '\t\tif (value <= 0) {\n', '\t\t    revert();\n', '\t\t}\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '\tfunction freeze(uint256 value) public onlyActive returns (bool success) {\n', '        if (balances[msg.sender] < value) {\n', '            revert();\n', '        }\n', '\t\tif (value <= 0){\n', '\t\t    revert();\n', '\t\t}\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        freezeOf[msg.sender] = freezeOf[msg.sender].add(value);\n', '        emit Freeze(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '\tfunction unfreeze(uint256 value) public onlyActive returns (bool success) {\n', '        if (freezeOf[msg.sender] < value) {\n', '            revert();\n', '        }\n', '\t\tif (value <= 0) {\n', '\t\t    revert();\n', '\t\t}\n', '        freezeOf[msg.sender] = freezeOf[msg.sender].sub(value);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(value);\n', '        emit Unfreeze(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function () external payable {\n', '        revert();\n', '    }\n', '}']