['pragma solidity ^0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != owner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenERC20 is owned {\n', '    using SafeMath for uint;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value)  internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    \n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(address addr, uint256 _value) onlyOwner public returns (bool success) {\n', '        balanceOf[addr] = balanceOf[addr].sub(_value);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(addr, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '    \n', '\n', '\n', '\n', 'contract TOSC is owned, TokenERC20 {\n', '    using SafeMath for uint;\n', '    mapping (address => bool) public frozenAddress;\n', '    mapping (address => bool) percentLockedAddress;\n', '    mapping (address => uint256) percentLockAvailable;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event PercentLocked(address target, uint percentage, uint256 availableValue);\n', '    event PercentLockRemoved(address target);\n', '    \n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor (\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '    \n', '\n', '   /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '        require(!frozenAddress[_from]);                     // Check if sender is frozen\n', '        require(!frozenAddress[_to]);                       // Check if recipient is frozen\n', '        if(percentLockedAddress[_from] == true){\n', '            require(_value <= percentLockAvailable[_from]);\n', '            percentLockAvailable[_from] = percentLockAvailable[_from].sub(_value);\n', '        }\n', '        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAddress(address target, bool freeze) onlyOwner public {\n', '        frozenAddress[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    \n', '    function PercentLock(address target,uint percentage, uint256 available) onlyOwner public{\n', '    \n', '        percentLockedAddress[target] = true;\n', '        percentLockAvailable[target] = available;\n', '  \n', '        emit PercentLocked(target, percentage, available);\n', '    }\n', '    \n', '    function removePercentLock(address target)onlyOwner public{\n', '        percentLockedAddress[target] = false;\n', '        percentLockAvailable[target] = 0;\n', '        emit PercentLockRemoved(target);\n', '    }\n', '    \n', '    \n', '    \n', '    function sendTransfer(address _from, address _to, uint256 _value)onlyOwner external{\n', '        _transfer(_from, _to, _value);\n', '    }\n', '  \n', '    \n', '    \n', '\n', '    function getBalance(address addr) external view onlyOwner returns(uint256){\n', '        return balanceOf[addr];\n', '    }\n', '    \n', '    function getfrozenAddress(address addr) onlyOwner external view returns(bool){\n', '        return frozenAddress[addr];\n', '    }\n', '    \n', '    function getpercentLockedAccount(address addr) onlyOwner external view returns(bool){\n', '        return percentLockedAddress[addr];\n', '    }\n', '    \n', '    \n', '    function getpercentLockAvailable(address addr) onlyOwner external view returns(uint256){\n', '        return percentLockAvailable[addr];\n', '    }\n', '\n', '}']