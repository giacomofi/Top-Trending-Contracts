['pragma solidity ^0.4.24;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint _a, uint _b) public pure returns (uint c) {\n', '        c = _a + _b;\n', '        require(c >= _a);\n', '    }\n', '    function safeSub(uint _a, uint _b) public pure returns (uint c) {\n', '        require(_b <= _a);\n', '        c = _a - _b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address _tokenOwner) public view returns (uint balance);\n', '    function allowance(address _tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address _to, uint _tokens) public returns (bool success);\n', '    function approve(address _spender, uint _tokens) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _tokens);\n', '    event Approval(address indexed _tokenOwner, address indexed _spender, uint _tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address _from, uint256 _tokens, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '\n', 'contract TestCoin is ERC20Interface, Pausable, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\n', '    constructor() public {\n', '        symbol = "TTC";\n', '        name = "TestCoin";\n', '        decimals = 0;\n', '        _totalSupply = 1000000;\n', '        balances[0x2FFFA2252DE563d6a3430e970eA47A5C7C79aa1a] = _totalSupply;\n', '        emit Transfer(address(0), 0x2FFFA2252DE563d6a3430e970eA47A5C7C79aa1a, _totalSupply);\n', '    }\n', '\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address _tokenOwner) public view returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function transfer(address _to, uint _tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        emit Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _tokens) public whenNotPaused  returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _tokens) public whenNotPaused returns (bool success) {\n', '        balances[_from] = safeSub(balances[_from], _tokens);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        emit Transfer(_from, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _tokens, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _tokens, this, _extraData);\n', '        return true;\n', '    }\n', '}']