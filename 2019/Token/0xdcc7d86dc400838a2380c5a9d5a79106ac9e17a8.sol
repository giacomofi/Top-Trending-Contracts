['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n', '\n', 'contract SafeMath {\n', '    \n', '    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns (uint256 z) {\n', '        require(x <= MAX_UINT256 - y);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) internal returns (uint256 z) {\n', '        require(x >= y);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        require(x <= (MAX_UINT256 / y));\n', '        return x * y;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public originalOwner;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        originalOwner = msg.sender;\n', '        owner = originalOwner;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != owner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 is SafeMath, Owned{\n', '    // Name of token\n', '    string public name;\n', '    // Abbreviation of tokens name\n', '    string public symbol;\n', '    // Number of decimals token has\n', '    uint8 public decimals;\n', '    // Maximum tokens that can be minted\n', '    uint256 public totalSupply;\n', '\n', '\n', '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', "    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \n", '    address payable fundsWallet;           // Where should the raised ETH go?\n', '\n', '    // Map of users balances\n', '    mapping (address => uint256) public balanceOf;\n', '    // Map of users allowances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    // Map of frozen accounts\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event FrozenFunds(address target, bool frozen);\n', '    // This notifies clients about the amount minted\n', '    event Mint(address indexed _to, uint256 _value);\n', '\n', '\n', '\n', '    function() payable external{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        require(balanceOf[fundsWallet] >= amount);\n', '\n', '        balanceOf[fundsWallet] = balanceOf[fundsWallet] - amount;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender] + amount;\n', '\n', '        fundsWallet.transfer(msg.value); // Transfers ETH from msg.sender to fundsWallet\n', '        emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain                           \n', '    }\n', '\n', '    function setUnitsOneEthCanBuy(uint256 amount)onlyOwner public returns (bool success){\n', '        unitsOneEthCanBuy = amount;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns number of tokens in circulation\n', '    *\n', '    * @return total number od tokens\n', '    */\n', '    function getTotalSupply() public returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(!frozenAccount[_from]);                                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                                       // Check if recipient is frozen\n', '        require (_to != address(0x0));                                      // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);                               // Check if the sender has enough\n', '        require (safeAdd(balanceOf[_to], _value) >= balanceOf[_to]);        // Check for overflows\n', '        uint previousBalances = safeAdd(balanceOf[_from], balanceOf[_to]);  // Save this for an assertion in the future\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);               // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);                   // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '        assert(safeAdd(balanceOf[_from], balanceOf[_to]) == previousBalances);      // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public returns (bool success){\n', '        totalSupply = safeAdd(totalSupply, mintedAmount);\n', '        balanceOf[target] = safeAdd(balanceOf[target], mintedAmount);\n', '        emit Mint(target, mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `burnAmount` tokens from the system irreversibly\n', '     *\n', '     * @param burnAmount the amount of money to burn\n', '     */\n', '    function burn(uint256 burnAmount) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= burnAmount);                           // Check if the sender has enough\n', '        totalSupply = safeSub(totalSupply, burnAmount);                         // Subtract from total supply\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], burnAmount);     // Subtract from the sender\n', '        emit Burn(msg.sender, burnAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                                  // Check if the targeted balance is enough\n', '        totalSupply = safeSub(totalSupply, _value);                           // Update supply\n', '        require(_value <= allowance[_from][msg.sender]);                      // Check allowance\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);                           // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);   // Subtract from the sender's allowance\n", '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public returns (bool success) {\n', '        frozenAccount[target] = freeze;                         // Freeze target address\n', '        emit FrozenFunds(target, freeze);\n', '        return true;\n', '    }\n', '    \n', '    /// destroy the contract and reclaim the leftover funds.\n', '    function kill() onlyOwner public returns (bool killed){\n', '        selfdestruct(msg.sender);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract FinalToken is TokenERC20{\n', '    uint256 tokenamount;\n', '    \n', '    /**\n', '    * @dev Intialises token and all the necesary variable\n', '    */\n', '    constructor() public{\n', '        name = "XY Oracle";\n', '        symbol = "XYO";\n', '        decimals = 18;\n', '        tokenamount = 14198847000;\n', '\n', '        fundsWallet = msg.sender;\n', '        unitsOneEthCanBuy = 70000;\n', '\n', '        totalSupply = tokenamount * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '}']