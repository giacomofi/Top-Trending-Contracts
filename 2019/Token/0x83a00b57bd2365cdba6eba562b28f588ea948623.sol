['pragma solidity ^0.4.24;\n', '\n', 'contract AraniumToken {\n', '  using SafeMath for uint;\n', '  using SafeERC20 for AraniumToken;\n', '\n', '  string public name = "Aranium";\n', '  string public constant symbol = "ARA";\n', '  uint8 public constant decimals = 18;\n', '  uint public constant decimalsFactor = 10 ** uint(decimals);\n', '  uint public cap = 3800000000 * decimalsFactor;\n', '\n', '  address public owner;\n', '  mapping (address => bool) public companions;\n', '  address[] public companionsList;\n', '  bool public paused = false;\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  bool public mintingFinished = false;\n', '\n', '  modifier onlyOwner() {\n', '    require((msg.sender == owner) || (companions[msg.sender]));\n', '    _;\n', '  }\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  event CompanionAdded(address indexed _companion);\n', '  event CompanionRemoved(address indexed _companion);\n', '  event Pause();\n', '  event Unpause();\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event MintFinishedChanged();\n', '  event NameChanged();\n', '  event CapChanged(uint256 oldVal, uint256 newVal);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    totalSupply_ = cap;\n', '    balances[msg.sender] = totalSupply_;\n', '    mintingFinished = true;\n', '  }\n', '\n', '\n', '  function setName(string _name) onlyOwner public {\n', '    require(bytes(_name).length != 0);\n', '    name = _name;\n', '    emit NameChanged();\n', '  }\n', '\n', '  function setCap(uint256 _cap) onlyOwner public {\n', '    require(cap > 0);\n', '    require(_cap >= totalSupply_);\n', '    uint256 old = cap;\n', '    cap = _cap;\n', '    emit CapChanged(old, cap);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) whenNotPaused public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '\n', '  function addCompanion(address _companion) onlyOwner public {\n', '    require(_companion != address(0));\n', '    companions[_companion] = true;\n', '    companionsList.push(_companion);\n', '    emit CompanionAdded(_companion);\n', '  }\n', '\n', '  function removeCompanion(address _companion) onlyOwner public {\n', '    require(_companion != address(0));\n', '    companions[_companion] = false;\n', '    // -- companionsList element remains, for record purposes.\n', '    emit CompanionRemoved(_companion);\n', '  }\n', '\n', '  // -- onlyOwner: returns 0 in MEW.\n', '  function companionsListCount() onlyOwner public view returns (uint256) {\n', '    return companionsList.length;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount); // -- 0x0 means mint.\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '  function setMintingFinish(bool m) onlyOwner public returns (bool) {\n', '    mintingFinished = m;\n', '    emit MintFinishedChanged();\n', '    return true;\n', '  }\n', '\n', '  function reclaimToken(AraniumToken token) onlyOwner external {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, throws on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '  function safeTransfer(AraniumToken token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(AraniumToken token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(AraniumToken token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '\n', '}']