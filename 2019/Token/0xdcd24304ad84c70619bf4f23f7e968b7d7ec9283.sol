['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Owned {\n', '\taddress private Owner;\n', '\t\n', '\tfunction Owned() public{\n', '\t    \n', '\t    Owner = msg.sender;\n', '\t}\n', '    \n', '\tfunction IsOwner(address addr) view public returns(bool)\n', '\t{\n', '\t    return Owner == addr;\n', '\t}\n', '\t\n', '\tfunction TransferOwner(address newOwner) public onlyOwner\n', '\t{\n', '\t    Owner = newOwner;\n', '\t}\n', '\t\n', '\tfunction Terminate() public onlyOwner\n', '\t{\n', '\t    selfdestruct(Owner);\n', '\t}\n', '\t\n', '\tmodifier onlyOwner(){\n', '        require(msg.sender == Owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract EB is Owned {\n', '    using SafeMath for uint256;\n', '    string public constant name = "e-balance coin (EBCoin)";\n', '    string public constant symbol = "EB";\n', '    uint256 public constant decimals = 18;  // 18 is the most common number of decimal places\n', '    bool private tradeable;\n', '    uint256 private currentSupply;\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping(address=> uint256)) private allowed;\n', '    mapping(address => bool) private lockedAccounts;  \n', '\t\n', '\t/*\n', '\t\tIncoming Ether\n', '\t*/\t\n', '    event ReceivedEth(address indexed _from, uint256 _value);\n', '\t//this is the fallback\n', '\tfunction () payable public {\n', '\t\temit ReceivedEth(msg.sender, msg.value);\t\t\n', '\t}\n', '\t\n', '\tevent TransferredEth(address indexed _to, uint256 _value);\n', '\tfunction FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner\n', '\t{\n', '\t\trequire(address(this).balance >= amtEth && balances[this] >= amtToken );\n', '\t\t\n', '\t\tif(amtEth >0)\n', '\t\t{\n', '\t\t\t_to.transfer(amtEth);\n', '\t\t\temit TransferredEth(_to, amtEth);\n', '\t\t}\n', '\t\t\n', '\t\tif(amtToken > 0)\n', '\t\t{\n', '\t\t\trequire(balances[_to] + amtToken > balances[_to]);\n', '\t\t\tbalances[this] -= amtToken;\n', '\t\t\tbalances[_to] += amtToken;\n', '\t\t\temit Transfer(this, _to, amtToken);\n', '\t\t}\n', '\t\t\n', '\t\t\n', '\t}\t\n', '\t/*\n', '\t\tEnd Incoming Ether\n', '\t*/\n', '\t\n', '\t\n', '\t\n', '    function EB( ) public\n', '    {\n', '        uint256 initialTotalSupply = 40000000;\n', '        balances[this] = initialTotalSupply * (10**decimals);\n', '        \n', '        currentSupply =  initialTotalSupply * (10**decimals);\n', '\t    emit Transfer(address(0), this, currentSupply);\n', '        \n', '    }\n', '  \n', '\tuint256 constant startTime = 1556928000; // Date.UTC(20198, 5, 4) as seconds\n', '\tuint256 constant startAmt = 95000000;\n', '\tuint256 _lastDayPaid = 0;\n', '\tuint256 _currentMonth = 0;\n', '\tuint256 factor = 10000000;\n', '\t\n', '    event DayMinted(uint256 day,uint256 val, uint256 now);\n', '    function DailyMint() public {\n', '        uint256 day = (now-startTime)/(60*60*24);\n', '        require(startTime <= now);\n', '        require(day >= _lastDayPaid);\n', '        uint256 month = _lastDayPaid/30;\n', '        if(month > _currentMonth){\n', '            _currentMonth += 1;\n', '            factor = (factor * 99)/100;\n', '        }\n', '        uint256 todaysPayout = (((factor * startAmt )/10000000)/30)* (10**decimals);\n', '        balances[this] +=todaysPayout;\n', '        currentSupply += todaysPayout;\n', '        emit Transfer(address(0), this, todaysPayout);\n', '        emit DayMinted(_lastDayPaid, todaysPayout, now);\n', '        _lastDayPaid+=1;\n', '\t\n', '    }\n', '    function lastDayPaid() public view returns(uint256){\n', '        return _lastDayPaid;\n', '    }\n', '    \n', '\n', '    \n', '    \n', '\tfunction MintToken(uint256 amt) public onlyOwner {\n', '\t    currentSupply += amt;\n', '\t    balances[this] += amt;\n', '\t    emit Transfer(address(0), this, amt);\n', '\t}\n', '\t\n', '\tfunction DestroyToken(uint256 amt) public onlyOwner {\n', '\t    require ( balances[this] >= amt);\n', '\t    currentSupply -= amt;\n', '\t    balances[this] -= amt;\n', '\t    emit Transfer(this,address(0), amt);\n', '\t}\n', '\t\n', '\t\n', '\t\n', '    event SoldToken(address _buyer, uint256 _value, string note);\n', '    function BuyToken(address _buyer, uint256 _value, string note) public onlyOwner\n', '    {\n', '\t\trequire(balances[this] >= _value && balances[_buyer] + _value > balances[_buyer]);\n', '\t\t\n', '        emit SoldToken( _buyer,  _value,  note);\n', '        balances[this] -= _value;\n', '        balances[_buyer] += _value;\n', '        emit Transfer(this, _buyer, _value);\n', '    }\n', '    \n', '    function LockAccount(address toLock) public onlyOwner\n', '    {\n', '        lockedAccounts[toLock] = true;\n', '    }\n', '    function UnlockAccount(address toUnlock) public onlyOwner\n', '    {\n', '        delete lockedAccounts[toUnlock];\n', '    }\n', '    \n', '    function SetTradeable(bool t) public onlyOwner\n', '    {\n', '        tradeable = t;\n', '    }\n', '    function IsTradeable() public view returns(bool)\n', '    {\n', '        return tradeable;\n', '    }\n', '    \n', '    \n', '    function totalSupply() constant public returns (uint256)\n', '    {\n', '        return currentSupply;\n', '    }\n', '    function balanceOf(address _owner) constant public returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {\n', '        require(tradeable);\n', '         if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '             emit Transfer( msg.sender, _to,  _value);\n', '             balances[msg.sender] -= _value;\n', '             balances[_to] += _value;\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {\n', '        require(!lockedAccounts[_from] && !lockedAccounts[_to]);\n', '\t\trequire(tradeable);\n', '        if (balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && balances[_to] + _value > balances[_to]) {\n', '                \n', '            emit Transfer( _from, _to,  _value);\n', '                \n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '   \n', '   modifier notLocked(){\n', '       require (!lockedAccounts[msg.sender]);\n', '       _;\n', '   }\n', '}']