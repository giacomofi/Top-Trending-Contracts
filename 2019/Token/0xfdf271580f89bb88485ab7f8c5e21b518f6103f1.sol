['// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param from address The account whose tokens will be burned.\n', '     * @param value uint256 The amount of token to be burned.\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        _burnFrom(from, value);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the average of two numbers. Since these are integers,\n', '     * averages of an even and odd number cannot be represented, and will be\n', '     * rounded down.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/library/Snapshots.sol\n', '\n', '/**\n', ' * @title Snapshot\n', ' * @dev Utility library of the Snapshot structure, including getting value.\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', 'library Snapshots {\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @notice This structure stores the historical value associate at a particular blocknumber\n', '     * @param fromBlock The blocknumber of the creation of the snapshot\n', '     * @param value The value to be recorded\n', '     */\n', '    struct Snapshot {\n', '        uint256 fromBlock;\n', '        uint256 value;\n', '    }\n', '\n', '    struct SnapshotList {\n', '        Snapshot[] history;\n', '    }\n', '\n', '    /**\n', '     * @notice This function creates snapshots for certain value...\n', '     * @dev To avoid having two Snapshots with the same block.number, we check if the last\n', '     * existing one is the current block.number, we update the last Snapshot\n', '     * @param item The SnapshotList to be operated\n', '     * @param _value The value associated the the item that is going to have a snapshot\n', '     */\n', '    function createSnapshot(SnapshotList storage item, uint256 _value) internal {\n', '        uint256 length = item.history.length;\n', '        if (length == 0 || (item.history[length.sub(1)].fromBlock < block.number)) {\n', '            item.history.push(Snapshot(block.number, _value));\n', '        } else {\n', '            // When the last existing snapshot is ready to be updated\n', '            item.history[length.sub(1)].value = _value;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Find the index of the item in the SnapshotList that contains information\n', '     * corresponding to the blockNumber. (FindLowerBond of the array)\n', '     * @dev The binary search logic is inspired by the Arrays.sol from Openzeppelin\n', '     * @param item The list of Snapshots to be queried\n', '     * @param blockNumber The block number of the queried moment\n', '     * @return The index of the Snapshot array\n', '     */\n', '    function findBlockIndex(\n', '        SnapshotList storage item, \n', '        uint256 blockNumber\n', '    ) \n', '        internal\n', '        view \n', '        returns (uint256)\n', '    {\n', '        // Find lower bound of the array\n', '        uint256 length = item.history.length;\n', '\n', '        // Return value for extreme cases: If no snapshot exists and/or the last snapshot\n', '        if (item.history[length.sub(1)].fromBlock <= blockNumber) {\n', '            return length.sub(1);\n', '        } else {\n', '            // Need binary search for the value\n', '            uint256 low = 0;\n', '            uint256 high = length.sub(1);\n', '\n', '            while (low < high.sub(1)) {\n', '                uint256 mid = Math.average(low, high);\n', '                // mid will always be strictly less than high and it rounds down\n', '                if (item.history[mid].fromBlock <= blockNumber) {\n', '                    low = mid;\n', '                } else {\n', '                    high = mid;\n', '                }\n', '            }\n', '            return low;\n', '        }   \n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the value of the corresponding Snapshot\n', '     * @param item The list of Snapshots to be queried\n', '     * @param blockNumber The block number of the queried moment\n', '     * @return The value of the queried moment\n', '     */\n', '    function getValueAt(\n', '        SnapshotList storage item, \n', '        uint256 blockNumber\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (item.history.length == 0 || blockNumber < item.history[0].fromBlock) {\n', '            return 0;\n', '        } else {\n', '            uint256 index = findBlockIndex(item, blockNumber);\n', '            return item.history[index].value;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/IERC20Snapshot.sol\n', '\n', '/**\n', ' * @title Interface ERC20 SnapshotToken (abstract contract)\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;  \n', '\n', '\n', '/* solhint-disable no-empty-blocks */\n', 'interface IERC20Snapshot {   \n', '    /**\n', '    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at `_blockNumber`\n', '    */\n', '    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\n', '\n', '    /**\n', '    * @notice Total amount of tokens at a specific `_blockNumber`.\n', '    * @param _blockNumber The block number when the totalSupply is queried\n', '    * @return The total amount of tokens at `_blockNumber`\n', '    */\n', '    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Snapshot.sol\n', '\n', '/**\n', ' * @title Snapshot Token\n', ' * @dev This is an ERC20 compatible token that takes snapshots of account balances.\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity 0.5.7;  \n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Snapshot is ERC20, IERC20Snapshot {\n', '    using Snapshots for Snapshots.SnapshotList;\n', '\n', '    mapping(address => Snapshots.SnapshotList) private _snapshotBalances; \n', '    Snapshots.SnapshotList private _snapshotTotalSupply;   \n', '\n', '    event AccountSnapshotCreated(address indexed account, uint256 indexed blockNumber, uint256 value);\n', '    event TotalSupplySnapshotCreated(uint256 indexed blockNumber, uint256 value);\n', '\n', '    /**\n', '     * @notice Return the historical supply of the token at a certain time\n', '     * @param blockNumber The block number of the moment when token supply is queried\n', '     * @return The total supply at "blockNumber"\n', '     */\n', '    function totalSupplyAt(uint256 blockNumber) external view returns (uint256) {\n', '        return _snapshotTotalSupply.getValueAt(blockNumber);\n', '    }\n', '\n', '    /**\n', '     * @notice Return the historical balance of an account at a certain time\n', '     * @param owner The address of the token holder\n', '     * @param blockNumber The block number of the moment when token supply is queried\n', '     * @return The balance of the queried token holder at "blockNumber"\n', '     */\n', '    function balanceOfAt(address owner, uint256 blockNumber) \n', '        external \n', '        view \n', '        returns (uint256) \n', '    {\n', '        return _snapshotBalances[owner].getValueAt(blockNumber);\n', '    }\n', '\n', '    /** OVERRIDE\n', '     * @notice Transfer tokens between two accounts while enforcing the update of Snapshots\n', '     * @param from The address to transfer from\n', '     * @param to The address to transfer to\n', '     * @param value The amount to be transferred\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        super._transfer(from, to, value);\n', '\n', '        _snapshotBalances[from].createSnapshot(balanceOf(from));\n', '        _snapshotBalances[to].createSnapshot(balanceOf(to));\n', '\n', '        emit AccountSnapshotCreated(from, block.number, balanceOf(from));\n', '        emit AccountSnapshotCreated(to, block.number, balanceOf(to));\n', '    }\n', '\n', '    /** OVERRIDE\n', '     * @notice Mint tokens to one account while enforcing the update of Snapshots\n', '     * @param account The address that receives tokens\n', '     * @param value The amount of tokens to be created\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        super._mint(account, value);\n', '\n', '        _snapshotBalances[account].createSnapshot(balanceOf(account));\n', '        _snapshotTotalSupply.createSnapshot(totalSupply());\n', '        \n', '        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\n', '        emit TotalSupplySnapshotCreated(block.number, totalSupply());\n', '    }\n', '\n', '    /** OVERRIDE\n', '     * @notice Burn tokens of one account\n', '     * @param account The address whose tokens will be burnt\n', '     * @param value The amount of tokens to be burnt\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        super._burn(account, value);\n', '\n', '        _snapshotBalances[account].createSnapshot(balanceOf(account));\n', '        _snapshotTotalSupply.createSnapshot(totalSupply());\n', '\n', '        emit AccountSnapshotCreated(account, block.number, balanceOf(account));\n', '        emit TotalSupplySnapshotCreated(block.number, totalSupply());\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20ForcedTransfer.sol\n', '\n', '/**\n', ' * @title ERC20Confiscatable\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;  \n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20ForcedTransfer is Ownable, ERC20 {\n', '    /*** EVENTS ***/\n', '    event ForcedTransfer(address indexed account, uint256 amount, address indexed receiver);\n', '\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @notice takes funds from _confiscatee and sends them to _receiver\n', "    * @param _confiscatee address who's funds are being confiscated\n", "    * @param _receiver address who's receiving the funds \n", '    * @param _amount uint256 amount of tokens to force transfer away\n', '    */\n', '    function forceTransfer(address _confiscatee, address _receiver, uint256 _amount) public onlyOwner {\n', '        _transfer(_confiscatee, _receiver, _amount);\n', '\n', '        emit ForcedTransfer(_confiscatee, _amount, _receiver);\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Utils.sol\n', '\n', '/**\n', ' * @title Manageable Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', 'pragma solidity 0.5.7;\n', '\n', '\n', 'contract Utils {\n', '    /** MODIFIERS **/\n', '    modifier onlyValidAddress(address _address) {\n', '        require(_address != address(0), "invalid address");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/management/Manageable.sol\n', '\n', '/**\n', ' * @title Manageable Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', ' pragma solidity 0.5.7;\n', '\n', '\n', '\n', 'contract Manageable is Ownable, Utils {\n', '    mapping(address => bool) public isManager;     // manager accounts\n', '\n', '    /** EVENTS **/\n', '    event ChangedManager(address indexed manager, bool active);\n', '\n', '    /** MODIFIERS **/\n', '    modifier onlyManager() {\n', '        require(isManager[msg.sender], "is not manager");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice constructor sets the deployer as a manager\n', '    */\n', '    constructor() public {\n', '        setManager(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @notice enable/disable an account to be a manager\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n', '        isManager[_manager] = _active;\n', '        emit ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /** OVERRIDE \n', '    * @notice does not allow owner to give up ownership\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        revert("Cannot renounce ownership");\n', '    }\n', '}\n', '\n', '// File: contracts/whitelist/GlobalWhitelist.sol\n', '\n', '/**\n', ' * @title Global Whitelist Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', 'contract GlobalWhitelist is Ownable, Manageable {\n', "    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\n", '    bool public isWhitelisting = true;             // whitelisting enabled by default\n', '\n', '    /** EVENTS **/\n', '    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\n', '    event GlobalWhitelistDisabled(address indexed manager);\n', '    event GlobalWhitelistEnabled(address indexed manager);\n', '\n', '    /**\n', '    * @dev add an address to the whitelist\n', '    * @param _address address\n', '    */\n', '    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n', '        isWhitelisted[_address] = true;\n', '        emit ChangedWhitelisting(_address, true);\n', '    }\n', '\n', '    /**\n', '    * @dev add addresses to the whitelist\n', '    * @param _addresses addresses array\n', '    */\n', '    function addAddressesToWhitelist(address[] calldata _addresses) external {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            addAddressToWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address from the whitelist\n', '    * @param _address address\n', '    */\n', '    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n', '        isWhitelisted[_address] = false;\n', '        emit ChangedWhitelisting(_address, false);\n', '    }\n', '\n', '    /**\n', '    * @dev remove addresses from the whitelist\n', '    * @param _addresses addresses\n', '    */\n', '    function removeAddressesFromWhitelist(address[] calldata _addresses) external {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            removeAddressFromWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /** \n', '    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\n', '    */\n', '    function toggleWhitelist() external onlyOwner {\n', '        isWhitelisting = isWhitelisting ? false : true;\n', '\n', '        if (isWhitelisting) {\n', '            emit GlobalWhitelistEnabled(msg.sender);\n', '        } else {\n', '            emit GlobalWhitelistDisabled(msg.sender);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Whitelist.sol\n', '\n', '/**\n', ' * @title ERC20Whitelist\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;  \n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Whitelist is Ownable, ERC20 {   \n', '    GlobalWhitelist public whitelist;\n', '    bool public isWhitelisting = true;  // default to true\n', '\n', '    /** EVENTS **/\n', '    event ESTWhitelistingEnabled();\n', '    event ESTWhitelistingDisabled();\n', '\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @notice disables whitelist per individual EST\n', '    * @dev parnent contract, ExporoTokenFactory, is owner\n', '    */\n', '    function toggleWhitelist() external onlyOwner {\n', '        isWhitelisting = isWhitelisting ? false : true;\n', '        \n', '        if (isWhitelisting) {\n', '            emit ESTWhitelistingEnabled();\n', '        } else {\n', '            emit ESTWhitelistingDisabled();\n', '        }\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return bool\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (checkWhitelistEnabled()) {\n', '            checkIfWhitelisted(msg.sender);\n', '            checkIfWhitelisted(_to);\n', '        }\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    * @return bool\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (checkWhitelistEnabled()) {\n', '            checkIfWhitelisted(_from);\n', '            checkIfWhitelisted(_to);\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev check if whitelisting is in effect versus local and global bools\n', '    * @return bool\n', '    */\n', '    function checkWhitelistEnabled() public view returns (bool) {\n', '        // local whitelist\n', '        if (isWhitelisting) {\n', '            // global whitelist\n', '            if (whitelist.isWhitelisting()) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /*** INTERNAL/PRIVATE ***/\n', '    /**\n', '    * @dev check if the address has been whitelisted by the Whitelist contract\n', '    * @param _account address of the account to check\n', '    */\n', '    function checkIfWhitelisted(address _account) internal view {\n', '        require(whitelist.isWhitelisted(_account), "not whitelisted");\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20DocumentRegistry.sol\n', '\n', '/**\n', ' * @title ERC20 Document Registry Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', ' \n', ' pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice Prospectus and Quarterly Reports stored hashes via IPFS\n', ' * @dev read IAgreement for details under /contracts/neufund/standards\n', '*/\n', '// solhint-disable not-rely-on-time\n', 'contract ERC20DocumentRegistry is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct HashedDocument {\n', '        uint256 timestamp;\n', '        string documentUri;\n', '    }\n', '\n', '    // array of all documents \n', '    HashedDocument[] private _documents;\n', '\n', '    event LogDocumentedAdded(string documentUri, uint256 indexed documentIndex);\n', '\n', '    /**\n', "    * @notice adds a document's uri from IPFS to the array\n", '    * @param documentUri string\n', '    */\n', '    function addDocument(string calldata documentUri) external onlyOwner {\n', '        require(bytes(documentUri).length > 0, "invalid documentUri");\n', '\n', '        HashedDocument memory document = HashedDocument({\n', '            timestamp: block.timestamp,\n', '            documentUri: documentUri\n', '        });\n', '\n', '        _documents.push(document);\n', '\n', '        emit LogDocumentedAdded(documentUri, _documents.length.sub(1));\n', '    }\n', '\n', '    /**\n', '    * @notice fetch the latest document on the array\n', '    * @return uint256, string, uint256 \n', '    */\n', '    function currentDocument() external view \n', '        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n', '            require(_documents.length > 0, "no documents exist");\n', '            uint256 last = _documents.length.sub(1);\n', '\n', '            HashedDocument storage document = _documents[last];\n', '            return (document.timestamp, document.documentUri, last);\n', '        }\n', '\n', '    /**\n', "    * @notice fetches a document's uri\n", '    * @param documentIndex uint256\n', '    * @return uint256, string, uint256 \n', '    */\n', '    function getDocument(uint256 documentIndex) external view\n', '        returns (uint256 timestamp, string memory documentUri, uint256 index) {\n', '            require(documentIndex < _documents.length, "invalid index");\n', '\n', '            HashedDocument storage document = _documents[documentIndex];\n', '            return (document.timestamp, document.documentUri, documentIndex);\n', '        }\n', '\n', '    /**\n', '    * @notice return the total amount of documents in the array\n', '    * @return uint256\n', '    */\n', '    function documentCount() external view returns (uint256) {\n', '        return _documents.length;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20BatchSend.sol\n', '\n', '/**\n', ' * @title Batch Send\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', 'contract ERC20BatchSend is ERC20 {\n', '    /**\n', '     * @dev Allows the transfer of token amounts to multiple addresses.\n', '     * @param beneficiaries Array of addresses that would receive the tokens.\n', '     * @param amounts Array of amounts to be transferred per beneficiary.\n', '     */\n', '    function batchSend(address[] calldata beneficiaries, uint256[] calldata amounts) external {\n', '        require(beneficiaries.length == amounts.length, "mismatched array lengths");\n', '\n', '        uint256 length = beneficiaries.length;\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            transfer(beneficiaries[i], amounts[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/exporo/ExporoToken.sol\n', '\n', '/**\n', ' * @title Exporo Token Contract\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ExporoToken is Ownable, ERC20Snapshot, ERC20Detailed, ERC20Burnable, ERC20ForcedTransfer, ERC20Whitelist, ERC20BatchSend, ERC20Pausable, ERC20DocumentRegistry {\n', '    /*** FUNCTIONS ***/\n', '    /**\n', '    * @dev constructor\n', '    * @param _name string\n', '    * @param _symbol string\n', '    * @param _decimal uint8\n', '    * @param _whitelist address\n', '    * @param _initialSupply uint256 initial total supply cap. can be 0\n', '    * @param _recipient address to recieve the tokens\n', '    */\n', '    /* solhint-disable */\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimal, address _whitelist, uint256 _initialSupply, address _recipient)\n', '        public \n', '        ERC20Detailed(_name, _symbol, _decimal) {\n', '            _mint(_recipient, _initialSupply);\n', '\n', '            whitelist = GlobalWhitelist(_whitelist);\n', '        }\n', '    /* solhint-enable */\n', '}']