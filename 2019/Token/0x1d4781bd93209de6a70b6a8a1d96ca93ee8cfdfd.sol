['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner,"Only the owner of the contract can use this function");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '    bool internal _paused;\n', '    \n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '    \n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract aaaaaa is ERC20Interface, Owned, Pausable {\n', '        \n', '    using SafeMath for uint;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint)blockedTime;\n', '   \n', '    uint _totalSupply;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public ownersRemaining;\n', '\n', '    event Pause(address indexed sender);\n', '    event Unpause(address indexed sender);\n', '    event Burn(address indexed from,address indexed to, uint tokens, address indexed sender);\n', '    event Mint(uint tokenIncrease, address indexed sender);\n', '    \n', '    constructor () public {\n', '        symbol = "IZT";\n', '        name = "iZiFinance Token";\n', '        decimals = 0;\n', '        _totalSupply = 10000000;\n', '        balances[owner] = _totalSupply;\n', '        ownersRemaining = 3;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    modifier notBlocked(){\n', '        require(blockedTime[msg.sender] <= now,"Blocked: There still blocked time remaining");\n', '        _;\n', '    }\n', '    \n', '    //ERC20\n', '    function totalSupply() public view returns (uint){\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance){\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\n', '        return allowed[tokenOwner][spender];        \n', '    }\n', '    \n', '    function transfer(address to, uint tokens) public whenNotPaused notBlocked returns (bool success){\n', '        require(balances[msg.sender] >= tokens,"Insufficient balance");\n', '        require(tokens > 0,"Can&#39;t send a negative amount of tokens");\n', '        require(to != address(0x0),"Can&#39;t send to a null address");\n', '        executeTransfer(msg.sender,to, tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public whenNotPaused notBlocked returns (bool success){\n', '        require(balances[msg.sender] >= tokens,"Insufficient amount of tokens");\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public whenNotPaused notBlocked returns (bool success){\n', '        require(balances[from] >= tokens,"Insufficient balance");\n', '        require(allowed[from][msg.sender] >= tokens,"Insufficient allowance");\n', '        require(tokens > 0,"Can&#39;t send a negative amount of tokens");\n', '        require(to != address(0x0),"Can&#39;t send to a null address");\n', '        executeTransfer(from, to, tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    //iZiFinance Token\n', '    function executeTransfer(address from,address to, uint tokens) private{\n', '        uint previousBalances = balances[from] + balances[to];\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        require((balances[from] + balances[to] == previousBalances),"The balance overflowed");\n', '    }\n', '    \n', '    //Pausable\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Pause(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpause(msg.sender);\n', '    }\n', '    \n', '    //Mintable\n', '    function mint(uint tokenIncrease) public whenNotPaused onlyOwner{\n', '        require(tokenIncrease > 0,"Can&#39;t mint a negative number");\n', '        uint oldTotalSupply = _totalSupply;\n', '        _totalSupply = _totalSupply.add(tokenIncrease);\n', '        balances[owner] = balances[owner].add(tokenIncrease);\n', '        emit Mint(tokenIncrease, msg.sender);\n', '        require(_totalSupply > oldTotalSupply,"Total supply overflowed");\n', '    }\n', '    \n', '    //Burnable\n', '    function burnTokens(address from, address to)public whenNotPaused onlyOwner{\n', '        require(to != address(0x0),"Can&#39;t send to a null address");\n', '        uint previousBalances = balances[from] + balances[to];\n', '        uint oldbalance = balanceOf(from);\n', '        balances[from] = balances[from].sub(oldbalance);\n', '        balances[address(0x0)] = balances[address(0x0)].add(oldbalance);\n', '        emit Transfer(from,address(0x0),oldbalance);\n', '        mint(oldbalance);\n', '        balances[owner] = balances[owner].sub(oldbalance);\n', '        balances[to] = balances[to].add(oldbalance);\n', '        emit Burn(from, to, oldbalance,msg.sender);\n', '        require((balances[from] + balances[to] == previousBalances),"The balance overflowed");\n', '    }\n', '    \n', '    //Initial Owner Transfer\n', '    function sendToOwners(address to, uint value) public whenNotPaused onlyOwner{\n', '        require(ownersRemaining > 0,"All initial owners were already set");\n', '        uint oldUsers = ownersRemaining;\n', '        executeTransfer(owner,to,value);\n', '        blockedTime[to] = now + 1095 days;\n', '        ownersRemaining = ownersRemaining - 1;\n', '        emit Transfer(owner, to, value);\n', '        assert(ownersRemaining < oldUsers);\n', '    }\n', '    \n', '    function seeBlockedTime(address adressBlocked) public view returns (uint){\n', '        return blockedTime[adressBlocked];\n', '    }\n', '    \n', '    function seeNow() public view returns (uint){\n', '        return now;\n', '    }\n', '    \n', '    //Fallback\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '}']