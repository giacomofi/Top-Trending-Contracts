['pragma solidity ^0.4.25;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0);\n', '    uint256 c = _a / _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Role is Ownable {\n', '\n', '    struct AdminGroup {\n', '        mapping (address => bool) administers;\n', '        mapping (address => uint) administerListIndex;\n', '        address[] administerList;\n', '        mapping (address => bool) pausers;\n', '        mapping (address => uint) pauserListIndex;\n', '        address[] pauserList;\n', '    }\n', '\n', '    AdminGroup private adminGroup;\n', '\n', '    modifier administerAndAbove() {\n', '        require(isAdminister(msg.sender) || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier pauserAndAbove() {\n', '        require(isPauser(msg.sender) || isAdminister(msg.sender) || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function isAdminister(address account) public view returns (bool) {\n', '        return adminGroup.administers[account];\n', '    }\n', '\n', '    function addAdminister(address account) public onlyOwner {\n', '        require(!isAdminister(account));\n', '        require(!isPauser(account));\n', '        if (account == owner) { revert(); }\n', '        adminGroup.administers[account] = true;\n', '        adminGroup.administerListIndex[account] = adminGroup.administerList.push(account)-1;\n', '        emit AdministerAdded(account);\n', '    }\n', '\n', '    function removeAdminister(address account) public onlyOwner {\n', '        require(isAdminister(account));\n', '        require(!isPauser(account));\n', '        if (adminGroup.administerListIndex[account]==0){\n', '            require(adminGroup.administerList[0] == account);\n', '        }\n', '\n', '        if (adminGroup.administerListIndex[account] >= adminGroup.administerList.length) return;\n', '\n', '        adminGroup.administers[account] = false;\n', '\n', '        for (uint i = adminGroup.administerListIndex[account]; i<adminGroup.administerList.length-1; i++){\n', '            adminGroup.administerList[i] = adminGroup.administerList[i+1];\n', '            adminGroup.administerListIndex[adminGroup.administerList[i+1]] = adminGroup.administerListIndex[adminGroup.administerList[i+1]]-1;\n', '        }\n', '        delete adminGroup.administerList[adminGroup.administerList.length-1];\n', '        delete adminGroup.administerListIndex[account];\n', '        adminGroup.administerList.length--;\n', '\n', '        emit AdministerRemoved(account);\n', '    }\n', '\n', '    function getAdministerList() view public returns(address[]) {\n', '        return adminGroup.administerList;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return adminGroup.pausers[account];\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        require(!isAdminister(account));\n', '        require(!isPauser(account));\n', '        require(account != owner);\n', '        adminGroup.pausers[account] = true;\n', '        adminGroup.pauserListIndex[account] = adminGroup.pauserList.push(account)-1;\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner{\n', '        require(isPauser(account));\n', '        require(!isAdminister(account));\n', '        if (adminGroup.pauserListIndex[account]==0){\n', '            require(adminGroup.pauserList[0] == account);\n', '        }\n', '\n', '        if (adminGroup.pauserListIndex[account] >= adminGroup.pauserList.length) return;\n', '\n', '        adminGroup.pausers[account] = false;\n', '\n', '        for (uint i = adminGroup.pauserListIndex[account]; i<adminGroup.pauserList.length-1; i++){\n', '            adminGroup.pauserList[i] = adminGroup.pauserList[i+1];\n', '            adminGroup.pauserListIndex[adminGroup.pauserList[i+1]] = adminGroup.pauserListIndex[adminGroup.pauserList[i+1]]-1;\n', '        }\n', '        delete adminGroup.pauserList[adminGroup.pauserList.length-1];\n', '        delete adminGroup.pauserListIndex[account];\n', '        adminGroup.pauserList.length--;\n', '\n', '        emit PauserRemoved(account);\n', '    }\n', '\n', '    function getPauserList() view public returns(address[]) {\n', '        return adminGroup.pauserList;\n', '    }\n', '\n', '    event AdministerAdded(address indexed account);\n', '    event AdministerRemoved(address indexed account);\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract PathHiveNetwork is Role, ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    mapping (address => bool) private _frozenAccount;\n', '    mapping (address => uint) private _frozenAccountIndex;\n', '    address[] private _frozenAccountList;\n', '    uint256 private _totalSupply;\n', '\n', '    bool private _paused = false;\n', '\n', '    constructor() public {}\n', '\n', '    function paused() public view returns(bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        if(msg.sender==owner){\n', '            _;\n', '        }else{\n', '            require(!_paused);\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public pauserAndAbove {\n', '        require(!_paused);\n', '        _paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    function unpause() public pauserAndAbove {\n', '        require(_paused);\n', '        _paused = false;\n', '        emit UnPaused();\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) public constant returns (uint256) {\n', '        return _balances[who];\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(amount);\n', '        _balances[to] = _balances[to].add(amount);\n', '        emit Transfer(from, to, amount);\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(!_frozenAccount[msg.sender]);\n', '        require(!_frozenAccount[to]);\n', '        require(msg.sender != to);\n', '        require(to != address(0));\n', '        require(amount > 0);\n', '\n', '        _transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(!_frozenAccount[from]);\n', '        require(!_frozenAccount[to]);\n', '        require(to != address(0));\n', '        require(amount > 0);\n', '\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(amount);\n', '        _transfer(from, to, amount);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool){\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool){\n', '        require(spender != address(0));\n', '        uint256 oldValue = _allowed[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function burn(address to, uint256 amount) onlyOwner public returns (bool){\n', '        require(amount > 0);\n', '        require(to != address(0));\n', '        require(amount <= _balances[to]);\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[to] = _balances[to].sub(amount);\n', '        emit Transfer(to, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public administerAndAbove returns (bool){\n', '        require(to != address(0));\n', '        require(amount > 0);\n', '        require(_totalSupply.add(amount) <= 3500000000  * (10 ** uint256(18)));\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[to] = _balances[to].add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) pauserAndAbove public {\n', '        require(target!=owner);\n', '        require(target!=msg.sender);\n', '        if(freeze){\n', '            require(!isFrozenAccount(target));\n', '            _frozenAccount[target] = freeze;\n', '            _frozenAccountIndex[target] = _frozenAccountList.push(target) - 1;\n', '            emit FrozenAccount(target, freeze);\n', '        }else{\n', '            require(isFrozenAccount(target));\n', '            if (_frozenAccountIndex[target]==0){\n', '                require(_frozenAccountList[0] == target);\n', '            }\n', '            for (uint i = _frozenAccountIndex[target]; i<_frozenAccountList.length-1; i++){\n', '                _frozenAccountList[i] = _frozenAccountList[i+1];\n', '                _frozenAccountIndex[_frozenAccountList[i+1]] = _frozenAccountIndex[_frozenAccountList[i+1]]-1;\n', '            }\n', '            delete _frozenAccountList[_frozenAccountList.length-1];\n', '            delete _frozenAccountIndex[target];\n', '            delete _frozenAccount[target];\n', '            _frozenAccountList.length--;\n', '            emit UnFrozenAccount(target, freeze);\n', '        }\n', '    }\n', '\n', '    function isFrozenAccount(address who) view public returns(bool) {\n', '        return _frozenAccount[who];\n', '    }\n', '\n', '    function getFrozenAccountList() view public returns(address[]) {\n', '        return _frozenAccountList;\n', '    }\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event Paused();\n', '    event UnPaused();\n', '    event FrozenAccount(address target, bool frozen);\n', '    event UnFrozenAccount(address target, bool frozen);\n', '}']