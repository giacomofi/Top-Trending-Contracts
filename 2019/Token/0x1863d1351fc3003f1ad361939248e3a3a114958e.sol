['/*\n', 'Implements a rate oracle (for EUR/ETH)\n', 'Operated by Capacity Blockchain Solutions GmbH.\n', 'No warranties.\n', '*/\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\OracleRequest.sol\n', '\n', '/*\n', 'Interface for requests to the rate oracle (for EUR/ETH)\n', 'Copy this to projects that need to access the oracle.\n', 'See rate-oracle project for implementation.\n', '*/\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract OracleRequest {\n', '\n', '    uint256 public EUR_WEI; //number of wei per EUR\n', '\n', '    uint256 public lastUpdate; //timestamp of when the last update occurred\n', '\n', '    function ETH_EUR() public view returns (uint256); //number of EUR per ETH (rounded down!)\n', '\n', '    function ETH_EURCENT() public view returns (uint256); //number of EUR cent per ETH (rounded down!)\n', '\n', '}\n', '\n', '// File: contracts\\Oracle.sol\n', '\n', '/*\n', 'Implements a rate oracle (for EUR/ETH)\n', '*/\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract Oracle is OracleRequest {\n', '    using SafeMath for uint256;\n', '\n', '    address public rateControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    constructor(address _rateControl, address _tokenAssignmentControl)\n', '    public\n', '    {\n', '        lastUpdate = 0;\n', '        rateControl = _rateControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '    }\n', '\n', '    modifier onlyRateControl()\n', '    {\n', '        require(msg.sender == rateControl, "rateControl key required for this function.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl, "tokenAssignmentControl key required for this function.");\n', '        _;\n', '    }\n', '\n', '    function setRate(uint256 _new_EUR_WEI)\n', '    public\n', '    onlyRateControl\n', '    {\n', '        lastUpdate = now;\n', '        require(_new_EUR_WEI > 0, "Please assign a valid rate.");\n', '        EUR_WEI = _new_EUR_WEI;\n', '    }\n', '\n', '    function ETH_EUR()\n', '    public view\n', '    returns (uint256)\n', '    {\n', '        return uint256(1 ether).div(EUR_WEI);\n', '    }\n', '\n', '    function ETH_EURCENT()\n', '    public view\n', '    returns (uint256)\n', '    {\n', '        return uint256(100 ether).div(EUR_WEI);\n', '    }\n', '\n', "    /*** Make sure currency doesn't get stranded in this contract ***/\n", '\n', "    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\n", '    function rescueToken(IERC20 _foreignToken, address _to)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\n', '    }\n', '\n', '    // Make sure this contract cannot receive ETH.\n', '    function() external\n', '    payable\n', '    {\n', '        revert("The contract cannot receive ETH payments.");\n', '    }\n', '}']