['pragma solidity ^0.5.0;\n', '\n', '/* \n', '   ----------------------------------------------------------------------------\n', '   ERC-20 Token: Fixed supply with ICO \n', '   \n', '*/\n', '\n', '\n', '// -- Safe Math library - integer overflow prevention (OpenZeppelin) --\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// -- ERC-20 Token Standard interface --\n', '// based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// -- Contract function - receive approval and execute function in one call --\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '\n', '// -- Owned Contract --\n', '\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// -- ERC20 Token + fixed supply --\n', '\n', 'contract LibertyEcoToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    \n', '    uint256 _totalSupply;\n', '    uint256 public reserveCap = 0;                                  // Amount of tokens to reserve for owner (constructor) \n', '    uint256 public tokensRemain = 0;                                // Amount of tokens to sell (constructor)\n', '    uint256 public tokensSold = 0;                                  // Amount of tokens sold\n', '    uint256 public tokensDistributed = 0;                           // Amount of tokens distributed\n', '\n', '    uint256 public tokensPerEth = 100;                               // Units of token can be bought with 1 ETH\n', '    uint256 public EtherInWei = 0;                                  // Store the total ETH raised via ICO \n', '    address payable public fundsWallet;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // -- Constructor --\n', '    \n', '    constructor() public {\n', '        symbol = "LES";                                            // Token symbol / abbreviation\n', '        name = "Liberty EcoToken";                                         // Token name\n', '        decimals = 18;                                              \n', '        _totalSupply = 10000000000 * 10**uint(decimals);               // Initial token supply deployed (in wei) -- 100 tokens\n', '        \n', '        balances[owner] = _totalSupply;                             // Give all token supply to owner\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '        \n', "        fundsWallet = msg.sender;                                   // To be funded on owner's wallet\n", '        \n', '        tokensRemain = _totalSupply.sub(reserveCap);\n', '    }\n', '\n', '\n', '    // -- Total Supply --\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    // -- Get token balance for account `tokenOwner` --\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    /*\n', "      -- Transfer balance from token owner's account to other account --\n", "        - Owner's account must have sufficient balance to transfer\n", '        - 0 value transfers are allowed\n', '    */\n', '    \n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /* \n', "      -- Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account --\n", '     \n', '        ERC-20 Token Standard recommends that there are no checks for the approval \n', '        double-spend attack as this should be implemented in user interfaces\n', '    */\n', '    \n', '    function approve(address spender, uint256 tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '      -- Transfer `tokens` from the `from` account to the `to` account --\n', '    \n', '        The calling account must already have sufficient tokens approve(...)-d\n', '        for spending from the `from` account and:\n', '        \n', '        - From account must have sufficient balance to transfer\n', '        - Spender must have sufficient allowance to transfer\n', '        - 0 value transfers are allowed\n', '    */\n', '    \n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', "    //  -- Returns the amount of tokens approved by the owner that can be transferred to the spender's account --\n", '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    /*\n', "      -- Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account -- \n", '        - The `spender` contract function `receiveApproval(...)` is then executed\n', '    */\n', '    \n', '    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // -- 100 tokens given per 1 ETH but revert if owner reserve limit reached --\n', '    \n', '    function () external payable {\n', '        if(balances[owner] >= reserveCap) {\n', '            EtherInWei = EtherInWei + msg.value;\n', '            uint256 amount = msg.value * tokensPerEth;\n', '            \n', '            require(balances[fundsWallet] >= amount);\n', '            \n', '            balances[fundsWallet] = balances[fundsWallet].sub(amount);\n', '            balances[msg.sender] = balances[msg.sender].add(amount);\n', '            \n', '            emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '            \n', '            //Transfer ether to fundsWallet\n', '            fundsWallet.transfer(msg.value);\n', '            \n', '            deductToken(amount);\n', '        }\n', '        \n', '        else {\n', '            revert("Token balance reaches reserve capacity, no more tokens will be given out.");\n', '        }\n', '    }\n', '\n', '\n', '    // -- Owner can transfer out any accidentally sent ERC20 tokens --\n', '    \n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    // -- Mini function to deduct remaining tokens to sell and add in amount of tokens sold\n', '    function deductToken(uint256 amt) private {\n', '        tokensRemain = tokensRemain.sub(amt);\n', '        tokensSold = tokensSold.add(amt);\n', '    }\n', '    \n', '    // -- Set reserve cap by amount \n', '    \n', '    function setReserveCap(uint256 tokenAmount) public onlyOwner {\n', '        reserveCap = tokenAmount * 10**uint(decimals);\n', '        tokensRemain = balances[owner].sub(reserveCap);\n', '    }\n', '    \n', '    // -- Set reserve cap by percentage\n', '    \n', '    function setReserveCapPercentage (uint percentage) public onlyOwner {\n', '        reserveCap = calcSupplyPercentage(percentage);\n', '        tokensRemain = balances[owner].sub(reserveCap);\n', '    }\n', '    \n', '    // -- Mini function for calculating token percentage from whole supply --\n', '    \n', '    function calcSupplyPercentage(uint256 percent) public view returns (uint256){\n', '        uint256 total = _totalSupply.mul(percent.mul(100)).div(10000);\n', '        \n', '        return total;\n', '    }\n', '    \n', '    // -- Distribute tokens to other address (with amount of tokens) --\n', '    \n', '    function distributeTokenByAmount(address dist_address, uint256 tokens)public payable onlyOwner returns (bool success){\n', '        require(balances[owner] > 0 && tokens <= tokensRemain, "Token distribution fail due to insufficient selling token.");\n', '        uint256 tokenToDistribute = tokens * 10**uint(decimals);\n', '        \n', '        balances[owner] = balances[owner].sub(tokenToDistribute);\n', '        balances[dist_address] = balances[dist_address].add(tokenToDistribute);\n', '        \n', '        emit Transfer(owner, dist_address, tokenToDistribute);\n', '        \n', '        tokensRemain = tokensRemain.sub(tokenToDistribute);\n', '        tokensDistributed = tokensDistributed.add(tokenToDistribute);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // -- Release reserve cap from owner for token sell by amount of tokens\n', '    \n', '    function releaseCapByAmount(uint256 tokenAmount) public onlyOwner {\n', '        tokenAmount = tokenAmount * 10**uint(decimals);\n', '        \n', '        require(balances[owner] >= tokenAmount);\n', '        reserveCap = reserveCap.sub(tokenAmount);\n', '        tokensRemain = tokensRemain.add(tokenAmount);\n', '    }\n', '}']