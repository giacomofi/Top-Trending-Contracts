['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', "// This is an ERC-20 token contract based on Open Zepplin's StandardToken\n", '// and MintableToken plus the ability to burn tokens.\n', '//\n', '// We had to copy over the code instead of inheriting because of changes\n', '// to the modifier lists of some functions:\n', '//   * transfer(), transferFrom() and approve() are not callable during\n', '//     the minting period, only after MintingFinished()\n', '//   * mint() can only be called by the minter who is not the owner\n', '//     but the BionTokenSale contract.\n', '//\n', "// Token can be burned by a special 'destroyer' role that can only\n", '// burn its tokens.\n', 'contract BionToken is Ownable {\n', '  string public constant name = "BionToken";\n', '  string public constant symbol = "BION";\n', '  uint8 public constant decimals = 18;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintingFinished();\n', '  event Burn(uint256 amount);\n', '\n', '  uint256 public totalSupply;\n', '\n', '\n', '  //==================================================================================\n', '  // Zeppelin BasicToken (plus modifier to not allow transfers during minting period):\n', '  //==================================================================================\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenMintingFinished returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Zeppelin StandardToken (plus modifier to not allow transfers during minting period):\n', '  //=====================================================================================\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenMintingFinished returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenMintingFinished returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Minting:\n', '  //=====================================================================================\n', '\n', '  bool public mintingFinished = false;\n', '  address public destroyer;\n', '  address public minter;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier whenMintingFinished() {\n', '    require(mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(msg.sender == minter);\n', '    _;\n', '  }\n', '\n', '  function setMinter(address _minter) external onlyOwner {\n', '    minter = _minter;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) external onlyMinter canMint  returns (bool) {\n', '    require(balances[_to] + _amount > balances[_to]); // Guard against overflow\n', '    require(totalSupply + _amount > totalSupply);     // Guard against overflow  (this should never happen)\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() external onlyMinter returns (bool) {\n', '    mintingFinished = true;\n', '    MintingFinished();\n', '    return true;\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Burning:\n', '  //=====================================================================================\n', '\n', '\n', '  modifier onlyDestroyer() {\n', '     require(msg.sender == destroyer);\n', '     _;\n', '  }\n', '\n', '  function setDestroyer(address _destroyer) external onlyOwner {\n', '    destroyer = _destroyer;\n', '  }\n', '\n', '  function burn(uint256 _amount) external onlyDestroyer {\n', '    require(balances[destroyer] >= _amount && _amount > 0);\n', '    balances[destroyer] = balances[destroyer].sub(_amount);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    Burn(_amount);\n', '  }\n', '}']