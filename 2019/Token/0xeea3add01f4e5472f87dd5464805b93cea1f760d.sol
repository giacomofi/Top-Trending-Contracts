['contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract SafeMath{\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\t\n', '\tfunction safeSub(uint a, uint b) internal returns (uint) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '  }\n', '\n', '\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n', '    \tuint c = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '  }\n', '\tfunction assert(bool assertion) internal {\n', '\t    if (!assertion) {\n', '\t      revert();\n', '\t    }\n', '\t}\n', '}\n', '\n', '\n', 'contract StandardToken is Token , SafeMath{\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            balances[_from] = safeSub(balances[_from],_value);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner = msg.sender;\n', '\n', '  /// @notice check if the caller is the owner of the contract\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) throw;\n', '    _;\n', '  }\n', '\n', '  /// @notice change the owner of the contract\n', '  /// @param _newOwner the address of the new owner of the contract.\n', '  function changeOwner(address _newOwner)\n', '  onlyOwner\n', '  {\n', '    if(_newOwner == 0x0) throw;\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'contract StrHelper{\n', ' function uintToString(uint256 v) internal returns (string str) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory s = new bytes(i);\n', '        for (uint j = 0; j < i; j++) {\n', '            s[j] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '\n', '    function appendUintToString(string inStr, uint256 v) internal returns (string str) {\n', '        uint maxlength = 78;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory inStrb = bytes(inStr);\n', '        bytes memory s = new bytes(inStrb.length + i);\n', '        uint j;\n', '        for (j = 0; j < inStrb.length; j++) {\n', '            s[j] = inStrb[j];\n', '        }\n', '        for (j = 0; j < i; j++) {\n', '            s[j + inStrb.length] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '}\n', '\n', '//Ver 1.2\n', '\n', 'contract Ex is StandardToken, Ownable, StrHelper {\n', '    \n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  event Minty(string announcement);\n', '  \n', '    string public name = "Ex";   \n', '    string public description = "Mining reward for running an Ex Node";\n', '    string public Ex_additionalInfo = "The value of Ex token is set at &#163;1000. The lowest denomination of the Ex token is 0.01 (&#163;10); anything below this should be paid in smiles, good wishes and agreeable nods. VAT applicable on all transactions.";\n', '    string public Ex_moreInfo = "As of Oct 2018, the Ex Network has sold 20% of it&#39;s equity @ &#163;10k per share to fend for the startup costs. Thus evaluating the Coy @ &#163;1M at the time of idea floating.";\n', '    string public Ex_evenMoreInfo = "&#163;1M worth of Ex tokens to be split 80-20% between the two parties holding equity at genesis time. Initial Supply =  1000 &#128420;";\n', '    uint8 public decimals = 2;\n', '    string public symbol = "&#128420;";\n', '\n', '///////////////////\n', '///////////////////  \n', 'function () {\n', '        throw;\n', '    }\n', '///////////////////\n', '///////////////////\n', 'function Ex() {\n', '   \n', '   /*\n', '   Description: As of Oct 2018, the Ex Network has sold 20% of it&#39;s equity @ &#163;10k per share to fend for the startup costs. Thus evaluating the Coy @ &#163;1M at the time of idea floating.\n', '   Distribution: &#163;1M worth of Ex tokens to be split 80-20% between the two parties represented below.\n', '   Initial supply: 1000 &#128420;\n', '   */\n', '\n', '        mint(0x0777780858ea64439410b1b9fdd99f39d3943cc3,20000);\n', '        mint(0x07777eb9b1afc771cdd6b94ace3f75931b9a54bc,80000);\n', '    }\n', '///////////////////\n', '///////////////////  \n', 'function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    totalSupply = safeAdd(totalSupply,_amount);\n', '    balances[_to] = safeAdd(balances[_to],_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    Minty(appendUintToString("Ex mined: ",safeDiv(_amount,100)));\n', '    return true;\n', '  }\n', '///////////////////\n', '///////////////////\n', 'function mintMulti(\n', '    address[] _to,\n', '    uint256[] _amount\n', '  )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '      if(_to.length != _amount.length)\n', '      return(false);\n', '      \n', '      uint256 i = 0;\n', '      uint256 total=0;\n', '        while (i < _to.length) {\n', '            totalSupply = safeAdd(totalSupply,_amount[i]);\n', '            balances[_to[i]] = safeAdd(balances[_to[i]],_amount[i]);\n', '            Mint(_to[i], _amount[i]);\n', '            Transfer(address(0), _to[i], _amount[i]);\n', '            total=safeAdd(total,_amount[i]);\n', '           i += 1;\n', '        }\n', '    \n', '      Minty(appendUintToString("Ex mined: ",safeDiv(total,100)));\n', '      return true;\n', '  }\n', '  \n', '\n', '}']