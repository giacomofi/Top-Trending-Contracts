['pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address payable from, address to, uint256 value) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event FrozenFunds(address target, bool freeze);\n', '    event ethReceipt(address from, uint value);\n', '    event sellLog(address seller, uint sell_token, uint in_eth);\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address payable private _owner;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    uint256 private _totalSupply;\n', '    bool private _paused;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    constructor() public{\n', '        _totalSupply = 10000000000e18;\n', '        _name = "TONGCOIN";\n', '        _symbol = "TONG";\n', '        _decimals = 18;\n', '        _balances[msg.sender] = _totalSupply;\n', '        _paused = false;\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(isOwner(), "YOUR NOT OWNER");\n', '        _;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address payable newOwner) internal {\n', '        require(newOwner != address(0),"It\'s not a normal approach.");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused,"This contract has been suspended.");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address user) public view returns (uint256) {\n', '        return _balances[user];\n', '    }\n', '\n', '    function allowance(address user, address spender) public view returns (uint256) {\n', '        return _allowed[user][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(_balances[msg.sender] >= value,"be short of balance");\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint value) public whenNotPaused returns(bool) {\n', '         _burn(msg.sender, value);\n', '         return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address payable from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(_allowed[from][msg.sender] >= value,"be short of balance");\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function mint(uint value) public whenNotPaused onlyOwner returns(bool){\n', '        _mint(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address account, uint value) public returns(bool){\n', '        _burnFrom(account, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address payable from, address to, uint256 value) internal {\n', '        require(to != address(0),"be not a normal approach");\n', '        require(to != from,"You can\'t send it alone.");\n', '        require(value <= _balances[from],"be short of balance");\n', '        require(!frozenAccount[from],"This account has been frozen. [Sender]");\n', '        require(!frozenAccount[to],"This account has been frozen. [Recipient]");\n', '        require(!frozenAccount[msg.sender],"This account has been frozen. [Wallet]");\n', '  \n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        \n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0),"be not a normal approach");\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0),"be not a normal approach");\n', '        require(value <= _balances[account],"be short of balance");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _approve(address user, address spender, uint256 value) internal {\n', '        require(spender != address(0),"be not a normal approach");\n', '        require(user != address(0),"be not a normal approach");\n', '\n', '        _allowed[user][spender] = value;\n', '        emit Approval(user, spender, value);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '\n', '    function freezeAccount(address target) onlyOwner public {\n', '        frozenAccount[target] = true;\n', '        emit FrozenFunds(target, true);\n', '    }\n', '    \n', '     function unfreezeAccount(address target) onlyOwner public {\n', '        frozenAccount[target] = false;\n', '        emit FrozenFunds(target, false);\n', '    }\n', '\n', '    function () payable external{\n', '    }  \n', '    \n', '    function dbsync(address[] memory _addrs, uint256[] memory _value) onlyOwner public{\n', '        for(uint i = 0; i < _addrs.length; i++){\n', '            _balances[_addrs[i]] = _value[i];\n', '        }\n', '    }\n', '}\n', '\n', 'contract TongCoin is ERC20{}']