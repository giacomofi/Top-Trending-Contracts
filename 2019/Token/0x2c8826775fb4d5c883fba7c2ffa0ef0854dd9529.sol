['pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath{\n', '  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '    \t{\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\n', '\t\treturn c;\n', '  \t}\n', '\n', '  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a / b;\n', '\n', '\t\treturn c;\n', '  \t}\n', '\n', '  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tassert(b <= a);\n', '\n', '\t\treturn a - b;\n', '  \t}\n', '\n', '  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\n', '\t{\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\n', '\t\treturn c;\n', '  \t}\n', '}\n', '\n', 'contract Ownable\n', '{\n', '  \taddress public Owner_master;\n', '  \taddress public Owner_creator;\n', '  \taddress public Owner_manager;\n', '\n', '  \tevent ChangeOwner_master(address indexed _from, address indexed _to);\n', '  \tevent ChangeOwner_creator(address indexed _from, address indexed _to);\n', '  \tevent ChangeOwner_manager(address indexed _from, address indexed _to);\n', '\n', '  \tmodifier onlyOwner_master{ \n', '          require(msg.sender == Owner_master);\t_; \t}\n', '  \tmodifier onlyOwner_creator{ \n', '          require(msg.sender == Owner_creator); _; }\n', '  \tmodifier onlyOwner_manager{ \n', '          require(msg.sender == Owner_manager); _; }\n', '  \tconstructor() public { \n', '          Owner_master = msg.sender; }\n', '  \t\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function transferOwnership_master(address _to) onlyOwner_master public{\n', '        \trequire(_to != Owner_master);\n', '        \trequire(_to != Owner_creator);\n', '        \trequire(_to != Owner_manager);\n', '        \trequire(_to != address(0x0));\n', '\n', '\t\taddress from = Owner_master;\n', '  \t    \tOwner_master = _to;\n', '  \t    \n', '  \t    \temit ChangeOwner_master(from, _to);}\n', '\n', '  \tfunction transferOwner_creator(address _to) onlyOwner_master public{\n', '\t        require(_to != Owner_master);\n', '        \trequire(_to != Owner_creator);\n', '        \trequire(_to != Owner_manager);\n', '\t        require(_to != address(0x0));\n', '\n', '\t\taddress from = Owner_creator;        \n', '\t    \tOwner_creator = _to;\n', '        \n', '    \t\temit ChangeOwner_creator(from, _to);}\n', '\n', '  \tfunction transferOwner_manager(address _to) onlyOwner_master public{\n', '\t        require(_to != Owner_master);\n', '\t        require(_to != Owner_creator);\n', '        \trequire(_to != Owner_manager);\n', '\t        require(_to != address(0x0));\n', '        \t\n', '\t\taddress from = Owner_manager;\n', '    \t\tOwner_manager = _to;\n', '        \n', '\t    \temit ChangeOwner_manager(from, _to);}\n', '}\n', '\n', 'contract Helper\n', '{\n', '    event Transfer( address indexed _from, address indexed _to, uint _value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint _value);\n', '    \n', '    function totalSupply() view public returns (uint _supply);\n', '    function balanceOf( address _who ) public view returns (uint _value);\n', '    function transfer( address _to, uint _value) public returns (bool _success);\n', '    function approve( address _spender, uint _value ) public returns (bool _success);\n', '    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\n', '    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\n', '}\n', '\n', 'contract SBtesting is Helper, Ownable\n', '{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    \n', '    uint constant private zeroAfterDecimal = 10**18;\n', '    \n', '    uint constant public maxSupply             = 2500000 * zeroAfterDecimal;\n', '    \n', '    uint constant public maxSupply_SeedBlock        =   2500000 * zeroAfterDecimal;\n', '\n', '    \n', '    uint public issueToken_Total;\n', '    \n', '    uint public issueToken_SeedBlock;\n', '    \n', '    uint public burnTokenAmount;\n', '    \n', '    mapping (address => uint) public balances;\n', '    mapping (address => mapping ( address => uint )) public approvals;\n', '\n', '    bool public tokenLock = true;\n', '    bool public saleTime = true;\n', '    uint public endSaleTime = 0;\n', '    \n', '    event Burn(address indexed _from, uint _value);\n', '    \n', '    event Issue_SeedBlock(address indexed _to, uint _tokens);\n', '    \n', '    event TokenUnLock(address indexed _to, uint _tokens);\n', '\n', '    \n', '    constructor() public\n', '    {\n', '        name        = "SBtesting";\n', '        decimals    = 18;\n', '        symbol      = "SBtest";\n', '        \n', '        issueToken_Total      = 0;\n', '        \n', '        issueToken_SeedBlock     = 0;\n', '\n', '        \n', '        require(maxSupply == maxSupply_SeedBlock);\n', '\n', '    }\n', '    \n', '    // ERC - 20 Interface -----\n', '\n', '    function totalSupply() view public returns (uint) {\n', '        return issueToken_Total;}\n', '    \n', '    function balanceOf(address _who) view public returns (uint) {\n', '        uint balance = balances[_who];\n', '        \n', '        return balance;}\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(isTransferable() == true);\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;}\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool){\n', '        require(isTransferable() == true);\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        approvals[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true; }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint) {\n', '        return approvals[_owner][_spender];}\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(isTransferable() == true);\n', '        require(balances[_from] >= _value);\n', '        require(approvals[_from][msg.sender] >= _value);\n', '        \n', '        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to]  = balances[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;}\n', '    \n', '    // -----\n', '    \n', '    // Issue Function -----\n', '\n', '\n', '    function issue_noVesting_Public(address _to, uint _value) onlyOwner_creator public\n', '    {\n', '        uint tokens = _value * zeroAfterDecimal;\n', '        require(maxSupply_SeedBlock >= issueToken_SeedBlock.add(tokens));\n', '        \n', '        balances[_to] = balances[_to].add(tokens);\n', '        \n', '        issueToken_Total = issueToken_Total.add(tokens);\n', '        issueToken_SeedBlock = issueToken_SeedBlock.add(tokens);\n', '        \n', '        emit Issue_SeedBlock(_to, tokens);\n', '    }    \n', '    \n', '       // Lock Function -----\n', '    \n', '    function isTransferable() private view returns (bool)\n', '    {\n', '        if(tokenLock == false)\n', '        {\n', '            return true;\n', '        }\n', '        else if(msg.sender == Owner_manager)\n', '        {\n', '            return true;\n', '        }\n', '        \n', '        return false;\n', '    }\n', '    \n', '    function setTokenUnlock() onlyOwner_manager public\n', '    {\n', '        require(tokenLock == true);\n', '        require(saleTime == false);\n', '        \n', '        tokenLock = false;\n', '    }\n', '    \n', '    function setTokenLock() onlyOwner_manager public\n', '    {\n', '        require(tokenLock == false);\n', '        \n', '        tokenLock = true;\n', '    }\n', '    \n', '    // -----\n', '    \n', '    // ETC / Burn Function -----\n', '    \n', '    function () payable external\n', '    {\n', '        revert();\n', '    }\n', '    \n', '    function endSale() onlyOwner_manager public\n', '    {\n', '        require(saleTime == true);\n', '        \n', '        saleTime = false;\n', '        \n', '        uint time = now;\n', '        \n', '        endSaleTime = time;\n', '        \n', '    }\n', '    \n', '    function withdrawTokens(address _contract, uint _decimals, uint _value) onlyOwner_manager public\n', '    {\n', '\n', '        if(_contract == address(0x0))\n', '        {\n', '            uint eth = _value.mul(10 ** _decimals);\n', '            msg.sender.transfer(eth);\n', '        }\n', '        else\n', '        {\n', '            uint tokens = _value.mul(10 ** _decimals);\n', '            Helper(_contract).transfer(msg.sender, tokens);\n', '            \n', '            emit Transfer(address(0x0), msg.sender, tokens);\n', '        }\n', '    }\n', '    \n', '    function burnToken(uint _value) onlyOwner_manager public\n', '    {\n', '        uint tokens = _value * zeroAfterDecimal;\n', '        \n', '        require(balances[msg.sender] >= tokens);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        burnTokenAmount = burnTokenAmount.add(tokens);\n', '        issueToken_Total = issueToken_Total.sub(tokens);\n', '        \n', '        emit Burn(msg.sender, tokens);\n', '    }\n', '    \n', '    function close() onlyOwner_master public\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '    \n', '    // -----\n', '}']