['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract DLT is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    function DLT(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              \n', '        totalSupply = initialSupply;                        \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;                               \n', '        decimals = decimalUnits;                            \n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               \n', '        if (_value <= 0) throw; \n', '        if (balanceOf[msg.sender] < _value) throw;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            \n', '        Transfer(msg.sender, _to, _value);                  \n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        if (_value <= 0) throw; \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                \n', '        if (_value <= 0) throw; \n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \n', '        if (_value > allowance[_from][msg.sender]) throw;     \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batch(address []toAddr, uint256 []value) returns (bool){\n', '        require(toAddr.length == value.length && toAddr.length >= 1);\n', '        for(uint256 i = 0 ; i < toAddr.length; i++){\n', '            transfer(toAddr[i], value[i]);\n', '        }   \n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      \n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      \n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                \n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      \n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function withdrawEther(uint256 amount) {\n', '        if(msg.sender != owner)throw;\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function() payable {\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract DLT is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    function DLT(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              \n', '        totalSupply = initialSupply;                        \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;                               \n', '        decimals = decimalUnits;                            \n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               \n', '        if (_value <= 0) throw; \n', '        if (balanceOf[msg.sender] < _value) throw;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            \n', '        Transfer(msg.sender, _to, _value);                  \n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        if (_value <= 0) throw; \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                \n', '        if (_value <= 0) throw; \n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \n', '        if (_value > allowance[_from][msg.sender]) throw;     \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batch(address []toAddr, uint256 []value) returns (bool){\n', '        require(toAddr.length == value.length && toAddr.length >= 1);\n', '        for(uint256 i = 0 ; i < toAddr.length; i++){\n', '            transfer(toAddr[i], value[i]);\n', '        }   \n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      \n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      \n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                \n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) throw;            \n', '        if (_value <= 0) throw; \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      \n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function withdrawEther(uint256 amount) {\n', '        if(msg.sender != owner)throw;\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function() payable {\n', '    }\n', '}']
