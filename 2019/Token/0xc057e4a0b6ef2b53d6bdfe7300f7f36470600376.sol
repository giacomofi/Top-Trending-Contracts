['pragma solidity ^0.5.1;\n', '\n', '/* SafeMath cal*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/* IERC20 inteface */\n', 'interface IERC20 {\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/* Owner permission */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/* LockAble contract */\n', 'contract LockAble is Ownable {\n', '\n', '    mapping (address => bool) _walletLockAddr;\n', '\n', '    function setLockWallet(address lockAddress)  public onlyOwner returns (bool){\n', '        _walletLockAddr[lockAddress] = true;\n', '        return true;\n', '    }\n', '\n', '    function setReleaseWallet(address lockAddress)  public onlyOwner returns (bool){\n', '         _walletLockAddr[lockAddress] = false;\n', '        return true;\n', '    }\n', '\n', '    function isLockWallet(address lockAddress)  public view returns (bool){\n', '        require(lockAddress != address(0), "Ownable: new owner is the zero address");\n', '        return _walletLockAddr[lockAddress];\n', '    }\n', '}\n', '\n', 'contract PartnerShip is LockAble{\n', '\n', '   mapping (address => bool) _partnerAddr;\n', '\n', '   function addPartnership(address partner) public onlyOwner returns (bool){\n', '       require(partner != address(0), "Ownable: new owner is the zero address");\n', '\n', '       _partnerAddr[partner] = true;\n', '       return true;\n', '   }\n', '\n', '   function removePartnership(address partner) public onlyOwner returns (bool){\n', '      require(partner != address(0), "Ownable: new owner is the zero address");\n', '\n', '      _partnerAddr[partner] = false;\n', '\n', '      return true;\n', '   }\n', '\n', '   function isPartnership(address partner)  public view returns (bool){\n', '       return _partnerAddr[partner];\n', '   }\n', '\n', '\n', '}\n', '\n', 'contract SaveWon is IERC20, Ownable, PartnerShip {\n', '\n', '    using SafeMath for uint256;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint256 private _totalSupply;\n', '    \n', '    uint8 private _decimals = 18;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    constructor() public {\n', '        _name = "SAVEWON";\n', '        _symbol = "SW";\n', '        uint256 INITIAL_SUPPLY = 50000000000 * (10 ** uint256(_decimals));\n', '        _totalSupply = _totalSupply.add(INITIAL_SUPPLY);\n', '        _balances[msg.sender] = _balances[msg.sender].add(INITIAL_SUPPLY);\n', '        \n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '         require(_walletLockAddr[msg.sender] != true, "Wallet Locked");\n', '\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '         _transfer(from, to, value);\n', '         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '         return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '   function burn(uint256 value) public onlyOwner{\n', '        require(value != 0, "Ownable: new owner is the zero address");\n', '\n', '       _burn(msg.sender, value);\n', '   }\n', '\n', '   function _burn(address account, uint256 value) internal {\n', '       require(account != address(0));\n', '       require(value <= _balances[account]);\n', '\n', '       _totalSupply = _totalSupply.sub(value);\n', '       _balances[account] = _balances[account].sub(value);\n', '       emit Burn(account, value);\n', '       emit Transfer(account, address(0), value);\n', '   }\n', '\n', '   function multiTransfer(address[] memory toArray, uint256[] memory valueArray) public returns (bool){\n', '     if(isPartnership(msg.sender) || isOwner()){\n', '       uint256 i = 0;\n', '       while(i < toArray.length){\n', '         transfer( toArray[i],valueArray[i]);\n', '         i += 1;\n', '       }\n', '       return true;\n', '     } else {\n', '       return false;\n', '     }\n', '   }\n', '}']