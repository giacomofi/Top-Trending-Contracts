['pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title Vrenelium Token - VRE\n', ' * @author Vrenelium AG 2018/2019\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' *\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' *\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 token implementation\n', ' *\n', ' * @dev Implementation of the ERC20 token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token with logarithmic approximation to token cap\n', ' */\n', 'contract MintableTokenWithCap is StandardToken, Ownable {\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  uint256 public constant TOTAL_TOKEN_CAP      = 78000000 * 10 ** 18; // Maximum amount of tokens\n', '  uint256 public constant PRE_MINTED_TOKEN_CAP = 24100000 * 10 ** 18; // Amount of pre minted tokens\n', '\n', '  uint256 public constant PRE_MINTING_END      = 1577750400; // x1 - 2019-12-31T00:00:00+00:00 - Pre minting end Timestamp\n', '  uint256 public constant MINTING_END          = 3187295999; // x2 - 2070-12-31T23:59:59+00:00 - Minting end Timestamp\n', '\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_ + _amount <= getCurrentMintingLimit());\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function getCurrentMintingLimit()\n', '    public\n', '    view\n', '    returns(uint256)\n', '  {\n', '    if(now <= PRE_MINTING_END) {\n', '\n', '      return PRE_MINTED_TOKEN_CAP;\n', '    }\n', '    else if(now <= MINTING_END) {\n', '\n', '      // Logarithmic approximation until MINTING_END\n', '      // qfactor = (ln(2x + 0.2) - ln(0.2)) / (ln(2.2)-ln(0.2))\n', '      // Pre calculated values are used for efficiency reasons\n', '\n', '      if(now <= 1609459199) { // 12/31/2020 @ 11:59pm (UTC)\n', '            return 28132170 *10 ** 18;\n', '      }\n', '      else if(now <= 1640995199) { // 12/31/2021 @ 11:59pm (UTC)\n', '            return 31541205 *10 ** 18;\n', '      }\n', '      else if(now <= 1672531199) { // 12/31/2022 @ 11:59pm (UTC)\n', '            return 34500660 *10 ** 18;\n', '      }\n', '      else if(now <= 1704067199) { // 12/31/2023 @ 11:59pm (UTC)\n', '            return 37115417 *10 ** 18;\n', '      }\n', '      else if(now <= 1735603199) { // 12/31/2024 @ 11:59pm (UTC)\n', '            return 39457461 *10 ** 18;\n', '      }\n', '      else if(now <= 1767225599) { // 12/31/2025 @ 11:59pm (UTC)\n', '            return 41583887 *10 ** 18;\n', '      }\n', '      else if(now <= 1798761599) { // 12/31/2026 @ 11:59pm (UTC)\n', '            return 43521339 *10 ** 18;\n', '      }\n', '      else if(now <= 1830297599) { // 12/31/2027 @ 11:59pm (UTC)\n', '            return 45304967 *10 ** 18;\n', '      }\n', '      else if(now <= 1861919999) { // 12/31/2028 @ 11:59pm (UTC)\n', '            return 46961775 *10 ** 18;\n', '      }\n', '      else if(now <= 1893455999) { // 12/31/2029 @ 11:59pm (UTC)\n', '            return 48500727 *10 ** 18;\n', '      }\n', '      else if(now <= 1924991999) { // 12/31/2030 @ 11:59pm (UTC)\n', '            return 49941032 *10 ** 18;\n', '      }\n', '      else if(now <= 1956527999) { // 12/31/2031 @ 11:59pm (UTC)\n', '            return 51294580 *10 ** 18;\n', '      }\n', '      else if(now <= 1988150399) { // 12/31/2032 @ 11:59pm (UTC)\n', '            return 52574631 *10 ** 18;\n', '      }\n', '      else if(now <= 2019686399) { // 12/31/2033 @ 11:59pm (UTC)\n', '            return 53782475 *10 ** 18;\n', '      }\n', '      else if(now <= 2051222399) { // 12/31/2034 @ 11:59pm (UTC)\n', '            return 54928714 *10 ** 18;\n', '      }\n', '      else if(now <= 2082758399) { // 12/31/2035 @ 11:59pm (UTC)\n', '            return 56019326 *10 ** 18;\n', '      }\n', '      else if(now <= 2114380799) { // 12/31/2036 @ 11:59pm (UTC)\n', '            return 57062248 *10 ** 18;\n', '      }\n', '      else if(now <= 2145916799) { // 12/31/2037 @ 11:59pm (UTC)\n', '            return 58056255 *10 ** 18;\n', '      }\n', '      else if(now <= 2177452799) { // 12/31/2038 @ 11:59pm (UTC)\n', '            return 59008160 *10 ** 18;\n', '      }\n', '      else if(now <= 2208988799) { // 12/31/2039 @ 11:59pm (UTC)\n', '            return 59921387 *10 ** 18;\n', '      }\n', '      else if(now <= 2240611199) { // 12/31/2040 @ 11:59pm (UTC)\n', '            return 60801313 *10 ** 18;\n', '      }\n', '      else if(now <= 2272147199) { // 12/31/2041 @ 11:59pm (UTC)\n', '            return 61645817 *10 ** 18;\n', '      }\n', '      else if(now <= 2303683199) { // 12/31/2042 @ 11:59pm (UTC)\n', '            return 62459738 *10 ** 18;\n', '      }\n', '      else if(now <= 2335219199) { // 12/31/2043 @ 11:59pm (UTC)\n', '            return 63245214 *10 ** 18;\n', '      }\n', '      else if(now <= 2366841599) { // 12/31/2044 @ 11:59pm (UTC)\n', '            return 64006212 *10 ** 18;\n', '      }\n', '      else if(now <= 2398377599) { // 12/31/2045 @ 11:59pm (UTC)\n', '            return 64740308 *10 ** 18;\n', '      }\n', '      else if(now <= 2429913599) { // 12/31/2046 @ 11:59pm (UTC)\n', '            return 65451186 *10 ** 18;\n', '      }\n', '      else if(now <= 2461449599) { // 12/31/2047 @ 11:59pm (UTC)\n', '            return 66140270 *10 ** 18;\n', '      }\n', '      else if(now <= 2493071999) { // 12/31/2048 @ 11:59pm (UTC)\n', '            return 66810661 *10 ** 18;\n', '      }\n', '      else if(now <= 2524607999) { // 12/31/2049 @ 11:59pm (UTC)\n', '            return 67459883 *10 ** 18;\n', '      }\n', '      else if(now <= 2556143999) { // 12/31/2050 @ 11:59pm (UTC)\n', '            return 68090879 *10 ** 18;\n', '      }\n', '      else if(now <= 2587679999) { // 12/31/2051 @ 11:59pm (UTC)\n', '            return 68704644 *10 ** 18;\n', '      }\n', '      else if(now <= 2619302399) { // 12/31/2052 @ 11:59pm (UTC)\n', '            return 69303710 *10 ** 18;\n', '      }\n', '      else if(now <= 2650838399) { // 12/31/2053 @ 11:59pm (UTC)\n', '            return 69885650 *10 ** 18;\n', '      }\n', '      else if(now <= 2682374399) { // 12/31/2054 @ 11:59pm (UTC)\n', '            return 70452903 *10 ** 18;\n', '      }\n', '      else if(now <= 2713910399) { // 12/31/2055 @ 11:59pm (UTC)\n', '            return 71006193 *10 ** 18;\n', '      }\n', '      else if(now <= 2745532799) { // 12/31/2056 @ 11:59pm (UTC)\n', '            return 71547652 *10 ** 18;\n', '      }\n', '      else if(now <= 2777068799) { // 12/31/2057 @ 11:59pm (UTC)\n', '            return 72074946 *10 ** 18;\n', '      }\n', '      else if(now <= 2808604799) { // 12/31/2058 @ 11:59pm (UTC)\n', '            return 72590155 *10 ** 18;\n', '      }\n', '      else if(now <= 2840140799) { // 12/31/2059 @ 11:59pm (UTC)\n', '            return 73093818 *10 ** 18;\n', '      }\n', '      else if(now <= 2871763199) { // 12/31/2060 @ 11:59pm (UTC)\n', '            return 73587778 *10 ** 18;\n', '      }\n', '      else if(now <= 2903299199) { // 12/31/2061 @ 11:59pm (UTC)\n', '            return 74069809 *10 ** 18;\n', '      }\n', '      else if(now <= 2934835199) { // 12/31/2062 @ 11:59pm (UTC)\n', '            return 74541721 *10 ** 18;\n', '      }\n', '      else if(now <= 2966371199) { // 12/31/2063 @ 11:59pm (UTC)\n', '            return 75003928 *10 ** 18;\n', '      }\n', '      else if(now <= 2997993599) { // 12/31/2064 @ 11:59pm (UTC)\n', '            return 75458050 *10 ** 18;\n', '      }\n', '      else if(now <= 3029529599) { // 12/31/2065 @ 11:59pm (UTC)\n', '            return 75901975 *10 ** 18;\n', '      }\n', '      else if(now <= 3061065599) { // 12/31/2066 @ 11:59pm (UTC)\n', '            return 76337302 *10 ** 18;\n', '      }\n', '      else if(now <= 3092601599) { // 12/31/2067 @ 11:59pm (UTC)\n', '            return 76764358 *10 ** 18;\n', '      }\n', '      else if(now <= 3124223999) { // 12/31/2068 @ 11:59pm (UTC)\n', '            return 77184590 *10 ** 18;\n', '      }\n', '      else if(now <= 3155759999) { // 12/31/2069 @ 11:59pm (UTC)\n', '            return 77595992 *10 ** 18;\n', '      }\n', '      else if(now <= 3187295999) { // 12/31/2070 @ 11:59pm (UTC)\n', '            return 78000000 *10 ** 18;\n', '      }\n', '    }\n', '    else {\n', '\n', '      return TOTAL_TOKEN_CAP;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @title Vrenelium Token Smart Contract\n', '*/\n', 'contract VreneliumToken is MintableTokenWithCap {\n', '\n', '    // Public Constants\n', '    string public constant name = "Vrenelium Token";\n', '    string public constant symbol = "VRE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to not allow transfers\n', '    * to this contract\n', '    */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}']