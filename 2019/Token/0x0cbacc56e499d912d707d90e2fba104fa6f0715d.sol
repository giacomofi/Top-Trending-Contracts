['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IToken is ERC20 {\n', '    // note: we use external visibility for all non-standard functions \n', '    // (which are not used internally) \n', '\n', '    function reclaimToken(ERC20Basic _token, address _to) external;\n', '\n', '    function setMaxTransferGasPrice(uint newGasPrice) external;\n', '\n', '    // TAP whitelisting functions\n', '    function whitelist(address TAP) external;\n', '    function deWhitelist(address TAP) external;\n', '\n', '    function setTransferFeeNumerator(uint newTransferFeeNumerator) external;\n', '\n', '    // transfer blacklist functions\n', '    function blacklist(address a) external;\n', '    function deBlacklist(address a) external;\n', '\n', '    // seizing function\n', '    function seize(address a) external;\n', '\n', '    // rebalance functions\n', '    function rebalance(bool deducts, uint tokensAmount) external;\n', '\n', '    // transfer fee functions\n', '    function disableFee(address a) external;\n', '    function enableFee(address a) external;\n', '    function computeFee(uint amount) public view returns(uint);\n', '\n', '    // to disable\n', '    function renounceOwnership() public;\n', '\n', '    // mintable\n', '    event Mint(address indexed to, uint amount);\n', '    function mint(address _to, uint _amount) public returns(bool);\n', '    // to disable\n', '    function finishMinting() public returns (bool);\n', '\n', '    // burnable\n', '    event Burn(address indexed burner, uint value);\n', '    // burn is only available through the transfer function\n', '    function burn(uint _value) public;\n', '\n', '    // pausable\n', '    function pause() public;\n', '    function unpause() public;\n', '\n', '    // ownable\n', '    function transferOwnership(address newOwner) public;\n', '    function transferSuperownership(address newOwner) external; // external for consistency reasons\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool);\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Token is IToken, PausableToken, BurnableToken, MintableToken, DetailedERC20 {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // scaling factor\n', '    uint public scaleFactor = 10 ** 18;\n', '    mapping(address => uint) internal lastScalingFactor;\n', '\n', '    // maximum percent of scaling of balances\n', '    uint constant internal MAX_REBALANCE_PERCENT = 5;\n', '\n', '    // gas price\n', '    // deactivate the limit at deployment: set it to the maximum integer\n', '    uint public maxTransferGasPrice = uint(-1);\n', '    event TransferGasPrice(uint oldGasPrice, uint newGasPrice);\n', '\n', '    // transfer fee is computed as:\n', '    // regular transfer amount * transferFeeNumerator / TRANSFER_FEE_DENOMINATOR\n', '    uint public transferFeeNumerator = 0;\n', '    uint constant internal MAX_NUM_DISABLED_FEES = 100;\n', '    uint constant internal MAX_FEE_PERCENT = 5;\n', '    uint constant internal TRANSFER_FEE_DENOMINATOR = 10 ** 18;\n', '    mapping(address => bool) public avoidsFees;\n', '    address[] public avoidsFeesArray;\n', '    event TransferFeeNumerator(uint oldNumerator, uint newNumerator);\n', '    event TransferFeeDisabled(address indexed account);\n', '    event TransferFeeEnabled(address indexed account);\n', '    event TransferFee(\n', '        address indexed to,\n', '        AccountClassification\n', '        fromAccountClassification,\n', '        uint amount\n', '    );\n', '\n', '    // whitelisted TAPs\n', '    mapping(address => bool) public TAPwhiteListed;\n', '    event TAPWhiteListed(address indexed TAP);\n', '    event TAPDeWhiteListed(address indexed TAP);\n', '\n', '    // blacklisted Accounts\n', '    mapping(address => bool) public transferBlacklisted;\n', '    event TransferBlacklisted(address indexed account);\n', '    event TransferDeBlacklisted(address indexed account);\n', '\n', '    // seized funds\n', '    event FundsSeized(\n', '        address indexed account,\n', '        AccountClassification fromAccountClassification,\n', '        uint amount\n', '    );\n', '\n', '    // extended transfer event\n', '    enum AccountClassification {Zero, Owner, Superowner, TAP, Other} // Enum\n', '    // block accounts with classification Other\n', '    bool public blockOtherAccounts;\n', '    event TransferExtd(\n', '        address indexed from,\n', '        AccountClassification fromAccountClassification,\n', '        address indexed to,\n', '        AccountClassification toAccountClassification,\n', '        uint amount\n', '    );\n', '    event BlockOtherAccounts(bool isEnabled);\n', '\n', '    // rebalancing event\n', '    event Rebalance(\n', '        bool deducts,\n', '        uint amount,\n', '        uint oldScaleFactor,\n', '        uint newScaleFactor,\n', '        uint oldTotalSupply,\n', '        uint newTotalSupply\n', '    );\n', '\n', '    // additional owner\n', '    address public superowner;\n', '    event SuperownershipTransferred(address indexed previousOwner,\n', '      address indexed newOwner);\n', '    mapping(address => bool) public usedOwners;\n', '\n', '    constructor(\n', '      string name,\n', '      string symbol,\n', '      uint8 decimals,\n', '      address _superowner\n', '    )\n', '    public DetailedERC20(name, symbol, decimals)\n', '    {\n', '        require(_superowner != address(0), "superowner is not the zero address");\n', '        superowner = _superowner;\n', '        usedOwners[owner] = true;\n', '        usedOwners[superowner] = true;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender),  "sender is owner or superowner");\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(isOwner(msg.sender),  "sender is owner or superowner");\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address account) {\n', '        require(account != address(0), "account is not the zero address");\n', '        _;\n', '    }\n', '\n', '    modifier limitGasPrice() {\n', '        require(tx.gasprice <= maxTransferGasPrice, "gasprice is less than its upper bound");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Reclaim all ERC20Basic compatible tokens that have been sent by mistake to this\n', '     * contract\n', '     * @param _token ERC20Basic The address of the token contract\n', '     * @param _to The address of the recipient of the tokens\n', '     */\n', '    function reclaimToken(ERC20Basic _token, address _to) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        _token.safeTransfer(_to, balance);\n', '    }\n', '\n', '    /**\n', '     * @notice Setter of max transfer gas price\n', '     * @param newGasPrice the new gas price\n', '     */\n', '    function setMaxTransferGasPrice(uint newGasPrice) external onlyOwner {\n', '        require(newGasPrice != 0, "gas price limit cannot be null");\n', '        emit TransferGasPrice(maxTransferGasPrice, newGasPrice);\n', '        maxTransferGasPrice = newGasPrice;\n', '    }\n', '\n', '    /**\n', '     * @notice Whitelist an address as a TAP to which tokens can be minted\n', '     * @param TAP The address to whitelist\n', '     */\n', '    function whitelist(address TAP) external nonZeroAddress(TAP) onlyOwner {\n', '        require(!isOwner(TAP), "TAP is not owner or superowner");\n', '        require(!TAPwhiteListed[TAP], "TAP cannot be whitlisted");\n', '        emit TAPWhiteListed(TAP);\n', '        TAPwhiteListed[TAP] = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Dewhitelist an address as a TAP\n', '     * @param TAP The address to dewhitelist\n', '     */\n', '    function deWhitelist(address TAP) external nonZeroAddress(TAP) onlyOwner {\n', '        require(TAPwhiteListed[TAP], "TAP is whitlisted");\n', '        emit TAPDeWhiteListed(TAP);\n', '        TAPwhiteListed[TAP] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Change the transfer fee numerator\n', '     * @param newTransferFeeNumerator The new transfer fee numerator\n', '     */\n', '    function setTransferFeeNumerator(uint newTransferFeeNumerator) external onlyOwner {\n', '        require(newTransferFeeNumerator <= TRANSFER_FEE_DENOMINATOR.mul(MAX_FEE_PERCENT).div(100),\n', '            "transfer fee numerator is less than its upper bound");\n', '        emit TransferFeeNumerator(transferFeeNumerator, newTransferFeeNumerator);\n', '        transferFeeNumerator = newTransferFeeNumerator;\n', '    }\n', '\n', '    /**\n', '     * @notice Blacklist an account to prevent their transfers\n', '     * @dev this function can be called while the contract is paused, to prevent blacklisting and\n', '     * front-running (by first pausing, then blacklisting)\n', '     * @param account The address to blacklist\n', '     */\n', '    function blacklist(address account) external nonZeroAddress(account) onlyOwner {\n', '        require(!transferBlacklisted[account], "account is not blacklisted");\n', '        emit TransferBlacklisted(account);\n', '        transferBlacklisted[account] = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Deblacklist an account to allow their transfers once again\n', '     * @param account The address to deblacklist\n', '     */\n', '    function deBlacklist(address account) external nonZeroAddress(account) onlyOwner {\n', '        require(transferBlacklisted[account], "account is blacklisted");\n', '        emit TransferDeBlacklisted(account);\n', '        transferBlacklisted[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Seize all funds from a blacklisted account\n', '     * @param account The address to be seized\n', '     */\n', '    function seize(address account) external nonZeroAddress(account) onlyOwner {\n', '        require(transferBlacklisted[account], "account has been blacklisted");\n', '        updateBalanceAndScaling(account);\n', '        uint balance = balanceOf(account);\n', '        emit FundsSeized(account, getAccountClassification(account), balance);\n', '        super._burn(account, balance);\n', '    }\n', '\n', '    /**\n', '     * @notice disable future transfer fees for an account\n', '     * @dev The fees owed before this function are paid here, via updateBalanceAndScaling.\n', '     * @param account The address which will avoid future transfer fees\n', '     */\n', '    function disableFee(address account) external nonZeroAddress(account) onlyOwner {\n', '        require(!avoidsFees[account], "account has fees");\n', '        require(avoidsFeesArray.length < MAX_NUM_DISABLED_FEES, "array is not full");\n', '        emit TransferFeeDisabled(account);\n', '        avoidsFees[account] = true;\n', '        avoidsFeesArray.push(account);\n', '    }\n', '\n', '    /**\n', '     * @notice enable future transfer fees for an account\n', '     * @param account The address which will pay future transfer fees\n', '     */\n', '    function enableFee(address account) external nonZeroAddress(account) onlyOwner {\n', '        require(avoidsFees[account], "account avoids fees");\n', '        emit TransferFeeEnabled(account);\n', '        avoidsFees[account] = false;\n', '        uint len = avoidsFeesArray.length;\n', '        assert(len != 0);\n', '        for (uint i = 0; i < len; i++) {\n', '            if (avoidsFeesArray[i] == account) {\n', '                avoidsFeesArray[i] = avoidsFeesArray[len.sub(1)];\n', '                avoidsFeesArray.length--;\n', '                return;\n', '            }\n', '        }\n', '        assert(false);\n', '    }\n', '\n', '    /**\n', '     * @notice rebalance changes the total supply by the given amount (either deducts or adds)\n', '     * by scaling all balance amounts proportionally (also those exempt from fees)\n', '     * @dev this uses the current total supply (which is the sum of all token balances excluding\n', '     * the inventory, i.e., the balances of owner and superowner) to compute the new scale factor\n', '     * @param deducts indication if we deduct or add token from total supply\n', '     * @param tokensAmount the number of tokens to add/deduct\n', '     */\n', '    function rebalance(bool deducts, uint tokensAmount) external onlyOwner {\n', '        uint oldTotalSupply = totalSupply();\n', '        uint oldScaleFactor = scaleFactor;\n', '\n', '        require(\n', '            tokensAmount <= oldTotalSupply.mul(MAX_REBALANCE_PERCENT).div(100),\n', '            "tokensAmount is within limits"\n', '        );\n', '\n', '        // new scale factor and total supply\n', '        uint newScaleFactor;\n', '        if (deducts) {\n', '            newScaleFactor = oldScaleFactor.mul(\n', '                oldTotalSupply.sub(tokensAmount)).div(oldTotalSupply\n', '            );\n', '        } else {\n', '            newScaleFactor = oldScaleFactor.mul(\n', '                oldTotalSupply.add(tokensAmount)).div(oldTotalSupply\n', '            );\n', '        }\n', '        // update scaleFactor\n', '        scaleFactor = newScaleFactor;\n', '\n', '        // update total supply\n', '        uint newTotalSupply = oldTotalSupply.mul(scaleFactor).div(oldScaleFactor);\n', '        totalSupply_ = newTotalSupply;\n', '\n', '        emit Rebalance(\n', '            deducts,\n', '            tokensAmount,\n', '            oldScaleFactor,\n', '            newScaleFactor,\n', '            oldTotalSupply,\n', '            newTotalSupply\n', '        );\n', '\n', '        if (deducts) {\n', '            require(newTotalSupply < oldTotalSupply, "totalSupply shrinks");\n', '            // avoid overly large rounding errors\n', '            assert(oldTotalSupply.sub(tokensAmount.mul(9).div(10)) >= newTotalSupply);\n', '            assert(oldTotalSupply.sub(tokensAmount.mul(11).div(10)) <= newTotalSupply);\n', '        } else {\n', '           require(newTotalSupply > oldTotalSupply, "totalSupply grows");\n', '           // avoid overly large rounding errors\n', '           assert(oldTotalSupply.add(tokensAmount.mul(9).div(10)) <= newTotalSupply);\n', '           assert(oldTotalSupply.add(tokensAmount.mul(11).div(10)) >= newTotalSupply);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice enable change of superowner\n', '     * @param _newSuperowner the address of the new owner\n', '     */\n', '    function transferSuperownership(\n', '        address _newSuperowner\n', '    )\n', '    external nonZeroAddress(_newSuperowner)\n', '    {\n', '        require(msg.sender == superowner, "only superowner");\n', '        require(!usedOwners[_newSuperowner], "owner was not used before");\n', '        usedOwners[_newSuperowner] = true;\n', '        uint value = balanceOf(superowner);\n', '        if (value > 0) {\n', '            super._burn(superowner, value);\n', '            emit TransferExtd(\n', '                superowner,\n', '                AccountClassification.Superowner,\n', '                address(0),\n', '                AccountClassification.Zero,\n', '                value\n', '            );\n', '        }\n', '        emit SuperownershipTransferred(superowner, _newSuperowner);\n', '        superowner = _newSuperowner;\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the regular amount of tokens of an account.\n', '     * @dev Gets the balance of the specified address.\n', '     * @param account The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address account) public view returns (uint) {\n', '        uint amount = balances[account];\n', '        uint oldScaleFactor = lastScalingFactor[account];\n', '        if (oldScaleFactor == 0) {\n', '            return 0;\n', '        } else if (oldScaleFactor == scaleFactor) {\n', '            return amount;\n', '        } else {\n', '            return amount.mul(scaleFactor).div(oldScaleFactor);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the fee corresponding to a transfer not exempt from fees.\n', '     * @param amount The amount of the transfer\n', '     * @return the number of tokens to be paid as a fee\n', '     */\n', '    function computeFee(uint amount) public view returns (uint) {\n', '        return amount.mul(transferFeeNumerator).div(TRANSFER_FEE_DENOMINATOR);\n', '    }\n', '\n', '    /**\n', '     * @notice Compute the total outstanding of tokens (excluding those held by owner\n', '     * and superowner, i.e., the inventory accounts).\n', '     * @dev function to get the total supply excluding inventory\n', '     * @return The uint total supply excluding inventory\n', '     */\n', '    function totalSupply() public view returns(uint) {\n', '        uint inventory = balanceOf(owner);\n', '        if (owner != superowner) {\n', '            inventory = inventory.add(balanceOf(superowner));\n', '        }\n', '        return (super.totalSupply().sub(inventory));\n', '    }\n', '\n', '    /**\n', '     * @notice enable change of owner\n', '     * @param _newOwner the address of the new owner\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(!usedOwners[_newOwner], "owner was not used before");\n', '        usedOwners[_newOwner] = true;\n', '        uint value = balanceOf(owner);\n', '        if (value > 0) {\n', '            super._burn(owner, value);\n', '            emit TransferExtd(\n', '                owner,\n', '                AccountClassification.Owner,\n', '                address(0),\n', '                AccountClassification.Zero,\n', '                value\n', '            );\n', '        }\n', '        super.transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', "     * @notice Wrapper around OZ's increaseApproval\n", '     * @dev Update the corresponding balance and scaling before increasing approval\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     * @return true in case of success\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public whenNotPaused returns (bool)\n', '    {\n', '        updateBalanceAndScaling(msg.sender);\n', '        updateBalanceAndScaling(_spender);\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', "     * @notice Wrapper around OZ's decreaseApproval\n", '     * @dev Update the corresponding balance and scaling before decreasing approval\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     * @return true in case of success\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public whenNotPaused returns (bool)\n', '    {\n', '        updateBalanceAndScaling(msg.sender);\n', '        updateBalanceAndScaling(_spender);\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred, from which the transfer fee will be deducted\n', '     * @return true in case of success\n', '     */\n', '    function transfer(\n', '        address _to,\n', '        uint _value\n', '    )\n', '    public whenNotPaused limitGasPrice returns (bool)\n', '    {\n', '        require(!transferBlacklisted[msg.sender], "sender is not blacklisted");\n', '        require(!transferBlacklisted[_to], "to address is not blacklisted");\n', '        require(!blockOtherAccounts ||\n', '            (getAccountClassification(msg.sender) != AccountClassification.Other &&\n', '            getAccountClassification(_to) != AccountClassification.Other),\n', '            "addresses are not blocked");\n', '\n', '        emit TransferExtd(\n', '            msg.sender,\n', '            getAccountClassification(msg.sender),\n', '            _to,\n', '            getAccountClassification(_to),\n', '            _value\n', '        );\n', '\n', '        updateBalanceAndScaling(msg.sender);\n', '\n', '        if (_to == address(0)) {\n', '            // burn tokens\n', '            super.burn(_value);\n', '            return true;\n', '        }\n', '\n', '        updateBalanceAndScaling(_to);\n', '\n', '        require(super.transfer(_to, _value), "transfer succeeds");\n', '\n', '        if (!avoidsFees[msg.sender] && !avoidsFees[_to]) {\n', '            computeAndBurnFee(_to, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred, from which the transfer fee\n', '     * will be deducted\n', '     * @return true in case of success\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint _value\n', '    )\n', '    public whenNotPaused limitGasPrice returns (bool)\n', '    {\n', '        require(!transferBlacklisted[msg.sender], "sender is not blacklisted");\n', '        require(!transferBlacklisted[_from], "from address is not blacklisted");\n', '        require(!transferBlacklisted[_to], "to address is not blacklisted");\n', '        require(!blockOtherAccounts ||\n', '            (getAccountClassification(_from) != AccountClassification.Other &&\n', '            getAccountClassification(_to) != AccountClassification.Other),\n', '            "addresses are not blocked");\n', '\n', '        emit TransferExtd(\n', '            _from,\n', '            getAccountClassification(_from),\n', '            _to,\n', '            getAccountClassification(_to),\n', '            _value\n', '        );\n', '\n', '        updateBalanceAndScaling(_from);\n', '\n', '        if (_to == address(0)) {\n', '            // burn tokens\n', '            super.transferFrom(_from, msg.sender, _value);\n', '            super.burn(_value);\n', '            return true;\n', '        }\n', '\n', '        updateBalanceAndScaling(_to);\n', '\n', '        require(super.transferFrom(_from, _to, _value), "transfer succeeds");\n', '\n', '        if (!avoidsFees[msg.sender] && !avoidsFees[_from] && !avoidsFees[_to]) {\n', '            computeAndBurnFee(_to, _value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. Beware that changing an allowance with this method brings the risk that someone\n', '     * may use both the old and the new allowance by unfortunate transaction ordering. One\n', "     * possible solution to mitigate this race condition is to first reduce the spender's\n", '     * allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value Amount of tokens to be spent, from which the transfer fee will be deducted.\n', '     * @return true in case of success\n', '     */\n', '    function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '        updateBalanceAndScaling(_spender);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function for TAPs to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return true in case of success\n', '     */\n', '    function mint(address _to, uint _amount) public returns(bool) {\n', '        require(!transferBlacklisted[_to], "to address is not blacklisted");\n', '        require(!blockOtherAccounts || getAccountClassification(_to) != AccountClassification.Other,\n', '            "to address is not blocked");\n', '        updateBalanceAndScaling(_to);\n', '        emit TransferExtd(\n', '            address(0),\n', '            AccountClassification.Zero,\n', '            _to,\n', '            getAccountClassification(_to),\n', '            _amount\n', '        );\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice toggle allowOthterAccounts variable\n', '     */\n', '    function toggleBlockOtherAccounts() public onlyOwner {\n', '        blockOtherAccounts = !blockOtherAccounts;\n', '        emit BlockOtherAccounts(blockOtherAccounts);\n', '    }\n', '\n', '    // get AccountClassification of an account\n', '    function getAccountClassification(\n', '        address account\n', '    )\n', '    internal view returns(AccountClassification)\n', '    {\n', '        if (account == address(0)) {\n', '            return AccountClassification.Zero;\n', '        } else if (account == owner) {\n', '            return AccountClassification.Owner;\n', '        } else if (account == superowner) {\n', '            return AccountClassification.Superowner;\n', '        } else if (TAPwhiteListed[account]) {\n', '            return AccountClassification.TAP;\n', '        } else {\n', '            return AccountClassification.Other;\n', '        }\n', '    }\n', '\n', '    // check if account is an owner\n', '    function isOwner(address account) internal view returns (bool) {\n', '        return account == owner || account == superowner;\n', '    }\n', '\n', '    // update balance and scaleFactor\n', '    function updateBalanceAndScaling(address account) internal {\n', '        uint oldBalance = balances[account];\n', '        uint newBalance = balanceOf(account);\n', '        if (lastScalingFactor[account] != scaleFactor) {\n', '            lastScalingFactor[account] = scaleFactor;\n', '        }\n', '        if (oldBalance != newBalance) {\n', '            balances[account] = newBalance;\n', '        }\n', '    }\n', '\n', '    // compute and burn a transfer fee\n', '    function computeAndBurnFee(address _to, uint _value) internal {\n', '        uint fee = computeFee(_value);\n', '        if (fee > 0) {\n', '            _burn(_to, fee);\n', '            emit TransferFee(_to, getAccountClassification(_to), fee);\n', '        }\n', '    }\n', '\n', '    // disabled\n', '    function finishMinting() public returns (bool) {\n', '        require(false, "is disabled");\n', '        return false;\n', '    }\n', '\n', '    // disabled\n', '    function burn(uint /* _value */) public {\n', '        // burn is only available through the transfer function\n', '        require(false, "is disabled");\n', '    }\n', '\n', '    // disabled\n', '    function renounceOwnership() public {\n', '        require(false, "is disabled");\n', '    }\n', '}']