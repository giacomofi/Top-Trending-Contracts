['pragma solidity ^0.5.0;\n', '\n', 'import "./Robe.sol";\n', 'import "./IRobeSyntaxChecker.sol";\n', '\n', '/**\n', '  * @title A simple HTML syntax checker\n', '  * @author Marco Vasapollo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bbd8ded4fbd6decfdac9d2d5dc95d8d4d6">[email&#160;protected]</a>>\n', '  * @author Alessandro Mario Lagana Toschi <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c4a5a8a1b084b6adb7a1b4ada7eaa7aba9">[email&#160;protected]</a>>\n', '*/\n', 'contract RobeHTMLSyntaxChecker is IRobeSyntaxChecker {\n', '\n', '    function check(uint256 rootTokenId, uint256 newTokenId, address owner, bytes memory payload, address robeAddress) public view returns(bool) {\n', '       //Extremely trivial and simplistic control coded in less than 30 seconds. We will make a more accurate one later\n', '        require(payload[0] == "<");\n', '        require(payload[1] == "h");\n', '        require(payload[2] == "t");\n', '        require(payload[3] == "m");\n', '        require(payload[4] == "l");\n', '        require(payload[5] == ">");\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', '  * @title A simple HTML-based Robe NFT\n', '  * \n', '  * @author Marco Vasapollo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="57343238173a322336253e39307934383a">[email&#160;protected]</a>>\n', '  * @author Alessandro Mario Lagana Toschi <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="254449405165574c5640554c460b464a48">[email&#160;protected]</a>>\n', '*/\n', 'contract RobeHTMLWrapper is Robe {\n', '\n', '    constructor() Robe(address(new RobeHTMLSyntaxChecker())) public {\n', '    }\n', '\n', '    function mint(string memory html) public returns(uint256) {\n', '        return super.mint(bytes(html));\n', '    }\n', '\n', '    function mint(uint256 tokenId, string memory html) public returns(uint256) {\n', '        return super.mint(tokenId, bytes(html));\n', '    }\n', '\n', '    function getHTML(uint256 tokenId) public view returns(string memory) {\n', '        return string(super.getContent(tokenId));\n', '    }\n', '\n', '    function getCompleteInfoInHTML(uint256 tokenId) public view returns(uint256, address, string memory) {\n', '        (uint256 position, address owner, bytes memory payload) = super.getCompleteInfo(tokenId);\n', '        return (position, owner, string(payload));\n', '    }\n', '}']