['pragma solidity 0.5.4;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract MultiSign {\n', '    using SafeMath for uint;\n', '    \n', '    address public ThirdParty = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);\n', '    address public Foundation = address(0x031DE0f3C1D4e525baBa97829eccb3d3D66E9bdb);\n', '    uint256 public ProposalID = 0;\n', '    mapping(uint => Proposal) public Proposals;\n', '\n', '    struct Proposal {\n', '        uint256 id;                   // proposal id\n', '        address to;                   // to address\n', '        bool close;                   // false open, true close\n', '        address tokenContractAddress; // ERC20 token contract address\n', '        uint256 amount;               // token amount\n', '        uint256 approvalByThirdParty; // default: 0 approval: 1 refuse: 2\n', '        uint256 approvalByFoundation; // default: 0 approval: 1 refuse: 2\n', '    }\n', '    \n', '    \n', '    constructor() public {\n', '    }\n', '    \n', '    function lookProposal(uint256 id) public view returns (uint256 _id, address _to, bool _close, address _tokenContractAddress, uint256 _amount, uint256 _approvalByThirdParty, uint256 _approvalByFoundation) {\n', '        Proposal memory p = Proposals[id];\n', '        return (p.id, p.to, p.close, p.tokenContractAddress, p.amount, p.approvalByThirdParty, p.approvalByFoundation);\n', '    }\n', '    \n', '    // only  Foundation or ThirdParty can proposal\n', '    function proposal (address _to, address _tokenContractAddress, uint256 _amount) public returns (uint256 id) {\n', '        require(msg.sender == Foundation || msg.sender == ThirdParty);\n', '        ProposalID = ProposalID.add(1);\n', '        Proposals[ProposalID] = Proposal(ProposalID, _to, false, _tokenContractAddress, _amount, 0, 0);\n', '        return id;\n', '    }\n', '    \n', '    // only  Foundation or ThirdParty can approval\n', '    function approval (uint256 id) public returns (bool) {\n', '        require(msg.sender == Foundation || msg.sender == ThirdParty);\n', '        Proposal storage p = Proposals[id];\n', '        require(p.close == false);\n', '        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\n', '            p.approvalByFoundation = 1;\n', '            Proposals[id] = p;\n', '        }\n', '        if (msg.sender == ThirdParty && p.approvalByThirdParty == 0) {\n', '            p.approvalByThirdParty = 1;\n', '            Proposals[id] = p;\n', '        }\n', '        \n', '        if (p.approvalByThirdParty == 1 && p.approvalByFoundation == 1) {\n', '            p.close = true;\n', '            Proposals[id] = p;\n', '            require(ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18)));\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    // only  Foundation or ThirdParty can refuse\n', '    function refuse (uint256 id) public returns (bool) {\n', '        require(msg.sender == Foundation || msg.sender == ThirdParty);\n', '        Proposal storage p = Proposals[id];\n', '        require(p.close == false);\n', '        require(p.approvalByFoundation == 0 || p.approvalByThirdParty == 0);\n', '        \n', '        if (msg.sender == Foundation && p.approvalByFoundation == 0) {\n', '            p.close = true;\n', '            p.approvalByFoundation = 2;\n', '            Proposals[id] = p;\n', '            return true;\n', '        }\n', '        if (msg.sender == ThirdParty && p.approvalByThirdParty == 0) {\n', '            p.close = true;\n', '            p.approvalByThirdParty = 2;\n', '            Proposals[id] = p;\n', '            return true;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function() payable external {\n', '        revert();\n', '    }\n', '}']