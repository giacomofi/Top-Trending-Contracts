['pragma solidity ^0.5.7;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor(address initialOwner) internal {\n', '        _owner = initialOwner;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title SDU Exchange contract\n', ' * @author https://grox.solutions\n', ' */\n', 'contract SDUExchange is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public SDUM;\n', '    IERC20 public SDU;\n', '\n', '    mapping (address => User) _users;\n', '\n', '    struct User {\n', '        uint256 deposit;\n', '        uint256 checkpoint;\n', '        uint256 reserved;\n', '    }\n', '\n', '    event Exchanged(address user, uint256 amount);\n', '    event Withdrawn(address user, uint256 amount);\n', '\n', '    constructor(address SDUMAddr, address SDUAddr, address initialOwner) public Ownable(initialOwner) {\n', '        require(SDUMAddr != address(0) && SDUAddr != address(0));\n', '\n', '        SDUM = IERC20(SDUMAddr);\n', '        SDU = IERC20(SDUAddr);\n', '    }\n', '\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external {\n', '        require(token == address(SDUM));\n', '        exchange(from, amount);\n', '    }\n', '\n', '    function exchange(address from, uint256 amount) public {\n', '        SDUM.burnFrom(from, amount);\n', '\n', '        SDU.transfer(from, amount);\n', '\n', '        if (_users[from].deposit != 0) {\n', '            _users[from].reserved = getDividends(msg.sender);\n', '        }\n', '\n', '        _users[from].checkpoint = block.timestamp;\n', '        _users[from].deposit = _users[from].deposit.add(amount);\n', '\n', '        emit Exchanged(from, amount);\n', '    }\n', '\n', '    function() external payable {\n', '        withdraw();\n', '    }\n', '\n', '    function withdraw() public {\n', '        uint256 payout = getDividends(msg.sender);\n', '\n', '        if (_users[msg.sender].reserved != 0) {\n', '            payout = payout.add(_users[msg.sender].reserved);\n', '            _users[msg.sender].reserved = 0;\n', '        }\n', '\n', '        _users[msg.sender].checkpoint = block.timestamp;\n', '        SDU.transfer(msg.sender, payout);\n', '\n', '        emit Withdrawn(msg.sender, payout);\n', '    }\n', '\n', '    function getDeposit(address addr) public view returns(uint256) {\n', '        return _users[addr].deposit;\n', '    }\n', '\n', '    function getDividends(address addr) public view returns(uint256) {\n', '        return (_users[addr].deposit.div(10)).mul(block.timestamp.sub(_users[addr].checkpoint)).div(30 days);\n', '    }\n', '\n', '    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '}']