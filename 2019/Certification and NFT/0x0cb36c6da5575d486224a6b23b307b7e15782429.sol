['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract LetsBreakThings {\n', '    \n', '    address public creator;\n', '    address public creatorproxy;\n', '    \n', '\n', '    // Fallback function\n', '    function deposit() public payable {\n', '\n', '    }\n', '    \n', '    // constructor\n', '    constructor(address _proxy) public {\n', '        creator = msg.sender;\n', '        creatorproxy = _proxy;\n', '    }\n', '\n', '    \n', '    /// create events to log everything as cheaply as possible instead of by return values\n', '    event txSenderDetails(address sender, address origin);\n', '    event gasDetails(uint remainingGas, uint txGasPrice, uint blockGasLimit);\n', '    event balanceLog(address balanceHolder, uint256 balance);\n', '    event blockDetails(address coinbase, uint difficulty, uint blockNumber, uint timestamp);\n', '    \n', '\n', '    // deprecated in version 0.4.22 and replaced by blockhash(uint blockNumber).\n', '    function getBlockHash(uint _blockNumber) public view returns (bytes32 _hash) {\n', '        // blockHash() for later versions\n', '        logBlockDetails();\n', '        logGasDetails();\n', '        logGasDetails();\n', '        logSenderDetails();\n', '        return block.blockhash(_blockNumber);\n', '    }\n', '    \n', '    /// @dev Emits details about the origin of a transaction.\n', '    /// @dev This includes sender and tx origin\n', '    function logSenderDetails() public view {\n', '        emit txSenderDetails(msg.sender, tx.origin);\n', '    }\n', '    \n', '    /// @dev logs the gas, gasprice and block gaslimit\n', '    function logGasDetails() public view {\n', '        emit gasDetails(msg.gas, tx.gasprice, block.gaslimit);\n', '        // gasLeft() in later versions\n', '    }\n', '    \n', '    /// @dev logs the coinbase difficulty number and timestamp for the block\n', '    function logBlockDetails() public view { \n', '        emit blockDetails(block.coinbase, block.difficulty, block.number, block.timestamp);\n', '    }\n', '    \n', '    /// @dev Test function number 1\n', '    function checkBalanceSendEth(address _recipient) public {\n', '        \n', '        require(creator == msg.sender, "unauthorized");\n', '\n', '        /// log balance at the start\n', '        checkBalance(_recipient);\n', '        \n', '\n', '        /// transfer recipient smallest unit possible\n', '        /// solium-disable-next-line\n', '        _recipient.transfer(1);\n', '\n', '        /// log balance\n', '        checkBalance(_recipient);\n', '\n', '        /// send recipient smallest unit possible\n', '        _recipient.send(1);\n', '\n', '        /// check final balance\n', '        checkBalance(_recipient);\n', '        \n', '        /// log everything\n', '        logBlockDetails();\n', '        logGasDetails();\n', '        logGasDetails();\n', '        logSenderDetails();\n', '        \n', '        \n', '    \n', '    }\n', '    \n', '    /// @dev internal function to check balance for an address and emit log event\n', '    function checkBalance(address _target) internal returns (uint256) {\n', '        uint256 balance = address(_target).balance;\n', '        emit balanceLog(_target, balance);\n', '        return balance;\n', '    }\n', '    \n', '    \n', '    /// @dev lets verify some block hashes against each other on chain\n', '    function verifyBlockHash(string memory _hash, uint _blockNumber) public returns (bytes32, bytes32) {\n', '        bytes32 hash1 = keccak256(_hash);\n', '        bytes32 hash2 = getBlockHash(_blockNumber);\n', '        return(hash1, hash2) ;\n', '    }\n', '    \n', '}\n', '\n', '/// @dev now lets try this via a proxy\n', '\n', '/// @dev creator proxy calls the target function\n', '/// @dev same test, same tx.origin, different msg.sender\n', 'contract creatorProxy {\n', '    function proxyCall(address _target, address _contract) public {\n', '        LetsBreakThings(_contract).checkBalanceSendEth(_target);\n', '    }\n', '}\n', '\n', '\n', 'contract ToucheWhoeverFrontRanThat {\n', '    \n', '     event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '            address public receiver = 0xD906Cecf64772ae28153Bd37b4336DA18A701b96;\n', '\n', '  \n', '    // address public creator;\n', '    // address public creatorproxy;\n', '    // event txSenderDetails(address sender, address origin);\n', '    // event gasDetails(uint remainingGas, uint txGasPrice, uint blockGasLimit);\n', '    // event balanceLog(address balanceHolder, uint256 balance);\n', '    // event blockDetails(address coinbase, uint difficulty, uint blockNumber, uint timestamp);\n', '    function breakTheData() public {\n', '        \n', '        \n', '        emit Transfer(receiver, receiver, 1618);\n', '        emit Transfer(receiver, receiver, 1616);\n', '        emit Transfer(receiver, receiver, 1618);\n', '        emit Transfer(receiver, receiver, 16138);\n', '        emit Transfer(receiver, receiver, 16143);\n', '        emit Transfer(receiver, receiver, 1618);\n', '        emit Transfer(receiver, receiver, 1618);\n', '        emit Transfer(receiver, receiver, 1618);\n', '    }\n', '\n', '    // Fallback function\n', '    function deposit() public payable {\n', '\n', '    }\n', '    \n', '    // constructor\n', '    constructor() public {\n', '        // creator = msg.sender;\n', '        // creatorproxy = _proxy;\n', '    }\n', '    \n', '    \n', '\n', '\n', ' \n', '    \n', '}']