['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ceil {\n', '    \n', '    \n', '    function ceil(uint a, uint m) constant returns (uint ) {\n', '        return ((a + m - 1) / m) * m;\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', 'contract QuickSort {\n', '    \n', '    \n', '    function sort(uint[] data) public constant returns(uint[]) {\n', '       quickSort(data, int(0), int(data.length - 1));\n', '       return data;\n', '    }\n', '    \n', '    \n', '    function quickSort(uint[] memory arr, int left, int right) internal{\n', '        int i = left;\n', '        int j = right;\n', '        if(i==j) return;\n', '        uint pivot = arr[uint(left + (right - left) / 2)];\n', '        while (i <= j) {\n', '            while (arr[uint(i)] < pivot) i++;\n', '            while (pivot < arr[uint(j)]) j--;\n', '            if (i <= j) {\n', '                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\n', '                i++;\n', '                j--;\n', '            }\n', '        }\n', '        if (left < j)\n', '            quickSort(arr, left, j);\n', '        if (i < right)\n', '            quickSort(arr, i, right);\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', 'contract Abssub{\n', '    \n', '    \n', '    function AbsSub(uint x,uint y) constant returns(uint ){\n', '        if (x>=y){\n', '            return(x-y);\n', '        }else{\n', '            return(y-x);\n', '        }\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', 'contract Rounding{\n', '    \n', '    \n', '    function rounding(uint x) constant returns(uint ){\n', '        if (x-(x/10)*10>=5){\n', '            return(x/10+1);\n', '        }else{\n', '            return(x/10);\n', '        }\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', 'contract FiveElementsAdministration is QuickSort,Ceil,Abssub,Rounding{\n', '    \n', '    \n', '    address[] Users;\n', '    uint[5][] Guesses;\n', '    uint[] EntryPaid;\n', '    uint[5] Weights;\n', '    uint[5] Ans;\n', '    uint[5] AvgGuesses;\n', '    uint[] ERaw;\n', '    // Raw Error Datas\n', '    uint[] Error;\n', '    uint[] EST;\n', '    // Error Datas Sorted and Trimmed\n', '    address[] Winners;\n', '    uint[] WinEntryPaid;\n', '    uint MinEntryPrice;\n', '    uint FeePM;\n', '    // Fee Per Million\n', '    uint ExpirationTime;\n', '    uint Period;\n', '    uint Round;\n', '    uint WOCC;\n', '    bool Frozen;\n', '    address constant private Admin=0x92Bf51aB8C48B93a96F8dde8dF07A1504aA393fD;\n', '    address constant private Adam=0x9640a35e5345CB0639C4DD0593567F9334FfeB8a;\n', '    address constant private Tummy=0x820090F4D39a9585a327cc39ba483f8fE7a9DA84;\n', '    address constant private Willy=0xA4757a60d41Ff94652104e4BCdB2936591c74d1D;\n', '    address constant private Nicky=0x89473CD97F49E6d991B68e880f4162e2CBaC3561;\n', '    address constant private Artem=0xA7e8AFa092FAa27F06942480D28edE6fE73E5F88;\n', '    address FiveElementsContractAddress;\n', '    \n', '    \n', '    //event ResultsAndPayouts(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,uint TotalWinners,uint TotalParticipants,uint PayoutsPerEtherEntry,uint TotalPrizePool,uint AverageEntryPaid);\n', '    \n', '    \n', '    event ResultsAudit(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE);\n', '    \n', '    \n', '    event PayoutInfo(uint TotalWinners,uint TotalParticipants,uint PayoutsPerEtherEntry,uint TotalPrizePool,uint AverageEntryPaid);\n', '    \n', '    \n', '    event NoPlayers();\n', '    \n', '    \n', '    event Extension(uint extension,uint newExpirationTime);\n', '    \n', '    \n', '    event Initialisation(uint EntryPrice,uint FeePerMillion,uint submissionPeriod,uint expirationTime,uint WA,uint WB,uint WC,uint WD,uint WE);\n', '    \n', '    \n', '    event UserBetAmount(address indexed User,uint Amount);\n', '    \n', '    \n', '    event RoundNumber(uint round);\n', '    \n', '    \n', '    event FiveElementsAddressSet(address indexed FiveElementsAddress);\n', '    \n', '    \n', '    event UserJoined(address indexed User,address indexed AddedBy,uint Value,uint GuessA,uint GuessB,uint GuessC,uint GuessD,uint GuessE);\n', '    \n', '    \n', '    event BetAmountUpdated(address indexed User,address indexed UpdatedBy,uint BetMoreAmount,uint TotalBetAmount);\n', '    \n', '    \n', '    event LiveRanking(address indexed User,uint Rank,uint TotalPlayers,uint TotalEntryPaid);\n', '    \n', '    \n', '    event MinEntryInWei(uint MinEntryValue);\n', '    \n', '    \n', '    event WeightsSet(uint WA,uint WB,uint WC,uint WD,uint WE);\n', '    \n', '    \n', '    event ContractFrozen(string Status);\n', '    \n', '    \n', '    event ContractDefrosted(string Status);\n', '    \n', '    \n', '    event FundsEjected(uint TotalEjected);\n', '    \n', '    \n', '    event UserQuitGame(address indexed User,address indexed FunctionActivatedBy,uint TotalRefundAmount);\n', '    \n', '    \n', '    event UserRefundAmount(address indexed User,address indexed FunctionActivatedBy,uint RefundAmount,uint NewEntryBalance);\n', '    \n', '    \n', '    event Volume(uint PrizePool,uint TotalPlayers);\n', '    \n', '    \n', '    event CurrentFeePerMillion(uint FeePerMillion);\n', '    \n', '    \n', '    event AvgOfAllGuesses(uint AvgGuessA,uint AvgGuessB,uint AvgGuessC,uint AvgGuessD,uint AvgGuessE,uint ActivationCount);\n', '    \n', '    \n', '    event ReceivedFunds(address indexed Sender,uint Value);\n', '    \n', '    \n', '    function Results(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,bool Freeze){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        uint Bal=address(this).balance;\n', '        Ans[0]=RealPriceA;\n', '        Ans[1]=RealPriceB;\n', '        Ans[2]=RealPriceC;\n', '        Ans[3]=RealPriceD;\n', '        Ans[4]=RealPriceE;\n', '        require(Ans[0]>0 && Ans[1]>0 && Ans[2]>0 && Ans[3]>0 && Ans[4]>0);\n', '        uint L=Users.length;\n', '        if (L>0){\n', '            for (uint k=0;k<L;k++){\n', '                uint E=0;\n', '                for (uint j=0;j<5;j++){\n', '                    E=E+1000000*Weights[j]*AbsSub(Guesses[k][j],Ans[j])/Ans[j];\n', '                }\n', '                ERaw.push(E);\n', '            }\n', '            Error=sort(ERaw);\n', '            uint store=Error[L-1]+1;\n', '        for (k=0;k<L;k++){\n', '            if (store!=Error[k]){\n', '                EST.push(Error[k]);\n', '                store=Error[k];\n', '            }\n', '        }\n', '        uint M=EST[ceil(5*(EST.length),10)/10-1];\n', '        uint Sum=0;\n', '        for (k=0;k<L;k++){\n', '            if (ERaw[k]<=M){\n', '                Winners.push(Users[k]);\n', '                WinEntryPaid.push(EntryPaid[k]);\n', '                Sum=Sum+EntryPaid[k];\n', '            }\n', '        }\n', '        uint WL=Winners.length;\n', '        for (k=0;k<WL;k++){\n', '            uint I=0;\n', '            while (I<L&&Winners[k]!=Users[I]){\n', '                I=I+1;\n', '            }\n', '            Users[I].transfer(EntryPaid[I]*Bal*(1000000-FeePM)/(1000000*Sum));\n', '        }\n', '        for (k=0;k<L;k++){\n', '            for (j=0;j<5;j++){\n', '                AvgGuesses[j]=AvgGuesses[j]+Guesses[k][j];\n', '            }\n', '        }\n', '        for (j=0;j<5;j++){\n', '            AvgGuesses[j]=rounding(10*AvgGuesses[j]/L);\n', '        }\n', '        emit AvgOfAllGuesses(AvgGuesses[0],AvgGuesses[1],AvgGuesses[2],AvgGuesses[3],AvgGuesses[4],WOCC);\n', '        //emit ResultsAndPayouts(uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE,Winners.length,L,Bal/Sum,Bal,Bal/L);\n', '        emit ResultsAudit(Ans[0],Ans[1],Ans[2],Ans[3],Ans[4]);\n', '        emit PayoutInfo(Winners.length,L,Bal/Sum,Bal,Bal/L);\n', '        }else{\n', '        emit NoPlayers();\n', '        emit ResultsAudit(Ans[0],Ans[1],Ans[2],Ans[3],Ans[4]);\n', '        }\n', '        Frozen=Freeze;\n', '        Round=Round+1;\n', '        ExpirationTime=now+Period;\n', '        Adam.transfer(address(this).balance/2);\n', '        Admin.transfer(address(this).balance);\n', '        delete Users;\n', '        delete Guesses;\n', '        delete EntryPaid;\n', '        delete AvgGuesses;\n', '        delete ERaw;\n', '        delete Error;\n', '        delete EST;\n', '        delete Winners;\n', '        delete WinEntryPaid;\n', '        delete WOCC;\n', '    }\n', '    \n', '    \n', '    function SetExtension(uint extension){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        ExpirationTime=ExpirationTime+extension;\n', '        emit Extension(extension,ExpirationTime);\n', '    }\n', '    \n', '    \n', '    function Initialise(uint EntryPrice,uint FeePerMillion,uint SetSubmissionPeriod,uint WA,uint WB,uint WC,uint WD,uint WE,bool FirstRound){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        MinEntryPrice=EntryPrice;\n', '        FeePM=FeePerMillion;\n', '        Period=SetSubmissionPeriod;\n', '        ExpirationTime=now+Period;\n', '        Weights[0]=WA;\n', '        Weights[1]=WB;\n', '        Weights[2]=WC;\n', '        Weights[3]=WD;\n', '        Weights[4]=WE;\n', '        if (FirstRound==true){\n', '            Round=1;\n', '        }\n', '        Frozen=false;\n', '        emit Initialisation(EntryPrice,FeePerMillion,SetSubmissionPeriod,ExpirationTime,WA,WB,WC,WD,WE);\n', '        emit RoundNumber(Round);\n', '    }\n', '    \n', '    \n', '    function GetBetAmount(address User)public returns(uint Amount){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        uint L=Users.length;\n', '        uint k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        if (k<L){\n', '            Amount=EntryPaid[k];\n', '        }else{\n', '            Amount=0;\n', '        }\n', '        emit UserBetAmount(User,Amount);\n', '    }\n', '    \n', '    \n', '    function GetRoundNumber()public returns(uint round){\n', '        round=Round;\n', '        emit RoundNumber(round);\n', '    }\n', '    \n', '    \n', '    function SetFiveElementsAddress(address ContractAddress){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        FiveElementsContractAddress=ContractAddress;\n', '        emit FiveElementsAddressSet(ContractAddress);\n', '    }\n', '    \n', '    \n', '    function UserJoin(address User,uint Value,uint GuessA,uint GuessB,uint GuessC,uint GuessD,uint GuessE){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        require(Frozen==false);\n', '        require(Value>0);\n', '        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\n', '        uint L=Users.length;\n', '        uint k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        require(k>=L);\n', '        Users.push(User);\n', '        EntryPaid.push(Value);\n', '        Guesses.push([GuessA,GuessB,GuessC,GuessD,GuessE]);\n', '        emit UserJoined(User,msg.sender,Value,GuessA,GuessB,GuessC,GuessD,GuessE);\n', '    }\n', '    \n', '    \n', '    function UpdateBetAmount(address User,uint Value){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        require(Frozen==false);\n', '        require(Value>0);\n', '        require(now<=ExpirationTime+14400 || msg.sender==Admin || msg.sender==Adam);\n', '        uint L=Users.length;\n', '        uint k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        require(k<L);\n', '        EntryPaid[k]=EntryPaid[k]+Value;\n', '        emit BetAmountUpdated(User,msg.sender,Value,EntryPaid[k]);\n', '    }\n', '    \n', '    \n', '    function GetCurrentRank(address User,uint RealPriceA,uint RealPriceB,uint RealPriceC,uint RealPriceD,uint RealPriceE)public returns(uint Rank,uint TotalPlayers){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        Ans[0]=RealPriceA;\n', '        Ans[1]=RealPriceB;\n', '        Ans[2]=RealPriceC;\n', '        Ans[3]=RealPriceD;\n', '        Ans[4]=RealPriceE;\n', '        require(Ans[0]>0 && Ans[1]>0 && Ans[2]>0 && Ans[3]>0 && Ans[4]>0);\n', '        uint L=Users.length;\n', '        require(L>0);\n', '        for (uint k=0;k<L;k++){\n', '                uint E=0;\n', '                for (uint j=0;j<5;j++){\n', '                    E=E+1000000*Weights[j]*AbsSub(Guesses[k][j],Ans[j])/Ans[j];\n', '                }\n', '                ERaw.push(E);\n', '            }\n', '            Error=sort(ERaw);\n', '            uint store=Error[L-1]+1;\n', '        for (k=0;k<L;k++){\n', '            if (store!=Error[k]){\n', '                EST.push(Error[k]);\n', '                store=Error[k];\n', '            }\n', '        }\n', '        k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        require(k<L);\n', '        uint TP=EST.length;\n', '        j=0;\n', '        while (ERaw[k]>=EST[j]){\n', '            j=j+1;\n', '        }\n', '        TotalPlayers=TP;\n', '        Rank=j;\n', '        delete ERaw;\n', '        delete Error;\n', '        delete EST;\n', '        emit LiveRanking(User,Rank,TotalPlayers,EntryPaid[k]);\n', '    }\n', '    \n', '    \n', '    function GetMinEntry()public returns(uint MinEntry){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        MinEntry=MinEntryPrice;\n', '        emit MinEntryInWei(MinEntry);\n', '    }\n', '    \n', '    \n', '    function SetWeights(uint WA,uint WB,uint WC,uint WD,uint WE){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        Weights[0]=WA;\n', '        Weights[1]=WB;\n', '        Weights[2]=WC;\n', '        Weights[3]=WD;\n', '        Weights[4]=WE;\n', '        emit WeightsSet(WA,WB,WC,WD,WE);\n', '    }\n', '    \n', '    \n', '    function FreezeContract(){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        require(Frozen==false);\n', '        Frozen=true;\n', '        emit ContractFrozen("Frozen");\n', '    }\n', '    \n', '    \n', '    function UnfreezeContract(){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        require(Frozen==true);\n', '        Frozen=false;\n', '        emit ContractDefrosted("Defrosted");\n', '    }\n', '    \n', '    \n', '    function FreezeContractAndEjectFunds(){\n', '        require(msg.sender==Admin || msg.sender==Adam);\n', '        Frozen=true;\n', '        uint Bal=address(this).balance;\n', '        uint L=Users.length;\n', '        for (uint k=0;k<L;k++){\n', '            Users[k].transfer(EntryPaid[k]);\n', '        }\n', '        emit ContractFrozen("Frozen");\n', '        emit FundsEjected(Bal);\n', '        delete Users;\n', '        delete Guesses;\n', '        delete EntryPaid;\n', '    }\n', '    \n', '    \n', '    function QuitAndRefund(address User){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\n', '        uint L=Users.length;\n', '        uint k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        require(k<L);\n', '        if (User==Admin || User==Adam){\n', '            User.transfer(EntryPaid[k]);\n', '        }else{\n', '        User.transfer(EntryPaid[k]*(1000000-FeePM)/1000000);\n', '        Admin.transfer(EntryPaid[k]*FeePM/2000000);\n', '        Adam.transfer(EntryPaid[k]*FeePM/2000000);\n', '        }\n', '        emit UserQuitGame(User,msg.sender,EntryPaid[k]);\n', '        delete Users[k];\n', '        delete Guesses[k];\n', '        delete EntryPaid[k];\n', '    }\n', '    \n', '    \n', '    function RefundAmount(address User,uint Amount){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        require(now<=ExpirationTime || msg.sender==Admin || msg.sender==Adam);\n', '        uint L=Users.length;\n', '        uint k=0;\n', '        while (k<L&&User!=Users[k]){\n', '            k=k+1;\n', '        }\n', '        require(k<L);\n', '        require(EntryPaid[k]>Amount && ((EntryPaid[k]-Amount)>=MinEntryPrice || User==Admin || User==Adam || User==Tummy || User==Willy || User==Nicky || User==Artem));\n', '        if (User==Admin || User==Adam){\n', '            User.transfer(Amount);\n', '        }else{\n', '        User.transfer(Amount*(1000000-FeePM)/1000000);\n', '        Admin.transfer(Amount*FeePM/2000000);\n', '        Adam.transfer(Amount*FeePM/2000000);\n', '        }\n', '        EntryPaid[k]=EntryPaid[k]-Amount;\n', '        emit UserRefundAmount(User,msg.sender,Amount,EntryPaid[k]);\n', '    }\n', '    \n', '    \n', '    function GetBetVolume(){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        uint L=Users.length;\n', '        uint Bal=address(this).balance;\n', '        emit Volume(Bal,L);\n', '    }\n', '    \n', '    \n', '    function GetFeePerMillion()public returns(uint FeePerMillion){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        FeePerMillion=FeePM;\n', '        emit CurrentFeePerMillion(FeePerMillion);\n', '    }\n', '    \n', '    \n', '    function AverageOfAllGuesses()public returns(uint[5] ){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        uint L=Users.length;\n', '        require(L>0 || msg.sender==Admin || msg.sender==Adam);\n', '        if (L>0){\n', '        require((now<=ExpirationTime && now+7200>=ExpirationTime) || msg.sender==Admin || msg.sender==Adam);\n', '        require(WOCC<=5 || msg.sender==Admin || msg.sender==Adam);\n', '        for (uint k=0;k<L;k++){\n', '            for (uint j=0;j<5;j++){\n', '                AvgGuesses[j]=AvgGuesses[j]+Guesses[k][j];\n', '            }\n', '        }\n', '        for (j=0;j<5;j++){\n', '            AvgGuesses[j]=rounding(10*AvgGuesses[j]/L);\n', '        }\n', '        if (msg.sender==Admin || msg.sender==Adam){\n', '        }else{\n', '        WOCC=WOCC+1;\n', '        }\n', '        return AvgGuesses;\n', '        emit AvgOfAllGuesses(AvgGuesses[0],AvgGuesses[1],AvgGuesses[2],AvgGuesses[3],AvgGuesses[4],WOCC);\n', '        delete AvgGuesses;\n', '        }else{\n', '        emit NoPlayers();\n', '        }\n', '    }\n', '    \n', '    \n', '    function GetWisdomOfCrowdsActivationCount()public returns(uint ){\n', '        require(msg.sender==Admin || msg.sender==Adam || msg.sender==FiveElementsContractAddress);\n', '        return(WOCC);\n', '    }\n', '    \n', '    \n', '    function () public payable{\n', '        emit ReceivedFunds(msg.sender,msg.value);\n', '    }\n', '    \n', '    \n', '}']