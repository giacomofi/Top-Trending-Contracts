['// File: contracts/lib/data/Pb.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// runtime proto sol library\n', 'library Pb {\n', '    enum WireType { Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32 }\n', '\n', '    struct Buffer {\n', "        uint idx;  // the start index of next read. when idx=b.length, we're done\n", '        bytes b;   // hold serialized proto msg, readonly\n', '    }\n', '\n', '    // create a new in-memory Buffer object from raw msg bytes\n', '    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n', '        buf.b = raw;\n', '        buf.idx = 0;\n', '    }\n', '\n', '    // whether there are unread bytes\n', '    function hasMore(Buffer memory buf) internal pure returns (bool) {\n', '        return buf.idx < buf.b.length;\n', '    }\n', '\n', '    // decode current field number and wiretype\n', '    function decKey(Buffer memory buf) internal pure returns (uint tag, WireType wiretype) {\n', '        uint v = decVarint(buf);\n', '        tag = v / 8;\n', '        wiretype = WireType(v & 7);\n', '    }\n', '\n', '    // count tag occurrences, return an array due to no memory map support\n', '\t// have to create array for (maxtag+1) size. cnts[tag] = occurrences\n', '\t// should keep buf.idx unchanged because this is only a count function\n', '    function cntTags(Buffer memory buf, uint maxtag) internal pure returns (uint[] memory cnts) {\n', '        uint originalIdx = buf.idx;\n', "        cnts = new uint[](maxtag+1);  // protobuf's tags are from 1 rather than 0\n", '        uint tag;\n', '        WireType wire;\n', '        while (hasMore(buf)) {\n', '            (tag, wire) = decKey(buf);\n', '            cnts[tag] += 1;\n', '            skipValue(buf, wire);\n', '        }\n', '        buf.idx = originalIdx;\n', '    }\n', '\n', '    // read varint from current buf idx, move buf.idx to next read, return the int value\n', '    function decVarint(Buffer memory buf) internal pure returns (uint v) {\n', '        bytes10 tmp;  // proto int is at most 10 bytes (7 bits can be used per byte)\n', '        bytes memory bb = buf.b;  // get buf.b mem addr to use in assembly\n', '        v = buf.idx;  // use v to save one additional uint variable\n', '        assembly {\n', '            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n', '        }\n', '        uint b; // store current byte content\n', '        v = 0; // reset to 0 for return value\n', '        for (uint i=0; i<10; i++) {\n', '            assembly {\n', "                b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra\n", '            }\n', '            v |= (b & 0x7F) << (i * 7);\n', '            if (b & 0x80 == 0) {\n', '                buf.idx += i + 1;\n', '                return v;\n', '            }\n', '        }\n', '        revert(); // i=10, invalid varint stream\n', '    }\n', '\n', '    // read length delimited field and return bytes\n', '    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        b = new bytes(len);\n', '        bytes memory bufB = buf.b;  // get buf.b mem addr to use in assembly\n', '        uint bStart;\n', '        uint bufBStart = buf.idx;\n', '        assembly {\n', '            bStart := add(b, 32)\n', '            bufBStart := add(add(bufB, 32), bufBStart)\n', '        }\n', '        for (uint i=0; i<len; i+=32) {\n', '            assembly{\n', '                mstore(add(bStart, i), mload(add(bufBStart, i)))\n', '            }\n', '        }\n', '        buf.idx = end;\n', '    }\n', '\n', '    // return packed ints\n', '    function decPacked(Buffer memory buf) internal pure returns (uint[] memory t) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        // array in memory must be init w/ known length\n', '        // so we have to create a tmp array w/ max possible len first\n', '        uint[] memory tmp = new uint[](len);\n', '        uint i = 0; // count how many ints are there\n', '        while (buf.idx < end) {\n', '            tmp[i] = decVarint(buf);\n', '            i++;\n', '        }\n', '        t = new uint[](i); // init t with correct length\n', '        for (uint j=0; j<i; j++) {\n', '            t[j] = tmp[j];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    // move idx pass current value field, to beginning of next tag or msg end\n', '    function skipValue(Buffer memory buf, WireType wire) internal pure {\n', '        if (wire == WireType.Varint) { decVarint(buf); }\n', '        else if (wire == WireType.LengthDelim) {\n', '            uint len = decVarint(buf);\n', '            buf.idx += len; // skip len bytes value data\n', '            require(buf.idx <= buf.b.length);  // avoid overflow\n', '        } else { revert(); }  // unsupported wiretype\n', '    }\n', '\n', '    // type conversion help utils\n', '    function _bool(uint x) internal pure returns (bool v) {\n', '        return x != 0;\n', '    }\n', '\n', '    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n', "        require(b.length <= 32);  // b's length must be smaller than or equal to 32\n", '        assembly { v := mload(add(b, 32)) }  // load all 32bytes to v\n', '        v = v >> (8 * (32 - b.length));  // only first b.length is valid\n', '    }\n', '\n', '    function _address(bytes memory b) internal pure returns (address v) {\n', '        v = _addressPayable(b);\n', '    }\n', '\n', '    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n', '        require(b.length == 20);\n', '        //load 32bytes then shift right 12 bytes\n', '        assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }\n', '    }\n', '\n', '    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n', '        require(b.length == 32);\n', '        assembly { v := mload(add(b, 32)) }\n', '    }\n', '\n', '    // uint[] to uint8[]\n', '    function uint8s(uint[] memory arr) internal pure returns (uint8[] memory t) {\n', '        t = new uint8[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint8(arr[i]); }\n', '    }\n', '\n', '    function uint32s(uint[] memory arr) internal pure returns (uint32[] memory t) {\n', '        t = new uint32[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint32(arr[i]); }\n', '    }\n', '\n', '    function uint64s(uint[] memory arr) internal pure returns (uint64[] memory t) {\n', '        t = new uint64[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint64(arr[i]); }\n', '    }\n', '\n', '    function bools(uint[] memory arr) internal pure returns (bool[] memory t) {\n', '        t = new bool[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = arr[i]!=0; }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/data/PbChain.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: chain.proto\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library PbChain {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    struct OpenChannelRequest {\n', '        bytes channelInitializer;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct OpenChannelRequest\n', '\n', '    function decOpenChannelRequest(bytes memory raw) internal pure returns (OpenChannelRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelInitializer = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder OpenChannelRequest\n', '\n', '    struct CooperativeWithdrawRequest {\n', '        bytes withdrawInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct CooperativeWithdrawRequest\n', '\n', '    function decCooperativeWithdrawRequest(bytes memory raw) internal pure returns (CooperativeWithdrawRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.withdrawInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeWithdrawRequest\n', '\n', '    struct CooperativeSettleRequest {\n', '        bytes settleInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct CooperativeSettleRequest\n', '\n', '    function decCooperativeSettleRequest(bytes memory raw) internal pure returns (CooperativeSettleRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.settleInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeSettleRequest\n', '\n', '    struct ResolvePayByConditionsRequest {\n', '        bytes condPay;   // tag: 1\n', '        bytes[] hashPreimages;   // tag: 2\n', '    } // end struct ResolvePayByConditionsRequest\n', '\n', '    function decResolvePayByConditionsRequest(bytes memory raw) internal pure returns (ResolvePayByConditionsRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.hashPreimages = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPay = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.hashPreimages[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ResolvePayByConditionsRequest\n', '\n', '    struct SignedSimplexState {\n', '        bytes simplexState;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct SignedSimplexState\n', '\n', '    function decSignedSimplexState(bytes memory raw) internal pure returns (SignedSimplexState memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.simplexState = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SignedSimplexState\n', '\n', '    struct SignedSimplexStateArray {\n', '        SignedSimplexState[] signedSimplexStates;   // tag: 1\n', '    } // end struct SignedSimplexStateArray\n', '\n', '    function decSignedSimplexStateArray(bytes memory raw) internal pure returns (SignedSimplexStateArray memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(1);\n', '        m.signedSimplexStates = new SignedSimplexState[](cnts[1]);\n', '        cnts[1] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.signedSimplexStates[cnts[1]] = decSignedSimplexState(buf.decBytes());\n', '                cnts[1]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SignedSimplexStateArray\n', '\n', '    struct ChannelMigrationRequest {\n', '        bytes channelMigrationInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct ChannelMigrationRequest\n', '\n', '    function decChannelMigrationRequest(bytes memory raw) internal pure returns (ChannelMigrationRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelMigrationInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ChannelMigrationRequest\n', '\n', '}\n', '\n', '// File: contracts/lib/data/PbEntity.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: entity.proto\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library PbEntity {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    enum TokenType { INVALID, ETH, ERC20 }\n', '\n', '    // TokenType[] decode function\n', '    function TokenTypes(uint[] memory arr) internal pure returns (TokenType[] memory t) {\n', '        t = new TokenType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TokenType(arr[i]); }\n', '    }\n', '\n', '    enum TransferFunctionType { BOOLEAN_AND, BOOLEAN_OR, BOOLEAN_CIRCUIT, NUMERIC_ADD, NUMERIC_MAX, NUMERIC_MIN }\n', '\n', '    // TransferFunctionType[] decode function\n', '    function TransferFunctionTypes(uint[] memory arr) internal pure returns (TransferFunctionType[] memory t) {\n', '        t = new TransferFunctionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TransferFunctionType(arr[i]); }\n', '    }\n', '\n', '    enum ConditionType { HASH_LOCK, DEPLOYED_CONTRACT, VIRTUAL_CONTRACT }\n', '\n', '    // ConditionType[] decode function\n', '    function ConditionTypes(uint[] memory arr) internal pure returns (ConditionType[] memory t) {\n', '        t = new ConditionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = ConditionType(arr[i]); }\n', '    }\n', '\n', '    struct AccountAmtPair {\n', '        address account;   // tag: 1\n', '        uint256 amt;   // tag: 2\n', '    } // end struct AccountAmtPair\n', '\n', '    function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.account = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amt = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder AccountAmtPair\n', '\n', '    struct TokenInfo {\n', '        TokenType tokenType;   // tag: 1\n', '        address tokenAddress;   // tag: 2\n', '    } // end struct TokenInfo\n', '\n', '    function decTokenInfo(bytes memory raw) internal pure returns (TokenInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.tokenType = TokenType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.tokenAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenInfo\n', '\n', '    struct TokenDistribution {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair[] distribution;   // tag: 2\n', '    } // end struct TokenDistribution\n', '\n', '    function decTokenDistribution(bytes memory raw) internal pure returns (TokenDistribution memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.distribution = new AccountAmtPair[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.distribution[cnts[2]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenDistribution\n', '\n', '    struct TokenTransfer {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair receiver;   // tag: 2\n', '    } // end struct TokenTransfer\n', '\n', '    function decTokenTransfer(bytes memory raw) internal pure returns (TokenTransfer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.receiver = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenTransfer\n', '\n', '    struct SimplexPaymentChannel {\n', '        bytes32 channelId;   // tag: 1\n', '        address peerFrom;   // tag: 2\n', '        uint seqNum;   // tag: 3\n', '        TokenTransfer transferToPeer;   // tag: 4\n', '        PayIdList pendingPayIds;   // tag: 5\n', '        uint lastPayResolveDeadline;   // tag: 6\n', '        uint256 totalPendingAmount;   // tag: 7\n', '    } // end struct SimplexPaymentChannel\n', '\n', '    function decSimplexPaymentChannel(bytes memory raw) internal pure returns (SimplexPaymentChannel memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.peerFrom = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.transferToPeer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.pendingPayIds = decPayIdList(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.lastPayResolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.totalPendingAmount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SimplexPaymentChannel\n', '\n', '    struct PayIdList {\n', '        bytes32[] payIds;   // tag: 1\n', '        bytes32 nextListHash;   // tag: 2\n', '    } // end struct PayIdList\n', '\n', '    function decPayIdList(bytes memory raw) internal pure returns (PayIdList memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.payIds = new bytes32[](cnts[1]);\n', '        cnts[1] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payIds[cnts[1]] = Pb._bytes32(buf.decBytes());\n', '                cnts[1]++;\n', '            }\n', '            else if (tag == 2) {\n', '                m.nextListHash = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PayIdList\n', '\n', '    struct TransferFunction {\n', '        TransferFunctionType logicType;   // tag: 1\n', '        TokenTransfer maxTransfer;   // tag: 2\n', '    } // end struct TransferFunction\n', '\n', '    function decTransferFunction(bytes memory raw) internal pure returns (TransferFunction memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.logicType = TransferFunctionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.maxTransfer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TransferFunction\n', '\n', '    struct ConditionalPay {\n', '        uint payTimestamp;   // tag: 1\n', '        address src;   // tag: 2\n', '        address dest;   // tag: 3\n', '        Condition[] conditions;   // tag: 4\n', '        TransferFunction transferFunc;   // tag: 5\n', '        uint resolveDeadline;   // tag: 6\n', '        uint resolveTimeout;   // tag: 7\n', '        address payResolver;   // tag: 8\n', '    } // end struct ConditionalPay\n', '\n', '    function decConditionalPay(bytes memory raw) internal pure returns (ConditionalPay memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(8);\n', '        m.conditions = new Condition[](cnts[4]);\n', '        cnts[4] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payTimestamp = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.src = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.dest = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.conditions[cnts[4]] = decCondition(buf.decBytes());\n', '                cnts[4]++;\n', '            }\n', '            else if (tag == 5) {\n', '                m.transferFunc = decTransferFunction(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.resolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.resolveTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 8) {\n', '                m.payResolver = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ConditionalPay\n', '\n', '    struct CondPayResult {\n', '        bytes condPay;   // tag: 1\n', '        uint256 amount;   // tag: 2\n', '    } // end struct CondPayResult\n', '\n', '    function decCondPayResult(bytes memory raw) internal pure returns (CondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPay = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CondPayResult\n', '\n', '    struct VouchedCondPayResult {\n', '        bytes condPayResult;   // tag: 1\n', '        bytes sigOfSrc;   // tag: 2\n', '        bytes sigOfDest;   // tag: 3\n', '    } // end struct VouchedCondPayResult\n', '\n', '    function decVouchedCondPayResult(bytes memory raw) internal pure returns (VouchedCondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPayResult = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigOfSrc = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.sigOfDest = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder VouchedCondPayResult\n', '\n', '    struct Condition {\n', '        ConditionType conditionType;   // tag: 1\n', '        bytes32 hashLock;   // tag: 2\n', '        address deployedContractAddress;   // tag: 3\n', '        bytes32 virtualContractAddress;   // tag: 4\n', '        bytes argsQueryFinalization;   // tag: 5\n', '        bytes argsQueryOutcome;   // tag: 6\n', '    } // end struct Condition\n', '\n', '    function decCondition(bytes memory raw) internal pure returns (Condition memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.conditionType = ConditionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.hashLock = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.deployedContractAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.virtualContractAddress = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.argsQueryFinalization = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.argsQueryOutcome = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder Condition\n', '\n', '    struct CooperativeWithdrawInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair withdraw;   // tag: 3\n', '        uint withdrawDeadline;   // tag: 4\n', '        bytes32 recipientChannelId;   // tag: 5\n', '    } // end struct CooperativeWithdrawInfo\n', '\n', '    function decCooperativeWithdrawInfo(bytes memory raw) internal pure returns (CooperativeWithdrawInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.withdraw = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.withdrawDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 5) {\n', '                m.recipientChannelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeWithdrawInfo\n', '\n', '    struct PaymentChannelInitializer {\n', '        TokenDistribution initDistribution;   // tag: 1\n', '        uint openDeadline;   // tag: 2\n', '        uint disputeTimeout;   // tag: 3\n', '        uint msgValueReceiver;   // tag: 4\n', '    } // end struct PaymentChannelInitializer\n', '\n', '    function decPaymentChannelInitializer(bytes memory raw) internal pure returns (PaymentChannelInitializer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.initDistribution = decTokenDistribution(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.openDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.disputeTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.msgValueReceiver = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PaymentChannelInitializer\n', '\n', '    struct CooperativeSettleInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair[] settleBalance;   // tag: 3\n', '        uint settleDeadline;   // tag: 4\n', '    } // end struct CooperativeSettleInfo\n', '\n', '    function decCooperativeSettleInfo(bytes memory raw) internal pure returns (CooperativeSettleInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(4);\n', '        m.settleBalance = new AccountAmtPair[](cnts[3]);\n', '        cnts[3] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.settleBalance[cnts[3]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[3]++;\n', '            }\n', '            else if (tag == 4) {\n', '                m.settleDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeSettleInfo\n', '\n', '    struct ChannelMigrationInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        address fromLedgerAddress;   // tag: 2\n', '        address toLedgerAddress;   // tag: 3\n', '        uint migrationDeadline;   // tag: 4\n', '    } // end struct ChannelMigrationInfo\n', '\n', '    function decChannelMigrationInfo(bytes memory raw) internal pure returns (ChannelMigrationInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.fromLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.toLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.migrationDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ChannelMigrationInfo\n', '\n', '}\n', '\n', '// File: contracts/lib/interface/IPayRegistry.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title PayRegistry interface\n', ' */\n', 'interface IPayRegistry {\n', '    function calculatePayId(bytes32 _payHash, address _setter) external pure returns(bytes32);\n', '\n', '    function setPayAmount(bytes32 _payHash, uint _amt) external;\n', '\n', '    function setPayDeadline(bytes32 _payHash, uint _deadline) external;\n', '\n', '    function setPayInfo(bytes32 _payHash, uint _amt, uint _deadline) external;\n', '\n', '    function setPayAmounts(bytes32[] calldata _payHashes, uint[] calldata _amts) external;\n', '\n', '    function setPayDeadlines(bytes32[] calldata _payHashes, uint[] calldata _deadlines) external;\n', '\n', '    function setPayInfos(bytes32[] calldata _payHashes, uint[] calldata _amts, uint[] calldata _deadlines) external;\n', '\n', '    function getPayAmounts(\n', '        bytes32[] calldata _payIds,\n', '        uint _lastPayResolveDeadline\n', '    ) external view returns(uint[] memory);\n', '\n', '    function getPayInfo(bytes32 _payId) external view returns(uint, uint);\n', '\n', '    event PayInfoUpdate(bytes32 indexed payId, uint amount, uint resolveDeadline);\n', '}\n', '\n', '// File: contracts/lib/interface/IPayResolver.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title PayResolver interface\n', ' */\n', 'interface IPayResolver {\n', '    function resolvePaymentByConditions(bytes calldata _resolvePayRequest) external;\n', '\n', '    function resolvePaymentByVouchedResult(bytes calldata _vouchedPayResult) external;\n', '\n', '    event ResolvePayment(bytes32 indexed payId, uint amount, uint resolveDeadline);\n', '}\n', '\n', '// File: contracts/lib/interface/IBooleanCond.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title BooleanCond interface\n', ' */\n', 'interface IBooleanCond {\n', '    function isFinalized(bytes calldata _query) external view returns (bool);\n', '    \n', '    function getOutcome(bytes calldata _query) external view returns (bool);\n', '}\n', '\n', '// File: contracts/lib/interface/INumericCond.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title NumericCond interface\n', ' */\n', 'interface INumericCond {\n', '    function isFinalized(bytes calldata _query) external view returns (bool);\n', '    \n', '    function getOutcome(bytes calldata _query) external view returns (uint);\n', '}\n', '\n', '// File: contracts/lib/interface/IVirtContractResolver.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title VirtContractResolver interface\n', ' */\n', 'interface IVirtContractResolver {\n', '    function deploy(bytes calldata _code, uint _nonce) external returns (bool);\n', '    \n', '    function resolve(bytes32 _virtAddr) external view returns (address);\n', '\n', '    event Deploy(bytes32 indexed virtAddr);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '    /**\n', '    * @dev Returns the largest of two numbers.\n', '    */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the smallest of two numbers.\n', '    */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the average of two numbers. Since these are integers,\n', '    * averages of an even and odd number cannot be represented, and will be\n', '    * rounded down.\n', '    */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Elliptic curve signature operations\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' */\n', '\n', 'library ECDSA {\n', '    /**\n', '     * @dev Recover signer address from a message by using their signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        // If the version is correct return the signer address\n', '        if (v != 27 && v != 28) {\n', '            return (address(0));\n', '        } else {\n', '            return ecrecover(hash, v, r, s);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * toEthSignedMessageHash\n', '     * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '     * and hash the result\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts/PayResolver.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pay Resolver contract\n', ' * @notice Payment resolver with different payment resolving logics.\n', ' */\n', 'contract PayResolver is IPayResolver {\n', '    using SafeMath for uint;\n', '    using ECDSA for bytes32;\n', '\n', '    IPayRegistry public payRegistry;\n', '    IVirtContractResolver public virtResolver;\n', '\n', '    /**\n', '     * @notice Pay registry constructor\n', '     * @param _registryAddr address of pay registry\n', '     * @param _virtResolverAddr address of virtual contract resolver\n', '     */\n', '    constructor(address _registryAddr, address _virtResolverAddr) public {\n', '        payRegistry = IPayRegistry(_registryAddr);\n', '        virtResolver = IVirtContractResolver(_virtResolverAddr);\n', '    }\n', '\n', '    /**\n', '     * @notice Resolve a payment by onchain getting its condition outcomes\n', '     * @dev HASH_LOCK should only be used for establishing multi-hop payments,\n', '     *   and is always required to be true for all transfer function logic types.\n', '     *   a pay with no condition or only true HASH_LOCK conditions will use max transfer amount.\n', '     *   The preimage order should align at the order of HASH_LOCK conditions in condition array.\n', '     * @param _resolvePayRequest bytes of PbChain.ResolvePayByConditionsRequest\n', '     */\n', '    function resolvePaymentByConditions(bytes calldata _resolvePayRequest) external {\n', '        PbChain.ResolvePayByConditionsRequest memory resolvePayRequest = \n', '            PbChain.decResolvePayByConditionsRequest(_resolvePayRequest);\n', '        PbEntity.ConditionalPay memory pay = PbEntity.decConditionalPay(resolvePayRequest.condPay);\n', '\n', '        // onchain resolve this payment and get result\n', '        uint amount;\n', '        PbEntity.TransferFunctionType funcType = pay.transferFunc.logicType;\n', '        if (funcType == PbEntity.TransferFunctionType.BOOLEAN_AND) {\n', '            amount = _calculateBooleanAndPayment(pay, resolvePayRequest.hashPreimages);\n', '        } else if (funcType == PbEntity.TransferFunctionType.BOOLEAN_OR) {\n', '            amount = _calculateBooleanOrPayment(pay, resolvePayRequest.hashPreimages);\n', '        } else if (_isNumericLogic(funcType)) {\n', '            amount = _calculateNumericLogicPayment(pay, resolvePayRequest.hashPreimages, funcType);\n', '        } else {\n', '            // TODO: support more transfer function types\n', '            assert(false);\n', '        }\n', '\n', '        bytes32 payHash = keccak256(resolvePayRequest.condPay);\n', '        _resolvePayment(pay, payHash, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Resolve a payment by submitting an offchain vouched result\n', '     * @param _vouchedPayResult bytes of PbEntity.VouchedCondPayResult\n', '     */\n', '    function resolvePaymentByVouchedResult(bytes calldata _vouchedPayResult) external {\n', '        PbEntity.VouchedCondPayResult memory vouchedPayResult = \n', '            PbEntity.decVouchedCondPayResult(_vouchedPayResult);\n', '        PbEntity.CondPayResult memory payResult = \n', '            PbEntity.decCondPayResult(vouchedPayResult.condPayResult);\n', '        PbEntity.ConditionalPay memory pay = PbEntity.decConditionalPay(payResult.condPay);\n', '\n', '        require(\n', '            payResult.amount <= pay.transferFunc.maxTransfer.receiver.amt,\n', '            "Exceed max transfer amount"\n', '        );\n', '        // check signatures\n', '        bytes32 hash = keccak256(vouchedPayResult.condPayResult).toEthSignedMessageHash();\n', '        address recoveredSrc = hash.recover(vouchedPayResult.sigOfSrc);\n', '        address recoveredDest = hash.recover(vouchedPayResult.sigOfDest);\n', '        require(\n', '            recoveredSrc == address(pay.src) && recoveredDest == address(pay.dest),\n', '            "Check sigs failed"\n', '        );\n', '\n', '        bytes32 payHash = keccak256(payResult.condPay);\n', '        _resolvePayment(pay, payHash, payResult.amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function of resolving a payment with given amount\n', '     * @param _pay conditional pay\n', '     * @param _payHash hash of serialized condPay\n', '     * @param _amount payment amount to resolve\n', '     */\n', '    function _resolvePayment(\n', '        PbEntity.ConditionalPay memory _pay,\n', '        bytes32 _payHash,\n', '        uint _amount\n', '    )\n', '        internal\n', '    {\n', '        uint blockNumber = block.number;\n', '        require(blockNumber <= _pay.resolveDeadline, "Passed pay resolve deadline in condPay msg");\n', '\n', '        bytes32 payId = _calculatePayId(_payHash, address(this));\n', '        (uint currentAmt, uint currentDeadline) = payRegistry.getPayInfo(payId);\n', '\n', '        // should never resolve a pay before or not reaching onchain resolve deadline\n', '        require(\n', '            currentDeadline == 0 || blockNumber <= currentDeadline,\n', '            "Passed onchain resolve pay deadline"\n', '        );\n', '\n', '        if (currentDeadline > 0) {\n', '            // currentDeadline > 0 implies that this pay has been updated\n', '            // payment amount must be monotone increasing\n', '            require(_amount > currentAmt, "New amount is not larger");\n', '\n', '            if (_amount == _pay.transferFunc.maxTransfer.receiver.amt) {\n', '                // set resolve deadline = current block number if amount = max\n', '                payRegistry.setPayInfo(_payHash, _amount, blockNumber);\n', '                emit ResolvePayment(payId, _amount, blockNumber);\n', '            } else {\n', '                // should not update the onchain resolve deadline if not max amount\n', '                payRegistry.setPayAmount(_payHash, _amount);\n', '                emit ResolvePayment(payId, _amount, currentDeadline);\n', '            }\n', '        } else {\n', '            uint newDeadline;\n', '            if (_amount == _pay.transferFunc.maxTransfer.receiver.amt) {\n', '                newDeadline = blockNumber;\n', '            } else {\n', '                newDeadline = Math.min(\n', '                    blockNumber.add(_pay.resolveTimeout),\n', '                    _pay.resolveDeadline\n', '                );\n', '                // 0 is reserved for unresolved status of a payment\n', '                require(newDeadline > 0, "New resolve deadline is 0");\n', '            }\n', '\n', '            payRegistry.setPayInfo(_payHash, _amount, newDeadline);\n', '            emit ResolvePayment(payId, _amount, newDeadline);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate the result amount of BooleanAnd payment\n', '     * @param _pay conditional pay\n', '     * @param _preimages preimages for hash lock conditions\n', '     * @return pay amount\n', '     */\n', '    function _calculateBooleanAndPayment(\n', '        PbEntity.ConditionalPay memory _pay,\n', '        bytes[] memory _preimages\n', '    )\n', '        internal\n', '        view\n', '        returns(uint)\n', '    {\n', '        uint j = 0;\n', '        bool hasFalseContractCond = false;\n', '        for (uint i = 0; i < _pay.conditions.length; i++) {\n', '            PbEntity.Condition memory cond = _pay.conditions[i];\n', '            if (cond.conditionType == PbEntity.ConditionType.HASH_LOCK) {\n', '                require(keccak256(_preimages[j]) == cond.hashLock, "Wrong preimage");\n', '                j++;\n', '            } else if (\n', '                cond.conditionType == PbEntity.ConditionType.DEPLOYED_CONTRACT || \n', '                cond.conditionType == PbEntity.ConditionType.VIRTUAL_CONTRACT\n', '            ) {\n', '                address addr = _getCondAddress(cond);\n', '                IBooleanCond dependent = IBooleanCond(addr);\n', '                require(dependent.isFinalized(cond.argsQueryFinalization), "Condition is not finalized");\n', '\n', '                if (!dependent.getOutcome(cond.argsQueryOutcome)) {\n', '                    hasFalseContractCond = true;\n', '                }\n', '            } else {\n', '                assert(false);\n', '            }\n', '        }\n', '\n', '        if (hasFalseContractCond) {\n', '            return 0;\n', '        } else {\n', '            return _pay.transferFunc.maxTransfer.receiver.amt;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate the result amount of BooleanOr payment\n', '     * @param _pay conditional pay\n', '     * @param _preimages preimages for hash lock conditions\n', '     * @return pay amount\n', '     */\n', '    function _calculateBooleanOrPayment(\n', '        PbEntity.ConditionalPay memory _pay,\n', '        bytes[] memory _preimages\n', '    )\n', '        internal\n', '        view\n', '        returns(uint)\n', '    {\n', '        uint j = 0;\n', '        // whether there are any contract based conditions, i.e. DEPLOYED_CONTRACT or VIRTUAL_CONTRACT\n', '        bool hasContractCond = false;\n', '        bool hasTrueContractCond = false;\n', '        for (uint i = 0; i < _pay.conditions.length; i++) {\n', '            PbEntity.Condition memory cond = _pay.conditions[i];\n', '            if (cond.conditionType == PbEntity.ConditionType.HASH_LOCK) {\n', '                require(keccak256(_preimages[j]) == cond.hashLock, "Wrong preimage");\n', '                j++;\n', '            } else if (\n', '                cond.conditionType == PbEntity.ConditionType.DEPLOYED_CONTRACT || \n', '                cond.conditionType == PbEntity.ConditionType.VIRTUAL_CONTRACT\n', '            ) {\n', '                address addr = _getCondAddress(cond);\n', '                IBooleanCond dependent = IBooleanCond(addr);\n', '                require(dependent.isFinalized(cond.argsQueryFinalization), "Condition is not finalized");\n', '\n', '                hasContractCond = true;\n', '                if (dependent.getOutcome(cond.argsQueryOutcome)) {\n', '                    hasTrueContractCond = true;\n', '                }\n', '            } else {\n', '                assert(false);\n', '            }\n', '        }\n', '\n', '        if (!hasContractCond || hasTrueContractCond) {\n', '            return _pay.transferFunc.maxTransfer.receiver.amt;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate the result amount of numeric logic payment,\n', '     *   including NUMERIC_ADD, NUMERIC_MAX and NUMERIC_MIN\n', '     * @param _pay conditional pay\n', '     * @param _preimages preimages for hash lock conditions\n', '     * @param _funcType transfer function type\n', '     * @return pay amount\n', '     */\n', '    function _calculateNumericLogicPayment(\n', '        PbEntity.ConditionalPay memory _pay,\n', '        bytes[] memory _preimages,\n', '        PbEntity.TransferFunctionType _funcType\n', '    )\n', '        internal\n', '        view\n', '        returns(uint)\n', '    {\n', '        uint amount = 0;\n', '        uint j = 0;\n', '        bool hasContractCond = false;\n', '        for (uint i = 0; i < _pay.conditions.length; i++) {\n', '            PbEntity.Condition memory cond = _pay.conditions[i];\n', '            if (cond.conditionType == PbEntity.ConditionType.HASH_LOCK) {\n', '                require(keccak256(_preimages[j]) == cond.hashLock, "Wrong preimage");\n', '                j++;\n', '            } else if (\n', '                cond.conditionType == PbEntity.ConditionType.DEPLOYED_CONTRACT || \n', '                cond.conditionType == PbEntity.ConditionType.VIRTUAL_CONTRACT\n', '            ) {\n', '                address addr = _getCondAddress(cond);\n', '                INumericCond dependent = INumericCond(addr);\n', '                require(dependent.isFinalized(cond.argsQueryFinalization), "Condition is not finalized");\n', '\n', '                if (_funcType == PbEntity.TransferFunctionType.NUMERIC_ADD) {\n', '                    amount = amount.add(dependent.getOutcome(cond.argsQueryOutcome));\n', '                } else if (_funcType == PbEntity.TransferFunctionType.NUMERIC_MAX) {\n', '                    amount = Math.max(amount, dependent.getOutcome(cond.argsQueryOutcome));\n', '                } else if (_funcType == PbEntity.TransferFunctionType.NUMERIC_MIN) {\n', '                    if (hasContractCond) {\n', '                        amount = Math.min(amount, dependent.getOutcome(cond.argsQueryOutcome));\n', '                    } else {\n', '                        amount = dependent.getOutcome(cond.argsQueryOutcome);\n', '                    }\n', '                } else {\n', '                    assert(false);\n', '                }\n', '                \n', '                hasContractCond = true;\n', '            } else {\n', '                assert(false);\n', '            }\n', '        }\n', '\n', '        if (hasContractCond) {\n', '            require(amount <= _pay.transferFunc.maxTransfer.receiver.amt, "Exceed max transfer amount");\n', '            return amount;\n', '        } else {\n', '            return _pay.transferFunc.maxTransfer.receiver.amt;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get the contract address of the condition\n', '     * @param _cond condition\n', '     * @return contract address of the condition\n', '     */\n', '    function _getCondAddress(PbEntity.Condition memory _cond) internal view returns(address) {\n', '        // We need to take into account that contract may not be deployed.\n', '        // However, this is automatically handled for us\n', '        // because calling a non-existent function will cause an revert.\n', '        if (_cond.conditionType == PbEntity.ConditionType.DEPLOYED_CONTRACT) {\n', '            return _cond.deployedContractAddress;\n', '        } else if (_cond.conditionType == PbEntity.ConditionType.VIRTUAL_CONTRACT) {\n', '            return virtResolver.resolve(_cond.virtualContractAddress);\n', '        } else {\n', '            assert(false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Check if a function type is numeric logic\n', '     * @param _funcType transfer function type\n', '     * @return true if it is a numeric logic, otherwise false\n', '     */\n', '    function _isNumericLogic(PbEntity.TransferFunctionType _funcType) internal pure returns(bool) {\n', '        return _funcType == PbEntity.TransferFunctionType.NUMERIC_ADD ||\n', '            _funcType == PbEntity.TransferFunctionType.NUMERIC_MAX ||\n', '            _funcType == PbEntity.TransferFunctionType.NUMERIC_MIN;\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate pay id\n', '     * @param _payHash hash of serialized condPay\n', '     * @param _setter payment info setter, i.e. pay resolver\n', '     * @return calculated pay id\n', '     */\n', '    function _calculatePayId(bytes32 _payHash, address _setter) internal pure returns(bytes32) {\n', '        return keccak256(abi.encodePacked(_payHash, _setter));\n', '    }\n', '}']