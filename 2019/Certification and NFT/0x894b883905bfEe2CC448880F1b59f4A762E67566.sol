['// File: zos-lib/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(address) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: openzeppelin-eth/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable is Initializable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/AvatarNameStorage.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract ERC20Interface {\n', '    function balanceOf(address from) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function burn(uint256 amount) public;\n', '}\n', '\n', 'contract AvatarNameStorage {\n', '    // Storage\n', '    ERC20Interface public manaToken;\n', '    uint256 public price;\n', '\n', '    struct Data {\n', '        string username;\n', '        string metadata;\n', '    }\n', '\n', '    // Stores usernames used\n', '    mapping (string => address) usernames;\n', '    // Stores account data\n', '    mapping (address => Data) public user;\n', '    // Stores account roles\n', '    mapping (address => bool) public allowed;\n', '\n', '    // Events\n', '    event Register(\n', '        address indexed _owner,\n', '        string _username,\n', '        string _metadata,\n', '        address indexed _caller\n', '    );\n', '    event MetadataChanged(address indexed _owner, string _metadata);\n', '    event Allow(address indexed _caller, address indexed _account, bool _allowed);\n', '}\n', '\n', '// File: contracts/AvatarNameRegistry.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'contract AvatarNameRegistry is Ownable, AvatarNameStorage {\n', '\n', '    /**\n', '    * @dev Initializer of the contract\n', '    * @param _mana - address of the mana token\n', '    * @param _owner - address of the owner allowed to register usernames and assign the role\n', '    */\n', '    function initialize(\n', '        ERC20Interface _mana,\n', '        address _owner\n', '    )\n', '    public initializer\n', '    {\n', '        manaToken = _mana;\n', '        price = 100000000000000000000; // 100 in wei\n', '\n', '        // Allow owner to register usernames\n', '        allowed[_owner] = true;\n', '\n', '        // Owner\n', '        Ownable.initialize(_owner);\n', '    }\n', '\n', '    /**\n', '    * @dev Check if the sender is an allowed account\n', '    */\n', '    modifier onlyAllowed() {\n', '        require(\n', '            allowed[msg.sender] == true,\n', '            "The sender is not allowed to register a username"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Manage role for an account\n', '    * @param _account - address of the account to be managed\n', '    * @param _allowed - bool whether the account should be allowed or not\n', '    */\n', '    function setAllowed(address _account, bool _allowed) external onlyOwner {\n', '        require(_account != msg.sender, "You can not manage your role");\n', '        allowed[_account] = _allowed;\n', '        emit Allow(msg.sender, _account, _allowed);\n', '    }\n', '\n', '    /**\n', '    * @dev Register a usename\n', '    * @notice that the username should be less than or equal 32 bytes and blanks are not allowed\n', '    * @param _beneficiary - address of the account to be managed\n', '    * @param _username - string for the username\n', '    * @param _metadata - string for the metadata\n', '    */\n', '    function _registerUsername(\n', '        address _beneficiary,\n', '        string memory _username,\n', '        string memory _metadata\n', '    )\n', '    internal\n', '    {\n', '        _requireBalance(_beneficiary);\n', '        _requireUsernameValid(_username);\n', '        require(isUsernameAvailable(_username), "The username was already taken");\n', '\n', '        manaToken.transferFrom(_beneficiary, address(this), price);\n', '        manaToken.burn(price);\n', '\n', '        // Save username\n', '        usernames[_username] = _beneficiary;\n', '\n', '        Data storage data = user[_beneficiary];\n', '\n', '        // Free previous username\n', '        delete usernames[data.username];\n', '\n', '        // Set data\n', '        data.username = _username;\n', '\n', '        bytes memory metadata = bytes(_metadata);\n', '        if (metadata.length > 0) {\n', '            data.metadata = _metadata;\n', '        }\n', '\n', '        emit Register(\n', '            _beneficiary,\n', '            _username,\n', '            data.metadata,\n', '            msg.sender\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Register a usename\n', '    * @notice that the username can only be registered by an allowed account\n', '    * @param _beneficiary - address of the account to be managed\n', '    * @param _username - string for the username\n', '    * @param _metadata - string for the metadata\n', '    */\n', '    function registerUsername(\n', '        address _beneficiary,\n', '        string calldata _username,\n', '        string calldata _metadata\n', '    )\n', '    external\n', '    onlyAllowed\n', '    {\n', '        _registerUsername(_beneficiary, _username, _metadata);\n', '    }\n', '\n', '    /**\n', '    * @dev Set metadata for an existing user\n', '    * @param _metadata - string for the metadata\n', '    */\n', '    function setMetadata(string calldata _metadata) external {\n', '        require(userExists(msg.sender), "The user does not exist");\n', '\n', '        user[msg.sender].metadata = _metadata;\n', '        emit MetadataChanged(msg.sender, _metadata);\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether a user exist or not\n', '    * @param _user - address for the user\n', '    * @return bool - whether the user exist or not\n', '    */\n', '    function userExists(address _user) public view returns (bool) {\n', '        Data memory data = user[_user];\n', '        bytes memory username = bytes(data.username);\n', '        return username.length > 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether a username is available or not\n', '    * @param _username - string for the username\n', '    * @return bool - whether the username is available or not\n', '    */\n', '    function isUsernameAvailable(string memory _username) public view returns (bool) {\n', '        return usernames[_username] == address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Validate a username\n', '    * @param _username - string for the username\n', '    */\n', '    function _requireUsernameValid(string memory _username) internal pure {\n', '        bytes memory tempUsername = bytes(_username);\n', '        require(tempUsername.length <= 15, "Username should be less than or equal 15 characters");\n', '        for(uint256 i = 0; i < tempUsername.length; i++) {\n', '            require(tempUsername[i] > 0x20, "Invalid Character");\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Validate if a user has balance and the contract has enough allowance\n', '    * to use user MANA on his belhalf\n', '    * @param _user - address of the user\n', '    */\n', '    function _requireBalance(address _user) internal view {\n', '        require(\n', '            manaToken.balanceOf(_user) >= price,\n', '            "Insufficient funds"\n', '        );\n', '        require(\n', '            manaToken.allowance(_user, address(this)) >= price,\n', '            "The contract is not authorized to use MANA on sender behalf"\n', '        );\n', '    }\n', '}']