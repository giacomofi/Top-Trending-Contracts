['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title - Crypto Skully\n', ' * ███████╗██╗    ██╗ █████╗ ██████╗    ███████╗██╗  ██╗██╗   ██╗██╗     ██╗     ██╗   ██╗\n', ' * ██╔════╝██║    ██║██╔══██╗██╔══██╗   ██╔════╝██║ ██╔╝██║   ██║██║     ██║     ╚██╗ ██╔╝\n', ' * ███████╗██║ █╗ ██║███████║██████╔╝   ███████╗█████╔╝ ██║   ██║██║     ██║      ╚████╔╝\n', ' * ╚════██║██║███╗██║██╔══██║██╔═══╝    ╚════██║██╔═██╗ ██║   ██║██║     ██║       ╚██╔╝\n', ' * ███████║╚███╔███╔╝██║  ██║██║        ███████║██║  ██╗╚██████╔╝███████╗███████╗   ██║\n', ' * ╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝        ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝   ╚═╝\n', ' * ---\n', ' *\n', ' * POWERED BY\n', ' *  __    ___   _     ___  _____  ___     _     ___\n', ' * / /`  | |_) \\ \\_/ | |_)  | |  / / \\   | |\\ |  ) )\n', ' * \\_\\_, |_| \\  |_|  |_|    |_|  \\_\\_/   |_| \\| _)_)\n', ' *\n', ' * Game at https://skullys.co/\n', ' **/\n', ' \n', 'contract SwapControl {\n', '    // This facet controls access control for CryptoSkullys. There are four roles managed here:\n', '    //\n', '    //     - The Admiral: The Admiral can reassign other roles and change the addresses of our dependent smart\n', '    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n', '    //         set to the address that created the smart contract in the SkullyCore constructor.\n', '    //\n', '    //     - The Pilot: The Pilot can withdraw funds from SkullyCore and its auction contracts.\n', '    //\n', '    //     - The Captain: The Captain can release new minted skullys to auction, and mint promo skullys.\n', '    //\n', '    // It should be noted that these roles are distinct without overlap in their access abilities, the\n', '    // abilities listed for each role above are exhaustive. In particular, while the Admiral can assign any\n', "    // address to any role, the Admiral address itself doesn't have the ability to act in those roles. This\n", "    // restriction is intentional so that we aren't tempted to use the Admiral address frequently out of\n", '    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n', '    // account.\n', '\n', '    /// @dev Emitted when contract is upgraded - See README.md for upgrade plan\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address payable public admiralAddress;\n', '    address payable public pilotAddress;\n', '    address payable public captainAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    /// @dev Access modifier for admiral-only functionality\n', '    modifier onlyAdmiral() {\n', '        require(msg.sender == admiralAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for Pilot-only functionality\n', '    modifier onlyPilot() {\n', '        require(msg.sender == pilotAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for Captain-only functionality\n', '    modifier onlyCaptain() {\n', '        require(msg.sender == captainAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == captainAddress ||\n', '            msg.sender == admiralAddress ||\n', '            msg.sender == pilotAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the admiral. Only available to the current admiral.\n', '    /// @param _newAdmiral The address of the new Admiral\n', '    function setAdmiral(address payable _newAdmiral) external onlyAdmiral {\n', '        require(_newAdmiral != address(0));\n', '\n', '        admiralAddress = _newAdmiral;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the pilot. Only available to the current Admiral.\n', '    /// @param _newPilot The address of the new Pilot\n', '    function setPilot(address payable _newPilot) external onlyAdmiral {\n', '        require(_newPilot != address(0));\n', '\n', '        pilotAddress = _newPilot;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the captain. Only available to the current Admiral.\n', '    /// @param _newCaptain The address of the new Captain\n', '    function setCaptain(address payable _newCaptain) external onlyAdmiral {\n', '        require(_newCaptain != address(0));\n', '\n', '        captainAddress = _newCaptain;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Admiral, since\n', '    ///  one reason we may pause the contract is when Pilot or Captain accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyAdmiral whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '}\n', '\n', 'interface IERC165 {\n', '    /**\n', '     * @notice Query if a contract implements an interface\n', '     * @param interfaceId The interface identifier, as specified in ERC-165\n', '     * @dev Interface identification is specified in ERC-165. This function\n', '     * uses less than 30,000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', 'contract ERC721 is IERC165 {\n', '\n', '    // IERC721\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '    function approve(address to, uint256 tokenId) public;\n', '    function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public;\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) public;\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '\n', '    // IERC721Metadata\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function tokenURI(uint256 tokenId) public view returns (string memory);\n', '\n', '    // IERC721Enumerable\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n', '\n', '    function tokenByIndex(uint256 index) public view returns (uint256);\n', '    \n', '    \n', '    ///-----For ERC721 using transfer() function ---///\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    \n', '    ///-------------------------------------------///\n', '    \n', '    function addNewCategory(uint256 _id, string calldata _newCategory) external;\n', '    \n', '    function changeCategory(uint256 _id, string calldata _newCategory) external;\n', '    \n', '    function updateSkill(uint256 _skullyId, uint256 _newAttack, uint256 _newDefend) external;\n', '    \n', '    function createPromoSkully(uint256 _skullyId, uint256 _attack, uint256 _defend, uint256 _category, address _owner) external;\n', '    \n', '    function createSaleAuction(uint256 _skullyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint _paymentBy) external;\n', '    \n', '    function createNewSkullyAuction(uint256 _newSkullyId, uint256 _category, uint256 _startingPrice, uint256 _endingPrice) public;\n', '\n', '    function createNewSkullysAuction(uint256 _startId, uint256 _endId, uint256 _category, uint256 _startingPrice, uint256 _endingPrice) external;\n', '        \n', '    function createNewSkully(uint256 _newSkullyId, uint256 _category, address _owner) external;\n', '        \n', '    function createNewSkullys(uint256 _startId, uint256 _endId, uint256 _category, address _owner) external;\n', '        \n', '    function setGamePlayAddress(address _gameAddress) external;\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public;\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ClockAuction {\n', '    function cancelAuction(uint256 _tokenId) external;\n', '}\n', '\n', 'contract SkullyItems {\n', '    function setDiscount(uint256 _newDiscount) external returns (uint256);\n', '    \n', '    function createNewMainAccessory(string memory name) public;\n', '    \n', '    function createNewAccessory(\n', '        uint256 accessoryType,\n', '        uint256 accessoryId,\n', '        string memory name,\n', '        uint256 attack,\n', '        uint256 defend,\n', '        uint256 po8,\n', '        uint256 eth,\n', '        uint256 po8DailyMultiplier,\n', '        bool mustUnlock) public;\n', '        \n', '    function updateAccessoryInformation(\n', '        uint256 id,\n', '        string calldata newName,\n', '        uint256 newAttack,\n', '        uint256 newDefend,\n', '        uint256 newPO8,\n', '        uint256 newEth,\n', '        uint256 newPO8DailyMultiplier,\n', '        bool newMustUnlock) external returns (bool);\n', '        \n', '    function setAccessoryToSkully(uint256 skullyId, uint256 realAccessoryId) external;\n', '    \n', '    function setGamePlayAddress(address _gameAddress) external;\n', '    \n', '    function setNewRankPrice(uint8 rank, uint256 newPrice) public returns (bool);\n', '    \n', '    function setNewRankFlags(uint8 rank, uint256 newFlags) public returns (bool);\n', '    \n', '    function setExchangeRate(uint256 _newExchangeRate) external returns (uint256);\n', '    \n', '    function createNewBadge(uint256 badgeId, string memory description, uint256 po8) public;\n', '    \n', '    function setPO8OfBadge(uint256 badgeId, uint256 po8) public;\n', '    \n', '    function setClaimBadgeContract(address newAddress) external;\n', '    \n', '    function increaseSkullyExp(uint256 skullyId, uint256 flags) external;\n', '    \n', '    function setBadgeToSkully(uint256 skullyId, uint256 badgeId) external;\n', '}\n', '\n', 'contract ExchangeERC721 is SwapControl {\n', '    \n', '    /// @dev The ERC-165 interface signature for ERC-721.\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n', '    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd);\n', '    ERC721 public skullyContract;\n', '    ClockAuction public auctionContract;\n', '    SkullyItems public itemContract;\n', '    \n', '    mapping(uint64 => address) public listERC721;\n', '    uint64 public totalERC721;\n', '    uint64 public plusFlags;\n', '    \n', '    bool public pureSwapState;\n', '\n', '\t/* @notice This constructor of contract\n', '\t * @param _nftAddress the address of skully core\n', '\t * @param _auctionAdress the address of sale auction\n', '\t * @param _itemAdress the address of skully item\n', '\t * return none\n', '\t*/\n', '    constructor(address _nftAddress, address _auctionAdress, address _itemAdress) public {\n', '        ERC721 candidateContract = ERC721(_nftAddress);\n', '        require(candidateContract.supportsInterface(InterfaceSignature_ERC721), "The candidate contract must supports ERC721");\n', '        skullyContract = candidateContract;\n', '        \n', '        auctionContract = ClockAuction(_auctionAdress);\n', '        \n', '        itemContract = SkullyItems(_itemAdress);\n', '        \n', '        listERC721[0] = address(candidateContract);\n', '        totalERC721++;\n', '        \n', '        // the creator of the contract is the initial Admiral\n', '        admiralAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial Pilot\n', '        pilotAddress = msg.sender;\n', '\n', '        // the creator of the contract is also the initial Captain\n', '        captainAddress = msg.sender;\n', '        \n', '        pureSwapState = false;\n', '        plusFlags = 1000;\n', '    }\n', '    \n', '    event Swapped(uint256 _skullyId, uint256 _exchangeTokenId, uint64 _typeERC, uint256 _time);\n', '    event PureSwapped(uint256 _skullyId, uint256 _exchangeTokenId, uint64 _typeERC, uint256 _time);\n', '    \n', '\t/* @notice This function was invoked when user want to swap their collections with skully\n', '\t * @param skullyId the id of skully that user want to swap\n', '\t * @param exchangeTokenId the id of their collections\n', '\t * @param typeERC the number of erc721 in the list of contract that allow to exchange with \n', '\t * return none - just emit a result to the network\n', '\t*/\n', '    function swap(uint256 skullyId, uint256 exchangeTokenId, uint64 typeERC) public whenNotPaused {\n', '        ERC721(listERC721[typeERC]).transferFrom(msg.sender, address(this), exchangeTokenId);\n', '        // cancel sale auction\n', '        auctionContract.cancelAuction(skullyId);\n', '        \n', '        // set flag\n', '        itemContract.increaseSkullyExp(skullyId, plusFlags);\n', '        \n', '        skullyContract.transferFrom(address(this), msg.sender, skullyId);\n', '        \n', '        emit Swapped(skullyId, exchangeTokenId, typeERC, block.timestamp);\n', '    }\n', '    \n', '\t/* @notice This function was invoked when user want to swap their collections with skully\n', '\t * @param skullyId the id of skully that user want to swap\n', '\t * @param exchangeTokenId the id of their collections\n', '\t * @param typeERC the number of erc721 in the list of contract that allow to exchange with \n', '\t * return none - just emit a result to the network\n', '\t*/\n', '    function pureSwap(uint256 skullyId, uint256 exchangeTokenId, uint64 typeERC) public whenNotPaused {\n', '        require(pureSwapState == true);\n', '        ERC721(listERC721[typeERC]).transferFrom(msg.sender, address(this), exchangeTokenId);\n', '        skullyContract.transferFrom(address(this), msg.sender, skullyId);\n', '        \n', '        emit PureSwapped(skullyId, exchangeTokenId, typeERC, block.timestamp);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function setPureSwapSate(bool _state) public onlyCaptain {\n', '        pureSwapState = _state;\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function setFlags(uint64 _newFlags) public onlyCaptain {\n', '        plusFlags = _newFlags;\n', '    }\n', '\t\n', '\t///------------------NFT-----------------------///\n', '    event NewNFTAdded(uint64 _id, address _newNFT);\n', '    event NFTDeleted(uint64 _id, address _nftDelete);\n', '    event NFTUpdated(uint64 _id, address _oldAddress, address _newAddress);\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function addNewNFT(address newNFTAddress) public onlyCaptain {\n', '        listERC721[totalERC721] = newNFTAddress;\n', '        emit NewNFTAdded(totalERC721, newNFTAddress);\n', '        totalERC721++;\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function addNewNFTs(address[] memory _newNFTsAddress) public onlyCaptain {\n', '        for(uint i = 0; i < _newNFTsAddress.length; i++)\n', '            addNewNFT(_newNFTsAddress[i]);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function deleteNFT(uint64 _id) external onlyCaptain {\n', '        emit NFTDeleted(_id, listERC721[_id]);\n', '        listERC721[_id] = address(0);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function updateNFT(uint64 _id, address updateNFTAddress) external onlyCaptain {\n', '        emit NFTUpdated(_id, listERC721[_id], updateNFTAddress);\n', '        listERC721[_id] = updateNFTAddress;\n', '    }\n', '\t\n', '\t\n', '    ///-----------------------------------------///\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function transferFromERC721ToCaptainWallet(uint256 tokenId, address erc721Adress) external onlyCaptain {\n', '        ERC721(erc721Adress).transferFrom(address(this), captainAddress, tokenId);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function transferFromERC721sToCaptainWallet(uint256[] calldata tokenIds, address erc721Adress) external onlyCaptain {\n', '        for(uint256 i = 0; i < tokenIds.length; i++)\n', '            ERC721(erc721Adress).transferFrom(address(this), captainAddress, tokenIds[i]);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function transferERC721ToCaptainWallet(uint256 tokenId, address erc721Adress) external onlyCaptain {\n', '        ERC721(erc721Adress).transfer(captainAddress, tokenId);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function transferERC721sToCaptainWallet(uint256[] calldata tokenIds, address erc721Adress) external onlyCaptain {\n', '        for(uint256 i = 0; i < tokenIds.length; i++)\n', '            ERC721(erc721Adress).transfer(captainAddress, tokenIds[i]);\n', '    }\n', '    \n', '\t/* @notice\n', '\t * @param\n', '\t * return\n', '\t*/\n', '    function transferERC20ToCaptainWallet(address erc20Adress) external onlyCaptain {\n', '        ERC20 token = ERC20(erc20Adress);\n', '        token.transfer(captainAddress, token.balanceOf(address(this)));\n', '    }\n', '    \n', '    // @dev Allows the pilot to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyCaptain {\n', '        uint256 balance = address(this).balance;\n', '\n', '        captainAddress.transfer(balance);\n', '    }\n', '    \n', '\t// This contract address allow ether transfer in\n', '    function() external payable {}\n', '\t\n', '\t    \n', '    ///-----------------------------------------///\n', '    function createManySaleAuction(uint256[] calldata _listSkullyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint _paymentBy) external onlyCaptain {\n', '        for(uint i = 0; i < _listSkullyId.length; i++)\n', '            createSaleAuction(_listSkullyId[i], _startingPrice, _endingPrice, _duration, _paymentBy);\n', '    }\n', '    \n', '\t\n', "\t// Don't care the rest of function below\n", "\t// It's belong to captain features\n", '    ///-----------------ERC721------------------------///\n', '    \n', '    function setApprovalForAll(address operator, bool _approved) public onlyCaptain {\n', '        skullyContract.setApprovalForAll(operator, _approved);\n', '    }\n', '    \n', '    function addNewCategory(uint256 _id, string calldata _newCategory) external onlyCaptain {\n', '        skullyContract.addNewCategory(_id, _newCategory);\n', '    }\n', '    \n', '    function changeCategory(uint256 _id, string calldata _newCategory) external onlyCaptain {\n', '        skullyContract.changeCategory(_id, _newCategory);\n', '    }\n', '    \n', '    function updateSkill(uint256 _skullyId, uint256 _newAttack, uint256 _newDefend) external onlyCaptain {\n', '        skullyContract.updateSkill(_skullyId, _newAttack, _newDefend);\n', '    }\n', '    \n', '    function createPromoSkully(uint256 _skullyId, uint256 _attack, uint256 _defend, uint256 _category, address _owner) external onlyCaptain {\n', '        skullyContract.createPromoSkully(_skullyId, _attack, _defend, _category, _owner);\n', '    }\n', '    \n', '    function createSaleAuction(uint256 _skullyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint _paymentBy) public onlyCaptain {\n', '        skullyContract.createSaleAuction(_skullyId, _startingPrice, _endingPrice, _duration, _paymentBy);\n', '    }\n', '    \n', '    function createNewSkullyAuction(uint256 _newSkullyId, uint256 _category, uint256 _startingPrice, uint256 _endingPrice) public onlyCaptain {\n', '        skullyContract.createNewSkullyAuction(_newSkullyId, _category, _startingPrice, _endingPrice);\n', '    }\n', '\n', '    function createNewSkullysAuction(uint256 _startId, uint256 _endId, uint256 _category, uint256 _startingPrice, uint256 _endingPrice) external onlyCaptain {\n', '        skullyContract.createNewSkullysAuction(_startId, _endId, _category, _startingPrice, _endingPrice);\n', '    }\n', '        \n', '    function createNewSkully(uint256 _newSkullyId, uint256 _category, address _owner) external onlyCaptain {\n', '        skullyContract.createNewSkully(_newSkullyId, _category, _owner);\n', '    }\n', '        \n', '    function createNewSkullys(uint256 _startId, uint256 _endId, uint256 _category, address _owner) external onlyCaptain {\n', '        skullyContract.createNewSkullys(_startId, _endId, _category, _owner);\n', '    }\n', '        \n', '    function setGamePlayAddress(address _gameAddress) external onlyCaptain {\n', '        skullyContract.setGamePlayAddress(_gameAddress);\n', '    }\n', '    \n', '    ///-----------------ITEMS------------------------///\n', '    \n', '    function setDiscount(uint256 _newDiscount) external onlyCaptain returns (uint256) {\n', '        itemContract.setDiscount(_newDiscount);\n', '    }\n', '    \n', '    function createNewMainAccessory(string memory name) public onlyCaptain {\n', '        itemContract.createNewMainAccessory(name);\n', '    }\n', '    \n', '    function createNewAccessory(\n', '        uint256 accessoryType,\n', '        uint256 accessoryId,\n', '        string memory name,\n', '        uint256 attack,\n', '        uint256 defend,\n', '        uint256 po8,\n', '        uint256 eth,\n', '        uint256 po8DailyMultiplier,\n', '        bool mustUnlock) public onlyCaptain {\n', '        itemContract.createNewAccessory(accessoryType, accessoryId, name, attack, defend, po8, eth, po8DailyMultiplier, mustUnlock);\n', '        }\n', '        \n', '    function updateAccessoryInformation(\n', '        uint256 id,\n', '        string calldata newName,\n', '        uint256 newAttack,\n', '        uint256 newDefend,\n', '        uint256 newPO8,\n', '        uint256 newEth,\n', '        uint256 newPO8DailyMultiplier,\n', '        bool newMustUnlock) external onlyCaptain returns (bool) {\n', '        itemContract.updateAccessoryInformation(id, newName, newAttack, newDefend, newPO8, newEth, newPO8DailyMultiplier, newMustUnlock);\n', '        }\n', '        \n', '    function setAccessoryToSkully(uint256 skullyId, uint256 realAccessoryId) external onlyCaptain {\n', '        itemContract.setAccessoryToSkully(skullyId, realAccessoryId);\n', '    }\n', '    \n', '    function setItemGamePlayAddress(address _gameAddress) external onlyCaptain {\n', '        itemContract.setGamePlayAddress(_gameAddress);\n', '    }\n', '    \n', '    function setNewRankPrice(uint8 rank, uint256 newPrice) public onlyCaptain returns (bool) {\n', '        itemContract.setNewRankPrice(rank, newPrice);\n', '    }\n', '    \n', '    function setNewRankFlags(uint8 rank, uint256 newFlags) public  onlyCaptain returns (bool) {\n', '        itemContract.setNewRankFlags(rank, newFlags);\n', '    }\n', '    \n', '    function setExchangeRate(uint256 _newExchangeRate) external onlyCaptain returns (uint256) {\n', '        itemContract.setExchangeRate(_newExchangeRate);\n', '    }\n', '    \n', '    function createNewBadge(uint256 badgeId, string memory description, uint256 po8) public onlyCaptain {\n', '        itemContract.createNewBadge(badgeId, description, po8);\n', '    }\n', '    \n', '    function setPO8OfBadge(uint256 badgeId, uint256 po8) public onlyCaptain {\n', '        itemContract.setPO8OfBadge(badgeId, po8);\n', '    }\n', '    \n', '    function setClaimBadgeContract(address newAddress) external onlyCaptain {\n', '        itemContract.setClaimBadgeContract(newAddress);\n', '    }\n', '    \n', '    function increaseSkullyExp(uint256 skullyId, uint256 flags) external onlyCaptain {\n', '        itemContract.increaseSkullyExp(skullyId, flags);\n', '    }\n', '    \n', '    function setBadgeToSkully(uint256 skullyId, uint256 badgeId) external onlyCaptain {\n', '        itemContract.setBadgeToSkully(skullyId, badgeId);\n', '    }\n', '    \n', '    ///-------------------AUCTION----------------------///\n', '    \n', '    function cancelAuction(uint256 _tokenId) public onlyCaptain {\n', '        auctionContract.cancelAuction(_tokenId);\n', '    }\n', '    \n', '    function cancelManyAuction(uint256[] calldata _listTokenId) external onlyCaptain {\n', '        for(uint i = 0; i < _listTokenId.length; i++)\n', '            cancelAuction(_listTokenId[i]);\n', '    }\n', '}']