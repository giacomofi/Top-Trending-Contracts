['pragma solidity ^0.5.0;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Permissions/RootPlatformAdministratorRole.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title RootPlatformAdministratorRole root user role mainly to manage other roles. */\n', 'contract RootPlatformAdministratorRole {\n', '    using Roles for Roles.Role;\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event RootPlatformAdministratorAdded(address indexed account);\n', '    event RootPlatformAdministratorRemoved(address indexed account);\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    Roles.Role private rootPlatformAdministrators;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor() internal {\n', '        _addRootPlatformAdministrator(msg.sender);\n', '    }\n', '\n', '///////////////////\n', '// Modifiers\n', '///////////////////\n', '\n', '    modifier onlyRootPlatformAdministrator() {\n', '        require(isRootPlatformAdministrator(msg.sender), "no root PFadmin");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function isRootPlatformAdministrator(address account) public view returns (bool) {\n', '        return rootPlatformAdministrators.has(account);\n', '    }\n', '\n', '    function addRootPlatformAdministrator(address account) public onlyRootPlatformAdministrator {\n', '        _addRootPlatformAdministrator(account);\n', '    }\n', '\n', '    function renounceRootPlatformAdministrator() public {\n', '        _removeRootPlatformAdministrator(msg.sender);\n', '    }\n', '\n', '    function _addRootPlatformAdministrator(address account) internal {\n', '        rootPlatformAdministrators.add(account);\n', '        emit RootPlatformAdministratorAdded(account);\n', '    }\n', '\n', '    function _removeRootPlatformAdministrator(address account) internal {\n', '        rootPlatformAdministrators.remove(account);\n', '        emit RootPlatformAdministratorRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Permissions/AssetTokenAdministratorRole.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title AssetTokenAdministratorRole of AssetToken administrators. */\n', 'contract AssetTokenAdministratorRole is RootPlatformAdministratorRole {\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event AssetTokenAdministratorAdded(address indexed account);\n', '    event AssetTokenAdministratorRemoved(address indexed account);\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    Roles.Role private assetTokenAdministrators;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor() internal {\n', '        _addAssetTokenAdministrator(msg.sender);\n', '    }\n', '\n', '///////////////////\n', '// Modifiers\n', '///////////////////\n', '\n', '    modifier onlyAssetTokenAdministrator() {\n', '        require(isAssetTokenAdministrator(msg.sender), "no ATadmin");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function isAssetTokenAdministrator(address _account) public view returns (bool) {\n', '        return assetTokenAdministrators.has(_account);\n', '    }\n', '\n', '    function addAssetTokenAdministrator(address _account) public onlyRootPlatformAdministrator {\n', '        _addAssetTokenAdministrator(_account);\n', '    }\n', '\n', '    function renounceAssetTokenAdministrator() public {\n', '        _removeAssetTokenAdministrator(msg.sender);\n', '    }\n', '\n', '    function _addAssetTokenAdministrator(address _account) internal {\n', '        assetTokenAdministrators.add(_account);\n', '        emit AssetTokenAdministratorAdded(_account);\n', '    }\n', '\n', '    function removeAssetTokenAdministrator(address _account) public onlyRootPlatformAdministrator {\n', '        _removeAssetTokenAdministrator(_account);\n', '    }\n', '\n', '    function _removeAssetTokenAdministrator(address _account) internal {\n', '        assetTokenAdministrators.remove(_account);\n', '        emit AssetTokenAdministratorRemoved(_account);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Permissions/At2CsConnectorRole.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title At2CsConnectorRole AssetToken to Crowdsale connector role. */\n', 'contract At2CsConnectorRole is RootPlatformAdministratorRole {\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event At2CsConnectorAdded(address indexed account);\n', '    event At2CsConnectorRemoved(address indexed account);\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    Roles.Role private at2csConnectors;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor() internal {\n', '        _addAt2CsConnector(msg.sender);\n', '    }\n', '\n', '///////////////////\n', '// Modifiers\n', '///////////////////\n', '\n', '    modifier onlyAt2CsConnector() {\n', '        require(isAt2CsConnector(msg.sender), "no at2csAdmin");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function isAt2CsConnector(address _account) public view returns (bool) {\n', '        return at2csConnectors.has(_account);\n', '    }\n', '\n', '    function addAt2CsConnector(address _account) public onlyRootPlatformAdministrator {\n', '        _addAt2CsConnector(_account);\n', '    }\n', '\n', '    function renounceAt2CsConnector() public {\n', '        _removeAt2CsConnector(msg.sender);\n', '    }\n', '\n', '    function _addAt2CsConnector(address _account) internal {\n', '        at2csConnectors.add(_account);\n', '        emit At2CsConnectorAdded(_account);\n', '    }\n', '\n', '    function removeAt2CsConnector(address _account) public onlyRootPlatformAdministrator {\n', '        _removeAt2CsConnector(_account);\n', '    }\n', '\n', '    function _removeAt2CsConnector(address _account) internal {\n', '        at2csConnectors.remove(_account);\n', '        emit At2CsConnectorRemoved(_account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/controller/0_library/DSMathL.sol\n', '\n', '// fork from ds-math specifically my librarization fork: https://raw.githubusercontent.com/JohannesMayerConda/ds-math/master/contracts/DSMathL.sol\n', '\n', '/// math.sol -- mixin for inline numerical wizardry\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'library DSMathL {\n', '    function ds_add(uint x, uint y) public pure returns (uint z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '    function ds_sub(uint x, uint y) public pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '    function ds_mul(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '\n', '    function ds_min(uint x, uint y) public pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function ds_max(uint x, uint y) public pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function ds_imin(int x, int y) public pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function ds_imax(int x, int y) public pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function ds_wmul(uint x, uint y) public pure returns (uint z) {\n', '        z = ds_add(ds_mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function ds_rmul(uint x, uint y) public pure returns (uint z) {\n', '        z = ds_add(ds_mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function ds_wdiv(uint x, uint y) public pure returns (uint z) {\n', '        z = ds_add(ds_mul(x, WAD), y / 2) / y;\n', '    }\n', '    function ds_rdiv(uint x, uint y) public pure returns (uint z) {\n', '        z = ds_add(ds_mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function ds_rpow(uint x, uint n) public pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = ds_rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = ds_rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Permissions/YourOwnable.sol\n', '\n', '// 1:1 copy of https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.1/contracts/ownership/Ownable.sol\n', '// except constructor that can instantly transfer ownership\n', '\n', 'contract YourOwnable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor (address newOwner) public {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/controller/FeeTable/StandardFeeTable.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '/** @title StandardFeeTable contract to store fees via name (fees per platform for certain name). */\n', 'contract StandardFeeTable  is YourOwnable {\n', '    using SafeMath for uint256;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor (address newOwner) YourOwnable(newOwner) public {}\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    uint256 public defaultFee;\n', '\n', '    mapping (bytes32 => uint256) public feeFor;\n', '    mapping (bytes32 => bool) public isFeeDisabled;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Set default fee (when nothing else applies).\n', '    /// @param _defaultFee default fee value. Unit is WAD so fee 1 means value=1e18.\n', '    function setDefaultFee(uint256 _defaultFee) public onlyOwner {\n', '        defaultFee = _defaultFee;\n', '    }\n', '\n', '    /// @notice Set fee by name.\n', '    /// @param _feeName fee name.\n', '    /// @param _feeValue fee value. Unit is WAD so fee 1 means value=1e18.\n', '    function setFee(bytes32 _feeName, uint256 _feeValue) public onlyOwner {\n', '        feeFor[_feeName] = _feeValue;\n', '    }\n', '\n', '    /// @notice Enable or disable fee by name.\n', '    /// @param _feeName fee name.\n', '    /// @param _feeDisabled true if fee should be disabled.\n', '    function setFeeMode(bytes32 _feeName, bool _feeDisabled) public onlyOwner {\n', '        isFeeDisabled[_feeName] = _feeDisabled;\n', '    }\n', '\n', '    /// @notice Get standard fee (not overriden by special fee for specific AssetToken).\n', '    /// @param _feeName fee name.\n', '    /// @return fee value. Unit is WAD so fee 1 means value=1e18.\n', '    function getStandardFee(bytes32 _feeName) public view returns (uint256 _feeValue) {\n', '        if (isFeeDisabled[_feeName]) {\n', '            return 0;\n', '        }\n', '\n', '        if(feeFor[_feeName] == 0) {\n', '            return defaultFee;\n', '        }\n', '\n', '        return feeFor[_feeName];\n', '    }\n', '\n', '    /// @notice Get standard fee for amount in base unit.\n', '    /// @param _feeName fee name.\n', '    /// @param _amountInFeeBaseUnit amount in fee base unit (currently in unit tokens).\n', '    /// @return fee value. Unit is WAD (converted it).\n', '    function getStandardFeeFor(bytes32 _feeName, uint256 _amountInFeeBaseUnit) public view returns (uint256) {\n', '        //1000000000000000 is 0,001 as WAD\n', '        //example fee 0.001 for amount 3: 3 tokens * 1000000000000000 fee = 3000000000000000 (0.003)\n', '        return _amountInFeeBaseUnit.mul(getStandardFee(_feeName));\n', '    }\n', '}\n', '\n', '// File: contracts/controller/FeeTable/FeeTable.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title FeeTable contract to store fees via name (fees per platform per assettoken for certain name). */\n', 'contract FeeTable is StandardFeeTable {\n', '    \n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor (address newOwner) StandardFeeTable(newOwner) public {}\n', '\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    // specialfee mapping feeName -> token -> fee\n', '    mapping (bytes32 => mapping (address => uint256)) public specialFeeFor;\n', '\n', '    // specialfee mapping feeName -> token -> isSet\n', '    mapping (bytes32 => mapping (address => bool)) public isSpecialFeeEnabled;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Set a special fee specifically for an AssetToken (higher or lower than normal fee).\n', '    /// @param _feeName fee name.\n', '    /// @param _regardingAssetToken regarding AssetToken.\n', '    /// @param _feeValue fee value. Unit is WAD so fee 1 means value=1e18.\n', '    function setSpecialFee(bytes32 _feeName, address _regardingAssetToken, uint256 _feeValue) public onlyOwner {\n', '        specialFeeFor[_feeName][_regardingAssetToken] = _feeValue;\n', '    }\n', '\n', '    /// @notice Enable or disable special fee.\n', '    /// @param _feeName fee name.\n', '    /// @param _regardingAssetToken regarding AssetToken.\n', '    /// @param _feeEnabled true to enable fee.\n', '    function setSpecialFeeMode(bytes32 _feeName, address _regardingAssetToken, bool _feeEnabled) public onlyOwner {\n', '        isSpecialFeeEnabled[_feeName][_regardingAssetToken] = _feeEnabled;\n', '    }\n', '\n', '    /// @notice Get fee by name.\n', '    /// @param _feeName fee name.\n', '    /// @param _regardingAssetToken regarding AssetToken.\n', '    /// @return fee value. Unit is WAD so fee 11 means value=1e18.\n', '    function getFee(bytes32 _feeName, address _regardingAssetToken) public view returns (uint256) {\n', '        if (isFeeDisabled[_feeName]) {\n', '            return 0;\n', '        }\n', '\n', '        if (isSpecialFeeEnabled[_feeName][_regardingAssetToken]) {\n', '            return specialFeeFor[_feeName][_regardingAssetToken];\n', '        }\n', '\n', '        return super.getStandardFee(_feeName);\n', '    }\n', '\n', '    /// @notice Get fee for amount in base unit.\n', '    /// @param _feeName fee name.\n', '    /// @param _regardingAssetToken regarding AssetToken.\n', '    /// @param _amountInFeeBaseUnit amount in fee base unit (currently in unit tokens).\n', '    /// @return fee value. Unit is WAD (converted it).\n', '    function getFeeFor(bytes32 _feeName, address _regardingAssetToken, uint256 _amountInFeeBaseUnit, address /*oracle*/)\n', '        public view returns (uint256) \n', '    {   \n', '        uint256 fee = getFee(_feeName, _regardingAssetToken);\n', '        \n', '        //1000000000000000 is 0,001 as WAD\n', '        //example fee 0.001 for amount 3: 3 tokens * 1000000000000000 fee = 3000000000000000 (0.003)\n', '        return _amountInFeeBaseUnit.mul(fee);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Permissions/WhitelistControlRole.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title WhitelistControlRole role to administrate whitelist and KYC. */\n', 'contract WhitelistControlRole is RootPlatformAdministratorRole {\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event WhitelistControlAdded(address indexed account);\n', '    event WhitelistControlRemoved(address indexed account);\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    Roles.Role private whitelistControllers;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor() internal {\n', '        _addWhitelistControl(msg.sender);\n', '    }\n', '\n', '///////////////////\n', '// Modifiers\n', '///////////////////\n', '\n', '    modifier onlyWhitelistControl() {\n', '        require(isWhitelistControl(msg.sender), "no WLcontrol");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function isWhitelistControl(address account) public view returns (bool) {\n', '        return whitelistControllers.has(account);\n', '    }\n', '\n', '    function addWhitelistControl(address account) public onlyRootPlatformAdministrator {\n', '        _addWhitelistControl(account);\n', '    }\n', '\n', '    function _addWhitelistControl(address account) internal {\n', '        whitelistControllers.add(account);\n', '        emit WhitelistControlAdded(account);\n', '    }\n', '\n', '    function removeWhitelistControl(address account) public onlyRootPlatformAdministrator {\n', '        whitelistControllers.remove(account);\n', '        emit WhitelistControlRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/interface/IWhitelistAutoExtendExpirationExecutor.sol\n', '\n', 'interface IWhitelistAutoExtendExpirationExecutor {\n', '    function recheckIdentity(address _wallet, address _investorKey, address _issuer) external;\n', '}\n', '\n', '// File: contracts/controller/interface/IWhitelistAutoExtendExpirationCallback.sol\n', '\n', 'interface IWhitelistAutoExtendExpirationCallback {\n', '    function updateIdentity(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) external;\n', '}\n', '\n', '// File: contracts/controller/Whitelist/Whitelist.sol\n', '\n', '/** @title Whitelist stores whitelist information of investors like if and when they were KYC checked. */\n', 'contract Whitelist is WhitelistControlRole, IWhitelistAutoExtendExpirationCallback {\n', '    using SafeMath for uint256;\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    uint256 public expirationBlocks;\n', '    bool public expirationEnabled;\n', '    bool public autoExtendExpiration;\n', '    address public autoExtendExpirationContract;\n', '\n', '    mapping (address => bool) whitelistedWallet;\n', '    mapping (address => uint256) lastIdentityVerificationDate;\n', '    mapping (address => address) whitelistedWalletIssuer;\n', '    mapping (address => address) walletToInvestorKey;\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event WhitelistChanged(address indexed wallet, bool whitelisted, address investorKey, address issuer);\n', '    event ExpirationBlocksChanged(address initiator, uint256 addedBlocksSinceWhitelisting);\n', '    event ExpirationEnabled(address initiator, bool expirationEnabled);\n', '    event UpdatedIdentity(address initiator, address indexed wallet, bool whitelisted, address investorKey, address issuer);\n', '    event SetAutoExtendExpirationContract(address initiator, address expirationContract);\n', '    event UpdatedAutoExtendExpiration(address initiator, bool autoExtendEnabled);\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function getIssuer(address _whitelistedWallet) public view returns (address) {\n', '        return whitelistedWalletIssuer[_whitelistedWallet];\n', '    }\n', '\n', '    function getInvestorKey(address _wallet) public view returns (address) {\n', '        return walletToInvestorKey[_wallet];\n', '    }\n', '\n', '    function setWhitelisted(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) public onlyWhitelistControl {\n', '        whitelistedWallet[_wallet] = _isWhitelisted;\n', '        lastIdentityVerificationDate[_wallet] = block.number;\n', '        whitelistedWalletIssuer[_wallet] = _issuer;\n', '        assignWalletToInvestorKey(_wallet, _investorKey);\n', '\n', '        emit WhitelistChanged(_wallet, _isWhitelisted, _investorKey, _issuer);\n', '    }\n', '\n', '    function assignWalletToInvestorKey(address _wallet, address _investorKey) public onlyWhitelistControl {\n', '        walletToInvestorKey[_wallet] = _investorKey;\n', '    }\n', '\n', '    //note: no view keyword here because IWhitelistAutoExtendExpirationExecutor could change state via callback\n', '    function checkWhitelistedWallet(address _wallet) public returns (bool) {\n', '        if(autoExtendExpiration && isExpired(_wallet)) {\n', '            address investorKey = walletToInvestorKey[_wallet];\n', '            address issuer = whitelistedWalletIssuer[_wallet];\n', '            require(investorKey != address(0), "expired, unknown identity");\n', '\n', '            //IMPORTANT: reentrance hook. make sure calling contract is safe\n', '            IWhitelistAutoExtendExpirationExecutor(autoExtendExpirationContract).recheckIdentity(_wallet, investorKey, issuer);\n', '        }\n', '\n', '        require(!isExpired(_wallet), "whitelist expired");\n', '        require(whitelistedWallet[_wallet], "not whitelisted");\n', '\n', '        return true;\n', '    }\n', '\n', '    function isWhitelistedWallet(address _wallet) public view returns (bool) {\n', '        if(isExpired(_wallet)) {\n', '            return false;\n', '        }\n', '\n', '        return whitelistedWallet[_wallet];\n', '    }\n', '\n', '    function isExpired(address _wallet) private view returns (bool) {\n', '        return expirationEnabled && block.number > lastIdentityVerificationDate[_wallet].add(expirationBlocks);\n', '    }\n', '\n', '    function blocksLeftUntilExpired(address _wallet) public view returns (uint256) {\n', '        require(expirationEnabled, "expiration disabled");\n', '\n', '        return lastIdentityVerificationDate[_wallet].add(expirationBlocks).sub(block.number);\n', '    }\n', '\n', '    function setExpirationBlocks(uint256 _addedBlocksSinceWhitelisting) public onlyRootPlatformAdministrator {\n', '        expirationBlocks = _addedBlocksSinceWhitelisting;\n', '\n', '        emit ExpirationBlocksChanged(msg.sender, _addedBlocksSinceWhitelisting);\n', '    }\n', '\n', '    function setExpirationEnabled(bool _isEnabled) public onlyRootPlatformAdministrator {\n', '        expirationEnabled = _isEnabled;\n', '\n', '        emit ExpirationEnabled(msg.sender, expirationEnabled);\n', '    }\n', '\n', '    function setAutoExtendExpirationContract(address _autoExtendContract) public onlyRootPlatformAdministrator {\n', '        autoExtendExpirationContract = _autoExtendContract;\n', '\n', '        emit SetAutoExtendExpirationContract(msg.sender, _autoExtendContract);\n', '    }\n', '\n', '    function setAutoExtendExpiration(bool _autoExtendEnabled) public onlyRootPlatformAdministrator {\n', '        autoExtendExpiration = _autoExtendEnabled;\n', '\n', '        emit UpdatedAutoExtendExpiration(msg.sender, _autoExtendEnabled);\n', '    }\n', '\n', '    function updateIdentity(address _wallet, bool _isWhitelisted, address _investorKey, address _issuer) public onlyWhitelistControl {\n', '        setWhitelisted(_wallet, _isWhitelisted, _investorKey, _issuer);\n', '\n', '        emit UpdatedIdentity(msg.sender, _wallet, _isWhitelisted, _investorKey, _issuer);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/interface/IExchangeRateOracle.sol\n', '\n', 'contract IExchangeRateOracle {\n', '    function resetCurrencyPair(address _currencyA, address _currencyB) public;\n', '\n', '    function configureCurrencyPair(address _currencyA, address _currencyB, uint256 maxNextUpdateInBlocks) public;\n', '\n', '    function setExchangeRate(address _currencyA, address _currencyB, uint256 _rateFromTo, uint256 _rateToFrom) public;\n', '    function getExchangeRate(address _currencyA, address _currencyB) public view returns (uint256);\n', '\n', '    function convert(address _currencyA, address _currencyB, uint256 _amount) public view returns (uint256);\n', '    function convertTT(bytes32 _currencyAText, bytes32 _currencyBText, uint256 _amount) public view returns (uint256);\n', '    function convertTA(bytes32 _currencyAText, address _currencyB, uint256 _amount) public view returns (uint256);\n', '    function convertAT(address _currencyA, bytes32 _currencyBText, uint256 _amount) public view returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/controller/interfaces/IBasicAssetToken.sol\n', '\n', 'interface IBasicAssetToken {\n', '    //AssetToken specific\n', '    function isTokenAlive() external view returns (bool);\n', '\n', '    //Mintable\n', '    function mint(address _to, uint256 _amount) external returns (bool);\n', '    function finishMinting() external returns (bool);\n', '}\n', '\n', '// File: contracts/controller/Permissions/StorageAdministratorRole.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title StorageAdministratorRole role to administrate generic storage. */\n', 'contract StorageAdministratorRole is RootPlatformAdministratorRole {\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event StorageAdministratorAdded(address indexed account);\n', '    event StorageAdministratorRemoved(address indexed account);\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    Roles.Role private storageAdministrators;\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor() internal {\n', '        _addStorageAdministrator(msg.sender);\n', '    }\n', '\n', '///////////////////\n', '// Modifiers\n', '///////////////////\n', '\n', '    modifier onlyStorageAdministrator() {\n', '        require(isStorageAdministrator(msg.sender), "no SAdmin");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function isStorageAdministrator(address account) public view returns (bool) {\n', '        return storageAdministrators.has(account);\n', '    }\n', '\n', '    function addStorageAdministrator(address account) public onlyRootPlatformAdministrator {\n', '        _addStorageAdministrator(account);\n', '    }\n', '\n', '    function _addStorageAdministrator(address account) internal {\n', '        storageAdministrators.add(account);\n', '        emit StorageAdministratorAdded(account);\n', '    }\n', '\n', '    function removeStorageAdministrator(address account) public onlyRootPlatformAdministrator {\n', '        storageAdministrators.remove(account);\n', '        emit StorageAdministratorRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/UintStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title UintStorage uint storage. */\n', 'contract UintStorage is StorageAdministratorRole\n', '{\n', '\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => uint256) private uintStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setUint(bytes32 _name, uint256 _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setUint(_name, _value);\n', '    }\n', '\n', '    function getUint(bytes32 _name) \n', '        public view \n', '        returns (uint256) \n', '    {\n', '        return _getUint(_name);\n', '    }\n', '\n', '    function _setUint(bytes32 _name, uint256 _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            uintStorage[_name] = _value;\n', '        }\n', '    }\n', '\n', '    function _getUint(bytes32 _name) \n', '        private view \n', '        returns (uint256) \n', '    {\n', '        return uintStorage[_name];\n', '    }\n', '\n', '    function get2Uint(\n', '        bytes32 _name1, \n', '        bytes32 _name2) \n', '        public view \n', '        returns (uint256, uint256) \n', '    {\n', '        return (_getUint(_name1), _getUint(_name2));\n', '    }\n', '    \n', '    function get3Uint(\n', '        bytes32 _name1, \n', '        bytes32 _name2, \n', '        bytes32 _name3) \n', '        public view \n', '        returns (uint256, uint256, uint256) \n', '    {\n', '        return (_getUint(_name1), _getUint(_name2), _getUint(_name3));\n', '    }\n', '\n', '    function get4Uint(\n', '        bytes32 _name1, \n', '        bytes32 _name2, \n', '        bytes32 _name3, \n', '        bytes32 _name4) \n', '        public view \n', '        returns (uint256, uint256, uint256, uint256) \n', '    {\n', '        return (_getUint(_name1), _getUint(_name2), _getUint(_name3), _getUint(_name4));\n', '    }\n', '\n', '    function get5Uint(\n', '        bytes32 _name1, \n', '        bytes32 _name2, \n', '        bytes32 _name3, \n', '        bytes32 _name4, \n', '        bytes32 _name5) \n', '        public view \n', '        returns (uint256, uint256, uint256, uint256, uint256) \n', '    {\n', '        return (_getUint(_name1), \n', '            _getUint(_name2), \n', '            _getUint(_name3), \n', '            _getUint(_name4), \n', '            _getUint(_name5));\n', '    }\n', '\n', '    function set2Uint(\n', '        bytes32 _name1, uint256 _value1, \n', '        bytes32 _name2, uint256 _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setUint(_name1, _value1);\n', '        _setUint(_name2, _value2);\n', '    }\n', '\n', '    function set3Uint(\n', '        bytes32 _name1, uint256 _value1, \n', '        bytes32 _name2, uint256 _value2,\n', '        bytes32 _name3, uint256 _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setUint(_name1, _value1);\n', '        _setUint(_name2, _value2);\n', '        _setUint(_name3, _value3);\n', '    }\n', '\n', '    function set4Uint(\n', '        bytes32 _name1, uint256 _value1, \n', '        bytes32 _name2, uint256 _value2,\n', '        bytes32 _name3, uint256 _value3,\n', '        bytes32 _name4, uint256 _value4)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setUint(_name1, _value1);\n', '        _setUint(_name2, _value2);\n', '        _setUint(_name3, _value3);\n', '        _setUint(_name4, _value4);\n', '    }\n', '\n', '    function set5Uint(\n', '        bytes32 _name1, uint256 _value1, \n', '        bytes32 _name2, uint256 _value2,\n', '        bytes32 _name3, uint256 _value3,\n', '        bytes32 _name4, uint256 _value4,\n', '        bytes32 _name5, uint256 _value5)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setUint(_name1, _value1);\n', '        _setUint(_name2, _value2);\n', '        _setUint(_name3, _value3);\n', '        _setUint(_name4, _value4);\n', '        _setUint(_name5, _value5);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/AddrStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title AddrStorage address storage. */\n', 'contract AddrStorage is StorageAdministratorRole\n', '{\n', '\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => address) private addrStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setAddr(bytes32 _name, address _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setAddr(_name, _value);\n', '    }\n', '\n', '    function getAddr(bytes32 _name) \n', '        public view \n', '        returns (address) \n', '    {\n', '        return _getAddr(_name);\n', '    }\n', '\n', '    function _setAddr(bytes32 _name, address _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            addrStorage[_name] = _value;\n', '        }\n', '    }\n', '\n', '    function _getAddr(bytes32 _name) \n', '        private view \n', '        returns (address) \n', '    {\n', '        return addrStorage[_name];\n', '    }\n', '\n', '    function get2Address(\n', '        bytes32 _name1, \n', '        bytes32 _name2) \n', '        public view \n', '        returns (address, address) \n', '    {\n', '        return (_getAddr(_name1), _getAddr(_name2));\n', '    }\n', '    \n', '    function get3Address(\n', '        bytes32 _name1, \n', '        bytes32 _name2, \n', '        bytes32 _name3) \n', '        public view \n', '        returns (address, address, address) \n', '    {\n', '        return (_getAddr(_name1), _getAddr(_name2), _getAddr(_name3));\n', '    }\n', '\n', '    function set2Address(\n', '        bytes32 _name1, address _value1, \n', '        bytes32 _name2, address _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr(_name1, _value1);\n', '        _setAddr(_name2, _value2);\n', '    }\n', '\n', '    function set3Address(\n', '        bytes32 _name1, address _value1, \n', '        bytes32 _name2, address _value2,\n', '        bytes32 _name3, address _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr(_name1, _value1);\n', '        _setAddr(_name2, _value2);\n', '        _setAddr(_name3, _value3);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/Addr2UintStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title Addr2UintStorage address to uint mapping storage. */\n', 'contract Addr2UintStorage is StorageAdministratorRole\n', '{\n', '    \n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => mapping (address => uint256)) private addr2UintStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setAddr2Uint(bytes32 _name, address _address, uint256 _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setAddr2Uint(_name, _address, _value);\n', '    }\n', '\n', '    function getAddr2Uint(bytes32 _name, address _address)\n', '        public view \n', '        returns (uint256) \n', '    {\n', '        return _getAddr2Uint(_name, _address);\n', '    }\n', '\n', '    function _setAddr2Uint(bytes32 _name, address _address, uint256 _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            addr2UintStorage[_name][_address] = _value;\n', '        }\n', '    }\n', '\n', '    function _getAddr2Uint(bytes32 _name, address _address)\n', '        private view \n', '        returns (uint256) \n', '    {\n', '        return addr2UintStorage[_name][_address];\n', '    }\n', '\n', '    function get2Addr2Uint(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2)\n', '        public view \n', '        returns (uint256, uint256) \n', '    {\n', '        return (_getAddr2Uint(_name1, _address1), \n', '            _getAddr2Uint(_name2, _address2));\n', '    }\n', '    \n', '    function get3Addr2Addr2Uint(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2,\n', '        bytes32 _name3, address _address3) \n', '        public view \n', '        returns (uint256, uint256, uint256) \n', '    {\n', '        return (_getAddr2Uint(_name1, _address1), \n', '            _getAddr2Uint(_name2, _address2), \n', '            _getAddr2Uint(_name3, _address3));\n', '    }\n', '\n', '    function set2Addr2Uint(\n', '        bytes32 _name1, address _address1, uint256 _value1, \n', '        bytes32 _name2, address _address2, uint256 _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Uint(_name1, _address1, _value1);\n', '        _setAddr2Uint(_name2, _address2, _value2);\n', '    }\n', '\n', '    function set3Addr2Uint(\n', '        bytes32 _name1, address _address1, uint256 _value1, \n', '        bytes32 _name2, address _address2, uint256 _value2,\n', '        bytes32 _name3, address _address3, uint256 _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Uint(_name1, _address1, _value1);\n', '        _setAddr2Uint(_name2, _address2, _value2);\n', '        _setAddr2Uint(_name3, _address3, _value3);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/Addr2AddrStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title Addr2AddrStorage address to address mapping storage. */\n', 'contract Addr2AddrStorage is StorageAdministratorRole\n', '{\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => mapping (address => address)) private addr2AddrStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setAddr2Addr(bytes32 _name, address _address, address _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setAddr2Addr(_name, _address, _value);\n', '    }\n', '\n', '    function getAddr2Addr(bytes32 _name, address _address)\n', '        public view \n', '        returns (address) \n', '    {\n', '        return _getAddr2Addr(_name, _address);\n', '    }\n', '\n', '    function _setAddr2Addr(bytes32 _name, address _address, address _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            addr2AddrStorage[_name][_address] = _value;\n', '        }\n', '    }\n', '\n', '    function _getAddr2Addr(bytes32 _name, address _address)\n', '        private view \n', '        returns (address) \n', '    {\n', '        return addr2AddrStorage[_name][_address];\n', '    }\n', '\n', '    function get2Addr2Addr(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2)\n', '        public view \n', '        returns (address, address) \n', '    {\n', '        return (_getAddr2Addr(_name1, _address1), \n', '            _getAddr2Addr(_name2, _address2));\n', '    }\n', '    \n', '    function get3Addr2Addr2Addr(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2,\n', '        bytes32 _name3, address _address3) \n', '        public view \n', '        returns (address, address, address) \n', '    {\n', '        return (_getAddr2Addr(_name1, _address1), \n', '            _getAddr2Addr(_name2, _address2), \n', '            _getAddr2Addr(_name3, _address3));\n', '    }\n', '\n', '    function set2Addr2Addr(\n', '        bytes32 _name1, address _address1, address _value1, \n', '        bytes32 _name2, address _address2, address _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Addr(_name1, _address1, _value1);\n', '        _setAddr2Addr(_name2, _address2, _value2);\n', '    }\n', '\n', '    function set3Addr2Addr(\n', '        bytes32 _name1, address _address1, address _value1, \n', '        bytes32 _name2, address _address2, address _value2,\n', '        bytes32 _name3, address _address3, address _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Addr(_name1, _address1, _value1);\n', '        _setAddr2Addr(_name2, _address2, _value2);\n', '        _setAddr2Addr(_name3, _address3, _value3);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/Addr2BoolStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title Addr2BoolStorage address to address mapping storage. */\n', 'contract Addr2BoolStorage is StorageAdministratorRole\n', '{\n', '    \n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => mapping (address => bool)) private addr2BoolStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setAddr2Bool(bytes32 _name, address _address, bool _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setAddr2Bool(_name, _address, _value);\n', '    }\n', '\n', '    function getAddr2Bool(bytes32 _name, address _address)\n', '        public view  \n', '        returns (bool) \n', '    {\n', '        return _getAddr2Bool(_name, _address);\n', '    }\n', '\n', '    function _setAddr2Bool(bytes32 _name, address _address, bool _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            addr2BoolStorage[_name][_address] = _value;\n', '        }\n', '    }\n', '\n', '    function _getAddr2Bool(bytes32 _name, address _address)\n', '        private view \n', '        returns (bool) \n', '    {\n', '        return addr2BoolStorage[_name][_address];\n', '    }\n', '\n', '    function get2Addr2Bool(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2)\n', '        public view \n', '        returns (bool, bool) \n', '    {\n', '        return (_getAddr2Bool(_name1, _address1), \n', '            _getAddr2Bool(_name2, _address2));\n', '    }\n', '    \n', '    function get3Address2Address2Bool(\n', '        bytes32 _name1, address _address1,\n', '        bytes32 _name2, address _address2,\n', '        bytes32 _name3, address _address3) \n', '        public view \n', '        returns (bool, bool, bool) \n', '    {\n', '        return (_getAddr2Bool(_name1, _address1), \n', '            _getAddr2Bool(_name2, _address2), \n', '            _getAddr2Bool(_name3, _address3));\n', '    }\n', '\n', '    function set2Address2Bool(\n', '        bytes32 _name1, address _address1, bool _value1, \n', '        bytes32 _name2, address _address2, bool _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Bool(_name1, _address1, _value1);\n', '        _setAddr2Bool(_name2, _address2, _value2);\n', '    }\n', '\n', '    function set3Address2Bool(\n', '        bytes32 _name1, address _address1, bool _value1, \n', '        bytes32 _name2, address _address2, bool _value2,\n', '        bytes32 _name3, address _address3, bool _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setAddr2Bool(_name1, _address1, _value1);\n', '        _setAddr2Bool(_name2, _address2, _value2);\n', '        _setAddr2Bool(_name3, _address3, _value3);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/BytesStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title BytesStorage bytes storage. */\n', 'contract BytesStorage is StorageAdministratorRole\n', '{\n', '\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => bytes32) private bytesStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function setBytes(bytes32 _name, bytes32 _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        return _setBytes(_name, _value);\n', '    }\n', '\n', '    function getBytes(bytes32 _name) \n', '        public view \n', '        returns (bytes32) \n', '    {\n', '        return _getBytes(_name);\n', '    }\n', '\n', '    function _setBytes(bytes32 _name, bytes32 _value)\n', '        private \n', '    {\n', '        if(_name != "") {\n', '            bytesStorage[_name] = _value;\n', '        }\n', '    }\n', '\n', '    function _getBytes(bytes32 _name) \n', '        private view \n', '        returns (bytes32) \n', '    {\n', '        return bytesStorage[_name];\n', '    }\n', '\n', '    function get2Bytes(\n', '        bytes32 _name1, \n', '        bytes32 _name2) \n', '        public view \n', '        returns (bytes32, bytes32) \n', '    {\n', '        return (_getBytes(_name1), _getBytes(_name2));\n', '    }\n', '    \n', '    function get3Bytes(\n', '        bytes32 _name1, \n', '        bytes32 _name2, \n', '        bytes32 _name3) \n', '        public view \n', '        returns (bytes32, bytes32, bytes32) \n', '    {\n', '        return (_getBytes(_name1), _getBytes(_name2), _getBytes(_name3));\n', '    }\n', '\n', '    function set2Bytes(\n', '        bytes32 _name1, bytes32 _value1, \n', '        bytes32 _name2, bytes32 _value2)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setBytes(_name1, _value1);\n', '        _setBytes(_name2, _value2);\n', '    }\n', '\n', '    function set3Bytes(\n', '        bytes32 _name1, bytes32 _value1, \n', '        bytes32 _name2, bytes32 _value2,\n', '        bytes32 _name3, bytes32 _value3)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        _setBytes(_name1, _value1);\n', '        _setBytes(_name2, _value2);\n', '        _setBytes(_name3, _value3);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/Addr2AddrArrStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title Addr2AddrArrStorage address to address array mapping storage. */\n', 'contract Addr2AddrArrStorage is StorageAdministratorRole\n', '{\n', '\n', '///////////////////\n', '// Mappings\n', '///////////////////\n', '\n', '    mapping (bytes32 => mapping (address => address[])) private addr2AddrArrStorage;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function addToAddr2AddrArr(bytes32 _name, address _address, address _value)\n', '        public \n', '        onlyStorageAdministrator \n', '    {\n', '        addr2AddrArrStorage[_name][_address].push(_value);\n', '    }\n', '\n', '    function getAddr2AddrArr(bytes32 _name, address _address)\n', '        public view \n', '        returns (address[] memory) \n', '    {\n', '        return addr2AddrArrStorage[_name][_address];\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/storagetypes/StorageHolder.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/** @title StorageHolder holds the fine-grained generic storage functions. */\n', 'contract StorageHolder is \n', '    UintStorage,\n', '    BytesStorage,\n', '    AddrStorage,\n', '    Addr2UintStorage,\n', '    Addr2BoolStorage,\n', '    Addr2AddrStorage,\n', '    Addr2AddrArrStorage\n', '{\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function getMixedUBA(bytes32 _uintName, bytes32 _bytesName, bytes32 _addressName) \n', '        public view\n', '        returns (uint256, bytes32, address) \n', '    {\n', '        return (getUint(_uintName), getBytes(_bytesName), getAddr(_addressName));\n', '    }\n', '\n', '    function getMixedMapA2UA2BA2A(\n', '        bytes32 _a2uName, \n', '        address _a2uAddress, \n', '        bytes32 _a2bName, \n', '        address _a2bAddress, \n', '        bytes32 _a2aName, \n', '        address _a2aAddress)\n', '        public view\n', '        returns (uint256, bool, address) \n', '    {\n', '        return (getAddr2Uint(_a2uName, _a2uAddress), \n', '            getAddr2Bool(_a2bName, _a2bAddress), \n', '            getAddr2Addr(_a2aName, _a2aAddress));\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Storage/AT2CSStorage.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '/** @title AT2CSStorage AssetToken to Crowdsale storage (that is upgradeable). */\n', 'contract AT2CSStorage is StorageAdministratorRole {\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor(address controllerStorage) public {\n', '        storageHolder = StorageHolder(controllerStorage);\n', '    }\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    StorageHolder storageHolder;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    function getAssetTokenOfCrowdsale(address _crowdsale) public view returns (address) {\n', '        return storageHolder.getAddr2Addr("cs2at", _crowdsale);\n', '    }\n', '\n', '    function getRateFromCrowdsale(address _crowdsale) public view returns (uint256) {\n', '        address assetToken = storageHolder.getAddr2Addr("cs2at", _crowdsale);\n', '        return getRateFromAssetToken(assetToken);\n', '    }\n', '\n', '    function getRateFromAssetToken(address _assetToken) public view returns (uint256) {\n', '        require(_assetToken != address(0), "rate assetTokenIs0");\n', '        return storageHolder.getAddr2Uint("rate", _assetToken);\n', '    }\n', '\n', '    function getAssetTokenOwnerWalletFromCrowdsale(address _crowdsale) public view returns (address) {\n', '        address assetToken = storageHolder.getAddr2Addr("cs2at", _crowdsale);\n', '        return getAssetTokenOwnerWalletFromAssetToken(assetToken);\n', '    }\n', '\n', '    function getAssetTokenOwnerWalletFromAssetToken(address _assetToken) public view returns (address) {\n', '        return storageHolder.getAddr2Addr("at2wallet", _assetToken);\n', '    }\n', '\n', '    function getAssetTokensOf(address _wallet) public view returns (address[] memory) {\n', '        return storageHolder.getAddr2AddrArr("wallet2AT", _wallet);\n', '    }\n', '\n', '    function isAssignedCrowdsale(address _crowdsale) public view returns (bool) {\n', '        return storageHolder.getAddr2Bool("isCS", _crowdsale);\n', '    }\n', '\n', '    function isTrustedAssetTokenRegistered(address _assetToken) public view returns (bool) {\n', '        return storageHolder.getAddr2Bool("trustedAT", _assetToken);\n', '    }\n', '\n', '    function isTrustedAssetTokenActive(address _assetToken) public view returns (bool) {\n', '        return storageHolder.getAddr2Bool("ATactive", _assetToken);\n', '    }\n', '\n', '    function checkTrustedAssetToken(address _assetToken) public view returns (bool) {\n', '        require(storageHolder.getAddr2Bool("ATactive", _assetToken), "not trusted AT");\n', '\n', '        return true;\n', '    }\n', '\n', '    function checkTrustedCrowdsaleInternal(address _crowdsale) public view returns (bool) {\n', '        address _assetTokenAddress = storageHolder.getAddr2Addr("cs2at", _crowdsale);\n', '        require(storageHolder.getAddr2Bool("isCS", _crowdsale), "not registered CS");\n', '        require(checkTrustedAssetToken(_assetTokenAddress), "not trusted AT");\n', '\n', '        return true;\n', '    }\n', '\n', '    function changeActiveTrustedAssetToken(address _assetToken, bool _active) public onlyStorageAdministrator {\n', '        storageHolder.setAddr2Bool("ATactive", _assetToken, _active);\n', '    }\n', '\n', '    function addTrustedAssetTokenInternal(address _ownerWallet, address _assetToken, uint256 _rate) public onlyStorageAdministrator {\n', '        require(!storageHolder.getAddr2Bool("trustedAT", _assetToken), "exists");\n', '        require(ERC20Detailed(_assetToken).decimals() == 0, "decimal not 0");\n', '\n', '        storageHolder.setAddr2Bool("trustedAT", _assetToken, true);\n', '        storageHolder.setAddr2Bool("ATactive", _assetToken, true);\n', '        storageHolder.addToAddr2AddrArr("wallet2AT", _ownerWallet, _assetToken);\n', '        storageHolder.setAddr2Addr("at2wallet", _assetToken, _ownerWallet);\n', '        storageHolder.setAddr2Uint("rate", _assetToken, _rate);\n', '    }\n', '\n', '    function assignCrowdsale(address _assetToken, address _crowdsale) public onlyStorageAdministrator {\n', '        require(storageHolder.getAddr2Bool("trustedAT", _assetToken), "no AT");\n', '        require(!storageHolder.getAddr2Bool("isCS", _crowdsale), "is assigned");\n', '        require(IBasicAssetToken(_assetToken).isTokenAlive(), "not alive");\n', '        require(ERC20Detailed(_assetToken).decimals() == 0, "decimal not 0");\n', '        \n', '        storageHolder.setAddr2Bool("isCS", _crowdsale, true);\n', '        storageHolder.setAddr2Addr("cs2at", _crowdsale, _assetToken);\n', '    }\n', '\n', '    function setAssetTokenRate(address _assetToken, uint256 _rate) public onlyStorageAdministrator {\n', '        storageHolder.setAddr2Uint("rate", _assetToken, _rate);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/0_library/ControllerL.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/** @title ControllerL library. */\n', 'library ControllerL {\n', '    using SafeMath for uint256;\n', '\n', '///////////////////\n', '// Structs\n', '///////////////////\n', '\n', '    struct Data {\n', '        // global flag fees enabled\n', '        bool feesEnabled;\n', '\n', '        // global flag whitelist enabled\n', '        bool whitelistEnabled;\n', '\n', '        // address of the crwd token (for fees etc.)\n', '        address crwdToken;\n', '\n', "        // root platform wallet (receives fees according to it's FeeTable)\n", '        address rootPlatformAddress;\n', '\n', '        // address of ExchangeRateOracle (converts e.g. ETH to EUR and vice versa)\n', '        address exchangeRateOracle;\n', '\n', '        // the address of the whitelist contract\n', '        address whitelist;\n', '\n', '        // the generic storage contract\n', '        AT2CSStorage store;\n', '\n', '        // global flag to prevent new AssetToken or crowdsales to be accepted (e.g. after upgrade).\n', '        bool blockNew;\n', '\n', '        // mapping of platform addresses that are trusted\n', '        mapping ( address => bool ) trustedPlatform; //note: not easily upgradeable\n', '\n', '        // mapping of platform addresses that are trusted\n', '        mapping ( address => bool ) onceTrustedPlatform; //note: not easily upgradeable\n', '\n', '        // mapping of crowdsale to platform wallet\n', '        mapping ( address => address ) crowdsaleToPlatform; //note: not easily upgradeable\n', '\n', '        // mapping from platform address to FeeTable\n', '        mapping ( address => address ) platformToFeeTable; //note: not easily upgradeable\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @dev Contant point multiplier because no decimals.\n', '    function pointMultiplier() private pure returns (uint256) {\n', '        return 1e18;\n', '    }\n', '\n', '    /// @notice Address of generic storage (for upgradability).\n', '    function getStorageAddress(Data storage _self) public view returns (address) {\n', '        return address(_self.store);\n', '    }\n', '\n', '    /// @notice Assign generic storage (for upgradability).\n', '    /// @param _storage storage address.\n', '    function assignStore(Data storage _self, address _storage) public {\n', '        _self.store = AT2CSStorage(_storage);\n', '    }\n', '\n', '    /// @notice Get FeeTable for platform.\n', '    /// @param _platform platform to find FeeTable for.\n', '    /// @return address of FeeTable of platform.\n', '    function getFeeTableAddressForPlatform(Data storage _self, address _platform) public view returns (address) {\n', '        return _self.platformToFeeTable[_platform];\n', '    }\n', '\n', '    /// @notice Get FeeTable for platform.\n', '    /// @param _platform platform to find FeeTable for.\n', '    /// @return address of FeeTable of platform.\n', '    function getFeeTableForPlatform(Data storage _self, address _platform) private view returns (FeeTable) {\n', '        return FeeTable(_self.platformToFeeTable[_platform]);\n', '    }\n', '\n', '    /// @notice Set exchange rate oracle address.\n', '    /// @param _oracleAddress the address of the ExchangeRateOracle.\n', '    function setExchangeRateOracle(Data storage _self, address _oracleAddress) public {\n', '        _self.exchangeRateOracle = _oracleAddress;\n', '\n', '        emit ExchangeRateOracleSet(msg.sender, _oracleAddress);\n', '    }\n', '\n', '    /// @notice Check if a wallet is whitelisted or fail. Also considers auto extend (if enabled).\n', '    /// @param _wallet the wallet to check.\n', '    function checkWhitelistedWallet(Data storage _self, address _wallet) public returns (bool) {\n', '        require(Whitelist(_self.whitelist).checkWhitelistedWallet(_wallet), "not whitelist");\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Check if a wallet is whitelisted.\n', '    /// @param _wallet the wallet to check.\n', '    /// @return true if whitelisted.\n', '    function isWhitelistedWallet(Data storage _self, address _wallet) public view returns (bool) {\n', '        return Whitelist(_self.whitelist).isWhitelistedWallet(_wallet);\n', '    }\n', '\n', '    /// @notice Convert eth amount into base currency (EUR), apply exchange rate via oracle, apply rate for AssetToken.\n', '    /// @param _crowdsale the crowdsale address.\n', '    /// @param _amountInWei the amount desired to be converted into tokens.\n', '    function convertEthToEurApplyRateGetTokenAmountFromCrowdsale(\n', '        Data storage _self, \n', '        address _crowdsale,\n', '        uint256 _amountInWei) \n', '        public view returns (uint256 _effectiveTokensNoDecimals, uint256 _overpaidEthWhenZeroDecimals)\n', '    {\n', '        uint256 amountInEur = convertEthToEur(_self, _amountInWei);\n', '        uint256 tokens = DSMathL.ds_wmul(amountInEur, _self.store.getRateFromCrowdsale(_crowdsale));\n', '\n', '        _effectiveTokensNoDecimals = tokens.div(pointMultiplier());\n', '        _overpaidEthWhenZeroDecimals = convertEurToEth(_self, DSMathL.ds_wdiv(tokens.sub(_effectiveTokensNoDecimals.mul(pointMultiplier())), _self.store.getRateFromCrowdsale(_crowdsale)));\n', '\n', '        return (_effectiveTokensNoDecimals, _overpaidEthWhenZeroDecimals);\n', '    }\n', '\n', '    /// @notice Checks if a crowdsale is trusted or fail.\n', '    /// @param _crowdsale the address of the crowdsale.\n', '    /// @return true if trusted.\n', '    function checkTrustedCrowdsale(Data storage _self, address _crowdsale) public view returns (bool) {\n', '        require(checkTrustedPlatform(_self, _self.crowdsaleToPlatform[_crowdsale]), "not trusted PF0");\n', '        require(_self.store.checkTrustedCrowdsaleInternal(_crowdsale), "not trusted CS1");\n', '\n', '        return true;   \n', '    }\n', '\n', '    /// @notice Checks if a AssetToken is trusted or fail.\n', '    /// @param _assetToken the address of the AssetToken.\n', '    /// @return true if trusted.\n', '    function checkTrustedAssetToken(Data storage _self, address _assetToken) public view returns (bool) {\n', '        //here just a minimal check for active (simple check on transfer).\n', '        require(_self.store.checkTrustedAssetToken(_assetToken), "untrusted AT");\n', '\n', '        return true;   \n', '    }\n', '\n', '    /// @notice Checks if a platform is certified or fail.\n', '    /// @param _platformWallet wallet of platform.\n', '    /// @return true if trusted.\n', '    function checkTrustedPlatform(Data storage _self, address _platformWallet) public view returns (bool) {\n', '        require(isTrustedPlatform(_self, _platformWallet), "not trusted PF3");\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Checks if a platform is certified.\n', '    /// @param _platformWallet wallet of platform.\n', '    /// @return true if certified.\n', '    function isTrustedPlatform(Data storage _self, address _platformWallet) public view returns (bool) {\n', '        return _self.trustedPlatform[_platformWallet];\n', '    }\n', '\n', '    /// @notice Add trusted AssetToken.\n', '    /// @param _ownerWallet requires CRWD for fees, receives ETH on successful campaign.\n', '    /// @param _rate the rate of tokens per basecurrency (currently EUR).\n', '    function addTrustedAssetToken(Data storage _self, address _ownerWallet, address _assetToken, uint256 _rate) public {\n', '        require(!_self.blockNew, "blocked. newest version?");\n', '\n', '        _self.store.addTrustedAssetTokenInternal(_ownerWallet, _assetToken, _rate);\n', '\n', '        emit AssetTokenAdded(msg.sender, _ownerWallet, _assetToken, _rate);\n', '    }\n', '\n', '    /// @notice assign a crowdsale to an AssetToken.\n', '    /// @param _assetToken the AssetToken being sold.\n', '    /// @param _crowdsale the crowdsale that takes ETH (if enabled) and triggers assignment of tokens.\n', '    /// @param _platformWallet the wallet of the platform. Fees are paid to this address.\n', '    function assignCrowdsale(Data storage _self, address _assetToken, address _crowdsale, address _platformWallet) public {\n', '        require(!_self.blockNew, "blocked. newest version?");\n', '        checkTrustedPlatform(_self, _platformWallet);\n', '        _self.store.assignCrowdsale(_assetToken, _crowdsale);\n', '        _self.crowdsaleToPlatform[_crowdsale] = _platformWallet;\n', '\n', '        emit CrowdsaleAssigned(msg.sender, _assetToken, _crowdsale, _platformWallet);\n', '    }\n', '\n', '    /// @notice Can change the state of an AssetToken (e.g. blacklist for legal reasons)\n', '    /// @param _assetToken the AssetToken to change state.\n', '    /// @param _active the state. True means active.\n', '    /// @return True if successful.\n', '    function changeActiveTrustedAssetToken(Data storage _self, address _assetToken, bool _active) public returns (bool) {\n', '        _self.store.changeActiveTrustedAssetToken(_assetToken, _active);\n', '        emit AssetTokenChangedActive(msg.sender, _assetToken, _active);\n', '    }\n', '\n', '    /// @notice Function to call on buy request.\n', '    /// @param _to beneficiary of tokens.\n', '    /// @param _amountInWei the invested ETH amount (unit WEI).\n', '    function buyFromCrowdsale(\n', '        Data storage _self, \n', '        address _to, \n', '        uint256 _amountInWei) \n', '        public returns (uint256 _tokensCreated, uint256 _overpaidRefund)\n', '    {\n', '        (uint256 effectiveTokensNoDecimals, uint256 overpaidEth) = convertEthToEurApplyRateGetTokenAmountFromCrowdsale(\n', '            _self, \n', '            msg.sender, \n', '            _amountInWei);\n', '\n', '        checkValidTokenAssignmentFromCrowdsale(_self, _to);\n', '        payFeeFromCrowdsale(_self, effectiveTokensNoDecimals);\n', '        _tokensCreated = doTokenAssignment(_self, _to, effectiveTokensNoDecimals, msg.sender);\n', '\n', '        return (_tokensCreated, overpaidEth);\n', '    }\n', '\n', '    /// @notice Assign tokens.\n', '    /// @dev Pure assignment without e.g. rate calculation.\n', '    /// @param _to beneficiary of tokens.\n', '    /// @param _tokensToMint amount of tokens beneficiary receives.\n', '    /// @return amount of tokens being created.\n', '    function assignFromCrowdsale(Data storage _self, address _to, uint256 _tokensToMint) public returns (uint256 _tokensCreated) {\n', '        checkValidTokenAssignmentFromCrowdsale(_self, _to);\n', '        payFeeFromCrowdsale(_self, _tokensToMint);\n', '\n', '        _tokensCreated = doTokenAssignment(_self, _to, _tokensToMint, msg.sender);\n', '\n', '        return _tokensCreated;\n', '    }\n', '\n', '    /// @dev Token assignment logic.\n', '    /// @param _to beneficiary of tokens.\n', '    /// @param _tokensToMint amount of tokens beneficiary receives.\n', '    /// @param _crowdsale being used.\n', '    /// @return amount of tokens being created.\n', '    function doTokenAssignment(\n', '        Data storage _self, \n', '        address _to, \n', '        uint256 _tokensToMint, \n', '        address _crowdsale) \n', '        private returns \n', '        (uint256 _tokensCreated)\n', '    {\n', '        address assetToken = _self.store.getAssetTokenOfCrowdsale(_crowdsale);\n', '    \n', '        require(assetToken != address(0), "assetTokenIs0");\n', '        ERC20Mintable(assetToken).mint(_to, _tokensToMint);\n', '\n', '        return _tokensToMint;\n', '    }\n', '\n', '    /// @notice Pay fee on calls from crowdsale.\n', '    /// @param _tokensToMint tokens being created.\n', '    function payFeeFromCrowdsale(Data storage _self, uint256 _tokensToMint) private {\n', '        if (_self.feesEnabled) {\n', '            address ownerAssetTokenWallet = _self.store.getAssetTokenOwnerWalletFromCrowdsale(msg.sender);\n', '            payFeeKnowingCrowdsale(_self, msg.sender, ownerAssetTokenWallet, _tokensToMint, "investorInvests");\n', '        }\n', '    }\n', '\n', '    /// @notice Check if token assignment is valid and e.g. crowdsale is trusted and investor KYC checked.\n', '    /// @param _to beneficiary.\n', '    function checkValidTokenAssignmentFromCrowdsale(Data storage _self, address _to) private {\n', '        require(checkTrustedCrowdsale(_self, msg.sender), "untrusted source1");\n', '\n', '        if (_self.whitelistEnabled) {\n', '            checkWhitelistedWallet(_self, _to);\n', '        }\n', '    }\n', '\n', '    /// @notice Pay fee on controller call from Crowdsale.\n', '    /// @param _crowdsale the calling Crowdsale contract.\n', '    /// @param _ownerAssetToken the AssetToken of the owner.\n', '    /// @param _tokensToMint the tokens being created.\n', '    /// @param _feeName the name of the fee (key in mapping).\n', '    function payFeeKnowingCrowdsale(\n', '        Data storage _self, \n', '        address _crowdsale, \n', '        address _ownerAssetToken, \n', '        uint256 _tokensToMint, //tokensToMint requires precalculations and is base for fees\n', '        bytes32 _feeName)\n', '        private\n', '    {\n', '        address platform = _self.crowdsaleToPlatform[_crowdsale];\n', '\n', '        uint256 feePromilleRootPlatform = getFeeKnowingCrowdsale(\n', '            _self, \n', '            _crowdsale, \n', '            getFeeTableAddressForPlatform(_self, _self.rootPlatformAddress),\n', '            _tokensToMint, \n', '            false, \n', '            _feeName);\n', '\n', '        payWithCrwd(_self, _ownerAssetToken, _self.rootPlatformAddress, feePromilleRootPlatform);\n', '\n', '        if(platform != _self.rootPlatformAddress) {\n', '            address feeTable = getFeeTableAddressForPlatform(_self, platform);\n', '            require(feeTable != address(0), "FeeTbl 0 addr");\n', '            uint256 feePromillePlatform = getFeeKnowingCrowdsale(_self, _crowdsale, feeTable, _tokensToMint, false, _feeName);\n', '            payWithCrwd(_self, _ownerAssetToken, platform, feePromillePlatform);\n', '        }\n', '    }\n', '\n', '    /// @notice Pay fee on controller call from AssetToken.\n', '    /// @param _assetToken the calling AssetToken contract.\n', '    /// @param _initiator the initiator passed through as parameter by AssetToken.\n', '    /// @param _tokensToMint the tokens being handled.\n', '    /// @param _feeName the name of the fee (key in mapping).\n', '    function payFeeKnowingAssetToken(\n', '        Data storage _self, \n', '        address _assetToken, \n', '        address _initiator, \n', '        uint256 _tokensToMint, //tokensToMint requires precalculations and is base for fees\n', '        bytes32 _feeName) \n', '        public \n', '    {\n', '        uint256 feePromille = getFeeKnowingAssetToken(\n', '            _self, \n', '            _assetToken, \n', '            _initiator, \n', '            _tokensToMint, \n', '            _feeName);\n', '\n', '        payWithCrwd(_self, _initiator, _self.rootPlatformAddress, feePromille);\n', '    }\n', '\n', '    /// @dev this function in the end does the fee payment in CRWD.\n', '    function payWithCrwd(Data storage _self, address _from, address _to, uint256 _value) private {\n', '        if(_value > 0 && _from != _to) {\n', '            ERC20Mintable(_self.crwdToken).transferFrom(_from, _to, _value);\n', '            emit FeesPaid(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    /// @notice Current conversion of ETH to EUR via oracle.\n', '    /// @param _weiAmount the ETH amount (uint WEI).\n', '    /// @return amount converted in euro.\n', '    function convertEthToEur(Data storage _self, uint256 _weiAmount) public view returns (uint256) {\n', '        require(_self.exchangeRateOracle != address(0), "no oracle");\n', '        return IExchangeRateOracle(_self.exchangeRateOracle).convertTT("ETH", "EUR", _weiAmount);\n', '    }\n', '\n', '    /// @notice Current conversion of EUR to ETH via oracle.\n', '    /// @param _eurAmount the EUR amount\n', '    /// @return amount converted in eth (formatted like WEI)\n', '    function convertEurToEth(Data storage _self, uint256 _eurAmount) public view returns (uint256) {\n', '        require(_self.exchangeRateOracle != address(0), "no oracle");\n', '        return IExchangeRateOracle(_self.exchangeRateOracle).convertTT("EUR", "ETH", _eurAmount);\n', '    }\n', '\n', '    /// @notice Get fee that needs to be paid for certain Crowdsale and FeeName.\n', '    /// @param _crowdsale the Crowdsale being used.\n', '    /// @param _feeTableAddr the address of the feetable.\n', '    /// @param _amountInTokensOrEth the amount in tokens or pure ETH when conversion parameter true.\n', '    /// @param _amountRequiresConversion when true amount parameter is converted from ETH into tokens.\n', '    /// @param _feeName the name of the fee being paid.\n', '    /// @return amount of fees that would/will be paid.\n', '    function getFeeKnowingCrowdsale(\n', '        Data storage _self,\n', '        address _crowdsale, \n', '        address _feeTableAddr, \n', '        uint256 _amountInTokensOrEth,\n', '        bool _amountRequiresConversion,\n', '        bytes32 _feeName) \n', '        public view returns (uint256) \n', '    {\n', '        uint256 tokens = _amountInTokensOrEth;\n', '\n', '        if(_amountRequiresConversion) {\n', '            (tokens, ) = convertEthToEurApplyRateGetTokenAmountFromCrowdsale(_self, _crowdsale, _amountInTokensOrEth);\n', '        }\n', '        \n', '        FeeTable feeTable = FeeTable(_feeTableAddr);\n', '        address assetTokenOfCrowdsale = _self.store.getAssetTokenOfCrowdsale(_crowdsale);\n', '\n', '        return feeTable.getFeeFor(_feeName, assetTokenOfCrowdsale, tokens, _self.exchangeRateOracle);\n', '    }\n', '\n', '    /// @notice Get fee that needs to be paid for certain AssetToken and FeeName.\n', '    /// @param _assetToken the AssetToken being used.\n', '    /// @param _tokenAmount the amount in tokens.\n', '    /// @param _feeName the name of the fee being paid.\n', '    /// @return amount of fees that would/will be paid.\n', '    function getFeeKnowingAssetToken(\n', '        Data storage _self, \n', '        address _assetToken, \n', '        address /*_from*/, \n', '        uint256 _tokenAmount, \n', '        bytes32 _feeName) \n', '        public view returns (uint256) \n', '    {\n', '        FeeTable feeTable = getFeeTableForPlatform(_self, _self.rootPlatformAddress);\n', '        return feeTable.getFeeFor(_feeName, _assetToken, _tokenAmount, _self.exchangeRateOracle);\n', '    }\n', '\n', '    /// @notice Set CRWD token address (e.g. for fees).\n', '    /// @param _crwdToken the CRWD token address.\n', '    function setCrwdTokenAddress(Data storage _self, address _crwdToken) public {\n', '        _self.crwdToken = _crwdToken;\n', '        emit CrwdTokenAddressChanged(_crwdToken);\n', '    }\n', '\n', '    /// @notice set platform address to trusted. A platform can receive fees.\n', '    /// @param _platformWallet the wallet that will receive fees.\n', '    /// @param _trusted true means trusted and false means not (=default).\n', '    function setTrustedPlatform(Data storage _self, address _platformWallet, bool _trusted) public {\n', '        setTrustedPlatformInternal(_self, _platformWallet, _trusted, false);\n', '    }\n', '\n', '    /// @dev set trusted platform logic\n', '    /// @param _platformWallet the wallet that will receive fees.\n', '    /// @param _trusted true means trusted and false means not (=default).\n', '    /// @param _isRootPlatform true means that the given address is the root platform (here mainly used to save info into event).\n', '    function setTrustedPlatformInternal(Data storage _self, address _platformWallet, bool _trusted, bool _isRootPlatform) private {\n', '        require(_self.rootPlatformAddress != address(0), "no rootPF");\n', '\n', '        _self.trustedPlatform[_platformWallet] = _trusted;\n', '        \n', '        if(_trusted && !_self.onceTrustedPlatform[msg.sender]) {\n', '            _self.onceTrustedPlatform[_platformWallet] = true;\n', '            FeeTable ft = new FeeTable(_self.rootPlatformAddress);\n', '            _self.platformToFeeTable[_platformWallet] = address(ft);\n', '        }\n', '\n', '        emit PlatformTrustChanged(_platformWallet, _trusted, _isRootPlatform);\n', '    }\n', '\n', '    /// @notice Set root platform address. Root platform address can receive fees (independent of which Crowdsale/AssetToken).\n', '    /// @param _rootPlatformWallet wallet of root platform.\n', '    function setRootPlatform(Data storage _self, address _rootPlatformWallet) public {\n', '        _self.rootPlatformAddress = _rootPlatformWallet;\n', '        emit RootPlatformChanged(_rootPlatformWallet);\n', '\n', '        setTrustedPlatformInternal(_self, _rootPlatformWallet, true, true);\n', '    }\n', '\n', '    /// @notice Set rate of AssetToken.\n', '    /// @dev Rate is from BaseCurrency (currently EUR). E.g. rate 2 means 2 tokens per 1 EUR.\n', '    /// @param _assetToken the regarding AssetToken the rate should be applied on.\n', '    /// @param _rate the rate.\n', '    function setAssetTokenRate(Data storage _self, address _assetToken, uint256 _rate) public {\n', '        _self.store.setAssetTokenRate(_assetToken, _rate);\n', '        emit AssetTokenRateChanged(_assetToken, _rate);\n', '    }\n', '\n', '    /// @notice If this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    /// @param _foreignTokenAddress token where contract has balance.\n', '    /// @param _to the beneficiary.\n', '    function rescueToken(Data storage /*_self*/, address _foreignTokenAddress, address _to) public\n', '    {\n', '        ERC20Mintable(_foreignTokenAddress).transfer(_to, ERC20(_foreignTokenAddress).balanceOf(address(this)));\n', '    }\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '    event AssetTokenAdded(address indexed initiator, address indexed wallet, address indexed assetToken, uint256 rate);\n', '    event AssetTokenChangedActive(address indexed initiator, address indexed assetToken, bool active);\n', '    event PlatformTrustChanged(address indexed platformWallet, bool trusted, bool isRootPlatform);\n', '    event CrwdTokenAddressChanged(address indexed crwdToken);\n', '    event AssetTokenRateChanged(address indexed assetToken, uint256 rate);\n', '    event RootPlatformChanged(address indexed _rootPlatformWalletAddress);\n', '    event CrowdsaleAssigned(address initiator, address indexed assetToken, address indexed crowdsale, address platformWallet);\n', '    event ExchangeRateOracleSet(address indexed initiator, address indexed oracleAddress);\n', '    event FeesPaid(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/controller/0_library/LibraryHolder.sol\n', '\n', '/** @title LibraryHolder holds libraries used in inheritance bellow. */\n', 'contract LibraryHolder {\n', '    using ControllerL for ControllerL.Data;\n', '\n', '///////////////////\n', '// Variables\n', '///////////////////\n', '\n', '    ControllerL.Data internal controllerData;\n', '}\n', '\n', '// File: contracts/controller/1_permissions/PermissionHolder.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '\n', '/** @title PermissionHolder role permissions used in inheritance bellow. */\n', 'contract PermissionHolder  is AssetTokenAdministratorRole, At2CsConnectorRole, LibraryHolder {\n', '\n', '}\n', '\n', '// File: contracts/controller/2_provider/MainInfoProvider.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title MainInfoProvider holding simple getters and setters and events without much logic. */\n', 'contract MainInfoProvider is PermissionHolder {\n', '    \n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event AssetTokenAdded(address indexed initiator, address indexed wallet, address indexed assetToken, uint256 rate);\n', '    event AssetTokenChangedActive(address indexed initiator, address indexed assetToken, bool active);\n', '    event CrwdTokenAddressChanged(address indexed crwdToken);\n', '    event ExchangeRateOracleSet(address indexed initiator, address indexed oracleAddress);\n', '    event AssetTokenRateChanged(address indexed assetToken, uint256 rate);\n', '    event RootPlatformChanged(address indexed _rootPlatformWalletAddress);\n', '    event PlatformTrustChanged(address indexed platformWallet, bool trusted, bool isRootPlatform);\n', '    event WhitelistSet(address indexed initiator, address indexed whitelistAddress);\n', '    event CrowdsaleAssigned(address initiator, address indexed assetToken, address indexed crowdsale, address platformWallet);\n', '    event FeesPaid(address indexed from, address indexed to, uint256 value);\n', '    event TokenAssignment(address indexed to, uint256 tokensToMint, address indexed crowdsale, bytes8 tag);\n', '\n', '///////////////////\n', '// Methods (simple getters/setters ONLY)\n', '///////////////////\n', '\n', '    /// @notice Set CRWD token address (e.g. for fees).\n', '    /// @param _crwdToken the CRWD token address.\n', '    function setCrwdTokenAddress(address _crwdToken) public onlyRootPlatformAdministrator {\n', '        controllerData.setCrwdTokenAddress(_crwdToken);\n', '    }\n', '\n', '    /// @notice Set exchange rate oracle address.\n', '    /// @param _oracleAddress the address of the ExchangeRateOracle.\n', '    function setOracle(address _oracleAddress) public onlyRootPlatformAdministrator {\n', '        controllerData.setExchangeRateOracle(_oracleAddress);\n', '    }\n', '\n', '    /// @notice Get FeeTable for platform.\n', '    /// @param _platform platform to find FeeTable for.\n', '    /// @return address of FeeTable of platform.\n', '    function getFeeTableAddressForPlatform(address _platform) public view returns (address) {\n', '        return controllerData.getFeeTableAddressForPlatform(_platform);\n', '    }   \n', '\n', '    /// @notice Set rate of AssetToken.\n', '    /// @dev Rate is from BaseCurrency (currently EUR). E.g. rate 2 means 2 tokens per 1 EUR.\n', '    /// @param _assetToken the regarding AssetToken the rate should be applied on.\n', '    /// @param _rate the rate. Unit is WAD (decimal number with 18 digits, so rate of x WAD is x*1e18).\n', '    function setAssetTokenRate(address _assetToken, uint256 _rate) public onlyRootPlatformAdministrator {\n', '        controllerData.setAssetTokenRate(_assetToken, _rate);\n', '    }\n', '\n', '    /// @notice Set root platform address. Root platform address can receive fees (independent of which Crowdsale/AssetToken).\n', '    /// @param _rootPlatformWallet wallet of root platform.\n', '    function setRootPlatform(address _rootPlatformWallet) public onlyRootPlatformAdministrator {\n', '        controllerData.setRootPlatform(_rootPlatformWallet);\n', '    }\n', '\n', "    /// @notice Root platform wallet (receives fees according to it's FeeTable regardless of which Crowdsale/AssetToken)\n", '    function getRootPlatform() public view returns (address) {\n', '        return controllerData.rootPlatformAddress;\n', '    }\n', '    \n', '    /// @notice Set platform address to trusted. A platform can receive fees.\n', '    /// @param _platformWallet the wallet that will receive fees.\n', '    /// @param _trusted true means trusted and false means not (=default).\n', '    function setTrustedPlatform(address _platformWallet, bool _trusted) public onlyRootPlatformAdministrator {\n', '        controllerData.setTrustedPlatform(_platformWallet, _trusted);\n', '    }\n', '\n', '    /// @notice Is trusted platform.\n', '    /// @param _platformWallet platform wallet that recieves fees.\n', '    /// @return true if trusted.\n', '    function isTrustedPlatform(address _platformWallet) public view returns (bool) {\n', '        return controllerData.trustedPlatform[_platformWallet];\n', '    }\n', '\n', '    /// @notice Get platform of crowdsale.\n', '    /// @param _crowdsale the crowdsale to get platfrom from.\n', '    /// @return address of owning platform.\n', '    function getPlatformOfCrowdsale(address _crowdsale) public view returns (address) {\n', '        return controllerData.crowdsaleToPlatform[_crowdsale];\n', '    }\n', '\n', '    /// @notice Set whitelist contrac address.\n', '    /// @param _whitelistAddress the whitelist address.\n', '    function setWhitelistContract(address _whitelistAddress) public onlyRootPlatformAdministrator {\n', '        controllerData.whitelist = _whitelistAddress;\n', '\n', '        emit WhitelistSet(msg.sender, _whitelistAddress);\n', '    }\n', '\n', '    /// @notice Get address of generic storage that survives an upgrade.\n', '    /// @return address of storage.\n', '    function getStorageAddress() public view returns (address) {\n', '        return controllerData.getStorageAddress();\n', '    }\n', '\n', '    /// @notice Block new connections between AssetToken and Crowdsale (e.g. on upgrade)\n', '    /// @param _isBlockNewActive true if no new AssetTokens or Crowdsales can be added to controller.\n', '    function setBlockNewState(bool _isBlockNewActive) public onlyRootPlatformAdministrator {\n', '        controllerData.blockNew = _isBlockNewActive;\n', '    }\n', '\n', '    /// @notice Gets state of block new.\n', '    /// @return true if no new AssetTokens or Crowdsales can be added to controller.\n', '    function getBlockNewState() public view returns (bool) {\n', '        return controllerData.blockNew;\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManageAssetToken.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '/** @title ManageAssetToken holds logic functions managing AssetTokens. */\n', 'contract ManageAssetToken  is MainInfoProvider {\n', '    using SafeMath for uint256;\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Add trusted AssetToken.\n', '    /// @param _ownerWallet requires CRWD for fees, receives ETH on successful campaign.\n', '    /// @param _rate the rate of tokens per basecurrency (currently EUR).\n', '    function addTrustedAssetToken(address _ownerWallet, address _assetToken, uint256 _rate) \n', '        public \n', '        onlyAssetTokenAdministrator \n', '    {\n', '        controllerData.addTrustedAssetToken(_ownerWallet, _assetToken, _rate);\n', '    }\n', '\n', '    /// @notice Checks if a AssetToken is trusted.\n', '    /// @param _assetToken the address of the AssetToken.\n', '    function checkTrustedAssetToken(address _assetToken) public view returns (bool) {\n', '        return controllerData.checkTrustedAssetToken(_assetToken);\n', '    }\n', '\n', '    /// @notice Can change the state of an AssetToken (e.g. blacklist for legal reasons)\n', '    /// @param _assetToken the AssetToken to change state.\n', '    /// @param _active the state. True means active.\n', '    /// @return True if successful.\n', '    function changeActiveTrustedAssetToken(address _assetToken, bool _active) public onlyRootPlatformAdministrator returns (bool) {\n', '        return controllerData.changeActiveTrustedAssetToken(_assetToken, _active);\n', '    }\n', '\n', '    /// @notice Get fee that needs to be paid for certain AssetToken and FeeName.\n', '    /// @param _assetToken the AssetToken being used.\n', '    /// @param _tokenAmount the amount in tokens.\n', '    /// @param _feeName the name of the fee being paid.\n', '    /// @return amount of fees that would/will be paid.\n', '    function getFeeKnowingAssetToken(\n', '        address _assetToken, \n', '        address _from, \n', '        uint256 _tokenAmount, \n', '        bytes32 _feeName) \n', '        public view returns (uint256)\n', '    {\n', '        return controllerData.getFeeKnowingAssetToken(_assetToken, _from, _tokenAmount, _feeName);\n', '    }\n', '\n', '    /// @notice Convert eth amount into base currency (EUR), apply exchange rate via oracle, apply rate for AssetToken.\n', '    /// @param _crowdsale the crowdsale address.\n', '    /// @param _amountInWei the amount desired to be converted into tokens.\n', '    function convertEthToTokenAmount(address _crowdsale, uint256 _amountInWei) public view returns (uint256 _tokens) {\n', '        (uint256 tokens, ) = controllerData.convertEthToEurApplyRateGetTokenAmountFromCrowdsale(_crowdsale, _amountInWei);\n', '        return tokens;\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManageFee.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title ManageAssetToken holds logic functions managing Fees. */\n', 'contract ManageFee is MainInfoProvider {\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Pay fee on controller call from AssetToken.\n', '    /// @param _assetToken the calling AssetToken contract.\n', '    /// @param _from the initiator passed through as parameter by AssetToken.\n', '    /// @param _amount the tokens being handled.\n', '    /// @param _feeName the name of the fee (key in mapping).\n', '    function payFeeKnowingAssetToken(address _assetToken, address _from, uint256 _amount, bytes32 _feeName) internal {\n', '        controllerData.payFeeKnowingAssetToken(_assetToken, _from, _amount, _feeName);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManageCrowdsale.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '/** @title ManageAssetToken holds logic functions managing Crowdsales. */\n', 'contract ManageCrowdsale is MainInfoProvider {\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice assign a crowdsale to an AssetToken.\n', '    /// @param _assetToken the AssetToken being sold.\n', '    /// @param _crowdsale the crowdsale that takes ETH (if enabled) and triggers assignment of tokens.\n', '    /// @param _platformWallet the wallet of the platform. Fees are paid to this address.\n', '    function assignCrowdsale(address _assetToken, address _crowdsale, address _platformWallet) \n', '        public \n', '        onlyAt2CsConnector \n', '    {\n', '        controllerData.assignCrowdsale(_assetToken, _crowdsale, _platformWallet);\n', '    }\n', '\n', '    /// @notice Checks if a crowdsale is trusted.\n', '    /// @param _crowdsale the address of the crowdsale.\n', '    function checkTrustedCrowdsale(address _crowdsale) public view returns (bool) {\n', '        return controllerData.checkTrustedCrowdsale(_crowdsale);\n', '    }\n', '\n', '    /// @notice Get fee that needs to be paid for certain Crowdsale and FeeName.\n', '    /// @param _crowdsale the Crowdsale being used.\n', '    /// @param _feeTableAddr the address of the feetable.\n', '    /// @param _amountInTokensOrEth the amount in tokens or pure ETH when conversion parameter true.\n', '    /// @param _amountRequiresConversion when true amount parameter is converted from ETH into tokens.\n', '    /// @param _feeName the name of the fee being paid.\n', '    /// @return amount of fees that would/will be paid.\n', '    function getFeeKnowingCrowdsale(\n', '        address _crowdsale, \n', '        address _feeTableAddr, \n', '        uint256 _amountInTokensOrEth, \n', '        bool _amountRequiresConversion,\n', '        bytes32 _feeName) \n', '        public view returns (uint256) \n', '    {\n', '        return controllerData.getFeeKnowingCrowdsale(_crowdsale, _feeTableAddr, _amountInTokensOrEth, _amountRequiresConversion, _feeName);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManagePlatform.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '/** @title ManageAssetToken holds logic functions managing platforms. */\n', 'contract ManagePlatform  is MainInfoProvider {\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Checks if a crowdsale is trusted or fail.\n', '    /// @param _platformWallet the platform wallet.\n', '    /// @return true if trusted.\n', '    function checkTrustedPlatform(address _platformWallet) public view returns (bool) {\n', '        return controllerData.checkTrustedPlatform(_platformWallet);\n', '    }\n', '\n', '    /// @notice Is a platform wallet trusted.\n', '    /// @return true if trusted.\n', '    function isTrustedPlatform(address _platformWallet) public view returns (bool) {\n', '        return controllerData.trustedPlatform[_platformWallet];\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManageWhitelist.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '/** @title ManageAssetToken holds logic functions managing Whitelist and KYC. */\n', 'contract ManageWhitelist  is MainInfoProvider {\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice Check if a wallet is whitelisted or fail. Also considers auto extend (if enabled).\n', '    /// @param _wallet the wallet to check.\n', '    function checkWhitelistedWallet(address _wallet) public returns (bool) {\n', '        controllerData.checkWhitelistedWallet(_wallet);\n', '    }\n', '\n', '    /// @notice Check if a wallet is whitelisted.\n', '    /// @param _wallet the wallet to check.\n', '    /// @return true if whitelisted.\n', '    function isWhitelistedWallet(address _wallet) public view returns (bool) {\n', '        controllerData.isWhitelistedWallet(_wallet);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/3_manage/ManagerHolder.sol\n', '\n', '/*\n', '    Copyright 2018, CONDA\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '/** @title ManagerHolder combining all managers into single contract to be inherited. */\n', 'contract ManagerHolder is \n', '    ManageAssetToken, \n', '    ManageFee, \n', '    ManageCrowdsale,\n', '    ManagePlatform,\n', '    ManageWhitelist\n', '{\n', '}\n', '\n', '// File: contracts/controller/interface/ICRWDController.sol\n', '\n', 'interface ICRWDController {\n', '    function transferParticipantsVerification(address _underlyingCurrency, address _from, address _to, uint256 _tokenAmount) external returns (bool); //from AssetToken\n', '    function buyFromCrowdsale(address _to, uint256 _amountInWei) external returns (uint256 _tokensCreated, uint256 _overpaidRefund); //from Crowdsale\n', '    function assignFromCrowdsale(address _to, uint256 _tokenAmount, bytes8 _tag) external returns (uint256 _tokensCreated); //from Crowdsale\n', '    function calcTokensForEth(uint256 _amountInWei) external view returns (uint256 _tokensWouldBeCreated); //from Crowdsale\n', '}\n', '\n', '// File: contracts/controller/CRWDController.sol\n', '\n', '/** @title CRWDController main contract and n-th child of multi-level inheritance. */\n', 'contract CRWDController is ManagerHolder, ICRWDController {\n', '\n', '///////////////////\n', '// Events\n', '///////////////////\n', '\n', '    event GlobalConfigurationChanged(bool feesEnabled, bool whitelistEnabled);\n', '\n', '///////////////////\n', '// Constructor\n', '///////////////////\n', '\n', '    constructor(bool _feesEnabled, bool _whitelistEnabled, address _rootPlatformAddress, address _storage) public {\n', '        controllerData.assignStore(_storage);\n', '        \n', '        setRootPlatform(_rootPlatformAddress);\n', '\n', '        configure(_feesEnabled, _whitelistEnabled);\n', '    }\n', '\n', '///////////////////\n', '// Functions\n', '///////////////////\n', '\n', '    /// @notice configure global flags.\n', '    /// @param _feesEnabled global flag fees enabled.\n', '    /// @param _whitelistEnabled global flag whitelist check enabled.\n', '    function configure(bool _feesEnabled, bool _whitelistEnabled) public onlyRootPlatformAdministrator {\n', '        controllerData.feesEnabled = _feesEnabled;\n', '        controllerData.whitelistEnabled = _whitelistEnabled;\n', '\n', '        emit GlobalConfigurationChanged(_feesEnabled, _whitelistEnabled);\n', '    }\n', '\n', '    /// @notice Called from AssetToken on transfer for whitelist check.\n', '    /// @param _from the original initiator passed through.\n', '    /// @param _to the receiver of the tokens.\n', '    /// @param _tokenAmount the amount of tokens to be transfered.\n', '    function transferParticipantsVerification(address /*_underlyingCurrency*/, address _from, address _to, uint256 _tokenAmount) public returns (bool) {\n', '\n', '        if (controllerData.whitelistEnabled) {\n', '            checkWhitelistedWallet(_to); //receiver must be whitelisted\n', '        }\n', '\n', '        // Caller must be a trusted AssetToken. Otherwise anyone could make investor pay fees for no reason. \n', '        require(checkTrustedAssetToken(msg.sender), "untrusted");\n', '\n', '        if (controllerData.feesEnabled) {\n', '            payFeeKnowingAssetToken(msg.sender, _from, _tokenAmount, "clearTransferFunds");\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Called from Crowdsale on buy token action (paid via Ether).\n', '    /// @param _to the beneficiary of the tokens (passed through from Crowdsale).\n', '    /// @param _amountInWei the ETH amount (unit WEI).\n', '    function buyFromCrowdsale(address _to, uint256 _amountInWei) public returns (uint256 _tokensCreated, uint256 _overpaidRefund) {\n', '        return controllerData.buyFromCrowdsale(_to, _amountInWei);\n', '    }\n', '\n', '    /// @notice Calculate how many tokens will be received per Ether.\n', '    /// @param _amountInWei the ETH amount (unit WEI).\n', '    /// @return tokens that would be created.\n', '    function calcTokensForEth(uint256 _amountInWei) external view returns (uint256 _tokensWouldBeCreated) {\n', '        require(checkTrustedCrowdsale(msg.sender), "untrusted source2");\n', '\n', '        return convertEthToTokenAmount(msg.sender, _amountInWei);\n', '    }\n', '\n', '    /// @notice Called from Crowdsale via (semi-)automatic process on off-chain payment.\n', '    /// @param _to the beneficiary of the tokens.\n', '    /// @param _tokenAmount the amount of tokens to be minted/assigned.\n', '    /// @return tokens created.\n', '    function assignFromCrowdsale(address _to, uint256 _tokenAmount, bytes8 _tag) external returns (uint256 _tokensCreated) {\n', '        _tokensCreated = controllerData.assignFromCrowdsale(_to, _tokenAmount);\n', '\n', '        emit TokenAssignment(_to, _tokenAmount, msg.sender, _tag);\n', '\n', '        return _tokensCreated;\n', '    }\n', '\n', '////////////////\n', '// Rescue Tokens \n', '////////////////\n', '\n', '    /// @dev Can rescue tokens accidentally assigned to this contract\n', '    /// @param _foreignTokenAddress The address from which the balance will be retrieved\n', '    /// @param _to beneficiary\n', '    function rescueToken(address _foreignTokenAddress, address _to)\n', '    public\n', '    onlyRootPlatformAdministrator\n', '    {\n', '        controllerData.rescueToken(_foreignTokenAddress, _to);\n', '    }\n', '}']