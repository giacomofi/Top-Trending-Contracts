['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public coinvest;\n', '  mapping (address => bool) public admins;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    coinvest = msg.sender;\n', '    admins[owner] = true;\n', '    admins[coinvest] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier coinvestOrOwner() {\n', '      require(msg.sender == coinvest || msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier onlyAdmin() {\n', '      require(admins[msg.sender]);\n', '      _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @dev Changes the Coinvest wallet that will receive funds from investment contract.\n', '   * @param _newCoinvest The address of the new wallet.\n', '  **/\n', '  function transferCoinvest(address _newCoinvest) \n', '    external\n', '    onlyOwner\n', '  {\n', '    require(_newCoinvest != address(0));\n', '    coinvest = _newCoinvest;\n', '  }\n', '\n', '  /**\n', '   * @dev Used to add admins who are allowed to add funds to the investment contract and change gas price.\n', '   * @param _user The address of the admin to add or remove.\n', '   * @param _status True to add the user, False to remove the user.\n', '  **/\n', '  function alterAdmin(address _user, bool _status)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(_user != address(0));\n', '    require(_user != coinvest);\n', '    admins[_user] = _status;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', '/**\n', ' * @title Bank\n', ' * @dev Bank holds all user funds so Investment contract can easily be replaced.\n', '**/\n', 'contract Bank is Ownable {\n', '    \n', '    address public investmentAddr;      // Investment contract address used to allow withdrawals\n', '    address public coinToken;           // COIN token address.\n', '    address public cashToken;           // CASH token address.\n', '\n', '    /**\n', '     * @param _coinToken address of the Coinvest token.\n', '     * @param _cashToken address of the CASH token.\n', '    **/\n', '    constructor(address _coinToken, address _cashToken)\n', '      public\n', '    {\n', '        coinToken = _coinToken;\n', '        cashToken = _cashToken;\n', '    }\n', '\n', '/** ****************************** Only Investment ****************************** **/\n', '    \n', '    /**\n', '     * @dev Investment contract needs to be able to disburse funds to users.\n', '     * @param _to Address to send funds to.\n', '     * @param _value Amount of funds to send to _to.\n', '     * @param _isCoin True if the crypto to be transferred is COIN, false if it is CASH.\n', '    **/\n', '    function transfer(address _to, uint256 _value, bool _isCoin)\n', '      external\n', '    returns (bool success)\n', '    {\n', '        require(msg.sender == investmentAddr);\n', '\n', '        ERC20Interface token;\n', '        if (_isCoin) token = ERC20Interface(coinToken);\n', '        else token = ERC20Interface(cashToken);\n', '\n', '        require(token.transfer(_to, _value));\n', '        return true;\n', '    }\n', '    \n', '/** ******************************* Only Owner ********************************** **/\n', '    \n', '    /**\n', '     * @dev Owner may change the investment address when contracts are being updated.\n', '     * @param _newInvestment The address of the new investment contract.\n', '    **/\n', '    function changeInvestment(address _newInvestment)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_newInvestment != address(0));\n', '        investmentAddr = _newInvestment;\n', '    }\n', '    \n', '/** ****************************** Only Coinvest ******************************* **/\n', '\n', '    /**\n', '     * @dev Allow the owner to take non-COIN Ether or tokens off of this contract if they are accidentally sent.\n', '     * @param _tokenContract The address of the token to withdraw (0x0 if Ether)--cannot be COIN.\n', '    **/\n', '    function tokenEscape(address _tokenContract)\n', '      external\n', '      coinvestOrOwner\n', '    {\n', '        require(_tokenContract != coinToken && _tokenContract != cashToken);\n', '        if (_tokenContract == address(0)) coinvest.transfer(address(this).balance);\n', '        else {\n', '            ERC20Interface lostToken = ERC20Interface(_tokenContract);\n', '        \n', '            uint256 stuckTokens = lostToken.balanceOf(address(this));\n', '            lostToken.transfer(coinvest, stuckTokens);\n', '        }    \n', '    }\n', '\n', '}']