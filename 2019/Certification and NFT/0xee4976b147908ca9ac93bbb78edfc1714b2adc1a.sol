['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Contactable.sol\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '// File: monetha-utility-contracts/contracts/Restricted.sol\n', '\n', '/** @title Restricted\n', ' *  Exposes onlyMonetha modifier\n', ' */\n', 'contract Restricted is Ownable {\n', '\n', '    //MonethaAddress set event\n', '    event MonethaAddressSet(\n', '        address _address,\n', '        bool _isMonethaAddress\n', '    );\n', '\n', '    mapping (address => bool) public isMonethaAddress;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n', '     */\n', '    modifier onlyMonetha() {\n', '        require(isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        emit MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '}\n', '\n', '// File: monetha-utility-contracts/contracts/SafeDestructible.sol\n', '\n', '/**\n', ' * @title SafeDestructible\n', ' * Base contract that can be destroyed by owner.\n', ' * Can be destructed if there are no funds on contract balance.\n', ' */\n', 'contract SafeDestructible is Ownable {\n', '    function destroy() onlyOwner public {\n', '        require(address(this).balance == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: contracts/GenericERC20.sol\n', '\n', '/**\n', '* @title GenericERC20 interface\n', '*/\n', 'contract GenericERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function decimals() public view returns(uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '        \n', '    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/MerchantWallet.sol\n', '\n', '/**\n', ' *  @title MerchantWallet\n', ' *  Serves as a public Merchant profile with merchant profile info,\n', ' *      payment settings and latest reputation value.\n', ' *  Also MerchantWallet accepts payments for orders.\n', ' */\n', '\n', 'contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n', '\n', '    string constant VERSION = "0.5";\n', '\n', "    /// Address of merchant's account, that can withdraw from wallet\n", '    address public merchantAccount;\n', '\n', "    /// Address of merchant's fund address.\n", '    address public merchantFundAddress;\n', '\n', '    /// Unique Merchant identifier hash\n', '    bytes32 public merchantIdHash;\n', '\n', '    /// profileMap stores general information about the merchant\n', '    mapping (string=>string) profileMap;\n', '\n', '    /// paymentSettingsMap stores payment and order settings for the merchant\n', '    mapping (string=>string) paymentSettingsMap;\n', '\n', '    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n', '    mapping (string=>uint32) compositeReputationMap;\n', '\n', '    /// number of last digits in compositeReputation for fractional part\n', '    uint8 public constant REPUTATION_DECIMALS = 4;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by merchant account.\n', '     */\n', '    modifier onlyMerchant() {\n', '        require(msg.sender == merchantAccount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Fund Address should always be Externally Owned Account and not a contract.\n', '     */\n', '    modifier isEOA(address _fundAddress) {\n', '        uint256 _codeLength;\n', '        assembly {_codeLength := extcodesize(_fundAddress)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n', '     */\n', '    modifier onlyMerchantOrMonetha() {\n', '        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n", '     *  @param _merchantId Merchant identifier\n', "     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n", '     */\n', '    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n', '        require(_merchantAccount != 0x0);\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantAccount = _merchantAccount;\n', '        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n', '\n', '        merchantFundAddress = _fundAddress;\n', '    }\n', '\n', '    /**\n', '     *  Accept payment from MonethaGateway\n', '     */\n', '    function () external payable {\n', '    }\n', '\n', '    /**\n', '     *  @return profile info by string key\n', '     */\n', '    function profile(string key) external constant returns (string) {\n', '        return profileMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return payment setting by string key\n', '     */\n', '    function paymentSettings(string key) external constant returns (string) {\n', '        return paymentSettingsMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return composite reputation value by string key\n', '     */\n', '    function compositeReputation(string key) external constant returns (uint32) {\n', '        return compositeReputationMap[key];\n', '    }\n', '\n', '    /**\n', '     *  Set profile info by string key\n', '     */\n', '    function setProfile(\n', '        string profileKey,\n', '        string profileValue,\n', '        string repKey,\n', '        uint32 repValue\n', '    )\n', '        external onlyOwner\n', '    {\n', '        profileMap[profileKey] = profileValue;\n', '\n', '        if (bytes(repKey).length != 0) {\n', '            compositeReputationMap[repKey] = repValue;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  Set payment setting by string key\n', '     */\n', '    function setPaymentSettings(string key, string value) external onlyOwner {\n', '        paymentSettingsMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Set composite reputation value by string key\n', '     */\n', '    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n', '        compositeReputationMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Allows withdrawal of funds to beneficiary address\n', '     */\n', '    function doWithdrawal(address beneficiary, uint amount) private {\n', '        require(beneficiary != 0x0);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address\n', '     */\n', '    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to withdraw funds to it's own account\n", '     */\n', '    function withdraw(uint amount) external onlyMerchant {\n', '        withdrawTo(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n', '     */\n', '    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n', '        doWithdrawal(depositAccount, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n', '     */\n', '    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n', '        require (address(this).balance >= min_amount);\n', '        doWithdrawal(depositAccount, address(this).balance);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n', '     */\n', '    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n', '        require(_tokenAddress != address(0));\n', '        \n', '        uint balance = GenericERC20(_tokenAddress).balanceOf(address(this));\n', '        \n', '        require(balance >= _minAmount);\n', '        \n', '        GenericERC20(_tokenAddress).transfer(_depositAccount, balance);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to change it's account address\n", '     */\n', '    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n', '        merchantAccount = newAccount;\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to change it's fund address.\n", '     */\n', '    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n', '        merchantFundAddress = newFundAddress;\n', '    }\n', '}']