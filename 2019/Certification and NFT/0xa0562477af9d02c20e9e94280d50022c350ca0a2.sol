['pragma solidity ^0.5.0;\n', '\n', 'contract BIP\n', '{\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 totalSupply_;\n', '    string public name_;\n', '    string public symbol_;\n', '    uint8 public decimals_;\n', '\n', '    constructor (uint256 total) public\n', '    {\n', '        if (total <= 200000000000000000000000000)\n', '        {\n', '            total = 200000000000000000000000000;\n', '        }\n', '        totalSupply_ = total;\n', '        balances[msg.sender] = totalSupply_;\n', '\n', '    \t\tname_ = "Blockchain Invest Platform Token";\n', '    \t\tdecimals_ = 18;\n', '    \t\tsymbol_ = "BIP";\n', '    }\n', '\n', '// getters\n', '\n', '    function name() public view returns (string memory)\n', '    {\n', '        return name_;\n', '    }\n', '\n', '    function symbol() public view returns (string memory)\n', '    {\n', '        return symbol_;\n', '    }\n', '\n', '    function decimals() public view returns (uint8)\n', '    {\n', '        return decimals_;\n', '    }\n', '\n', '// erc-20 fns\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint)\n', '    {\n', '      return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool)\n', '    {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender] - numTokens;\n', '        balances[receiver] = balances[receiver] + numTokens;\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address owner, address delegate) public view returns (uint)\n', '    {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function approve(address delegate, uint numTokens) public returns (bool)\n', '    {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool)\n', '    {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '        balances[owner] = balances[owner] - numTokens;\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n', '        balances[buyer] = balances[buyer] + numTokens;\n', '        emit Transfer(owner, buyer, numTokens); \n', '        return true;\n', '    }\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '}']