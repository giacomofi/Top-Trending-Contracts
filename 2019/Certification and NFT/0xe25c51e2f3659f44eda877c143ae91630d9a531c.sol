['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', '   Copyright (c) 2017 Harbor Platform, Inc.\n', '\n', '   Licensed under the Apache License, Version 2.0 (the “License”);\n', '   you may not use this file except in compliance with the License.\n', '   You may obtain a copy of the License at\n', '\n', '   http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '   Unless required by applicable law or agreed to in writing, software\n', '   distributed under the License is distributed on an “AS IS” BASIS,\n', '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '   See the License for the specific language governing permissions and\n', '   limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/// @notice A service that points to a `RegulatorService`\n', 'contract ServiceRegistry is Ownable {\n', '  address public service;\n', '\n', '  /**\n', '   * @notice Triggered when service address is replaced\n', '   */\n', '  event ReplaceService(address oldService, address newService);\n', '\n', '  /**\n', '   * @dev Validate contract address\n', '   * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\n', '   *\n', '   * @param _addr The address of a smart contract\n', '   */\n', '  modifier withContract(address _addr) {\n', '    uint length;\n', '    assembly { length := extcodesize(_addr) }\n', '    require(length > 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @notice Constructor\n', '   *\n', '   * @param _service The address of the `RegulatorService`\n', '   *\n', '   */\n', '  constructor(address _service) public {\n', '    service = _service;\n', '  }\n', '\n', '  /**\n', '   * @notice Replaces the address pointer to the `RegulatorService`\n', '   *\n', '   * @dev This method is only callable by the contract&#39;s owner\n', '   *\n', '   * @param _service The address of the new `RegulatorService`\n', '   */\n', '  function replaceService(address _service) onlyOwner withContract(_service) public {\n', '    address oldService = service;\n', '    service = _service;\n', '    emit ReplaceService(oldService, service);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', '   Copyright (c) 2017 Harbor Platform, Inc.\n', '\n', '   Licensed under the Apache License, Version 2.0 (the “License”);\n', '   you may not use this file except in compliance with the License.\n', '   You may obtain a copy of the License at\n', '\n', '   http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '   Unless required by applicable law or agreed to in writing, software\n', '   distributed under the License is distributed on an “AS IS” BASIS,\n', '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '   See the License for the specific language governing permissions and\n', '   limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/// @notice A service that points to a `RegulatorService`\n', 'contract ServiceRegistry is Ownable {\n', '  address public service;\n', '\n', '  /**\n', '   * @notice Triggered when service address is replaced\n', '   */\n', '  event ReplaceService(address oldService, address newService);\n', '\n', '  /**\n', '   * @dev Validate contract address\n', '   * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\n', '   *\n', '   * @param _addr The address of a smart contract\n', '   */\n', '  modifier withContract(address _addr) {\n', '    uint length;\n', '    assembly { length := extcodesize(_addr) }\n', '    require(length > 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @notice Constructor\n', '   *\n', '   * @param _service The address of the `RegulatorService`\n', '   *\n', '   */\n', '  constructor(address _service) public {\n', '    service = _service;\n', '  }\n', '\n', '  /**\n', '   * @notice Replaces the address pointer to the `RegulatorService`\n', '   *\n', "   * @dev This method is only callable by the contract's owner\n", '   *\n', '   * @param _service The address of the new `RegulatorService`\n', '   */\n', '  function replaceService(address _service) onlyOwner withContract(_service) public {\n', '    address oldService = service;\n', '    service = _service;\n', '    emit ReplaceService(oldService, service);\n', '  }\n', '}']
