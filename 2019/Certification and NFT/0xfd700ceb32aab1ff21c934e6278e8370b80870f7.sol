['// File: contracts/lib/interface/ICelerWallet.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title CelerWallet interface\n', ' */\n', 'interface ICelerWallet {\n', '    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\n', '\n', '    function depositETH(bytes32 _walletId) external payable;\n', '\n', '    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\n', '    \n', '    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\n', '\n', '    function getOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\n', '\n', '    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\n', '\n', '    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\n', '\n', '    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\n', '\n', '    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\n', '\n', '    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\n', '\n', '    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\n', '\n', '    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\n', '\n', '    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\n', '}\n', '\n', '// File: contracts/lib/interface/IEthPool.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title EthPool interface\n', ' */\n', 'interface IEthPool {\n', '    function deposit(address _receiver) external payable;\n', '\n', '    function withdraw(uint _value) external;\n', '\n', '    function approve(address _spender, uint _value) external returns (bool);\n', '\n', '    function transferFrom(address _from, address payable _to, uint _value) external returns (bool);\n', '\n', '    function transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint _value) external returns (bool);\n', '\n', '    function increaseAllowance(address _spender, uint _addedValue) external returns (bool);\n', '\n', '    function decreaseAllowance(address _spender, uint _subtractedValue) external returns (bool);\n', '\n', '    function balanceOf(address _owner) external view returns (uint);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint);\n', '\n', '    event Deposit(address indexed receiver, uint value);\n', '    \n', '    // transfer from "from" account inside EthPool to real "to" address outside EthPool\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: contracts/lib/interface/IPayRegistry.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title PayRegistry interface\n', ' */\n', 'interface IPayRegistry {\n', '    function calculatePayId(bytes32 _payHash, address _setter) external pure returns(bytes32);\n', '\n', '    function setPayAmount(bytes32 _payHash, uint _amt) external;\n', '\n', '    function setPayDeadline(bytes32 _payHash, uint _deadline) external;\n', '\n', '    function setPayInfo(bytes32 _payHash, uint _amt, uint _deadline) external;\n', '\n', '    function setPayAmounts(bytes32[] calldata _payHashes, uint[] calldata _amts) external;\n', '\n', '    function setPayDeadlines(bytes32[] calldata _payHashes, uint[] calldata _deadlines) external;\n', '\n', '    function setPayInfos(bytes32[] calldata _payHashes, uint[] calldata _amts, uint[] calldata _deadlines) external;\n', '\n', '    function getPayAmounts(\n', '        bytes32[] calldata _payIds,\n', '        uint _lastPayResolveDeadline\n', '    ) external view returns(uint[] memory);\n', '\n', '    function getPayInfo(bytes32 _payId) external view returns(uint, uint);\n', '\n', '    event PayInfoUpdate(bytes32 indexed payId, uint amount, uint resolveDeadline);\n', '}\n', '\n', '// File: contracts/lib/data/Pb.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// runtime proto sol library\n', 'library Pb {\n', '    enum WireType { Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32 }\n', '\n', '    struct Buffer {\n', "        uint idx;  // the start index of next read. when idx=b.length, we're done\n", '        bytes b;   // hold serialized proto msg, readonly\n', '    }\n', '\n', '    // create a new in-memory Buffer object from raw msg bytes\n', '    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n', '        buf.b = raw;\n', '        buf.idx = 0;\n', '    }\n', '\n', '    // whether there are unread bytes\n', '    function hasMore(Buffer memory buf) internal pure returns (bool) {\n', '        return buf.idx < buf.b.length;\n', '    }\n', '\n', '    // decode current field number and wiretype\n', '    function decKey(Buffer memory buf) internal pure returns (uint tag, WireType wiretype) {\n', '        uint v = decVarint(buf);\n', '        tag = v / 8;\n', '        wiretype = WireType(v & 7);\n', '    }\n', '\n', '    // count tag occurrences, return an array due to no memory map support\n', '\t// have to create array for (maxtag+1) size. cnts[tag] = occurrences\n', '\t// should keep buf.idx unchanged because this is only a count function\n', '    function cntTags(Buffer memory buf, uint maxtag) internal pure returns (uint[] memory cnts) {\n', '        uint originalIdx = buf.idx;\n', "        cnts = new uint[](maxtag+1);  // protobuf's tags are from 1 rather than 0\n", '        uint tag;\n', '        WireType wire;\n', '        while (hasMore(buf)) {\n', '            (tag, wire) = decKey(buf);\n', '            cnts[tag] += 1;\n', '            skipValue(buf, wire);\n', '        }\n', '        buf.idx = originalIdx;\n', '    }\n', '\n', '    // read varint from current buf idx, move buf.idx to next read, return the int value\n', '    function decVarint(Buffer memory buf) internal pure returns (uint v) {\n', '        bytes10 tmp;  // proto int is at most 10 bytes (7 bits can be used per byte)\n', '        bytes memory bb = buf.b;  // get buf.b mem addr to use in assembly\n', '        v = buf.idx;  // use v to save one additional uint variable\n', '        assembly {\n', '            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n', '        }\n', '        uint b; // store current byte content\n', '        v = 0; // reset to 0 for return value\n', '        for (uint i=0; i<10; i++) {\n', '            assembly {\n', "                b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra\n", '            }\n', '            v |= (b & 0x7F) << (i * 7);\n', '            if (b & 0x80 == 0) {\n', '                buf.idx += i + 1;\n', '                return v;\n', '            }\n', '        }\n', '        revert(); // i=10, invalid varint stream\n', '    }\n', '\n', '    // read length delimited field and return bytes\n', '    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        b = new bytes(len);\n', '        bytes memory bufB = buf.b;  // get buf.b mem addr to use in assembly\n', '        uint bStart;\n', '        uint bufBStart = buf.idx;\n', '        assembly {\n', '            bStart := add(b, 32)\n', '            bufBStart := add(add(bufB, 32), bufBStart)\n', '        }\n', '        for (uint i=0; i<len; i+=32) {\n', '            assembly{\n', '                mstore(add(bStart, i), mload(add(bufBStart, i)))\n', '            }\n', '        }\n', '        buf.idx = end;\n', '    }\n', '\n', '    // return packed ints\n', '    function decPacked(Buffer memory buf) internal pure returns (uint[] memory t) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        // array in memory must be init w/ known length\n', '        // so we have to create a tmp array w/ max possible len first\n', '        uint[] memory tmp = new uint[](len);\n', '        uint i = 0; // count how many ints are there\n', '        while (buf.idx < end) {\n', '            tmp[i] = decVarint(buf);\n', '            i++;\n', '        }\n', '        t = new uint[](i); // init t with correct length\n', '        for (uint j=0; j<i; j++) {\n', '            t[j] = tmp[j];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    // move idx pass current value field, to beginning of next tag or msg end\n', '    function skipValue(Buffer memory buf, WireType wire) internal pure {\n', '        if (wire == WireType.Varint) { decVarint(buf); }\n', '        else if (wire == WireType.LengthDelim) {\n', '            uint len = decVarint(buf);\n', '            buf.idx += len; // skip len bytes value data\n', '            require(buf.idx <= buf.b.length);  // avoid overflow\n', '        } else { revert(); }  // unsupported wiretype\n', '    }\n', '\n', '    // type conversion help utils\n', '    function _bool(uint x) internal pure returns (bool v) {\n', '        return x != 0;\n', '    }\n', '\n', '    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n', "        require(b.length <= 32);  // b's length must be smaller than or equal to 32\n", '        assembly { v := mload(add(b, 32)) }  // load all 32bytes to v\n', '        v = v >> (8 * (32 - b.length));  // only first b.length is valid\n', '    }\n', '\n', '    function _address(bytes memory b) internal pure returns (address v) {\n', '        v = _addressPayable(b);\n', '    }\n', '\n', '    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n', '        require(b.length == 20);\n', '        //load 32bytes then shift right 12 bytes\n', '        assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }\n', '    }\n', '\n', '    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n', '        require(b.length == 32);\n', '        assembly { v := mload(add(b, 32)) }\n', '    }\n', '\n', '    // uint[] to uint8[]\n', '    function uint8s(uint[] memory arr) internal pure returns (uint8[] memory t) {\n', '        t = new uint8[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint8(arr[i]); }\n', '    }\n', '\n', '    function uint32s(uint[] memory arr) internal pure returns (uint32[] memory t) {\n', '        t = new uint32[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint32(arr[i]); }\n', '    }\n', '\n', '    function uint64s(uint[] memory arr) internal pure returns (uint64[] memory t) {\n', '        t = new uint64[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint64(arr[i]); }\n', '    }\n', '\n', '    function bools(uint[] memory arr) internal pure returns (bool[] memory t) {\n', '        t = new bool[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = arr[i]!=0; }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/data/PbEntity.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: entity.proto\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library PbEntity {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    enum TokenType { INVALID, ETH, ERC20 }\n', '\n', '    // TokenType[] decode function\n', '    function TokenTypes(uint[] memory arr) internal pure returns (TokenType[] memory t) {\n', '        t = new TokenType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TokenType(arr[i]); }\n', '    }\n', '\n', '    enum TransferFunctionType { BOOLEAN_AND, BOOLEAN_OR, BOOLEAN_CIRCUIT, NUMERIC_ADD, NUMERIC_MAX, NUMERIC_MIN }\n', '\n', '    // TransferFunctionType[] decode function\n', '    function TransferFunctionTypes(uint[] memory arr) internal pure returns (TransferFunctionType[] memory t) {\n', '        t = new TransferFunctionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TransferFunctionType(arr[i]); }\n', '    }\n', '\n', '    enum ConditionType { HASH_LOCK, DEPLOYED_CONTRACT, VIRTUAL_CONTRACT }\n', '\n', '    // ConditionType[] decode function\n', '    function ConditionTypes(uint[] memory arr) internal pure returns (ConditionType[] memory t) {\n', '        t = new ConditionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = ConditionType(arr[i]); }\n', '    }\n', '\n', '    struct AccountAmtPair {\n', '        address account;   // tag: 1\n', '        uint256 amt;   // tag: 2\n', '    } // end struct AccountAmtPair\n', '\n', '    function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.account = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amt = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder AccountAmtPair\n', '\n', '    struct TokenInfo {\n', '        TokenType tokenType;   // tag: 1\n', '        address tokenAddress;   // tag: 2\n', '    } // end struct TokenInfo\n', '\n', '    function decTokenInfo(bytes memory raw) internal pure returns (TokenInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.tokenType = TokenType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.tokenAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenInfo\n', '\n', '    struct TokenDistribution {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair[] distribution;   // tag: 2\n', '    } // end struct TokenDistribution\n', '\n', '    function decTokenDistribution(bytes memory raw) internal pure returns (TokenDistribution memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.distribution = new AccountAmtPair[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.distribution[cnts[2]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenDistribution\n', '\n', '    struct TokenTransfer {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair receiver;   // tag: 2\n', '    } // end struct TokenTransfer\n', '\n', '    function decTokenTransfer(bytes memory raw) internal pure returns (TokenTransfer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.receiver = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenTransfer\n', '\n', '    struct SimplexPaymentChannel {\n', '        bytes32 channelId;   // tag: 1\n', '        address peerFrom;   // tag: 2\n', '        uint seqNum;   // tag: 3\n', '        TokenTransfer transferToPeer;   // tag: 4\n', '        PayIdList pendingPayIds;   // tag: 5\n', '        uint lastPayResolveDeadline;   // tag: 6\n', '        uint256 totalPendingAmount;   // tag: 7\n', '    } // end struct SimplexPaymentChannel\n', '\n', '    function decSimplexPaymentChannel(bytes memory raw) internal pure returns (SimplexPaymentChannel memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.peerFrom = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.transferToPeer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.pendingPayIds = decPayIdList(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.lastPayResolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.totalPendingAmount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SimplexPaymentChannel\n', '\n', '    struct PayIdList {\n', '        bytes32[] payIds;   // tag: 1\n', '        bytes32 nextListHash;   // tag: 2\n', '    } // end struct PayIdList\n', '\n', '    function decPayIdList(bytes memory raw) internal pure returns (PayIdList memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.payIds = new bytes32[](cnts[1]);\n', '        cnts[1] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payIds[cnts[1]] = Pb._bytes32(buf.decBytes());\n', '                cnts[1]++;\n', '            }\n', '            else if (tag == 2) {\n', '                m.nextListHash = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PayIdList\n', '\n', '    struct TransferFunction {\n', '        TransferFunctionType logicType;   // tag: 1\n', '        TokenTransfer maxTransfer;   // tag: 2\n', '    } // end struct TransferFunction\n', '\n', '    function decTransferFunction(bytes memory raw) internal pure returns (TransferFunction memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.logicType = TransferFunctionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.maxTransfer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TransferFunction\n', '\n', '    struct ConditionalPay {\n', '        uint payTimestamp;   // tag: 1\n', '        address src;   // tag: 2\n', '        address dest;   // tag: 3\n', '        Condition[] conditions;   // tag: 4\n', '        TransferFunction transferFunc;   // tag: 5\n', '        uint resolveDeadline;   // tag: 6\n', '        uint resolveTimeout;   // tag: 7\n', '        address payResolver;   // tag: 8\n', '    } // end struct ConditionalPay\n', '\n', '    function decConditionalPay(bytes memory raw) internal pure returns (ConditionalPay memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(8);\n', '        m.conditions = new Condition[](cnts[4]);\n', '        cnts[4] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payTimestamp = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.src = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.dest = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.conditions[cnts[4]] = decCondition(buf.decBytes());\n', '                cnts[4]++;\n', '            }\n', '            else if (tag == 5) {\n', '                m.transferFunc = decTransferFunction(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.resolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.resolveTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 8) {\n', '                m.payResolver = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ConditionalPay\n', '\n', '    struct CondPayResult {\n', '        bytes condPay;   // tag: 1\n', '        uint256 amount;   // tag: 2\n', '    } // end struct CondPayResult\n', '\n', '    function decCondPayResult(bytes memory raw) internal pure returns (CondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPay = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CondPayResult\n', '\n', '    struct VouchedCondPayResult {\n', '        bytes condPayResult;   // tag: 1\n', '        bytes sigOfSrc;   // tag: 2\n', '        bytes sigOfDest;   // tag: 3\n', '    } // end struct VouchedCondPayResult\n', '\n', '    function decVouchedCondPayResult(bytes memory raw) internal pure returns (VouchedCondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPayResult = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigOfSrc = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.sigOfDest = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder VouchedCondPayResult\n', '\n', '    struct Condition {\n', '        ConditionType conditionType;   // tag: 1\n', '        bytes32 hashLock;   // tag: 2\n', '        address deployedContractAddress;   // tag: 3\n', '        bytes32 virtualContractAddress;   // tag: 4\n', '        bytes argsQueryFinalization;   // tag: 5\n', '        bytes argsQueryOutcome;   // tag: 6\n', '    } // end struct Condition\n', '\n', '    function decCondition(bytes memory raw) internal pure returns (Condition memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.conditionType = ConditionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.hashLock = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.deployedContractAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.virtualContractAddress = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.argsQueryFinalization = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.argsQueryOutcome = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder Condition\n', '\n', '    struct CooperativeWithdrawInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair withdraw;   // tag: 3\n', '        uint withdrawDeadline;   // tag: 4\n', '        bytes32 recipientChannelId;   // tag: 5\n', '    } // end struct CooperativeWithdrawInfo\n', '\n', '    function decCooperativeWithdrawInfo(bytes memory raw) internal pure returns (CooperativeWithdrawInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.withdraw = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.withdrawDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 5) {\n', '                m.recipientChannelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeWithdrawInfo\n', '\n', '    struct PaymentChannelInitializer {\n', '        TokenDistribution initDistribution;   // tag: 1\n', '        uint openDeadline;   // tag: 2\n', '        uint disputeTimeout;   // tag: 3\n', '        uint msgValueReceiver;   // tag: 4\n', '    } // end struct PaymentChannelInitializer\n', '\n', '    function decPaymentChannelInitializer(bytes memory raw) internal pure returns (PaymentChannelInitializer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.initDistribution = decTokenDistribution(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.openDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.disputeTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.msgValueReceiver = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PaymentChannelInitializer\n', '\n', '    struct CooperativeSettleInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair[] settleBalance;   // tag: 3\n', '        uint settleDeadline;   // tag: 4\n', '    } // end struct CooperativeSettleInfo\n', '\n', '    function decCooperativeSettleInfo(bytes memory raw) internal pure returns (CooperativeSettleInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(4);\n', '        m.settleBalance = new AccountAmtPair[](cnts[3]);\n', '        cnts[3] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.settleBalance[cnts[3]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[3]++;\n', '            }\n', '            else if (tag == 4) {\n', '                m.settleDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeSettleInfo\n', '\n', '    struct ChannelMigrationInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        address fromLedgerAddress;   // tag: 2\n', '        address toLedgerAddress;   // tag: 3\n', '        uint migrationDeadline;   // tag: 4\n', '    } // end struct ChannelMigrationInfo\n', '\n', '    function decChannelMigrationInfo(bytes memory raw) internal pure returns (ChannelMigrationInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.fromLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.toLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.migrationDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ChannelMigrationInfo\n', '\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerStruct.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ledger Struct Library\n', ' * @notice CelerLedger library defining all used structs\n', ' */\n', 'library LedgerStruct {\n', '    enum ChannelStatus { Uninitialized, Operable, Settling, Closed, Migrated }\n', '\n', '    struct PeerState {\n', '        uint seqNum;\n', '        // balance sent out to the other peer of the channel, no need to record amtIn\n', '        uint transferOut;\n', '        bytes32 nextPayIdListHash;\n', '        uint lastPayResolveDeadline;\n', '        uint pendingPayOut;\n', '    }\n', '\n', '    struct PeerProfile {\n', '        address peerAddr;\n', '        // the (monotone increasing) amount that this peer deposit into this channel\n', '        uint deposit;\n', '        // the (monotone increasing) amount that this peer withdraw from this channel\n', '        uint withdrawal;\n', '        PeerState state;\n', '    }\n', '\n', '    struct WithdrawIntent {\n', '        address receiver;\n', '        uint amount;\n', '        uint requestTime;\n', '        bytes32 recipientChannelId;\n', '    }\n', '\n', '    // Channel is a representation of the state channel between peers which puts the funds\n', '    // in CelerWallet and is hosted by a CelerLedger. The status of a state channel can\n', '    // be migrated from one CelerLedger instance to another CelerLedger instance with probably\n', '    // different operation logic.\n', '    struct Channel {\n', '        // the time after which peers can confirmSettle and before which peers can intendSettle\n', '        uint settleFinalizedTime;\n', '        uint disputeTimeout;\n', '        PbEntity.TokenInfo token;\n', '        ChannelStatus status;\n', '        // record the new CelerLedger address after channel migration\n', '        address migratedTo;\n', '        // only support 2-peer channel for now\n', '        PeerProfile[2] peerProfiles;\n', '        uint cooperativeWithdrawSeqNum;\n', '        WithdrawIntent withdrawIntent;\n', '    }\n', '\n', '    // Ledger is a host to record and operate the activities of many state\n', '    // channels with specific operation logic.\n', '    struct Ledger {\n', '        // ChannelStatus => number of channels\n', '        mapping(uint => uint) channelStatusNums;\n', '        IEthPool ethPool;\n', '        IPayRegistry payRegistry;\n', '        ICelerWallet celerWallet;\n', '        // per channel deposit limits for different tokens\n', '        mapping(address => uint) balanceLimits;\n', '        // whether deposit limits of all tokens have been enabled\n', '        bool balanceLimitsEnabled;\n', '        mapping(bytes32 => Channel) channelMap;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/interface/ICelerLedger.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '/**\n', ' * @title CelerLedger interface\n', ' * @dev any changes in this interface must be synchronized to corresponding libraries\n', ' * @dev events in this interface must be exactly same in corresponding used libraries\n', ' */\n', 'interface ICelerLedger {\n', '    /********** LedgerOperation related functions and events **********/\n', '    function openChannel(bytes calldata _openChannelRequest) external payable;\n', '\n', '    function deposit(bytes32 _channelId, address _receiver, uint _transferFromAmount) external payable;\n', '\n', '    function depositInBatch(\n', '        bytes32[] calldata _channelIds,\n', '        address[] calldata _receivers,\n', '        uint[] calldata _transferFromAmounts\n', '    ) external;\n', '\n', '    function snapshotStates(bytes calldata _signedSimplexStateArray) external;\n', '\n', '    function intendWithdraw(bytes32 _channelId, uint _amount, bytes32 _recipientChannelId) external;\n', '    \n', '    function confirmWithdraw(bytes32 _channelId) external;\n', '\n', '    function vetoWithdraw(bytes32 _channelId) external;\n', '    \n', '    function cooperativeWithdraw(bytes calldata _cooperativeWithdrawRequest) external;\n', '    \n', '    function intendSettle(bytes calldata _signedSimplexStateArray) external;\n', '    \n', '    function clearPays(bytes32 _channelId, address _peerFrom, bytes calldata _payIdList) external;\n', '    \n', '    function confirmSettle(bytes32 _channelId) external;\n', '    \n', '    function cooperativeSettle(bytes calldata _settleRequest) external;\n', '    \n', '    function getChannelStatusNum(uint _channelStatus) external view returns(uint);\n', '\n', '    function getEthPool() external view returns(address);\n', '\n', '    function getPayRegistry() external view returns(address);\n', '\n', '    function getCelerWallet() external view returns(address);\n', '\n', '    event OpenChannel(\n', '        bytes32 indexed channelId,\n', '        uint tokenType,\n', '        address indexed tokenAddress,\n', '        // TODO: there is an issue of setting address[2] as indexed. Need to fix and make this indexed\n', '        address[2] peerAddrs,\n', '        uint[2] initialDeposits\n', '    );\n', '\n', '    // TODO: there is an issue of setting address[2] as indexed. Need to fix and make this indexed\n', '    event Deposit(bytes32 indexed channelId, address[2] peerAddrs, uint[2] deposits, uint[2] withdrawals);\n', '\n', '    event SnapshotStates(bytes32 indexed channelId, uint[2] seqNums);\n', '\n', '    event IntendSettle(bytes32 indexed channelId, uint[2] seqNums);\n', '\n', '    event ClearOnePay(bytes32 indexed channelId, bytes32 indexed payId, address indexed peerFrom, uint amount);\n', '\n', '    event ConfirmSettle(bytes32 indexed channelId, uint[2] settleBalance);\n', '\n', '    event ConfirmSettleFail(bytes32 indexed channelId);\n', '\n', '    event IntendWithdraw(bytes32 indexed channelId, address indexed receiver, uint amount);\n', '\n', '    event ConfirmWithdraw(\n', '        bytes32 indexed channelId,\n', '        uint withdrawnAmount,\n', '        address indexed receiver,\n', '        bytes32 indexed recipientChannelId,\n', '        uint[2] deposits,\n', '        uint[2] withdrawals\n', '    );\n', '\n', '    event VetoWithdraw(bytes32 indexed channelId);\n', '\n', '    event CooperativeWithdraw(\n', '        bytes32 indexed channelId,\n', '        uint withdrawnAmount,\n', '        address indexed receiver,\n', '        bytes32 indexed recipientChannelId,\n', '        uint[2] deposits,\n', '        uint[2] withdrawals,\n', '        uint seqNum\n', '    );\n', '\n', '    event CooperativeSettle(bytes32 indexed channelId, uint[2] settleBalance);\n', '    /********** End of LedgerOperation related functions and events **********/\n', '\n', '\n', '    /********** LedgerChannel related functions and events **********/\n', '    function getSettleFinalizedTime(bytes32 _channelId) external view returns(uint);\n', '\n', '    function getTokenContract(bytes32 _channelId) external view returns(address);\n', '\n', '    function getTokenType(bytes32 _channelId) external view returns(PbEntity.TokenType);\n', '\n', '    function getChannelStatus(bytes32 _channelId) external view returns(LedgerStruct.ChannelStatus);\n', '\n', '    function getCooperativeWithdrawSeqNum(bytes32 _channelId) external view returns(uint);\n', '\n', '    function getTotalBalance(bytes32 _channelId) external view returns(uint);\n', '\n', '    function getBalanceMap(bytes32 _channelId) external view returns(address[2] memory, uint[2] memory, uint[2] memory);\n', '\n', '    function getChannelMigrationArgs(bytes32 _channelId) external view returns(uint, uint, address, uint);\n', '\n', '    function getPeersMigrationInfo(bytes32 _channelId) external view returns(\n', '        address[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory\n', '    );\n', '\n', '    function getDisputeTimeout(bytes32 _channelId) external view returns(uint);\n', '\n', '    function getMigratedTo(bytes32 _channelId) external view returns(address);\n', '\n', '    function getStateSeqNumMap(bytes32 _channelId) external view returns(address[2] memory, uint[2] memory);\n', '\n', '    function getTransferOutMap(bytes32 _channelId) external view returns(\n', '        address[2] memory,\n', '        uint[2] memory\n', '    );\n', '\n', '    function getNextPayIdListHashMap(bytes32 _channelId) external view returns(\n', '        address[2] memory,\n', '        bytes32[2] memory\n', '    );\n', '\n', '    function getLastPayResolveDeadlineMap(bytes32 _channelId) external view returns(\n', '        address[2] memory,\n', '        uint[2] memory\n', '    );\n', '\n', '    function getPendingPayOutMap(bytes32 _channelId) external view returns(\n', '        address[2] memory,\n', '        uint[2] memory\n', '    );\n', '\n', '    function getWithdrawIntent(bytes32 _channelId) external view returns(address, uint, uint, bytes32);\n', '    /********** End of LedgerChannel related functions and events **********/\n', '\n', '\n', '    /********** LedgerBalanceLimit related functions and events **********/\n', '    function setBalanceLimits(address[] calldata _tokenAddrs, uint[] calldata _limits) external;\n', '\n', '    function disableBalanceLimits() external;\n', '\n', '    function enableBalanceLimits() external;\n', '\n', '    function getBalanceLimit(address _tokenAddr) external view returns(uint);\n', '\n', '    function getBalanceLimitsEnabled() external view returns(bool);\n', '    /********** End of LedgerBalanceLimit related functions and events **********/\n', '\n', '\n', '    /********** LedgerMigrate related functions and events **********/\n', '    function migrateChannelTo(bytes calldata _migrationRequest) external returns(bytes32);\n', '\n', '    function migrateChannelFrom(address _fromLedgerAddr, bytes calldata _migrationRequest) external;\n', '\n', '    event MigrateChannelTo(bytes32 indexed channelId, address indexed newLedgerAddr);\n', '\n', '    event MigrateChannelFrom(bytes32 indexed channelId, address indexed oldLedgerAddr);\n', '    /********** End of LedgerMigrate related functions and events **********/\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Elliptic curve signature operations\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' */\n', '\n', 'library ECDSA {\n', '    /**\n', '     * @dev Recover signer address from a message by using their signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param signature bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        // If the version is correct return the signer address\n', '        if (v != 27 && v != 28) {\n', '            return (address(0));\n', '        } else {\n', '            return ecrecover(hash, v, r, s);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * toEthSignedMessageHash\n', '     * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '     * and hash the result\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerChannel.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ledger Channel Library\n', ' * @notice CelerLedger library about Channel struct\n', ' * @dev this can be included in LedgerOperation to save some gas,\n', ' *   however, keep this for now for clearness.\n', ' */\n', 'library LedgerChannel {\n', '    using SafeMath for uint;\n', '    using ECDSA for bytes32;\n', '\n', '    /**\n', '     * @notice Get channel confirm settle open time\n', '     * @param _c the channel being used\n', '     * @return channel confirm settle open time\n', '     */\n', '    function getSettleFinalizedTime(LedgerStruct.Channel storage _c) public view returns(uint) {\n', '        return _c.settleFinalizedTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Get channel token contract address\n', '     * @param _c the channel being used\n', '     * @return channel token contract address\n', '     */\n', '    function getTokenContract(LedgerStruct.Channel storage _c) public view returns(address) {\n', '        return _c.token.tokenAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice Get channel token type\n', '     * @param _c the channel being used\n', '     * @return channel token type\n', '     */\n', '    function getTokenType(LedgerStruct.Channel storage _c) public view returns(PbEntity.TokenType) {\n', '        return _c.token.tokenType;\n', '    }\n', '\n', '    /**\n', '     * @notice Get channel status\n', '     * @param _c the channel being used\n', '     * @return channel status\n', '     */\n', '    function getChannelStatus(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        public\n', '        view\n', '        returns(LedgerStruct.ChannelStatus)\n', '    {\n', '        return _c.status;\n', '    }\n', '\n', '    /**\n', '     * @notice Get cooperative withdraw seqNum\n', '     * @param _c the channel being used\n', '     * @return cooperative withdraw seqNum\n', '     */\n', '    function getCooperativeWithdrawSeqNum(LedgerStruct.Channel storage _c) public view returns(uint) {\n', '        return _c.cooperativeWithdrawSeqNum;\n', '    }\n', '\n', '    /**\n', "     * @notice Return one channel's total balance amount\n", '     * @param _c the channel\n', "     * @return channel's balance amount\n", '     */\n', '    function getTotalBalance(LedgerStruct.Channel storage _c) public view returns(uint) {\n', '        uint balance = _c.peerProfiles[0].deposit\n', '            .add(_c.peerProfiles[1].deposit)\n', '            .sub(_c.peerProfiles[0].withdrawal)\n', '            .sub(_c.peerProfiles[1].withdrawal);\n', '        return balance;\n', '    }\n', '\n', '    /**\n', "     * @notice Return one channel's balance info (depositMap and withdrawalMap)\n", "     * @dev Solidity can't directly return an array of struct for now\n", '     * @param _c the channel\n', '     * @return addresses of peers in the channel\n', '     * @return corresponding deposits of the peers (with matched index)\n', '     * @return corresponding withdrawals of the peers (with matched index)\n', '     */\n', '    function getBalanceMap(LedgerStruct.Channel storage _c) public view\n', '        returns(address[2] memory, uint[2] memory, uint[2] memory)\n', '    {\n', '        address[2] memory peerAddrs = [_c.peerProfiles[0].peerAddr, _c.peerProfiles[1].peerAddr];\n', '        uint[2] memory deposits = [_c.peerProfiles[0].deposit, _c.peerProfiles[1].deposit];\n', '        uint[2] memory withdrawals = [_c.peerProfiles[0].withdrawal, _c.peerProfiles[1].withdrawal];\n', '        return (peerAddrs, deposits, withdrawals);\n', '    }\n', '\n', '    /**\n', '     * @notice Return channel-level migration arguments\n', '     * @param _c the channel to be viewed\n', '     * @return channel dispute timeout\n', '     * @return channel tokey type converted to uint\n', '     * @return channel token address\n', '     * @return sequence number of cooperative withdraw\n', '     * @dev related to Ledger Migration\n', '     */\n', '    function getChannelMigrationArgs(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(uint, uint, address, uint)\n', '    {\n', '        return (\n', '            _c.disputeTimeout,\n', '            uint(_c.token.tokenType),\n', '            _c.token.tokenAddress,\n', '            _c.cooperativeWithdrawSeqNum\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return migration info of the peers in the channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", "     * @return peers' deposits\n", "     * @return peers' withdrawals\n", "     * @return peers' state sequence numbers\n", "     * @return peers' transferOut map\n", "     * @return peers' pendingPayOut map\n", '     * @dev related to Ledger Migration\n', '     */\n', '    function getPeersMigrationInfo(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(\n', '        address[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory,\n', '        uint[2] memory\n', '    )\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].deposit, peerProfiles[1].deposit],\n', '            [peerProfiles[0].withdrawal, peerProfiles[1].withdrawal],\n', '            [peerProfiles[0].state.seqNum, peerProfiles[1].state.seqNum],\n', '            [peerProfiles[0].state.transferOut, peerProfiles[1].state.transferOut],\n', '            [peerProfiles[0].state.pendingPayOut, peerProfiles[1].state.pendingPayOut]\n', '        );\n', '    }\n', '\n', '    /**\n', "     * @notice Return channel's dispute timeout\n", '     * @param _c the channel to be viewed\n', "     * @return channel's dispute timeout\n", '     */\n', '    function getDisputeTimeout(LedgerStruct.Channel storage _c) external view returns(uint) {\n', '        return _c.disputeTimeout;\n', '    }\n', '\n', '    /**\n', "     * @notice Return channel's migratedTo address\n", '     * @param _c the channel to be viewed\n', "     * @return channel's migratedTo address\n", '     */\n', '    function getMigratedTo(LedgerStruct.Channel storage _c) external view returns(address) {\n', '        return _c.migratedTo;\n', '    }\n', '\n', '    /**\n', '     * @notice Return state seqNum map of a duplex channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", '     * @return two simplex state sequence numbers\n', '     */\n', '    function getStateSeqNumMap(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address[2] memory, uint[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].state.seqNum, peerProfiles[1].state.seqNum]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return transferOut map of a duplex channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", '     * @return transferOuts of two simplex channels\n', '     */\n', '    function getTransferOutMap(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address[2] memory, uint[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].state.transferOut, peerProfiles[1].state.transferOut]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return nextPayIdListHash map of a duplex channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", '     * @return nextPayIdListHashes of two simplex channels\n', '     */\n', '    function getNextPayIdListHashMap(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address[2] memory, bytes32[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].state.nextPayIdListHash, peerProfiles[1].state.nextPayIdListHash]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return lastPayResolveDeadline map of a duplex channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", '     * @return lastPayResolveDeadlines of two simplex channels\n', '     */\n', '    function getLastPayResolveDeadlineMap(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address[2] memory, uint[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].state.lastPayResolveDeadline, peerProfiles[1].state.lastPayResolveDeadline]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return pendingPayOut map of a duplex channel\n', '     * @param _c the channel to be viewed\n', "     * @return peers' addresses\n", '     * @return pendingPayOuts of two simplex channels\n', '     */\n', '    function getPendingPayOutMap(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address[2] memory, uint[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        return (\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            [peerProfiles[0].state.pendingPayOut, peerProfiles[1].state.pendingPayOut]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Return the withdraw intent info of the channel\n', '     * @param _c the channel to be viewed\n', '     * @return receiver of the withdraw intent\n', '     * @return amount of the withdraw intent\n', '     * @return requestTime of the withdraw intent\n', '     * @return recipientChannelId of the withdraw intent\n', '     */\n', '    function getWithdrawIntent(\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        external\n', '        view\n', '        returns(address, uint, uint, bytes32)\n', '    {\n', '        LedgerStruct.WithdrawIntent memory withdrawIntent = _c.withdrawIntent;\n', '        return (\n', '            withdrawIntent.receiver,\n', '            withdrawIntent.amount,\n', '            withdrawIntent.requestTime,\n', '            withdrawIntent.recipientChannelId\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Import channel migration arguments from old CelerLedger contract\n', '     * @param _c the channel to be viewed\n', '     * @param _fromLedgerAddr old ledger address to import channel config from\n', '     * @param _channelId ID of the channel to be viewed\n', '     * @dev related to Ledger Migration\n', '     */\n', '    function _importChannelMigrationArgs(\n', '        LedgerStruct.Channel storage _c,\n', '        address payable _fromLedgerAddr,\n', '        bytes32 _channelId\n', '    )\n', '        internal\n', '    {\n', '        uint tokenType;\n', '        (\n', '            _c.disputeTimeout,\n', '            tokenType,\n', '            _c.token.tokenAddress,\n', '            _c.cooperativeWithdrawSeqNum\n', '        ) = ICelerLedger(_fromLedgerAddr).getChannelMigrationArgs(_channelId);\n', '        _c.token.tokenType = PbEntity.TokenType(tokenType);\n', '    }\n', '\n', '    /**\n', "     * @notice import channel peers' migration info from old CelerLedger contract\n", '     * @param _c the channel to be viewed\n', '     * @param _fromLedgerAddr old ledger address to import channel config from\n', '     * @param _channelId ID of the channel to be viewed\n', '     * @dev related to Ledger Migration\n', '     */\n', '    function _importPeersMigrationInfo(\n', '        LedgerStruct.Channel storage _c,\n', '        address payable _fromLedgerAddr,\n', '        bytes32 _channelId\n', '    )\n', '        internal\n', '    {\n', '        (\n', '            address[2] memory peersAddrs,\n', '            uint[2] memory deposits,\n', '            uint[2] memory withdrawals,\n', '            uint[2] memory seqNums,\n', '            uint[2] memory transferOuts,\n', '            uint[2] memory pendingPayOuts\n', '        ) = ICelerLedger(_fromLedgerAddr).getPeersMigrationInfo(_channelId);\n', '\n', '        for (uint i = 0; i < 2; i++) {\n', '            LedgerStruct.PeerProfile storage peerProfile = _c.peerProfiles[i];\n', '            peerProfile.peerAddr = peersAddrs[i];\n', '            peerProfile.deposit = deposits[i];\n', '            peerProfile.withdrawal = withdrawals[i];\n', '            peerProfile.state.seqNum = seqNums[i];\n', '            peerProfile.state.transferOut = transferOuts[i];\n', '            peerProfile.state.pendingPayOut = pendingPayOuts[i];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get the seqNums of two simplex channel states\n', '     * @param _c the channel\n', '     */\n', '    function _getStateSeqNums(LedgerStruct.Channel storage _c) internal view returns(uint[2] memory) {\n', '        return [_c.peerProfiles[0].state.seqNum, _c.peerProfiles[1].state.seqNum];\n', '    }\n', '\n', '    /**\n', '     * @notice Check if _addr is one of the peers in channel _c\n', '     * @param _c the channel\n', '     * @param _addr the address to check\n', '     * @return is peer or not\n', '     */\n', '    function _isPeer(LedgerStruct.Channel storage _c, address _addr) internal view returns(bool) {\n', '        return _addr == _c.peerProfiles[0].peerAddr || _addr == _c.peerProfiles[1].peerAddr;\n', '    }\n', '\n', '    /**\n', "     * @notice Get peer's ID\n", '     * @param _c the channel\n', '     * @param _peer address of peer\n', "     * @return peer's ID\n", '     */\n', '     function _getPeerId(LedgerStruct.Channel storage _c, address _peer) internal view returns(uint) {\n', '        if (_peer == _c.peerProfiles[0].peerAddr) {\n', '            return 0;\n', '        } else if (_peer == _c.peerProfiles[1].peerAddr) {\n', '            return 1;\n', '        } else {\n', '            revert("Nonexist peer");\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @notice Check the correctness of one peer's signature\n", '     * @param _c the channel\n', '     * @param _h the hash of the message signed by the peer\n', '     * @param _sig signature of the peer\n', '     * @return message is signed by one of the peers or not\n', '     */\n', '    function _checkSingleSignature(\n', '        LedgerStruct.Channel storage _c,\n', '        bytes32 _h,\n', '        bytes memory _sig\n', '    )\n', '        internal\n', '        view\n', '        returns(bool)\n', '    {\n', '        address addr = _h.toEthSignedMessageHash().recover(_sig);\n', '        return _isPeer(_c, addr);\n', '    }\n', '\n', '    /**\n', '     * @notice Check the correctness of the co-signatures\n', '     * @param _c the channel\n', '     * @param _h the hash of the message signed by the peers\n', '     * @param _sigs signatures of the peers\n', '     * @return message are signed by both peers or not\n', '     */\n', '    function _checkCoSignatures(\n', '        LedgerStruct.Channel storage _c,\n', '        bytes32 _h,\n', '        bytes[] memory _sigs\n', '    )\n', '        internal\n', '        view\n', '        returns(bool)\n', '    {\n', '        if (_sigs.length != 2) {\n', '            return false;\n', '        }\n', '\n', '        // check signature\n', '        bytes32 hash = _h.toEthSignedMessageHash();\n', '        address addr;\n', '        for (uint i = 0; i < 2; i++) {\n', '            addr = hash.recover(_sigs[i]);\n', '            // enforce the order of sigs consistent with ascending addresses\n', '            if (addr != _c.peerProfiles[i].peerAddr) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Validate channel final balance\n', '     * @dev settleBalance = deposit - withdrawal + transferIn - transferOut\n', '     * @param _c the channel\n', '     * @return (balance is valid, settle balance)\n', '     */\n', '    function _validateSettleBalance(LedgerStruct.Channel storage _c)\n', '        internal\n', '        view\n', '        returns(bool, uint[2] memory)\n', '    {\n', '        LedgerStruct.PeerProfile[2] memory peerProfiles = _c.peerProfiles;\n', '        uint[2] memory settleBalance = [\n', '            peerProfiles[0].deposit.add(peerProfiles[1].state.transferOut),\n', '            peerProfiles[1].deposit.add(peerProfiles[0].state.transferOut)\n', '        ];\n', '        for (uint i = 0; i < 2; i++) {\n', '            uint subAmt = peerProfiles[i].state.transferOut.add(peerProfiles[i].withdrawal);\n', '            if (settleBalance[i] < subAmt) {\n', '                return (false, [uint(0), uint(0)]);\n', '            }\n', '\n', '            settleBalance[i] = settleBalance[i].sub(subAmt);\n', '        }\n', '\n', '        return (true, settleBalance);\n', '    }\n', '\n', '    /**\n', "     * @notice Update record of one peer's withdrawal amount\n", '     * @param _c the channel\n', '     * @param _receiver receiver of this new withdrawal\n', '     * @param _amount amount of this new withdrawal\n', '     * @param _checkBalance check the balance if this is true\n', '     */\n', '    function _addWithdrawal(\n', '        LedgerStruct.Channel storage _c,\n', '        address _receiver,\n', '        uint _amount,\n', '        bool _checkBalance\n', '    )\n', '        internal\n', '    {\n', '        // this implicitly require receiver be a peer\n', '        uint rid = _getPeerId(_c, _receiver);\n', '        _c.peerProfiles[rid].withdrawal = _c.peerProfiles[rid].withdrawal.add(_amount);\n', '        if (_checkBalance) {\n', '            require(getTotalBalance(_c) >= 0);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/data/PbChain.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: chain.proto\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library PbChain {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    struct OpenChannelRequest {\n', '        bytes channelInitializer;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct OpenChannelRequest\n', '\n', '    function decOpenChannelRequest(bytes memory raw) internal pure returns (OpenChannelRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelInitializer = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder OpenChannelRequest\n', '\n', '    struct CooperativeWithdrawRequest {\n', '        bytes withdrawInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct CooperativeWithdrawRequest\n', '\n', '    function decCooperativeWithdrawRequest(bytes memory raw) internal pure returns (CooperativeWithdrawRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.withdrawInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeWithdrawRequest\n', '\n', '    struct CooperativeSettleRequest {\n', '        bytes settleInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct CooperativeSettleRequest\n', '\n', '    function decCooperativeSettleRequest(bytes memory raw) internal pure returns (CooperativeSettleRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.settleInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeSettleRequest\n', '\n', '    struct ResolvePayByConditionsRequest {\n', '        bytes condPay;   // tag: 1\n', '        bytes[] hashPreimages;   // tag: 2\n', '    } // end struct ResolvePayByConditionsRequest\n', '\n', '    function decResolvePayByConditionsRequest(bytes memory raw) internal pure returns (ResolvePayByConditionsRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.hashPreimages = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPay = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.hashPreimages[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ResolvePayByConditionsRequest\n', '\n', '    struct SignedSimplexState {\n', '        bytes simplexState;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct SignedSimplexState\n', '\n', '    function decSignedSimplexState(bytes memory raw) internal pure returns (SignedSimplexState memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.simplexState = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SignedSimplexState\n', '\n', '    struct SignedSimplexStateArray {\n', '        SignedSimplexState[] signedSimplexStates;   // tag: 1\n', '    } // end struct SignedSimplexStateArray\n', '\n', '    function decSignedSimplexStateArray(bytes memory raw) internal pure returns (SignedSimplexStateArray memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(1);\n', '        m.signedSimplexStates = new SignedSimplexState[](cnts[1]);\n', '        cnts[1] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.signedSimplexStates[cnts[1]] = decSignedSimplexState(buf.decBytes());\n', '                cnts[1]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SignedSimplexStateArray\n', '\n', '    struct ChannelMigrationRequest {\n', '        bytes channelMigrationInfo;   // tag: 1\n', '        bytes[] sigs;   // tag: 2\n', '    } // end struct ChannelMigrationRequest\n', '\n', '    function decChannelMigrationRequest(bytes memory raw) internal pure returns (ChannelMigrationRequest memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.sigs = new bytes[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelMigrationInfo = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigs[cnts[2]] = bytes(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ChannelMigrationRequest\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerOperation.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ledger Operation Library\n', ' * @notice CelerLedger library of basic ledger operations\n', ' * @dev This library doesn\'t need "withdraw pattern" because both peers must be\n', ' *   External Owned Accounts(EOA) since their signatures are required in openChannel.\n', ' */\n', 'library LedgerOperation {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '    using LedgerChannel for LedgerStruct.Channel;\n', '\n', '    /**\n', '     * @notice Open a state channel through auth withdraw message\n', "     * @dev library function can't be payable but can read msg.value in caller's context\n", '     * @param _self storage data of CelerLedger contract\n', '     * @param _openRequest bytes of open channel request message\n', '     */\n', '    function openChannel(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _openRequest\n', '    )\n', '        external\n', '    {\n', '        PbChain.OpenChannelRequest memory openRequest =\n', '            PbChain.decOpenChannelRequest(_openRequest);\n', '        PbEntity.PaymentChannelInitializer memory channelInitializer =\n', '            PbEntity.decPaymentChannelInitializer(openRequest.channelInitializer);\n', '        require(channelInitializer.initDistribution.distribution.length == 2, "Wrong length");\n', '        require(block.number <= channelInitializer.openDeadline, "Open deadline passed");\n', '        \n', '        PbEntity.TokenInfo memory token = channelInitializer.initDistribution.token;\n', '        uint[2] memory amounts = [\n', '            channelInitializer.initDistribution.distribution[0].amt,\n', '            channelInitializer.initDistribution.distribution[1].amt\n', '        ];\n', '        address[2] memory peerAddrs = [\n', '            channelInitializer.initDistribution.distribution[0].account,\n', '            channelInitializer.initDistribution.distribution[1].account\n', '        ];\n', "        // enforce ascending order of peers' addresses to simplify contract code\n", '        require(peerAddrs[0] < peerAddrs[1], "Peer addrs are not ascending");\n', '\n', '        ICelerWallet celerWallet = _self.celerWallet;\n', '        bytes32 h = keccak256(openRequest.channelInitializer);\n', '        (\n', '            bytes32 channelId,\n', '            LedgerStruct.Channel storage c\n', '        ) = _createWallet(_self, celerWallet, peerAddrs, h);\n', '\n', '        c.disputeTimeout = channelInitializer.disputeTimeout;\n', '        _updateChannelStatus(_self, c, LedgerStruct.ChannelStatus.Operable);\n', '        c.token = _validateTokenInfo(token);\n', '        c.peerProfiles[0].peerAddr = peerAddrs[0];\n', '        c.peerProfiles[0].deposit = amounts[0];\n', '        c.peerProfiles[1].peerAddr = peerAddrs[1];\n', '        c.peerProfiles[1].deposit = amounts[1];\n', '\n', '        require(c._checkCoSignatures(h, openRequest.sigs), "Check co-sigs failed");\n', '\n', '        emit OpenChannel(channelId, uint(token.tokenType), token.tokenAddress, peerAddrs, amounts);\n', '\n', '        uint amtSum = amounts[0].add(amounts[1]);\n', '        // if total deposit is 0\n', '        if (amtSum == 0) {\n', '            require(msg.value == 0, "msg.value is not 0");\n', '            return;\n', '        }\n', '\n', '        // if total deposit is larger than 0\n', '        if (_self.balanceLimitsEnabled) {\n', '            require(amtSum <= _self.balanceLimits[token.tokenAddress], "Balance exceeds limit");\n', '        }\n', '\n', '        if (token.tokenType == PbEntity.TokenType.ETH) {\n', '            uint msgValueReceiver = channelInitializer.msgValueReceiver;\n', '            require(msg.value == amounts[msgValueReceiver], "msg.value mismatch");\n', '            if (amounts[msgValueReceiver] > 0) {\n', '                celerWallet.depositETH.value(amounts[msgValueReceiver])(channelId);\n', '            }\n', '\n', '            // peer ID of non-msgValueReceiver\n', '            uint pid = uint(1).sub(msgValueReceiver);\n', '            if (amounts[pid] > 0) {\n', '                _self.ethPool.transferToCelerWallet(\n', '                    peerAddrs[pid],\n', '                    address(celerWallet),\n', '                    channelId,\n', '                    amounts[pid]\n', '                );\n', '            }\n', '        } else if (token.tokenType == PbEntity.TokenType.ERC20) {\n', '            require(msg.value == 0, "msg.value is not 0");\n', '\n', '            IERC20 erc20Token = IERC20(token.tokenAddress);\n', '            for (uint i = 0; i < 2; i++) {\n', '                if (amounts[i] == 0) { continue; }\n', '\n', '                erc20Token.safeTransferFrom(peerAddrs[i], address(this), amounts[i]);\n', '            }\n', '            erc20Token.safeApprove(address(celerWallet), amtSum);\n', '            celerWallet.depositERC20(channelId, address(erc20Token), amtSum);\n', '        } else {\n', '            assert(false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit ETH or ERC20 tokens into the channel\n', '     * @dev total deposit amount = msg.value(must be 0 for ERC20) + _transferFromAmount.\n', "     *   library function can't be payable but can read msg.value in caller's context.\n", '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _receiver address of the receiver\n', '     * @param _transferFromAmount amount of funds to be transfered from EthPool for ETH\n', '     *   or ERC20 contract for ERC20 tokens\n', '     */\n', '    function deposit(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        address _receiver,\n', '        uint _transferFromAmount\n', '    )\n', '        external\n', '    {\n', '        uint msgValue = msg.value;\n', '        // this implicitly require _receiver be a peer\n', '        _addDeposit(_self, _channelId, _receiver, _transferFromAmount.add(msgValue));\n', '        \n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        if (c.token.tokenType == PbEntity.TokenType.ETH) {\n', '            if (msgValue > 0) {\n', '                _self.celerWallet.depositETH.value(msgValue)(_channelId);\n', '            }\n', '            if (_transferFromAmount > 0) {\n', '                _self.ethPool.transferToCelerWallet(\n', '                    msg.sender,\n', '                    address(_self.celerWallet),\n', '                    _channelId,\n', '                    _transferFromAmount\n', '                );\n', '            }\n', '        } else if (c.token.tokenType == PbEntity.TokenType.ERC20) {\n', '            require(msgValue == 0, "msg.value is not 0");\n', '\n', '            IERC20 erc20Token = IERC20(c.token.tokenAddress);\n', '            erc20Token.safeTransferFrom(msg.sender, address(this), _transferFromAmount);\n', '            erc20Token.safeApprove(address(_self.celerWallet), _transferFromAmount);\n', '            _self.celerWallet.depositERC20(_channelId, address(erc20Token), _transferFromAmount);\n', '        } else {\n', '            assert(false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Store signed simplex states on-chain as checkpoints\n', '     * @dev simplex states in this array are not necessarily in the same channel,\n', '     *   which means snapshotStates natively supports multi-channel batch processing.\n', '     *   This function only updates seqNum, transferOut, pendingPayOut of each on-chain\n', "     *   simplex state. It can't ensure that the pending pays will be cleared during\n", '     *   settling the channel, which requires users call intendSettle with the same state.\n', "     *   TODO: wait for Solidity's support to replace SignedSimplexStateArray with bytes[].\n", '     * @param _self storage data of CelerLedger contract\n', '     * @param _signedSimplexStateArray bytes of SignedSimplexStateArray message\n', '     */\n', '    function snapshotStates(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _signedSimplexStateArray\n', '    )\n', '        external\n', '    {\n', '        PbChain.SignedSimplexStateArray memory signedSimplexStateArray =\n', '            PbChain.decSignedSimplexStateArray(_signedSimplexStateArray);\n', '        uint simplexStatesNum = signedSimplexStateArray.signedSimplexStates.length;\n', '\n', '        // snapshot each state\n', '        PbEntity.SimplexPaymentChannel memory simplexState =\n', '            PbEntity.decSimplexPaymentChannel(signedSimplexStateArray.signedSimplexStates[0].simplexState);\n', '        for (uint i = 0; i < simplexStatesNum; i++) {\n', '            bytes32 currentChannelId = simplexState.channelId;\n', '            LedgerStruct.Channel storage c = _self.channelMap[currentChannelId];\n', '\n', '            require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '\n', '            bytes32 stateHash = keccak256(signedSimplexStateArray.signedSimplexStates[i].simplexState);\n', '            bytes[] memory sigs = signedSimplexStateArray.signedSimplexStates[i].sigs;\n', '            require(c._checkCoSignatures(stateHash, sigs), "Check co-sigs failed");\n', '            uint peerFromId = c._getPeerId(simplexState.peerFrom);\n', '            LedgerStruct.PeerState storage state = c.peerProfiles[peerFromId].state;\n', '            require(simplexState.seqNum > state.seqNum, "seqNum error");\n', '\n', '            // no need to update nextPayIdListHash and lastPayResolveDeadline for snapshot purpose\n', '            state.seqNum = simplexState.seqNum;\n', '            state.transferOut = simplexState.transferToPeer.receiver.amt;\n', '            state.pendingPayOut = simplexState.totalPendingAmount;\n', '\n', '            if (i == simplexStatesNum.sub(1)) {\n', '                emit SnapshotStates(currentChannelId, c._getStateSeqNums());\n', '            } else if (i < simplexStatesNum.sub(1)) {\n', '                simplexState = PbEntity.decSimplexPaymentChannel(\n', '                    signedSimplexStateArray.signedSimplexStates[i+1].simplexState\n', '                );\n', '                // enforce channelIds of simplex states are ascending\n', '                require(currentChannelId <= simplexState.channelId, "Non-ascending channelIds");\n', '                if (currentChannelId < simplexState.channelId) {\n', '                    emit SnapshotStates(currentChannelId, c._getStateSeqNums());\n', '                }\n', '            } else {\n', '                assert(false);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Intend to withdraw funds from channel\n', '     * @dev only peers can call intendWithdraw\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _amount amount of funds to withdraw\n', '     * @param _recipientChannelId withdraw to receiver address if 0,\n', '     *   otherwise deposit to receiver address in the recipient channel\n', '     */\n', '    function intendWithdraw(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        uint _amount,\n', '        bytes32 _recipientChannelId\n', '    )\n', '        external\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        LedgerStruct.PeerProfile[2] storage peerProfiles = c.peerProfiles;\n', '        LedgerStruct.WithdrawIntent storage withdrawIntent = c.withdrawIntent;\n', '        address receiver = msg.sender;\n', '        require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '        // withdrawIntent.receiver is address(0) if and only if there is no pending WithdrawIntent,\n', "        // because withdrawIntent.receiver may only be set as msg.sender which can't be address(0).\n", '        require(withdrawIntent.receiver == address(0), "Pending withdraw intent exists");\n', '\n', '        // check withdraw limit\n', '        // this implicitly requires receiver be a peer\n', '        uint rid = c._getPeerId(receiver);\n', '        uint pid = uint(1).sub(rid);\n', '        uint withdrawLimit = peerProfiles[rid].deposit\n', '            .add(peerProfiles[pid].state.transferOut)\n', '            .sub(peerProfiles[rid].withdrawal)\n', '            .sub(peerProfiles[rid].state.transferOut)\n', '            .sub(peerProfiles[rid].state.pendingPayOut);\n', '        require(_amount <= withdrawLimit, "Exceed withdraw limit");\n', '\n', '        withdrawIntent.receiver = receiver;\n', '        withdrawIntent.amount = _amount;\n', '        withdrawIntent.requestTime = block.number;\n', '        withdrawIntent.recipientChannelId = _recipientChannelId;\n', '\n', '        emit IntendWithdraw(_channelId, receiver, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Confirm channel withdrawal\n', '     * @dev anyone can confirm a withdrawal intent\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     */\n', '    function confirmWithdraw(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId\n', '    )\n', '        external\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '        require(c.withdrawIntent.receiver != address(0), "No pending withdraw intent");\n', '        require(\n', '            block.number >= c.withdrawIntent.requestTime.add(c.disputeTimeout),\n', '            "Dispute not timeout"\n', '        );\n', '\n', '        address receiver = c.withdrawIntent.receiver;\n', '        uint amount = c.withdrawIntent.amount;\n', '        bytes32 recipientChannelId = c.withdrawIntent.recipientChannelId;\n', '        delete c.withdrawIntent;\n', '\n', "        // don't need to check balance because intendWithdraw() has already checked withdraw limit\n", '        // this implicitly require receiver be a peer\n', '        c._addWithdrawal(receiver, amount, false);\n', '        \n', '        (, uint[2] memory deposits, uint[2] memory withdrawals) = c.getBalanceMap();\n', '        emit ConfirmWithdraw(_channelId, amount, receiver, recipientChannelId, deposits, withdrawals);\n', '\n', '        _withdrawFunds(_self, _channelId, receiver, amount, recipientChannelId);\n', '    }\n', '\n', '    /**\n', '     * @notice Veto current withdrawal intent\n', '     * @dev only peers can veto a withdrawal intent;\n', '     *   peers can veto a withdrawal intent even after (requestTime + disputeTimeout)\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     */\n', '    function vetoWithdraw(LedgerStruct.Ledger storage _self, bytes32 _channelId) external {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '        require(c.withdrawIntent.receiver != address(0), "No pending withdraw intent");\n', '        require(c._isPeer(msg.sender), "msg.sender is not peer");\n', '\n', '        delete c.withdrawIntent;\n', '\n', '        emit VetoWithdraw(_channelId);\n', '    }\n', '\n', '    /**\n', '     * @notice Cooperatively withdraw specific amount of deposit\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _cooperativeWithdrawRequest bytes of cooperative withdraw request message\n', '     */\n', '    function cooperativeWithdraw(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _cooperativeWithdrawRequest\n', '    )\n', '        external\n', '    {\n', '        PbChain.CooperativeWithdrawRequest memory cooperativeWithdrawRequest =\n', '            PbChain.decCooperativeWithdrawRequest(_cooperativeWithdrawRequest);\n', '        PbEntity.CooperativeWithdrawInfo memory withdrawInfo =\n', '            PbEntity.decCooperativeWithdrawInfo(cooperativeWithdrawRequest.withdrawInfo);\n', '        bytes32 channelId = withdrawInfo.channelId;\n', '        bytes32 recipientChannelId = withdrawInfo.recipientChannelId;\n', '        LedgerStruct.Channel storage c = _self.channelMap[channelId];\n', '\n', '        require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '        bytes32 h = keccak256(cooperativeWithdrawRequest.withdrawInfo);\n', '        require(\n', '            c._checkCoSignatures(h, cooperativeWithdrawRequest.sigs),\n', '            "Check co-sigs failed"\n', '        );\n', '        // require an increment of exactly 1 for seqNum of each cooperative withdraw request\n', '        require(\n', '            withdrawInfo.seqNum.sub(c.cooperativeWithdrawSeqNum) == 1,\n', '            "seqNum error"\n', '        );\n', '        require(block.number <= withdrawInfo.withdrawDeadline, "Withdraw deadline passed");\n', '\n', '        address receiver = withdrawInfo.withdraw.account;\n', '        c.cooperativeWithdrawSeqNum = withdrawInfo.seqNum;\n', '        uint amount = withdrawInfo.withdraw.amt;\n', '\n', '        // this implicitly require receiver be a peer\n', '        c._addWithdrawal(receiver, amount, true);\n', '\n', '        (, uint[2] memory deposits, uint[2] memory withdrawals) = c.getBalanceMap();\n', '        emit CooperativeWithdraw(\n', '            channelId,\n', '            amount,\n', '            receiver,\n', '            recipientChannelId,\n', '            deposits,\n', '            withdrawals,\n', '            withdrawInfo.seqNum\n', '        );\n', '\n', '        _withdrawFunds(_self, channelId, receiver, amount, recipientChannelId);\n', '    }\n', '\n', '    /**\n', '     * @notice Intend to settle channel(s) with an array of signed simplex states\n', '     * @dev simplex states in this array are not necessarily in the same channel,\n', '     *   which means intendSettle natively supports multi-channel batch processing.\n', '     *   A simplex state with non-zero seqNum (non-null state) must be co-signed by both peers,\n', '     *   while a simplex state with seqNum=0 (null state) only needs to be signed by one peer.\n', "     *   TODO: wait for Solidity's support to replace SignedSimplexStateArray with bytes[].\n", '     * @param _self storage data of CelerLedger contract\n', '     * @param _signedSimplexStateArray bytes of SignedSimplexStateArray message\n', '     */\n', '    function intendSettle(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _signedSimplexStateArray\n', '    )\n', '        external\n', '    {\n', '        PbChain.SignedSimplexStateArray memory signedSimplexStateArray =\n', '            PbChain.decSignedSimplexStateArray(_signedSimplexStateArray);\n', '        uint simplexStatesNum = signedSimplexStateArray.signedSimplexStates.length;\n', '\n', '        PbEntity.SimplexPaymentChannel memory simplexState =\n', '            PbEntity.decSimplexPaymentChannel(signedSimplexStateArray.signedSimplexStates[0].simplexState);\n', '        for (uint i = 0; i < simplexStatesNum; i++) {\n', '            bytes32 currentChannelId = simplexState.channelId;\n', '            LedgerStruct.Channel storage c = _self.channelMap[currentChannelId];\n', '            require(\n', '                c.status == LedgerStruct.ChannelStatus.Operable ||\n', '                c.status == LedgerStruct.ChannelStatus.Settling,\n', '                "Channel status error"\n', '            );\n', '            require(\n', '                c.settleFinalizedTime == 0 || block.number < c.settleFinalizedTime,\n', '                "Settle has already finalized"\n', '            );\n', '            \n', '            bytes32 stateHash = keccak256(signedSimplexStateArray.signedSimplexStates[i].simplexState);\n', '            bytes[] memory sigs = signedSimplexStateArray.signedSimplexStates[i].sigs;\n', '\n', '            if (simplexState.seqNum > 0) {  // non-null state\n', '                require(c._checkCoSignatures(stateHash, sigs), "Check co-sigs failed");\n', '                uint peerFromId = c._getPeerId(simplexState.peerFrom);\n', '                LedgerStruct.PeerState storage state = c.peerProfiles[peerFromId].state;\n', '                // ensure each state can be intendSettle at most once\n', '                if (c.status == LedgerStruct.ChannelStatus.Operable) {\n', '                    // "==" is the case of cooperative on-chain checkpoint\n', '                    require(simplexState.seqNum >= state.seqNum, "seqNum error");\n', '                } else if (c.status == LedgerStruct.ChannelStatus.Settling) {\n', '                    require(simplexState.seqNum > state.seqNum, "seqNum error");\n', '                } else {\n', '                    assert(false);\n', '                }\n', '\n', '                // update simplexState-dependent fields\n', "                // no need to update pendingPayOut since channel settle process doesn't use it\n", '                state.seqNum = simplexState.seqNum;\n', '                state.transferOut = simplexState.transferToPeer.receiver.amt;\n', '                state.nextPayIdListHash = simplexState.pendingPayIds.nextListHash;\n', '                state.lastPayResolveDeadline = simplexState.lastPayResolveDeadline;\n', '                _clearPays(_self, currentChannelId, peerFromId, simplexState.pendingPayIds.payIds);\n', '            } else if (simplexState.seqNum == 0) {  // null state\n', '                // this implies both stored seqNums are 0\n', '                require(c.settleFinalizedTime == 0, "intendSettle before");\n', '                require(\n', '                    sigs.length == 1 && c._checkSingleSignature(stateHash, sigs[0]),\n', '                    "Check sig failed"\n', '                );\n', '            } else {\n', '                assert(false);\n', '            }\n', '\n', '            if (i == simplexStatesNum.sub(1)) {\n', '                _updateOverallStatesByIntendState(_self, currentChannelId);\n', '            } else if (i < simplexStatesNum.sub(1)) {\n', '                simplexState = PbEntity.decSimplexPaymentChannel(\n', '                    signedSimplexStateArray.signedSimplexStates[i+1].simplexState\n', '                );\n', '                // enforce channelIds of simplex states are ascending\n', '                require(currentChannelId <= simplexState.channelId, "Non-ascending channelIds");\n', '                if (currentChannelId < simplexState.channelId) {\n', '                    _updateOverallStatesByIntendState(_self, currentChannelId);\n', '                }\n', '            } else {\n', '                assert(false);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Read payment results and add results to corresponding simplex payment channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _peerFrom address of the peer who send out funds\n', '     * @param _payIdList bytes of a pay id list\n', '     */\n', '    function clearPays(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        address _peerFrom,\n', '        bytes calldata _payIdList\n', '    )\n', '        external\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        require(c.status == LedgerStruct.ChannelStatus.Settling, "Channel status error");\n', '        uint peerFromId = c._getPeerId(_peerFrom);\n', '\n', '        bytes32 listHash = keccak256(_payIdList);\n', '        LedgerStruct.PeerState storage state = c.peerProfiles[peerFromId].state;\n', '        require(state.nextPayIdListHash == listHash, "List hash mismatch");\n', '\n', '        PbEntity.PayIdList memory payIdList = PbEntity.decPayIdList(_payIdList);\n', '        state.nextPayIdListHash = payIdList.nextListHash;\n', '        _clearPays(_self, _channelId, peerFromId, payIdList.payIds);\n', '    }\n', '\n', '    /**\n', '     * @notice Confirm channel settlement\n', '     * @dev This must be alled after settleFinalizedTime\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     */\n', '    function confirmSettle(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId\n', '    )\n', '        external\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        LedgerStruct.PeerProfile[2] storage peerProfiles = c.peerProfiles;\n', '        uint blockNumber = block.number;\n', '        require(c.status == LedgerStruct.ChannelStatus.Settling, "Channel status error");\n', '        // require no new intendSettle can be called\n', '        require(blockNumber >= c.settleFinalizedTime, "Settle is not finalized");\n', '\n', '        // require channel status of current intendSettle has been finalized,\n', '        // namely all payments have already been either cleared or expired\n', '        // TODO: here we should use (lastPayResolveDeadline + clear safe margin)\n', '        //   instead of lastPayResolveDeadline to avoid race condition between clearPays\n', '        //   and confirmSettle, which may lead to different settle balance. Add this safe\n', '        //   margin to the value of lastPayResolveDeadline for now as a temporary solution.\n', '        require(\n', '            (peerProfiles[0].state.nextPayIdListHash == bytes32(0) ||\n', '                blockNumber > peerProfiles[0].state.lastPayResolveDeadline) &&\n', '            (peerProfiles[1].state.nextPayIdListHash == bytes32(0) ||\n', '                blockNumber > peerProfiles[1].state.lastPayResolveDeadline),\n', '            "Payments are not finalized"\n', '        );\n', '\n', '        (bool validBalance, uint[2] memory settleBalance) = c._validateSettleBalance();\n', '        if (!validBalance) {\n', '            _resetDuplexState(_self, c);\n', '            emit ConfirmSettleFail(_channelId);\n', '            return;\n', '        }\n', '\n', '        _updateChannelStatus(_self, c, LedgerStruct.ChannelStatus.Closed);\n', '\n', '        emit ConfirmSettle(_channelId, settleBalance);\n', '\n', '        // Withdrawal from Contracts pattern is needless here,\n', "        // because peers need to sign messages which implies that they can't be contracts\n", '        _batchTransferOut(\n', '            _self,\n', '            _channelId,\n', '            c.token.tokenAddress,\n', '            [peerProfiles[0].peerAddr, peerProfiles[1].peerAddr],\n', '            settleBalance\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Cooperatively settle the channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _settleRequest bytes of cooperative settle request message\n', '     */\n', '    function cooperativeSettle(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _settleRequest\n', '    )\n', '        external\n', '    {\n', '        PbChain.CooperativeSettleRequest memory settleRequest =\n', '            PbChain.decCooperativeSettleRequest(_settleRequest);\n', '        PbEntity.CooperativeSettleInfo memory settleInfo =\n', '            PbEntity.decCooperativeSettleInfo(settleRequest.settleInfo);\n', '        bytes32 channelId = settleInfo.channelId;\n', '        LedgerStruct.Channel storage c = _self.channelMap[channelId];\n', '        require(\n', '            c.status == LedgerStruct.ChannelStatus.Operable ||\n', '            c.status == LedgerStruct.ChannelStatus.Settling,\n', '            "Channel status error"\n', '        );\n', '\n', '        bytes32 h = keccak256(settleRequest.settleInfo);\n', '        require(c._checkCoSignatures(h, settleRequest.sigs), "Check co-sigs failed");\n', '\n', '        address[2] memory peerAddrs = [c.peerProfiles[0].peerAddr, c.peerProfiles[1].peerAddr];\n', '        require(\n', '            settleInfo.seqNum > c.peerProfiles[0].state.seqNum &&\n', '                settleInfo.seqNum > c.peerProfiles[1].state.seqNum,\n', '            "seqNum error"\n', '        );\n', '        require(settleInfo.settleDeadline >= block.number, "Settle deadline passed");\n', '        // require distribution is consistent with the order of peerAddrs in channel\n', '        require(\n', '            settleInfo.settleBalance[0].account == peerAddrs[0] &&\n', '                settleInfo.settleBalance[1].account == peerAddrs[1],\n', '            "Settle accounts mismatch"\n', '        );\n', '\n', '        uint[2] memory settleBalance = [\n', '            settleInfo.settleBalance[0].amt,\n', '            settleInfo.settleBalance[1].amt\n', '        ];\n', '        require(settleBalance[0].add(settleBalance[1]) == c.getTotalBalance(), "Balance sum mismatch");\n', '\n', '        _updateChannelStatus(_self, c, LedgerStruct.ChannelStatus.Closed);\n', '\n', '        emit CooperativeSettle(channelId, settleBalance);\n', '\n', '        _batchTransferOut(_self, channelId, c.token.tokenAddress, peerAddrs, settleBalance);\n', '    }\n', '\n', '    /**\n', '     * @notice Return channel number of given status in this contract\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelStatus query channel status converted to uint\n', '     * @return channel number of the status\n', '     */\n', '    function getChannelStatusNum(\n', '        LedgerStruct.Ledger storage _self,\n', '        uint _channelStatus\n', '    )\n', '        external\n', '        view\n', '        returns(uint)\n', '    {\n', '        return _self.channelStatusNums[_channelStatus];\n', '    }\n', '\n', '    /**\n', '     * @notice Return EthPool used by this CelerLedger contract\n', '     * @param _self storage data of CelerLedger contract\n', '     * @return EthPool address\n', '     */\n', '    function getEthPool(LedgerStruct.Ledger storage _self) external view returns(address) {\n', '        return address(_self.ethPool);\n', '    }\n', '\n', '    /**\n', '     * @notice Return PayRegistry used by this CelerLedger contract\n', '     * @param _self storage data of CelerLedger contract\n', '     * @return PayRegistry address\n', '     */\n', '    function getPayRegistry(LedgerStruct.Ledger storage _self) external view returns(address) {\n', '        return address(_self.payRegistry);\n', '    }\n', '\n', '    /**\n', '     * @notice Return CelerWallet used by this CelerLedger contract\n', '     * @param _self storage data of CelerLedger contract\n', '     * @return CelerWallet address\n', '     */\n', '    function getCelerWallet(LedgerStruct.Ledger storage _self) external view returns(address) {\n', '        return address(_self.celerWallet);\n', '    }\n', '\n', '    /**\n', '     * @notice create a wallet for a new channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _w celer wallet\n', '     * @param _peers peers of the new channel\n', '     * @param _nonce nonce for creating the wallet\n', '     * @return channel id, which is same as the created wallet id\n', '     * @return storage pointer of the channel\n', '     */\n', '    function _createWallet(\n', '        LedgerStruct.Ledger storage _self,\n', '        ICelerWallet _w,\n', '        address[2] memory _peers,\n', '        bytes32 _nonce\n', '    )\n', '        internal\n', '        returns(bytes32, LedgerStruct.Channel storage)\n', '    {\n', '        address[] memory owners = new address[](2);\n', '        owners[0] = _peers[0];\n', '        owners[1] = _peers[1];\n', '        // it is safe to use abi.encodePacked() with only one dynamic variable\n', '        // use walletId as channelId\n', '        bytes32 channelId = _w.create(owners, address(this), _nonce);\n', '        // 0 is reserved for non-channel indication\n', '        require(channelId != bytes32(0), "channelId gets 0");\n', '        LedgerStruct.Channel storage c = _self.channelMap[channelId];\n', '        // No harm in having this check in case of keccak256 being broken \n', '        require(c.status == LedgerStruct.ChannelStatus.Uninitialized, "Occupied channelId");\n', '\n', '        return (channelId, c);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to add deposit of a channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _receiver address of the receiver\n', '     * @param _amount the amount to be deposited\n', '     */\n', '    function _addDeposit(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        address _receiver,\n', '        uint _amount\n', '    )\n', '        internal\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        require(c.status == LedgerStruct.ChannelStatus.Operable, "Channel status error");\n', '\n', '        // this implicitly require _receiver be a peer\n', '        uint rid = c._getPeerId(_receiver);\n', '        if (_self.balanceLimitsEnabled) {\n', '            require(\n', '                _amount.add(c.getTotalBalance()) <= _self.balanceLimits[c.token.tokenAddress],\n', '                "Balance exceeds limit"\n', '            );\n', '        }\n', '\n', '        c.peerProfiles[rid].deposit = c.peerProfiles[rid].deposit.add(_amount);\n', '\n', '        (\n', '            address[2] memory peerAddrs,\n', '            uint[2] memory deposits,\n', '            uint[2] memory withdrawals\n', '        ) = c.getBalanceMap();\n', '        emit Deposit(_channelId, peerAddrs, deposits, withdrawals);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to transfer funds out in batch\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _tokenAddr address of tokens to be transferred out\n', '     * @param _receivers the addresses of token receivers\n', '     * @param _amounts the amounts to be transferred\n', '     */\n', '    function _batchTransferOut(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        address _tokenAddr,\n', '        address[2] memory _receivers,\n', '        uint[2] memory _amounts\n', '    )\n', '        internal\n', '    {\n', '        for (uint i = 0; i < 2; i++) {\n', '            if (_amounts[i] == 0) { continue; }\n', '\n', '            _self.celerWallet.withdraw(_channelId, _tokenAddr, _receivers[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function to withdraw funds out of the channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId ID of the channel\n', '     * @param _receiver address of the receiver of the withdrawn funds\n', '     * @param _amount the amount of the withdrawn funds\n', '     * @param _recipientChannelId ID of the recipient channel\n', '     */\n', '    function _withdrawFunds(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        address _receiver,\n', '        uint _amount,\n', '        bytes32 _recipientChannelId\n', '    )\n', '        internal\n', '    {\n', '        if (_amount == 0) { return; }\n', '\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        if (_recipientChannelId == bytes32(0)) {\n', '            _self.celerWallet.withdraw(_channelId, c.token.tokenAddress, _receiver, _amount);\n', '        } else {\n', '            LedgerStruct.Channel storage recipientChannel = _self.channelMap[_recipientChannelId];\n', '            require(\n', '                c.token.tokenType == recipientChannel.token.tokenType &&\n', '                    c.token.tokenAddress == recipientChannel.token.tokenAddress,\n', '                "Token mismatch of recipient channel"\n', '            );\n', '            _addDeposit(_self, _recipientChannelId, _receiver, _amount);\n', '\n', "            // move funds from one channel's wallet to another channel's wallet\n", '            _self.celerWallet.transferToWallet(\n', '                _channelId,\n', '                _recipientChannelId,\n', '                c.token.tokenAddress,\n', '                _receiver,\n', '                _amount\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Reset the state of the channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _c the channel\n', '     */\n', '    function _resetDuplexState(\n', '        LedgerStruct.Ledger storage _self,\n', '        LedgerStruct.Channel storage _c\n', '    )\n', '        internal\n', '    {\n', '        delete _c.settleFinalizedTime;\n', '        _updateChannelStatus(_self, _c, LedgerStruct.ChannelStatus.Operable);\n', '        delete _c.peerProfiles[0].state;\n', '        delete _c.peerProfiles[1].state;\n', '        // reset possibly remaining WithdrawIntent freezed by previous intendSettle()\n', '        delete _c.withdrawIntent;\n', '    }\n', '\n', '    /**\n', '     * @notice Clear payments by their hash array\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId the channel ID\n', '     * @param _peerId ID of the peer who sends out funds\n', '     * @param _payIds array of pay ids to clear\n', '     */\n', '    function _clearPays(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId,\n', '        uint _peerId,\n', '        bytes32[] memory _payIds\n', '    )\n', '        internal\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        uint[] memory outAmts = _self.payRegistry.getPayAmounts(\n', '            _payIds,\n', '            c.peerProfiles[_peerId].state.lastPayResolveDeadline\n', '        );\n', '\n', '        uint totalAmtOut = 0;\n', '        for (uint i = 0; i < outAmts.length; i++) {\n', '            totalAmtOut = totalAmtOut.add(outAmts[i]);\n', '            emit ClearOnePay(_channelId, _payIds[i], c.peerProfiles[_peerId].peerAddr, outAmts[i]);\n', '        }\n', '        c.peerProfiles[_peerId].state.transferOut =\n', '            c.peerProfiles[_peerId].state.transferOut.add(totalAmtOut);\n', '    }\n', '\n', '    /**\n', '     * @notice Update overall states of a duplex channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _channelId the channel ID\n', '     */\n', '    function _updateOverallStatesByIntendState(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes32 _channelId\n', '    )\n', '        internal\n', '    {\n', '        LedgerStruct.Channel storage c = _self.channelMap[_channelId];\n', '        c.settleFinalizedTime = block.number.add(c.disputeTimeout);\n', '        _updateChannelStatus(_self, c, LedgerStruct.ChannelStatus.Settling);\n', '\n', '        emit IntendSettle(_channelId, c._getStateSeqNums());\n', '    }\n', '\n', '    /**\n', '     * @notice Update status of a channel\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _c the channel\n', '     * @param _newStatus new channel status\n', '     */\n', '    function _updateChannelStatus(\n', '        LedgerStruct.Ledger storage _self,\n', '        LedgerStruct.Channel storage _c,\n', '        LedgerStruct.ChannelStatus _newStatus\n', '    )\n', '        internal\n', '    {\n', '        if (_c.status == _newStatus) {\n', '            return;\n', '        }\n', '\n', '        // update counter of old status\n', '        if (_c.status != LedgerStruct.ChannelStatus.Uninitialized) {\n', '            _self.channelStatusNums[uint(_c.status)] = _self.channelStatusNums[uint(_c.status)].sub(1);\n', '        }\n', '\n', '        // update counter of new status\n', '        _self.channelStatusNums[uint(_newStatus)] = _self.channelStatusNums[uint(_newStatus)].add(1);\n', '\n', '        _c.status = _newStatus;\n', '    }\n', '\n', '    /**\n', '     * @notice Validate token info\n', '     * @param _token token info to be validated\n', '     * @return validated token info\n', '     */\n', '    function _validateTokenInfo(PbEntity.TokenInfo memory _token)\n', '        internal\n', '        view\n', '        returns(PbEntity.TokenInfo memory)\n', '    {\n', '        if (_token.tokenType == PbEntity.TokenType.ETH) {\n', '            require(_token.tokenAddress == address(0));\n', '        } else if (_token.tokenType == PbEntity.TokenType.ERC20) {\n', '            require(_token.tokenAddress != address(0));\n', '            require(_token.tokenAddress.isContract());\n', '        } else {\n', '            assert(false);\n', '        }\n', '\n', '        return _token;\n', '    }\n', '\n', '    event OpenChannel(\n', '        bytes32 indexed channelId,\n', '        uint tokenType,\n', '        address indexed tokenAddress,\n', '        // TODO: there is an issue of setting address[2] as indexed. Need to fix and make this indexed\n', '        address[2] peerAddrs,\n', '        uint[2] initialDeposits\n', '    );\n', '\n', '    // TODO: there is an issue of setting address[2] as indexed. Need to fix and make this indexed\n', '    event Deposit(bytes32 indexed channelId, address[2] peerAddrs, uint[2] deposits, uint[2] withdrawals);\n', '\n', '    event SnapshotStates(bytes32 indexed channelId, uint[2] seqNums);\n', '\n', '    event IntendSettle(bytes32 indexed channelId, uint[2] seqNums);\n', '\n', '    event ClearOnePay(bytes32 indexed channelId, bytes32 indexed payId, address indexed peerFrom, uint amount);\n', '\n', '    event ConfirmSettle(bytes32 indexed channelId, uint[2] settleBalance);\n', '\n', '    event ConfirmSettleFail(bytes32 indexed channelId);\n', '\n', '    event IntendWithdraw(bytes32 indexed channelId, address indexed receiver, uint amount);\n', '\n', '    event ConfirmWithdraw(\n', '        bytes32 indexed channelId,\n', '        uint withdrawnAmount,\n', '        address indexed receiver,\n', '        bytes32 indexed recipientChannelId,\n', '        uint[2] deposits,\n', '        uint[2] withdrawals\n', '    );\n', '\n', '    event VetoWithdraw(bytes32 indexed channelId);\n', '\n', '    event CooperativeWithdraw(\n', '        bytes32 indexed channelId,\n', '        uint withdrawnAmount,\n', '        address indexed receiver,\n', '        bytes32 indexed recipientChannelId,\n', '        uint[2] deposits,\n', '        uint[2] withdrawals,\n', '        uint seqNum\n', '    );\n', '\n', '    event CooperativeSettle(bytes32 indexed channelId, uint[2] settleBalance);\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerMigrate.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ledger Migrate Library\n', ' * @notice CelerLedger library about channel migration\n', ' */\n', 'library LedgerMigrate {\n', '    using LedgerChannel for LedgerStruct.Channel;\n', '    using LedgerOperation for LedgerStruct.Ledger;\n', '\n', '    /**\n', '     * @notice Migrate a channel from this CelerLedger to a new CelerLedger\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _migrationRequest bytes of migration request message\n', '     * @return migrated channel id\n', '     */\n', '    function migrateChannelTo(\n', '        LedgerStruct.Ledger storage _self,\n', '        bytes calldata _migrationRequest\n', '    )\n', '        external returns(bytes32) \n', '    {\n', '        PbChain.ChannelMigrationRequest memory migrationRequest = \n', '            PbChain.decChannelMigrationRequest(_migrationRequest);\n', '        PbEntity.ChannelMigrationInfo memory migrationInfo = \n', '            PbEntity.decChannelMigrationInfo(migrationRequest.channelMigrationInfo);\n', '        bytes32 channelId = migrationInfo.channelId;\n', '        LedgerStruct.Channel storage c = _self.channelMap[channelId];\n', '        address toLedgerAddr = migrationInfo.toLedgerAddress;\n', '\n', '        require(\n', '            c.status == LedgerStruct.ChannelStatus.Operable ||\n', '            c.status == LedgerStruct.ChannelStatus.Settling\n', '        );\n', '        bytes32 h = keccak256(migrationRequest.channelMigrationInfo);\n', '        // use Channel Library instead\n', '        require(c._checkCoSignatures(h, migrationRequest.sigs), "Check co-sigs failed");\n', '        require(migrationInfo.fromLedgerAddress == address(this), "From ledger address is not this");\n', '        require(toLedgerAddr == msg.sender, "To ledger address is not msg.sender");\n', '        require(block.number <= migrationInfo.migrationDeadline, "Passed migration deadline");\n', '\n', '        _self._updateChannelStatus(c, LedgerStruct.ChannelStatus.Migrated);\n', '        c.migratedTo = toLedgerAddr;\n', '        emit MigrateChannelTo(channelId, toLedgerAddr);\n', '\n', '        _self.celerWallet.transferOperatorship(channelId, toLedgerAddr);\n', '\n', '        return channelId;\n', '    }\n', '\n', '    /**\n', '     * @notice Migrate a channel from an old CelerLedger to this CelerLedger\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _fromLedgerAddr the old ledger address to migrate from\n', '     * @param _migrationRequest bytes of migration request message\n', '     */\n', '    // TODO: think about future multi versions upgrade (if-else branch for addr and import libs as mini-v1, mini-v2, mini-v3,\n', '    //       otherwise, only one interface can be used because all interfaces share the same name.)\n', '    function migrateChannelFrom(\n', '        LedgerStruct.Ledger storage _self,\n', '        address _fromLedgerAddr,\n', '        bytes calldata _migrationRequest\n', '    )\n', '        external\n', '    {\n', '        // TODO: latest version of openzeppelin Address.sol provide this api toPayable()\n', '        address payable fromLedgerAddrPayable = address(uint160(_fromLedgerAddr));\n', '        bytes32 channelId = ICelerLedger(fromLedgerAddrPayable).migrateChannelTo(_migrationRequest);\n', '        LedgerStruct.Channel storage c = _self.channelMap[channelId];\n', '        require(c.status == LedgerStruct.ChannelStatus.Uninitialized, "Immigrated channel already exists");\n', '        require(\n', '            _self.celerWallet.getOperator(channelId) == address(this),\n', '            "Operatorship not transferred"\n', '        );\n', '\n', '        _self._updateChannelStatus(c, LedgerStruct.ChannelStatus.Operable);\n', '        c._importChannelMigrationArgs(fromLedgerAddrPayable, channelId);\n', '        c._importPeersMigrationInfo(fromLedgerAddrPayable, channelId);\n', '\n', '        emit MigrateChannelFrom(channelId, _fromLedgerAddr);\n', '    }\n', '    \n', '    event MigrateChannelTo(bytes32 indexed channelId, address indexed newLedgerAddr);\n', '    \n', '    event MigrateChannelFrom(bytes32 indexed channelId, address indexed oldLedgerAddr);\n', '}']