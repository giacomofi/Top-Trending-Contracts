['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'interface IAssetSplitContracts {\n', ' function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) external returns (bool success);\n', '}\n', '\n', 'interface IShareManager {\n', '    function getSharesByShareOwner(address _shareOwner) external view returns (uint[] memory);\n', '    function shares(uint _id) external view returns (address shareholder, uint256 sharePercentage);\n', '    function sharesToManager(uint _id) external view returns (address shareowner);\n', '}\n', '\n', 'interface IPayeeShare {\n', '    function owner() external view returns (address payable shareowner);\n', '    function payeePartsToSell() external view returns (uint256);\n', '    function payeePricePerPart() external view returns (uint256);\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() internal {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '  * @return the address of the owner.\n', '  */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @return true if `msg.sender` is the owner of the contract.\n', '  */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to relinquish control of the contract.\n', '  * @notice Renouncing to ownership will leave the contract without an owner.\n', '  * It will not be possible to call the functions with the `onlyOwner`\n', '  * modifier anymore.\n', '  */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function _transferOwnership(address payable newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SellPayee is Ownable{\n', '\n', '    IERC20Token public tokenContract;\n', '    IAssetSplitContracts public assetSplitContract;\n', '    IShareManager public shareManagerContract;\n', '    \n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    uint256 priceInEther = 500 finney;\n', '    uint256 priceInToken = 1;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    constructor(address _tokenContract, address _AssetSplitContracts, address _shareManager) public {\n', '        tokenContract = IERC20Token(_tokenContract);\n', '        assetSplitContract = IAssetSplitContracts(_AssetSplitContracts);\n', '        shareManagerContract = IShareManager(_shareManager);\n', '    }\n', '    \n', '    function getShareAddressFromId(uint _id) internal view returns (address) {\n', '        address shareAddress;\n', '        (shareAddress,) = shareManagerContract.shares(_id);\n', '        return shareAddress;\n', '    }\n', '    \n', '    \n', '    function isAllowed(address payable _contractAddress) public view returns (bool) {\n', '        uint[] memory result = shareManagerContract.getSharesByShareOwner(msg.sender);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < result.length; i++) {\n', '          if (getShareAddressFromId(result[i]) == _contractAddress) {\n', '            counter++;\n', '            return true;\n', '          }\n', '        }\n', '        return false;\n', '    }\n', ' \n', '    \n', '    function addASC(address payable _contractAddress) public payable returns (bool success) {\n', '        if (msg.value >= priceInEther) {\n', '           IPayeeShare shareContract;\n', '           shareContract = IPayeeShare(_contractAddress);\n', '           require(shareContract.owner() == msg.sender);\n', '           require(isAllowed(_contractAddress) == true);\n', '           require(shareContract.payeePartsToSell() > 0);\n', '           require(shareContract.payeePricePerPart() > 0);\n', '           _owner.transfer(address(this).balance);\n', '           assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n', '           return true;\n', '        } else {\n', '            IPayeeShare shareContract;\n', '            shareContract = IPayeeShare(_contractAddress);\n', '            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals()));\n', '            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals())));\n', '            require(shareContract.owner() == msg.sender);\n', '            require(isAllowed(_contractAddress) == true);\n', '            require(shareContract.payeePartsToSell() > 0);\n', '            require(shareContract.payeePricePerPart() > 0);\n', '            assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '}']
['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'interface IAssetSplitContracts {\n', ' function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) external returns (bool success);\n', '}\n', '\n', 'interface IShareManager {\n', '    function getSharesByShareOwner(address _shareOwner) external view returns (uint[] memory);\n', '    function shares(uint _id) external view returns (address shareholder, uint256 sharePercentage);\n', '    function sharesToManager(uint _id) external view returns (address shareowner);\n', '}\n', '\n', 'interface IPayeeShare {\n', '    function owner() external view returns (address payable shareowner);\n', '    function payeePartsToSell() external view returns (uint256);\n', '    function payeePricePerPart() external view returns (uint256);\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() internal {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '  * @return the address of the owner.\n', '  */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @return true if `msg.sender` is the owner of the contract.\n', '  */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to relinquish control of the contract.\n', '  * @notice Renouncing to ownership will leave the contract without an owner.\n', '  * It will not be possible to call the functions with the `onlyOwner`\n', '  * modifier anymore.\n', '  */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function _transferOwnership(address payable newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SellPayee is Ownable{\n', '\n', '    IERC20Token public tokenContract;\n', '    IAssetSplitContracts public assetSplitContract;\n', '    IShareManager public shareManagerContract;\n', '    \n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    uint256 priceInEther = 500 finney;\n', '    uint256 priceInToken = 1;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    constructor(address _tokenContract, address _AssetSplitContracts, address _shareManager) public {\n', '        tokenContract = IERC20Token(_tokenContract);\n', '        assetSplitContract = IAssetSplitContracts(_AssetSplitContracts);\n', '        shareManagerContract = IShareManager(_shareManager);\n', '    }\n', '    \n', '    function getShareAddressFromId(uint _id) internal view returns (address) {\n', '        address shareAddress;\n', '        (shareAddress,) = shareManagerContract.shares(_id);\n', '        return shareAddress;\n', '    }\n', '    \n', '    \n', '    function isAllowed(address payable _contractAddress) public view returns (bool) {\n', '        uint[] memory result = shareManagerContract.getSharesByShareOwner(msg.sender);\n', '        uint counter = 0;\n', '        for (uint i = 0; i < result.length; i++) {\n', '          if (getShareAddressFromId(result[i]) == _contractAddress) {\n', '            counter++;\n', '            return true;\n', '          }\n', '        }\n', '        return false;\n', '    }\n', ' \n', '    \n', '    function addASC(address payable _contractAddress) public payable returns (bool success) {\n', '        if (msg.value >= priceInEther) {\n', '           IPayeeShare shareContract;\n', '           shareContract = IPayeeShare(_contractAddress);\n', '           require(shareContract.owner() == msg.sender);\n', '           require(isAllowed(_contractAddress) == true);\n', '           require(shareContract.payeePartsToSell() > 0);\n', '           require(shareContract.payeePricePerPart() > 0);\n', '           _owner.transfer(address(this).balance);\n', '           assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n', '           return true;\n', '        } else {\n', '            IPayeeShare shareContract;\n', '            shareContract = IPayeeShare(_contractAddress);\n', '            require(tokenContract.balanceOf(msg.sender) >= priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals()));\n', '            require(tokenContract.transferFrom(msg.sender, _owner, priceInToken.mul(shareContract.payeePartsToSell()).mul(10 ** tokenContract.decimals())));\n', '            require(shareContract.owner() == msg.sender);\n', '            require(isAllowed(_contractAddress) == true);\n', '            require(shareContract.payeePartsToSell() > 0);\n', '            require(shareContract.payeePricePerPart() > 0);\n', '            assetSplitContract.addContract(_contractAddress, msg.sender, 1);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '}']
