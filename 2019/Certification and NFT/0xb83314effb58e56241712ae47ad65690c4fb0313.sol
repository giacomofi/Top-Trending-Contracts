['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '// File: contracts/Collateral.sol\n', '\n', 'contract Collateral is Ownable {\n', '    // 抵押品合约\n', '\n', '    using SafeMath for SafeMath;\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public BondAddress;\n', '    address public DepositAddress; // 抵押品充值，退还地址\n', '    address public VoceanAddress;  // 违约时，扣除部分转入 VoceanAddress\n', '\n', '    uint public DeductionRate;  // 0~100  退回部分抵押物时计算给VoceanAddress部分的比例\n', '    uint public Total = 100;\n', '\n', '    uint public AllowWithdrawAmount;\n', '\n', '    ERC20 public BixToken;\n', '\n', '    event SetBondAddress(address bond_address);\n', '    event RefundAllCollateral(uint amount);\n', '    event RefundPartCollateral(address addr, uint amount);\n', '    event PayByBondContract(address addr, uint amount);\n', '    event SetAllowWithdrawAmount(uint amount);\n', '    event WithdrawBix(uint amount);\n', '\n', '    constructor(address _DepositAddress, ERC20 _BixToken, address _VoceanAddress, uint _DeductionRate) public{\n', '        require(_DeductionRate < 100);\n', '        DepositAddress = _DepositAddress;\n', '        BixToken = _BixToken;\n', '        VoceanAddress = _VoceanAddress;\n', '        DeductionRate = _DeductionRate;\n', '\n', '    }\n', '\n', '    // 设置 债券合约地址\n', '    function setBondAddress(address _BondAddress) onlyOwner public {\n', '        BondAddress = _BondAddress;\n', '        emit SetBondAddress(BondAddress);\n', '    }\n', '\n', '\n', '    // 退回全部抵押物\n', '    // 只允许 债券合约地址 调用\n', '    function refundAllCollateral() public {\n', '        require(msg.sender == BondAddress);\n', '        uint current_bix = BixToken.balanceOf(address(this));\n', '\n', '        if (current_bix > 0) {\n', '            BixToken.transfer(DepositAddress, current_bix);\n', '\n', '            emit RefundAllCollateral(current_bix);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    // 退回部分抵押物\n', '    // 另一部分转给 VoceanAddress\n', '    function refundPartCollateral() public {\n', '\n', '        require(msg.sender == BondAddress);\n', '\n', '        uint current_bix = BixToken.balanceOf(address(this));\n', '\n', '        if (current_bix > 0) {\n', '            // 计算各自数量\n', '            uint refund_deposit_addr_amount = get_refund_deposit_addr_amount(current_bix);\n', '            uint refund_vocean_addr_amount = get_refund_vocean_addr_amount(current_bix);\n', '\n', '            // 退给 充值地址\n', '            BixToken.transfer(DepositAddress, refund_deposit_addr_amount);\n', '            emit RefundPartCollateral(DepositAddress, refund_deposit_addr_amount);\n', '\n', '            // 退给 VoceanAddress\n', '            BixToken.transfer(VoceanAddress, refund_vocean_addr_amount);\n', '            emit RefundPartCollateral(VoceanAddress, refund_vocean_addr_amount);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    function get_refund_deposit_addr_amount(uint current_bix) internal view returns (uint){\n', '        return SafeMath.div(SafeMath.mul(current_bix, SafeMath.sub(Total, DeductionRate)), Total);\n', '    }\n', '\n', '    function get_refund_vocean_addr_amount(uint current_bix) internal view returns (uint){\n', '        return SafeMath.div(SafeMath.mul(current_bix, DeductionRate), Total);\n', '    }\n', '\n', '    // 债券合约使用抵押品赔付\n', '    function pay_by_bond_contract(address addr, uint amount) public {\n', '        require(msg.sender == BondAddress);\n', '        BixToken.transfer(addr, amount);\n', '        emit PayByBondContract(addr, amount);\n', '\n', '    }\n', '\n', '    // 设置 允许发行方提取的数量\n', '    function set_allow_withdraw_amount(uint amount) public {\n', '        require(msg.sender == BondAddress);\n', '        AllowWithdrawAmount = amount;\n', '        emit SetAllowWithdrawAmount(amount);\n', '    }\n', '\n', '    // 允许发行方提取 BIX\n', '    function withdraw_bix() public {\n', '        require(msg.sender == DepositAddress);\n', '        require(AllowWithdrawAmount > 0);\n', '        BixToken.transfer(msg.sender, AllowWithdrawAmount);\n', '        // 提取完后 将额度设置为 0\n', '        AllowWithdrawAmount = 0;\n', '        emit WithdrawBix(AllowWithdrawAmount);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '// File: contracts/Collateral.sol\n', '\n', 'contract Collateral is Ownable {\n', '    // 抵押品合约\n', '\n', '    using SafeMath for SafeMath;\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public BondAddress;\n', '    address public DepositAddress; // 抵押品充值，退还地址\n', '    address public VoceanAddress;  // 违约时，扣除部分转入 VoceanAddress\n', '\n', '    uint public DeductionRate;  // 0~100  退回部分抵押物时计算给VoceanAddress部分的比例\n', '    uint public Total = 100;\n', '\n', '    uint public AllowWithdrawAmount;\n', '\n', '    ERC20 public BixToken;\n', '\n', '    event SetBondAddress(address bond_address);\n', '    event RefundAllCollateral(uint amount);\n', '    event RefundPartCollateral(address addr, uint amount);\n', '    event PayByBondContract(address addr, uint amount);\n', '    event SetAllowWithdrawAmount(uint amount);\n', '    event WithdrawBix(uint amount);\n', '\n', '    constructor(address _DepositAddress, ERC20 _BixToken, address _VoceanAddress, uint _DeductionRate) public{\n', '        require(_DeductionRate < 100);\n', '        DepositAddress = _DepositAddress;\n', '        BixToken = _BixToken;\n', '        VoceanAddress = _VoceanAddress;\n', '        DeductionRate = _DeductionRate;\n', '\n', '    }\n', '\n', '    // 设置 债券合约地址\n', '    function setBondAddress(address _BondAddress) onlyOwner public {\n', '        BondAddress = _BondAddress;\n', '        emit SetBondAddress(BondAddress);\n', '    }\n', '\n', '\n', '    // 退回全部抵押物\n', '    // 只允许 债券合约地址 调用\n', '    function refundAllCollateral() public {\n', '        require(msg.sender == BondAddress);\n', '        uint current_bix = BixToken.balanceOf(address(this));\n', '\n', '        if (current_bix > 0) {\n', '            BixToken.transfer(DepositAddress, current_bix);\n', '\n', '            emit RefundAllCollateral(current_bix);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    // 退回部分抵押物\n', '    // 另一部分转给 VoceanAddress\n', '    function refundPartCollateral() public {\n', '\n', '        require(msg.sender == BondAddress);\n', '\n', '        uint current_bix = BixToken.balanceOf(address(this));\n', '\n', '        if (current_bix > 0) {\n', '            // 计算各自数量\n', '            uint refund_deposit_addr_amount = get_refund_deposit_addr_amount(current_bix);\n', '            uint refund_vocean_addr_amount = get_refund_vocean_addr_amount(current_bix);\n', '\n', '            // 退给 充值地址\n', '            BixToken.transfer(DepositAddress, refund_deposit_addr_amount);\n', '            emit RefundPartCollateral(DepositAddress, refund_deposit_addr_amount);\n', '\n', '            // 退给 VoceanAddress\n', '            BixToken.transfer(VoceanAddress, refund_vocean_addr_amount);\n', '            emit RefundPartCollateral(VoceanAddress, refund_vocean_addr_amount);\n', '        }\n', '\n', '\n', '    }\n', '\n', '    function get_refund_deposit_addr_amount(uint current_bix) internal view returns (uint){\n', '        return SafeMath.div(SafeMath.mul(current_bix, SafeMath.sub(Total, DeductionRate)), Total);\n', '    }\n', '\n', '    function get_refund_vocean_addr_amount(uint current_bix) internal view returns (uint){\n', '        return SafeMath.div(SafeMath.mul(current_bix, DeductionRate), Total);\n', '    }\n', '\n', '    // 债券合约使用抵押品赔付\n', '    function pay_by_bond_contract(address addr, uint amount) public {\n', '        require(msg.sender == BondAddress);\n', '        BixToken.transfer(addr, amount);\n', '        emit PayByBondContract(addr, amount);\n', '\n', '    }\n', '\n', '    // 设置 允许发行方提取的数量\n', '    function set_allow_withdraw_amount(uint amount) public {\n', '        require(msg.sender == BondAddress);\n', '        AllowWithdrawAmount = amount;\n', '        emit SetAllowWithdrawAmount(amount);\n', '    }\n', '\n', '    // 允许发行方提取 BIX\n', '    function withdraw_bix() public {\n', '        require(msg.sender == DepositAddress);\n', '        require(AllowWithdrawAmount > 0);\n', '        BixToken.transfer(msg.sender, AllowWithdrawAmount);\n', '        // 提取完后 将额度设置为 0\n', '        AllowWithdrawAmount = 0;\n', '        emit WithdrawBix(AllowWithdrawAmount);\n', '    }\n', '\n', '}']
