['// File: contracts/PriceOracle.sol\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'interface PriceOracle {\n', '    /**\n', '     * @dev Returns the price to register or renew a name.\n', '     * @param name The name being registered or renewed.\n', '     * @param expires When the name presently expires (0 if this is a new registration).\n', '     * @param duration How long the name is being registered or extended for, in seconds.\n', '     * @return The price of this renewal or registration, in wei.\n', '     */\n', '    function price(string calldata name, uint expires, uint duration) external view returns(uint);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/StringUtils.sol\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'library StringUtils {\n', '    /**\n', '     * @dev Returns the length of a given string\n', '     *\n', '     * @param s The string to measure the length of\n', '     * @return The length of the input string\n', '     */\n', '    function strlen(string memory s) internal pure returns (uint) {\n', '        uint len;\n', '        uint i = 0;\n', '        uint bytelength = bytes(s).length;\n', '        for(len = 0; i < bytelength; len++) {\n', '            byte b = bytes(s)[i];\n', '            if(b < 0x80) {\n', '                i += 1;\n', '            } else if (b < 0xE0) {\n', '                i += 2;\n', '            } else if (b < 0xF0) {\n', '                i += 3;\n', '            } else if (b < 0xF8) {\n', '                i += 4;\n', '            } else if (b < 0xFC) {\n', '                i += 5;\n', '            } else {\n', '                i += 6;\n', '            }\n', '        }\n', '        return len;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/StablePriceOracle.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'interface DSValue {\n', '    function read() external view returns (bytes32);\n', '}\n', '\n', '// StablePriceOracle sets a price in USD, based on an oracle.\n', 'contract StablePriceOracle is Ownable, PriceOracle {\n', '    using SafeMath for *;\n', '    using StringUtils for *;\n', '\n', '    // Oracle address\n', '    DSValue usdOracle;\n', '\n', '    // Rent in attodollars (1e-18) per second\n', '    uint[] public rentPrices;\n', '\n', '    event OracleChanged(address oracle);\n', '    event RentPriceChanged(uint[] prices);\n', '\n', '    constructor(DSValue _usdOracle, uint[] memory _rentPrices) public {\n', '        setOracle(_usdOracle);\n', '        setPrices(_rentPrices);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the price oracle address\n', '     * @param _usdOracle The address of the price oracle to use.\n', '     */\n', '    function setOracle(DSValue _usdOracle) public onlyOwner {\n', '        usdOracle = _usdOracle;\n', '        emit OracleChanged(address(_usdOracle));\n', '    }\n', '\n', '    /**\n', '     * @dev Sets rent prices.\n', '     * @param _rentPrices The price array. Each element corresponds to a specific\n', '     *                    name length; names longer than the length of the array\n', '     *                    default to the price of the last element.\n', '     */\n', '    function setPrices(uint[] memory _rentPrices) public onlyOwner {\n', '        rentPrices = _rentPrices;\n', '        emit RentPriceChanged(_rentPrices);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the price to register or renew a name.\n', '     * @param name The name being registered or renewed.\n', '     * @param duration How long the name is being registered or extended for, in seconds.\n', '     * @return The price of this renewal or registration, in wei.\n', '     */\n', '    function price(string calldata name, uint /*expires*/, uint duration) view external returns(uint) {\n', '        uint len = name.strlen();\n', '        if(len > rentPrices.length) {\n', '            len = rentPrices.length;\n', '        }\n', '        require(len > 0);\n', '        uint priceUSD = rentPrices[len - 1].mul(duration);\n', '\n', '        // Price of one ether in attodollars\n', '        uint ethPrice = uint(usdOracle.read());\n', '\n', '        // priceUSD and ethPrice are both fixed-point values with 18dp, so we\n', '        // multiply the numerator by 1e18 before dividing.\n', '        return priceUSD.mul(1e18).div(ethPrice);\n', '    }\n', '}']