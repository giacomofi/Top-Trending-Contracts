['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferInitiated(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '  \n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '  \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '  \n', '    /**\n', '     * @dev Throws if called by any account other than the specific function owner.\n', '     */\n', '    modifier ownedBy(address _a) {\n', '        require( msg.sender == _a );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '  \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to. Needs to be accepted by\n', '     * the new owner.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnershipAtomic(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '  \n', '    /**\n', '     * @dev Completes the ownership transfer by having the new address confirm the transfer.\n', '     */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, msg.sender);\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '  \n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '        emit OwnershipTransferInitiated(owner, _newOwner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'contract Vesting is Ownable {\n', '    using SafeMath for uint;\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '    mapping (address => Holding) public holdings;\n', '    address internal founders;\n', '\n', '    uint constant internal PERIOD_INTERVAL = 30 days;\n', '    uint constant internal FOUNDERS_HOLDING = 365 days;\n', '    uint constant internal BONUS_HOLDING = 0;\n', '    uint constant internal TOTAL_PERIODS = 12;\n', '\n', '    uint public additionalHoldingPool = 0;\n', '    uint internal totalTokensCommitted = 0;\n', '\n', '    bool internal vestingStarted = false;\n', '    uint internal vestingStart = 0;\n', '\n', '    struct Holding {\n', '        uint tokensCommitted;\n', '        uint tokensRemaining;\n', '        uint batchesClaimed;\n', '        bool updatedForFinalization;\n', '        bool isFounder;\n', '        bool isValue;\n', '    }\n', '\n', '    event TokensReleased(address _to, uint _tokensReleased, uint _tokensRemaining);\n', '    event VestingInitialized(address _to, uint _tokens);\n', '    event VestingUpdated(address _to, uint _totalTokens);\n', '\n', '    constructor(address _token, address _founders) public {\n', '        require( _token != 0x0);\n', '        require(_founders != 0x0);\n', '        token = ERC20(_token);\n', '        founders = _founders;\n', '    }\n', '\n', '    function claimTokens() external {\n', '        require( holdings[msg.sender].isValue );\n', '        require( vestingStarted );\n', '        uint personalVestingStart = \n', '            (holdings[msg.sender].isFounder) ? (vestingStart.add(FOUNDERS_HOLDING)) : (vestingStart);\n', '\n', '        require( now > personalVestingStart );\n', '\n', '        uint periodsPassed = now.sub(personalVestingStart).div(PERIOD_INTERVAL);\n', '\n', '        uint batchesToClaim = periodsPassed.sub(holdings[msg.sender].batchesClaimed);\n', '        require( batchesToClaim > 0 );\n', '\n', '        if (!holdings[msg.sender].updatedForFinalization) {\n', '            holdings[msg.sender].updatedForFinalization = true;\n', '            holdings[msg.sender].tokensRemaining = (holdings[msg.sender].tokensRemaining).add(\n', '                (holdings[msg.sender].tokensCommitted).mul(additionalHoldingPool).div(totalTokensCommitted)\n', '            );\n', '        }\n', '\n', '        uint tokensPerBatch = (holdings[msg.sender].tokensRemaining).div(\n', '            TOTAL_PERIODS.sub(holdings[msg.sender].batchesClaimed)\n', '        );\n', '        uint tokensToRelease = 0;\n', '\n', '        if (periodsPassed >= TOTAL_PERIODS) {\n', '            tokensToRelease = holdings[msg.sender].tokensRemaining;\n', '            delete holdings[msg.sender];\n', '        } else {\n', '            tokensToRelease = tokensPerBatch.mul(batchesToClaim);\n', '            holdings[msg.sender].tokensRemaining = (holdings[msg.sender].tokensRemaining).sub(tokensToRelease);\n', '            holdings[msg.sender].batchesClaimed = holdings[msg.sender].batchesClaimed.add(batchesToClaim);\n', '        }\n', '\n', '        require( token.transfer(msg.sender, tokensToRelease) );\n', '        emit TokensReleased(msg.sender, tokensToRelease, holdings[msg.sender].tokensRemaining);\n', '    }\n', '\n', '    function tokensRemainingInHolding(address _user) public view returns (uint) {\n', '        return holdings[_user].tokensRemaining;\n', '    }\n', '    \n', '    function initializeVesting(address _beneficiary, uint _tokens) public onlyOwner {\n', '        bool isFounder = (_beneficiary == founders);\n', '        _initializeVesting(_beneficiary, _tokens, isFounder);\n', '    }\n', '\n', '    function finalizeVestingAllocation(uint _holdingPoolTokens) public onlyOwner {\n', '        additionalHoldingPool = _holdingPoolTokens;\n', '        vestingStarted = true;\n', '        vestingStart = now;\n', '    }\n', '\n', '    function _initializeVesting(address _to, uint _tokens, bool _isFounder) internal {\n', '        require( !vestingStarted );\n', '\n', '        if (!_isFounder) totalTokensCommitted = totalTokensCommitted.add(_tokens);\n', '\n', '        if (!holdings[_to].isValue) {\n', '            holdings[_to] = Holding({\n', '                tokensCommitted: _tokens, \n', '                tokensRemaining: _tokens,\n', '                batchesClaimed: 0, \n', '                updatedForFinalization: _isFounder, \n', '                isFounder: _isFounder,\n', '                isValue: true\n', '            });\n', '\n', '            emit VestingInitialized(_to, _tokens);\n', '        } else {\n', '            holdings[_to].tokensCommitted = (holdings[_to].tokensCommitted).add(_tokens);\n', '            holdings[_to].tokensRemaining = (holdings[_to].tokensRemaining).add(_tokens);\n', '\n', '            emit VestingUpdated(_to, holdings[_to].tokensRemaining);\n', '        }\n', '    }\n', '}']