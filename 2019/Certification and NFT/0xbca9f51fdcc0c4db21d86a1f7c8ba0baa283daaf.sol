['pragma solidity 0.4.21;\n', '\n', '// Declaring the API of external functions.\n', 'contract IJNBToken {\n', '    function acceptOwnership() public;\n', '    function transfer(address _to, uint _value) public returns(bool);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner; \n', '    address public newOwner; \n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner); // Requiring that the function caller must be owner.\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(address(0) != _newOwner); \n', '        newOwner = _newOwner; // Setting the newOwner.\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner); // Requiring that the caller must be newOwner.\n', '        emit OwnershipTransferred(owner, msg.sender); // Triggering the OwnershipTransferred event.\n', '        owner = msg.sender;\n', '        newOwner = address(0); // Resetting the newOwner as zero.\n', '    }\n', '}\n', '\n', '\n', 'contract JNBOwner is Ownable{\n', '\n', '    address public constant addr = 0x21D5A14e625d767Ce6b7A167491C2d18e0785fDa; // The address of JNB Token.\n', '     \n', '\tfunction JNBOwner(address _owner) public { \n', "\t\towner = _owner; // The constructor sets owner as '_owner'.\n", '\t}\n', '\n', '    function acceptJNBOwner() public{\n', "        IJNBToken(addr).acceptOwnership(); // Calling external function to compelete 'transferOwnership' operation.\n", '    }\n', '    \n', '    function withdrawJNB(uint256 _amount) onlyOwner public{\n', '        require(IJNBToken(addr).transfer(owner,_amount)); // Requiring the return value of callling external function \n', '    }\n', '\n', '}']