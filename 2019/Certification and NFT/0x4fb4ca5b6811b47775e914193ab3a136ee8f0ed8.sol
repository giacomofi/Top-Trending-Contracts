['pragma solidity 0.4.25;\n', '\n', '/// @title provides subject to role checking logic\n', 'contract IAccessPolicy {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', "    /// @notice We don't make this function constant to allow for state-updating access controls such as rate limiting.\n", '    /// @dev checks if subject belongs to requested role for particular object\n', '    /// @param subject address to be checked against role, typically msg.sender\n', '    /// @param role identifier of required role\n', '    /// @param object contract instance context for role checking, typically contract requesting the check\n', '    /// @param verb additional data, in current AccessControll implementation msg.sig\n', '    /// @return if subject belongs to a role\n', '    function allowed(\n', '        address subject,\n', '        bytes32 role,\n', '        address object,\n', '        bytes4 verb\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', '/// @title enables access control in implementing contract\n', '/// @dev see AccessControlled for implementation\n', 'contract IAccessControlled {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    /// @dev must log on access policy change\n', '    event LogAccessPolicyChanged(\n', '        address controller,\n', '        IAccessPolicy oldPolicy,\n', '        IAccessPolicy newPolicy\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev allows to change access control mechanism for this contract\n', '    ///     this method must be itself access controlled, see AccessControlled implementation and notice below\n', '    /// @notice it is a huge issue for Solidity that modifiers are not part of function signature\n', '    ///     then interfaces could be used for example to control access semantics\n', '    /// @param newPolicy new access policy to controll this contract\n', '    /// @param newAccessController address of ROLE_ACCESS_CONTROLLER of new policy that can set access to this contract\n', '    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n', '        public;\n', '\n', '    function accessPolicy()\n', '        public\n', '        constant\n', '        returns (IAccessPolicy);\n', '\n', '}\n', '\n', 'contract StandardRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', "    // @notice Soldity somehow doesn't evaluate this compile time\n", '    // @dev role which has rights to change permissions and set new policy in contract, keccak256("AccessController")\n', '    bytes32 internal constant ROLE_ACCESS_CONTROLLER = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n', '}\n', '\n', '/// @title Granular code execution permissions\n', '/// @notice Intended to replace existing Ownable pattern with more granular permissions set to execute smart contract functions\n', "///     for each function where 'only' modifier is applied, IAccessPolicy implementation is called to evaluate if msg.sender belongs to required role for contract being called.\n", '///     Access evaluation specific belong to IAccessPolicy implementation, see RoleBasedAccessPolicy for details.\n', '/// @dev Should be inherited by a contract requiring such permissions controll. IAccessPolicy must be provided in constructor. Access policy may be replaced to a different one\n', '///     by msg.sender with ROLE_ACCESS_CONTROLLER role\n', 'contract AccessControlled is IAccessControlled, StandardRoles {\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    IAccessPolicy private _accessPolicy;\n', '\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', "    /// @dev limits function execution only to senders assigned to required 'role'\n", '    modifier only(bytes32 role) {\n', '        require(_accessPolicy.allowed(msg.sender, role, this, msg.sig));\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor(IAccessPolicy policy) internal {\n', '        require(address(policy) != 0x0);\n', '        _accessPolicy = policy;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements IAccessControlled\n', '    //\n', '\n', '    function setAccessPolicy(IAccessPolicy newPolicy, address newAccessController)\n', '        public\n', '        only(ROLE_ACCESS_CONTROLLER)\n', '    {\n', '        // ROLE_ACCESS_CONTROLLER must be present\n', '        // under the new policy. This provides some\n', '        // protection against locking yourself out.\n', '        require(newPolicy.allowed(newAccessController, ROLE_ACCESS_CONTROLLER, this, msg.sig));\n', '\n', '        // We can now safely set the new policy without foot shooting.\n', '        IAccessPolicy oldPolicy = _accessPolicy;\n', '        _accessPolicy = newPolicy;\n', '\n', '        // Log event\n', '        emit LogAccessPolicyChanged(msg.sender, oldPolicy, newPolicy);\n', '    }\n', '\n', '    function accessPolicy()\n', '        public\n', '        constant\n', '        returns (IAccessPolicy)\n', '    {\n', '        return _accessPolicy;\n', '    }\n', '}\n', '\n', '/// @title standard access roles of the Platform\n', '/// @dev constants are kept in CODE not in STORAGE so they are comparatively cheap\n', 'contract AccessRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    // NOTE: All roles are set to the keccak256 hash of the\n', '    // CamelCased role name, i.e.\n', '    // ROLE_LOCKED_ACCOUNT_ADMIN = keccak256("LockedAccountAdmin")\n', '\n', '    // May issue (generate) Neumarks\n', '    bytes32 internal constant ROLE_NEUMARK_ISSUER = 0x921c3afa1f1fff707a785f953a1e197bd28c9c50e300424e015953cbf120c06c;\n', '\n', '    // May burn Neumarks it owns\n', '    bytes32 internal constant ROLE_NEUMARK_BURNER = 0x19ce331285f41739cd3362a3ec176edffe014311c0f8075834fdd19d6718e69f;\n', '\n', '    // May create new snapshots on Neumark\n', '    bytes32 internal constant ROLE_SNAPSHOT_CREATOR = 0x08c1785afc57f933523bc52583a72ce9e19b2241354e04dd86f41f887e3d8174;\n', '\n', '    // May enable/disable transfers on Neumark\n', '    bytes32 internal constant ROLE_TRANSFER_ADMIN = 0xb6527e944caca3d151b1f94e49ac5e223142694860743e66164720e034ec9b19;\n', '\n', '    // may reclaim tokens/ether from contracts supporting IReclaimable interface\n', '    bytes32 internal constant ROLE_RECLAIMER = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n', '\n', '    // represents legally platform operator in case of forks and contracts with legal agreement attached. keccak256("PlatformOperatorRepresentative")\n', '    bytes32 internal constant ROLE_PLATFORM_OPERATOR_REPRESENTATIVE = 0xb2b321377653f655206f71514ff9f150d0822d062a5abcf220d549e1da7999f0;\n', '\n', '    // allows to deposit EUR-T and allow addresses to send and receive EUR-T. keccak256("EurtDepositManager")\n', '    bytes32 internal constant ROLE_EURT_DEPOSIT_MANAGER = 0x7c8ecdcba80ce87848d16ad77ef57cc196c208fc95c5638e4a48c681a34d4fe7;\n', '\n', '    // allows to register identities and change associated claims keccak256("IdentityManager")\n', '    bytes32 internal constant ROLE_IDENTITY_MANAGER = 0x32964e6bc50f2aaab2094a1d311be8bda920fc4fb32b2fb054917bdb153a9e9e;\n', '\n', '    // allows to replace controller on euro token and to destroy tokens without withdraw kecckak256("EurtLegalManager")\n', '    bytes32 internal constant ROLE_EURT_LEGAL_MANAGER = 0x4eb6b5806954a48eb5659c9e3982d5e75bfb2913f55199877d877f157bcc5a9b;\n', '\n', '    // allows to change known interfaces in universe kecckak256("UniverseManager")\n', '    bytes32 internal constant ROLE_UNIVERSE_MANAGER = 0xe8d8f8f9ea4b19a5a4368dbdace17ad71a69aadeb6250e54c7b4c7b446301738;\n', '\n', '    // allows to exchange gas for EUR-T keccak("GasExchange")\n', '    bytes32 internal constant ROLE_GAS_EXCHANGE = 0x9fe43636e0675246c99e96d7abf9f858f518b9442c35166d87f0934abef8a969;\n', '\n', '    // allows to set token exchange rates keccak("TokenRateOracle")\n', '    bytes32 internal constant ROLE_TOKEN_RATE_ORACLE = 0xa80c3a0c8a5324136e4c806a778583a2a980f378bdd382921b8d28dcfe965585;\n', '\n', '    // allows to disburse to the fee disbursal contract keccak("Disburser")\n', '    bytes32 internal constant ROLE_DISBURSER = 0xd7ea6093d11d866c9e8449f8bffd9da1387c530ee40ad54f0641425bb0ca33b7;\n', '\n', '    // allows to manage feedisbursal controller keccak("DisbursalManager")\n', '    bytes32 internal constant ROLE_DISBURSAL_MANAGER = 0x677f87f7b7ef7c97e42a7e6c85c295cf020c9f11eea1e49f6bf847d7aeae1475;\n', '\n', '}\n', '\n', '/// @title describes layout of claims in 256bit records stored for identities\n', '/// @dev intended to be derived by contracts requiring access to particular claims\n', 'contract IdentityRecord {\n', '\n', '    ////////////////////////\n', '    // Types\n', '    ////////////////////////\n', '\n', '    /// @dev here the idea is to have claims of size of uint256 and use this struct\n', '    ///     to translate in and out of this struct. until we do not cross uint256 we\n', '    ///     have binary compatibility\n', '    struct IdentityClaims {\n', '        bool isVerified; // 1 bit\n', '        bool isSophisticatedInvestor; // 1 bit\n', '        bool hasBankAccount; // 1 bit\n', '        bool accountFrozen; // 1 bit\n', '        // uint252 reserved\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// translates uint256 to struct\n', '    function deserializeClaims(bytes32 data) internal pure returns (IdentityClaims memory claims) {\n', '        // for memory layout of struct, each field below word length occupies whole word\n', '        assembly {\n', '            mstore(claims, and(data, 0x1))\n', '            mstore(add(claims, 0x20), div(and(data, 0x2), 0x2))\n', '            mstore(add(claims, 0x40), div(and(data, 0x4), 0x4))\n', '            mstore(add(claims, 0x60), div(and(data, 0x8), 0x8))\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title interface storing and retrieve 256bit claims records for identity\n', '/// actual format of record is decoupled from storage (except maximum size)\n', 'contract IIdentityRegistry {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    /// provides information on setting claims\n', '    event LogSetClaims(\n', '        address indexed identity,\n', '        bytes32 oldClaims,\n', '        bytes32 newClaims\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// get claims for identity\n', '    function getClaims(address identity) public constant returns (bytes32);\n', '\n', '    /// set claims for identity\n', '    /// @dev odlClaims and newClaims used for optimistic locking. to override with newClaims\n', '    ///     current claims must be oldClaims\n', '    function setClaims(address identity, bytes32 oldClaims, bytes32 newClaims) public;\n', '}\n', '\n', '/// @title known interfaces (services) of the platform\n', '/// "known interface" is a unique id of service provided by the platform and discovered via Universe contract\n', '///  it does not refer to particular contract/interface ABI, particular service may be delivered via different implementations\n', '///  however for a few contracts we commit platform to particular implementation (all ICBM Contracts, Universe itself etc.)\n', '/// @dev constants are kept in CODE not in STORAGE so they are comparatively cheap\n', 'contract KnownInterfaces {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    // NOTE: All interface are set to the keccak256 hash of the\n', '    // CamelCased interface or singleton name, i.e.\n', '    // KNOWN_INTERFACE_NEUMARK = keccak256("Neumark")\n', '\n', '    // EIP 165 + EIP 820 should be use instead but it seems they are far from finished\n', '    // also interface signature should be build automatically by solidity. otherwise it is a pure hassle\n', '\n', '    // neumark token interface and sigleton keccak256("Neumark")\n', '    bytes4 internal constant KNOWN_INTERFACE_NEUMARK = 0xeb41a1bd;\n', '\n', '    // ether token interface and singleton keccak256("EtherToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_ETHER_TOKEN = 0x8cf73cf1;\n', '\n', '    // euro token interface and singleton keccak256("EuroToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_EURO_TOKEN = 0x83c3790b;\n', '\n', '    // euro token interface and singleton keccak256("EuroTokenController")\n', '    bytes4 internal constant KNOWN_INTERFACE_EURO_TOKEN_CONTROLLER = 0x33ac4661;\n', '\n', '    // identity registry interface and singleton keccak256("IIdentityRegistry")\n', '    bytes4 internal constant KNOWN_INTERFACE_IDENTITY_REGISTRY = 0x0a72e073;\n', '\n', '    // currency rates oracle interface and singleton keccak256("ITokenExchangeRateOracle")\n', '    bytes4 internal constant KNOWN_INTERFACE_TOKEN_EXCHANGE_RATE_ORACLE = 0xc6e5349e;\n', '\n', '    // fee disbursal interface and singleton keccak256("IFeeDisbursal")\n', '    bytes4 internal constant KNOWN_INTERFACE_FEE_DISBURSAL = 0xf4c848e8;\n', '\n', '    // platform portfolio holding equity tokens belonging to NEU holders keccak256("IPlatformPortfolio");\n', '    bytes4 internal constant KNOWN_INTERFACE_PLATFORM_PORTFOLIO = 0xaa1590d0;\n', '\n', '    // token exchange interface and singleton keccak256("ITokenExchange")\n', '    bytes4 internal constant KNOWN_INTERFACE_TOKEN_EXCHANGE = 0xddd7a521;\n', '\n', '    // service exchanging euro token for gas ("IGasTokenExchange")\n', '    bytes4 internal constant KNOWN_INTERFACE_GAS_EXCHANGE = 0x89dbc6de;\n', '\n', '    // access policy interface and singleton keccak256("IAccessPolicy")\n', '    bytes4 internal constant KNOWN_INTERFACE_ACCESS_POLICY = 0xb05049d9;\n', '\n', '    // euro lock account (upgraded) keccak256("LockedAccount:Euro")\n', '    bytes4 internal constant KNOWN_INTERFACE_EURO_LOCK = 0x2347a19e;\n', '\n', '    // ether lock account (upgraded) keccak256("LockedAccount:Ether")\n', '    bytes4 internal constant KNOWN_INTERFACE_ETHER_LOCK = 0x978a6823;\n', '\n', '    // icbm euro lock account keccak256("ICBMLockedAccount:Euro")\n', '    bytes4 internal constant KNOWN_INTERFACE_ICBM_EURO_LOCK = 0x36021e14;\n', '\n', '    // ether lock account (upgraded) keccak256("ICBMLockedAccount:Ether")\n', '    bytes4 internal constant KNOWN_INTERFACE_ICBM_ETHER_LOCK = 0x0b58f006;\n', '\n', '    // ether token interface and singleton keccak256("ICBMEtherToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_ICBM_ETHER_TOKEN = 0xae8b50b9;\n', '\n', '    // euro token interface and singleton keccak256("ICBMEuroToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_ICBM_EURO_TOKEN = 0xc2c6cd72;\n', '\n', '    // ICBM commitment interface interface and singleton keccak256("ICBMCommitment")\n', '    bytes4 internal constant KNOWN_INTERFACE_ICBM_COMMITMENT = 0x7f2795ef;\n', '\n', '    // ethereum fork arbiter interface and singleton keccak256("IEthereumForkArbiter")\n', '    bytes4 internal constant KNOWN_INTERFACE_FORK_ARBITER = 0x2fe7778c;\n', '\n', '    // Platform terms interface and singletong keccak256("PlatformTerms")\n', '    bytes4 internal constant KNOWN_INTERFACE_PLATFORM_TERMS = 0x75ecd7f8;\n', '\n', '    // for completness we define Universe service keccak256("Universe");\n', '    bytes4 internal constant KNOWN_INTERFACE_UNIVERSE = 0xbf202454;\n', '\n', '    // ETO commitment interface (collection) keccak256("ICommitment")\n', '    bytes4 internal constant KNOWN_INTERFACE_COMMITMENT = 0xfa0e0c60;\n', '\n', '    // Equity Token Controller interface (collection) keccak256("IEquityTokenController")\n', '    bytes4 internal constant KNOWN_INTERFACE_EQUITY_TOKEN_CONTROLLER = 0xfa30b2f1;\n', '\n', '    // Equity Token interface (collection) keccak256("IEquityToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_EQUITY_TOKEN = 0xab9885bb;\n', '\n', '    // Payment tokens (collection) keccak256("PaymentToken")\n', '    bytes4 internal constant KNOWN_INTERFACE_PAYMENT_TOKEN = 0xb2a0042a;\n', '}\n', '\n', '/// @title uniquely identifies deployable (non-abstract) platform contract\n', '/// @notice cheap way of assigning implementations to knownInterfaces which represent system services\n', '///         unfortunatelly ERC165 does not include full public interface (ABI) and does not provide way to list implemented interfaces\n', '///         EIP820 still in the making\n', '/// @dev ids are generated as follows keccak256("neufund-platform:<contract name>")\n', '///      ids roughly correspond to ABIs\n', 'contract IContractId {\n', '    /// @param id defined as above\n', '    /// @param version implementation version\n', '    function contractId() public pure returns (bytes32 id, uint256 version);\n', '}\n', '\n', '/// @title granular token controller based on MSnapshotToken observer pattern\n', 'contract ITokenController {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice see MTokenTransferController\n', '    /// @dev additionally passes broker that is executing transaction between from and to\n', '    ///      for unbrokered transfer, broker == from\n', '    function onTransfer(address broker, address from, address to, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow);\n', '\n', '    /// @notice see MTokenAllowanceController\n', '    function onApprove(address owner, address spender, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow);\n', '\n', '    /// @notice see MTokenMint\n', '    function onGenerateTokens(address sender, address owner, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow);\n', '\n', '    /// @notice see MTokenMint\n', '    function onDestroyTokens(address sender, address owner, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow);\n', '\n', '    /// @notice controls if sender can change controller to newController\n', '    /// @dev for this to succeed TYPICALLY current controller must be already migrated to a new one\n', '    function onChangeTokenController(address sender, address newController)\n', '        public\n', '        constant\n', '        returns (bool);\n', '\n', '    /// @notice overrides spender allowance\n', '    /// @dev may be used to implemented forced transfers in which token controller may override approved allowance\n', '    ///      with any > 0 value and then use transferFrom to execute such transfer\n', '    ///      This by definition creates non-trustless token so do not implement this call if you do not need trustless transfers!\n', '    ///      Implementer should not allow approve() to be executed if there is an overrride\n', '    //       Implemented should return allowance() taking into account override\n', '    function onAllowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 allowanceOverride);\n', '}\n', '\n', 'contract IEthereumForkArbiter {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogForkAnnounced(\n', '        string name,\n', '        string url,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event LogForkSigned(\n', '        uint256 blockNumber,\n', '        bytes32 blockHash\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function nextForkName()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function nextForkUrl()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function nextForkBlockNumber()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', '    function lastSignedBlockNumber()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', '    function lastSignedBlockHash()\n', '        public\n', '        constant\n', '        returns (bytes32);\n', '\n', '    function lastSignedTimestamp()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title legally binding smart contract\n', ' * @dev General approach to paring legal and smart contracts:\n', ' * 1. All terms and agreement are between two parties: here between smart conctract legal representation and platform investor.\n', ' * 2. Parties are represented by public Ethereum addresses. Platform investor is and address that holds and controls funds and receives and controls Neumark token\n', ' * 3. Legal agreement has immutable part that corresponds to smart contract code and mutable part that may change for example due to changing regulations or other externalities that smart contract does not control.\n', ' * 4. There should be a provision in legal document that future changes in mutable part cannot change terms of immutable part.\n', ' * 5. Immutable part links to corresponding smart contract via its address.\n', ' * 6. Additional provision should be added if smart contract supports it\n', ' *  a. Fork provision\n', ' *  b. Bugfixing provision (unilateral code update mechanism)\n', ' *  c. Migration provision (bilateral code update mechanism)\n', ' *\n', ' * Details on Agreement base class:\n', " * 1. We bind smart contract to legal contract by storing uri (preferably ipfs or hash) of the legal contract in the smart contract. It is however crucial that such binding is done by smart contract legal representation so transaction establishing the link must be signed by respective wallet ('amendAgreement')\n", " * 2. Mutable part of agreement may change. We should be able to amend the uri later. Previous amendments should not be lost and should be retrievable (`amendAgreement` and 'pastAgreement' functions).\n", " * 3. It is up to deriving contract to decide where to put 'acceptAgreement' modifier. However situation where there is no cryptographic proof that given address was really acting in the transaction should be avoided, simplest example being 'to' address in `transfer` function of ERC20.\n", ' *\n', '**/\n', 'contract IAgreement {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogAgreementAccepted(\n', '        address indexed accepter\n', '    );\n', '\n', '    event LogAgreementAmended(\n', '        address contractLegalRepresentative,\n', '        string agreementUri\n', '    );\n', '\n', '    /// @dev should have access restrictions so only contractLegalRepresentative may call\n', '    function amendAgreement(string agreementUri) public;\n', '\n', '    /// returns information on last amendment of the agreement\n', '    /// @dev MUST revert if no agreements were set\n', '    function currentAgreement()\n', '        public\n', '        constant\n', '        returns\n', '        (\n', '            address contractLegalRepresentative,\n', '            uint256 signedBlockTimestamp,\n', '            string agreementUri,\n', '            uint256 index\n', '        );\n', '\n', '    /// returns information on amendment with index\n', '    /// @dev MAY revert on non existing amendment, indexing starts from 0\n', '    function pastAgreement(uint256 amendmentIndex)\n', '        public\n', '        constant\n', '        returns\n', '        (\n', '            address contractLegalRepresentative,\n', '            uint256 signedBlockTimestamp,\n', '            string agreementUri,\n', '            uint256 index\n', '        );\n', '\n', '    /// returns the number of block at wchich `signatory` signed agreement\n', '    /// @dev MUST return 0 if not signed\n', '    function agreementSignedAtBlock(address signatory)\n', '        public\n', '        constant\n', '        returns (uint256 blockNo);\n', '\n', '    /// returns number of amendments made by contractLegalRepresentative\n', '    function amendmentsCount()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title legally binding smart contract\n', ' * @dev read IAgreement for details\n', '**/\n', 'contract Agreement is\n', '    IAgreement,\n', '    AccessControlled,\n', '    AccessRoles\n', '{\n', '\n', '    ////////////////////////\n', '    // Type declarations\n', '    ////////////////////////\n', '\n', '    /// @notice agreement with signature of the platform operator representative\n', '    struct SignedAgreement {\n', '        address contractLegalRepresentative;\n', '        uint256 signedBlockTimestamp;\n', '        string agreementUri;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', '    IEthereumForkArbiter private ETHEREUM_FORK_ARBITER;\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // stores all amendments to the agreement, first amendment is the original\n', '    SignedAgreement[] private _amendments;\n', '\n', '    // stores block numbers of all addresses that signed the agreement (signatory => block number)\n', '    mapping(address => uint256) private _signatories;\n', '\n', '    ////////////////////////\n', '    // Modifiers\n', '    ////////////////////////\n', '\n', '    /// @notice logs that agreement was accepted by platform user\n', "    /// @dev intended to be added to functions that if used make 'accepter' origin to enter legally binding agreement\n", '    modifier acceptAgreement(address accepter) {\n', '        acceptAgreementInternal(accepter);\n', '        _;\n', '    }\n', '\n', '    modifier onlyLegalRepresentative(address legalRepresentative) {\n', '        require(mCanAmend(legalRepresentative));\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor(IAccessPolicy accessPolicy, IEthereumForkArbiter forkArbiter)\n', '        AccessControlled(accessPolicy)\n', '        internal\n', '    {\n', '        require(forkArbiter != IEthereumForkArbiter(0x0));\n', '        ETHEREUM_FORK_ARBITER = forkArbiter;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function amendAgreement(string agreementUri)\n', '        public\n', '        onlyLegalRepresentative(msg.sender)\n', '    {\n', '        SignedAgreement memory amendment = SignedAgreement({\n', '            contractLegalRepresentative: msg.sender,\n', '            signedBlockTimestamp: block.timestamp,\n', '            agreementUri: agreementUri\n', '        });\n', '        _amendments.push(amendment);\n', '        emit LogAgreementAmended(msg.sender, agreementUri);\n', '    }\n', '\n', '    function ethereumForkArbiter()\n', '        public\n', '        constant\n', '        returns (IEthereumForkArbiter)\n', '    {\n', '        return ETHEREUM_FORK_ARBITER;\n', '    }\n', '\n', '    function currentAgreement()\n', '        public\n', '        constant\n', '        returns\n', '        (\n', '            address contractLegalRepresentative,\n', '            uint256 signedBlockTimestamp,\n', '            string agreementUri,\n', '            uint256 index\n', '        )\n', '    {\n', '        require(_amendments.length > 0);\n', '        uint256 last = _amendments.length - 1;\n', '        SignedAgreement storage amendment = _amendments[last];\n', '        return (\n', '            amendment.contractLegalRepresentative,\n', '            amendment.signedBlockTimestamp,\n', '            amendment.agreementUri,\n', '            last\n', '        );\n', '    }\n', '\n', '    function pastAgreement(uint256 amendmentIndex)\n', '        public\n', '        constant\n', '        returns\n', '        (\n', '            address contractLegalRepresentative,\n', '            uint256 signedBlockTimestamp,\n', '            string agreementUri,\n', '            uint256 index\n', '        )\n', '    {\n', '        SignedAgreement storage amendment = _amendments[amendmentIndex];\n', '        return (\n', '            amendment.contractLegalRepresentative,\n', '            amendment.signedBlockTimestamp,\n', '            amendment.agreementUri,\n', '            amendmentIndex\n', '        );\n', '    }\n', '\n', '    function agreementSignedAtBlock(address signatory)\n', '        public\n', '        constant\n', '        returns (uint256 blockNo)\n', '    {\n', '        return _signatories[signatory];\n', '    }\n', '\n', '    function amendmentsCount()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _amendments.length;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// provides direct access to derived contract\n', '    function acceptAgreementInternal(address accepter)\n', '        internal\n', '    {\n', '        if(_signatories[accepter] == 0) {\n', '            require(_amendments.length > 0);\n', '            _signatories[accepter] = block.number;\n', '            emit LogAgreementAccepted(accepter);\n', '        }\n', '    }\n', '\n', '    //\n', '    // MAgreement Internal interface (todo: extract)\n', '    //\n', '\n', '    /// default amend permission goes to ROLE_PLATFORM_OPERATOR_REPRESENTATIVE\n', '    function mCanAmend(address legalRepresentative)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return accessPolicy().allowed(legalRepresentative, ROLE_PLATFORM_OPERATOR_REPRESENTATIVE, this, msg.sig);\n', '    }\n', '}\n', '\n', 'contract IsContract {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    function isContract(address addr)\n', '        internal\n', '        constant\n', '        returns (bool)\n', '    {\n', '        uint256 size;\n', '        // takes 700 gas\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', 'contract NeumarkIssuanceCurve {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    // maximum number of neumarks that may be created\n', '    uint256 private constant NEUMARK_CAP = 1500000000000000000000000000;\n', '\n', '    // initial neumark reward fraction (controls curve steepness)\n', '    uint256 private constant INITIAL_REWARD_FRACTION = 6500000000000000000;\n', '\n', '    // stop issuing new Neumarks above this Euro value (as it goes quickly to zero)\n', '    uint256 private constant ISSUANCE_LIMIT_EUR_ULPS = 8300000000000000000000000000;\n', '\n', '    // approximate curve linearly above this Euro value\n', '    uint256 private constant LINEAR_APPROX_LIMIT_EUR_ULPS = 2100000000000000000000000000;\n', '    uint256 private constant NEUMARKS_AT_LINEAR_LIMIT_ULPS = 1499832501287264827896539871;\n', '\n', '    uint256 private constant TOT_LINEAR_NEUMARKS_ULPS = NEUMARK_CAP - NEUMARKS_AT_LINEAR_LIMIT_ULPS;\n', '    uint256 private constant TOT_LINEAR_EUR_ULPS = ISSUANCE_LIMIT_EUR_ULPS - LINEAR_APPROX_LIMIT_EUR_ULPS;\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice returns additional amount of neumarks issued for euroUlps at totalEuroUlps\n', '    /// @param totalEuroUlps actual curve position from which neumarks will be issued\n', '    /// @param euroUlps amount against which neumarks will be issued\n', '    function incremental(uint256 totalEuroUlps, uint256 euroUlps)\n', '        public\n', '        pure\n', '        returns (uint256 neumarkUlps)\n', '    {\n', '        require(totalEuroUlps + euroUlps >= totalEuroUlps);\n', '        uint256 from = cumulative(totalEuroUlps);\n', '        uint256 to = cumulative(totalEuroUlps + euroUlps);\n', '        // as expansion is not monotonic for large totalEuroUlps, assert below may fail\n', '        // example: totalEuroUlps=1.999999999999999999999000000e+27 and euroUlps=50\n', '        assert(to >= from);\n', '        return to - from;\n', '    }\n', '\n', '    /// @notice returns amount of euro corresponding to burned neumarks\n', '    /// @param totalEuroUlps actual curve position from which neumarks will be burned\n', '    /// @param burnNeumarkUlps amount of neumarks to burn\n', '    function incrementalInverse(uint256 totalEuroUlps, uint256 burnNeumarkUlps)\n', '        public\n', '        pure\n', '        returns (uint256 euroUlps)\n', '    {\n', '        uint256 totalNeumarkUlps = cumulative(totalEuroUlps);\n', '        require(totalNeumarkUlps >= burnNeumarkUlps);\n', '        uint256 fromNmk = totalNeumarkUlps - burnNeumarkUlps;\n', '        uint newTotalEuroUlps = cumulativeInverse(fromNmk, 0, totalEuroUlps);\n', '        // yes, this may overflow due to non monotonic inverse function\n', '        assert(totalEuroUlps >= newTotalEuroUlps);\n', '        return totalEuroUlps - newTotalEuroUlps;\n', '    }\n', '\n', '    /// @notice returns amount of euro corresponding to burned neumarks\n', '    /// @param totalEuroUlps actual curve position from which neumarks will be burned\n', '    /// @param burnNeumarkUlps amount of neumarks to burn\n', '    /// @param minEurUlps euro amount to start inverse search from, inclusive\n', '    /// @param maxEurUlps euro amount to end inverse search to, inclusive\n', '    function incrementalInverse(uint256 totalEuroUlps, uint256 burnNeumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\n', '        public\n', '        pure\n', '        returns (uint256 euroUlps)\n', '    {\n', '        uint256 totalNeumarkUlps = cumulative(totalEuroUlps);\n', '        require(totalNeumarkUlps >= burnNeumarkUlps);\n', '        uint256 fromNmk = totalNeumarkUlps - burnNeumarkUlps;\n', '        uint newTotalEuroUlps = cumulativeInverse(fromNmk, minEurUlps, maxEurUlps);\n', '        // yes, this may overflow due to non monotonic inverse function\n', '        assert(totalEuroUlps >= newTotalEuroUlps);\n', '        return totalEuroUlps - newTotalEuroUlps;\n', '    }\n', '\n', '    /// @notice finds total amount of neumarks issued for given amount of Euro\n', '    /// @dev binomial expansion does not guarantee monotonicity on uint256 precision for large euroUlps\n', '    ///     function below is not monotonic\n', '    function cumulative(uint256 euroUlps)\n', '        public\n', '        pure\n', '        returns(uint256 neumarkUlps)\n', '    {\n', '        // Return the cap if euroUlps is above the limit.\n', '        if (euroUlps >= ISSUANCE_LIMIT_EUR_ULPS) {\n', '            return NEUMARK_CAP;\n', '        }\n', '        // use linear approximation above limit below\n', '        // binomial expansion does not guarantee monotonicity on uint256 precision for large euroUlps\n', '        if (euroUlps >= LINEAR_APPROX_LIMIT_EUR_ULPS) {\n', '            // (euroUlps - LINEAR_APPROX_LIMIT_EUR_ULPS) is small so expression does not overflow\n', '            return NEUMARKS_AT_LINEAR_LIMIT_ULPS + (TOT_LINEAR_NEUMARKS_ULPS * (euroUlps - LINEAR_APPROX_LIMIT_EUR_ULPS)) / TOT_LINEAR_EUR_ULPS;\n', '        }\n', '\n', '        // Approximate cap-cap·(1-1/D)^n using the Binomial expansion\n', '        // http://galileo.phys.virginia.edu/classes/152.mf1i.spring02/Exponential_Function.htm\n', '        // Function[imax, -CAP*Sum[(-IR*EUR/CAP)^i/Factorial[i], {i, imax}]]\n', '        // which may be simplified to\n', '        // Function[imax, -CAP*Sum[(EUR)^i/(Factorial[i]*(-d)^i), {i, 1, imax}]]\n', '        // where d = cap/initial_reward\n', '        uint256 d = 230769230769230769230769231; // NEUMARK_CAP / INITIAL_REWARD_FRACTION\n', '        uint256 term = NEUMARK_CAP;\n', '        uint256 sum = 0;\n', '        uint256 denom = d;\n', '        do assembly {\n', '            // We use assembler primarily to avoid the expensive\n', '            // divide-by-zero check solc inserts for the / operator.\n', '            term  := div(mul(term, euroUlps), denom)\n', '            sum   := add(sum, term)\n', '            denom := add(denom, d)\n', '            // sub next term as we have power of negative value in the binomial expansion\n', '            term  := div(mul(term, euroUlps), denom)\n', '            sum   := sub(sum, term)\n', '            denom := add(denom, d)\n', '        } while (term != 0);\n', '        return sum;\n', '    }\n', '\n', '    /// @notice find issuance curve inverse by binary search\n', '    /// @param neumarkUlps neumark amount to compute inverse for\n', '    /// @param minEurUlps minimum search range for the inverse, inclusive\n', '    /// @param maxEurUlps maxium search range for the inverse, inclusive\n', '    /// @dev in case of approximate search (no exact inverse) upper element of minimal search range is returned\n', '    /// @dev in case of many possible inverses, the lowest one will be used (if range permits)\n', '    /// @dev corresponds to a linear search that returns first euroUlp value that has cumulative() equal or greater than neumarkUlps\n', '    function cumulativeInverse(uint256 neumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\n', '        public\n', '        pure\n', '        returns (uint256 euroUlps)\n', '    {\n', '        require(maxEurUlps >= minEurUlps);\n', '        require(cumulative(minEurUlps) <= neumarkUlps);\n', '        require(cumulative(maxEurUlps) >= neumarkUlps);\n', '        uint256 min = minEurUlps;\n', '        uint256 max = maxEurUlps;\n', '\n', '        // Binary search\n', '        while (max > min) {\n', '            uint256 mid = (max + min) / 2;\n', '            uint256 val = cumulative(mid);\n', '            // exact solution should not be used, a late points of the curve when many euroUlps are needed to\n', '            // increase by one nmkUlp this will lead to  "indeterministic" inverse values that depend on the initial min and max\n', '            // and further binary division -> you can land at any of the euro value that is mapped to the same nmk value\n', '            // with condition below removed, binary search will point to the lowest eur value possible which is good because it cannot be exploited even with 0 gas costs\n', '            /* if (val == neumarkUlps) {\n', '                return mid;\n', '            }*/\n', '            // NOTE: approximate search (no inverse) must return upper element of the final range\n', '            //  last step of approximate search is always (min, min+1) so new mid is (2*min+1)/2 => min\n', '            //  so new min = mid + 1 = max which was upper range. and that ends the search\n', '            // NOTE: when there are multiple inverses for the same neumarkUlps, the `max` will be dragged down\n', '            //  by `max = mid` expression to the lowest eur value of inverse. works only for ranges that cover all points of multiple inverse\n', '            if (val < neumarkUlps) {\n', '                min = mid + 1;\n', '            } else {\n', '                max = mid;\n', '            }\n', '        }\n', '        // NOTE: It is possible that there is no inverse\n', '        //  for example curve(0) = 0 and curve(1) = 6, so\n', '        //  there is no value y such that curve(y) = 5.\n', '        //  When there is no inverse, we must return upper element of last search range.\n', '        //  This has the effect of reversing the curve less when\n', '        //  burning Neumarks. This ensures that Neumarks can always\n', '        //  be burned. It also ensure that the total supply of Neumarks\n', '        //  remains below the cap.\n', '        return max;\n', '    }\n', '\n', '    function neumarkCap()\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return NEUMARK_CAP;\n', '    }\n', '\n', '    function initialRewardFraction()\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return INITIAL_REWARD_FRACTION;\n', '    }\n', '}\n', '\n', 'contract IBasicToken {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', "    /// @param owner The address that's balance is being requested\n", '    /// @return The balance of `owner` at the current block\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance);\n', '\n', '    /// @notice Send `amount` tokens to `to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address to, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', '/// @title allows deriving contract to recover any token or ether that it has balance of\n', '/// @notice note that this opens your contracts to claims from various people saying they lost tokens and they want them back\n', '///     be ready to handle such claims\n', '/// @dev use with care!\n', "///     1. ROLE_RECLAIMER is allowed to claim tokens, it's not returning tokens to original owner\n", '///     2. in derived contract that holds any token by design you must override `reclaim` and block such possibility.\n', '///         see ICBMLockedAccount as an example\n', 'contract Reclaimable is AccessControlled, AccessRoles {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    IBasicToken constant internal RECLAIM_ETHER = IBasicToken(0x0);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function reclaim(IBasicToken token)\n', '        public\n', '        only(ROLE_RECLAIMER)\n', '    {\n', '        address reclaimer = msg.sender;\n', '        if(token == RECLAIM_ETHER) {\n', '            reclaimer.transfer(address(this).balance);\n', '        } else {\n', '            uint256 balance = token.balanceOf(this);\n', '            require(token.transfer(reclaimer, balance));\n', '        }\n', '    }\n', '}\n', '\n', '/// @title advances snapshot id on demand\n', '/// @dev see Snapshot folder for implementation examples ie. DailyAndSnapshotable contract\n', 'contract ISnapshotable {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    /// @dev should log each new snapshot id created, including snapshots created automatically via MSnapshotPolicy\n', '    event LogSnapshotCreated(uint256 snapshotId);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// always creates new snapshot id which gets returned\n', '    /// however, there is no guarantee that any snapshot will be created with this id, this depends on the implementation of MSnaphotPolicy\n', '    function createSnapshot()\n', '        public\n', '        returns (uint256);\n', '\n', "    /// upper bound of series snapshotIds for which there's a value\n", '    function currentSnapshotId()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '}\n', '\n', '/// @title Abstracts snapshot id creation logics\n', '/// @dev Mixin (internal interface) of the snapshot policy which abstracts snapshot id creation logics from Snapshot contract\n', '/// @dev to be implemented and such implementation should be mixed with Snapshot-derived contract, see EveryBlock for simplest example of implementation and StandardSnapshotToken\n', 'contract MSnapshotPolicy {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    // The snapshot Ids need to be strictly increasing.\n', '    // Whenever the snaspshot id changes, a new snapshot will be created.\n', "    // As long as the same snapshot id is being returned, last snapshot will be updated as this indicates that snapshot id didn't change\n", '    //\n', '    // Values passed to `hasValueAt` and `valuteAt` are required\n', '    // to be less or equal to `mCurrentSnapshotId()`.\n', '    function mAdvanceSnapshotId()\n', '        internal\n', '        returns (uint256);\n', '\n', '    // this is a version of mAdvanceSnapshotId that does not modify state but MUST return the same value\n', '    // it is required to implement ITokenSnapshots interface cleanly\n', '    function mCurrentSnapshotId()\n', '        internal\n', '        constant\n', '        returns (uint256);\n', '\n', '}\n', '\n', '/// @title creates new snapshot id on each day boundary\n', '/// @dev snapshot id is unix timestamp of current day boundary\n', 'contract Daily is MSnapshotPolicy {\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    // Floor[2**128 / 1 days]\n', '    uint256 private MAX_TIMESTAMP = 3938453320844195178974243141571391;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @param start snapshotId from which to start generating values, used to prevent cloning from incompatible schemes\n', '    /// @dev start must be for the same day or 0, required for token cloning\n', '    constructor(uint256 start) internal {\n', '        // 0 is invalid value as we are past unix epoch\n', '        if (start > 0) {\n', '            uint256 base = dayBase(uint128(block.timestamp));\n', '            // must be within current day base\n', '            require(start >= base);\n', '            // dayBase + 2**128 will not overflow as it is based on block.timestamp\n', '            require(start < base + 2**128);\n', '        }\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function snapshotAt(uint256 timestamp)\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        require(timestamp < MAX_TIMESTAMP);\n', '\n', '        return dayBase(uint128(timestamp));\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements MSnapshotPolicy\n', '    //\n', '\n', '    function mAdvanceSnapshotId()\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        return mCurrentSnapshotId();\n', '    }\n', '\n', '    function mCurrentSnapshotId()\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        // disregard overflows on block.timestamp, see MAX_TIMESTAMP\n', '        return dayBase(uint128(block.timestamp));\n', '    }\n', '\n', '    function dayBase(uint128 timestamp)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // Round down to the start of the day (00:00 UTC) and place in higher 128bits\n', '        return 2**128 * (uint256(timestamp) / 1 days);\n', '    }\n', '}\n', '\n', '/// @title creates snapshot id on each day boundary and allows to create additional snapshots within a given day\n', '/// @dev snapshots are encoded in single uint256, where high 128 bits represents a day number (from unix epoch) and low 128 bits represents additional snapshots within given day create via ISnapshotable\n', 'contract DailyAndSnapshotable is\n', '    Daily,\n', '    ISnapshotable\n', '{\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    uint256 private _currentSnapshotId;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @param start snapshotId from which to start generating values\n', '    /// @dev start must be for the same day or 0, required for token cloning\n', '    constructor(uint256 start)\n', '        internal\n', '        Daily(start)\n', '    {\n', '        if (start > 0) {\n', '            _currentSnapshotId = start;\n', '        }\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements ISnapshotable\n', '    //\n', '\n', '    function createSnapshot()\n', '        public\n', '        returns (uint256)\n', '    {\n', '        uint256 base = dayBase(uint128(block.timestamp));\n', '\n', '        if (base > _currentSnapshotId) {\n', '            // New day has started, create snapshot for midnight\n', '            _currentSnapshotId = base;\n', '        } else {\n', '            // within single day, increase counter (assume 2**128 will not be crossed)\n', '            _currentSnapshotId += 1;\n', '        }\n', '\n', '        // Log and return\n', '        emit LogSnapshotCreated(_currentSnapshotId);\n', '        return _currentSnapshotId;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements MSnapshotPolicy\n', '    //\n', '\n', '    function mAdvanceSnapshotId()\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        uint256 base = dayBase(uint128(block.timestamp));\n', '\n', '        // New day has started\n', '        if (base > _currentSnapshotId) {\n', '            _currentSnapshotId = base;\n', '            emit LogSnapshotCreated(base);\n', '        }\n', '\n', '        return _currentSnapshotId;\n', '    }\n', '\n', '    function mCurrentSnapshotId()\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 base = dayBase(uint128(block.timestamp));\n', '\n', '        return base > _currentSnapshotId ? base : _currentSnapshotId;\n', '    }\n', '}\n', '\n', 'contract ITokenMetadata {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function symbol()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function name()\n', '        public\n', '        constant\n', '        returns (string);\n', '\n', '    function decimals()\n', '        public\n', '        constant\n', '        returns (uint8);\n', '}\n', '\n', '/// @title adds token metadata to token contract\n', '/// @dev see Neumark for example implementation\n', 'contract TokenMetadata is ITokenMetadata {\n', '\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', "    // The Token's name: e.g. DigixDAO Tokens\n", '    string private NAME;\n', '\n', '    // An identifier: e.g. REP\n', '    string private SYMBOL;\n', '\n', '    // Number of decimals of the smallest unit\n', '    uint8 private DECIMALS;\n', '\n', '    // An arbitrary versioning scheme\n', '    string private VERSION;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @notice Constructor to set metadata\n', '    /// @param tokenName Name of the new token\n', '    /// @param decimalUnits Number of decimals of the new token\n', '    /// @param tokenSymbol Token Symbol for the new token\n', '    /// @param version Token version ie. when cloning is used\n', '    constructor(\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        string version\n', '    )\n', '        public\n', '    {\n', '        NAME = tokenName;                                 // Set the name\n', '        SYMBOL = tokenSymbol;                             // Set the symbol\n', '        DECIMALS = decimalUnits;                          // Set the decimals\n', '        VERSION = version;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function name()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return NAME;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return SYMBOL;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        constant\n', '        returns (uint8)\n', '    {\n', '        return DECIMALS;\n', '    }\n', '\n', '    function version()\n', '        public\n', '        constant\n', '        returns (string)\n', '    {\n', '        return VERSION;\n', '    }\n', '}\n', '\n', 'contract IERC20Allowance {\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 amount\n', '    );\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param owner The address of the account that owns the token\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of owner that spender is allowed\n', '    ///  to spend\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining);\n', '\n', '    /// @notice `msg.sender` approves `spender` to spend `amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '    /// @notice Send `amount` tokens to `to` from `from` on the condition it\n', '    ///  is approved by `from`\n', '    /// @param from The address holding the tokens being transferred\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address from, address to, uint256 amount)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC20Token is IBasicToken, IERC20Allowance {\n', '\n', '}\n', '\n', '/// @title controls spending approvals\n', '/// @dev TokenAllowance observes this interface, Neumark contract implements it\n', 'contract MTokenAllowanceController {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param owner The address that calls `approve()`\n', '    /// @param spender The spender in the `approve()` call\n', '    /// @param amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function mOnApprove(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        returns (bool allow);\n', '\n', '    /// @notice Allows to override allowance approved by the owner\n', '    ///         Primary role is to enable forced transfers, do not override if you do not like it\n', '    ///         Following behavior is expected in the observer\n', '    ///         approve() - should revert if mAllowanceOverride() > 0\n', '    ///         allowance() - should return mAllowanceOverride() if set\n', '    ///         transferFrom() - should override allowance if mAllowanceOverride() > 0\n', '    /// @param owner An address giving allowance to spender\n', '    /// @param spender An address getting  a right to transfer allowance amount from the owner\n', '    /// @return current allowance amount\n', '    function mAllowanceOverride(\n', '        address owner,\n', '        address spender\n', '    )\n', '        internal\n', '        constant\n', '        returns (uint256 allowance);\n', '}\n', '\n', '/// @title controls token transfers\n', '/// @dev BasicSnapshotToken observes this interface, Neumark contract implements it\n', 'contract MTokenTransferController {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param from The origin of the transfer\n', '    /// @param to The destination of the transfer\n', '    /// @param amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function mOnTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '        returns (bool allow);\n', '\n', '}\n', '\n', '/// @title controls approvals and transfers\n', '/// @dev The token controller contract must implement these functions, see Neumark as example\n', '/// @dev please note that controller may be a separate contract that is called from mOnTransfer and mOnApprove functions\n', 'contract MTokenController is MTokenTransferController, MTokenAllowanceController {\n', '}\n', '\n', '/// @title internal token transfer function\n', '/// @dev see BasicSnapshotToken for implementation\n', 'contract MTokenTransfer {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param from The address holding the tokens being transferred\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @dev  reverts if transfer was not successful\n', '    function mTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal;\n', '}\n', '\n', 'contract IERC677Callback {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    // NOTE: This call can be initiated by anyone. You need to make sure that\n', '    // it is send by the token (`require(msg.sender == token)`) or make sure\n', '    // amount is valid (`require(token.allowance(this) >= amount)`).\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 amount,\n', '        address token, // IERC667Token\n', '        bytes data\n', '    )\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC677Allowance is IERC20Allowance {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice `msg.sender` approves `spender` to send `amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param spender The address of the contract able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address spender, uint256 amount, bytes extraData)\n', '        public\n', '        returns (bool success);\n', '\n', '}\n', '\n', 'contract IERC677Token is IERC20Token, IERC677Allowance {\n', '}\n', '\n', '/// @title token spending approval and transfer\n', '/// @dev implements token approval and transfers and exposes relevant part of ERC20 and ERC677 approveAndCall\n', '///     may be mixed in with any basic token (implementing mTransfer) like BasicSnapshotToken or MintableSnapshotToken to add approval mechanism\n', '///     observes MTokenAllowanceController interface\n', '///     observes MTokenTransfer\n', 'contract TokenAllowance is\n', '    MTokenTransfer,\n', '    MTokenAllowanceController,\n', '    IERC20Allowance,\n', '    IERC677Token\n', '{\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // `allowed` tracks rights to spends others tokens as per ERC20\n', '    // owner => spender => amount\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor()\n', '        internal\n', '    {\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements IERC20Token\n', '    //\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param owner The address of the account that owns the token\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        uint256 override = mAllowanceOverride(owner, spender);\n', '        if (override > 0) {\n', '            return override;\n', '        }\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  where allowance per spender must be 0 to allow change of such allowance\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True or reverts, False is never returned\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        // Alerts the token controller of the approve function call\n', '        require(mOnApprove(msg.sender, spender, amount));\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((amount == 0 || _allowed[msg.sender][spender] == 0) && mAllowanceOverride(msg.sender, spender) == 0);\n', '\n', '        _allowed[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param from The address holding the tokens being transferred\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful, reverts in any other case\n', '    function transferFrom(address from, address to, uint256 amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        uint256 allowed = mAllowanceOverride(from, msg.sender);\n', '        if (allowed == 0) {\n', '            // The standard ERC 20 transferFrom functionality\n', '            allowed = _allowed[from][msg.sender];\n', "            // yes this will underflow but then we'll revert. will cost gas however so don't underflow\n", '            _allowed[from][msg.sender] -= amount;\n', '        }\n', '        require(allowed >= amount);\n', '        mTransfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    // Implements IERC677Token\n', '    //\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param spender The address of the contract able to transfer the tokens\n', '    /// @param amount The amount of tokens to be approved for transfer\n', '    /// @return True or reverts, False is never returned\n', '    function approveAndCall(\n', '        address spender,\n', '        uint256 amount,\n', '        bytes extraData\n', '    )\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(approve(spender, amount));\n', '\n', '        success = IERC677Callback(spender).receiveApproval(\n', '            msg.sender,\n', '            amount,\n', '            this,\n', '            extraData\n', '        );\n', '        require(success);\n', '\n', '        return true;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements default MTokenAllowanceController\n', '    //\n', '\n', '    // no override in default implementation\n', '    function mAllowanceOverride(\n', '        address /*owner*/,\n', '        address /*spender*/\n', '    )\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return 0;\n', '    }\n', '}\n', '\n', '/// @title Reads and writes snapshots\n', '/// @dev Manages reading and writing a series of values, where each value has assigned a snapshot id for access to historical data\n', '/// @dev may be added to any contract to provide snapshotting mechanism. should be mixed in with any of MSnapshotPolicy implementations to customize snapshot creation mechanics\n', '///     observes MSnapshotPolicy\n', '/// based on MiniMe token\n', 'contract Snapshot is MSnapshotPolicy {\n', '\n', '    ////////////////////////\n', '    // Types\n', '    ////////////////////////\n', '\n', '    /// @dev `Values` is the structure that attaches a snapshot id to a\n', '    ///  given value, the snapshot id attached is the one that last changed the\n', '    ///  value\n', '    struct Values {\n', '\n', '        // `snapshotId` is the snapshot id that the value was generated at\n', '        uint256 snapshotId;\n', '\n', '        // `value` at a specific snapshot id\n', '        uint256 value;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    function hasValue(\n', '        Values[] storage values\n', '    )\n', '        internal\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return values.length > 0;\n', '    }\n', '\n', "    /// @dev makes sure that 'snapshotId' between current snapshot id (mCurrentSnapshotId) and first snapshot id. this guarantees that getValueAt returns value from one of the snapshots.\n", '    function hasValueAt(\n', '        Values[] storage values,\n', '        uint256 snapshotId\n', '    )\n', '        internal\n', '        constant\n', '        returns (bool)\n', '    {\n', '        require(snapshotId <= mCurrentSnapshotId());\n', '        return values.length > 0 && values[0].snapshotId <= snapshotId;\n', '    }\n', '\n', '    /// gets last value in the series\n', '    function getValue(\n', '        Values[] storage values,\n', '        uint256 defaultValue\n', '    )\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        if (values.length == 0) {\n', '            return defaultValue;\n', '        } else {\n', '            uint256 last = values.length - 1;\n', '            return values[last].value;\n', '        }\n', '    }\n', '\n', '    /// @dev `getValueAt` retrieves value at a given snapshot id\n', '    /// @param values The series of values being queried\n', '    /// @param snapshotId Snapshot id to retrieve the value at\n', '    /// @return Value in series being queried\n', '    function getValueAt(\n', '        Values[] storage values,\n', '        uint256 snapshotId,\n', '        uint256 defaultValue\n', '    )\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        require(snapshotId <= mCurrentSnapshotId());\n', '\n', '        // Empty value\n', '        if (values.length == 0) {\n', '            return defaultValue;\n', '        }\n', '\n', '        // Shortcut for the out of bounds snapshots\n', '        uint256 last = values.length - 1;\n', '        uint256 lastSnapshot = values[last].snapshotId;\n', '        if (snapshotId >= lastSnapshot) {\n', '            return values[last].value;\n', '        }\n', '        uint256 firstSnapshot = values[0].snapshotId;\n', '        if (snapshotId < firstSnapshot) {\n', '            return defaultValue;\n', '        }\n', '        // Binary search of the value in the array\n', '        uint256 min = 0;\n', '        uint256 max = last;\n', '        while (max > min) {\n', '            uint256 mid = (max + min + 1) / 2;\n', '            // must always return lower indice for approximate searches\n', '            if (values[mid].snapshotId <= snapshotId) {\n', '                min = mid;\n', '            } else {\n', '                max = mid - 1;\n', '            }\n', '        }\n', '        return values[min].value;\n', '    }\n', '\n', '    /// @dev `setValue` used to update sequence at next snapshot\n', '    /// @param values The sequence being updated\n', '    /// @param value The new last value of sequence\n', '    function setValue(\n', '        Values[] storage values,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        // TODO: simplify or break into smaller functions\n', '\n', '        uint256 currentSnapshotId = mAdvanceSnapshotId();\n', '        // Always create a new entry if there currently is no value\n', '        bool empty = values.length == 0;\n', '        if (empty) {\n', '            // Create a new entry\n', '            values.push(\n', '                Values({\n', '                    snapshotId: currentSnapshotId,\n', '                    value: value\n', '                })\n', '            );\n', '            return;\n', '        }\n', '\n', '        uint256 last = values.length - 1;\n', '        bool hasNewSnapshot = values[last].snapshotId < currentSnapshotId;\n', '        if (hasNewSnapshot) {\n', '\n', '            // Do nothing if the value was not modified\n', '            bool unmodified = values[last].value == value;\n', '            if (unmodified) {\n', '                return;\n', '            }\n', '\n', '            // Create new entry\n', '            values.push(\n', '                Values({\n', '                    snapshotId: currentSnapshotId,\n', '                    value: value\n', '                })\n', '            );\n', '        } else {\n', '\n', '            // We are updating the currentSnapshotId\n', '            bool previousUnmodified = last > 0 && values[last - 1].value == value;\n', '            if (previousUnmodified) {\n', '                // Remove current snapshot if current value was set to previous value\n', '                delete values[last];\n', '                values.length--;\n', '                return;\n', '            }\n', '\n', '            // Overwrite next snapshot entry\n', '            values[last].value = value;\n', '        }\n', '    }\n', '}\n', '\n', '/// @title access to snapshots of a token\n', '/// @notice allows to implement complex token holder rights like revenue disbursal or voting\n', '/// @notice snapshots are series of values with assigned ids. ids increase strictly. particular id mechanism is not assumed\n', 'contract ITokenSnapshots {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice Total amount of tokens at a specific `snapshotId`.\n', '    /// @param snapshotId of snapshot at which totalSupply is queried\n', '    /// @return The total amount of tokens at `snapshotId`\n', '    /// @dev reverts on snapshotIds greater than currentSnapshotId()\n', '    /// @dev returns 0 for snapshotIds less than snapshotId of first value\n', '    function totalSupplyAt(uint256 snapshotId)\n', '        public\n', '        constant\n', '        returns(uint256);\n', '\n', '    /// @dev Queries the balance of `owner` at a specific `snapshotId`\n', '    /// @param owner The address from which the balance will be retrieved\n', '    /// @param snapshotId of snapshot at which the balance is queried\n', '    /// @return The balance at `snapshotId`\n', '    function balanceOfAt(address owner, uint256 snapshotId)\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', "    /// @notice upper bound of series of snapshotIds for which there's a value in series\n", '    /// @return snapshotId\n', '    function currentSnapshotId()\n', '        public\n', '        constant\n', '        returns (uint256);\n', '}\n', '\n', '/// @title represents link between cloned and parent token\n', '/// @dev when token is clone from other token, initial balances of the cloned token\n', '///     correspond to balances of parent token at the moment of parent snapshot id specified\n', '/// @notice please note that other tokens beside snapshot token may be cloned\n', 'contract IClonedTokenParent is ITokenSnapshots {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '\n', '    /// @return address of parent token, address(0) if root\n', '    /// @dev parent token does not need to clonable, nor snapshottable, just a normal token\n', '    function parentToken()\n', '        public\n', '        constant\n', '        returns(IClonedTokenParent parent);\n', '\n', '    /// @return snapshot at wchich initial token distribution was taken\n', '    function parentSnapshotId()\n', '        public\n', '        constant\n', '        returns(uint256 snapshotId);\n', '}\n', '\n', '/// @title token with snapshots and transfer functionality\n', '/// @dev observes MTokenTransferController interface\n', '///     observes ISnapshotToken interface\n', '///     implementes MTokenTransfer interface\n', 'contract BasicSnapshotToken is\n', '    MTokenTransfer,\n', '    MTokenTransferController,\n', '    IClonedTokenParent,\n', '    IBasicToken,\n', '    Snapshot\n', '{\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', '    // `PARENT_TOKEN` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    IClonedTokenParent private PARENT_TOKEN;\n', '\n', '    // `PARENT_SNAPSHOT_ID` is the snapshot id from the Parent Token that was\n', '    //  used to determine the initial distribution of the cloned token\n', '    uint256 private PARENT_SNAPSHOT_ID;\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the snapshot id that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Values[]) internal _balances;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Values[] internal _totalSupplyValues;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @notice Constructor to create snapshot token\n', '    /// @param parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param parentSnapshotId at which snapshot id clone was created, set to 0 to clone at upper bound\n', '    /// @dev please not that as long as cloned token does not overwrite value at current snapshot id, it will refer\n', '    ///     to parent token at which this snapshot still may change until snapshot id increases. for that time tokens are coupled\n', '    ///     this is prevented by parentSnapshotId value of parentToken.currentSnapshotId() - 1 being the maxiumum\n', '    ///     see SnapshotToken.js test to learn consequences coupling has.\n', '    constructor(\n', '        IClonedTokenParent parentToken,\n', '        uint256 parentSnapshotId\n', '    )\n', '        Snapshot()\n', '        internal\n', '    {\n', '        PARENT_TOKEN = parentToken;\n', '        if (parentToken == address(0)) {\n', '            require(parentSnapshotId == 0);\n', '        } else {\n', '            if (parentSnapshotId == 0) {\n', '                require(parentToken.currentSnapshotId() > 0);\n', '                PARENT_SNAPSHOT_ID = parentToken.currentSnapshotId() - 1;\n', '            } else {\n', '                PARENT_SNAPSHOT_ID = parentSnapshotId;\n', '            }\n', '        }\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements IBasicToken\n', '    //\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return totalSupplyAtInternal(mCurrentSnapshotId());\n', '    }\n', '\n', "    /// @param owner The address that's balance is being requested\n", '    /// @return The balance of `owner` at the current block\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balanceOfAtInternal(owner, mCurrentSnapshotId());\n', '    }\n', '\n', '    /// @notice Send `amount` tokens to `to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful, reverts in any other case\n', '    function transfer(address to, uint256 amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        mTransfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    //\n', '    // Implements ITokenSnapshots\n', '    //\n', '\n', '    function totalSupplyAt(uint256 snapshotId)\n', '        public\n', '        constant\n', '        returns(uint256)\n', '    {\n', '        return totalSupplyAtInternal(snapshotId);\n', '    }\n', '\n', '    function balanceOfAt(address owner, uint256 snapshotId)\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return balanceOfAtInternal(owner, snapshotId);\n', '    }\n', '\n', '    function currentSnapshotId()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return mCurrentSnapshotId();\n', '    }\n', '\n', '    //\n', '    // Implements IClonedTokenParent\n', '    //\n', '\n', '    function parentToken()\n', '        public\n', '        constant\n', '        returns(IClonedTokenParent parent)\n', '    {\n', '        return PARENT_TOKEN;\n', '    }\n', '\n', '    /// @return snapshot at wchich initial token distribution was taken\n', '    function parentSnapshotId()\n', '        public\n', '        constant\n', '        returns(uint256 snapshotId)\n', '    {\n', '        return PARENT_SNAPSHOT_ID;\n', '    }\n', '\n', '    //\n', '    // Other public functions\n', '    //\n', '\n', "    /// @notice gets all token balances of 'owner'\n", '    /// @dev intended to be called via eth_call where gas limit is not an issue\n', '    function allBalancesOf(address owner)\n', '        external\n', '        constant\n', '        returns (uint256[2][])\n', '    {\n', '        /* very nice and working implementation below,\n', '        // copy to memory\n', '        Values[] memory values = _balances[owner];\n', '        do assembly {\n', '            // in memory structs have simple layout where every item occupies uint256\n', '            balances := values\n', '        } while (false);*/\n', '\n', '        Values[] storage values = _balances[owner];\n', '        uint256[2][] memory balances = new uint256[2][](values.length);\n', '        for(uint256 ii = 0; ii < values.length; ++ii) {\n', '            balances[ii] = [values[ii].snapshotId, values[ii].value];\n', '        }\n', '\n', '        return balances;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    function totalSupplyAtInternal(uint256 snapshotId)\n', '        internal\n', '        constant\n', '        returns(uint256)\n', '    {\n', '        Values[] storage values = _totalSupplyValues;\n', '\n', '        // If there is a value, return it, reverts if value is in the future\n', '        if (hasValueAt(values, snapshotId)) {\n', '            return getValueAt(values, snapshotId, 0);\n', '        }\n', '\n', '        // Try parent contract at or before the fork\n', '        if (address(PARENT_TOKEN) != 0) {\n', '            uint256 earlierSnapshotId = PARENT_SNAPSHOT_ID > snapshotId ? snapshotId : PARENT_SNAPSHOT_ID;\n', '            return PARENT_TOKEN.totalSupplyAt(earlierSnapshotId);\n', '        }\n', '\n', '        // Default to an empty balance\n', '        return 0;\n', '    }\n', '\n', '    // get balance at snapshot if with continuation in parent token\n', '    function balanceOfAtInternal(address owner, uint256 snapshotId)\n', '        internal\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        Values[] storage values = _balances[owner];\n', '\n', '        // If there is a value, return it, reverts if value is in the future\n', '        if (hasValueAt(values, snapshotId)) {\n', '            return getValueAt(values, snapshotId, 0);\n', '        }\n', '\n', '        // Try parent contract at or before the fork\n', '        if (PARENT_TOKEN != address(0)) {\n', '            uint256 earlierSnapshotId = PARENT_SNAPSHOT_ID > snapshotId ? snapshotId : PARENT_SNAPSHOT_ID;\n', '            return PARENT_TOKEN.balanceOfAt(owner, earlierSnapshotId);\n', '        }\n', '\n', '        // Default to an empty balance\n', '        return 0;\n', '    }\n', '\n', '    //\n', '    // Implements MTokenTransfer\n', '    //\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param from The address holding the tokens being transferred\n', '    /// @param to The address of the recipient\n', '    /// @param amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful, reverts in any other case\n', '    function mTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        // never send to address 0\n', '        require(to != address(0));\n', '        // block transfers in clone that points to future/current snapshots of parent token\n', '        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\n', '        // Alerts the token controller of the transfer\n', '        require(mOnTransfer(from, to, amount));\n', '\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer reverts\n', '        uint256 previousBalanceFrom = balanceOf(from);\n', '        require(previousBalanceFrom >= amount);\n', '\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        uint256 newBalanceFrom = previousBalanceFrom - amount;\n', '        setValue(_balances[from], newBalanceFrom);\n', '\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOf(to);\n', '        uint256 newBalanceTo = previousBalanceTo + amount;\n', '        assert(newBalanceTo >= previousBalanceTo); // Check for overflow\n', '        setValue(_balances[to], newBalanceTo);\n', '\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(from, to, amount);\n', '    }\n', '}\n', '\n', '/// @title token generation and destruction\n', '/// @dev internal interface providing token generation and destruction, see MintableSnapshotToken for implementation\n', 'contract MTokenMint {\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    /// @notice Generates `amount` tokens that are assigned to `owner`\n', '    /// @param owner The address that will be assigned the new tokens\n', '    /// @param amount The quantity of tokens generated\n', '    /// @dev reverts if tokens could not be generated\n', '    function mGenerateTokens(address owner, uint256 amount)\n', '        internal;\n', '\n', '    /// @notice Burns `amount` tokens from `owner`\n', '    /// @param owner The address that will lose the tokens\n', '    /// @param amount The quantity of tokens to burn\n', '    /// @dev reverts if tokens could not be destroyed\n', '    function mDestroyTokens(address owner, uint256 amount)\n', '        internal;\n', '}\n', '\n', '/// @title basic snapshot token with facitilites to generate and destroy tokens\n', '/// @dev implementes MTokenMint, does not expose any public functions that create/destroy tokens\n', 'contract MintableSnapshotToken is\n', '    BasicSnapshotToken,\n', '    MTokenMint\n', '{\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @notice Constructor to create a MintableSnapshotToken\n', '    /// @param parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    constructor(\n', '        IClonedTokenParent parentToken,\n', '        uint256 parentSnapshotId\n', '    )\n', '        BasicSnapshotToken(parentToken, parentSnapshotId)\n', '        internal\n', '    {}\n', '\n', '    /// @notice Generates `amount` tokens that are assigned to `owner`\n', '    /// @param owner The address that will be assigned the new tokens\n', '    /// @param amount The quantity of tokens generated\n', '    function mGenerateTokens(address owner, uint256 amount)\n', '        internal\n', '    {\n', '        // never create for address 0\n', '        require(owner != address(0));\n', '        // block changes in clone that points to future/current snapshots of patent token\n', '        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\n', '\n', '        uint256 curTotalSupply = totalSupply();\n', '        uint256 newTotalSupply = curTotalSupply + amount;\n', '        require(newTotalSupply >= curTotalSupply); // Check for overflow\n', '\n', '        uint256 previousBalanceTo = balanceOf(owner);\n', '        uint256 newBalanceTo = previousBalanceTo + amount;\n', '        assert(newBalanceTo >= previousBalanceTo); // Check for overflow\n', '\n', '        setValue(_totalSupplyValues, newTotalSupply);\n', '        setValue(_balances[owner], newBalanceTo);\n', '\n', '        emit Transfer(0, owner, amount);\n', '    }\n', '\n', '    /// @notice Burns `amount` tokens from `owner`\n', '    /// @param owner The address that will lose the tokens\n', '    /// @param amount The quantity of tokens to burn\n', '    function mDestroyTokens(address owner, uint256 amount)\n', '        internal\n', '    {\n', '        // block changes in clone that points to future/current snapshots of patent token\n', '        require(parentToken() == address(0) || parentSnapshotId() < parentToken().currentSnapshotId());\n', '\n', '        uint256 curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= amount);\n', '\n', '        uint256 previousBalanceFrom = balanceOf(owner);\n', '        require(previousBalanceFrom >= amount);\n', '\n', '        uint256 newTotalSupply = curTotalSupply - amount;\n', '        uint256 newBalanceFrom = previousBalanceFrom - amount;\n', '        setValue(_totalSupplyValues, newTotalSupply);\n', '        setValue(_balances[owner], newBalanceFrom);\n', '\n', '        emit Transfer(owner, 0, amount);\n', '    }\n', '}\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '    Copyright 2017, Remco Bloemen, Marcin Rudolf\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '/// @title StandardSnapshotToken Contract\n', '/// @author Jordi Baylina, Remco Bloemen, Marcin Rudolf\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '/// @dev Various contracts are composed to provide required functionality of this token, different compositions are possible\n', '///     MintableSnapshotToken provides transfer, miniting and snapshotting functions\n', '///     TokenAllowance provides approve/transferFrom functions\n', '///     TokenMetadata adds name, symbol and other token metadata\n', '/// @dev This token is still abstract, Snapshot, BasicSnapshotToken and TokenAllowance observe interfaces that must be implemented\n', '///     MSnapshotPolicy - particular snapshot id creation mechanism\n', '///     MTokenController - controlls approvals and transfers\n', '///     see Neumark as an example\n', '/// @dev implements ERC223 token transfer\n', 'contract StandardSnapshotToken is\n', '    MintableSnapshotToken,\n', '    TokenAllowance\n', '{\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    ///  is a new token\n', '    /// param tokenName Name of the new token\n', '    /// param decimalUnits Number of decimals of the new token\n', '    /// param tokenSymbol Token Symbol for the new token\n', '    constructor(\n', '        IClonedTokenParent parentToken,\n', '        uint256 parentSnapshotId\n', '    )\n', '        MintableSnapshotToken(parentToken, parentSnapshotId)\n', '        TokenAllowance()\n', '        internal\n', '    {}\n', '}\n', '\n', '/// @title old ERC223 callback function\n', '/// @dev as used in Neumark and ICBMEtherToken\n', 'contract IERC223LegacyCallback {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function onTokenTransfer(address from, uint256 amount, bytes data)\n', '        public;\n', '\n', '}\n', '\n', 'contract IERC223Token is IERC20Token, ITokenMetadata {\n', '\n', '    /// @dev Departure: We do not log data, it has no advantage over a standard\n', '    ///     log event. By sticking to the standard log event we\n', '    ///     stay compatible with constracts that expect and ERC20 token.\n', '\n', '    // event Transfer(\n', '    //    address indexed from,\n', '    //    address indexed to,\n', '    //    uint256 amount,\n', '    //    bytes data);\n', '\n', '\n', '    /// @dev Departure: We do not use the callback on regular transfer calls to\n', '    ///     stay compatible with constracts that expect and ERC20 token.\n', '\n', '    // function transfer(address to, uint256 amount)\n', '    //     public\n', '    //     returns (bool);\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function transfer(address to, uint256 amount, bytes data)\n', '        public\n', '        returns (bool);\n', '}\n', '\n', 'contract Neumark is\n', '    AccessControlled,\n', '    AccessRoles,\n', '    Agreement,\n', '    DailyAndSnapshotable,\n', '    StandardSnapshotToken,\n', '    TokenMetadata,\n', '    IERC223Token,\n', '    NeumarkIssuanceCurve,\n', '    Reclaimable,\n', '    IsContract\n', '{\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    string private constant TOKEN_NAME = "Neumark";\n', '\n', '    uint8  private constant TOKEN_DECIMALS = 18;\n', '\n', '    string private constant TOKEN_SYMBOL = "NEU";\n', '\n', '    string private constant VERSION = "NMK_1.0";\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // disable transfers when Neumark is created\n', '    bool private _transferEnabled = false;\n', '\n', '    // at which point on curve new Neumarks will be created, see NeumarkIssuanceCurve contract\n', '    // do not use to get total invested funds. see burn(). this is just a cache for expensive inverse function\n', '    uint256 private _totalEurUlps;\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogNeumarksIssued(\n', '        address indexed owner,\n', '        uint256 euroUlps,\n', '        uint256 neumarkUlps\n', '    );\n', '\n', '    event LogNeumarksBurned(\n', '        address indexed owner,\n', '        uint256 euroUlps,\n', '        uint256 neumarkUlps\n', '    );\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor(\n', '        IAccessPolicy accessPolicy,\n', '        IEthereumForkArbiter forkArbiter\n', '    )\n', '        AccessRoles()\n', '        Agreement(accessPolicy, forkArbiter)\n', '        StandardSnapshotToken(\n', '            IClonedTokenParent(0x0),\n', '            0\n', '        )\n', '        TokenMetadata(\n', '            TOKEN_NAME,\n', '            TOKEN_DECIMALS,\n', '            TOKEN_SYMBOL,\n', '            VERSION\n', '        )\n', '        DailyAndSnapshotable(0)\n', '        NeumarkIssuanceCurve()\n', '        Reclaimable()\n', '        public\n', '    {}\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    /// @notice issues new Neumarks to msg.sender with reward at current curve position\n', '    ///     moves curve position by euroUlps\n', '    ///     callable only by ROLE_NEUMARK_ISSUER\n', '    function issueForEuro(uint256 euroUlps)\n', '        public\n', '        only(ROLE_NEUMARK_ISSUER)\n', '        acceptAgreement(msg.sender)\n', '        returns (uint256)\n', '    {\n', '        require(_totalEurUlps + euroUlps >= _totalEurUlps);\n', '        uint256 neumarkUlps = incremental(_totalEurUlps, euroUlps);\n', '        _totalEurUlps += euroUlps;\n', '        mGenerateTokens(msg.sender, neumarkUlps);\n', '        emit LogNeumarksIssued(msg.sender, euroUlps, neumarkUlps);\n', '        return neumarkUlps;\n', '    }\n', '\n', '    /// @notice used by ROLE_NEUMARK_ISSUER to transer newly issued neumarks\n', '    ///     typically to the investor and platform operator\n', '    function distribute(address to, uint256 neumarkUlps)\n', '        public\n', '        only(ROLE_NEUMARK_ISSUER)\n', '        acceptAgreement(to)\n', '    {\n', '        mTransfer(msg.sender, to, neumarkUlps);\n', '    }\n', '\n', '    /// @notice msg.sender can burn their Neumarks, curve is rolled back using inverse\n', '    ///     curve. as a result cost of Neumark gets lower (reward is higher)\n', '    function burn(uint256 neumarkUlps)\n', '        public\n', '        only(ROLE_NEUMARK_BURNER)\n', '    {\n', '        burnPrivate(neumarkUlps, 0, _totalEurUlps);\n', '    }\n', '\n', '    /// @notice executes as function above but allows to provide search range for low gas burning\n', '    function burn(uint256 neumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\n', '        public\n', '        only(ROLE_NEUMARK_BURNER)\n', '    {\n', '        burnPrivate(neumarkUlps, minEurUlps, maxEurUlps);\n', '    }\n', '\n', '    function enableTransfer(bool enabled)\n', '        public\n', '        only(ROLE_TRANSFER_ADMIN)\n', '    {\n', '        _transferEnabled = enabled;\n', '    }\n', '\n', '    function createSnapshot()\n', '        public\n', '        only(ROLE_SNAPSHOT_CREATOR)\n', '        returns (uint256)\n', '    {\n', '        return DailyAndSnapshotable.createSnapshot();\n', '    }\n', '\n', '    function transferEnabled()\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _transferEnabled;\n', '    }\n', '\n', '    function totalEuroUlps()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _totalEurUlps;\n', '    }\n', '\n', '    function incremental(uint256 euroUlps)\n', '        public\n', '        constant\n', '        returns (uint256 neumarkUlps)\n', '    {\n', '        return incremental(_totalEurUlps, euroUlps);\n', '    }\n', '\n', '    //\n', '    // Implements IERC223Token with IERC223Callback (onTokenTransfer) callback\n', '    //\n', '\n', '    // old implementation of ERC223 that was actual when ICBM was deployed\n', '    // as Neumark is already deployed this function keeps old behavior for testing\n', '    function transfer(address to, uint256 amount, bytes data)\n', '        public\n', '        returns (bool)\n', '    {\n', '        // it is necessary to point out implementation to be called\n', '        BasicSnapshotToken.mTransfer(msg.sender, to, amount);\n', '\n', '        // Notify the receiving contract.\n', '        if (isContract(to)) {\n', '            IERC223LegacyCallback(to).onTokenTransfer(msg.sender, amount, data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Internal functions\n', '    ////////////////////////\n', '\n', '    //\n', '    // Implements MTokenController\n', '    //\n', '\n', '    function mOnTransfer(\n', '        address from,\n', '        address, // to\n', '        uint256 // amount\n', '    )\n', '        internal\n', '        acceptAgreement(from)\n', '        returns (bool allow)\n', '    {\n', '        // must have transfer enabled or msg.sender is Neumark issuer\n', '        return _transferEnabled || accessPolicy().allowed(msg.sender, ROLE_NEUMARK_ISSUER, this, msg.sig);\n', '    }\n', '\n', '    function mOnApprove(\n', '        address owner,\n', '        address, // spender,\n', '        uint256 // amount\n', '    )\n', '        internal\n', '        acceptAgreement(owner)\n', '        returns (bool allow)\n', '    {\n', '        return true;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Private functions\n', '    ////////////////////////\n', '\n', '    function burnPrivate(uint256 burnNeumarkUlps, uint256 minEurUlps, uint256 maxEurUlps)\n', '        private\n', '    {\n', '        uint256 prevEuroUlps = _totalEurUlps;\n', '        // burn first in the token to make sure balance/totalSupply is not crossed\n', '        mDestroyTokens(msg.sender, burnNeumarkUlps);\n', '        _totalEurUlps = cumulativeInverse(totalSupply(), minEurUlps, maxEurUlps);\n', '        // actually may overflow on non-monotonic inverse\n', '        assert(prevEuroUlps >= _totalEurUlps);\n', '        uint256 euroUlps = prevEuroUlps - _totalEurUlps;\n', '        emit LogNeumarksBurned(msg.sender, euroUlps, burnNeumarkUlps);\n', '    }\n', '}\n', '\n', '/// @title current ERC223 fallback function\n', '/// @dev to be used in all future token contract\n', '/// @dev NEU and ICBMEtherToken (obsolete) are the only contracts that still uses IERC223LegacyCallback\n', 'contract IERC223Callback {\n', '\n', '    ////////////////////////\n', '    // Public functions\n', '    ////////////////////////\n', '\n', '    function tokenFallback(address from, uint256 amount, bytes data)\n', '        public;\n', '\n', '}\n', '\n', '/// @title disburse payment token amount to snapshot token holders\n', '/// @dev payment token received via ERC223 Transfer\n', 'contract IFeeDisbursal is IERC223Callback {\n', '    // TODO: declare interface\n', '    function claim() public;\n', '\n', '    function recycle() public;\n', '}\n', '\n', '/// @title disburse payment token amount to snapshot token holders\n', '/// @dev payment token received via ERC223 Transfer\n', 'contract IPlatformPortfolio is IERC223Callback {\n', '    // TODO: declare interface\n', '}\n', '\n', 'contract ITokenExchangeRateOracle {\n', "    /// @notice provides actual price of 'numeratorToken' in 'denominatorToken'\n", '    ///     returns timestamp at which price was obtained in oracle\n', '    function getExchangeRate(address numeratorToken, address denominatorToken)\n', '        public\n', '        constant\n', '        returns (uint256 rateFraction, uint256 timestamp);\n', '\n', '    /// @notice allows to retreive multiple exchange rates in once call\n', '    function getExchangeRates(address[] numeratorTokens, address[] denominatorTokens)\n', '        public\n', '        constant\n', '        returns (uint256[] rateFractions, uint256[] timestamps);\n', '}\n', '\n', '/// @title root of trust and singletons + known interface registry\n', '/// provides a root which holds all interfaces platform trust, this includes\n', '/// singletons - for which accessors are provided\n', '/// collections of known instances of interfaces\n', '/// @dev interfaces are identified by bytes4, see KnownInterfaces.sol\n', 'contract Universe is\n', '    Agreement,\n', '    IContractId,\n', '    KnownInterfaces\n', '{\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    /// raised on any change of singleton instance\n', '    /// @dev for convenience we provide previous instance of singleton in replacedInstance\n', '    event LogSetSingleton(\n', '        bytes4 interfaceId,\n', '        address instance,\n', '        address replacedInstance\n', '    );\n', '\n', '    /// raised on add/remove interface instance in collection\n', '    event LogSetCollectionInterface(\n', '        bytes4 interfaceId,\n', '        address instance,\n', '        bool isSet\n', '    );\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // mapping of known contracts to addresses of singletons\n', '    mapping(bytes4 => address) private _singletons;\n', '\n', '    // mapping of known interfaces to collections of contracts\n', '    mapping(bytes4 =>\n', '        mapping(address => bool)) private _collections; // solium-disable-line indentation\n', '\n', '    // known instances\n', '    mapping(address => bytes4[]) private _instances;\n', '\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor(\n', '        IAccessPolicy accessPolicy,\n', '        IEthereumForkArbiter forkArbiter\n', '    )\n', '        Agreement(accessPolicy, forkArbiter)\n', '        public\n', '    {\n', '        setSingletonPrivate(KNOWN_INTERFACE_ACCESS_POLICY, accessPolicy);\n', '        setSingletonPrivate(KNOWN_INTERFACE_FORK_ARBITER, forkArbiter);\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public methods\n', '    ////////////////////////\n', '\n', "    /// get singleton instance for 'interfaceId'\n", '    function getSingleton(bytes4 interfaceId)\n', '        public\n', '        constant\n', '        returns (address)\n', '    {\n', '        return _singletons[interfaceId];\n', '    }\n', '\n', '    function getManySingletons(bytes4[] interfaceIds)\n', '        public\n', '        constant\n', '        returns (address[])\n', '    {\n', '        address[] memory addresses = new address[](interfaceIds.length);\n', '        uint256 idx;\n', '        while(idx < interfaceIds.length) {\n', '            addresses[idx] = _singletons[interfaceIds[idx]];\n', '            idx += 1;\n', '        }\n', '        return addresses;\n', '    }\n', '\n', "    /// checks of 'instance' is instance of interface 'interfaceId'\n", '    function isSingleton(bytes4 interfaceId, address instance)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _singletons[interfaceId] == instance;\n', '    }\n', '\n', "    /// checks if 'instance' is one of instances of 'interfaceId'\n", '    function isInterfaceCollectionInstance(bytes4 interfaceId, address instance)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _collections[interfaceId][instance];\n', '    }\n', '\n', '    function isAnyOfInterfaceCollectionInstance(bytes4[] interfaceIds, address instance)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        uint256 idx;\n', '        while(idx < interfaceIds.length) {\n', '            if (_collections[interfaceIds[idx]][instance]) {\n', '                return true;\n', '            }\n', '            idx += 1;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// gets all interfaces of given instance\n', '    function getInterfacesOfInstance(address instance)\n', '        public\n', '        constant\n', '        returns (bytes4[] interfaces)\n', '    {\n', '        return _instances[instance];\n', '    }\n', '\n', "    /// sets 'instance' of singleton with interface 'interfaceId'\n", '    function setSingleton(bytes4 interfaceId, address instance)\n', '        public\n', '        only(ROLE_UNIVERSE_MANAGER)\n', '    {\n', '        setSingletonPrivate(interfaceId, instance);\n', '    }\n', '\n', '    /// convenience method for setting many singleton instances\n', '    function setManySingletons(bytes4[] interfaceIds, address[] instances)\n', '        public\n', '        only(ROLE_UNIVERSE_MANAGER)\n', '    {\n', '        require(interfaceIds.length == instances.length);\n', '        uint256 idx;\n', '        while(idx < interfaceIds.length) {\n', '            setSingletonPrivate(interfaceIds[idx], instances[idx]);\n', '            idx += 1;\n', '        }\n', '    }\n', '\n', "    /// set or unset 'instance' with 'interfaceId' in collection of instances\n", '    function setCollectionInterface(bytes4 interfaceId, address instance, bool set)\n', '        public\n', '        only(ROLE_UNIVERSE_MANAGER)\n', '    {\n', '        setCollectionPrivate(interfaceId, instance, set);\n', '    }\n', '\n', "    /// set or unset 'instance' in many collections of instances\n", '    function setInterfaceInManyCollections(bytes4[] interfaceIds, address instance, bool set)\n', '        public\n', '        only(ROLE_UNIVERSE_MANAGER)\n', '    {\n', '        uint256 idx;\n', '        while(idx < interfaceIds.length) {\n', '            setCollectionPrivate(interfaceIds[idx], instance, set);\n', '            idx += 1;\n', '        }\n', '    }\n', '\n', '    /// set or unset array of collection\n', '    function setCollectionsInterfaces(bytes4[] interfaceIds, address[] instances, bool[] set_flags)\n', '        public\n', '        only(ROLE_UNIVERSE_MANAGER)\n', '    {\n', '        require(interfaceIds.length == instances.length);\n', '        require(interfaceIds.length == set_flags.length);\n', '        uint256 idx;\n', '        while(idx < interfaceIds.length) {\n', '            setCollectionPrivate(interfaceIds[idx], instances[idx], set_flags[idx]);\n', '            idx += 1;\n', '        }\n', '    }\n', '\n', '    //\n', '    // Implements IContractId\n', '    //\n', '\n', '    function contractId() public pure returns (bytes32 id, uint256 version) {\n', '        return (0x8b57bfe21a3ef4854e19d702063b6cea03fa514162f8ff43fde551f06372fefd, 0);\n', '    }\n', '\n', '    ////////////////////////\n', '    // Getters\n', '    ////////////////////////\n', '\n', '    function accessPolicy() public constant returns (IAccessPolicy) {\n', '        return IAccessPolicy(_singletons[KNOWN_INTERFACE_ACCESS_POLICY]);\n', '    }\n', '\n', '    function forkArbiter() public constant returns (IEthereumForkArbiter) {\n', '        return IEthereumForkArbiter(_singletons[KNOWN_INTERFACE_FORK_ARBITER]);\n', '    }\n', '\n', '    function neumark() public constant returns (Neumark) {\n', '        return Neumark(_singletons[KNOWN_INTERFACE_NEUMARK]);\n', '    }\n', '\n', '    function etherToken() public constant returns (IERC223Token) {\n', '        return IERC223Token(_singletons[KNOWN_INTERFACE_ETHER_TOKEN]);\n', '    }\n', '\n', '    function euroToken() public constant returns (IERC223Token) {\n', '        return IERC223Token(_singletons[KNOWN_INTERFACE_EURO_TOKEN]);\n', '    }\n', '\n', '    function etherLock() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_ETHER_LOCK];\n', '    }\n', '\n', '    function euroLock() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_EURO_LOCK];\n', '    }\n', '\n', '    function icbmEtherLock() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_ICBM_ETHER_LOCK];\n', '    }\n', '\n', '    function icbmEuroLock() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_ICBM_EURO_LOCK];\n', '    }\n', '\n', '    function identityRegistry() public constant returns (address) {\n', '        return IIdentityRegistry(_singletons[KNOWN_INTERFACE_IDENTITY_REGISTRY]);\n', '    }\n', '\n', '    function tokenExchangeRateOracle() public constant returns (address) {\n', '        return ITokenExchangeRateOracle(_singletons[KNOWN_INTERFACE_TOKEN_EXCHANGE_RATE_ORACLE]);\n', '    }\n', '\n', '    function feeDisbursal() public constant returns (address) {\n', '        return IFeeDisbursal(_singletons[KNOWN_INTERFACE_FEE_DISBURSAL]);\n', '    }\n', '\n', '    function platformPortfolio() public constant returns (address) {\n', '        return IPlatformPortfolio(_singletons[KNOWN_INTERFACE_PLATFORM_PORTFOLIO]);\n', '    }\n', '\n', '    function tokenExchange() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_TOKEN_EXCHANGE];\n', '    }\n', '\n', '    function gasExchange() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_GAS_EXCHANGE];\n', '    }\n', '\n', '    function platformTerms() public constant returns (address) {\n', '        return _singletons[KNOWN_INTERFACE_PLATFORM_TERMS];\n', '    }\n', '\n', '    ////////////////////////\n', '    // Private methods\n', '    ////////////////////////\n', '\n', '    function setSingletonPrivate(bytes4 interfaceId, address instance)\n', '        private\n', '    {\n', '        require(interfaceId != KNOWN_INTERFACE_UNIVERSE, "NF_UNI_NO_UNIVERSE_SINGLETON");\n', '        address replacedInstance = _singletons[interfaceId];\n', '        // do nothing if not changing\n', '        if (replacedInstance != instance) {\n', '            dropInstance(replacedInstance, interfaceId);\n', '            addInstance(instance, interfaceId);\n', '            _singletons[interfaceId] = instance;\n', '        }\n', '\n', '        emit LogSetSingleton(interfaceId, instance, replacedInstance);\n', '    }\n', '\n', '    function setCollectionPrivate(bytes4 interfaceId, address instance, bool set)\n', '        private\n', '    {\n', '        // do nothing if not changing\n', '        if (_collections[interfaceId][instance] == set) {\n', '            return;\n', '        }\n', '        _collections[interfaceId][instance] = set;\n', '        if (set) {\n', '            addInstance(instance, interfaceId);\n', '        } else {\n', '            dropInstance(instance, interfaceId);\n', '        }\n', '        emit LogSetCollectionInterface(interfaceId, instance, set);\n', '    }\n', '\n', '    function addInstance(address instance, bytes4 interfaceId)\n', '        private\n', '    {\n', '        if (instance == address(0)) {\n', '            // do not add null instance\n', '            return;\n', '        }\n', '        bytes4[] storage current = _instances[instance];\n', '        uint256 idx;\n', '        while(idx < current.length) {\n', '            // instancy has this interface already, do nothing\n', '            if (current[idx] == interfaceId)\n', '                return;\n', '            idx += 1;\n', '        }\n', '        // new interface\n', '        current.push(interfaceId);\n', '    }\n', '\n', '    function dropInstance(address instance, bytes4 interfaceId)\n', '        private\n', '    {\n', '        if (instance == address(0)) {\n', '            // do not drop null instance\n', '            return;\n', '        }\n', '        bytes4[] storage current = _instances[instance];\n', '        uint256 idx;\n', '        uint256 last = current.length - 1;\n', '        while(idx <= last) {\n', '            if (current[idx] == interfaceId) {\n', '                // delete element\n', '                if (idx < last) {\n', '                    // if not last element move last element to idx being deleted\n', '                    current[idx] = current[last];\n', '                }\n', '                // delete last element\n', '                current.length -= 1;\n', '                return;\n', '            }\n', '            idx += 1;\n', '        }\n', '    }\n', '}\n', '\n', '/// @title token controller for EuroToken\n', "/// @notice permissions for transfer are divided in 'from' permission (address sends funds)\n", "///  and 'to' permission (address receives funds). both transfer sides must have appropriate permission for transfer to happen\n", '///  also controls for minimum amounts in deposit and withdraw permissions\n', '///  whitelist several known singleton contracts from Universe to be able to receive and send EUR-T\n', '/// @dev if contracts are replaced in universe, `applySettings` function must be called\n', 'contract EuroTokenController is\n', '    ITokenController,\n', '    IContractId,\n', '    AccessControlled,\n', '    AccessRoles,\n', '    IdentityRecord,\n', '    KnownInterfaces\n', '{\n', '\n', '    ////////////////////////\n', '    // Events\n', '    ////////////////////////\n', '\n', '    event LogAllowedFromAddress(\n', '        address indexed from,\n', '        bool allowed\n', '    );\n', '\n', '    event LogAllowedToAddress(\n', '        address indexed to,\n', '        bool allowed\n', '    );\n', '\n', '    // allowances for special contracts were made, see\n', '    // allowFromUniverse function\n', '    event LogUniverseReloaded();\n', '\n', '    // new withdraw and deposit settings were made\n', '    event LogSettingsChanged(\n', '        uint256 minDepositAmountEurUlps,\n', '        uint256 minWithdrawAmountEurUlps,\n', '        uint256 maxSimpleExchangeAllowanceEurUlps\n', '    );\n', '\n', '    // new deposit/withdraw fees were set\n', '    event LogFeeSettingsChanged(\n', '        uint256 depositFeeFraction,\n', '        uint256 withdrawFeeFraction\n', '    );\n', '\n', '    // deposit manager was changed\n', '    event LogDepositManagerChanged(\n', '        address oldDepositManager,\n', '        address newDepositManager\n', '    );\n', '\n', '    ////////////////////////\n', '    // Constants\n', '    ////////////////////////\n', '\n', '    bytes4[] private TRANSFER_ALLOWED_INTERFACES = [KNOWN_INTERFACE_COMMITMENT, KNOWN_INTERFACE_EQUITY_TOKEN_CONTROLLER];\n', '\n', '    ////////////////////////\n', '    // Immutable state\n', '    ////////////////////////\n', '\n', '    Universe private UNIVERSE;\n', '\n', '    ////////////////////////\n', '    // Mutable state\n', '    ////////////////////////\n', '\n', '    // a list of addresses that are allowed to receive EUR-T\n', '    mapping(address => bool) private _allowedTransferTo;\n', '\n', '    // a list of of addresses that are allowed to send EUR-T\n', '    mapping(address => bool) private _allowedTransferFrom;\n', '\n', '    // min deposit amount\n', '    uint256 private _minDepositAmountEurUlps;\n', '\n', '    // min withdraw amount\n', '    uint256 private _minWithdrawAmountEurUlps;\n', '\n', '    // max token exchange can make for gas purchase\n', '    uint256 private _maxSimpleExchangeAllowanceEurUlps;\n', '\n', '    // fraction of amount deposited to bank account takes as a fee - before deposit to token is made\n', '    uint256 private _depositFeeFraction;\n', '\n', '    // fraction of amount withdrawn to holder bank account taken as a fee - after withdraw from token is made\n', '    uint256 private _withdrawalFeeFraction;\n', '\n', '    // identity registry\n', '    IIdentityRegistry private _identityRegistry;\n', '\n', '    // issuer of the token, must have ROLE_EURT_DEPOSIT_MANAGER role\n', '    // also is able to set deposit and withdraw fees\n', '    // issuer is a legal representation of a bank, payment gateway or bank account holder where settlement happens\n', '    // that settles incoming and outgoing bank transactions\n', '    address private _depositManager;\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    modifier onlyDepositManager() {\n', '        require(msg.sender == _depositManager);\n', '        _;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Constructor\n', '    ////////////////////////\n', '\n', '    constructor(\n', '        Universe universe,\n', '        address depositManager\n', '    )\n', '        AccessControlled(universe.accessPolicy())\n', '        public\n', '    {\n', '        UNIVERSE = universe;\n', '        _depositManager = depositManager;\n', '    }\n', '\n', '    ////////////////////////\n', '    // Public Functions\n', '    ////////////////////////\n', '\n', '    /// @notice enables or disables address to be receipient of EUR-T\n', '    function setAllowedTransferTo(address to, bool allowed)\n', '        public\n', '        only(ROLE_EURT_LEGAL_MANAGER)\n', '    {\n', '        setAllowedTransferToPrivate(to, allowed);\n', '    }\n', '\n', '    /// @notice enables or disables address to be sender of EUR-T\n', '    function setAllowedTransferFrom(address from, bool allowed)\n', '        public\n', '        only(ROLE_EURT_LEGAL_MANAGER)\n', '    {\n', '        setAllowedTransferFromPrivate(from, allowed);\n', '    }\n', '\n', '    /// @notice changes deposit manager\n', '    function changeDepositManager(address newDepositManager)\n', '        public\n', '        only(ROLE_EURT_LEGAL_MANAGER)\n', '    {\n', '        require(newDepositManager != address(0));\n', '        emit LogDepositManagerChanged(_depositManager, newDepositManager);\n', '        _depositManager = newDepositManager;\n', '    }\n', '\n', '    /// @notice sets limits and whitelists contracts from universe\n', '    function applySettings(\n', '        uint256 minDepositAmountEurUlps,\n', '        uint256 minWithdrawAmountEurUlps,\n', '        uint256 maxSimpleExchangeAllowanceEurUlps\n', '    )\n', '        public\n', '        only(ROLE_EURT_LEGAL_MANAGER)\n', '    {\n', '        applySettingsPrivate(\n', '            minDepositAmountEurUlps,\n', '            minWithdrawAmountEurUlps,\n', '            maxSimpleExchangeAllowanceEurUlps\n', '        );\n', '        _identityRegistry = IIdentityRegistry(UNIVERSE.identityRegistry());\n', '        allowFromUniverse();\n', '    }\n', '\n', '    /// @notice set official deposit and withdraw fees\n', '    /// fees are fractions of amount of deposit/withdraw (volume based)\n', '    /// deposit fees are taken by deposit manager before `deposit` is called on EuroToken, from amount sent to the bank\n', '    /// withdraw fees are taken from amount burned via `withdraw` funtion of EuroToken, deposit manager informs on final settlement via settleWithdraw\n', '    function applyFeeSettings(\n', '        uint256 depositFeeFraction,\n', '        uint256 withdrawalFeeFraction\n', '    )\n', '        public\n', '        onlyDepositManager\n', '        only(ROLE_EURT_DEPOSIT_MANAGER)\n', '    {\n', '        require(depositFeeFraction < 10**18);\n', '        require(withdrawalFeeFraction < 10**18);\n', '        _depositFeeFraction = depositFeeFraction;\n', '        _withdrawalFeeFraction = withdrawalFeeFraction;\n', '        emit LogFeeSettingsChanged(depositFeeFraction, withdrawalFeeFraction);\n', '    }\n', '\n', '    //\n', '    // Public Getters\n', '    //\n', '\n', '    function allowedTransferTo(address to)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _allowedTransferTo[to];\n', '    }\n', '\n', '    function allowedTransferFrom(address from)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return _allowedTransferFrom[from];\n', '    }\n', '\n', '    function minDepositAmountEurUlps()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _minDepositAmountEurUlps;\n', '    }\n', '\n', '    function minWithdrawAmountEurUlps()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _minWithdrawAmountEurUlps;\n', '    }\n', '\n', '    function maxSimpleExchangeAllowanceEurUlps()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _maxSimpleExchangeAllowanceEurUlps;\n', '    }\n', '\n', '    function depositManager()\n', '        public\n', '        constant\n', '        returns (address)\n', '    {\n', '        return _depositManager;\n', '    }\n', '\n', '    function depositFeeFraction()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _depositFeeFraction;\n', '    }\n', '\n', '    function withdrawalFeeFraction()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return _withdrawalFeeFraction;\n', '    }\n', '\n', '    //\n', '    // Implements ITokenController\n', '    //\n', '\n', '    function onTransfer(address broker, address from, address to, uint256 /*amount*/)\n', '        public\n', '        constant\n', '        returns (bool allow)\n', '    {\n', '        // detect brokered (transferFrom) transfer when from is different address executing transfer\n', '        bool isBrokeredTransfer = broker != from;\n', '        // "from" must be allowed to transfer from to "to"\n', '        bool isTransferAllowed = isTransferAllowedPrivate(from, to, isBrokeredTransfer);\n', '        // broker must have direct permission to transfer from\n', '        bool isBrokerAllowed = !isBrokeredTransfer || _allowedTransferFrom[broker];\n', '        return isTransferAllowed && isBrokerAllowed;\n', '    }\n', '\n', '    /// always approve\n', '    function onApprove(address, address, uint256)\n', '        public\n', '        constant\n', '        returns (bool allow)\n', '    {\n', '        return true;\n', '    }\n', '\n', '    /// allows to deposit if user has kyc and deposit is >= minimum\n', '    function onGenerateTokens(address /*sender*/, address owner, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow)\n', '    {\n', '        if (amount < _minDepositAmountEurUlps) {\n', '            return false;\n', '        }\n', '        if(_allowedTransferTo[owner]) {\n', '            return true;\n', '        }\n', '        IdentityClaims memory claims = deserializeClaims(_identityRegistry.getClaims(owner));\n', '        return claims.isVerified && !claims.accountFrozen;\n', '    }\n', '\n', '    /// allow to withdraw if user has a valid bank account, kyc and amount >= minium\n', '    function onDestroyTokens(address /*sender*/, address owner, uint256 amount)\n', '        public\n', '        constant\n', '        returns (bool allow)\n', '    {\n', '        if (amount < _minWithdrawAmountEurUlps) {\n', '            return false;\n', '        }\n', '        if(_allowedTransferFrom[owner]) {\n', '            return true;\n', '        }\n', '        IdentityClaims memory claims = deserializeClaims(_identityRegistry.getClaims(owner));\n', '        return claims.isVerified && !claims.accountFrozen && claims.hasBankAccount;\n', '    }\n', '\n', '    function onChangeTokenController(address sender, address newController)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        // can change if original sender (sender) has role on ROLE_EURT_LEGAL_MANAGER on msg.sender (which is euro token)\n', '        // this replaces only() modifier on euro token method\n', '        return accessPolicy().allowed(sender, ROLE_EURT_LEGAL_MANAGER, msg.sender, msg.sig) && newController != address(0x0);\n', '    }\n', '\n', '    /// always allow to transfer from owner to simple exchange lte _maxSimpleExchangeAllowanceEurUlps\n', '    function onAllowance(address /*owner*/, address spender)\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        address exchange = UNIVERSE.gasExchange();\n', '        if (spender == address(exchange)) {\n', '            // override on allowance to simple exchange\n', '            return _maxSimpleExchangeAllowanceEurUlps;\n', '        } else {\n', '            return 0; // no override\n', '        }\n', '    }\n', '\n', '    //\n', '    // Implements IContractId\n', '    //\n', '\n', '    function contractId() public pure returns (bytes32 id, uint256 version) {\n', '        return (0xddc22bc86ca8ebf8229756d3fd83791c143630f28e301fef65bbe3070a377f2a, 1);\n', '    }\n', '\n', '    ////////////////////////\n', '    // Private Functions\n', '    ////////////////////////\n', '\n', '    function applySettingsPrivate(\n', '        uint256 pMinDepositAmountEurUlps,\n', '        uint256 pMinWithdrawAmountEurUlps,\n', '        uint256 pMaxSimpleExchangeAllowanceEurUlps\n', '    )\n', '        private\n', '    {\n', '        _minDepositAmountEurUlps = pMinDepositAmountEurUlps;\n', '        _minWithdrawAmountEurUlps = pMinWithdrawAmountEurUlps;\n', '        _maxSimpleExchangeAllowanceEurUlps = pMaxSimpleExchangeAllowanceEurUlps;\n', '        emit LogSettingsChanged(_minDepositAmountEurUlps, _minWithdrawAmountEurUlps, _maxSimpleExchangeAllowanceEurUlps);\n', '    }\n', '\n', '    /// enables to and from transfers for several Universe singletons\n', '    function allowFromUniverse()\n', '        private\n', '    {\n', '        // contracts below may send funds\n', '        // euro lock must be able to send (invest)\n', '        setAllowedTransferFromPrivate(UNIVERSE.euroLock(), true);\n', '        // fee disbursal must be able to pay out\n', '        setAllowedTransferFromPrivate(UNIVERSE.feeDisbursal(), true);\n', '        // gas exchange must be able to act as a broker (from)\n', '        setAllowedTransferFromPrivate(UNIVERSE.gasExchange(), true);\n', '\n', '        // contracts below may receive funds\n', '        // euro lock may receive refunds\n', '        setAllowedTransferToPrivate(UNIVERSE.euroLock(), true);\n', '        // fee disbursal may receive funds to disburse\n', '        setAllowedTransferToPrivate(UNIVERSE.feeDisbursal(), true);\n', '        // gas exchange must be able to receive euro token (as payment)\n', '        setAllowedTransferToPrivate(UNIVERSE.gasExchange(), true);\n', '\n', '        emit LogUniverseReloaded();\n', '    }\n', '\n', '    function setAllowedTransferToPrivate(address to, bool allowed)\n', '        private\n', '    {\n', '        _allowedTransferTo[to] = allowed;\n', '        emit LogAllowedToAddress(to, allowed);\n', '    }\n', '\n', '    function setAllowedTransferFromPrivate(address from, bool allowed)\n', '        private\n', '    {\n', '        _allowedTransferFrom[from] = allowed;\n', '        emit LogAllowedFromAddress(from, allowed);\n', '    }\n', '\n', '    // optionally allows peer to peer transfers of Verified users: for the transferFrom check\n', '    function isTransferAllowedPrivate(address from, address to, bool allowPeerTransfers)\n', '        private\n', '        constant\n', '        returns (bool)\n', '    {\n', '        // check if both parties are explicitely allowed for transfers\n', '        bool explicitFrom = _allowedTransferFrom[from];\n', '        bool explicitTo = _allowedTransferTo[to];\n', '        if (explicitFrom && explicitTo) {\n', '            return true;\n', '        }\n', "        // try to resolve 'from'\n", '        if (!explicitFrom) {\n', '            IdentityClaims memory claimsFrom = deserializeClaims(_identityRegistry.getClaims(from));\n', '            explicitFrom = claimsFrom.isVerified && !claimsFrom.accountFrozen;\n', '        }\n', '        if (!explicitFrom) {\n', '            // all ETO and ETC contracts may send funds (for example: refund)\n', '            explicitFrom = UNIVERSE.isAnyOfInterfaceCollectionInstance(TRANSFER_ALLOWED_INTERFACES, from);\n', '        }\n', '        if (!explicitFrom) {\n', '            // from will not be resolved, return immediately\n', '            return false;\n', '        }\n', '        if (!explicitTo) {\n', '            // all ETO and ETC contracts may receive funds\n', '            explicitTo = UNIVERSE.isAnyOfInterfaceCollectionInstance(TRANSFER_ALLOWED_INTERFACES, to);\n', '        }\n', '        if (!explicitTo) {\n', '            // if not, `to` address must have kyc (all addresses with KYC may receive transfers)\n', '            IdentityClaims memory claims = deserializeClaims(_identityRegistry.getClaims(to));\n', '            explicitTo = claims.isVerified && !claims.accountFrozen;\n', '        }\n', '        if (allowPeerTransfers) {\n', '            return explicitTo;\n', '        }\n', '        if(claims.isVerified && !claims.accountFrozen && claimsFrom.isVerified && !claimsFrom.accountFrozen) {\n', '            // user to user transfer not allowed\n', '            return false;\n', '        }\n', '        // we only get here if explicitFrom was true\n', '        return explicitTo;\n', '    }\n', '}']