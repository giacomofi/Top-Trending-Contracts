['pragma solidity 0.4.18;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract Distributor is Ownable {\n', '    ERC20Interface token;\n', '\n', '    function Distributor (address _tokenAddress) public {\n', '        token = ERC20Interface(_tokenAddress);\n', '    }\n', '\n', '    function batchTransfer (address[] _to, uint256 _value) public onlyOwner {\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            token.transfer(_to[i], _value);\n', '        }\n', '    }\n', '\n', '}']