['pragma solidity 0.5.10;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'you are not the owner of this contract');\n", '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', "        require(newOwner != address(0), 'must provide valid address for new owner');\n", '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract BatchSend is Ownable {\n', '    ERC20 token_address;\n', '\n', '    event BatchSent(uint256 total);\n', '\n', '\n', '    constructor(address _token_address) public{\n', '        token_address = ERC20(_token_address);\n', '    }\n', '\n', '    function() external payable{}\n', '\n', '    //  mapping (address => uint256) balances;\n', '    // mapping (address => mapping (address => uint256)) allowed;\n', '    // uint256 public totalSupply;\n', '\n', '    function multisendToken(address[] memory _receivers, uint256[] memory _amounts) public {\n', '        uint256 total = 0;\n', '\n', '        uint256 i = 0;\n', '        for (i; i < _receivers.length; i++) {\n', '            token_address.transferFrom(msg.sender, _receivers[i], _amounts[i]);\n', '            total += _amounts[i];\n', '        }\n', '        emit BatchSent(total);\n', '    }\n', '\n', '    function withdrawTokens(ERC20 _token, address _to, uint256 _amount) public onlyOwner {\n', '        assert(_token.transfer(_to, _amount));\n', '    }\n', '\n', '}']