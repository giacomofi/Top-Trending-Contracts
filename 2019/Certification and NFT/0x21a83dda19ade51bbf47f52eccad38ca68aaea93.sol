['pragma solidity 0.4.26;\n', '\n', 'contract IMigrationContract {\n', '    function migrate(address addr, uint256 nas) public returns (bool success);\n', '}\n', '\n', '/* safe calculate */\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', '// token interface properties and methods\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '// the new contact coind main\n', 'contract NEC is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string  public constant name = "New Energy Coin";\n', '    string  public constant symbol = "NEC";\n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;          // ETH address\n', '    address public newContractAddr;         // token update address\n', '\n', '    // crowdsale parameters\n', '    bool    public isFunding;                // change status to true\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingStopBlock;\n', '\n', '    uint256 public currentSupply;           // solding tokens count\n', '    uint256 public tokenRaised = 0;         // all sold token\n', '    uint256 public tokenMigrated = 0;     // all transfered token\n', '    uint256 public tokenExchangeRate = 100000;             // 1000  contract coin to 1 ETH\n', '    uint256 public constant initialSupply = 500000000;  // total supply of this contract\n', '\n', '    // events\n', '    event AllocateToken(address indexed _to, uint256 _value);   // private transfer token;\n', '    event IssueToken(address indexed _to, uint256 _value);      // issue token;\n', '    event IncreaseSupply(uint256 _value);\n', '    event DecreaseSupply(uint256 _value);\n', '    event Migrate(address indexed _to, uint256 _value);\n', '\n', '    // change unit\n', '    function formatDecimals(uint256 _value) internal pure returns (uint256 ) {\n', '        return _value * 10 ** decimals;\n', '    }\n', '\n', '    // constructor\n', '    constructor() public\n', '    {\n', '        initializeSaleWalletAddress();\n', '        isFunding = false;                           // change status\n', '        fundingStartBlock = 0;\n', '        fundingStopBlock = 0;\n', '\n', '        currentSupply = formatDecimals(initialSupply);\n', '        totalSupply = formatDecimals(initialSupply);\n', '        balances[msg.sender] = totalSupply;\n', '        if(currentSupply > totalSupply) revert();\n', '    }\n', '    \n', '    function initializeSaleWalletAddress() private {\n', '        ethFundDeposit = 0x54ED20e3Aefc01cAf7CB536a9F49186caF2A6251;\n', '    }\n', '\n', '    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n', '\n', '    ///  set token exchange\n', '    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n', '        if (_tokenExchangeRate == 0) revert();\n', '        if (_tokenExchangeRate == tokenExchangeRate) revert();\n', '\n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', '\n', '    /// @dev overflow token\n', '    function increaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        if (value + currentSupply > totalSupply) revert();\n', '        currentSupply = safeAdd(currentSupply, value);\n', '        emit IncreaseSupply(value);\n', '    }\n', '\n', '    /// @dev missed token\n', '    function decreaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        if (value + tokenRaised > currentSupply) revert();\n', '\n', '        currentSupply = safeSubtract(currentSupply, value);\n', '        emit DecreaseSupply(value);\n', '    }\n', '\n', '    ///  start exceptions\n', '    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n', '        if (isFunding) revert();\n', '        if (_fundingStartBlock >= _fundingStopBlock) revert();\n', '        if (block.number >= _fundingStartBlock) revert();\n', '\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingStopBlock = _fundingStopBlock;\n', '        isFunding = true;\n', '    }\n', '\n', '    ///  close exceptions\n', '    function stopFunding() isOwner external {\n', '        if (!isFunding) revert();\n', '        isFunding = false;\n', '    }\n', '\n', '    /// new contract address\n', '    function setMigrateContract(address _newContractAddr) isOwner external {\n', '        if (_newContractAddr == newContractAddr) revert();\n', '        newContractAddr = _newContractAddr;\n', '    }\n', '\n', '    /// new contract address for owner\n', '    function changeOwner(address _newFundDeposit) isOwner() external {\n', '        if (_newFundDeposit == address(0x0)) revert();\n', '        ethFundDeposit = _newFundDeposit;\n', '    }\n', '\n', '    // migrate to Contract address\n', '    function migrate() external {\n', '        if(isFunding) revert();\n', '        if(newContractAddr == address(0x0)) revert();\n', '\n', '        uint256 tokens = balances[msg.sender];\n', '        if (tokens == 0) revert();\n', '\n', '        balances[msg.sender] = 0;\n', '        tokenMigrated = safeAdd(tokenMigrated, tokens);\n', '\n', '        IMigrationContract newContract = IMigrationContract(newContractAddr);\n', '        if (!newContract.migrate(msg.sender, tokens)) revert();\n', '\n', '        emit Migrate(msg.sender, tokens);               // log it\n', '    }\n', '\n', '    // tansfer eth\n', '    function transferETH() isOwner external {\n', '        if (address(this).balance == 0) revert();\n', '        if (!ethFundDeposit.send(address(this).balance)) revert();\n', '    }\n', '\n', '    //  let Contract token allocate to the address\n', '    function allocateToken (address _addr, uint256 _eth) isOwner external {\n', '        if (_eth == 0) revert();\n', '        if (_addr == address(0x0)) revert();\n', '\n', '        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n', '        if (tokens + tokenRaised > currentSupply) revert();\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[_addr] += tokens;\n', '\n', '        emit AllocateToken(_addr, tokens);  // log token record\n', '    }\n', '\n', '    // buy token\n', '    function () payable public{\n', '        if (!isFunding) revert();\n', '        if (msg.value == 0) revert();\n', '\n', '        if (block.number < fundingStartBlock) revert();\n', '        if (block.number > fundingStopBlock) revert();\n', '\n', '        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n', '        if (tokens + tokenRaised > currentSupply) revert();\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[msg.sender] += tokens;\n', '\n', '        emit IssueToken(msg.sender, tokens);  // log record\n', '    }\n', '}']