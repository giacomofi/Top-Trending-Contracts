['pragma solidity 0.4.25;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Salary {\n', '  using SafeMath for uint256;\n', '  address public admin;\n', '  mapping(address => bool) public helperAddressTable;\n', '  address[] public addressList;\n', '  uint256 public deliveredId;\n', '  // deliveredId is global index indicates the number of months that the company deliver tokens.\n', '  // StaffAddress => ( deliveredId => monthlySalaryAmount )\n', '\n', '  mapping(address => mapping(uint256 => uint256)) public staffSalaryData;\n', '  // status: 0 (null) status: 1 (normal) status: 2 (terminated)\n', '  mapping(address => uint256) public staffSalaryStatus;\n', '\n', '  ERC20 token;\n', '\n', '  event TerminatePackage(address indexed staff);\n', '  event ChangeTokenContractAddress(address indexed newAddress);\n', '  \n', '  modifier onlyAdmin() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  modifier onlyHelper() {\n', '    require(msg.sender == admin || helperAddressTable[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  function getFullAddressList() view public returns(address[]) {\n', '    return addressList;\n', '  }\n', '\n', '  /**\n', '  * @dev This would distribute all salary of the month.\n', '  */\n', '  function distribute() public onlyAdmin {\n', '    uint256 i;\n', '    address receiverAddress;\n', '    uint256 transferAmount;\n', '    for(i = 0; i < addressList.length; i++) {\n', '      receiverAddress = addressList[i];\n', '      if (staffSalaryStatus[receiverAddress] == 1) {\n', '        transferAmount = staffSalaryData[receiverAddress][deliveredId];\n', '        if (transferAmount > 0) {\n', '          require(token.transfer(receiverAddress, transferAmount));\n', '        }\n', '      }\n', '    }\n', '    deliveredId = deliveredId + 1;\n', '  }\n', '\n', '  /**\n', '  * @dev The function should only be called from Admin.  This would require users approve\n', '  * efficient amount of Token to the contract beforehead.\n', '  * @param _staffAddress address The staff&#39;s wallet address where they would receive their salary.\n', '  * @param _monthlySalary uint256[] every monthly salary start from next index\n', '  */\n', '\n', '  function newPackage(address _staffAddress, uint256[] _monthlySalary) external onlyHelper{\n', '    uint256 i;\n', '    uint256 packageTotalAmount = 0;\n', '    require(staffSalaryStatus[_staffAddress] == 0);\n', '    for (i = 0; i < _monthlySalary.length; i++) {\n', '      staffSalaryData[_staffAddress][deliveredId + i] = _monthlySalary[i];\n', '      packageTotalAmount = packageTotalAmount + _monthlySalary[i];\n', '    }\n', '    addressList.push(_staffAddress);\n', '    staffSalaryStatus[_staffAddress] = 1;\n', '    require(token.transferFrom(msg.sender, address(this), packageTotalAmount));\n', '  }\n', '\n', '  /**\n', '  * @dev When there&#39;s a staff resign and terminate the package, admin can withdraw tokens\n', '  * from the contract.  This would emit an event TerminatePackage which is the only event of this contract.\n', '  * all staff should watch this event on Ethereum in order to protect their rights.\n', '  * efficient amount of Token to the contract beforehead.\n', '  * @param _staffAddress address The staff&#39;s wallet address where they would receive their salary.\n', '  */\n', '  function terminatePackage(address _staffAddress) external onlyAdmin {\n', '    emit TerminatePackage(_staffAddress);\n', '    staffSalaryStatus[_staffAddress] = 2;\n', '  }\n', '\n', '  function withdrawToken(uint256 amount) public onlyAdmin {\n', '    require(token.transfer(admin, amount));\n', '  }\n', '\n', '  /**\n', '  * @dev To facilitate the process of constructing salary system, we need an address that could\n', '  * execute `newPacakge`.\n', '  * @param _helperAddress the address that is to be assigned as a helper\n', '  */\n', '  function setHelper(address _helperAddress) external onlyAdmin {\n', '    helperAddressTable[_helperAddress] = true;\n', '  }\n', '\n', '  /**\n', '  * @dev A address controled by hotwallet that is\n', '  * able to call newPackage is a risk to the system. We should remove helper after\n', '  * the packages are properly set.\n', '  * @param _helperAddress the address to be removed from helper.\n', '  */\n', '  function removeHelper(address _helperAddress) external onlyAdmin {\n', '    require(helperAddressTable[_helperAddress] = true);\n', '    helperAddressTable[_helperAddress] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Change token address from BCNP to BCNT\n', '   * @param _newAddress the new token contract address\n', '  */ \n', '  function changeTokenContractAddress(address _newAddress) external onlyAdmin {\n', '    require(_newAddress != address(0));\n', '    token = ERC20(_newAddress);\n', '    emit ChangeTokenContractAddress(_newAddress);\n', '  }\n', '\n', '  constructor (address _tokenAddress) public {\n', '    admin = msg.sender;\n', '    token = ERC20(_tokenAddress);\n', '  }\n', '}']
['pragma solidity 0.4.25;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Salary {\n', '  using SafeMath for uint256;\n', '  address public admin;\n', '  mapping(address => bool) public helperAddressTable;\n', '  address[] public addressList;\n', '  uint256 public deliveredId;\n', '  // deliveredId is global index indicates the number of months that the company deliver tokens.\n', '  // StaffAddress => ( deliveredId => monthlySalaryAmount )\n', '\n', '  mapping(address => mapping(uint256 => uint256)) public staffSalaryData;\n', '  // status: 0 (null) status: 1 (normal) status: 2 (terminated)\n', '  mapping(address => uint256) public staffSalaryStatus;\n', '\n', '  ERC20 token;\n', '\n', '  event TerminatePackage(address indexed staff);\n', '  event ChangeTokenContractAddress(address indexed newAddress);\n', '  \n', '  modifier onlyAdmin() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  modifier onlyHelper() {\n', '    require(msg.sender == admin || helperAddressTable[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  function getFullAddressList() view public returns(address[]) {\n', '    return addressList;\n', '  }\n', '\n', '  /**\n', '  * @dev This would distribute all salary of the month.\n', '  */\n', '  function distribute() public onlyAdmin {\n', '    uint256 i;\n', '    address receiverAddress;\n', '    uint256 transferAmount;\n', '    for(i = 0; i < addressList.length; i++) {\n', '      receiverAddress = addressList[i];\n', '      if (staffSalaryStatus[receiverAddress] == 1) {\n', '        transferAmount = staffSalaryData[receiverAddress][deliveredId];\n', '        if (transferAmount > 0) {\n', '          require(token.transfer(receiverAddress, transferAmount));\n', '        }\n', '      }\n', '    }\n', '    deliveredId = deliveredId + 1;\n', '  }\n', '\n', '  /**\n', '  * @dev The function should only be called from Admin.  This would require users approve\n', '  * efficient amount of Token to the contract beforehead.\n', "  * @param _staffAddress address The staff's wallet address where they would receive their salary.\n", '  * @param _monthlySalary uint256[] every monthly salary start from next index\n', '  */\n', '\n', '  function newPackage(address _staffAddress, uint256[] _monthlySalary) external onlyHelper{\n', '    uint256 i;\n', '    uint256 packageTotalAmount = 0;\n', '    require(staffSalaryStatus[_staffAddress] == 0);\n', '    for (i = 0; i < _monthlySalary.length; i++) {\n', '      staffSalaryData[_staffAddress][deliveredId + i] = _monthlySalary[i];\n', '      packageTotalAmount = packageTotalAmount + _monthlySalary[i];\n', '    }\n', '    addressList.push(_staffAddress);\n', '    staffSalaryStatus[_staffAddress] = 1;\n', '    require(token.transferFrom(msg.sender, address(this), packageTotalAmount));\n', '  }\n', '\n', '  /**\n', "  * @dev When there's a staff resign and terminate the package, admin can withdraw tokens\n", '  * from the contract.  This would emit an event TerminatePackage which is the only event of this contract.\n', '  * all staff should watch this event on Ethereum in order to protect their rights.\n', '  * efficient amount of Token to the contract beforehead.\n', "  * @param _staffAddress address The staff's wallet address where they would receive their salary.\n", '  */\n', '  function terminatePackage(address _staffAddress) external onlyAdmin {\n', '    emit TerminatePackage(_staffAddress);\n', '    staffSalaryStatus[_staffAddress] = 2;\n', '  }\n', '\n', '  function withdrawToken(uint256 amount) public onlyAdmin {\n', '    require(token.transfer(admin, amount));\n', '  }\n', '\n', '  /**\n', '  * @dev To facilitate the process of constructing salary system, we need an address that could\n', '  * execute `newPacakge`.\n', '  * @param _helperAddress the address that is to be assigned as a helper\n', '  */\n', '  function setHelper(address _helperAddress) external onlyAdmin {\n', '    helperAddressTable[_helperAddress] = true;\n', '  }\n', '\n', '  /**\n', '  * @dev A address controled by hotwallet that is\n', '  * able to call newPackage is a risk to the system. We should remove helper after\n', '  * the packages are properly set.\n', '  * @param _helperAddress the address to be removed from helper.\n', '  */\n', '  function removeHelper(address _helperAddress) external onlyAdmin {\n', '    require(helperAddressTable[_helperAddress] = true);\n', '    helperAddressTable[_helperAddress] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Change token address from BCNP to BCNT\n', '   * @param _newAddress the new token contract address\n', '  */ \n', '  function changeTokenContractAddress(address _newAddress) external onlyAdmin {\n', '    require(_newAddress != address(0));\n', '    token = ERC20(_newAddress);\n', '    emit ChangeTokenContractAddress(_newAddress);\n', '  }\n', '\n', '  constructor (address _tokenAddress) public {\n', '    admin = msg.sender;\n', '    token = ERC20(_tokenAddress);\n', '  }\n', '}']
