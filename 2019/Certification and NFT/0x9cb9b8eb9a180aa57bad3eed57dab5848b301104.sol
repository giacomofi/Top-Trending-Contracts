['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 token interface\n', ' */\n', ' contract ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', ' }\n', '\n', '/**\n', ' * @title OptionsEscrow\n', ' * @dev Escrow that holds tokens for a beneficiary with various vesting schedules and strike prices\n', ' * The contract owner may grant options and reclaim tokens from expired options.\n', ' */\n', '\n', 'contract OptionsEscrow is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    struct Option {\n', '        address beneficiary;\n', '        uint tokenAmount;\n', '        uint strikeMultiple;\n', '        uint128 vestUntil;\n', '        uint128 expiration;\n', '    }\n', '\n', '    address public token;\n', '    uint public issuedTokens;\n', '    uint64 public optionsCount;\n', '    mapping (address => Option) public grantedOptions;\n', '\n', '    event GrantOption(address indexed beneficiary, uint tokenAmount, uint strikeMultiple, uint128 vestUntil, uint128 expiration);\n', '    event ExerciseOption(address indexed beneficiary, uint exercisedAmount, uint strikeMultiple);\n', '    event ReclaimOption(address indexed beneficiary);\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _token The token for which options are being granted.\n', '     */\n', '    constructor(address _token) public {\n', '        /* require(token != address(0)); */\n', '\n', '        token = _token;\n', '        issuedTokens = 0;\n', '        optionsCount = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Issue an option for a beneficiary with a custom amount, strike price, and vesting schedule\n', '     *      NOTE: the use of a strike multiple means that the token-to-wei ration must always be positive\n', '     *            this can be worked around be also adding a strikeDenomination\n', '     * @param _beneficiary The recipient of the option,\n', '     * @param _tokenAmount The amount of tokens available to be claimed\n', '     * @param _strikeMultiple The amount of tokens for each wei provided\n', '     * @param _vestUntil The timestamp (epoch in seconds) that the option becomes exercisable\n', '     * @param _expiration The timestamp (epoch in seconds) that the option is no longer exercisable\n', '     */\n', '    function issueOption(address _beneficiary,\n', '                            uint _tokenAmount,\n', '                            uint _strikeMultiple,\n', '                         uint128 _vestUntil,\n', '                         uint128 _expiration) onlyOwner public {\n', '        uint _issuedTokens = issuedTokens.add(_tokenAmount);\n', '\n', '        require(_tokenAmount > 0 &&\n', '                _expiration > _vestUntil &&\n', '                _vestUntil > block.timestamp &&\n', '                ERC20(token).balanceOf(this) > _issuedTokens);\n', '\n', '        Option memory option = Option(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\n', '\n', '        grantedOptions[_beneficiary] = option;\n', '        optionsCount++;\n', '        issuedTokens = _issuedTokens;\n', '\n', '        emit GrantOption(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the beneficiary to exercise a vested option.\n', '     *      The option can be partially exercised.\n', '     */\n', '    function () public payable {\n', '        Option storage option = grantedOptions[msg.sender];\n', '\n', '        require(option.beneficiary == msg.sender &&\n', '                option.vestUntil <= block.timestamp &&\n', '                option.expiration > block.timestamp &&\n', '                option.tokenAmount > 0);\n', '\n', '        uint amountExercised = msg.value.mul(option.strikeMultiple);\n', '        if(amountExercised > option.tokenAmount) {\n', '            amountExercised = option.tokenAmount;\n', '        }\n', '\n', '        option.tokenAmount = option.tokenAmount.sub(amountExercised);\n', '        issuedTokens = issuedTokens.sub(amountExercised);\n', '        require(ERC20(token).transfer(msg.sender, amountExercised));\n', '\n', '        emit ExerciseOption(msg.sender, amountExercised, option.strikeMultiple);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to reclaim tokens from a list of options that have expired\n', '     * @param beneficiaries An array of beneficiary addresses\n', '     */\n', '    function reclaimExpiredOptionTokens(address[] beneficiaries) public onlyOwner returns (uint reclaimedTokenAmount) {\n', '        reclaimedTokenAmount = 0;\n', '        for (uint i=0; i<beneficiaries.length; i++) {\n', '            Option storage option = grantedOptions[beneficiaries[i]];\n', '            if (option.expiration <= block.timestamp) {\n', '                reclaimedTokenAmount = reclaimedTokenAmount.add(option.tokenAmount);\n', '                option.tokenAmount = 0;\n', '\n', '                emit ReclaimOption(beneficiaries[i]);\n', '            }\n', '        }\n', '        issuedTokens = issuedTokens.sub(reclaimedTokenAmount);\n', '        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to reclaim tokens that have not been issued\n', '     */\n', '    function reclaimUnissuedTokens() public onlyOwner returns (uint reclaimedTokenAmount) {\n', '        reclaimedTokenAmount = ERC20(token).balanceOf(this) - issuedTokens;\n', '        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to withdraw eth from exercised options\n', '     */\n', '    function withdrawEth() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Constant getter to see details of an option\n', '     * @param _beneficiary The address of beneficiary\n', '     */\n', '    function getOption(address _beneficiary) public constant returns(address beneficiary,\n', '                                                          uint tokenAmount,\n', '                                                          uint strikeMultiple,\n', '                                                          uint128 vestUntil,\n', '                                                          uint128 expiration) {\n', '        Option memory option = grantedOptions[_beneficiary];\n', '        beneficiary = option.beneficiary;\n', '        tokenAmount = option.tokenAmount;\n', '        strikeMultiple = option.strikeMultiple;\n', '        vestUntil = option.vestUntil;\n', '        expiration = option.expiration;\n', '    }\n', '}']