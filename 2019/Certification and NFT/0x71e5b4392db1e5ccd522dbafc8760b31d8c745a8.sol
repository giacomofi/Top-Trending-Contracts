['pragma solidity ^0.4.25;\n', '\n', 'interface IPrizeCalculator {\n', '    function calculatePrizeAmount(uint _predictionTotalTokens, uint _winOutputTotalTokens, uint _forecastTokens)\n', '        pure\n', '        external\n', '        returns (uint);\n', '}\n', '\n', 'contract PrizeCalculator is IPrizeCalculator {\n', '    using SafeMath for uint;\n', '     \n', '    function calculatePrizeAmount(uint _distributeTotalTokens, uint _collectedTotalTokens, uint _contributionTokens)        \n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require (_distributeTotalTokens > 0, "Not valid 1 param");\n', '        require (_collectedTotalTokens > 0, "Not valid 2 param");\n', '        require (_contributionTokens > 0, "Not valid  3 param");\n', '        \n', '        uint returnValue = 0;\n', '        \n', '        returnValue = _contributionTokens.mul(_distributeTotalTokens).div(_collectedTotalTokens);\n', '        \n', '        return returnValue;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}']