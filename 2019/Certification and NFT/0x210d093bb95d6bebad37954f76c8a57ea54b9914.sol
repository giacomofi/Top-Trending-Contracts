['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    require(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    require(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TwoKeyCongress {\n', '\n', '    event ReceivedEther(address sender, uint amount);\n', '\n', '    using SafeMath for uint;\n', '\n', '    //Period length for voting\n', '    uint256 public debatingPeriodInMinutes;\n', '    //Array of proposals\n', '    Proposal[] public proposals;\n', '    //Number of proposals\n', '    uint public numProposals;\n', '\n', '    TwoKeyCongressMembersRegistry public twoKeyCongressMembersRegistry;\n', '\n', '    event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\n', '    event Voted(uint proposalID, bool position, address voter, string justification);\n', '    event ProposalTallied(uint proposalID, uint quorum, bool active);\n', '    event ChangeOfRules(uint256 _newDebatingPeriodInMinutes);\n', '\n', '    struct Proposal {\n', '        address recipient;\n', '        uint amount;\n', '        string description;\n', '        uint minExecutionDate;\n', '        bool executed;\n', '        bool proposalPassed;\n', '        uint numberOfVotes;\n', '        uint againstProposalTotal;\n', '        uint supportingProposalTotal;\n', '        bytes32 proposalHash;\n', '        bytes transactionBytecode;\n', '        Vote[] votes;\n', '        mapping (address => bool) voted;\n', '    }\n', '\n', '    struct Vote {\n', '        bool inSupport;\n', '        address voter;\n', '        string justification;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Modifier to check if the msg.sender is member of the congress\n', '     */\n', '    modifier onlyMembers() {\n', '        require(twoKeyCongressMembersRegistry.isMember(msg.sender) == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param _minutesForDebate is the number of minutes debate length\n', '     */\n', '    constructor(\n', '        uint256 _minutesForDebate\n', '    )\n', '    payable\n', '    public\n', '    {\n', '        changeVotingRules(_minutesForDebate);\n', '    }\n', '\n', '    /**\n', '     * @notice Function which will be called only once immediately after contract is deployed\n', '     * @param _twoKeyCongressMembers is the address of already deployed contract\n', '     */\n', '    function setTwoKeyCongressMembersContract(\n', '        address _twoKeyCongressMembers\n', '    )\n', '    public\n', '    {\n', '        require(address(twoKeyCongressMembersRegistry) == address(0));\n', '        twoKeyCongressMembersRegistry = TwoKeyCongressMembersRegistry(_twoKeyCongressMembers);\n', '    }\n', '\n', '\n', '    /**\n', '     * Change voting rules\n', '     * @param minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\n', '     */\n', '    function changeVotingRules(\n', '        uint256 minutesForDebate\n', '    )\n', '    internal\n', '    {\n', '        debatingPeriodInMinutes = minutesForDebate;\n', '        emit ChangeOfRules(minutesForDebate);\n', '    }\n', '\n', '    /**\n', '     * Add Proposal\n', '     *\n', '     * Propose to send `weiAmount / 1e18` ether to `beneficiary` for `jobDescription`. `transactionBytecode ? Contains : Does not contain` code.\n', '     *\n', '     * @param beneficiary who to send the ether to\n', '     * @param weiAmount amount of ether to send, in wei\n', '     * @param jobDescription Description of job\n', '     * @param transactionBytecode bytecode of transaction\n', '     */\n', '    function newProposal(\n', '        address beneficiary,\n', '        uint weiAmount,\n', '        string jobDescription,\n', '        bytes transactionBytecode)\n', '    public\n', '    payable\n', '    onlyMembers\n', '    {\n', '        uint proposalID = proposals.length++;\n', '        Proposal storage p = proposals[proposalID];\n', '        p.recipient = beneficiary;\n', '        p.amount = weiAmount;\n', '        p.description = jobDescription;\n', '        p.proposalHash = keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\n', '        p.transactionBytecode = transactionBytecode;\n', '        p.minExecutionDate = block.timestamp + debatingPeriodInMinutes * 1 minutes;\n', '        p.executed = false;\n', '        p.proposalPassed = false;\n', '        p.numberOfVotes = 0;\n', '        p.againstProposalTotal = 0;\n', '        p.supportingProposalTotal = 0;\n', '        emit ProposalAdded(proposalID, beneficiary, weiAmount, jobDescription);\n', '        numProposals = proposalID+1;\n', '    }\n', '\n', '\n', '    /**\n', '     * Check if a proposal code matches\n', '     *\n', '     * @param proposalNumber ID number of the proposal to query\n', '     * @param beneficiary who to send the ether to\n', '     * @param weiAmount amount of ether to send\n', '     * @param transactionBytecode bytecode of transaction\n', '     */\n', '    function checkProposalCode(\n', '        uint proposalNumber,\n', '        address beneficiary,\n', '        uint weiAmount,\n', '        bytes transactionBytecode\n', '    )\n', '    public\n', '    view\n', '    returns (bool codeChecksOut)\n', '    {\n', '        Proposal storage p = proposals[proposalNumber];\n', '        return p.proposalHash == keccak256(abi.encodePacked(beneficiary, weiAmount, transactionBytecode));\n', '    }\n', '\n', '    /**\n', '     * Log a vote for a proposal\n', '     *\n', '     * Vote `supportsProposal? in support of : against` proposal #`proposalNumber`\n', '     *\n', '     * @param proposalNumber number of proposal\n', '     * @param supportsProposal either in favor or against it\n', '     * @param justificationText optional justification text\n', '     */\n', '    function vote(\n', '        uint proposalNumber,\n', '        bool supportsProposal,\n', '        string justificationText\n', '    )\n', '    public\n', '    onlyMembers\n', '    returns (uint256 voteID)\n', '    {\n', '        Proposal storage p = proposals[proposalNumber]; // Get the proposal\n', '        require(block.timestamp <= p.minExecutionDate);\n', '        require(!p.voted[msg.sender]);                  // If has already voted, cancel\n', '        p.voted[msg.sender] = true;                     // Set this voter as having voted\n', '        p.numberOfVotes++;\n', '        voteID = p.numberOfVotes;                     // Increase the number of votes\n', '        p.votes.push(Vote({ inSupport: supportsProposal, voter: msg.sender, justification: justificationText }));\n', '        uint votingPower = twoKeyCongressMembersRegistry.getMemberVotingPower(msg.sender);\n', '        if (supportsProposal) {                         // If they support the proposal\n', '            p.supportingProposalTotal += votingPower; // Increase score\n', "        } else {                                        // If they don't\n", '            p.againstProposalTotal += votingPower;                          // Decrease the score\n', '        }\n', '        // Create a log of this event\n', '        emit Voted(proposalNumber,  supportsProposal, msg.sender, justificationText);\n', '        return voteID;\n', '    }\n', '\n', '    function getVoteCount(\n', '        uint256 proposalNumber\n', '    )\n', '    onlyMembers\n', '    public\n', '    view\n', '    returns(uint256 numberOfVotes, uint256 supportingProposalTotal, uint256 againstProposalTotal, string description)\n', '    {\n', '        require(proposals[proposalNumber].proposalHash != 0);\n', '        numberOfVotes = proposals[proposalNumber].numberOfVotes;\n', '        supportingProposalTotal = proposals[proposalNumber].supportingProposalTotal;\n', '        againstProposalTotal = proposals[proposalNumber].againstProposalTotal;\n', '        description = proposals[proposalNumber].description;\n', '    }\n', '\n', '\n', '    /**\n', '     * Finish vote\n', '     *\n', '     * Count the votes proposal #`proposalNumber` and execute it if approved\n', '     *\n', '     * @param proposalNumber proposal number\n', '     * @param transactionBytecode optional: if the transaction contained a bytecode, you need to send it\n', '     */\n', '    function executeProposal(\n', '        uint proposalNumber,\n', '        bytes transactionBytecode\n', '    )\n', '    public\n', '    onlyMembers\n', '    {\n', '        Proposal storage p = proposals[proposalNumber];\n', '        uint minimumQuorum = twoKeyCongressMembersRegistry.minimumQuorum();\n', '        uint maxVotingPower = twoKeyCongressMembersRegistry.maxVotingPower();\n', '        require(\n', '//            block.timestamp > p.minExecutionDate  &&                             // If it is past the voting deadline\n', '             !p.executed                                                         // and it has not already been executed\n', '            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))  // and the supplied code matches the proposal\n', '            && p.numberOfVotes >= minimumQuorum.sub(1) // and a minimum quorum has been reached...\n', '            && uint(p.supportingProposalTotal) >= maxVotingPower.mul(51).div(100) // Total support should be >= than 51%\n', '        );\n', '\n', '        // ...then execute result\n', '        p.executed = true; // Avoid recursive calling\n', '        p.proposalPassed = true;\n', '\n', '        // Fire Events\n', '        emit ProposalTallied(proposalNumber, p.numberOfVotes, p.proposalPassed);\n', '\n', '//         Call external function\n', '        require(p.recipient.call.value(p.amount)(transactionBytecode));\n', '    }\n', '\n', '\n', '    /// @notice Function to get major proposal data\n', '    /// @param proposalId is the id of proposal\n', '    /// @return tuple containing all the data for proposal\n', '    function getProposalData(\n', '        uint proposalId\n', '    )\n', '    public\n', '    view\n', '    returns (uint,string,uint,bool,uint,uint,uint,bytes)\n', '    {\n', '        Proposal memory p = proposals[proposalId];\n', '        return (p.amount, p.description, p.minExecutionDate, p.executed, p.numberOfVotes, p.supportingProposalTotal, p.againstProposalTotal, p.transactionBytecode);\n', '    }\n', '\n', '\n', '    /// @notice Fallback function\n', '    function () payable public {\n', '        emit ReceivedEther(msg.sender, msg.value);\n', '    }\n', '}\n', '\n', 'contract TwoKeyCongressMembersRegistry {\n', '    /**\n', '     * This contract will serve as accountant for Members inside TwoKeyCongress\n', '     * contract. Only contract eligible to mutate state of this contract is TwoKeyCongress\n', "     * TwoKeyCongress will check for it's members from this contract.\n", '     */\n', '\n', '    using SafeMath for uint;\n', '\n', '    event MembershipChanged(address member, bool isMember);\n', '\n', '    address public TWO_KEY_CONGRESS;\n', '\n', '    // The maximum voting power containing sum of voting powers of all active members\n', '    uint256 public maxVotingPower;\n', '    //The minimum number of voting members that must be in attendance\n', '    uint256 public minimumQuorum;\n', '\n', '    // Mapping to check if the member is belonging to congress\n', '    mapping (address => bool) public isMemberInCongress;\n', '    // Mapping address to memberId\n', '    mapping(address => Member) public address2Member;\n', '    // Mapping to store all members addresses\n', '    address[] public allMembers;\n', '\n', '    struct Member {\n', '        address memberAddress;\n', '        bytes32 name;\n', '        uint votingPower;\n', '        uint memberSince;\n', '    }\n', '\n', '    modifier onlyTwoKeyCongress () {\n', '        require(msg.sender == TWO_KEY_CONGRESS);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param initialCongressMembers is the array containing addresses of initial members\n', '     * @param memberVotingPowers is the array of unassigned integers containing voting powers respectively\n', '     * @dev initialMembers.length must be equal votingPowers.length\n', '     */\n', '    constructor(\n', '        address[] initialCongressMembers,\n', '        bytes32[] initialCongressMemberNames,\n', '        uint[] memberVotingPowers,\n', '        address _twoKeyCongress\n', '    )\n', '    public\n', '    {\n', '        uint length = initialCongressMembers.length;\n', '        for(uint i=0; i<length; i++) {\n', '            addMemberInternal(\n', '                initialCongressMembers[i],\n', '                initialCongressMemberNames[i],\n', '                memberVotingPowers[i]\n', '            );\n', '        }\n', '        TWO_KEY_CONGRESS = _twoKeyCongress;\n', '    }\n', '\n', '    /**\n', '     * Add member\n', '     *\n', '     * Make `targetMember` a member named `memberName`\n', '     *\n', '     * @param targetMember ethereum address to be added\n', '     * @param memberName public name for that member\n', '     */\n', '    function addMember(\n', '        address targetMember,\n', '        bytes32 memberName,\n', '        uint _votingPower\n', '    )\n', '    public\n', '    onlyTwoKeyCongress\n', '    {\n', '        addMemberInternal(targetMember, memberName, _votingPower);\n', '    }\n', '\n', '    function addMemberInternal(\n', '        address targetMember,\n', '        bytes32 memberName,\n', '        uint _votingPower\n', '    )\n', '    internal\n', '    {\n', '        //Require that this member is not already a member of congress\n', '        require(isMemberInCongress[targetMember] == false);\n', '        minimumQuorum = allMembers.length;\n', '        maxVotingPower = maxVotingPower.add(_votingPower);\n', '        address2Member[targetMember] = Member(\n', '            {\n', '            memberAddress: targetMember,\n', '            memberSince: block.timestamp,\n', '            votingPower: _votingPower,\n', '            name: memberName\n', '            }\n', '        );\n', '        allMembers.push(targetMember);\n', '        isMemberInCongress[targetMember] = true;\n', '        emit MembershipChanged(targetMember, true);\n', '    }\n', '\n', '    /**\n', '     * Remove member\n', '     *\n', '     * @notice Remove membership from `targetMember`\n', '     *\n', '     * @param targetMember ethereum address to be removed\n', '     */\n', '    function removeMember(\n', '        address targetMember\n', '    )\n', '    public\n', '    onlyTwoKeyCongress\n', '    {\n', '        require(isMemberInCongress[targetMember] == true);\n', '\n', '        //Remove member voting power from max voting power\n', '        uint votingPower = getMemberVotingPower(targetMember);\n', '        maxVotingPower-= votingPower;\n', '\n', '        uint length = allMembers.length;\n', '        uint i=0;\n', '        //Find selected member\n', '        while(allMembers[i] != targetMember) {\n', '            if(i == length) {\n', '                revert();\n', '            }\n', '            i++;\n', '        }\n', '\n', '        // Move the lest member to this place\n', '        allMembers[i] = allMembers[length-1];\n', '\n', '        //After reduce array size\n', '        delete allMembers[allMembers.length-1];\n', '\n', '        uint newLength = allMembers.length.sub(1);\n', '        allMembers.length = newLength;\n', '\n', '        //Remove him from state mapping\n', '        isMemberInCongress[targetMember] = false;\n', '\n', '        //Remove his state to empty member\n', '        address2Member[targetMember] = Member(\n', '            {\n', '                memberAddress: address(0),\n', '                memberSince: block.timestamp,\n', '                votingPower: 0,\n', '                name: "0x0"\n', '            }\n', '        );\n', '        //Reduce 1 member from quorum\n', '        minimumQuorum = minimumQuorum.sub(1);\n', '    }\n', '\n', '    /// @notice Function getter for voting power for specific member\n', '    /// @param _memberAddress is the address of the member\n', '    /// @return integer representing voting power\n', '    function getMemberVotingPower(\n', '        address _memberAddress\n', '    )\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        Member memory _member = address2Member[_memberAddress];\n', '        return _member.votingPower;\n', '    }\n', '\n', '    /**\n', '     * @notice Function which will be exposed and congress will use it as "modifier"\n', "     * @param _address is the address we're willing to check if it belongs to congress\n", '     * @return true/false depending if it is either a member or not\n', '     */\n', '    function isMember(\n', '        address _address\n', '    )\n', '    public\n', '    view\n', '    returns (bool)\n', '    {\n', '        return isMemberInCongress[_address];\n', '    }\n', '\n', '    /// @notice Getter for length for how many members are currently\n', '    /// @return length of members\n', '    function getMembersLength()\n', '    public\n', '    view\n', '    returns (uint)\n', '    {\n', '        return allMembers.length;\n', '    }\n', '\n', '    /// @notice Function to get addresses of all members in congress\n', '    /// @return array of addresses\n', '    function getAllMemberAddresses()\n', '    public\n', '    view\n', '    returns (address[])\n', '    {\n', '        return allMembers;\n', '    }\n', '\n', '    /// Basic getter function\n', '    function getMemberInfo()\n', '    public\n', '    view\n', '    returns (address, bytes32, uint, uint)\n', '    {\n', '        Member memory member = address2Member[msg.sender];\n', '        return (member.memberAddress, member.name, member.votingPower, member.memberSince);\n', '    }\n', '}']