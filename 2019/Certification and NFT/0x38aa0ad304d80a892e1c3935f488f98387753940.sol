['pragma solidity 0.5.3;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Secondary\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it)\n', ' */\n', 'contract OwnableSecondary is Ownable {\n', '  address private _primary;\n', '\n', '  event PrimaryTransferred(\n', '    address recipient\n', '  );\n', '\n', '  /**\n', '   * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '   */\n', '  constructor() internal {\n', '    _primary = msg.sender;\n', '    emit PrimaryTransferred(_primary);\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if called from any account other than the primary or the owner.\n', '   */\n', '   modifier onlyPrimaryOrOwner() {\n', '     require(msg.sender == _primary || msg.sender == owner(), "not the primary user nor the owner");\n', '     _;\n', '   }\n', '\n', '   /**\n', '    * @dev Reverts if called from any account other than the primary.\n', '    */\n', '  modifier onlyPrimary() {\n', '    require(msg.sender == _primary, "not the primary user");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the primary.\n', '   */\n', '  function primary() public view returns (address) {\n', '    return _primary;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers contract to a new primary.\n', '   * @param recipient The address of new primary.\n', '   */\n', '  function transferPrimary(address recipient) public onlyOwner {\n', '    require(recipient != address(0), "new primary address is null");\n', '    _primary = recipient;\n', '    emit PrimaryTransferred(_primary);\n', '  }\n', '}\n', '\n', '\n', 'contract StatementRegisteryInterface is OwnableSecondary {\n', '  /********************/\n', '  /** PUBLIC - WRITE **/\n', '  /********************/\n', '  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external returns(bytes32);\n', '\n', '  /*******************/\n', '  /** PUBLIC - READ **/\n', '  /*******************/\n', '  function statementIdsByBuildingPermit(string calldata id) external view returns(bytes32[] memory);\n', '\n', '  function statementExists(bytes32 statementId) public view returns(bool);\n', '\n', '  function getStatementString(bytes32 statementId, string memory key) public view returns(string memory);\n', '\n', '  function getStatementPcId(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementRecipient(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementArchitect(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementCityHall(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementDestination(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementSiteArea(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory);\n', '\n', '  function getStatementNearImage(bytes32 statementId) external view returns(string memory);\n', '\n', '  function getStatementFarImage(bytes32 statementId) external view returns(string memory);\n', '\n', '  function getAllStatements() external view returns(bytes32[] memory);\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract OwnablePausable is Ownable {\n', '\n', '  event Paused();\n', '  event Unpaused();\n', '  bool private _paused;\n', '\n', '  constructor() internal {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns (bool) {\n', '      return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '      require(!_paused);\n', '      _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '      require(_paused);\n', '      _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '      _paused = true;\n', '      emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '      _paused = false;\n', '      emit Unpaused();\n', '  }\n', '}\n', '\n', '\n', 'contract Controller is OwnablePausable {\n', '  StatementRegisteryInterface public registery;\n', '  uint public price = 0;\n', '  address payable private _wallet;\n', '  address private _serverSide;\n', '\n', '  event LogEvent(string content);\n', '  event NewStatementEvent(string indexed buildingPermitId, bytes32 statementId);\n', '\n', '  /********************/\n', '  /** PUBLIC - WRITE **/\n', '  /********************/\n', '  constructor(address registeryAddress, address payable walletAddr, address serverSideAddr) public {\n', '    require(registeryAddress != address(0), "null registery address");\n', '    require(walletAddr != address(0), "null wallet address");\n', '    require(serverSideAddr != address(0), "null server side address");\n', '\n', '    registery = StatementRegisteryInterface(registeryAddress);\n', '    _wallet = walletAddr;\n', '    _serverSide = serverSideAddr;\n', '  }\n', '\n', '  /* The price of the service offered by this smart contract is to be updated freely\n', '  by IMMIRIS. It is also updated on a daily basis by the server to reflect the current\n', '  EUR/ETH exchange rate */\n', '  function setPrice(uint priceInWei) external whenNotPaused {\n', '    require(msg.sender == owner() || msg.sender == _serverSide);\n', '\n', '    price = priceInWei;\n', '  }\n', '\n', '  function setWallet(address payable addr) external onlyOwner whenNotPaused {\n', '    require(addr != address(0), "null wallet address");\n', '\n', '    _wallet = addr;\n', '  }\n', '\n', '  function setServerSide(address payable addr) external onlyOwner whenNotPaused {\n', '    require(addr != address(0), "null server side address");\n', '\n', '    _serverSide = addr;\n', '  }\n', '\n', '  /* record a statement for a given price or for free if the request comes from the server.\n', '  builidngPermitId: the id of the building permit associated with this statement. More than one statement can be recorded for a given permit id\n', '  statementDataLayout: an array containing the length of each string packed in the bytes array, such as [string1Length, string2Length,...]\n', '  statementData: all the strings packed as bytes by the D-App in javascript */\n', '  function recordStatement(string calldata buildingPermitId, uint[] calldata statementDataLayout, bytes calldata statementData) external payable whenNotPaused returns(bytes32) {\n', '      if(msg.sender != owner() && msg.sender != _serverSide) {\n', '        require(msg.value >= price, "received insufficient value");\n', '\n', '        uint refund = msg.value - price;\n', '\n', '        _wallet.transfer(price); // ETH TRANSFER\n', '\n', '        if(refund > 0) {\n', '          msg.sender.transfer(refund); // ETH TRANSFER\n', '        }\n', '      }\n', '\n', '      bytes32 statementId = registery.recordStatement(\n', '        buildingPermitId,\n', '        statementDataLayout,\n', '        statementData\n', '      );\n', '\n', '      emit NewStatementEvent(buildingPermitId, statementId);\n', '\n', '      return statementId;\n', '  }\n', '\n', '  /*******************/\n', '  /** PUBLIC - READ **/\n', '  /*******************/\n', '  function wallet() external view returns (address) {\n', '    return _wallet;\n', '  }\n', '\n', '  function serverSide() external view returns (address) {\n', '    return _serverSide;\n', '  }\n', '\n', '  function statementExists(bytes32 statementId) external view returns (bool) {\n', '    return registery.statementExists(statementId);\n', '  }\n', '\n', '  function getStatementIdsByBuildingPermit(string calldata buildingPermitId) external view returns(bytes32[] memory) {\n', '    return registery.statementIdsByBuildingPermit(buildingPermitId);\n', '  }\n', '\n', '  function getAllStatements() external view returns(bytes32[] memory) {\n', '    return registery.getAllStatements();\n', '  }\n', '\n', '  function getStatementPcId(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementPcId(statementId);\n', '  }\n', '\n', '  function getStatementAcquisitionDate(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementAcquisitionDate(statementId);\n', '  }\n', '\n', '  function getStatementRecipient(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementRecipient(statementId);\n', '  }\n', '\n', '  function getStatementArchitect(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementArchitect(statementId);\n', '  }\n', '\n', '  function getStatementCityHall(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementCityHall(statementId);\n', '  }\n', '\n', '  function getStatementMaximumHeight(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementMaximumHeight(statementId);\n', '  }\n', '\n', '  function getStatementDestination(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementDestination(statementId);\n', '  }\n', '\n', '  function getStatementSiteArea(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementSiteArea(statementId);\n', '  }\n', '\n', '  function getStatementBuildingArea(bytes32 statementId) external view returns (string memory) {\n', '    return registery.getStatementBuildingArea(statementId);\n', '  }\n', '\n', '  function getStatementNearImage(bytes32 statementId) external view returns(string memory) {\n', '    return registery.getStatementNearImage(statementId);\n', '  }\n', '\n', '  function getStatementFarImage(bytes32 statementId) external view returns(string memory) {\n', '    return registery.getStatementFarImage(statementId);\n', '  }\n', '}']