['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    internal\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev internal method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkOnERC721Received(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n', '   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n', '   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n', "   * and doesn't clear approvals.\n", '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkOnERC721Received(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '\n', '  /**\n', '   * @dev Private function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) private {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * This function is internal due to language limitations, see the note in ERC721.sol.\n', '   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * This function is internal due to language limitations, see the note in ERC721.sol.\n', '   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n', "   * and doesn't clear approvals.\n", '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) external view returns (string);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string private _name;\n', '\n', '  // Token symbol\n', '  string private _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) external view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/Referrers.sol\n', '\n', 'contract Referrers is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Referrer bonus in %\n', '    uint public referrerBonusSale;\n', '    uint public referrerBonusWin;\n', '    uint public _referrerId;\n', '    // mapping referrerId to address\n', '    mapping(uint => address) public referrerToAddress;\n', '    // Tickets referals: tokeId => referrerId\n', '    mapping(uint => uint) public ticketToReferrer;\n', '    // Tickets of referrer\n', '    mapping(uint => uint[]) public referrerTickets;\n', '    // mapping address to referrerId\n', '    mapping(address => uint) public addressToReferrer;\n', '    mapping(uint => uint) public totalEarnReferrer;\n', '\n', '    constructor() public {\n', '        referrerBonusSale = 8;\n', '        referrerBonusWin = 2;\n', '        _referrerId = 0;\n', '    }\n', '\n', '    function _setTicketReferrer(uint _tokenId, uint _referrer) internal {\n', '        require(ticketToReferrer[_tokenId] == 0);\n', '        ticketToReferrer[_tokenId] = _referrer;\n', '        referrerTickets[_referrer].push(_tokenId);\n', '    }\n', '\n', '    function registerReferrer() public {\n', '        require(addressToReferrer[msg.sender] == 0);\n', '        _referrerId = _referrerId.add(1);\n', '        addressToReferrer[msg.sender] = _referrerId;\n', '        referrerToAddress[_referrerId] = msg.sender;\n', '    }\n', '\n', '    function getReferrerTickets(uint _referrer) public view returns (uint[]) {\n', '        return referrerTickets[_referrer];\n', '    }\n', '\n', '    // Admin methods\n', '    function setReferrerBonusWin(uint _amount) public onlyOwner {\n', '        referrerBonusWin = _amount;\n', '    }\n', '\n', '    function setReferrerBonusSale(uint _amount) public onlyOwner {\n', '        referrerBonusSale = _amount;\n', '    }\n', '    //End admin methods\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', 'library Utils {\n', '    function pack(uint[] _data) internal pure returns(uint) {\n', '        uint result = 0;\n', '        for (uint i=0;i<_data.length;i++) {\n', '            result += 2**_data[i];\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function unpack(uint _data, uint _maxBallsCount) internal pure returns(uint[]) {\n', '        uint[] memory result = new uint256[](_maxBallsCount);\n', '        uint iPosition = 0;\n', '        uint i = 0;\n', '        while (_data != 0) {\n', '            if ((_data & 1) == 1) {\n', '                result[iPosition] = i;\n', '                iPosition++;\n', '            }\n', '            i++;\n', '            _data >>= 1;\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function popcount(uint x) public pure returns(uint) {\n', '        uint count;\n', '        for (count=0; x > 0; count++) {\n', '            x &= x - 1;\n', '        }\n', '        return count;\n', '    }\n', '\n', '    function getBonusAmount(uint _amount, uint _bonusPercent) internal pure returns (uint) {\n', '        return _amount * _bonusPercent / 100;\n', '    }\n', '\n', '    function addr2str(address _addr) internal pure returns(string) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(value[i + 12] >> 4)];\n', '            str[3+i*2] = alphabet[uint(value[i + 12] & 0x0f)];\n', '        }\n', '        return string(str);\n', '    }\n', '}\n', '\n', '// File: contracts/Balance.sol\n', '\n', 'library Balance {\n', '    using SafeMath for uint256;\n', '\n', '    struct BalanceStorage {\n', '        // users/referrals balances\n', '        mapping(address => uint) balances;\n', '        mapping(address => uint) totalEarn;\n', '    }\n', '\n', '    // Add amount wei to address balance\n', '    function _addBalance(BalanceStorage storage self, address _address, uint _amount) internal {\n', '        self.balances[_address] = self.balances[_address].add(_amount);\n', '        self.totalEarn[_address] = self.totalEarn[_address].add(_amount);\n', '    }\n', '\n', '    function _subBalance(BalanceStorage storage self, address _address, uint _amount) internal {\n', '        self.balances[_address] = self.balances[_address].sub(_amount);\n', '        self.totalEarn[_address] = self.totalEarn[_address].sub(_amount);\n', '    }\n', '\n', '    function _clearBalance(BalanceStorage storage self, address _address) internal {\n', '        self.balances[_address] = 0;\n', '    }\n', '\n', '    function _getBalance(BalanceStorage storage self, address _address) internal view returns (uint){\n', '        return self.balances[_address];\n', '    }\n', '\n', '    function _getTotalEarn(BalanceStorage storage self, address _address) internal view returns (uint){\n', '        return self.totalEarn[_address];\n', '    }\n', '}\n', '\n', '// File: contracts/CryptoBall645.sol\n', '\n', '//Write your own contracts here. Currently compiles using solc v0.4.15+commit.bbb8e64f.\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DrawContractI {\n', '    function ticketToDraw(uint _tokenId) public returns (uint);\n', '    function drawNumber() public returns (uint);\n', '    function drawTime(uint _drawNumber) public returns (uint);\n', '    function ticketPrizes(uint _tokenId) public returns (uint);\n', '    function registerTicket(uint _tokenId, uint[] _numbers, uint _ticketPrice, uint _ownerBonusSale, uint _referrerBonusSale, uint _drawNumber) external;\n', '    function checkTicket(uint _tokenId) external;\n', '    function addSuperPrize(uint _amount) external;\n', '}\n', '\n', 'contract CryptoBall645 is ERC721Full("Crypto balls 6/45", "B645"), Ownable, Referrers {\n', '    using Balance for Balance.BalanceStorage;\n', '    Balance.BalanceStorage balance;\n', '\n', '    event OwnerBonus(address indexed _to, uint _amount);\n', '    event ReferrerBonus(address indexed _to, uint _amount);\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint constant public MAX_BALLS_COUNT = 6;\n', '    uint constant public MAX_BALL_NUMBER = 45;\n', '\n', '    //Bonus of contract owner\n', '    uint public ownerBonusSale = 25;\n', '    uint public ownerBonusWin = 0;\n', '\n', '    uint public ticketPrice = 0.01 ether;\n', '\n', '    uint public tokenIds = 0;\n', '    mapping(uint => uint) public mintDate;\n', '\n', '    DrawContractI drawContract;\n', '    address public drawContractAddress;\n', '\n', '    modifier onlyDrawContract() {\n', '        require(msg.sender == drawContractAddress);\n', '        _;\n', '    }\n', '\n', '    modifier allowBuyTicket() {\n', '        require(msg.value == ticketPrice);\n', '        _;\n', '    }\n', '\n', '    modifier allowBuyTicketCount(uint _drawCount) {\n', '        require(msg.value == ticketPrice*_drawCount);\n', '        _;\n', '    }\n', '\n', '    modifier allowRegisterTicket(uint[] _numbers) {\n', '        require(_numbers.length == MAX_BALLS_COUNT);\n', '        for (uint i = 0; i < MAX_BALLS_COUNT; i++) {\n', '            require(_numbers[i] > 0);\n', '            require(_numbers[i] <= MAX_BALL_NUMBER);\n', '            for (uint t = 0; t < MAX_BALLS_COUNT; t++) {\n', '                if (t == i) {\n', '                    continue;\n', '                }\n', '                require(_numbers[t]!=_numbers[i]);\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev Guarantees msg.sender is owner of the given token\n', '      * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '      */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // Update ticket price\n', '    function setTicketPrice(uint _amount) external onlyOwner {\n', '        ticketPrice = _amount;\n', '    }\n', '\n', '    // Update sale bonus for owner\n', '    function setOwnerBonusSale(uint _amount) external onlyOwner {\n', '        ownerBonusSale = _amount;\n', '    }\n', '\n', '    // Update win bonus for owner\n', '    function setOwnerBonusWin(uint _amount) external onlyOwner {\n', '        ownerBonusWin = _amount;\n', '    }\n', '\n', '    function setDrawContract(address _address) public onlyOwner {\n', '        drawContractAddress = _address;\n', '        drawContract = DrawContractI(_address);\n', '    }\n', '\n', '    function burn(uint _tokenId) external onlyOwner {\n', '        require((now - mintDate[_tokenId]) / 60 / 60 / 24 > 30);\n', '        require(drawContract.ticketToDraw(_tokenId) == 0);\n', '        uint _refundPrice = ticketPrice * (100 - ownerBonusSale - referrerBonusSale) / 100;\n', '        balance._addBalance(owner(), _refundPrice);\n', '        _burn(ownerOf(_tokenId), _tokenId);\n', '    }\n', '\n', '    // Tokens list of user\n', '    function getMyTickets() public view returns (uint256[]) {\n', '        uint _myTotalTokens = balanceOf(msg.sender);\n', '        uint[] memory _myTokens = new uint[](_myTotalTokens);\n', '        uint k = 0;\n', '        for (uint i = 0; i <= totalSupply(); i++) {\n', '            uint _myTokenId = tokenOfOwnerByIndex(msg.sender, i);\n', '            if (_myTokenId > 0) {\n', '                _myTokens[k] = _myTokenId;\n', '                k++;\n', '                if (k >= _myTotalTokens) {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '        return _myTokens;\n', '    }\n', '\n', '    // Buy ticket\n', '    function _buyToken(address _to, uint _referrerId) private returns (uint) {\n', '        tokenIds = tokenIds.add(1);\n', '        uint _tokenId = tokenIds;\n', '        _mint(_to, _tokenId);\n', '        transferFrom(ownerOf(_tokenId), msg.sender, _tokenId);\n', '        mintDate[_tokenId] = now;\n', '        // Send bonus to the owner\n', '        _addOwnerBonus(ticketPrice, ownerBonusSale);\n', '        // Send bonus to the referrer if referrerId was sent and referrer was registered\n', '        if (_referrerId == 0) {\n', '            _referrerId = addressToReferrer[owner()];\n', '        }\n', '        if (_referrerId > 0 && referrerToAddress[_referrerId] > 0) {\n', '            _addReferrerBonus(_referrerId, ticketPrice, referrerBonusSale);\n', '            _setTicketReferrer(_tokenId, _referrerId);\n', '        }\n', '        return _tokenId;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.value >= ticketPrice);\n', '        uint ticketsCount = msg.value / ticketPrice;\n', '        uint returnCount = msg.value % ticketPrice;\n', '\n', '        if (returnCount > 0) {\n', '            msg.sender.transfer(returnCount);\n', '        }\n', '        for (uint i = 1; i <= ticketsCount; i++) {\n', '            _buyToken(msg.sender, 0);\n', '        }\n', '    }\n', '\n', '    // User buy new ticket\n', '    function buyTicket(uint _referrerId) public payable allowBuyTicket {\n', '        _buyToken(msg.sender, _referrerId);\n', '    }\n', '\n', '    // Buy, fill and register ticket\n', '    function buyAndRegisterTicket(uint _referrerId, uint[] _numbers, uint _drawCount) public payable allowBuyTicketCount(_drawCount) allowRegisterTicket(_numbers) returns (uint){\n', '        uint _drawNumber = drawContract.drawNumber();\n', '        for (uint i = 0; i<_drawCount; i++) {\n', '            uint _tokenId = _buyToken(msg.sender, _referrerId);\n', '            uint _draw = _drawNumber + i;\n', '            drawContract.registerTicket(_tokenId, _numbers, ticketPrice, ownerBonusSale, referrerBonusSale, _draw);\n', '        }\n', '    }\n', '\n', '    // Register ticket to the nearest drawing\n', '    function registerTicket(uint _tokenId, uint[] _numbers, uint _drawNumber) public onlyOwnerOf(_tokenId) allowRegisterTicket(_numbers) {\n', '        //Ticket not yet filled\n', '        require(drawContract.ticketToDraw(_tokenId) == 0);\n', '        drawContract.registerTicket(_tokenId, _numbers, ticketPrice, ownerBonusSale, referrerBonusSale, _drawNumber);\n', '    }\n', '\n', '    function _checkTicket(uint _tokenId, address _receiver) private returns (bool) {\n', '        drawContract.checkTicket(_tokenId);\n', '        uint _prize = drawContract.ticketPrizes(_tokenId);\n', '        if (_prize > 0) {\n', '            if (_prize == ticketPrice) {\n', '                _buyToken(_receiver, ticketToReferrer[_tokenId]);\n', '                balance._subBalance(owner(), ticketPrice);\n', '            } else {\n', '                _addPriceToBalance(_tokenId, _prize, _receiver);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // Check ticket and move prize to balance\n', '    function checkTicket(uint _tokenId) public {\n', '        require(_exists(_tokenId));\n', '        require(_checkTicket(_tokenId, ownerOf(_tokenId)));\n', '    }\n', '\n', "    // Contract owner can withdraw prizes after 30 days if winner didn't withdraw it\n", '    function withdrawTicketPrize(uint _tokenId) public onlyOwner {\n', '        require(_exists(_tokenId));\n', '        uint _ticketDraw = drawContract.ticketToDraw(_tokenId);\n', '        require((now - drawContract.drawTime(_ticketDraw)) / 60 / 60 / 24 > 30);\n', '        require(_checkTicket(_tokenId, owner()));\n', '    }\n', '\n', '    function _addPriceToBalance(uint _tokenId, uint _prizeAmount, address _receiver) private {\n', '        uint _ownerBonus = Utils.getBonusAmount(_prizeAmount, ownerBonusWin);\n', '        uint _referrerBonus = Utils.getBonusAmount(_prizeAmount, referrerBonusWin);\n', '        uint _referrerId = ticketToReferrer[_tokenId];\n', '        uint winnerPrizeAmount = _prizeAmount - _ownerBonus - _referrerBonus;\n', '        balance._addBalance(_receiver, winnerPrizeAmount);\n', '        _addReferrerBonus(_referrerId, winnerPrizeAmount, referrerBonusWin);\n', '        _addOwnerBonus(winnerPrizeAmount, ownerBonusWin);\n', '    }\n', '\n', '    // Get My balance\n', '    function getMyBalance() public view returns (uint){\n', '        return balance._getBalance(msg.sender);\n', '    }\n', '\n', '    // Withdraw My balance\n', '    function withdrawMyBalance() public {\n', '        uint _userBalance = balance._getBalance(msg.sender);\n', '        require(_userBalance > 0);\n', '        require(address(this).balance >= _userBalance);\n', '        balance._clearBalance(msg.sender);\n', '        msg.sender.transfer(_userBalance);\n', '        emit Transfer(this, msg.sender, _userBalance);\n', '    }\n', '\n', '    function withdrawBalanceAmount(uint _amount) public {\n', '        uint _userBalance = balance._getBalance(msg.sender);\n', '        require(_userBalance > 0);\n', '        require(_amount <= _userBalance);\n', '        require(address(this).balance >= _amount);\n', '        balance._subBalance(msg.sender, _amount);\n', '        msg.sender.transfer(_amount);\n', '        emit Transfer(this, msg.sender, _amount);\n', '    }\n', '\n', '    function _addReferrerBonus(uint _referrer, uint _fromAmount, uint _bonusPercent) internal {\n', '        address _referrerAddress = referrerToAddress[_referrer];\n', '        if (_referrerAddress == address(0)) {\n', '            _referrerAddress = owner();\n', '        }\n', '        uint _amount = Utils.getBonusAmount(_fromAmount, _bonusPercent);\n', '        if (_amount > 0) {\n', '            balance._addBalance(_referrerAddress, _amount);\n', '            totalEarnReferrer[_referrer] = totalEarnReferrer[_referrer].add(_amount);\n', '            emit ReferrerBonus(_referrerAddress, _amount);\n', '        }\n', '    }\n', '\n', '    function _addOwnerBonus(uint _fromAmount, uint _bonusPercent) internal {\n', '        uint _amount = Utils.getBonusAmount(_fromAmount, _bonusPercent);\n', '        if (_amount > 0) {\n', '            balance._addBalance(owner(), _amount);\n', '            emit OwnerBonus(owner(), _amount);\n', '        }\n', '    }\n', '\n', '    function addBalance(address _address, uint _amount) external onlyDrawContract {\n', '        balance._addBalance(_address, _amount);\n', '    }\n', '\n', '    function addSuperPrize() public payable {\n', '        drawContract.addSuperPrize(msg.value);\n', '    }\n', '}']