['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/// @title Admin contract for KittyBounties. Holds owner-only functions to adjust contract-wide fees, change owners, etc.\n', '/// @dev The owner is not capable of changing the address of the CryptoKitties Core contract once the contract has been deployed.\n', '///  This prevents an attack vector where the owner could change the kittyCore contract once users had already deposited funds.\n', 'contract KittyBountiesAdmin is Ownable, Pausable {\n', '\n', '    /* ****** */\n', '    /* EVENTS */\n', '    /* ****** */\n', '\n', '    /// @dev This event is fired whenever the owner changes the successfulBountyFeeInBasisPoints.\n', '    /// @param newSuccessfulBountyFeeInBasisPoints  The SuccessfulFee is expressed in basis points (hundredths of a percantage), \n', '    ///  and is charged when a bounty is successfully completed.\n', '    event SuccessfulBountyFeeInBasisPointsUpdated(uint256 newSuccessfulBountyFeeInBasisPoints);\n', '\n', '    /// @dev This event is fired whenever the owner changes the unsuccessfulBountyFeeInWei. \n', '    /// @param newUnsuccessfulBountyFeeInWei  The UnsuccessfulBountyFee is paid by the original bounty creator if the bounty expires \n', '    ///  without being completed. When a bounty is created, the bounty creator specifies how long the bounty is valid for. If the \n', '    ///  bounty is not fulfilled by this expiration date, the original creator can then freely withdraw their funds, minus the \n', '    ///  UnsuccessfulBountyFee, although the bounty is still fulfillable until the bounty creator withdraws their funds.\n', '    event UnsuccessfulBountyFeeInWeiUpdated(uint256 newUnsuccessfulBountyFeeInWei);\n', '\n', '    /// @dev This event is fired whenever the owner changes the maximumLockupDurationInBlocks. \n', '    /// @param newMaximumLockoutDurationInBlocks  To prevent users from accidentally locking up ether for an eternity, the lockout \n', '    ///  period of all bounties is capped using this variable, which is inially set to 4 weeks. This is measured in blocks, which \n', '    ///  are created roughly once every 15 seconds. If the community expresses that they would like a longer maximumLockoutDuration,\n', '    ///  the creator will adjust this variable.\n', '    event MaximumLockoutDurationInBlocksUpdated(uint256 newMaximumLockoutDurationInBlocks);\n', '\n', '    /* ******* */\n', '    /* STORAGE */\n', '    /* ******* */\n', '\n', "    /// @dev The total amount that the contract creator has earned from fees since they last withdrew. Storing the owner's earnings\n", '    ///  saves gas rather than performing an additional transfer() call on every successful bounty.\n', '    uint256 public totalOwnerEarningsInWei = 0;\n', '\n', '    /// @dev If a bounty is successfully fulfilled, this fee applies before the remaining funds are sent to the successful bounty\n', '    ///  hunter. This fee is measured in basis points (hundredths of a percent), and is taken out of the total value that the bounty\n', '    ///  creator locked up in the contract when they created the bounty.\n', '    uint256 public successfulBountyFeeInBasisPoints = 375;\n', '\n', '    /// @dev If a bounty is not fulfilled after the lockup period has completed, a bounty creator can withdraw their funds and\n', '    ///  invalidate the bounty, but they are charged this flat fee to do so. This fee is measured in wei.\n', '    uint256 public unsuccessfulBountyFeeInWei = 0.008 ether;\n', '\n', '    /// @dev To prevent users from accidentally locking up ether for an eternity, the lockout period of all bounties is capped\n', '    ///  using this variable, which is inially set to 4 weeks. This is measured in blocks, which are created roughly once every 15 seconds. \n', '    ///  If the community expresses that they would like a longer maximumLockoutDuration, the creator will adjust this variable.\n', '    /// @notice This is initalized to 4 weeks in blocks (161280 = 4 (weeks) * 7 (days) * 24 (hours) * 60 (minutes) * 4 (blocks per minute))\n', '    ///  Note that this rests on the assumption that each block takes 15 seconds to propagate. This maximum lockout can be changed by the owner\n', '    ///  if this assumption is invalidated.\n', '    uint256 public maximumLockoutDurationInBlocks = 161280; \n', '\n', '    /* ********* */\n', '    /* CONSTANTS */\n', '    /* ********* */\n', '\n', '    /// @dev The owner is not capable of changing the address of the CryptoKitties Core contract once the contract has been deployed.\n', '    ///  This prevents an attack vector where the owner could change the kittyCore contract once users had already deposited funds.\n', '    ///  Since the CryptoKitties Core contract has the ability to migrate to a new contract, if Dapper Labs Inc. ever chooses to migrate\n', '    ///  contract, this contract will have to be frozen, and users will be allowed to withdraw their funds without paying any fees.\n', '    address public kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n', '    KittyCore kittyCore;\n', '\n', '    /* ********* */\n', '    /* FUNCTIONS */\n', '    /* ********* */\n', '\n', '    /// @dev The owner is not capable of changing the address of the CryptoKitties Core contract once the contract has been deployed.\n', '    ///  This prevents an attack vector where the owner could change the kittyCore contract once users had already deposited funds.\n', '    constructor() internal {\n', '        kittyCore = KittyCore(kittyCoreAddress);\n', '    }\n', '\n', '    /// @notice Sets the successfulBountyFeeInBasisPoints value (in basis points). Any bounties that are successfully fulfilled \n', '    ///  will have this fee deducted from amount sent to the bounty hunter.\n', '    /// @notice Only callable by the owner.\n', '    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.\n', '    /// @param _newSuccessfulBountyFeeInBasisPoints  The successfulBountyFeeInBasisPoints value to set (measured in basis points).\n', '    function setSuccessfulBountyFeeInBasisPoints(uint256 _newSuccessfulBountyFeeInBasisPoints) external onlyOwner {\n', "        require(_newSuccessfulBountyFeeInBasisPoints <= 10000, 'new successful bounty fee must be in basis points (hundredths of a percent), not wei');\n", '        successfulBountyFeeInBasisPoints = _newSuccessfulBountyFeeInBasisPoints;\n', '        emit SuccessfulBountyFeeInBasisPointsUpdated(_newSuccessfulBountyFeeInBasisPoints);\n', '    }\n', '\n', '    /// @notice Sets the unsuccessfulBountyFeeInWei value. If a bounty is still unfulfilled once the minimum number of blocks has passed,\n', '    ///  an owner can withdraw the locked ETH. If they do so, this fee is deducted from the amount that they withdraw.\n', '    /// @notice Only callable by the owner.\n', '    /// @param _newUnsuccessfulBountyFeeInWei  The unsuccessfulBountyFeeInWei value to set (measured in wei).\n', '    function setUnsuccessfulBountyFeeInWei(uint256 _newUnsuccessfulBountyFeeInWei) external onlyOwner {\n', '        unsuccessfulBountyFeeInWei = _newUnsuccessfulBountyFeeInWei;\n', '        emit UnsuccessfulBountyFeeInWeiUpdated(_newUnsuccessfulBountyFeeInWei);\n', '    }\n', '\n', '    /// @notice Sets the maximumLockoutDurationInBlocks value. To prevent users from accidentally locking up ether for an eternity, the \n', '    ///  lockout period of all bounties is capped using this variable, which is inially set to 4 weeks. This is measured in blocks, which \n', '    ///  are created roughly once every 15 seconds. If the assumption of 1 block every 15 seconds is ever invalidated, the owner is able\n', '    ///  to change the maximumLockoutDurationInBlocks using this function.\n', '    /// @notice Only callable by the owner.\n', '    /// @param _newMaximumLockoutDurationInBlocks  The maximumLockoutDurationInBlocks value to set (measured in blocks).\n', '    function setMaximumLockoutDurationInBlocks(uint256 _newMaximumLockoutDurationInBlocks) external onlyOwner {\n', '        maximumLockoutDurationInBlocks = _newMaximumLockoutDurationInBlocks;\n', '        emit MaximumLockoutDurationInBlocksUpdated(_newMaximumLockoutDurationInBlocks);\n', '    }\n', '\n', '    /// @notice Withdraws the fees that have been earned by the contract owner.\n', '    /// @notice Only callable by the owner.\n', '    function withdrawOwnerEarnings() external onlyOwner {\n', '        uint256 balance = totalOwnerEarningsInWei;\n', '        totalOwnerEarningsInWei = 0;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', "    /// @dev By calling 'revert' in the fallback function, we prevent anyone from accidentally sending funds directly to this contract.\n", '    function() external payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '/// @title Interface for interacting with the CryptoKitties Core contract created by Dapper Labs Inc.\n', 'contract KittyCore {\n', '    function getKitty(uint _id) public returns (\n', '        bool isGestating,\n', '        bool isReady,\n', '        uint256 cooldownIndex,\n', '        uint256 nextActionAt,\n', '        uint256 siringWithId,\n', '        uint256 birthTime,\n', '        uint256 matronId,\n', '        uint256 sireId,\n', '        uint256 generation,\n', '        uint256 genes\n', '    );\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    mapping (uint256 => address) public kittyIndexToApproved;\n', '}\n', '\n', '/// @title Main contract for KittyBounties. This contract manages funds from creation to fulfillment for bounties.\n', '/// @notice Once created, a bounty locks up ether. Optionally, the bounty creator may specify a number of blocks \n', '///  to "lock" their bounty, thus preventing them from being able to cancel their bounty or withdraw their ether \n', '///  until that number of blocks have passed. This guarantees a time period for bounty hunters to attempt to \n', '///  breed for a cat with the specified cattributes, generation, and/or cooldown. This option is included since \n', '///  perhaps many breeders will not chase a bounty without this guarantee. After that point, the bounty creator \n', '///  can withdraw their funds if they wish and invalidate the bounty, or they can continue to leave the bounty \n', '///  active.\n', '/// @notice The bounty hunter must first call approve() in the Cryptokitties Core contract before calling \n', '///  fulfillBountyAndClaimFunds(). There is no danger of this contract overreaching its approval, since the \n', "///  CryptoKitties Core contract's approve() function only approves this contract for a single Cryptokitty. \n", '///  Calling approve() allows this contract to transfer the specified kitty in the fulfillOfferAndClaimFunds() \n', '///  function.\n', 'contract KittyBounties is KittyBountiesAdmin {\n', '\n', "    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\n", '    using SafeMath for uint256;\n', '\n', '\t/* ********** */\n', '    /* DATA TYPES */\n', '    /* ********** */\n', '\n', "    /// @dev The main Bounty struct. The struct fits in four 256-bits words due to Solidity's rules for struct \n", '    ///  packing.\n', '\tstruct Bounty {\n', '\t\t// A bounty creator specifies which portion of the CryptoKitties genome is relevant to this bounty.\n', '\t\t// This is a bitwise mask, that zeroes out all other portions of the Cryptokitties genome besides\n', '        // those that the bounty creator is interested in. If a bounty creator does not wish to specify \n', "        // genes (perhaps they want to specify generation, but don't have a preference for genes), they can \n", '        // submit a geneMask of uint256(0) and genes of uint256(0).\n', '\t\tuint256 geneMask;\n', '        // A bounty creator specifies which cattributes they are seeking. If a user possesses a cat that \n', '        // has both the specified cattributes, the specified generation, and the specified cooldown, then \n', '        // they can trade that cat for the bounty. If a bounty creator does not wish to specify genes \n', "        // (perhaps they want to specify generation, but don't have a preference for genes), they can \n", '        // submit a geneMask of uint256(0) and genes of uint256(0).\n', '        uint256 genes;\n', '\t\t// The price (in wei) that a user will receive if they successfully fulfill this bounty.\n', '\t\tuint128 bountyPrice;\n', '\t\t// The total value (in wei) that the bounty creator originally sent to the contract to create this \n', '        // bounty. This includes the potential fees to be paid to the contract creator.\n', '\t\tuint128 totalValueIncludingFees;\n', '\t\t// The fee that is paid if the bounty is not fulfilled and the owner withdraws their funds. This \n', '        // is stored in the Bounty struct to ensure that users are charged the fee that existed at the \n', "        // time of a bounty's creation, in case the contract owner changes the fees between when the bounty \n", '        // is created and when the bounty creator withdraws their funds.\n', '\t\tuint128 unsuccessfulBountyFeeInWei;\n', '\t\t// Optionally, a bounty creator can set a minimum number of blocks that must pass before they can \n', '        // cancel a bounty and withdraw their funds (in order to guarantee a time period for bounty hunters \n', '        // to attempt to breed for the specified cat). After the time period has passed, the owner can \n', '        // withdraw their funds if they wish, but the bounty stays valid until they do so. This allows for \n', '        // the possiblity of leaving a bounty open indefinitely until it is filled if the bounty creator \n', '        // wishes to do so.\n', '\t\tuint64 minBlockBountyValidUntil;\n', '        // A bounty creator can specify the exact generation that they are seeking. If they are willing to \n', '        // accept cats of any generation that have the cattributes specified above, they may submit \n', '        // UINT16_MAX for this variable for it to be ignored.\n', '        uint16 generation;\n', '\t\t// A bounty creator can specify the highest cooldownIndex that they are seeking, allowing users to \n', '        // place bounties on virgin cats or cats with a sufficient cooldown to be useful in a fancy chase. \n', '        // If they are willing to accept cats of any cooldown, they may submit a cooldownIndex of 13 (which \n', '        // is the highest cooldown index that the Cryptokitties Core contract allows) for this variable to \n', '        // be ignored.\n', '        uint16 highestCooldownIndexAccepted;\n', '        // The creator of the bounty. This address receives the specified cat if the bounty is fulfilled, \n', '        // or receives their money back (minus unsuccessfulBountyFee) if the bounty is not fulfilled.\n', '\t\taddress bidder;\n', '    }\n', '\n', '    /* ****** */\n', '    /* EVENTS */\n', '    /* ****** */\n', '\n', '    /// @dev This event is fired whenever a user creates a new bounty for a cat with a particular set of \n', '    ///  cattributes, generation, and/or cooldown that they are seeking.\n', '    /// @param bountyId  A unique identifier for the Bounty Struct for this bounty, found in the \n', '    ///  bountyIdToBounty mapping.\n', '    /// @param bidder  The creator of the bounty. This address receives the specified cat if the bounty \n', '    ///  is fulfilled, or receives their money back (minus unsuccessfulBountyFee) if the bounty is not \n', '    ///  fulfilled.\n', '    /// @param bountyPrice  The price (in wei) that a user will receive if they successfully fulfill \n', '    ///  this bounty.\n', '    /// @param minBlockBountyValidUntil  Every bounty is valid until at least a specified block. Before \n', '    ///  that point, the owner cannot withdraw their funds (in order to guarantee a time period for bounty \n', '    ///  hunters to attempt to breed for the specified cat). After the time period has passed, the owner \n', '    ///  can withdraw their funds if they wish, but the bounty stays valid until they do so. This allows \n', '    ///  for the possiblity of leaving a bounty open indefinitely until it is filled if the bounty creator \n', '    ///  wishes to do so.\n', '    /// @param geneMask  A bounty creator specifies which portion of the CryptoKitties genome is relevant \n', '    ///  to this bounty. This is a bitwise mask, that zeroes out all other portions of the Cryptokitties \n', '    ///  genome besides those that the bounty creator is interested in. \n', '    /// @param genes  A bounty creator specifies which cattributes they are seeking. If a user possesses \n', '    ///  a cat that has both the specified cattributes and the specified generation, then they can trade \n', '    ///  that cat for the bounty.\n', '    /// @param generation  A bounty creator can specify the exact generation that they are seeking. If \n', '    ///  they are willing to accept cats of any generation that have the cattributes specified above, \n', '    ///  they may submit UINT16_MAX for this variable for it to be ignored.\n', '    /// @param highestCooldownIndexAccepted  A bounty creator can specify the highest cooldownIndex that \n', '    ///  they are seeking, allowing users to place bounties on virgin cats or cats with a sufficient \n', '    ///  cooldown to be useful in a fancy chase. If they are willing to accept cats of any cooldown, they \n', '    ///  may submit a cooldownIndex of 13 (which is the highest cooldown index that the Cryptokitties \n', '    ///  Core contract allows) for this variable to be ignored.\n', '    /// @param unsuccessfulBountyFeeInWei  The fee that is paid if the bounty is not fulfilled and the \n', '    ///  owner withdraws their funds. This is stored in the Bounty struct to ensure that users are charged \n', "    ///  the fee that existed at the time of a bounty's creation, in case the contract owner changes the \n", '    ///  fees between when the bounty is created and when the bounty creator withdraws their funds.\n', '    event CreateBountyAndLockFunds(\n', '    \tuint256 bountyId,\n', '        address bidder,\n', '\t\tuint256 bountyPrice,\n', '\t\tuint256 minBlockBountyValidUntil,\n', '        uint256 geneMask,\n', '        uint256 genes,\n', '        uint256 generation,\n', '        uint256 highestCooldownIndexAccepted,\n', '        uint256 unsuccessfulBountyFeeInWei\n', '    );\n', '\n', '    /// @dev This event is fired if a bounty hunter trades in a cat with the specified \n', '    ///  cattributes/generation/cooldown and claims the funds locked within the bounty.\n', '    /// @notice The bounty hunter must first call approve() in the Cryptokitties Core contract before \n', '    ///  calling fulfillBountyAndClaimFunds(). There is no danger of this contract overreaching its \n', "    ///  approval, since the CryptoKitties Core contract's approve() function only approves this \n", '    ///  contract for a single Cryptokitty. Calling approve() allows this contract to transfer the \n', '    ///  specified kitty in the fulfillOfferAndClaimFunds() function.\n', '    /// @param bountyId  A unique identifier for the Bounty Struct for this bounty, found in the \n', '    ///  bountyIdToBounty mapping.\n', '    /// @param kittyId  The id of the CryptoKitty that fulfills the bounty requirements. \n', '    /// @param bidder  The creator of the bounty. This address receives the specified cat if the \n', '    ///  bounty is fulfilled, or receives their money back (minus unsuccessfulBountyFee) if the \n', '    ///  bounty is not fulfilled.\n', '    /// @param bountyPrice  The price (in wei) that a user will receive if they successfully \n', '    ///  fulfill this bounty.\n', '    /// @param geneMask  A bounty creator specifies which portion of the CryptoKitties genome is \n', '    ///  relevant to this bounty. This is a bitwise mask, that zeroes out all other portions of the \n', '    ///  Cryptokitties genome besides those that the bounty creator is interested in. \n', '    /// @param genes  A bounty creator specifies which cattributes they are seeking. If a user \n', '    ///  possesses a cat that has both the specified cattributes and the specified generation, then \n', '    ///  they can trade that cat for the bounty.\n', '    /// @param generation  A bounty creator can specify the exact generation that they are seeking. \n', '    ///  If they are willing to accept cats of any generation that have the cattributes specified \n', '    ///  above, they may submit UINT16_MAX for this variable for it to be ignored.\n', '    /// @param highestCooldownIndexAccepted  A bounty creator can specify the highest cooldownIndex \n', '    ///  that they are seeking, allowing users to place bounties on virgin cats or cats with a \n', '    ///  sufficient cooldown to be useful in a fancy chase. If they are willing to accept cats of \n', '    ///  any cooldown, they may submit a cooldownIndex of 13 (which is the highest cooldown index \n', '    ///  that the Cryptokitties Core contract allows) for this variable to be ignored.\n', '    /// @param successfulBountyFeeInWei  The fee that is paid when the bounty is fulfilled. This \n', '    ///  fee is calculated from totalValueIncludingFees and bountyPrice, which are both stored in \n', '    ///  the Bounty struct to ensure that users are charged the fee that existed at the time of a \n', "    ///  bounty's creation, in case the owner changes the fees between when the bounty is created \n", '    ///  and when the bounty is fulfilled.\n', '    event FulfillBountyAndClaimFunds(\n', '        uint256 bountyId,\n', '        uint256 kittyId,\n', '        address bidder,\n', '\t\tuint256 bountyPrice,\n', '        uint256 geneMask,\n', '        uint256 genes,\n', '        uint256 generation,\n', '        uint256 highestCooldownIndexAccepted,\n', '        uint256 successfulBountyFeeInWei\n', '    );\n', '\n', '    /// @dev This event is fired when a bounty creator wishes to invalidate a bounty. The bounty \n', '    ///  creator withdraws the funds and cancels the bounty, preventing anybody from fulfilling \n', '    ///  that particular bounty.\n', '    /// @notice If a bounty creator specified a lock time, a bounty creator cannot withdraw funds \n', '    ///  or invalidate a bounty until at least the originally specified number of blocks have \n', '    ///  passed. This guarantees a time period for bounty hunters to attempt to breed for a cat \n', '    ///  with the specified cattributes/generation/cooldown. However, if the contract is frozen, \n', '    ///  a bounty creator may withdraw their funds immediately with no fees taken by the contract \n', '    ///  owner, since the bounty creator would only freeze the contract if a vulnerability was found.\n', '    /// @param bountyId  A unique identifier for the Bounty Struct for this bounty, found in the \n', '    ///  bountyIdToBounty mapping.\n', '    /// @param bidder  The creator of the bounty. This address receives the specified cat if the \n', '    ///  bounty is fulfilled, or receives their money back (minus unsuccessfulBountyFee) if the \n', '    ///  bounty is not fulfilled.\n', '    /// @param withdrawnAmount  The amount returned to the bounty creator (in wei). If the contract\n', '    ///  is not frozen, then this is the total value originally sent to the contract minus \n', '    ///  unsuccessfulBountyFeeInWei. However, if the contract is frozen, no fees are taken, and the \n', '    ///  entire amount is returned to the bounty creator.\n', '    event WithdrawBounty(\n', '        uint256 bountyId,\n', '        address bidder,\n', '\t\tuint256 withdrawnAmount\n', '    );\n', '\n', '    /* ******* */\n', '    /* STORAGE */\n', '    /* ******* */\n', '\n', '    /// @dev A mapping that tracks bounties that have been created, regardless of whether they have \n', '    ///  been cancelled or claimed thereafter. See the activeBounties mapping to determine whether \n', '    ///  a particular bounty is still active.\n', '    mapping (uint256 => Bounty) public bountyIdToBounty;\n', '\n', '    /// @dev An index that increments with each Bounty created. Allows the ability to jump directly \n', '    ///  to a specified bounty.\n', '    uint256 public bountyId = 0;\n', '\n', '    /// @dev A flag indicating that the contract still contains funds for this particular bounty. \n', '    ///  This flag is set to false if the bounty is fulfilled, if the funds are withdrawn by the \n', '    ///  original owner, or if this bounty has not yet been created. In all of these cases, the \n', '    ///  contract no longer holds funds for this specific bounty. Solidity initializes variables \n', '    ///  to zero, so there is no concern that the mapping will have been erroneously initialized \n', '    ///  with any values set to true.\n', '    mapping (uint256 => bool) public activeBounties;\n', '\n', '    /* ********* */\n', '    /* FUNCTIONS */\n', '    /* ********* */\n', '\n', '    /// @notice Allows a user to create a new bounty for a cat with a particular set of cattributes, \n', '    ///  generation, and/or cooldown. This optionally involves locking up a specified amount of eth \n', '    ///  for at least a specified number of blocks, in order to guarantee a time period for bounty \n', '    ///  hunters to attempt to breed for a cat with the specified cattributes and generation. \n', '\t/// @param _geneMask  A bounty creator specifies which portion of the CryptoKitties genome is \n', '    ///  relevant to this bounty. This is a bitwise mask, that zeroes out all other portions of the \n', '    ///  Cryptokitties genome besides those that the bounty creator is interested in. If a bounty \n', "    ///  creator does not wish to specify genes (perhaps they want to specify generation, but don't \n", '    ///  have a preference for genes), they can submit a geneMask of uint256(0).\n', '    /// @param _genes  A bounty creator specifies which cattributes they are seeking. If a user \n', '    ///  possesses a cat that has the specified cattributes, the specified generation, and the \n', '    ///  specified cooldown, then they can trade that cat for the bounty.\n', '    /// @param _generation  A bounty creator can specify the exact generation that they are seeking. \n', '    ///  If they are willing to accept cats of any generation that have the cattributes specified \n', '    ///  above, they may submit UINT16_MAX for this variable for it to be ignored.\n', '    /// @param _highestCooldownIndexAccepted  A bounty creator can specify the highest cooldownIndex \n', '    ///  that they are seeking, allowing users to place bounties on virgin cats or cats with a \n', '    ///  sufficient cooldown to be useful in a fancy chase. If they are willing to accept cats of \n', '    ///  any cooldown, they may submit  a cooldownIndex of 13 (which is the highest cooldown index \n', '    ///  that the Cryptokitties Core contract allows) for this variable to be ignored.\n', '    /// @param _minNumBlocksBountyIsValidFor  The bounty creator specifies the minimum number of \n', '    ///  blocks that this bounty is valid for. Every bounty is valid until at least a specified \n', '    ///  block. Before that point, the owner cannot withdraw their funds (in order to guarantee a \n', '    ///  time period for bounty hunters to attempt to breed for the specified cat). After the time \n', '    ///  period has passed, the owner can withdraw their funds if they wish, but the bounty stays \n', '    ///  valid until they do so. This allows for the possiblity of leaving a bounty open indefinitely \n', '    ///  until it is filled if the bounty creator wishes to do so.\n', '    /// @notice This function is payable, and any eth sent to this function is interpreted as the \n', '    ///  value that the user wishes to lock up for this bounty.\n', '    function createBountyAndLockFunds(uint256 _geneMask, uint256 _genes, uint256 _generation, uint256 _highestCooldownIndexAccepted, uint256 _minNumBlocksBountyIsValidFor) external payable whenNotPaused {\n', "    \trequire(msg.value >= unsuccessfulBountyFeeInWei.mul(uint256(2)), 'the value of your bounty must be at least twice as large as the unsuccessful bounty fee');\n", "    \trequire(_minNumBlocksBountyIsValidFor <= maximumLockoutDurationInBlocks, 'you cannot lock eth into a bounty for longer than the maximumLockoutDuration');\n", "    \trequire(_highestCooldownIndexAccepted <= uint256(13), 'you cannot specify an invalid cooldown index');\n", "    \trequire(_generation <= uint256(~uint16(0)), 'you cannot specify an invalid generation');\n", "        require(_genes & ~_geneMask == uint256(0), 'your geneMask must fully cover any genes that you are seeeking');\n", '\n', '    \tuint256 bountyPrice = _computeBountyPrice(msg.value, successfulBountyFeeInBasisPoints);\n', '    \tuint256 minBlockBountyValidUntil = uint256(block.number).add(_minNumBlocksBountyIsValidFor);\n', '\n', '    \tBounty memory bounty = Bounty({\n', '            geneMask: _geneMask,\n', '            genes: _genes,\n', '            bountyPrice: uint128(bountyPrice),\n', '            totalValueIncludingFees: uint128(msg.value),\n', '            unsuccessfulBountyFeeInWei: uint128(unsuccessfulBountyFeeInWei),\n', '            minBlockBountyValidUntil: uint64(minBlockBountyValidUntil),\n', '            generation: uint16(_generation),\n', '            highestCooldownIndexAccepted: uint16(_highestCooldownIndexAccepted),\n', '            bidder: msg.sender\n', '        });\n', '\n', '        bountyIdToBounty[bountyId] = bounty;\n', '        activeBounties[bountyId] = true;\n', '        \n', '        emit CreateBountyAndLockFunds(\n', '            bountyId,\n', '\t        msg.sender,\n', '\t\t\tbountyPrice,\n', '\t\t\tminBlockBountyValidUntil,\n', '\t        bounty.geneMask,\n', '\t        bounty.genes,\n', '\t        _generation,\n', '\t        _highestCooldownIndexAccepted,\n', '\t        unsuccessfulBountyFeeInWei\n', '        );\n', '\n', '        bountyId = bountyId.add(uint256(1));\n', '    }\n', '\n', '    /// @notice After calling approve() in the CryptoKitties Core contract, a bounty hunter can \n', '    ///  submit the id of a kitty that they own and a bounty that they would like to fulfill. If\n', '    ///  the kitty fits the requirements of the bounty, and if the bounty hunter owns the kitty,\n', '    ///  then this function transfers the kitty to the original bounty creator and transfers the \n', '    ///  locked eth to the bounty hunter.\n', '    /// @param _bountyId  A unique identifier for the Bounty Struct for this bounty, found in \n', '    ///  the bountyIdToBounty mapping.\n', '    /// @param _kittyId  The id of the CryptoKitty that fulfills the bounty requirements.\n', '    /// @notice The bounty hunter must first call approve() in the Cryptokitties Core contract \n', '    ///  before calling fulfillBountyAndClaimFunds(). There is no danger of this contract \n', "    ///  overreaching its approval, since the CryptoKitties Core contract's approve() function \n", '    /// only approves this contract for a single Cryptokitty. Calling approve() allows this \n', '    /// contract to transfer the specified kitty in the fulfillOfferAndClaimFunds() function.\n', '    function fulfillBountyAndClaimFunds(uint256 _bountyId, uint256 _kittyId) external whenNotPaused {\n', "    \trequire(activeBounties[_bountyId], 'this bounty has either already completed or has not yet begun');\n", "    \trequire(msg.sender == kittyCore.ownerOf(_kittyId), 'you do not own the cat that you are trying to use to fulfill this bounty');\n", "    \trequire(kittyCore.kittyIndexToApproved(_kittyId) == address(this), 'you must approve the bounties contract for this cat before you can fulfill a bounty');\n", '\n', '    \tBounty storage bounty = bountyIdToBounty[_bountyId];\n', '    \tuint256 cooldownIndex;\n', '    \tuint256 generation;\n', '    \tuint256 genes;\n', '        ( , , cooldownIndex, , , , , , generation, genes) = kittyCore.getKitty(_kittyId);\n', '\n', '        // By submitting ~uint16(0) as the target generation (which is uint16_MAX), a bounty creator can specify that they do not have a preference for generation.\n', "    \trequire((uint16(bounty.generation) == ~uint16(0) || uint16(generation) == uint16(bounty.generation)), 'your cat is not the correct generation to fulfill this bounty');\n", '    \t// By submitting uint256(0) as the target genemask and submitting uint256(0) for the target genes, a bounty creator can specify that they do not have \n', '    \t// a preference for genes.\n', "    \trequire((genes & bounty.geneMask) == (bounty.genes & bounty.geneMask), 'your cat does not have the correct genes to fulfill this bounty');\n", '    \t// By submitting 13 as the target highestCooldownIndexAccepted, a bounty creator can specify that they do not have a preference for cooldown (since\n', '    \t// all Cryptokitties have a cooldown index less than or equal to 13).\n', "    \trequire(uint16(cooldownIndex) <= uint16(bounty.highestCooldownIndexAccepted), 'your cat does not have a low enough cooldown index to fulfill this bounty');\n", '\n', '    \tactiveBounties[_bountyId] = false;\n', '    \tkittyCore.transferFrom(msg.sender, bounty.bidder, _kittyId);\n', '    \tuint256 successfulBountyFeeInWei = uint256(bounty.totalValueIncludingFees).sub(uint256(bounty.bountyPrice));\n', '    \ttotalOwnerEarningsInWei = totalOwnerEarningsInWei.add(successfulBountyFeeInWei);\n', '    \tmsg.sender.transfer(uint256(bounty.bountyPrice));\n', '\n', '    \temit FulfillBountyAndClaimFunds(\n', '            _bountyId,\n', '            _kittyId,\n', '\t        msg.sender,\n', '\t\t\tuint256(bounty.bountyPrice),\n', '\t        bounty.geneMask,\n', '\t        bounty.genes,\n', '\t        uint256(bounty.generation),\n', '\t        uint256(bounty.highestCooldownIndexAccepted),\n', '\t        successfulBountyFeeInWei\n', '        );\n', '    }\n', '\n', '    /// @notice Allows a bounty creator to withdraw the funds locked within a bounty, but only \n', '    ///  once a specified time period (measured in blocks) has passed. Prohibiting the bounty \n', '    ///  creator from withdrawing their funds until this point guarantees a time period for \n', '    ///  bounty hunters to attempt to breed for a cat with the specified cattributes and \n', '    ///  generation. If a bounty creator withdraws their funds, then the bounty is invalidated \n', '    ///  and bounty hunters can no longer try to fulfill it. A flat fee is taken from the bounty \n', "    ///  creator's original deposit, specified by unsuccessfulBountyFeeInWei.\n", '    /// @param _bountyId  A unique identifier for the Bounty Struct for this bounty, found in \n', '    ///  the bountyIdToBounty mapping.\n', '    function withdrawUnsuccessfulBounty(uint256 _bountyId) external whenNotPaused {\n', "    \trequire(activeBounties[_bountyId], 'this bounty has either already completed or has not yet begun');\n", '    \tBounty storage bounty = bountyIdToBounty[_bountyId];\n', "    \trequire(msg.sender == bounty.bidder, 'you cannot withdraw the funds for someone elses bounty');\n", "    \trequire(block.number >= uint256(bounty.minBlockBountyValidUntil), 'this bounty is not withdrawable until the minimum number of blocks that were originally specified have passed');\n", '    \tactiveBounties[_bountyId] = false;\n', '    \ttotalOwnerEarningsInWei = totalOwnerEarningsInWei.add(uint256(bounty.unsuccessfulBountyFeeInWei));\n', '    \tuint256 amountToReturn = uint256(bounty.totalValueIncludingFees).sub(uint256(bounty.unsuccessfulBountyFeeInWei));\n', '    \tmsg.sender.transfer(amountToReturn);\n', '\n', '    \temit WithdrawBounty(\n', '            _bountyId,\n', '            bounty.bidder,\n', '            amountToReturn\n', '        );\n', '    }\n', '\n', '    /// @notice Allows a bounty creator to withdraw the funds locked within a bounty, even if \n', '    ///  the time period that the bounty was guaranteed to be locked for has not passed. This \n', '    ///  function can only be called when the contract is frozen, and would be used as an \n', '    ///  emergency measure to allow users to withdraw their funds immediately. No fees are \n', '    ///  taken when this function is called.\n', '    /// @notice Only callable when the contract is frozen.\n', '    /// @param _bountyId  A unique identifier for the Bounty Struct for this bounty, found \n', '    ///  in the bountyIdToBounty mapping.\n', '    function withdrawBountyWithNoFeesTakenIfContractIsFrozen(uint256 _bountyId) external whenPaused {\n', "    \trequire(activeBounties[_bountyId], 'this bounty has either already completed or has not yet begun');\n", '    \tBounty storage bounty = bountyIdToBounty[_bountyId];\n', "    \trequire(msg.sender == bounty.bidder, 'you cannot withdraw the funds for someone elses bounty');\n", '    \tactiveBounties[_bountyId] = false;\n', '    \tmsg.sender.transfer(uint256(bounty.totalValueIncludingFees));\n', '\n', '    \temit WithdrawBounty(\n', '            _bountyId,\n', '            bounty.bidder,\n', '            uint256(bounty.totalValueIncludingFees)\n', '        );\n', '    }\n', '\n', '    /// @notice Computes the bounty price given a total value sent when creating a bounty, \n', '    ///  and the current successfulBountyFee in percentage basis points. \n', '    /// @dev 10000 is not a magic number, but is the maximum number of basis points that \n', '    ///  can exist (with basis points being hundredths of a percent).\n', '    /// @param _totalValueIncludingFees The amount of ether (in wei) that was sent to \n', '    ///  create a bounty\n', '    /// @param _successfulBountyFeeInBasisPoints The percentage (in basis points) of that \n', '    ///  total amount that will be taken as a fee if the bounty is successfully completed.\n', '    /// @return The amount of ether (in wei) that will be rewarded if the bounty is \n', '    ///  successfully fulfilled\n', '    function _computeBountyPrice(uint256 _totalValueIncludingFees, uint256 _successfulBountyFeeInBasisPoints) internal pure returns (uint256) {\n', '    \treturn (_totalValueIncludingFees.mul(uint256(10000).sub(_successfulBountyFeeInBasisPoints))).div(uint256(10000));\n', '    }\n', '\n', "    /// @dev By calling 'revert' in the fallback function, we prevent anyone from \n", '    ///  accidentally sending funds directly to this contract.\n', '    function() external payable {\n', '        revert();\n', '    }\n', '}']