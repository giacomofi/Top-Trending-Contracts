['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract WhiteListed{\n', '    mapping(address => bool)whitelist;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract IziCoin is ERC20Interface, Owned, WhiteListed {\n', '        \n', '    using SafeMath for uint;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    uint _totalSupply;\n', '    \n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    \n', '    constructor () public {\n', '        symbol = "IZI";\n', '        name = "IziCoin";\n', '        decimals = 8;\n', '        _totalSupply = 24606905043426990;\n', '        balances[owner] = _totalSupply;\n', '        whitelist[owner] = true;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '    \n', '    //ERC20\n', '    function totalSupply() public view returns (uint){\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance){\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\n', '        return allowed[tokenOwner][spender];        \n', '    }\n', '    \n', '    function transfer(address to, uint tokens) public returns (bool success){\n', '        require(balances[msg.sender] >= tokens &&\n', '        tokens > 0 && \n', '        to != address(0x0) &&\n', '        whitelist[msg.sender] &&\n', '        whitelist[to]);\n', '        executeTransfer(msg.sender,to, tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '        require(balances[msg.sender] >= tokens &&\n', '        whitelist[msg.sender] &&\n', '        whitelist[spender]);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '        require(balances[from] >= tokens &&\n', '        allowed[from][msg.sender] >= tokens &&\n', '        tokens > 0 && \n', '        to != address(0x0) &&\n', '        whitelist[msg.sender] &&\n', '        whitelist[to]);\n', '        executeTransfer(from, to, tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '    \n', '    //IziCoin\n', '    function executeTransfer(address from,address to, uint tokens) private{\n', '        uint previousBalances = balances[from] + balances[to];\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        assert((balances[from] + balances[to] == previousBalances) && (whitelist[from] && whitelist[to]));\n', '    }\n', '    \n', '    function executeTransferWithTax(address from,address to, uint tokens, uint taxFee) private{\n', '        uint previousBalances = balances[from] + balances[to];\n', '        uint taxedTokens = tokens.sub(taxFee);\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(taxedTokens);\n', '        if(from != owner){\n', '           balances[owner] = balances[owner].add(taxFee); \n', '        }\n', '        emit Transfer(from, to, taxedTokens);\n', '        emit Transfer(from, owner, taxFee);\n', '        assert((balances[from] + balances[to] == previousBalances.sub(taxFee)) && (whitelist[from] && whitelist[to]));\n', '    }\n', '    \n', '    function mintIziCoins(uint tokenIncrease) public onlyOwner{\n', '        require(tokenIncrease > 0);\n', '        uint oldTotalSupply = _totalSupply;\n', '        _totalSupply = _totalSupply.add(tokenIncrease);\n', '        balances[owner] = balances[owner].add(tokenIncrease);\n', '        assert(_totalSupply > oldTotalSupply);\n', '    }\n', '    \n', '    function sendBatchTransaction(address[] memory from, address[] memory to, uint[] memory tokens, uint[] memory taxFee)public onlyOwner{\n', '        for(uint i = 0; i < getCount(from); i++){\n', '            executeTransferWithTax(from[i],to[i],tokens[i],taxFee[i]);\n', '        }\n', '    }\n', '    \n', '    //Whitelist\n', '    function seeWhitelist(address whitelistUser) public view returns (bool){\n', '        return whitelist[whitelistUser] == true;\n', '    }\n', '    \n', '    function addBulkWhitelist(address[] memory whitelistUsers) public onlyOwner{\n', '        for(uint i = 0; i < getCount(whitelistUsers); i++){\n', '            whitelist[whitelistUsers[i]] = true;\n', '        }\n', '        return;\n', '    }\n', '    \n', '    function removeBulkWhitelist(address[] memory whitelistUsers) public onlyOwner{\n', '        for(uint i = 0; i < getCount(whitelistUsers); i++){\n', '            whitelist[whitelistUsers[i]] = false;\n', '        }\n', '        return;\n', '    }\n', '    \n', '    function getCount(address[] memory whitelistUsers) private pure returns(uint count) {\n', '        return whitelistUsers.length;\n', '    }\n', '    \n', '    //Fallback\n', '    function () external payable {\n', '        revert();\n', '    }\n', '    \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '}']