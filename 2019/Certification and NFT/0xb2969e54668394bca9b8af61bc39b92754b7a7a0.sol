['pragma solidity 0.4.26;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', 'interface IOrbsRewardsDistribution {\n', '    event RewardDistributed(string distributionEvent, address indexed recipient, uint256 amount);\n', '\n', '    event RewardsDistributionAnnounced(string distributionEvent, bytes32[] batchHash, uint256 batchCount);\n', '    event RewardsBatchExecuted(string distributionEvent, bytes32 batchHash, uint256 batchIndex);\n', '    event RewardsDistributionAborted(string distributionEvent, bytes32[] abortedBatchHashes, uint256[] abortedBatchIndices);\n', '    event RewardsDistributionCompleted(string distributionEvent);\n', '\n', '    event RewardsDistributorReassigned(address indexed previousRewardsDistributor, address indexed newRewardsDistributor);\n', '\n', '    function announceDistributionEvent(string distributionEvent, bytes32[] batchHashes) external;\n', '    function abortDistributionEvent(string distributionEvent) external;\n', '\n', '    function executeCommittedBatch(string distributionEvent, address[] recipients, uint256[] amounts, uint256 batchIndex) external;\n', '\n', '    function distributeRewards(string distributionEvent, address[] recipients, uint256[] amounts) external;\n', '\n', '    function getPendingBatches(string distributionEvent) external view returns (bytes32[] pendingBatchHashes, uint256[] pendingBatchIndices);\n', '    function reassignRewardsDistributor(address _newRewardsDistributor) external;\n', '    function isRewardsDistributor() external returns (bool);\n', '}\n', '\n', '/// @title Orbs rewards distribution smart contract.\n', 'contract OrbsRewardsDistribution is Ownable, IOrbsRewardsDistribution {\n', '\n', '    struct Distribution {\n', '        uint256 pendingBatchCount;\n', '        bool hasPendingBatches;\n', '        bytes32[] batchHashes;\n', '    }\n', '\n', '    /// The Orbs token smart contract address.\n', '    IERC20 public orbs;\n', '\n', '    /// Mapping of all ongoing distribution events.\n', '    /// Distribution events are identified by a unique string\n', '    /// for the duration of their execution.\n', '    /// After completion or abortion the same name may be used again.\n', '    mapping(string => Distribution) distributions;\n', '\n', '    /// Address of an optional rewards-distributor account/contract.\n', '    /// Meant to be used in the future, should an alternate implementation of\n', '    /// batch commitment mechanism will be needed. Alternately, manual\n', '    /// transfers without batch commitment may be executed by rewardsDistributor.\n', '    /// Only the address of rewardsDistributor may call distributeRewards()\n', '    address public rewardsDistributor;\n', '\n', '    /// Constructor to set Orbs token contract address.\n', '    /// @param _orbs IERC20 The address of the Orbs token contract.\n', '    constructor(IERC20 _orbs) public {\n', '        require(address(_orbs) != address(0), "Address must not be 0!");\n', '\n', '        rewardsDistributor = address(0);\n', '        orbs = _orbs;\n', '    }\n', '\n', '    /// Announce a new distribution event, and commits to a list of transfer batch\n', '    /// hashes. Only the contract owner may call this method. The method verifies\n', '    /// a distributionEvent with the same name is not currently ongoing.\n', '    /// It then records commitments for all reward payments in the form of batch\n', '    /// hashes array to state.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    /// @param _batchHashes bytes32[] The address of the OrbsValidators contract.\n', '    function announceDistributionEvent(string _distributionEvent, bytes32[] _batchHashes) external onlyOwner {\n', '        require(!distributions[_distributionEvent].hasPendingBatches, "distribution event is currently ongoing");\n', '        require(_batchHashes.length > 0, "at least one batch must be announced");\n', '\n', '        for (uint256 i = 0; i < _batchHashes.length; i++) {\n', '            require(_batchHashes[i] != bytes32(0), "batch hash may not be 0x0");\n', '        }\n', '\n', '        // store distribution event record\n', '        Distribution storage distribution = distributions[_distributionEvent];\n', '        distribution.pendingBatchCount = _batchHashes.length;\n', '        distribution.hasPendingBatches = true;\n', '        distribution.batchHashes = _batchHashes;\n', '\n', '        emit RewardsDistributionAnnounced(_distributionEvent, _batchHashes, _batchHashes.length);\n', '    }\n', '\n', '    /// Aborts an ongoing distributionEvent and revokes all batch commitments.\n', '    /// Only the contract owner may call this method.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    function abortDistributionEvent(string _distributionEvent) external onlyOwner {\n', '        require(distributions[_distributionEvent].hasPendingBatches, "distribution event is not currently ongoing");\n', '\n', '        (bytes32[] memory abortedBatchHashes, uint256[] memory abortedBatchIndices) = this.getPendingBatches(_distributionEvent);\n', '\n', '        delete distributions[_distributionEvent];\n', '\n', '        emit RewardsDistributionAborted(_distributionEvent, abortedBatchHashes, abortedBatchIndices);\n', '    }\n', '\n', '    /// Carry out and log transfers in batch. receives two arrays of same length\n', '    /// representing rewards payments for a list of reward recipients.\n', '    /// distributionEvent is only provided for logging purposes.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    /// @param _recipients address[] a list of recipients addresses\n', '    /// @param _amounts uint256[] a list of amounts to transfer each recipient at the corresponding array index\n', '    function _distributeRewards(string _distributionEvent, address[] _recipients, uint256[] _amounts) private {\n', '        uint256 batchSize = _recipients.length;\n', '        require(batchSize == _amounts.length, "array length mismatch");\n', '\n', '        for (uint256 i = 0; i < batchSize; i++) {\n', '            require(_recipients[i] != address(0), "recipient must be a valid address");\n', '            require(orbs.transfer(_recipients[i], _amounts[i]), "transfer failed");\n', '            emit RewardDistributed(_distributionEvent, _recipients[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    /// Perform a single batch transfer, bypassing announcement/commitment flow.\n', '    /// Only the assigned rewardsDistributor account may call this method.\n', '    /// Provided to allow another contract or user to implement an alternative\n', '    /// batch commitment mechanism, should on be needed in the future.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    /// @param _recipients address[] a list of recipients addresses\n', '    /// @param _amounts uint256[] a list of amounts to transfer each recipient at the corresponding array index\n', '    function distributeRewards(string _distributionEvent, address[] _recipients, uint256[] _amounts) external onlyRewardsDistributor {\n', '        _distributeRewards(_distributionEvent, _recipients, _amounts);\n', '    }\n', '\n', '    /// Accepts a batch of payments associated with a distributionEvent.\n', '    /// The batch will be executed only if it matches the commitment hash\n', "    /// published by this contract's owner in a previous\n", '    /// announceDistributionEvent() call. Once validated against an existing\n', '    /// batch hash commitment, the commitment is cleared to ensure the batch\n', '    /// cannot be executed twice.\n', '    /// If this was the last batch in distributionEvent, the event record is\n', '    /// cleared logged as completed.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    /// @param _recipients address[] a list of recipients addresses\n', '    /// @param _amounts uint256[] a list of amounts to transfer each recipient at the corresponding array index\n', '    /// @param _batchIndex uint256 index of the specified batch in commitments array\n', '    function executeCommittedBatch(string _distributionEvent, address[] _recipients, uint256[] _amounts, uint256 _batchIndex) external {\n', '        Distribution storage distribution = distributions[_distributionEvent];\n', '        bytes32[] storage batchHashes = distribution.batchHashes;\n', '\n', '        require(_recipients.length == _amounts.length, "array length mismatch");\n', '        require(_recipients.length > 0, "at least one reward must be included in a batch");\n', '        require(distribution.hasPendingBatches, "distribution event is not currently ongoing");\n', '        require(batchHashes.length > _batchIndex, "batch number out of range");\n', '        require(batchHashes[_batchIndex] != bytes32(0), "specified batch number already executed");\n', '\n', '        bytes32 calculatedHash = calcBatchHash(_recipients, _amounts, _batchIndex);\n', '        require(batchHashes[_batchIndex] == calculatedHash, "batch hash does not match");\n', '\n', '        distribution.pendingBatchCount--;\n', '        batchHashes[_batchIndex] = bytes32(0); // delete\n', '\n', '        if (distribution.pendingBatchCount == 0) {\n', '            delete distributions[_distributionEvent];\n', '            emit RewardsDistributionCompleted(_distributionEvent);\n', '        }\n', '        emit RewardsBatchExecuted(_distributionEvent, calculatedHash, _batchIndex);\n', '\n', '        _distributeRewards(_distributionEvent, _recipients, _amounts);\n', '    }\n', '\n', '    /// Returns all pending (not yet executed) batch hashes and indices\n', '    /// associated with a distributionEvent.\n', '    /// @param _distributionEvent string Name of a new distribution event\n', '    /// @return pendingBatchHashes bytes32[]\n', '    /// @return pendingBatchIndices uint256[]\n', '    function getPendingBatches(string _distributionEvent) external view returns (bytes32[] pendingBatchHashes, uint256[] pendingBatchIndices) {\n', '        Distribution storage distribution = distributions[_distributionEvent];\n', '        bytes32[] storage batchHashes = distribution.batchHashes;\n', '        uint256 pendingBatchCount = distribution.pendingBatchCount;\n', '        uint256 batchHashesLength = distribution.batchHashes.length;\n', '\n', '        pendingBatchHashes = new bytes32[](pendingBatchCount);\n', '        pendingBatchIndices = new uint256[](pendingBatchCount);\n', '\n', '        uint256 addNextAt = 0;\n', '        for (uint256 i = 0; i < batchHashesLength; i++) {\n', '            bytes32 hash = batchHashes[i];\n', '            if (hash != bytes32(0)) {\n', '                pendingBatchIndices[addNextAt] = i;\n', '                pendingBatchHashes[addNextAt] = hash;\n', '                addNextAt++;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// For disaster recovery purposes. transfers all orbs from this contract to owner.\n', '    /// Only the contract owner may call this method.\n', '    /// Transfers away any Orbs balance from this contract to the owners address\n', '    function drainOrbs() external onlyOwner {\n', '        uint256 balance = orbs.balanceOf(address(this));\n', '        orbs.transfer(owner(), balance);\n', '    }\n', '\n', '    /// Assigns a new rewards-distributor account.\n', "    /// To revoke the current rewards-distributor's rights call this method with 0x0.\n", '    /// Only the contract owner may call this method.\n', '    /// @param _newRewardsDistributor The address to set as the new rewards-distributor.\n', '    function reassignRewardsDistributor(address _newRewardsDistributor) external onlyOwner {\n', '        emit RewardsDistributorReassigned(rewardsDistributor, _newRewardsDistributor);\n', '        rewardsDistributor = _newRewardsDistributor;\n', '    }\n', '\n', '    /// Return true if `msg.sender` is the assigned rewards-distributor.\n', '    function isRewardsDistributor() public view returns(bool) {\n', '        return msg.sender == rewardsDistributor;\n', '    }\n', '\n', '    /// Throws if called by any account other than the rewards-distributor.\n', '    modifier onlyRewardsDistributor() {\n', '        require(isRewardsDistributor(), "only the assigned rewards-distributor may call this method");\n', '        _;\n', '    }\n', '\n', '    /// Computes a hash code form a batch payment specification.\n', '    /// @param _recipients address[] a list of recipients addresses\n', '    /// @param _amounts uint256[] a list of amounts to transfer each recipient at the corresponding array index\n', '    /// @param _batchIndex uint256 index of the specified batch in commitments array\n', '    function calcBatchHash(address[] _recipients, uint256[] _amounts, uint256 _batchIndex) private pure returns (bytes32) {\n', '        bytes memory batchData = abi.encodePacked(_batchIndex, _recipients.length, _recipients, _amounts);\n', '\n', '        uint256 expectedLength = 32 * (2 + _recipients.length + _amounts.length);\n', '        require(batchData.length == expectedLength, "unexpected data length");\n', '\n', '        return keccak256(batchData);\n', '    }\n', '}']