['pragma solidity 0.5.1;\n', 'contract zDappRunner {  \n', '\taddress payable gadrOwner;\n', '\tuint32 gnEntryCount = 0;\n', '\n', '\tstruct clsEntry {\n', '\t\taddress adrCreator;\n', '\t\tbool bDisabled;\n', '\t}\n', '\n', '\tmapping(bytes32 => clsEntry) gmapEntry;\n', '\tmapping (uint => bytes32) gmapEntryIndex;\n', '\n', '\tconstructor() public { gadrOwner = msg.sender; }\n', '\n', '\tmodifier onlyByOwner()\n', '\t{\n', '\t\trequire(\n', '\t\t\tmsg.sender == gadrOwner, "Sender not authorized."\n', '\t\t);\n', '\t\t_;\n', '\t}\n', '\n', '\tevent Entries(bytes32 indexed b32AlphaID, address indexed adrCreator, uint indexed nDateCreated, string sParms);\n', '\n', '\tfunction zKill() onlyByOwner() external {selfdestruct (gadrOwner);}\n', '\t\n', '\tfunction zGetAllEntries() external view returns (bytes32[] memory ab32AlphaID, address[] memory aadrCreator, bool[] memory abDisabled) {\n', '\t\tab32AlphaID = new bytes32[](gnEntryCount);\n', '\t\taadrCreator = new address[](gnEntryCount);\n', '\t\tabDisabled = new bool[](gnEntryCount);\n', '\t\n', '\t\tfor (uint i = 0; i < gnEntryCount; i++) {\n', '\t\t\tclsEntry memory objEntry = gmapEntry[gmapEntryIndex[i]];\n', '\t\t\tab32AlphaID[i] = gmapEntryIndex[i];\n', '\t\t\taadrCreator[i] = objEntry.adrCreator;\n', '\t\t\tabDisabled[i] = objEntry.bDisabled;\n', '\t\t}\t\n', '\t}\n', '\n', '\tfunction zAddEntry(bytes32 b32AlphaID, string calldata sParms) external {\n', '\t\tgmapEntry[b32AlphaID].adrCreator = msg.sender;\n', '\t\tgmapEntryIndex[gnEntryCount] = b32AlphaID;\n', '\t\tgnEntryCount++;\n', '\t\temit Entries(b32AlphaID, msg.sender, block.timestamp, sParms);\n', '\t}\n', '\n', '\tfunction zSetDisabled(bytes32 b32AlphaID, bool bDisabled) external {\n', '\t\trequire(msg.sender == gadrOwner || msg.sender == gmapEntry[b32AlphaID].adrCreator);\n', '\t\tgmapEntry[b32AlphaID].bDisabled = bDisabled;\n', '\t}\n', '}']