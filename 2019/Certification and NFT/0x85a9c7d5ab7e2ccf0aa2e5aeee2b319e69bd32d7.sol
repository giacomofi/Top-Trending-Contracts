['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * VNET Token Pre-Sale Contract\n', ' * \n', ' * Send ETH here, and you will receive the VNET Tokens immediately.\n', ' * \n', ' * https://vision.network/\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token, address _receiver) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(_receiver, balance));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VNET Token Pre-Sale\n', ' */\n', 'contract VNETTokenPreSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public description = "VNET Token Pre-Sale Contract";\n', '    \n', '    ERC20Basic public vnetToken;\n', '    address wallet;\n', '    uint256 public ratioNext; // with 6 decimals\n', '    uint256 public ethPrice; // with 8 decimals\n', '    uint256 public vnetSold; // with 8 decimals\n', '    uint256 public vnetSupply = 30 * (10 ** 8) * (10 ** 6); // 30 billion supply\n', '    uint256 public vnetPriceStart = 0.0013 * (10 ** 8); // 0.0013 USD\n', '    uint256 public vnetPriceTarget = 0.0035 * (10 ** 8); // 0.0035 USD\n', '    uint256 public weiMinimum = 1 * (10 ** 18); // 1 Ether\n', '    uint256 public weiMaximum = 100 * (10 ** 18); // 100 Ether\n', '    uint256 public weiWelfare = 10 * (10 ** 18); // 10 Ether\n', '\n', '    mapping(address => bool) public welfare;\n', '\n', '    event Welfare(address indexed _buyer);\n', '    event BuyVNET(address indexed _buyer, uint256 _ratio, uint256 _vnetAmount, uint256 _weiAmount);\n', '    event EthPrice(uint256 _ethPrice);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _vnetToken, uint256 _ethPrice) public {\n', '        vnetToken = _vnetToken;\n', '        wallet = owner;\n', '        calcRatioNext();\n', '        updateEthPrice(_ethPrice);\n', '    }\n', '\n', '    /**\n', '     * @dev receive ETH and send tokens\n', '     */\n', '    function () public payable {\n', '        // Make sure token balance > 0\n', '        uint256 vnetBalance = vnetToken.balanceOf(address(this));\n', '        require(vnetBalance > 0);\n', '        require(vnetSold < vnetSupply);\n', '        \n', '        // Minimum & Maximum Limit\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= weiMinimum);\n', '        require(weiAmount <= weiMaximum);\n', '\n', '        // VNET Token Amount to be transfer\n', '        uint256 vnetAmount = weiAmount.mul(ratioNext).div(10 ** 18);\n', '\n', '        // Transfer VNET\n', '        if (vnetBalance >= vnetAmount) {\n', '            assert(vnetToken.transfer(msg.sender, vnetAmount));\n', '            emit BuyVNET(msg.sender, ratioNext, vnetAmount, weiAmount);\n', '            vnetSold = vnetSold.add(vnetAmount);\n', '            if (weiAmount >= weiWelfare) {\n', '                welfare[msg.sender] = true;\n', '                emit Welfare(msg.sender);\n', '            }\n', '        } else {\n', '            uint256 weiExpend = vnetBalance.mul(10 ** 18).div(ratioNext);\n', '            assert(vnetToken.transfer(msg.sender, vnetBalance));\n', '            emit BuyVNET(msg.sender, ratioNext, vnetBalance, weiExpend);\n', '            vnetSold = vnetSold.add(vnetBalance);\n', '            msg.sender.transfer(weiAmount.sub(weiExpend));\n', '            if (weiExpend >= weiWelfare) {\n', '                welfare[msg.sender] = true;\n', '                emit Welfare(msg.sender);\n', '            }\n', '        }\n', '\n', '        // Calculate: ratioNext\n', '        calcRatioNext();\n', '\n', '        // transfer Ether\n', '        uint256 etherBalance = address(this).balance;\n', '        wallet.transfer(etherBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev calculate ration next\n', '     */\n', '    function calcRatioNext() private {\n', '        ratioNext = ethPrice.mul(10 ** 6).div(vnetPriceStart.add(vnetPriceTarget.sub(vnetPriceStart).mul(vnetSold).div(vnetSupply)));\n', '    }\n', '\n', '    /**\n', '     * @dev update wallet\n', '     */\n', '    function updateWallet(address _wallet) onlyOwner public {\n', '        wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '     * @dev update ETH Price\n', '     */\n', '    function updateEthPrice(uint256 _ethPrice) onlyOwner public {\n', '        ethPrice = _ethPrice;\n', '        emit EthPrice(_ethPrice);\n', '        calcRatioNext();\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * VNET Token Pre-Sale Contract\n', ' * \n', ' * Send ETH here, and you will receive the VNET Tokens immediately.\n', ' * \n', ' * https://vision.network/\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token, address _receiver) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(_receiver, balance));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VNET Token Pre-Sale\n', ' */\n', 'contract VNETTokenPreSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public description = "VNET Token Pre-Sale Contract";\n', '    \n', '    ERC20Basic public vnetToken;\n', '    address wallet;\n', '    uint256 public ratioNext; // with 6 decimals\n', '    uint256 public ethPrice; // with 8 decimals\n', '    uint256 public vnetSold; // with 8 decimals\n', '    uint256 public vnetSupply = 30 * (10 ** 8) * (10 ** 6); // 30 billion supply\n', '    uint256 public vnetPriceStart = 0.0013 * (10 ** 8); // 0.0013 USD\n', '    uint256 public vnetPriceTarget = 0.0035 * (10 ** 8); // 0.0035 USD\n', '    uint256 public weiMinimum = 1 * (10 ** 18); // 1 Ether\n', '    uint256 public weiMaximum = 100 * (10 ** 18); // 100 Ether\n', '    uint256 public weiWelfare = 10 * (10 ** 18); // 10 Ether\n', '\n', '    mapping(address => bool) public welfare;\n', '\n', '    event Welfare(address indexed _buyer);\n', '    event BuyVNET(address indexed _buyer, uint256 _ratio, uint256 _vnetAmount, uint256 _weiAmount);\n', '    event EthPrice(uint256 _ethPrice);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _vnetToken, uint256 _ethPrice) public {\n', '        vnetToken = _vnetToken;\n', '        wallet = owner;\n', '        calcRatioNext();\n', '        updateEthPrice(_ethPrice);\n', '    }\n', '\n', '    /**\n', '     * @dev receive ETH and send tokens\n', '     */\n', '    function () public payable {\n', '        // Make sure token balance > 0\n', '        uint256 vnetBalance = vnetToken.balanceOf(address(this));\n', '        require(vnetBalance > 0);\n', '        require(vnetSold < vnetSupply);\n', '        \n', '        // Minimum & Maximum Limit\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= weiMinimum);\n', '        require(weiAmount <= weiMaximum);\n', '\n', '        // VNET Token Amount to be transfer\n', '        uint256 vnetAmount = weiAmount.mul(ratioNext).div(10 ** 18);\n', '\n', '        // Transfer VNET\n', '        if (vnetBalance >= vnetAmount) {\n', '            assert(vnetToken.transfer(msg.sender, vnetAmount));\n', '            emit BuyVNET(msg.sender, ratioNext, vnetAmount, weiAmount);\n', '            vnetSold = vnetSold.add(vnetAmount);\n', '            if (weiAmount >= weiWelfare) {\n', '                welfare[msg.sender] = true;\n', '                emit Welfare(msg.sender);\n', '            }\n', '        } else {\n', '            uint256 weiExpend = vnetBalance.mul(10 ** 18).div(ratioNext);\n', '            assert(vnetToken.transfer(msg.sender, vnetBalance));\n', '            emit BuyVNET(msg.sender, ratioNext, vnetBalance, weiExpend);\n', '            vnetSold = vnetSold.add(vnetBalance);\n', '            msg.sender.transfer(weiAmount.sub(weiExpend));\n', '            if (weiExpend >= weiWelfare) {\n', '                welfare[msg.sender] = true;\n', '                emit Welfare(msg.sender);\n', '            }\n', '        }\n', '\n', '        // Calculate: ratioNext\n', '        calcRatioNext();\n', '\n', '        // transfer Ether\n', '        uint256 etherBalance = address(this).balance;\n', '        wallet.transfer(etherBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev calculate ration next\n', '     */\n', '    function calcRatioNext() private {\n', '        ratioNext = ethPrice.mul(10 ** 6).div(vnetPriceStart.add(vnetPriceTarget.sub(vnetPriceStart).mul(vnetSold).div(vnetSupply)));\n', '    }\n', '\n', '    /**\n', '     * @dev update wallet\n', '     */\n', '    function updateWallet(address _wallet) onlyOwner public {\n', '        wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '     * @dev update ETH Price\n', '     */\n', '    function updateEthPrice(uint256 _ethPrice) onlyOwner public {\n', '        ethPrice = _ethPrice;\n', '        emit EthPrice(_ethPrice);\n', '        calcRatioNext();\n', '    }\n', '}']
