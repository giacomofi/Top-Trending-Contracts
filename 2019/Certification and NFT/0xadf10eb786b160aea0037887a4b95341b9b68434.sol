['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="afddcac2ccc0ef9d">[email&#160;protected]</span>π.com>, Eenae <<span class="__cf_email__" data-cfemail="e48588819c819da4898d9c869d908197ca8d8b">[email&#160;protected]</span>>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter;\n', '\n', '  constructor() internal {\n', '    // The counter starts at one to prevent changing it from zero to a non-zero\n', '    // value, which is a more expensive operation.\n', '    _guardCounter = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * Calling a `nonReentrant` function from another `nonReentrant`\n', '   * function is not supported. It is possible to prevent this from happening\n', '   * by making the `nonReentrant` function external, and make it call a\n', '   * `private` function that does the actual work.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LTOTokenSale.sol\n', '\n', '/**\n', ' * @title ERC20 LTO Network token\n', ' * @dev see https://github.com/legalthings/tokensale\n', ' */\n', 'contract LTOTokenSale is Ownable, ReentrancyGuard {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 constant minimumAmount = 0.1 ether;     // Minimum amount of ether to transfer\n', '  uint256 constant maximumCapAmount = 40 ether;  // Maximium amount of ether you can send with being caplisted\n', '  uint256 constant ethDecimals = 1 ether;         // Amount used to divide ether with to calculate proportion\n', '  uint256 constant ltoEthDiffDecimals = 10**10;   // Amount used to get the number of desired decimals, so  convert from 18 to 8\n', '  uint256 constant bonusRateDivision = 10000;     // Amount used to divide the amount so the bonus can be calculated\n', '\n', '  ERC20Burnable public token;\n', '  address public receiverAddr;\n', '  uint256 public totalSaleAmount;\n', '  uint256 public totalWannaBuyAmount;\n', '  uint256 public startTime;\n', '  uint256 public bonusEndTime;\n', '  uint256 public bonusPercentage;\n', '  uint256 public bonusDecreaseRate;\n', '  uint256 public endTime;\n', '  uint256 public userWithdrawalStartTime;\n', '  uint256 public clearStartTime;\n', '  uint256 public withdrawn;\n', '  uint256 public proportion = 1 ether;\n', '  uint256 public globalAmount;\n', '  uint256 public rate;\n', '  uint256 public nrOfTransactions = 0;\n', '\n', '  address public capListAddress;\n', '  mapping (address => bool) public capFreeAddresses;\n', '\n', '  struct PurchaserInfo {\n', '    bool withdrew;\n', '    bool recorded;\n', '    uint256 received;     // Received ether\n', '    uint256 accounted;    // Received ether + bonus\n', '    uint256 unreceived;   // Ether stuck because failed withdraw\n', '  }\n', '\n', '  struct Purchase {\n', '    uint256 received;     // Received ether\n', '    uint256 used;         // Received ether multiplied by the proportion\n', '    uint256 tokens;       // To receive tokens\n', '  }\n', '  mapping(address => PurchaserInfo) public purchaserMapping;\n', '  address[] public purchaserList;\n', '\n', '  modifier onlyOpenTime {\n', '    require(isStarted());\n', '    require(!isEnded());\n', '    _;\n', '  }\n', '\n', '  modifier onlyAutoWithdrawalTime {\n', '    require(isEnded());\n', '    _;\n', '  }\n', '\n', '  modifier onlyUserWithdrawalTime {\n', '    require(isUserWithdrawalTime());\n', '    _;\n', '  }\n', '\n', '  modifier purchasersAllWithdrawn {\n', '    require(withdrawn==purchaserList.length);\n', '    _;\n', '  }\n', '\n', '  modifier onlyClearTime {\n', '    require(isClearTime());\n', '    _;\n', '  }\n', '\n', '  modifier onlyCapListAddress {\n', '    require(msg.sender == capListAddress);\n', '    _;\n', '  }\n', '\n', '  constructor(address _receiverAddr, ERC20Burnable _token, uint256 _totalSaleAmount, address _capListAddress) public {\n', '    require(_receiverAddr != address(0));\n', '    require(_token != address(0));\n', '    require(_capListAddress != address(0));\n', '    require(_totalSaleAmount > 0);\n', '\n', '    receiverAddr = _receiverAddr;\n', '    token = _token;\n', '    totalSaleAmount = _totalSaleAmount;\n', '    capListAddress = _capListAddress;\n', '  }\n', '\n', '  function isStarted() public view returns(bool) {\n', '    return 0 < startTime && startTime <= now && endTime != 0;\n', '  }\n', '\n', '  function isEnded() public view returns(bool) {\n', '    return 0 < endTime && now > endTime;\n', '  }\n', '\n', '  function isUserWithdrawalTime() public view returns(bool) {\n', '    return 0 < userWithdrawalStartTime && now > userWithdrawalStartTime;\n', '  }\n', '\n', '  function isClearTime() public view returns(bool) {\n', '    return 0 < clearStartTime && now > clearStartTime;\n', '  }\n', '\n', '  function isBonusPeriod() public view returns(bool) {\n', '    return now >= startTime && now <= bonusEndTime;\n', '  }\n', '\n', '  function startSale(uint256 _startTime, uint256 _rate, uint256 duration,\n', '    uint256 bonusDuration, uint256 _bonusPercentage, uint256 _bonusDecreaseRate,\n', '    uint256 userWithdrawalDelaySec, uint256 clearDelaySec) public onlyOwner {\n', '    require(endTime == 0);\n', '    require(_startTime > 0);\n', '    require(_rate > 0);\n', '    require(duration > 0);\n', '    require(token.balanceOf(this) == totalSaleAmount);\n', '\n', '    rate = _rate;\n', '    bonusPercentage = _bonusPercentage;\n', '    bonusDecreaseRate = _bonusDecreaseRate;\n', '    startTime = _startTime;\n', '    bonusEndTime = startTime.add(bonusDuration);\n', '    endTime = startTime.add(duration);\n', '    userWithdrawalStartTime = endTime.add(userWithdrawalDelaySec);\n', '    clearStartTime = endTime.add(clearDelaySec);\n', '  }\n', '\n', '  function getPurchaserCount() public view returns(uint256) {\n', '    return purchaserList.length;\n', '  }\n', '\n', '  function _calcProportion() internal {\n', '    assert(totalSaleAmount > 0);\n', '\n', '    if (totalSaleAmount >= totalWannaBuyAmount) {\n', '      proportion = ethDecimals;\n', '      return;\n', '    }\n', '    proportion = totalSaleAmount.mul(ethDecimals).div(totalWannaBuyAmount);\n', '  }\n', '\n', '  function getSaleInfo(address purchaser) internal view returns (Purchase p) {\n', '    PurchaserInfo storage pi = purchaserMapping[purchaser];\n', '    return Purchase(\n', '      pi.received,\n', '      pi.received.mul(proportion).div(ethDecimals),\n', '      pi.accounted.mul(proportion).div(ethDecimals).mul(rate).div(ltoEthDiffDecimals)\n', '    );\n', '  }\n', '\n', '  function getPublicSaleInfo(address purchaser) public view returns (uint256, uint256, uint256) {\n', '    Purchase memory purchase = getSaleInfo(purchaser);\n', '    return (purchase.received, purchase.used, purchase.tokens);\n', '  }\n', '\n', '  function () payable public {\n', '    buy();\n', '  }\n', '\n', '  function buy() payable public onlyOpenTime {\n', '    require(msg.value >= minimumAmount);\n', '\n', '    uint256 amount = msg.value;\n', '    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n', '    if (!pi.recorded) {\n', '      pi.recorded = true;\n', '      purchaserList.push(msg.sender);\n', '    }\n', '    uint256 totalAmount = pi.received.add(amount);\n', '    if (totalAmount > maximumCapAmount && !isCapFree(msg.sender)) {\n', '      uint256 recap = totalAmount.sub(maximumCapAmount);\n', '      amount = amount.sub(recap);\n', '      if (amount <= 0) {\n', '        revert();\n', '      } else {\n', '        msg.sender.transfer(recap);\n', '      }\n', '    }\n', '    pi.received = pi.received.add(amount);\n', '\n', '    globalAmount = globalAmount.add(amount);\n', '    if (isBonusPeriod() && bonusDecreaseRate.mul(nrOfTransactions) < bonusPercentage) {\n', '      uint256 percentage = bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n', '      uint256 bonus = amount.div(bonusRateDivision).mul(percentage);\n', '      amount = amount.add(bonus);\n', '    }\n', '    pi.accounted = pi.accounted.add(amount);\n', '    totalWannaBuyAmount = totalWannaBuyAmount.add(amount.mul(rate).div(ltoEthDiffDecimals));\n', '    _calcProportion();\n', '    nrOfTransactions = nrOfTransactions.add(1);\n', '  }\n', '\n', '  function _withdrawal(address purchaser) internal {\n', '    require(purchaser != 0x0);\n', '    PurchaserInfo storage pi = purchaserMapping[purchaser];\n', '    if (pi.withdrew || !pi.recorded) {\n', '      return;\n', '    }\n', '    pi.withdrew = true;\n', '    withdrawn = withdrawn.add(1);\n', '    Purchase memory purchase = getSaleInfo(purchaser);\n', '    if (purchase.used > 0 && purchase.tokens > 0) {\n', '      receiverAddr.transfer(purchase.used);\n', '      require(token.transfer(purchaser, purchase.tokens));\n', '\n', '      uint256 unused = purchase.received.sub(purchase.used);\n', '      if (unused > 0) {\n', '        if (!purchaser.send(unused)) {\n', '          pi.unreceived = unused;\n', '        }\n', '      }\n', '    } else {\n', '      assert(false);\n', '    }\n', '    return;\n', '  }\n', '\n', '  function withdrawal() public onlyUserWithdrawalTime {\n', '    _withdrawal(msg.sender);\n', '  }\n', '\n', '  function withdrawalFor(uint256 index, uint256 stop) public onlyAutoWithdrawalTime onlyOwner {\n', '    for (; index < stop; index++) {\n', '      _withdrawal(purchaserList[index]);\n', '    }\n', '  }\n', '\n', '  function clear(uint256 tokenAmount, uint256 etherAmount) public purchasersAllWithdrawn onlyClearTime onlyOwner {\n', '    if (tokenAmount > 0) {\n', '      token.burn(tokenAmount);\n', '    }\n', '    if (etherAmount > 0) {\n', '      receiverAddr.transfer(etherAmount);\n', '    }\n', '  }\n', '\n', '  function withdrawFailed(address alternativeAddress) public onlyUserWithdrawalTime nonReentrant {\n', '    require(alternativeAddress != 0x0);\n', '    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n', '\n', '    require(pi.recorded);\n', '    require(pi.unreceived > 0);\n', '    if (alternativeAddress.send(pi.unreceived)) {\n', '      pi.unreceived = 0;\n', '    }\n', '  }\n', '\n', '  function addCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n', '    require(capFreeAddress != address(0));\n', '\n', '    capFreeAddresses[capFreeAddress] = true;\n', '  }\n', '\n', '  function removeCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n', '    require(capFreeAddress != address(0));\n', '\n', '    capFreeAddresses[capFreeAddress] = false;\n', '  }\n', '\n', '  function isCapFree(address capFreeAddress) internal view returns (bool) {\n', '    return (capFreeAddresses[capFreeAddress]);\n', '  }\n', '\n', '  function currentBonus() public view returns(uint256) {\n', '    return bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter;\n', '\n', '  constructor() internal {\n', '    // The counter starts at one to prevent changing it from zero to a non-zero\n', '    // value, which is a more expensive operation.\n', '    _guardCounter = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * Calling a `nonReentrant` function from another `nonReentrant`\n', '   * function is not supported. It is possible to prevent this from happening\n', '   * by making the `nonReentrant` function external, and make it call a\n', '   * `private` function that does the actual work.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LTOTokenSale.sol\n', '\n', '/**\n', ' * @title ERC20 LTO Network token\n', ' * @dev see https://github.com/legalthings/tokensale\n', ' */\n', 'contract LTOTokenSale is Ownable, ReentrancyGuard {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 constant minimumAmount = 0.1 ether;     // Minimum amount of ether to transfer\n', '  uint256 constant maximumCapAmount = 40 ether;  // Maximium amount of ether you can send with being caplisted\n', '  uint256 constant ethDecimals = 1 ether;         // Amount used to divide ether with to calculate proportion\n', '  uint256 constant ltoEthDiffDecimals = 10**10;   // Amount used to get the number of desired decimals, so  convert from 18 to 8\n', '  uint256 constant bonusRateDivision = 10000;     // Amount used to divide the amount so the bonus can be calculated\n', '\n', '  ERC20Burnable public token;\n', '  address public receiverAddr;\n', '  uint256 public totalSaleAmount;\n', '  uint256 public totalWannaBuyAmount;\n', '  uint256 public startTime;\n', '  uint256 public bonusEndTime;\n', '  uint256 public bonusPercentage;\n', '  uint256 public bonusDecreaseRate;\n', '  uint256 public endTime;\n', '  uint256 public userWithdrawalStartTime;\n', '  uint256 public clearStartTime;\n', '  uint256 public withdrawn;\n', '  uint256 public proportion = 1 ether;\n', '  uint256 public globalAmount;\n', '  uint256 public rate;\n', '  uint256 public nrOfTransactions = 0;\n', '\n', '  address public capListAddress;\n', '  mapping (address => bool) public capFreeAddresses;\n', '\n', '  struct PurchaserInfo {\n', '    bool withdrew;\n', '    bool recorded;\n', '    uint256 received;     // Received ether\n', '    uint256 accounted;    // Received ether + bonus\n', '    uint256 unreceived;   // Ether stuck because failed withdraw\n', '  }\n', '\n', '  struct Purchase {\n', '    uint256 received;     // Received ether\n', '    uint256 used;         // Received ether multiplied by the proportion\n', '    uint256 tokens;       // To receive tokens\n', '  }\n', '  mapping(address => PurchaserInfo) public purchaserMapping;\n', '  address[] public purchaserList;\n', '\n', '  modifier onlyOpenTime {\n', '    require(isStarted());\n', '    require(!isEnded());\n', '    _;\n', '  }\n', '\n', '  modifier onlyAutoWithdrawalTime {\n', '    require(isEnded());\n', '    _;\n', '  }\n', '\n', '  modifier onlyUserWithdrawalTime {\n', '    require(isUserWithdrawalTime());\n', '    _;\n', '  }\n', '\n', '  modifier purchasersAllWithdrawn {\n', '    require(withdrawn==purchaserList.length);\n', '    _;\n', '  }\n', '\n', '  modifier onlyClearTime {\n', '    require(isClearTime());\n', '    _;\n', '  }\n', '\n', '  modifier onlyCapListAddress {\n', '    require(msg.sender == capListAddress);\n', '    _;\n', '  }\n', '\n', '  constructor(address _receiverAddr, ERC20Burnable _token, uint256 _totalSaleAmount, address _capListAddress) public {\n', '    require(_receiverAddr != address(0));\n', '    require(_token != address(0));\n', '    require(_capListAddress != address(0));\n', '    require(_totalSaleAmount > 0);\n', '\n', '    receiverAddr = _receiverAddr;\n', '    token = _token;\n', '    totalSaleAmount = _totalSaleAmount;\n', '    capListAddress = _capListAddress;\n', '  }\n', '\n', '  function isStarted() public view returns(bool) {\n', '    return 0 < startTime && startTime <= now && endTime != 0;\n', '  }\n', '\n', '  function isEnded() public view returns(bool) {\n', '    return 0 < endTime && now > endTime;\n', '  }\n', '\n', '  function isUserWithdrawalTime() public view returns(bool) {\n', '    return 0 < userWithdrawalStartTime && now > userWithdrawalStartTime;\n', '  }\n', '\n', '  function isClearTime() public view returns(bool) {\n', '    return 0 < clearStartTime && now > clearStartTime;\n', '  }\n', '\n', '  function isBonusPeriod() public view returns(bool) {\n', '    return now >= startTime && now <= bonusEndTime;\n', '  }\n', '\n', '  function startSale(uint256 _startTime, uint256 _rate, uint256 duration,\n', '    uint256 bonusDuration, uint256 _bonusPercentage, uint256 _bonusDecreaseRate,\n', '    uint256 userWithdrawalDelaySec, uint256 clearDelaySec) public onlyOwner {\n', '    require(endTime == 0);\n', '    require(_startTime > 0);\n', '    require(_rate > 0);\n', '    require(duration > 0);\n', '    require(token.balanceOf(this) == totalSaleAmount);\n', '\n', '    rate = _rate;\n', '    bonusPercentage = _bonusPercentage;\n', '    bonusDecreaseRate = _bonusDecreaseRate;\n', '    startTime = _startTime;\n', '    bonusEndTime = startTime.add(bonusDuration);\n', '    endTime = startTime.add(duration);\n', '    userWithdrawalStartTime = endTime.add(userWithdrawalDelaySec);\n', '    clearStartTime = endTime.add(clearDelaySec);\n', '  }\n', '\n', '  function getPurchaserCount() public view returns(uint256) {\n', '    return purchaserList.length;\n', '  }\n', '\n', '  function _calcProportion() internal {\n', '    assert(totalSaleAmount > 0);\n', '\n', '    if (totalSaleAmount >= totalWannaBuyAmount) {\n', '      proportion = ethDecimals;\n', '      return;\n', '    }\n', '    proportion = totalSaleAmount.mul(ethDecimals).div(totalWannaBuyAmount);\n', '  }\n', '\n', '  function getSaleInfo(address purchaser) internal view returns (Purchase p) {\n', '    PurchaserInfo storage pi = purchaserMapping[purchaser];\n', '    return Purchase(\n', '      pi.received,\n', '      pi.received.mul(proportion).div(ethDecimals),\n', '      pi.accounted.mul(proportion).div(ethDecimals).mul(rate).div(ltoEthDiffDecimals)\n', '    );\n', '  }\n', '\n', '  function getPublicSaleInfo(address purchaser) public view returns (uint256, uint256, uint256) {\n', '    Purchase memory purchase = getSaleInfo(purchaser);\n', '    return (purchase.received, purchase.used, purchase.tokens);\n', '  }\n', '\n', '  function () payable public {\n', '    buy();\n', '  }\n', '\n', '  function buy() payable public onlyOpenTime {\n', '    require(msg.value >= minimumAmount);\n', '\n', '    uint256 amount = msg.value;\n', '    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n', '    if (!pi.recorded) {\n', '      pi.recorded = true;\n', '      purchaserList.push(msg.sender);\n', '    }\n', '    uint256 totalAmount = pi.received.add(amount);\n', '    if (totalAmount > maximumCapAmount && !isCapFree(msg.sender)) {\n', '      uint256 recap = totalAmount.sub(maximumCapAmount);\n', '      amount = amount.sub(recap);\n', '      if (amount <= 0) {\n', '        revert();\n', '      } else {\n', '        msg.sender.transfer(recap);\n', '      }\n', '    }\n', '    pi.received = pi.received.add(amount);\n', '\n', '    globalAmount = globalAmount.add(amount);\n', '    if (isBonusPeriod() && bonusDecreaseRate.mul(nrOfTransactions) < bonusPercentage) {\n', '      uint256 percentage = bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n', '      uint256 bonus = amount.div(bonusRateDivision).mul(percentage);\n', '      amount = amount.add(bonus);\n', '    }\n', '    pi.accounted = pi.accounted.add(amount);\n', '    totalWannaBuyAmount = totalWannaBuyAmount.add(amount.mul(rate).div(ltoEthDiffDecimals));\n', '    _calcProportion();\n', '    nrOfTransactions = nrOfTransactions.add(1);\n', '  }\n', '\n', '  function _withdrawal(address purchaser) internal {\n', '    require(purchaser != 0x0);\n', '    PurchaserInfo storage pi = purchaserMapping[purchaser];\n', '    if (pi.withdrew || !pi.recorded) {\n', '      return;\n', '    }\n', '    pi.withdrew = true;\n', '    withdrawn = withdrawn.add(1);\n', '    Purchase memory purchase = getSaleInfo(purchaser);\n', '    if (purchase.used > 0 && purchase.tokens > 0) {\n', '      receiverAddr.transfer(purchase.used);\n', '      require(token.transfer(purchaser, purchase.tokens));\n', '\n', '      uint256 unused = purchase.received.sub(purchase.used);\n', '      if (unused > 0) {\n', '        if (!purchaser.send(unused)) {\n', '          pi.unreceived = unused;\n', '        }\n', '      }\n', '    } else {\n', '      assert(false);\n', '    }\n', '    return;\n', '  }\n', '\n', '  function withdrawal() public onlyUserWithdrawalTime {\n', '    _withdrawal(msg.sender);\n', '  }\n', '\n', '  function withdrawalFor(uint256 index, uint256 stop) public onlyAutoWithdrawalTime onlyOwner {\n', '    for (; index < stop; index++) {\n', '      _withdrawal(purchaserList[index]);\n', '    }\n', '  }\n', '\n', '  function clear(uint256 tokenAmount, uint256 etherAmount) public purchasersAllWithdrawn onlyClearTime onlyOwner {\n', '    if (tokenAmount > 0) {\n', '      token.burn(tokenAmount);\n', '    }\n', '    if (etherAmount > 0) {\n', '      receiverAddr.transfer(etherAmount);\n', '    }\n', '  }\n', '\n', '  function withdrawFailed(address alternativeAddress) public onlyUserWithdrawalTime nonReentrant {\n', '    require(alternativeAddress != 0x0);\n', '    PurchaserInfo storage pi = purchaserMapping[msg.sender];\n', '\n', '    require(pi.recorded);\n', '    require(pi.unreceived > 0);\n', '    if (alternativeAddress.send(pi.unreceived)) {\n', '      pi.unreceived = 0;\n', '    }\n', '  }\n', '\n', '  function addCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n', '    require(capFreeAddress != address(0));\n', '\n', '    capFreeAddresses[capFreeAddress] = true;\n', '  }\n', '\n', '  function removeCapFreeAddress(address capFreeAddress) public onlyCapListAddress {\n', '    require(capFreeAddress != address(0));\n', '\n', '    capFreeAddresses[capFreeAddress] = false;\n', '  }\n', '\n', '  function isCapFree(address capFreeAddress) internal view returns (bool) {\n', '    return (capFreeAddresses[capFreeAddress]);\n', '  }\n', '\n', '  function currentBonus() public view returns(uint256) {\n', '    return bonusPercentage.sub(bonusDecreaseRate.mul(nrOfTransactions));\n', '  }\n', '}']
