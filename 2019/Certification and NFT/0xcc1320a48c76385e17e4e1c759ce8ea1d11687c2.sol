['pragma solidity >=0.5.0 <0.6.0;\n', '\n', "// we need only a single method of Maker's Medianizer contract\n", 'interface IMakerPriceFeed {\n', '    // https://github.com/makerdao/medianizer/blob/master/src/medianizer.sol#L87\n', '    function read() external view returns (bytes32);\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '}\n', '\n', '/**\n', ' * Simple swap contract which allows anybody to swap ETH for a specific ERC-20 token (chosen on deploy) for an USD denominated price.\n', ' * The price in ETH is calculated using the Maker Feeds of the DAI Stablecoin System.\n', ' */\n', 'contract EthToErc20Swap {\n', '    address public owner;\n', '\n', '    // price of 1 erc20 token in milli-USD\n', '    uint256 public erc20mUSDPrice;\n', '    IMakerPriceFeed ethPriceFeedContract;\n', '    IERC20 erc20TokenContract;\n', '\n', '    event Swapped(address account, uint256 ethAmount, uint256 erc20Amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "no permission");\n', '        _;\n', '    }\n', '\n', '    // "0x729D19f657BD0614b4985Cf1D82531c67569197B" for the feed on Ethereum\n', '    // "0xe41dd6e41f8f9962c5103d95d95f5d9b82d90fdf" for ATS20 on Ethereum\n', '    constructor(address ethPriceFeedAddr, address erc20TokenAddr, uint256 initialErc20mUSDPrice) public {\n', '        owner = msg.sender;\n', '        ethPriceFeedContract = IMakerPriceFeed(ethPriceFeedAddr);\n', '        erc20TokenContract = IERC20(erc20TokenAddr);\n', '        setPriceInmUSD(initialErc20mUSDPrice);\n', '    }\n', '\n', "    // Sending ETH to the contract triggers the swap. If it fails for some reason, the sender won't lose anything (except the tx fee).\n", '    function () external payable {\n', '        // returns the price with 18 digits as bytes32 which can safely be casted to uint256. Will throw if the system has no reliable price.\n', '        // 15 digits are cut off in order to get mUSD\n', '        uint256 ethmUSDPrice = uint256(ethPriceFeedContract.read()) / 1E15;\n', '        uint256 erc20Amount = msg.value * ethmUSDPrice / erc20mUSDPrice;\n', '\n', '        // will throw if the sender (our) balance is insufficient\n', '        erc20TokenContract.transfer(msg.sender, erc20Amount);\n', '\n', '        emit Swapped(msg.sender, msg.value, erc20Amount);\n', '    }\n', '\n', '    function setOwner(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setPriceInmUSD(uint256 newPrice) public onlyOwner {\n', '        require(newPrice > 0);\n', '        erc20mUSDPrice = newPrice;\n', '    }\n', '\n', '    // withdraw all tokens owned by the contract to the given receiver\n', '    function withdrawErc20To(address receiver) external onlyOwner  {\n', '        uint256 amount = erc20TokenContract.balanceOf(address(this));\n', '        erc20TokenContract.transfer(receiver, amount);\n', '    }\n', '\n', '    function withdrawEthTo(address payable receiver) external onlyOwner {\n', '        receiver.transfer(address(this).balance);\n', '    }\n', '}']