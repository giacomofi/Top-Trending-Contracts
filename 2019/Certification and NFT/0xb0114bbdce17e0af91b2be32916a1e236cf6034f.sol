['// File: contracts/interfaces/IERC721.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', '/// @dev See https://eips.ethereum.org/EIPS/eip-721\n', '///  Note: the ERC-165 identifier for this interface is 0x80ac58cd\n', '\n', 'interface IERC721 {\n', '\n', '\n', '  /// @dev This emits when ownership of any NFT changes by any mechanism.\n', '  ///  This event emits when NFTs are created (`from` == 0) and destroyed\n', '  ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n', '  ///  may be created and assigned without emitting Transfer. At the time of\n', '  ///  any transfer, the approved address for that NFT (if any) is reset to none.\n', '  event Transfer(address indexed _from, address indexed _to, uint indexed _tokenId);\n', '\n', '  /// @dev This emits when the approved address for an NFT is changed or\n', '  ///  reaffirmed. The zero address indicates there is no approved address.\n', '  ///  When a Transfer event emits, this also indicates that the approved\n', '  ///  address for that NFT (if any) is reset to none.\n', '  event Approval(address indexed _owner, address indexed _approved, uint indexed _tokenId);\n', '\n', '  /// @dev This emits when an operator is enabled or disabled for an owner.\n', '  ///  The operator can manage all NFTs of the owner.\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n', '  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n', '  ///  THEY MAY BE PERMANENTLY LOST\n', '  /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '  ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '  ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '  ///  `_tokenId` is not a valid NFT.\n', '  /// @param _from The current owner of the NFT\n', '  /// @param _to The new owner\n', '  /// @param _tokenId The NFT to transfer\n', '  function transferFrom(address _from, address _to, uint _tokenId) external payable;\n', '\n', '  /// @notice Set or reaffirm the approved address for an NFT\n', '  /// @dev The zero address indicates there is no approved address.\n', '  /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n', '  ///  operator of the current owner.\n', '  /// @param _approved The new approved NFT controller\n', '  /// @param _tokenId The NFT to approve\n', '  function approve(address _approved, uint _tokenId) external payable;\n', '\n', '  /// @notice Transfers the ownership of an NFT from one address to another address\n', '  /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '  ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '  ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n', '  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '  ///  `onERC721Received` on `_to` and throws if the return value is not\n', "  ///  `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\n", '  /// @param _from The current owner of the NFT\n', '  /// @param _to The new owner\n', '  /// @param _tokenId The NFT to transfer\n', '  /// @param data Additional data with no specified format, sent in call to `_to`\n', '  function safeTransferFrom(address _from, address _to, uint _tokenId, bytes calldata data) external payable;\n', '\n', '  /// @notice Transfers the ownership of an NFT from one address to another address\n', '  /// @dev This works identically to the other function with an extra data parameter,\n', "  ///  except this function just sets data to ''\n", '  /// @param _from The current owner of the NFT\n', '  /// @param _to The new owner\n', '  /// @param _tokenId The NFT to transfer\n', '  function safeTransferFrom(address _from, address _to, uint _tokenId) external payable;\n', '\n', "  /// @notice Enable or disable approval for a third party ('operator') to manage\n", "  ///  all of `msg.sender`'s assets.\n", '  /// @dev Emits the ApprovalForAll event. The contract MUST allow\n', '  ///  multiple operators per owner.\n', '  /// @param _operator Address to add to the set of authorized operators.\n', '  /// @param _approved True if the operator is approved, false to revoke approval\n', '  function setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '  /// @notice Count all NFTs assigned to an owner\n', '  /// @dev NFTs assigned to the zero address are considered invalid, and this\n', '  ///  function throws for queries about the zero address.\n', '  /// @param _owner An address for whom to query the balance\n', '  /// @return The number of NFTs owned by `_owner`, possibly zero\n', '  function balanceOf(address _owner) external view returns (uint);\n', '\n', '  /// @notice Find the owner of an NFT\n', '  /// @dev NFTs assigned to zero address are considered invalid, and queries\n', '  ///  about them do throw.\n', '  /// @param _tokenId The identifier for an NFT\n', '  /// @return The address of the owner of the NFT\n', '  function ownerOf(uint _tokenId) external view returns (address);\n', '\n', '  /// @notice Get the approved address for a single NFT\n', '  /// @dev Throws if `_tokenId` is not a valid NFT\n', '  /// @param _tokenId The NFT to find the approved address for\n', '  /// @return The approved address for this NFT, or the zero address if there is none\n', '  function getApproved(uint _tokenId) external view returns (address);\n', '\n', '  /// @notice Query if an address is an authorized operator for another address\n', '  /// @param _owner The address that owns the NFTs\n', '  /// @param _operator The address that acts on behalf of the owner\n', '  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '\n', '  /// @notice A descriptive name for a collection of NFTs in this contract\n', '  function name() external view returns (string memory _name);\n', '}\n', '\n', '// File: zos-lib/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(address) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: openzeppelin-eth/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable is Initializable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others (`ERC165Checker`).\n', ' *\n', ' * For an implementation, see `ERC165`.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC165` interface.\n', ' *\n', ' * Contracts may inherit from this and call `_registerInterface` to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC165.supportsInterface`.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See `IERC165.supportsInterface`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '    /**\n', '     * @notice Handle the receipt of an NFT\n', '     * @dev The ERC721 smart contract calls this function on the recipient\n', '     * after a `safeTransfer`. This function MUST return the function selector,\n', '     * otherwise the caller will revert the transaction. The selector to be\n', '     * returned can be obtained as `this.onERC721Received.selector`. This\n', '     * function MAY throw to revert and reject the transfer.\n', '     * Note: the ERC721 contract address is always the message sender.\n', '     * @param operator The address which called `safeTransferFrom` function\n', '     * @param from The address which previously owned the token\n', '     * @param tokenId The NFT identifier which is being transferred\n', '     * @param data Additional data with no specified format\n', '     * @return bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n', '    public returns (bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract ERC721Holder is IERC721Receiver {\n', '    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/mixins/MixinFunds.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '/**\n', ' * @title An implementation of the money related functions.\n', ' * @author HardlyDifficult (unlock-protocol.com)\n', ' */\n', 'contract MixinFunds\n', '{\n', '  /**\n', '   * The token-type that this Lock is priced in.  If 0, then use ETH, else this is\n', '   * a ERC20 token address.\n', '   */\n', '  address public tokenAddress;\n', '\n', '  constructor(\n', '    address _tokenAddress\n', '  ) public\n', '  {\n', '    require(\n', '      _tokenAddress == address(0) || IERC20(_tokenAddress).totalSupply() > 0,\n', "      'INVALID_TOKEN'\n", '    );\n', '    tokenAddress = _tokenAddress;\n', '  }\n', '\n', '  /**\n', '   * Gets the current balance of the account provided.\n', '   */\n', '  function getBalance(\n', '    address _account\n', '  ) public view\n', '    returns (uint)\n', '  {\n', '    if(tokenAddress == address(0)) {\n', '      return _account.balance;\n', '    } else {\n', '      return IERC20(tokenAddress).balanceOf(_account);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Ensures that the msg.sender has paid at least the price stated.\n', '   *\n', '   * With ETH, this means the function originally called was `payable` and the\n', '   * transaction included at least the amount requested.\n', '   *\n', '   * Security: be wary of re-entrancy when calling this function.\n', '   */\n', '  function _chargeAtLeast(\n', '    uint _price\n', '  ) internal\n', '  {\n', '    if(_price > 0) {\n', '      if(tokenAddress == address(0)) {\n', "        require(msg.value >= _price, 'NOT_ENOUGH_FUNDS');\n", '      } else {\n', '        IERC20 token = IERC20(tokenAddress);\n', '        uint balanceBefore = token.balanceOf(address(this));\n', '        token.transferFrom(msg.sender, address(this), _price);\n', '\n', '        // There are known bugs in popular ERC20 implements which means we cannot\n', '        // trust the return value of `transferFrom`.  This require statement ensures\n', '        // that a transfer occurred.\n', "        require(token.balanceOf(address(this)) > balanceBefore, 'TRANSFER_FAILED');\n", '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Transfers funds from the contract to the account provided.\n', '   *\n', '   * Security: be wary of re-entrancy when calling this function.\n', '   */\n', '  function _transfer(\n', '    address _to,\n', '    uint _amount\n', '  ) internal\n', '  {\n', '    if(_amount > 0) {\n', '      if(tokenAddress == address(0)) {\n', '        address(uint160(_to)).transfer(_amount);\n', '      } else {\n', '        IERC20 token = IERC20(tokenAddress);\n', '        uint balanceBefore = token.balanceOf(_to);\n', '        token.transfer(_to, _amount);\n', '\n', '        // There are known bugs in popular ERC20 implements which means we cannot\n', '        // trust the return value of `transferFrom`.  This require statement ensures\n', '        // that a transfer occurred.\n', "        require(token.balanceOf(_to) > balanceBefore, 'TRANSFER_FAILED');\n", '      }\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinDisableAndDestroy.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin allowing the Lock owner to disable a Lock (preventing new purchases)\n', ' * and then destroy it.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinDisableAndDestroy is\n', '  IERC721,\n', '  Ownable,\n', '  MixinFunds\n', '{\n', '  // Used to disable payable functions when deprecating an old lock\n', '  bool public isAlive;\n', '\n', '  event Destroy(\n', '    uint balance,\n', '    address indexed owner\n', '  );\n', '\n', '  event Disable();\n', '\n', '  constructor(\n', '  ) internal\n', '  {\n', '    isAlive = true;\n', '  }\n', '\n', '  // Only allow usage when contract is Alive\n', '  modifier onlyIfAlive() {\n', "    require(isAlive, 'LOCK_DEPRECATED');\n", '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Used to disable lock before migrating keys and/or destroying contract\n', '   */\n', '  function disableLock()\n', '    external\n', '    onlyOwner\n', '    onlyIfAlive\n', '  {\n', '    emit Disable();\n', '    isAlive = false;\n', '  }\n', '\n', '  /**\n', '  * @dev Used to clean up old lock contracts from the blockchain\n', '  * TODO: add a check to ensure all keys are INVALID!\n', '   */\n', '  function destroyLock()\n', '    external\n', '    onlyOwner\n', '  {\n', "    require(isAlive == false, 'DISABLE_FIRST');\n", '\n', '    emit Destroy(address(this).balance, msg.sender);\n', '\n', '    // this will send any ETH or ERC20 held by the lock to the owner\n', '    _transfer(msg.sender, getBalance(address(this)));\n', '    selfdestruct(msg.sender);\n', '\n', "    // Note we don't clean up the `locks` data in Unlock.sol as it should not be necessary\n", "    // and leaves some data behind ('Unlock.LockBalances') which may be helpful.\n", '  }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/IUnlock.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '/**\n', ' * @title The Unlock Interface\n', ' * @author Nick Furfaro (unlock-protocol.com)\n', '**/\n', '\n', 'interface IUnlock {\n', '\n', '\n', '  // Events\n', '  event NewLock(\n', '    address indexed lockOwner,\n', '    address indexed newLockAddress\n', '  );\n', '\n', '  event NewTokenURI(\n', '    string tokenURI\n', '  );\n', '\n', '  event NewGlobalTokenSymbol(\n', '    string tokenSymbol\n', '  );\n', '\n', '  // Use initialize instead of a constructor to support proxies (for upgradeability via zos).\n', '  function initialize(address _owner) external;\n', '\n', '  /**\n', '  * @dev Create lock\n', '  * This deploys a lock for a creator. It also keeps track of the deployed lock.\n', '  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\n', '  */\n', '  function createLock(\n', '    uint _expirationDuration,\n', '    address _tokenAddress,\n', '    uint _keyPrice,\n', '    uint _maxNumberOfKeys,\n', '    string calldata _lockName\n', '  ) external;\n', '\n', '    /**\n', '   * This function keeps track of the added GDP, as well as grants of discount tokens\n', '   * to the referrer, if applicable.\n', '   * The number of discount tokens granted is based on the value of the referal,\n', "   * the current growth rate and the lock's discount token distribution rate\n", '   * This function is invoked by a previously deployed lock only.\n', '   */\n', '  function recordKeyPurchase(\n', '    uint _value,\n', '    address _referrer // solhint-disable-line no-unused-vars\n', '  )\n', '    external;\n', '\n', '    /**\n', '   * This function will keep track of consumed discounts by a given user.\n', '   * It will also grant discount tokens to the creator who is granting the discount based on the\n', '   * amount of discount and compensation rate.\n', '   * This function is invoked by a previously deployed lock only.\n', '   */\n', '  function recordConsumedDiscount(\n', '    uint _discount,\n', '    uint _tokens // solhint-disable-line no-unused-vars\n', '  )\n', '    external;\n', '\n', '    /**\n', '   * This function returns the discount available for a user, when purchasing a\n', '   * a key from a lock.\n', '   * This does not modify the state. It returns both the discount and the number of tokens\n', '   * consumed to grant that discount.\n', '   */\n', '  function computeAvailableDiscountFor(\n', '    address _purchaser, // solhint-disable-line no-unused-vars\n', '    uint _keyPrice // solhint-disable-line no-unused-vars\n', '  )\n', '    external\n', '    view\n', '    returns (uint discount, uint tokens);\n', '\n', '  // Function to read the globalTokenURI field.\n', '  function getGlobalBaseTokenURI()\n', '    external\n', '    view\n', '    returns (string memory);\n', '\n', '  /** Function to set the globalTokenURI field.\n', '   *  Should throw if called by other than owner\n', '   */\n', '  function setGlobalBaseTokenURI(\n', '    string calldata _URI\n', '  )\n', '    external;\n', '\n', '  // Function to read the globalTokenSymbol field.\n', '  function getGlobalTokenSymbol()\n', '    external\n', '    view\n', '    returns (string memory);\n', '\n', '  /** Function to set the globalTokenSymbol field.\n', '   *  Should throw if called by other than owner.\n', '   */\n', '  function setGlobalTokenSymbol(\n', '    string calldata _symbol\n', '  )\n', '    external;\n', '\n', '}\n', '\n', '// File: contracts/mixins/MixinLockCore.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for core lock data and functions.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinLockCore is\n', '  Ownable,\n', '  MixinFunds,\n', '  MixinDisableAndDestroy\n', '{\n', '  event PriceChanged(\n', '    uint oldKeyPrice,\n', '    uint keyPrice\n', '  );\n', '\n', '  event Withdrawal(\n', '    address indexed sender,\n', '    address indexed beneficiary,\n', '    uint amount\n', '  );\n', '\n', '  // Unlock Protocol address\n', '  // TODO: should we make that private/internal?\n', '  IUnlock public unlockProtocol;\n', '\n', '  // Duration in seconds for which the keys are valid, after creation\n', '  // should we take a smaller type use less gas?\n', '  // TODO: add support for a timestamp instead of duration\n', '  uint public expirationDuration;\n', '\n', '  // price in wei of the next key\n', '  // TODO: allow support for a keyPriceCalculator which could set prices dynamically\n', '  uint public keyPrice;\n', '\n', '  // Max number of keys sold if the keyReleaseMechanism is public\n', '  uint public maxNumberOfKeys;\n', '\n', '  // A count of how many new key purchases there have been\n', '  uint public numberOfKeysSold;\n', '\n', '  // The account which will receive funds on withdrawal\n', '  address public beneficiary;\n', '\n', '  // Ensure that the Lock has not sold all of its keys.\n', '  modifier notSoldOut() {\n', "    require(maxNumberOfKeys > numberOfKeysSold, 'LOCK_SOLD_OUT');\n", '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrBeneficiary()\n', '  {\n', '    require(\n', '      msg.sender == owner() || msg.sender == beneficiary,\n', "      'ONLY_LOCK_OWNER_OR_BENEFICIARY'\n", '    );\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _beneficiary,\n', '    uint _expirationDuration,\n', '    uint _keyPrice,\n', '    uint _maxNumberOfKeys\n', '  ) internal\n', '  {\n', "    require(_expirationDuration <= 100 * 365 * 24 * 60 * 60, 'MAX_EXPIRATION_100_YEARS');\n", "    unlockProtocol = IUnlock(msg.sender); // Make sure we link back to Unlock's smart contract.\n", '    beneficiary = _beneficiary;\n', '    expirationDuration = _expirationDuration;\n', '    keyPrice = _keyPrice;\n', '    maxNumberOfKeys = _maxNumberOfKeys;\n', '  }\n', '\n', '  /**\n', '   * @dev Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.\n', '   * @param _amount specifies the max amount to withdraw, which may be reduced when\n', '   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\n', '   *\n', '   * TODO: consider allowing anybody to trigger this as long as it goes to owner anyway?\n', '   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` use case.\n', '   */\n', '  function withdraw(\n', '    uint _amount\n', '  ) external\n', '    onlyOwnerOrBeneficiary\n', '  {\n', '    uint balance = getBalance(address(this));\n', '    uint amount;\n', '    if(_amount == 0 || _amount > balance)\n', '    {\n', "      require(balance > 0, 'NOT_ENOUGH_FUNDS');\n", '      amount = balance;\n', '    }\n', '    else\n', '    {\n', '      amount = _amount;\n', '    }\n', '\n', '    emit Withdrawal(msg.sender, beneficiary, amount);\n', '    // Security: re-entrancy not a risk as this is the last line of an external function\n', '    _transfer(beneficiary, amount);\n', '  }\n', '\n', '  /**\n', '   * A function which lets the owner of the lock to change the price for future purchases.\n', '   */\n', '  function updateKeyPrice(\n', '    uint _keyPrice\n', '  )\n', '    external\n', '    onlyOwner\n', '    onlyIfAlive\n', '  {\n', '    uint oldKeyPrice = keyPrice;\n', '    keyPrice = _keyPrice;\n', '    emit PriceChanged(oldKeyPrice, keyPrice);\n', '  }\n', '\n', '  /**\n', '   * A function which lets the owner of the lock update the beneficiary account,\n', '   * which receives funds on withdrawal.\n', '   */\n', '  function updateBeneficiary(\n', '    address _beneficiary\n', '  ) external\n', '    onlyOwnerOrBeneficiary\n', '  {\n', "    require(_beneficiary != address(0), 'INVALID_ADDRESS');\n", '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * Public function which returns the total number of unique keys sold (both\n', '   * expired and valid)\n', '   */\n', '  function totalSupply()\n', '    public\n', '    view\n', '    returns (uint)\n', '  {\n', '    return numberOfKeysSold;\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinKeys.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for managing `Key` data.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinKeys is\n', '  Ownable,\n', '  MixinLockCore\n', '{\n', '  // The struct for a key\n', '  struct Key {\n', '    uint tokenId;\n', '    uint expirationTimestamp;\n', '  }\n', '\n', "  // Called when the Lock owner expires a user's Key\n", '  event ExpireKey(uint tokenId);\n', '\n', '  // Keys\n', '  // Each owner can have at most exactly one key\n', '  // TODO: could we use public here? (this could be confusing though because it getter will\n', '  // return 0 values when missing a key)\n', '  mapping (address => Key) private keyByOwner;\n', '\n', '  // Each tokenId can have at most exactly one owner at a time.\n', '  // Returns 0 if the token does not exist\n', '  // TODO: once we decouple tokenId from owner address (incl in js), then we can consider\n', '  // merging this with numberOfKeysSold into an array instead.\n', '  mapping (uint => address) private ownerByTokenId;\n', '\n', '  // Addresses of owners are also stored in an array.\n', '  // Addresses are never removed by design to avoid abuses around referals\n', '  address[] public owners;\n', '\n', '  // Ensures that an owner owns or has owned a key in the past\n', '  modifier ownsOrHasOwnedKey(\n', '    address _owner\n', '  ) {\n', '    require(\n', "      keyByOwner[_owner].expirationTimestamp > 0, 'HAS_NEVER_OWNED_KEY'\n", '    );\n', '    _;\n', '  }\n', '\n', '  // Ensures that an owner has a valid key\n', '  modifier hasValidKey(\n', '    address _owner\n', '  ) {\n', '    require(\n', "      getHasValidKey(_owner), 'KEY_NOT_VALID'\n", '    );\n', '    _;\n', '  }\n', '\n', '  // Ensures that a key has an owner\n', '  modifier isKey(\n', '    uint _tokenId\n', '  ) {\n', '    require(\n', "      ownerByTokenId[_tokenId] != address(0), 'NO_SUCH_KEY'\n", '    );\n', '    _;\n', '  }\n', '\n', '  // Ensure that the caller owns the key\n', '  modifier onlyKeyOwner(\n', '    uint _tokenId\n', '  ) {\n', '    require(\n', "      isKeyOwner(_tokenId, msg.sender), 'ONLY_KEY_OWNER'\n", '    );\n', '    _;\n', '  }\n', '\n', '  /**\n', "   * A function which lets the owner of the lock expire a users' key.\n", '   */\n', '  function expireKeyFor(\n', '    address _owner\n', '  )\n', '    public\n', '    onlyOwner\n', '    hasValidKey(_owner)\n', '  {\n', '    Key storage key = keyByOwner[_owner];\n', '    key.expirationTimestamp = block.timestamp; // Effectively expiring the key\n', '    emit ExpireKey(key.tokenId);\n', '  }\n', '\n', '  /**\n', '   * In the specific case of a Lock, each owner can own only at most 1 key.\n', '   * @return The number of NFTs owned by `_owner`, either 0 or 1.\n', '  */\n', '  function balanceOf(\n', '    address _owner\n', '  )\n', '    external\n', '    view\n', '    returns (uint)\n', '  {\n', "    require(_owner != address(0), 'INVALID_ADDRESS');\n", '    return getHasValidKey(_owner) ? 1 : 0;\n', '  }\n', '\n', '  /**\n', '   * Checks if the user has a non-expired key.\n', '   */\n', '  function getHasValidKey(\n', '    address _owner\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return keyByOwner[_owner].expirationTimestamp > block.timestamp;\n', '  }\n', '\n', '  /**\n', '   * @notice Find the tokenId for a given user\n', '   * @return The tokenId of the NFT, else revert\n', '  */\n', '  function getTokenIdFor(\n', '    address _account\n', '  )\n', '    external\n', '    view\n', '    hasValidKey(_account)\n', '    returns (uint)\n', '  {\n', '    return keyByOwner[_account].tokenId;\n', '  }\n', '\n', ' /**\n', '  * A function which returns a subset of the keys for this Lock as an array\n', '  * @param _page the page of key owners requested when faceted by page size\n', '  * @param _pageSize the number of Key Owners requested per page\n', '  */\n', '  function getOwnersByPage(uint _page, uint _pageSize)\n', '    public\n', '    view\n', '    returns (address[] memory)\n', '  {\n', "    require(owners.length > 0, 'NO_OUTSTANDING_KEYS');\n", '    uint pageSize = _pageSize;\n', '    uint _startIndex = _page * pageSize;\n', '    uint endOfPageIndex;\n', '\n', '    if (_startIndex + pageSize > owners.length) {\n', '      endOfPageIndex = owners.length;\n', '      pageSize = owners.length - _startIndex;\n', '    } else {\n', '      endOfPageIndex = (_startIndex + pageSize);\n', '    }\n', '\n', '    // new temp in-memory array to hold pageSize number of requested owners:\n', '    address[] memory ownersByPage = new address[](pageSize);\n', '    uint pageIndex = 0;\n', '\n', '    // Build the requested set of owners into a new temporary array:\n', '    for (uint i = _startIndex; i < endOfPageIndex; i++) {\n', '      ownersByPage[pageIndex] = owners[i];\n', '      pageIndex++;\n', '    }\n', '\n', '    return ownersByPage;\n', '  }\n', '\n', '  /**\n', '   * Checks if the given address owns the given tokenId.\n', '   */\n', '  function isKeyOwner(\n', '    uint _tokenId,\n', '    address _owner\n', '  ) public view\n', '    returns (bool)\n', '  {\n', '    return ownerByTokenId[_tokenId] == _owner;\n', '  }\n', '\n', '  /**\n', "  * @dev Returns the key's ExpirationTimestamp field for a given owner.\n", '  * @param _owner address of the user for whom we search the key\n', '  */\n', '  function keyExpirationTimestampFor(\n', '    address _owner\n', '  )\n', '    public view\n', '    ownsOrHasOwnedKey(_owner)\n', '    returns (uint timestamp)\n', '  {\n', '    return keyByOwner[_owner].expirationTimestamp;\n', '  }\n', '\n', '  /**\n', '   * Public function which returns the total number of unique owners (both expired\n', '   * and valid).  This may be larger than totalSupply.\n', '   */\n', '  function numberOfOwners()\n', '    public\n', '    view\n', '    returns (uint)\n', '  {\n', '    return owners.length;\n', '  }\n', '\n', '  /**\n', '   * @notice ERC721: Find the owner of an NFT\n', '   * @return The address of the owner of the NFT, if applicable\n', '  */\n', '  function ownerOf(\n', '    uint _tokenId\n', '  )\n', '    public view\n', '    isKey(_tokenId)\n', '    returns (address)\n', '  {\n', '    return ownerByTokenId[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * Assigns the key a new tokenId (from numberOfKeysSold) if it does not already have\n', '   * one assigned.\n', '   */\n', '  function _assignNewTokenId(\n', '    Key storage _key\n', '  ) internal\n', '  {\n', '    if (_key.tokenId == 0) {\n', '      // This is a brand new owner, else an owner of an expired key buying an extension.\n', '      // We increment the tokenId counter\n', '      numberOfKeysSold++;\n', '      // we assign the incremented `numberOfKeysSold` as the tokenId for the new key\n', '      _key.tokenId = numberOfKeysSold;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Records the owner of a given tokenId\n', '   */\n', '  function _recordOwner(\n', '    address _owner,\n', '    uint _tokenId\n', '  ) internal\n', '  {\n', '    if (ownerByTokenId[_tokenId] != _owner) {\n', '      // TODO: this may include duplicate entries\n', '      owners.push(_owner);\n', '      // We register the owner of the tokenID\n', '      ownerByTokenId[_tokenId] = _owner;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Returns the Key struct for the given owner.\n', '   */\n', '  function _getKeyFor(\n', '    address _owner\n', '  ) internal view\n', '    returns (Key storage)\n', '  {\n', '    return keyByOwner[_owner];\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinApproval.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for the Approval related functions needed to meet the ERC721\n', ' * standard.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinApproval is\n', '  IERC721,\n', '  MixinDisableAndDestroy,\n', '  MixinKeys\n', '{\n', '  // Keeping track of approved transfers\n', '  // This is a mapping of addresses which have approved\n', '  // the transfer of a key to another address where their key can be transfered\n', '  // Note: the approver may actually NOT have a key... and there can only\n', '  // be a single approved beneficiary\n', '  // Note 2: for transfer, both addresses will be different\n', '  // Note 3: for sales (new keys on restricted locks), both addresses will be the same\n', '  mapping (uint => address) private approved;\n', '\n', '  // Keeping track of approved operators for a Key owner.\n', '  // Since an owner can have up to 1 Key, this is similiar to above\n', '  // but the approval does not reset when a transfer occurs.\n', '  mapping (address => mapping (address => bool)) private ownerToOperatorApproved;\n', '\n', '  // Ensure that the caller has a key\n', '  // or that the caller has been approved\n', '  // for ownership of that key\n', '  modifier onlyKeyOwnerOrApproved(\n', '    uint _tokenId\n', '  ) {\n', '    require(\n', '      isKeyOwner(_tokenId, msg.sender) ||\n', '        _isApproved(_tokenId, msg.sender) ||\n', '        isApprovedForAll(ownerOf(_tokenId), msg.sender),\n', "      'ONLY_KEY_OWNER_OR_APPROVED');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * This approves _approved to get ownership of _tokenId.\n', '   * Note: that since this is used for both purchase and transfer approvals\n', '   * the approved token may not exist.\n', '   */\n', '  function approve(\n', '    address _approved,\n', '    uint _tokenId\n', '  )\n', '    external\n', '    payable\n', '    onlyIfAlive\n', '    onlyKeyOwnerOrApproved(_tokenId)\n', '  {\n', "    require(msg.sender != _approved, 'APPROVE_SELF');\n", '\n', '    approved[_tokenId] = _approved;\n', '    emit Approval(ownerOf(_tokenId), _approved, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(\n', '    address _to,\n', '    bool _approved\n', '  ) external\n', '    onlyIfAlive\n', '  {\n', "    require(_to != msg.sender, 'APPROVE_SELF');\n", '    ownerToOperatorApproved[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * external version\n', '   * Will return the approved recipient for a key, if any.\n', '   */\n', '  function getApproved(\n', '    uint _tokenId\n', '  )\n', '    external\n', '    view\n', '    returns (address)\n', '  {\n', '    return _getApproved(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  ) public view\n', '    returns (bool)\n', '  {\n', '    return ownerToOperatorApproved[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Checks if the given user is approved to transfer the tokenId.\n', '   */\n', '  function _isApproved(\n', '    uint _tokenId,\n', '    address _user\n', '  ) internal view\n', '    returns (bool)\n', '  {\n', '    return approved[_tokenId] == _user;\n', '  }\n', '\n', '  /**\n', '   * Will return the approved recipient for a key transfer or ownership.\n', '   * Note: this does not check that a corresponding key\n', '   * actually exists.\n', '   */\n', '  function _getApproved(\n', '    uint _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (address)\n', '  {\n', '    address approvedRecipient = approved[_tokenId];\n', "    require(approvedRecipient != address(0), 'NONE_APPROVED');\n", '    return approvedRecipient;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to clear current approval of a given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(\n', '    uint256 _tokenId\n', '  ) internal\n', '  {\n', '    if (approved[_tokenId] != address(0)) {\n', '      approved[_tokenId] = address(0);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinGrantKeys.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin allowing the Lock owner to grant / gift keys to users.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinGrantKeys is\n', '  IERC721,\n', '  Ownable,\n', '  MixinKeys\n', '{\n', '  /**\n', '   * Allows the Lock owner to give a user a key with no charge.\n', '   */\n', '  function grantKey(\n', '    address _recipient,\n', '    uint _expirationTimestamp\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    _grantKey(_recipient, _expirationTimestamp);\n', '  }\n', '\n', '  /**\n', '   * Allows the Lock owner to give a collection of users a key with no charge.\n', '   * All keys granted have the same expiration date.\n', '   */\n', '  function grantKeys(\n', '    address[] calldata _recipients,\n', '    uint _expirationTimestamp\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    for(uint i = 0; i < _recipients.length; i++) {\n', '      _grantKey(_recipients[i], _expirationTimestamp);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allows the Lock owner to give a collection of users a key with no charge.\n', '   * Each key may be assigned a different expiration date.\n', '   */\n', '  function grantKeys(\n', '    address[] calldata _recipients,\n', '    uint[] calldata _expirationTimestamps\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    for(uint i = 0; i < _recipients.length; i++) {\n', '      _grantKey(_recipients[i], _expirationTimestamps[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Give a key to the given user\n', '   */\n', '  function _grantKey(\n', '    address _recipient,\n', '    uint _expirationTimestamp\n', '  ) private\n', '  {\n', "    require(_recipient != address(0), 'INVALID_ADDRESS');\n", '\n', '    Key storage toKey = _getKeyFor(_recipient);\n', "    require(_expirationTimestamp > toKey.expirationTimestamp, 'ALREADY_OWNS_KEY');\n", '\n', '    _assignNewTokenId(toKey);\n', '    _recordOwner(_recipient, toKey.tokenId);\n', '    toKey.expirationTimestamp = _expirationTimestamp;\n', '\n', '    // trigger event\n', '    emit Transfer(\n', '      address(0), // This is a creation.\n', '      _recipient,\n', '      toKey.tokenId\n', '    );\n', '  }\n', '}\n', '\n', '// File: contracts/UnlockUtils.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '// This contract provides some utility methods for use with the unlock protocol smart contracts.\n', '// Borrowed from:\n', '// https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L943\n', '\n', 'contract UnlockUtils {\n', '\n', '  function strConcat(\n', '    string memory _a,\n', '    string memory _b,\n', '    string memory _c,\n', '    string memory _d\n', '  ) public\n', '    pure\n', '    returns (string memory _concatenatedString)\n', '  {\n', '    bytes memory _ba = bytes(_a);\n', '    bytes memory _bb = bytes(_b);\n', '    bytes memory _bc = bytes(_c);\n', '    bytes memory _bd = bytes(_d);\n', '    string memory abcd = new string(_ba.length + _bb.length + _bc.length + _bd.length);\n', '    bytes memory babcd = bytes(abcd);\n', '    uint k = 0;\n', '    uint i = 0;\n', '    for (i = 0; i < _ba.length; i++) {\n', '      babcd[k++] = _ba[i];\n', '    }\n', '    for (i = 0; i < _bb.length; i++) {\n', '      babcd[k++] = _bb[i];\n', '    }\n', '    for (i = 0; i < _bc.length; i++) {\n', '      babcd[k++] = _bc[i];\n', '    }\n', '    for (i = 0; i < _bd.length; i++) {\n', '      babcd[k++] = _bd[i];\n', '    }\n', '    return string(babcd);\n', '  }\n', '\n', '  function uint2Str(\n', '    uint _i\n', '  ) public\n', '    pure\n', '    returns (string memory _uintAsString)\n', '  {\n', '    // make a copy of the param to avoid security/no-assign-params error\n', '    uint c = _i;\n', '    if (_i == 0) {\n', "      return '0';\n", '    }\n', '    uint j = _i;\n', '    uint len;\n', '    while (j != 0) {\n', '      len++;\n', '      j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(len);\n', '    uint k = len - 1;\n', '    while (c != 0) {\n', '      bstr[k--] = byte(uint8(48 + c % 10));\n', '      c /= 10;\n', '    }\n', '    return string(bstr);\n', '  }\n', '\n', '  function address2Str(\n', '    address _addr\n', '  ) public\n', '    pure\n', '    returns(string memory)\n', '  {\n', '    bytes32 value = bytes32(uint256(_addr));\n', "    bytes memory alphabet = '0123456789abcdef';\n", '    bytes memory str = new bytes(42);\n', "    str[0] = '0';\n", "    str[1] = 'x';\n", '    for (uint i = 0; i < 20; i++) {\n', '      str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\n', '      str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\n', '    }\n', '    return string(str);\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinLockMetadata.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for metadata about the Lock.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinLockMetadata is\n', '  IERC721,\n', '  ERC165,\n', '  Ownable,\n', '  MixinLockCore,\n', '  UnlockUtils,\n', '  MixinKeys\n', '{\n', '  /// A descriptive name for a collection of NFTs in this contract.Defaults to "Unlock-Protocol" but is settable by lock owner\n', '  string private lockName;\n', '\n', '  /// An abbreviated name for NFTs in this contract. Defaults to "KEY" but is settable by lock owner\n', '  string private lockSymbol;\n', '\n', '  // the base Token URI for this Lock. If not set by lock owner, the global URI stored in Unlock is used.\n', '  string private baseTokenURI;\n', '\n', '  event NewLockSymbol(\n', '    string symbol\n', '  );\n', '\n', '  constructor(\n', '    string memory _lockName\n', '  ) internal\n', '  {\n', '    lockName = _lockName;\n', '    // registering the optional erc721 metadata interface with ERC165.sol using\n', '    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\n', '    _registerInterface(0x5b5e139f);\n', '  }\n', '\n', '  /**\n', '   * Allows the Lock owner to assign a descriptive name for this Lock.\n', '   */\n', '  function updateLockName(\n', '    string calldata _lockName\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    lockName = _lockName;\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the token name\n', '    * @return string representing the token name\n', '    */\n', '  function name(\n', '  ) external view\n', '    returns (string memory)\n', '  {\n', '    return lockName;\n', '  }\n', '\n', '  /**\n', '   * Allows the Lock owner to assign a Symbol for this Lock.\n', '   */\n', '  function updateLockSymbol(\n', '    string calldata _lockSymbol\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    lockSymbol = _lockSymbol;\n', '    emit NewLockSymbol(_lockSymbol);\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the token symbol\n', '    * @return string representing the token name\n', '    */\n', '  function symbol()\n', '    external view\n', '    returns(string memory)\n', '  {\n', '    if(bytes(lockSymbol).length == 0) {\n', '      return unlockProtocol.getGlobalTokenSymbol();\n', '    } else {\n', '      return lockSymbol;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allows the Lock owner to update the baseTokenURI for this Lock.\n', '   */\n', '  function setBaseTokenURI(\n', '    string calldata _baseTokenURI\n', '  ) external\n', '    onlyOwner\n', '  {\n', '    baseTokenURI = _baseTokenURI;\n', '  }\n', '\n', '  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n', '   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n', '   *  3986. The URI may point to a JSON file that conforms to the "ERC721\n', '   *  Metadata JSON Schema".\n', '   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '   */\n', '  function tokenURI(\n', '    uint256 _tokenId\n', '  ) external\n', '    view\n', '    isKey(_tokenId)\n', '    returns(string memory)\n', '  {\n', '    string memory URI;\n', '    if(bytes(baseTokenURI).length == 0) {\n', '      URI = unlockProtocol.getGlobalBaseTokenURI();\n', '    } else {\n', '      URI = baseTokenURI;\n', '    }\n', '\n', '    return UnlockUtils.strConcat(\n', '      URI,\n', '      UnlockUtils.address2Str(address(this)),\n', "      '/',\n", '      UnlockUtils.uint2Str(_tokenId)\n', '    );\n', '  }\n', '}\n', '\n', '// File: contracts/mixins/MixinNoFallback.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '/**\n', ' * @title Mixin for the fallback function implementation, which simply reverts.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinNoFallback\n', '{\n', '  /**\n', '   * @dev the fallback function should not be used.  This explicitly reverts\n', "   * to ensure it's never used.\n", '   */\n', '  function()\n', '    external\n', '  {\n', "    revert('NO_FALLBACK');\n", '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/mixins/MixinPurchase.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for the purchase-related functions.\n', ' * @author HardlyDifficult\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', 'contract MixinPurchase is\n', '  MixinFunds,\n', '  MixinDisableAndDestroy,\n', '  MixinLockCore,\n', '  MixinKeys\n', '{\n', '  using SafeMath for uint;\n', '\n', '  /**\n', '  * @dev Purchase function, public version, with no referrer.\n', '  * @param _recipient address of the recipient of the purchased key\n', '  */\n', '  function purchaseFor(\n', '    address _recipient\n', '  )\n', '    external\n', '    payable\n', '    onlyIfAlive\n', '  {\n', '    return _purchaseFor(_recipient, address(0));\n', '  }\n', '\n', '  /**\n', '  * @dev Purchase function, public version, with referrer.\n', '  * @param _recipient address of the recipient of the purchased key\n', '  * @param _referrer address of the user making the referral\n', '  */\n', '  function purchaseForFrom(\n', '    address _recipient,\n', '    address _referrer\n', '  )\n', '    external\n', '    payable\n', '    onlyIfAlive\n', '    hasValidKey(_referrer)\n', '  {\n', '    return _purchaseFor(_recipient, _referrer);\n', '  }\n', '\n', '  /**\n', '  * @dev Purchase function: this lets a user purchase a key from the lock for another user\n', '  * @param _recipient address of the recipient of the purchased key\n', '  * This will fail if\n', '  *  - the keyReleaseMechanism is private\n', '  *  - the keyReleaseMechanism is Approved and the recipient has not been previously approved\n', '  *  - the amount value is smaller than the price\n', '  *  - the recipient already owns a key\n', '  * TODO: next version of solidity will allow for message to be added to require.\n', '  */\n', '  function _purchaseFor(\n', '    address _recipient,\n', '    address _referrer\n', '  )\n', '    private\n', '    notSoldOut()\n', '  { // solhint-disable-line function-max-lines\n', "    require(_recipient != address(0), 'INVALID_ADDRESS');\n", '\n', "    // Let's get the actual price for the key from the Unlock smart contract\n", '    uint discount;\n', '    uint tokens;\n', '    uint inMemoryKeyPrice = keyPrice;\n', '    (discount, tokens) = unlockProtocol.computeAvailableDiscountFor(_recipient, inMemoryKeyPrice);\n', '    uint netPrice = inMemoryKeyPrice;\n', '    if (discount > inMemoryKeyPrice) {\n', '      netPrice = 0;\n', '    } else {\n', '      // SafeSub not required as the if statement already confirmed `inMemoryKeyPrice - discount` cannot underflow\n', '      netPrice = inMemoryKeyPrice - discount;\n', '    }\n', '\n', '    // Assign the key\n', '    Key storage toKey = _getKeyFor(_recipient);\n', '\n', '    if (toKey.tokenId == 0) {\n', '      // Assign a new tokenId (if a new owner or previously transfered)\n', '      _assignNewTokenId(toKey);\n', '      _recordOwner(_recipient, toKey.tokenId);\n', '    }\n', '\n', '    if (toKey.expirationTimestamp >= block.timestamp) {\n', '      // This is an existing owner trying to extend their key\n', '      toKey.expirationTimestamp = toKey.expirationTimestamp.add(expirationDuration);\n', '    } else {\n', '      // SafeAdd is not required here since expirationDuration is capped to a tiny value\n', '      // (relative to the size of a uint)\n', '      toKey.expirationTimestamp = block.timestamp + expirationDuration;\n', '    }\n', '\n', '    if (discount > 0) {\n', '      unlockProtocol.recordConsumedDiscount(discount, tokens);\n', '    }\n', '\n', '    unlockProtocol.recordKeyPurchase(netPrice, _referrer);\n', '\n', '    // trigger event\n', '    emit Transfer(\n', '      address(0), // This is a creation.\n', '      _recipient,\n', '      numberOfKeysSold\n', '    );\n', '\n', "    // We explicitly allow for greater amounts of ETH to allow 'donations'\n", '    // Security: last line to minimize risk of re-entrancy\n', '    _chargeAtLeast(netPrice);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * (.note) This call _does not revert_ if the signature is invalid, or\n', '     * if the signer is otherwise unable to be retrieved. In those scenarios,\n', '     * the zero address is returned.\n', '     *\n', '     * (.warning) `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise)\n', '     * be too long), and then calling `toEthSignedMessageHash` on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n', '            return address(0);\n', '        }\n', '\n', '        if (v != 27 && v != 28) {\n', '            return address(0);\n', '        }\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\n', '     * JSON-RPC method.\n', '     *\n', '     * See `recover`.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts/mixins/MixinRefunds.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MixinRefunds is\n', '  Ownable,\n', '  MixinFunds,\n', '  MixinLockCore,\n', '  MixinKeys\n', '{\n', '  using SafeMath for uint;\n', '\n', '  // CancelAndRefund will return funds based on time remaining minus this penalty.\n', '  // This is calculated as `proRatedRefund * refundPenaltyNumerator / refundPenaltyDenominator`.\n', '  uint public refundPenaltyNumerator = 1;\n', '  uint public refundPenaltyDenominator = 10;\n', '\n', '  // Stores a nonce per user to use for signed messages\n', '  mapping(address => uint) public keyOwnerToNonce;\n', '\n', '  event CancelKey(\n', '    uint indexed tokenId,\n', '    address indexed owner,\n', '    address indexed sendTo,\n', '    uint refund\n', '  );\n', '\n', '  event RefundPenaltyChanged(\n', '    uint oldRefundPenaltyNumerator,\n', '    uint oldRefundPenaltyDenominator,\n', '    uint refundPenaltyNumerator,\n', '    uint refundPenaltyDenominator\n', '  );\n', '\n', '  /**\n', "   * @dev Destroys the user's key and sends a refund based on the amount of time remaining.\n", '   */\n', '  function cancelAndRefund()\n', '    external\n', '  {\n', '    _cancelAndRefund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Cancels a key owned by a different user and sends the funds to the msg.sender.\n', "   * @param _keyOwner this user's key will be canceled\n", '   * @param _signature getCancelAndRefundApprovalHash signed by the _keyOwner\n', '   */\n', '  function cancelAndRefundFor(\n', '    address _keyOwner,\n', '    bytes calldata _signature\n', '  ) external\n', '  {\n', '    require(\n', '      ECDSA.recover(\n', '        ECDSA.toEthSignedMessageHash(\n', '          getCancelAndRefundApprovalHash(_keyOwner, msg.sender)\n', '        ),\n', '        _signature\n', "      ) == _keyOwner, 'INVALID_SIGNATURE'\n", '    );\n', '\n', '    keyOwnerToNonce[_keyOwner]++;\n', '    _cancelAndRefund(_keyOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Increments the current nonce for the msg.sender.\n', '   * This can be used to invalidate a previously signed message.\n', '   */\n', '  function incrementNonce(\n', '  ) external\n', '  {\n', '    keyOwnerToNonce[msg.sender]++;\n', '  }\n', '\n', '  /**\n', '   * Allow the owner to change the refund penalty.\n', '   */\n', '  function updateRefundPenalty(\n', '    uint _refundPenaltyNumerator,\n', '    uint _refundPenaltyDenominator\n', '  )\n', '    external\n', '    onlyOwner\n', '  {\n', "    require(_refundPenaltyDenominator != 0, 'INVALID_RATE');\n", '\n', '    emit RefundPenaltyChanged(\n', '      refundPenaltyNumerator,\n', '      refundPenaltyDenominator,\n', '      _refundPenaltyNumerator,\n', '      _refundPenaltyDenominator\n', '    );\n', '    refundPenaltyNumerator = _refundPenaltyNumerator;\n', '    refundPenaltyDenominator = _refundPenaltyDenominator;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how much of a refund a key owner would receive if they issued\n', '   * a cancelAndRefund block.timestamp.\n', '   * Note that due to the time required to mine a tx, the actual refund amount will be lower\n', '   * than what the user reads from this call.\n', '   */\n', '  function getCancelAndRefundValueFor(\n', '    address _owner\n', '  )\n', '    external view\n', '    returns (uint refund)\n', '  {\n', '    return _getCancelAndRefundValue(_owner);\n', '  }\n', '\n', '  /**\n', '   * @dev returns the hash to sign in order to allow another user to cancel on your behalf.\n', '   */\n', '  function getCancelAndRefundApprovalHash(\n', '    address _keyOwner,\n', '    address _txSender\n', '  ) public view\n', '    returns (bytes32 approvalHash)\n', '  {\n', '    return keccak256(\n', '      abi.encodePacked(\n', '        // Approval is specific to this Lock\n', '        address(this),\n', '        // Approval enables only one cancel call\n', '        keyOwnerToNonce[_keyOwner],\n', '        // Approval allows only one account to broadcast the tx\n', '        _txSender\n', '      )\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev cancels the key for the given keyOwner and sends the refund to the msg.sender.\n', '   */\n', '  function _cancelAndRefund(\n', '    address _keyOwner\n', '  ) internal\n', '  {\n', '    Key storage key = _getKeyFor(_keyOwner);\n', '\n', '    uint refund = _getCancelAndRefundValue(_keyOwner);\n', '\n', '    emit CancelKey(key.tokenId, _keyOwner, msg.sender, refund);\n', '    // expirationTimestamp is a proxy for hasKey, setting this to `block.timestamp` instead\n', '    // of 0 so that we can still differentiate hasKey from hasValidKey.\n', '    key.expirationTimestamp = block.timestamp;\n', '\n', '    if (refund > 0) {\n', '      // Security: doing this last to avoid re-entrancy concerns\n', '      _transfer(msg.sender, refund);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how much of a refund a key owner would receive if they issued\n', '   * a cancelAndRefund now.\n', '   * @param _owner The owner of the key check the refund value for.\n', '   */\n', '  function _getCancelAndRefundValue(\n', '    address _owner\n', '  )\n', '    private view\n', '    hasValidKey(_owner)\n', '    returns (uint refund)\n', '  {\n', '    Key storage key = _getKeyFor(_owner);\n', '    // Math: safeSub is not required since `hasValidKey` confirms timeRemaining is positive\n', '    uint timeRemaining = key.expirationTimestamp - block.timestamp;\n', '    if(timeRemaining >= expirationDuration) {\n', '      refund = keyPrice;\n', '    } else {\n', '      // Math: using safeMul in case keyPrice or timeRemaining is very large\n', '      refund = keyPrice.mul(timeRemaining) / expirationDuration;\n', '    }\n', '    uint penalty = keyPrice.mul(refundPenaltyNumerator) / refundPenaltyDenominator;\n', '    if (refund > penalty) {\n', "      // Math: safeSub is not required since the if confirms this won't underflow\n", '      refund -= penalty;\n', '    } else {\n', '      refund = 0;\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: contracts/mixins/MixinTransfer.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mixin for the transfer-related functions needed to meet the ERC721\n', ' * standard.\n', ' * @author Nick Furfaro\n', ' * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\n', ' * separates logically groupings of code to ease readability.\n', ' */\n', '\n', 'contract MixinTransfer is\n', '  MixinFunds,\n', '  MixinLockCore,\n', '  MixinKeys,\n', '  MixinApproval\n', '{\n', '  using SafeMath for uint;\n', '  using Address for address;\n', '\n', '  event TransferFeeChanged(\n', '    uint oldTransferFeeNumerator,\n', '    uint oldTransferFeeDenominator,\n', '    uint transferFeeNumerator,\n', '    uint transferFeeDenominator\n', '  );\n', '\n', "  // 0x150b7a02 == bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))\n", '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // The fee relative to keyPrice to charge when transfering a Key to another account\n', '  // (potentially on a 0x marketplace).\n', '  // This is calculated as `keyPrice * transferFeeNumerator / transferFeeDenominator`.\n', '  uint public transferFeeNumerator = 0;\n', '  uint public transferFeeDenominator = 100;\n', '\n', '  /**\n', '   * This is payable because at some point we want to allow the LOCK to capture a fee on 2ndary\n', '   * market transactions...\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _recipient,\n', '    uint _tokenId\n', '  )\n', '    public\n', '    payable\n', '    onlyIfAlive\n', '    hasValidKey(_from)\n', '    onlyKeyOwnerOrApproved(_tokenId)\n', '  {\n', "    require(_recipient != address(0), 'INVALID_ADDRESS');\n", '    _chargeAtLeast(getTransferFee(_from));\n', '\n', '    Key storage fromKey = _getKeyFor(_from);\n', '    Key storage toKey = _getKeyFor(_recipient);\n', '\n', '    uint previousExpiration = toKey.expirationTimestamp;\n', '\n', '    if (toKey.tokenId == 0) {\n', '      toKey.tokenId = fromKey.tokenId;\n', '      _recordOwner(_recipient, toKey.tokenId);\n', '    }\n', '\n', '    if (previousExpiration <= block.timestamp) {\n', '      // The recipient did not have a key, or had a key but it expired. The new expiration is the\n', "      // sender's key expiration\n", "      // an expired key is no longer a valid key, so the new tokenID is the sender's tokenID\n", '      toKey.expirationTimestamp = fromKey.expirationTimestamp;\n', '      toKey.tokenId = fromKey.tokenId;\n', '      _recordOwner(_recipient, _tokenId);\n', '    } else {\n', '      // The recipient has a non expired key. We just add them the corresponding remaining time\n', '      // SafeSub is not required since the if confirms `previousExpiration - block.timestamp` cannot underflow\n', '      toKey.expirationTimestamp = fromKey\n', '        .expirationTimestamp.add(previousExpiration - block.timestamp);\n', '    }\n', '\n', '    // Effectively expiring the key for the previous owner\n', '    fromKey.expirationTimestamp = block.timestamp;\n', '\n', '    // Set the tokenID to 0 for the previous owner to avoid duplicates\n', '    fromKey.tokenId = 0;\n', '\n', '    // Clear any previous approvals\n', '    _clearApproval(_tokenId);\n', '\n', '    // trigger event\n', '    emit Transfer(\n', '      _from,\n', '      _recipient,\n', '      _tokenId\n', '    );\n', '  }\n', '\n', '  /**\n', '  * @notice Transfers the ownership of an NFT from one address to another address\n', '  * @dev This works identically to the other function with an extra data parameter,\n', "  *  except this function just sets data to ''\n", '  * @param _from The current owner of the NFT\n', '  * @param _to The new owner\n', '  * @param _tokenId The NFT to transfer\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _tokenId\n', '  )\n', '    external\n', '    payable\n', '  {\n', "    safeTransferFrom(_from, _to, _tokenId, '');\n", '  }\n', '\n', '  /**\n', '  * @notice Transfers the ownership of an NFT from one address to another address.\n', '  * When transfer is complete, this functions\n', '  *  checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '  *  `onERC721Received` on `_to` and throws if the return value is not\n', "  *  `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\n", '  * @param _from The current owner of the NFT\n', '  * @param _to The new owner\n', '  * @param _tokenId The NFT to transfer\n', '  * @param _data Additional data with no specified format, sent in call to `_to`\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _tokenId,\n', '    bytes memory _data\n', '  )\n', '    public\n', '    payable\n', '    onlyIfAlive\n', '    onlyKeyOwnerOrApproved(_tokenId)\n', '    hasValidKey(ownerOf(_tokenId))\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', "    require(_checkOnERC721Received(_from, _to, _tokenId, _data), 'NON_COMPLIANT_ERC721_RECEIVER');\n", '\n', '  }\n', '\n', '  /**\n', '   * Allow the Lock owner to change the transfer fee.\n', '   */\n', '  function updateTransferFee(\n', '    uint _transferFeeNumerator,\n', '    uint _transferFeeDenominator\n', '  )\n', '    external\n', '    onlyOwner\n', '  {\n', "    require(_transferFeeDenominator != 0, 'INVALID_RATE');\n", '    emit TransferFeeChanged(\n', '      transferFeeNumerator,\n', '      transferFeeDenominator,\n', '      _transferFeeNumerator,\n', '      _transferFeeDenominator\n', '    );\n', '    transferFeeNumerator = _transferFeeNumerator;\n', '    transferFeeDenominator = _transferFeeDenominator;\n', '  }\n', '\n', '  /**\n', '   * Determines how much of a fee a key owner would need to pay in order to\n', '   * transfer the key to another account.  This is pro-rated so the fee goes down\n', '   * overtime.\n', '   * @param _owner The owner of the key check the transfer fee for.\n', '   */\n', '  function getTransferFee(\n', '    address _owner\n', '  )\n', '    public view\n', '    hasValidKey(_owner)\n', '    returns (uint)\n', '  {\n', '    Key storage key = _getKeyFor(_owner);\n', '    // Math: safeSub is not required since `hasValidKey` confirms timeRemaining is positive\n', '    uint timeRemaining = key.expirationTimestamp - block.timestamp;\n', '    uint fee;\n', '    if(timeRemaining >= expirationDuration) {\n', '      // Max the potential impact of this fee for keys with long durations remaining\n', '      fee = keyPrice;\n', '    } else {\n', '      // Math: using safeMul in case keyPrice or timeRemaining is very large\n', '      fee = keyPrice.mul(timeRemaining) / expirationDuration;\n', '    }\n', '    return fee.mul(transferFeeNumerator) / transferFeeDenominator;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkOnERC721Received(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes memory _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/PublicLock.sol\n', '\n', 'pragma solidity 0.5.9;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title The Lock contract\n', ' * @author Julien Genestoux (unlock-protocol.com)\n', ' * Eventually: implement ERC721.\n', ' * @dev ERC165 allows our contract to be queried to determine whether it implements a given interface.\n', ' * Every ERC-721 compliant contract must implement the ERC165 interface.\n', ' * https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract PublicLock is\n', '  IERC721,\n', '  MixinNoFallback,\n', '  ERC165,\n', '  Ownable,\n', '  ERC721Holder,\n', '  MixinFunds,\n', '  MixinDisableAndDestroy,\n', '  MixinLockCore,\n', '  MixinKeys,\n', '  MixinLockMetadata,\n', '  MixinGrantKeys,\n', '  MixinPurchase,\n', '  MixinApproval,\n', '  MixinTransfer,\n', '  MixinRefunds\n', '{\n', '  constructor(\n', '    address _owner,\n', '    uint _expirationDuration,\n', '    address _tokenAddress,\n', '    uint _keyPrice,\n', '    uint _maxNumberOfKeys,\n', '    string memory _lockName\n', '  )\n', '    public\n', '    MixinFunds(_tokenAddress)\n', '    MixinLockCore(_owner, _expirationDuration, _keyPrice, _maxNumberOfKeys)\n', '    MixinLockMetadata(_lockName)\n', '  {\n', '    // registering the interface for erc721 with ERC165.sol using\n', '    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\n', '    _registerInterface(0x80ac58cd);\n', '    // We must manually initialize Ownable.sol\n', '    Ownable.initialize(_owner);\n', '  }\n', '\n', '  // The version number of the current implementation on this network\n', '  function publicLockVersion(\n', '  ) external pure\n', '    returns (uint16)\n', '  {\n', '    return 4;\n', '  }\n', '}']