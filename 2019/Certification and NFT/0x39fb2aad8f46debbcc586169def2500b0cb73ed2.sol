['pragma solidity ^0.5.0;\n', '\n', 'interface TeamInterface {\n', '\n', '    function isOwner() external view returns (bool);\n', '\n', '    function isAdmin(address _sender) external view returns (bool);\n', '\n', '    function isDev(address _sender) external view returns (bool);\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Platform Contract\n', ' * @dev http://www.puzzlebid.com/\n', ' * @author PuzzleBID Game Team \n', ' * @dev Simon<<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3a4c4953484342577a0b0c0914595557">[email&#160;protected]</a>>\n', ' */\n', 'contract Platform {\n', '\n', '    using SafeMath for *;\n', '    uint256 allTurnover; \n', '    mapping(bytes32 => uint256) turnover; \n', '    \n', '    address payable private foundAddress; \n', '    TeamInterface private team; \n', '\n', '    constructor(address payable _foundAddress, address _teamAddress) public {\n', '        require(\n', '            _foundAddress != address(0) &&\n', '            _teamAddress != address(0)\n', '        );\n', '        foundAddress = _foundAddress;\n', '        team = TeamInterface(_teamAddress);\n', '    }\n', '\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    event OnUpgrade(address indexed _teamAddress);\n', '    event OnDeposit(bytes32 _worksID, address indexed _address, uint256 _amount); \n', '    event OnUpdateTurnover(bytes32 _worksID, uint256 _amount);\n', '    event OnUpdateAllTurnover(uint256 _amount);\n', '    event OnUpdateFoundAddress(address indexed _sender, address indexed _address);\n', '    event OnTransferTo(address indexed _receiver, uint256 _amount);\n', '\n', '    modifier onlyAdmin() {\n', '        require(team.isAdmin(msg.sender));\n', '        _;\n', '    }\n', '    modifier onlyDev() {\n', '        require(team.isDev(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function upgrade(address _teamAddress) external onlyAdmin() {\n', '        require(_teamAddress != address(0));\n', '        team = TeamInterface(_teamAddress);\n', '        emit OnUpgrade(_teamAddress);\n', '    }\n', '\n', '\n', '\n', '    function getAllTurnover() external view returns (uint256) {\n', '        return allTurnover;\n', '    }\n', '\n', '    function getTurnover(bytes32 _worksID) external view returns (uint256) {\n', '        return turnover[_worksID];\n', '    }\n', '\n', '    function updateAllTurnover(uint256 _amount) external onlyDev() {\n', '        allTurnover = allTurnover.add(_amount); \n', '        emit OnUpdateAllTurnover(_amount);\n', '    }   \n', '\n', '    function updateTurnover(bytes32 _worksID, uint256 _amount) external onlyDev() {\n', '        turnover[_worksID] = turnover[_worksID].add(_amount); \n', '        emit OnUpdateTurnover(_worksID, _amount);\n', '    }\n', '\n', '    function updateFoundAddress(address payable _foundAddress) external onlyAdmin() {\n', '        foundAddress = _foundAddress;\n', '        emit OnUpdateFoundAddress(msg.sender, _foundAddress);\n', '    }\n', '\n', '    function deposit(bytes32 _worksID) external payable {\n', '        require(_worksID != bytes32(0)); \n', '        emit OnDeposit(_worksID, msg.sender, msg.value);\n', '    }\n', '\n', '    function transferTo(address payable _receiver, uint256 _amount) external onlyDev() {\n', '        require(_amount <= address(this).balance);\n', '        _receiver.transfer(_amount);\n', '        emit OnTransferTo(_receiver, _amount);\n', '    }\n', '\n', '    function getFoundAddress() external view returns (address payable) {\n', '        return foundAddress;\n', '    }\n', '\n', '    function balances() external view onlyDev() returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '}']