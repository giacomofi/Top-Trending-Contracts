['pragma solidity 0.4.12;\n', '\n', 'contract ERC20TokenInterface {\n', '\n', '    /// @return The total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract SmartEnergyToken is ERC20TokenInterface {\n', '\n', '  //// Constants ////\n', "  string public constant name = 'Smart Energy';\n", '  uint256 public constant decimals = 6;\n', "  string public constant symbol = 'SET';\n", "  string public constant version = '1.0';\n", "  string public constant note = 'Blockchain for Energy';\n", '\n', '  // One billion coins, each divided to up to 10^decimals units.\n', '  uint256 private constant totalTokens = 1000000000 * (10 ** decimals);\n', '\n', '  mapping (address => uint256) public balances; // (ERC20)\n', '  // A mapping from an account owner to a map from approved spender to their allowances.\n', '  // (see ERC20 for details about allowances).\n', '  mapping (address => mapping (address => uint256)) public allowed; // (ERC20)\n', '\n', '  //// Events ////\n', '  event MigrationInfoSet(string newMigrationInfo);\n', '\n', '  // This is to be used when migration to a new contract starts.\n', '  // This string can be used for any authorative information re the migration\n', '  // (e.g. address to use for migration, or URL to explain where to find more info)\n', '  string public migrationInfo = "";\n', '\n', '  // The only address that can set migrationContractAddress, a secure multisig.\n', '  address public migrationInfoSetter;\n', '\n', '  //// Modifiers ////\n', '  modifier onlyFromMigrationInfoSetter {\n', '    if (msg.sender != migrationInfoSetter) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  //// Public functions ////\n', '  function SmartEnergy(address _migrationInfoSetter) {\n', '    if (_migrationInfoSetter == 0) throw;\n', '    migrationInfoSetter = _migrationInfoSetter;\n', '    // Upon creation, all tokens belong to the deployer.\n', '    balances[msg.sender] = totalTokens;\n', '  }\n', '\n', '  // See ERC20\n', '  function totalSupply() constant returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  // See ERC20\n', '  // WARNING: If you call this with the address of a contract, the contract will receive the\n', '  // funds, but will have no idea where they came from. Furthermore, if the contract is\n', '  // not aware of SET, the tokens will remain locked away in the contract forever.\n', '  // It is always recommended to call instead compareAndApprove() (or approve()) and have the\n', '  // receiving contract withdraw the money using transferFrom().\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if (balances[msg.sender] >= _value) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  // See ERC20\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  // See ERC20\n', '  function balanceOf(address _owner) constant public returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // See ERC20\n', '  // NOTE: this method is vulnerable and is placed here only to follow the ERC20 standard.\n', '  // Before using, please take a look at the better compareAndApprove below.\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  // A vulernability of the approve method in the ERC20 standard was identified by\n', '  // Miko Vainio here:\n', '  // https://drive.google.com/open?id=1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\n', "  // It's better to use this method which is not susceptible to over-withdrawing by the approvee.\n", '  /// @param _spender The address to approve\n', '  /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\n', '  /// @param _newValue The new value to approve, this will replace the _currentValue\n', "  /// @return bool Whether the approval was a success (see ERC20's `approve`)\n", '  function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\n', '    if (allowed[msg.sender][_spender] != _currentValue) {\n', '      return false;\n', '    }\n', '    return approve(_spender, _newValue);\n', '  }\n', '\n', '  // See ERC20\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  // Allows setting a descriptive string, which will aid any users in migrating their token\n', "  // to a newer version of the contract. This field provides a kind of 'double-layer' of\n", '  // authentication for any migration announcement, as it can only be set by PowerLedger.\n', '  /// @param _migrationInfo The information string to be stored on the contract\n', '  function setMigrationInfo(string _migrationInfo) onlyFromMigrationInfoSetter public {\n', '    migrationInfo = _migrationInfo;\n', '    MigrationInfoSet(_migrationInfo);\n', '  }\n', '\n', '  // To be used if the migrationInfoSetter wishes to transfer the migrationInfoSetter\n', '  // permission to a new account, e.g. because of change in personnel, a concern that account\n', '  // may have been compromised etc.\n', '  /// @param _newMigrationInfoSetter The address of the new Migration Info Setter\n', '  function changeMigrationInfoSetter(address _newMigrationInfoSetter) onlyFromMigrationInfoSetter public {\n', '    migrationInfoSetter = _newMigrationInfoSetter;\n', '  }\n', '}']