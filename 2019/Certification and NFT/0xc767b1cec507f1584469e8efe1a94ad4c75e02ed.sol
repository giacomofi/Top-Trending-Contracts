['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * \n', ' * World War Goo - Competitive Idle Game\n', ' * \n', ' * https://ethergoo.io\n', ' * \n', ' */\n', '\n', 'contract PremiumFactories {\n', '    \n', '    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\n', '    address owner;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    mapping(uint256 => PremiumUnit) premiumUnits; // Contracts for each premium unit (unitId)\n', '    mapping(uint256 => PremiumFactory) premiumFactories; // Factory Id\n', '    \n', '    uint256 minPrice = 0.5 ether;\n', '    uint256 dailyDegradation = 10; // 1% a day\n', '    uint256 maxGasPrice = 20000000000; // 20 Gwei \n', '    uint256 constant LAUNCH_TIME = 1558814400;\n', '    \n', '    struct PremiumFactory {\n', '        address owner;\n', '        uint256 unitId;\n', '        uint256 price;\n', '        uint256 lastFlipTime; // Last time factory was purchased\n', '        uint256 lastClaimTimestamp; // Last time factory produced units\n', '    }\n', '    \n', '    function purchaseFactory(uint256 factoryId) external payable {\n', '        require(msg.sender == tx.origin);\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(now >= LAUNCH_TIME);\n', '        \n', '        PremiumFactory memory factory = premiumFactories[factoryId];\n', '        require(msg.sender != factory.owner && factory.owner > 0);\n', '        \n', '        uint256 currentFactoryPrice = getFactoryPrice(factory);\n', '        require(msg.value >= currentFactoryPrice);\n', '        \n', '        \n', '        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\n', '        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / premiumUnit.unitProductionSeconds();\n', '        if (unitsProduced == 0) {\n', '            unitsProduced++; // Round up (so every owner gets at least 1 unit)\n', '        }\n', '        premiumUnit.mintUnit(factory.owner, unitsProduced);\n', '        \n', '        // Send profit to previous owner (and bankroll)\n', '        uint256 previousOwnerProfit = currentFactoryPrice * 94 / 100; // 94% of 120% (so ~13% profit)\n', '        factory.owner.transfer(previousOwnerProfit);\n', '        bankroll.depositEth.value(currentFactoryPrice - previousOwnerProfit)(50, 50); // Remaining 7% cut\n', '        \n', '        // Update factory\n', '        factory.price = currentFactoryPrice * 120 / 100;\n', '        factory.owner = msg.sender;\n', '        factory.lastFlipTime = now;\n', '        factory.lastClaimTimestamp = now;\n', '        premiumFactories[factoryId] = factory;\n', '        \n', '        // Return overpayments\n', '        if (msg.value > currentFactoryPrice) {\n', '            msg.sender.transfer(msg.value - currentFactoryPrice);\n', '        }\n', '    }\n', '    \n', '    function getFactoryPrice(PremiumFactory factory) internal view returns (uint256 factoryPrice) {\n', '        uint256 secondsSinceLastFlip = 0;\n', '        if (now > factory.lastFlipTime) { // Edge case for initial listing\n', '            secondsSinceLastFlip = now - factory.lastFlipTime;\n', '        }\n', '        \n', '        uint256 priceReduction = (secondsSinceLastFlip * dailyDegradation * factory.price) / 86400000;\n', '        \n', '        factoryPrice = factory.price;\n', '        if (priceReduction > factoryPrice || factoryPrice - priceReduction < minPrice) {\n', '            factoryPrice = minPrice;\n', '        } else {\n', '            factoryPrice -= priceReduction;\n', '        }\n', '    }\n', '    \n', '    function getFactories(uint256 endId) external view returns (uint256[] factoryIds, address[] owners, uint256[] unitIds, uint256[] prices, uint256[] lastClaimTime) {\n', '        factoryIds = new uint256[](endId);\n', '        owners = new address[](endId);\n', '        unitIds = new uint256[](endId);\n', '        prices = new uint256[](endId);\n', '        lastClaimTime = new uint256[](endId);\n', '        \n', '        for (uint256 i = 0; i < endId; i++) {\n', '            PremiumFactory memory factory = premiumFactories[i+1]; // Id starts at 1\n', '            factoryIds[i] = i+1;\n', '            owners[i] = factory.owner;\n', '            unitIds[i] = factory.unitId;\n', '            prices[i] = getFactoryPrice(factory);\n', '            lastClaimTime[i] = factory.lastClaimTimestamp;\n', '        }\n', '    }\n', '    \n', '    // Just incase needs tweaking for longevity\n', '    function updateFactoryConfig(uint256 newMinPrice, uint256 newDailyDegradation, uint256 newMaxGasPrice) external {\n', '        require(msg.sender == owner);\n', '        minPrice = newMinPrice;\n', '        dailyDegradation = newDailyDegradation;\n', '        maxGasPrice = newMaxGasPrice;\n', '    }\n', '    \n', '    function addPremiumUnit(address premiumUnitContract) external {\n', '        require(msg.sender == owner);\n', '        PremiumUnit unit = PremiumUnit(premiumUnitContract);\n', '        premiumUnits[unit.unitId()] = unit;\n', '    }\n', '    \n', '    function addFactory(uint256 id, uint256 unitId, address player, uint256 startPrice) external {\n', '        require(msg.sender == owner);\n', '        require(premiumFactories[id].owner == 0);\n', '        require(premiumUnits[unitId].unitId() == unitId);\n', '        \n', '        PremiumFactory memory newFactory;\n', '        newFactory.owner = player;\n', '        newFactory.unitId = unitId;\n', '        newFactory.price = startPrice;\n', '        newFactory.lastClaimTimestamp = now;\n', '        newFactory.lastFlipTime = LAUNCH_TIME;\n', '        \n', '        premiumFactories[id] = newFactory;\n', '    }\n', '    \n', '    function claimUnits(uint256 factoryId, bool equip) external {\n', '        PremiumFactory storage factory = premiumFactories[factoryId];\n', '        require(factory.owner == msg.sender);\n', '        \n', '        // Claim all units produced by a factory (since last claimed)\n', '        PremiumUnit premiumUnit = premiumUnits[factory.unitId];\n', '        uint256 unitProductionSeconds = premiumUnit.unitProductionSeconds(); // Seconds to produce one unit\n', '        uint256 unitsProduced = (now - factory.lastClaimTimestamp) / unitProductionSeconds;\n', '        require(unitsProduced > 0);\n', '        factory.lastClaimTimestamp += (unitProductionSeconds * unitsProduced);\n', '        \n', '        // Mints erc-20 premium units\n', '        premiumUnit.mintUnit(msg.sender, unitsProduced);\n', '        \n', '        // Allow equip in one tx too\n', '        if (equip) {\n', '             premiumUnit.equipUnit(msg.sender, uint80(unitsProduced), 100);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '}\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external constant returns (uint);\n', '    function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\n', '}\n', '\n', 'contract Bankroll {\n', '     function depositEth(uint256 gooAllocation, uint256 tokenAllocation) payable external;\n', '}\n', '\n', 'contract PremiumUnit {\n', '    function mintUnit(address player, uint256 amount) external;\n', '    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external;\n', '    uint256 public unitId;\n', '    uint256 public unitProductionSeconds;\n', '}\n', '\n', 'contract Units {\n', '    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\n', '    function mintUnitExternal(uint256 unit, uint80 amount, address player, uint8 chosenPosition) external;\n', '    function deleteUnitExternal(uint80 amount, uint256 unit, address player) external;\n', '    \n', '    struct UnitsOwned {\n', '        uint80 units;\n', '        uint8 factoryBuiltFlag;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']