['//\n', '// Our shop contract acts as a payment provider for our in-game shop system. \n', '// Coin packages that are purchased here are being picked up by our offchain \n', '// sync network and are then translated into in-game assets. This happens with\n', '// minimal delay and enables a fluid gameplay experience. An in-game notification\n', '// informs players about the successful purchase of coins.\n', '// \n', '// Prices are scaled against the current USD value of ETH courtesy of\n', '// MAKERDAO (https://developer.makerdao.com/feeds/) \n', "// This enables us to match our native In-App-Purchase prices from e.g. Apple's AppStore\n", '// We can also reduce the price of packages temporarily for e.g. events and promotions.\n', '//\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) constant returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    function DSAuth() {\n', '        owner = msg.sender;\n', '        LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        assert(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    modifier authorized(bytes4 sig) {\n', '        assert(isAuthorized(msg.sender, sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '\n', '    function assert(bool x) internal {\n', '        if (!x) throw;\n', '    }\n', '}\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '\tuint\t \t  wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract DSThing is DSAuth, DSNote, DSMath {\n', '}\n', '\n', 'contract DSValue is DSThing {\n', '    bool    has;\n', '    bytes32 val;\n', '    function peek() constant returns (bytes32, bool) {\n', '        return (val,has);\n', '    }\n', '    function read() constant returns (bytes32) {\n', '        var (wut, has) = peek();\n', '        assert(has);\n', '        return wut;\n', '    }\n', '    function poke(bytes32 wut) note auth {\n', '        val = wut;\n', '        has = true;\n', '    }\n', '    function void() note auth { // unset the value\n', '        has = false;\n', '    }\n', '}\n', '\n', 'contract Medianizer is DSValue {\n', '    mapping (bytes12 => address) public values;\n', '    mapping (address => bytes12) public indexes;\n', '    bytes12 public next = 0x1;\n', '\n', '    uint96 public min = 0x1;\n', '\n', '    function set(address wat) auth {\n', '        bytes12 nextId = bytes12(uint96(next) + 1);\n', '        assert(nextId != 0x0);\n', '        set(next, wat);\n', '        next = nextId;\n', '    }\n', '\n', '    function set(bytes12 pos, address wat) note auth {\n', '        if (pos == 0x0) throw;\n', '\n', '        if (wat != 0 && indexes[wat] != 0) throw;\n', '\n', '        indexes[values[pos]] = 0; // Making sure to remove a possible existing address in that position\n', '\n', '        if (wat != 0) {\n', '            indexes[wat] = pos;\n', '        }\n', '\n', '        values[pos] = wat;\n', '    }\n', '\n', '    function setMin(uint96 min_) note auth {\n', '        if (min_ == 0x0) throw;\n', '        min = min_;\n', '    }\n', '\n', '    function setNext(bytes12 next_) note auth {\n', '        if (next_ == 0x0) throw;\n', '        next = next_;\n', '    }\n', '\n', '    function unset(bytes12 pos) {\n', '        set(pos, 0);\n', '    }\n', '\n', '    function unset(address wat) {\n', '        set(indexes[wat], 0);\n', '    }\n', '\n', '    function poke() {\n', '        poke(0);\n', '    }\n', '\n', '    function poke(bytes32) note {\n', '        (val, has) = compute();\n', '    }\n', '\n', '    function compute() constant returns (bytes32, bool) {\n', '        bytes32[] memory wuts = new bytes32[](uint96(next) - 1);\n', '        uint96 ctr = 0;\n', '        for (uint96 i = 1; i < uint96(next); i++) {\n', '            if (values[bytes12(i)] != 0) {\n', '                var (wut, wuz) = DSValue(values[bytes12(i)]).peek();\n', '                if (wuz) {\n', '                    if (ctr == 0 || wut >= wuts[ctr - 1]) {\n', '                        wuts[ctr] = wut;\n', '                    } else {\n', '                        uint96 j = 0;\n', '                        while (wut >= wuts[j]) {\n', '                            j++;\n', '                        }\n', '                        for (uint96 k = ctr; k > j; k--) {\n', '                            wuts[k] = wuts[k - 1];\n', '                        }\n', '                        wuts[j] = wut;\n', '                    }\n', '                    ctr++;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (ctr < min) return (val, false);\n', '\n', '        bytes32 value;\n', '        if (ctr % 2 == 0) {\n', '            uint128 val1 = uint128(wuts[(ctr / 2) - 1]);\n', '            uint128 val2 = uint128(wuts[ctr / 2]);\n', '            value = bytes32(wdiv(hadd(val1, val2), 2 ether));\n', '        } else {\n', '            value = wuts[(ctr - 1) / 2];\n', '        }\n', '\n', '        return (value, true);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * via OpenZeppelin\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ChainmonstersMedianizer is Ownable {\n', '\n', '    address medianizerBase;\n', '    Medianizer makerMed;\n', '\n', '    constructor(address _medianizerContract) public {\n', '        owner = msg.sender;\n', '\n', '        medianizerBase = _medianizerContract;\n', '\n', '        makerMed = Medianizer(medianizerBase);\n', '    }\n', '\n', '    function updateMedianizerBase(address _medianizerContract) public onlyOwner {\n', '        medianizerBase = _medianizerContract;\n', '        makerMed = Medianizer(medianizerBase);\n', '    }\n', '\n', '    function getUSDPrice() public view returns (uint256) {\n', '        return bytesToUint(toBytes(makerMed.read()));\n', '    }\n', '    \n', '    function isMedianizer() public view returns (bool) {\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '    function toBytes(bytes32 _data) public pure returns (bytes) {\n', '        return abi.encodePacked(_data);\n', '    }\n', '\n', '    function bytesToUint(bytes b) public pure returns (uint256){\n', '        uint256 number;\n', '        for(uint i=0;i<b.length;i++){\n', '            number = number + uint(b[i])*(2**(8*(b.length-(i+1))));\n', '        }\n', '        return number;\n', '    }\n', '\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b >= a) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ChainmonstersShop {\n', '    using SafeMath for uint256; \n', '    \n', '    // static\n', '    address public owner;\n', '    \n', '    // start auction manually at given time\n', '    bool started;\n', '\n', '    uint256 public totalCoinsSold;\n', '\n', '    address medianizer;\n', '    uint256 shiftValue = 100; // double digit shifting to support prices like $29.99\n', '    uint256 multiplier = 10000; // internal multiplier\n', '\n', '    struct Package {\n', '        // price in USD\n', '        uint256 price;\n', '        // reference to in-game equivalent e.g. "100 Coins"\n', '        string packageReference;\n', '        // available for purchase?\n', '        bool isActive;\n', '        // amount of coins\n', '        uint256 coinsAmount;\n', '    }\n', '\n', '    \n', '    event LogPurchase(address _from, uint256 _price, string _packageReference);\n', '\n', '    mapping(address => uint256) public addressToCoinsPurchased;\n', '    Package[] packages;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '\n', '        started = false;\n', '    }\n', '\n', '    function startShop() public onlyOwner {\n', '        require(started == false);\n', '\n', '    }\n', '\n', '    // in case of contract switch or adding new packages\n', '    function pauseShop() public onlyOwner {\n', '        require(started == true);\n', '    }\n', '\n', '    function isStarted() public view returns (bool success) {\n', '        return started;\n', '    }\n', '\n', '    function purchasePackage(uint256 _id) public\n', '        payable\n', '        returns (bool success)\n', '        {\n', '            require(started == true);\n', '            require(packages[_id].isActive == true);\n', '            require(msg.sender != owner);\n', '            require(msg.value == priceOf(packages[_id].price)); // only accept 100% accurate prices\n', '\n', '            addressToCoinsPurchased[msg.sender] += packages[_id].coinsAmount;\n', '            totalCoinsSold += packages[_id].coinsAmount;\n', '            emit LogPurchase(msg.sender, msg.value, packages[_id].packageReference);\n', '        }\n', '\n', '    function addPackage(uint256 _price, string _packageReference, bool _isActive, uint256 _coinsAmount)\n', '        external\n', '        onlyOwner\n', '        {\n', '            require(_price > 0);\n', '            Package memory _package = Package({\n', '            price: uint256(_price),\n', '            packageReference: string(_packageReference),\n', '            isActive: bool(_isActive),\n', '            coinsAmount: uint256(_coinsAmount)\n', '        });\n', '\n', '        uint256 newPackageId = packages.push(_package);\n', '\n', '        }\n', '\n', '    function setPrice(uint256 _packageId, uint256 _newPrice)\n', '        external\n', '        onlyOwner\n', '        {\n', '            require(packages[_packageId].price > 0);\n', '            packages[_packageId].price = _newPrice;\n', '        }\n', '\n', '    function getPackage(uint256 _id)\n', '        external \n', '        view\n', '        returns (uint256 priceInETH, uint256 priceInUSD, string packageReference, uint256 coinsAmount )\n', '        {\n', '            Package storage package = packages[_id];\n', '            priceInETH = priceOf(_id);\n', '            priceInUSD = package.price;\n', '            packageReference = package.packageReference;\n', '            coinsAmount = package.coinsAmount;\n', '        \n', '        }\n', '\n', ' \n', '  function priceOf(uint256 _packageId)\n', '    public\n', '    view\n', '    returns (uint256) \n', '    {\n', '\n', '        // if no medianizer is set then return fixed price(!)\n', '        if (medianizer == address(0x0)) {\n', '          return packages[_packageId].price;\n', '        }\n', '        else {\n', '          // the price of usd/eth gets returned from medianizer\n', '          uint256 USDinWei = ChainmonstersMedianizer(medianizer).getUSDPrice();\n', '    \n', '          uint256 multValue = (packages[_packageId].price.mul(multiplier)).div(USDinWei.div(1 ether));\n', '          uint256 inWei = multValue.mul(1 ether);\n', '          uint256 result = inWei.div(shiftValue.mul(multiplier));\n', '          return result;\n', '        }\n', '    \n', '  }\n', '  \n', '  function getPackagesCount()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return packages.length;\n', '    }\n', '\n', '  function setMedianizer(ChainmonstersMedianizer _medianizer)\n', '     public\n', '    onlyOwner \n', '    {\n', '    require(_medianizer.isMedianizer(), "given address is not a medianizer contract!");\n', '    medianizer = _medianizer;\n', '  }\n', '\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    \n', '   \n', '    \n', '}']