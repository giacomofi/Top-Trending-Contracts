['pragma solidity ^0.5.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract TwitterPoll is Ownable {\n', '  using ConcatLib for string[];\n', '  string public question;\n', '  string[] public yesVotes;\n', '  string[] public noVotes;\n', '\n', '  constructor(string memory _question) public {\n', '    question = _question;\n', '  }\n', '\n', '  function submitVotes(string[] memory _yesVotes, string[] memory _noVotes) public onlyOwner() {\n', '    yesVotes.concat(_yesVotes);\n', '    noVotes.concat(_noVotes);\n', '  }\n', '\n', '  function getYesVotes() public view returns (string[] memory){\n', '    return yesVotes;\n', '  }\n', '\n', '  function getNoVotes() public view returns (string[] memory){\n', '    return noVotes;\n', '  }\n', '}\n', '\n', 'library ConcatLib {\n', '  function concat(string[] storage _preBytes, string[] memory _postBytes) internal  {\n', '    for (uint i=0; i < _postBytes.length; i++) {\n', '      _preBytes.push(_postBytes[i]);\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.5.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract TwitterPoll is Ownable {\n', '  using ConcatLib for string[];\n', '  string public question;\n', '  string[] public yesVotes;\n', '  string[] public noVotes;\n', '\n', '  constructor(string memory _question) public {\n', '    question = _question;\n', '  }\n', '\n', '  function submitVotes(string[] memory _yesVotes, string[] memory _noVotes) public onlyOwner() {\n', '    yesVotes.concat(_yesVotes);\n', '    noVotes.concat(_noVotes);\n', '  }\n', '\n', '  function getYesVotes() public view returns (string[] memory){\n', '    return yesVotes;\n', '  }\n', '\n', '  function getNoVotes() public view returns (string[] memory){\n', '    return noVotes;\n', '  }\n', '}\n', '\n', 'library ConcatLib {\n', '  function concat(string[] storage _preBytes, string[] memory _postBytes) internal  {\n', '    for (uint i=0; i < _postBytes.length; i++) {\n', '      _preBytes.push(_postBytes[i]);\n', '    }\n', '  }\n', '}']
